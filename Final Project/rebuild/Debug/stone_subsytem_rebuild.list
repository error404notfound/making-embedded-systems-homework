
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800e768  0800e768  0001e768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecc4  0800ecc4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecc4  0800ecc4  0001ecc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eccc  0800eccc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eccc  0800eccc  0001eccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ecd0  0800ecd0  0001ecd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800ecd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003964  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200039f8  200039f8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028909  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b9b  00000000  00000000  000489cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc8  00000000  00000000  0004e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b78  00000000  00000000  00050330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca35  00000000  00000000  00051ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a203  00000000  00000000  0007e8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec01e  00000000  00000000  000a8ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00194afe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008498  00000000  00000000  00194b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e750 	.word	0x0800e750

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800e750 	.word	0x0800e750

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fbc1 	bl	8000e78 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc12 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc0f 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc0c 	bl	8000f20 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800e768 	.word	0x0800e768
 8000738:	0800e7b0 	.word	0x0800e7b0
 800073c:	0800e7b4 	.word	0x0800e7b4
 8000740:	200001b0 	.word	0x200001b0
 8000744:	200000b0 	.word	0x200000b0

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fba1 	bl	8000ea8 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb50 	bl	8000e40 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fb96 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fb93 	bl	8000f20 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fb90 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fb84 	bl	8000f20 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fb81 	bl	8000f20 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fb5e 	bl	8000f20 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fb5b 	bl	8000f20 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb44 	bl	8000f20 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001b0 	.word	0x200001b0
 80008a4:	200000b0 	.word	0x200000b0
 80008a8:	200001b4 	.word	0x200001b4
 80008ac:	0800e7b8 	.word	0x0800e7b8
 80008b0:	0800e7c0 	.word	0x0800e7c0
 80008b4:	0800e7b0 	.word	0x0800e7b0
 80008b8:	0800e7c8 	.word	0x0800e7c8
 80008bc:	0800e7b4 	.word	0x0800e7b4

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00c fd8e 	bl	800d4e8 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa23 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f9b7 	bl	8000f20 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000cac:	2309      	movs	r3, #9
 8000cae:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	e01e      	b.n	8000cf4 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000cb6:	4914      	ldr	r1, [pc, #80]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 f92a 	bl	8000f20 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000ccc:	480f      	ldr	r0, [pc, #60]	; (8000d0c <ConsoleCommandHelp+0x6c>)
 8000cce:	f000 f927 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	3308      	adds	r3, #8
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <ConsoleCommandHelp+0x68>)
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f91c 	bl	8000f20 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000ce8:	4809      	ldr	r0, [pc, #36]	; (8000d10 <ConsoleCommandHelp+0x70>)
 8000cea:	f000 f919 	bl	8000f20 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3db      	bcc.n	8000cb6 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000cfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	0800e874 	.word	0x0800e874
 8000d0c:	0800e824 	.word	0x0800e824
 8000d10:	0800e828 	.word	0x0800e828

08000d14 <ConsoleCommandToggleLed>:
static eCommandResult_T ConsoleCommandToggleLed(const char buffer[]){
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ConsoleCommandGyroStatus>:
static eCommandResult_T ConsoleCommandGyroStatus(const char buffer[]){
 8000d2e:	b480      	push	{r7}
 8000d30:	b085      	sub	sp, #20
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <ConsoleCommandGyroDump>:
static eCommandResult_T ConsoleCommandGyroDump(const char buffer[]){
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
	return result;
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <ConsoleCommandParamExampleInt16>:
static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	461a      	mov	r2, r3
 8000d72:	2101      	movs	r1, #1
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff fdd5 	bl	8000924 <ConsoleReceiveParamInt16>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d116      	bne.n	8000db2 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <ConsoleCommandParamExampleInt16+0x58>)
 8000d86:	f000 f8cb 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000d8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fefd 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000d94:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <ConsoleCommandParamExampleInt16+0x5c>)
 8000d96:	f000 f8c3 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000d9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d9e:	b29b      	uxth	r3, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fe66 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <ConsoleCommandParamExampleInt16+0x60>)
 8000da8:	f000 f8ba 	bl	8000f20 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <ConsoleCommandParamExampleInt16+0x64>)
 8000dae:	f000 f8b7 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	0800e82c 	.word	0x0800e82c
 8000dc0:	0800e83c 	.word	0x0800e83c
 8000dc4:	0800e844 	.word	0x0800e844
 8000dc8:	0800e828 	.word	0x0800e828

08000dcc <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2101      	movs	r1, #1
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff fdff 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000dee:	f000 f897 	bl	8000f20 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe3c 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000dfc:	f000 f890 	bl	8000f20 <ConsoleIoSendString>
	}
	return result;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0800e848 	.word	0x0800e848
 8000e10:	0800e828 	.word	0x0800e828

08000e14 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <ConsoleCommandVer+0x24>)
 8000e22:	f000 f87d 	bl	8000f20 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <ConsoleCommandVer+0x28>)
 8000e28:	f000 f87a 	bl	8000f20 <ConsoleIoSendString>
	return result;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800e858 	.word	0x0800e858
 8000e3c:	0800e828 	.word	0x0800e828

08000e40 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <ConsoleCommandsGetTable+0x10>)
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	0800e874 	.word	0x0800e874

08000e54 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
	charCount = 0;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <reset+0x1c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <reset+0x20>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]

}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c0 	.word	0x200001c0
 8000e74:	200001bc 	.word	0x200001bc

08000e78 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <ConsoleIoInit+0x28>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <ConsoleIoInit+0x2c>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f006 fe33 	bl	8007afa <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001b8 	.word	0x200001b8
 8000ea4:	200001ce 	.word	0x200001ce

08000ea8 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <ConsoleIoReceive+0x68>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d11f      	bne.n	8000f00 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000ec0:	e00a      	b.n	8000ed8 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4912      	ldr	r1, [pc, #72]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	440a      	add	r2, r1
 8000ece:	7812      	ldrb	r2, [r2, #0]
 8000ed0:	701a      	strb	r2, [r3, #0]
			i++;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	461a      	mov	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d3ed      	bcc.n	8000ec2 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <ConsoleIoReceive+0x70>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000ef0:	4908      	ldr	r1, [pc, #32]	; (8000f14 <ConsoleIoReceive+0x6c>)
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <ConsoleIoReceive+0x74>)
 8000ef4:	f00c fc2c 	bl	800d750 <iprintf>
		// reset counts
		reset();
 8000ef8:	f7ff ffac 	bl	8000e54 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e003      	b.n	8000f08 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200001bc 	.word	0x200001bc
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	0800e86c 	.word	0x0800e86c

08000f20 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleIoSendString+0x1c>)
 8000f2c:	f00c fc10 	bl	800d750 <iprintf>
	return CONSOLE_SUCCESS;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	0800e86c 	.word	0x0800e86c

08000f40 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f4e:	7811      	ldrb	r1, [r2, #0]
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_UART_RxCpltCallback+0x4c>)
 8000f52:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f5c:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b0a      	cmp	r3, #10
 8000f64:	d102      	bne.n	8000f6c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_UART_RxCpltCallback+0x50>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_UART_RxCpltCallback+0x54>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4905      	ldr	r1, [pc, #20]	; (8000f88 <HAL_UART_RxCpltCallback+0x48>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f006 fdc0 	bl	8007afa <HAL_UART_Receive_IT>

}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200001c0 	.word	0x200001c0
 8000f88:	200001ce 	.word	0x200001ce
 8000f8c:	200001c4 	.word	0x200001c4
 8000f90:	200001bc 	.word	0x200001bc
 8000f94:	200001b8 	.word	0x200001b8

08000f98 <HAL_GPIO_EXTI_Callback>:
int CliModeProcess(){return 0;}
int StartPreviouseModeProcess(){return 0;}
int InModeProcess(){return 0;}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x30>)
 8000fa8:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	4619      	mov	r1, r3
 8000fae:	68b8      	ldr	r0, [r7, #8]
 8000fb0:	f002 f950 	bl	8003254 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x34>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
	}

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	200001cf 	.word	0x200001cf

08000fd0 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8000fd8:	4a40      	ldr	r2, [pc, #256]	; (80010dc <Lis3dhInit+0x10c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8000fde:	238f      	movs	r3, #143	; 0x8f
 8000fe0:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 8000fe2:	4b3e      	ldr	r3, [pc, #248]	; (80010dc <Lis3dhInit+0x10c>)
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	2130      	movs	r1, #48	; 0x30
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fec:	2201      	movs	r2, #1
 8000fee:	f004 f9ed 	bl	80053cc <HAL_I2C_IsDeviceReady>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000ff6:	4b39      	ldr	r3, [pc, #228]	; (80010dc <Lis3dhInit+0x10c>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	2130      	movs	r1, #48	; 0x30
 8000ffc:	f107 0214 	add.w	r2, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	f003 febc 	bl	8004d84 <HAL_I2C_Master_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 8001016:	f000 f8cf 	bl	80011b8 <errorHandler>





}
 800101a:	e05b      	b.n	80010d4 <Lis3dhInit+0x104>
	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <Lis3dhInit+0x10c>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	2130      	movs	r1, #48	; 0x30
 8001022:	f107 0208 	add.w	r2, r7, #8
 8001026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2302      	movs	r3, #2
 800102e:	f003 ffa7 	bl	8004f80 <HAL_I2C_Master_Receive>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d002      	beq.n	8001042 <Lis3dhInit+0x72>
	        	errorHandler();
 800103c:	f000 f8bc 	bl	80011b8 <errorHandler>
}
 8001040:	e048      	b.n	80010d4 <Lis3dhInit+0x104>
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001042:	23a0      	movs	r3, #160	; 0xa0
 8001044:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <Lis3dhInit+0x10c>)
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	2130      	movs	r1, #48	; 0x30
 800104c:	f107 0214 	add.w	r2, r7, #20
 8001050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	f003 fe94 	bl	8004d84 <HAL_I2C_Master_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <Lis3dhInit+0x10c>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	2130      	movs	r1, #48	; 0x30
 8001066:	f107 0208 	add.w	r2, r7, #8
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2302      	movs	r3, #2
 8001072:	f003 ff85 	bl	8004f80 <HAL_I2C_Master_Receive>
 8001076:	4603      	mov	r3, r0
 8001078:	75fb      	strb	r3, [r7, #23]
				sendBuff[0] = LIS3DH_REG_CTRL1;
 800107a:	2320      	movs	r3, #32
 800107c:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = 0x57;
 800107e:	2357      	movs	r3, #87	; 0x57
 8001080:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <Lis3dhInit+0x10c>)
 8001084:	6818      	ldr	r0, [r3, #0]
 8001086:	2130      	movs	r1, #48	; 0x30
 8001088:	f107 0214 	add.w	r2, r7, #20
 800108c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2302      	movs	r3, #2
 8001094:	f003 fe76 	bl	8004d84 <HAL_I2C_Master_Transmit>
 8001098:	4603      	mov	r3, r0
 800109a:	75fb      	strb	r3, [r7, #23]
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <Lis3dhInit+0x10c>)
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	2130      	movs	r1, #48	; 0x30
 80010a6:	f107 0214 	add.w	r2, r7, #20
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	f003 fe67 	bl	8004d84 <HAL_I2C_Master_Transmit>
 80010b6:	4603      	mov	r3, r0
 80010b8:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <Lis3dhInit+0x10c>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	2130      	movs	r1, #48	; 0x30
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2302      	movs	r3, #2
 80010cc:	f003 ff58 	bl	8004f80 <HAL_I2C_Master_Receive>
 80010d0:	4603      	mov	r3, r0
 80010d2:	75fb      	strb	r3, [r7, #23]
}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001d0 	.word	0x200001d0

080010e0 <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 80010e6:	23a7      	movs	r3, #167	; 0xa7
 80010e8:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <Lis3dhGetAcc+0xd4>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	2130      	movs	r1, #48	; 0x30
 80010f0:	f107 0214 	add.w	r2, r7, #20
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	f003 fe42 	bl	8004d84 <HAL_I2C_Master_Transmit>
 8001100:	4603      	mov	r3, r0
 8001102:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <Lis3dhGetAcc+0xd4>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	2130      	movs	r1, #48	; 0x30
 800110a:	f107 0208 	add.w	r2, r7, #8
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	f003 ff33 	bl	8004f80 <HAL_I2C_Master_Receive>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 800111e:	23a8      	movs	r3, #168	; 0xa8
 8001120:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <Lis3dhGetAcc+0xd4>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	2130      	movs	r1, #48	; 0x30
 8001128:	f107 0214 	add.w	r2, r7, #20
 800112c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	f003 fe26 	bl	8004d84 <HAL_I2C_Master_Transmit>
 8001138:	4603      	mov	r3, r0
 800113a:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <Lis3dhGetAcc+0xd4>)
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	2130      	movs	r1, #48	; 0x30
 8001142:	f107 0208 	add.w	r2, r7, #8
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2306      	movs	r3, #6
 800114e:	f003 ff17 	bl	8004f80 <HAL_I2C_Master_Receive>
 8001152:	4603      	mov	r3, r0
 8001154:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 8001156:	7a7b      	ldrb	r3, [r7, #9]
 8001158:	b21b      	sxth	r3, r3
 800115a:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 800115c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001160:	b29b      	uxth	r3, r3
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b29a      	uxth	r2, r3
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	b29b      	uxth	r3, r3
 800116a:	4413      	add	r3, r2
 800116c:	b29b      	uxth	r3, r3
 800116e:	b21b      	sxth	r3, r3
 8001170:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 8001172:	7afb      	ldrb	r3, [r7, #11]
 8001174:	b21b      	sxth	r3, r3
 8001176:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 8001178:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800117c:	b29b      	uxth	r3, r3
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b29a      	uxth	r2, r3
 8001182:	7abb      	ldrb	r3, [r7, #10]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	b21b      	sxth	r3, r3
 800118c:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	b21b      	sxth	r3, r3
 8001192:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8001194:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001198:	b29b      	uxth	r3, r3
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b29a      	uxth	r2, r3
 800119e:	7b3b      	ldrb	r3, [r7, #12]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	80bb      	strh	r3, [r7, #4]


	return ret;
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001d0 	.word	0x200001d0

080011b8 <errorHandler>:
	*acelY = LastYAcel;
	*acelZ = LastZAcel;

}
void errorHandler()
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	// handle the error
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 80011d0:	4a5d      	ldr	r2, [pc, #372]	; (8001348 <I3G450D_Init+0x180>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2102      	movs	r1, #2
 80011da:	485c      	ldr	r0, [pc, #368]	; (800134c <I3G450D_Init+0x184>)
 80011dc:	f002 f852 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80011e0:	2014      	movs	r0, #20
 80011e2:	f001 fca7 	bl	8002b34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	4858      	ldr	r0, [pc, #352]	; (800134c <I3G450D_Init+0x184>)
 80011ec:	f002 f84a 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80011f0:	2014      	movs	r0, #20
 80011f2:	f001 fc9f 	bl	8002b34 <HAL_Delay>
	spiTxBuf[0]=0x20;
 80011f6:	4b56      	ldr	r3, [pc, #344]	; (8001350 <I3G450D_Init+0x188>)
 80011f8:	2220      	movs	r2, #32
 80011fa:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80011fc:	4b54      	ldr	r3, [pc, #336]	; (8001350 <I3G450D_Init+0x188>)
 80011fe:	22ff      	movs	r2, #255	; 0xff
 8001200:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001202:	4b51      	ldr	r3, [pc, #324]	; (8001348 <I3G450D_Init+0x180>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	2332      	movs	r3, #50	; 0x32
 8001208:	2202      	movs	r2, #2
 800120a:	4951      	ldr	r1, [pc, #324]	; (8001350 <I3G450D_Init+0x188>)
 800120c:	f005 fb09 	bl	8006822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2102      	movs	r1, #2
 8001214:	484d      	ldr	r0, [pc, #308]	; (800134c <I3G450D_Init+0x184>)
 8001216:	f002 f835 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800121a:	2014      	movs	r0, #20
 800121c:	f001 fc8a 	bl	8002b34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	2102      	movs	r1, #2
 8001224:	4849      	ldr	r0, [pc, #292]	; (800134c <I3G450D_Init+0x184>)
 8001226:	f002 f82d 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800122a:	2014      	movs	r0, #20
 800122c:	f001 fc82 	bl	8002b34 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8001230:	4b47      	ldr	r3, [pc, #284]	; (8001350 <I3G450D_Init+0x188>)
 8001232:	2221      	movs	r2, #33	; 0x21
 8001234:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <I3G450D_Init+0x188>)
 8001238:	2200      	movs	r2, #0
 800123a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <I3G450D_Init+0x180>)
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	2332      	movs	r3, #50	; 0x32
 8001242:	2202      	movs	r2, #2
 8001244:	4942      	ldr	r1, [pc, #264]	; (8001350 <I3G450D_Init+0x188>)
 8001246:	f005 faec 	bl	8006822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	483f      	ldr	r0, [pc, #252]	; (800134c <I3G450D_Init+0x184>)
 8001250:	f002 f818 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001254:	2014      	movs	r0, #20
 8001256:	f001 fc6d 	bl	8002b34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	483b      	ldr	r0, [pc, #236]	; (800134c <I3G450D_Init+0x184>)
 8001260:	f002 f810 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001264:	2014      	movs	r0, #20
 8001266:	f001 fc65 	bl	8002b34 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800126a:	4b39      	ldr	r3, [pc, #228]	; (8001350 <I3G450D_Init+0x188>)
 800126c:	2222      	movs	r2, #34	; 0x22
 800126e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001270:	4b37      	ldr	r3, [pc, #220]	; (8001350 <I3G450D_Init+0x188>)
 8001272:	2200      	movs	r2, #0
 8001274:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001276:	4b34      	ldr	r3, [pc, #208]	; (8001348 <I3G450D_Init+0x180>)
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	2332      	movs	r3, #50	; 0x32
 800127c:	2202      	movs	r2, #2
 800127e:	4934      	ldr	r1, [pc, #208]	; (8001350 <I3G450D_Init+0x188>)
 8001280:	f005 facf 	bl	8006822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2102      	movs	r1, #2
 8001288:	4830      	ldr	r0, [pc, #192]	; (800134c <I3G450D_Init+0x184>)
 800128a:	f001 fffb 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800128e:	2014      	movs	r0, #20
 8001290:	f001 fc50 	bl	8002b34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2102      	movs	r1, #2
 8001298:	482c      	ldr	r0, [pc, #176]	; (800134c <I3G450D_Init+0x184>)
 800129a:	f001 fff3 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800129e:	2014      	movs	r0, #20
 80012a0:	f001 fc48 	bl	8002b34 <HAL_Delay>
	spiTxBuf[0]=0x23;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <I3G450D_Init+0x188>)
 80012a6:	2223      	movs	r2, #35	; 0x23
 80012a8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80012aa:	4b29      	ldr	r3, [pc, #164]	; (8001350 <I3G450D_Init+0x188>)
 80012ac:	2220      	movs	r2, #32
 80012ae:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <I3G450D_Init+0x180>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	2332      	movs	r3, #50	; 0x32
 80012b6:	2202      	movs	r2, #2
 80012b8:	4925      	ldr	r1, [pc, #148]	; (8001350 <I3G450D_Init+0x188>)
 80012ba:	f005 fab2 	bl	8006822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	4822      	ldr	r0, [pc, #136]	; (800134c <I3G450D_Init+0x184>)
 80012c4:	f001 ffde 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80012c8:	2014      	movs	r0, #20
 80012ca:	f001 fc33 	bl	8002b34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2102      	movs	r1, #2
 80012d2:	481e      	ldr	r0, [pc, #120]	; (800134c <I3G450D_Init+0x184>)
 80012d4:	f001 ffd6 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80012d8:	2014      	movs	r0, #20
 80012da:	f001 fc2b 	bl	8002b34 <HAL_Delay>
	spiTxBuf[0]=0x24;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <I3G450D_Init+0x188>)
 80012e0:	2224      	movs	r2, #36	; 0x24
 80012e2:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <I3G450D_Init+0x188>)
 80012e6:	2210      	movs	r2, #16
 80012e8:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <I3G450D_Init+0x180>)
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	2332      	movs	r3, #50	; 0x32
 80012f0:	2202      	movs	r2, #2
 80012f2:	4917      	ldr	r1, [pc, #92]	; (8001350 <I3G450D_Init+0x188>)
 80012f4:	f005 fa95 	bl	8006822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2102      	movs	r1, #2
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <I3G450D_Init+0x184>)
 80012fe:	f001 ffc1 	bl	8003284 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001302:	2014      	movs	r0, #20
 8001304:	f001 fc16 	bl	8002b34 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2102      	movs	r1, #2
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <I3G450D_Init+0x184>)
 800130e:	f001 ffb9 	bl	8003284 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <I3G450D_Init+0x188>)
 8001314:	228f      	movs	r2, #143	; 0x8f
 8001316:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <I3G450D_Init+0x180>)
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	2332      	movs	r3, #50	; 0x32
 800131e:	2201      	movs	r2, #1
 8001320:	490b      	ldr	r1, [pc, #44]	; (8001350 <I3G450D_Init+0x188>)
 8001322:	f005 fa7e 	bl	8006822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <I3G450D_Init+0x180>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	2332      	movs	r3, #50	; 0x32
 800132c:	2201      	movs	r2, #1
 800132e:	4909      	ldr	r1, [pc, #36]	; (8001354 <I3G450D_Init+0x18c>)
 8001330:	f005 fbb3 	bl	8006a9a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2102      	movs	r1, #2
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <I3G450D_Init+0x184>)
 800133a:	f001 ffa3 	bl	8003284 <HAL_GPIO_WritePin>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20003118 	.word	0x20003118
 800134c:	40020800 	.word	0x40020800
 8001350:	2000310c 	.word	0x2000310c
 8001354:	20003111 	.word	0x20003111

08001358 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b098      	sub	sp, #96	; 0x60
 800135c:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 800135e:	2300      	movs	r3, #0
 8001360:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001364:	2300      	movs	r3, #0
 8001366:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800136a:	2300      	movs	r3, #0
 800136c:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 80013b2:	4b5b      	ldr	r3, [pc, #364]	; (8001520 <I3G450D_loop+0x1c8>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <I3G450D_loop+0x6a>
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f000 80c6 	beq.w	800154c <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 80013c0:	e379      	b.n	8001ab6 <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 80013c2:	4b58      	ldr	r3, [pc, #352]	; (8001524 <I3G450D_loop+0x1cc>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	f040 8374 	bne.w	8001ab4 <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2102      	movs	r1, #2
 80013d0:	4855      	ldr	r0, [pc, #340]	; (8001528 <I3G450D_loop+0x1d0>)
 80013d2:	f001 ff57 	bl	8003284 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 80013d6:	4b55      	ldr	r3, [pc, #340]	; (800152c <I3G450D_loop+0x1d4>)
 80013d8:	22a8      	movs	r2, #168	; 0xa8
 80013da:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80013dc:	4b54      	ldr	r3, [pc, #336]	; (8001530 <I3G450D_loop+0x1d8>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	2332      	movs	r3, #50	; 0x32
 80013e2:	2201      	movs	r2, #1
 80013e4:	4951      	ldr	r1, [pc, #324]	; (800152c <I3G450D_loop+0x1d4>)
 80013e6:	f005 fa1c 	bl	8006822 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <I3G450D_loop+0x1d8>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	2332      	movs	r3, #50	; 0x32
 80013f0:	2201      	movs	r2, #1
 80013f2:	4950      	ldr	r1, [pc, #320]	; (8001534 <I3G450D_loop+0x1dc>)
 80013f4:	f005 fb51 	bl	8006a9a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	484a      	ldr	r0, [pc, #296]	; (8001528 <I3G450D_loop+0x1d0>)
 80013fe:	f001 ff41 	bl	8003284 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2102      	movs	r1, #2
 8001406:	4848      	ldr	r0, [pc, #288]	; (8001528 <I3G450D_loop+0x1d0>)
 8001408:	f001 ff3c 	bl	8003284 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <I3G450D_loop+0x1d4>)
 800140e:	22a9      	movs	r2, #169	; 0xa9
 8001410:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <I3G450D_loop+0x1d8>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	2332      	movs	r3, #50	; 0x32
 8001418:	2201      	movs	r2, #1
 800141a:	4944      	ldr	r1, [pc, #272]	; (800152c <I3G450D_loop+0x1d4>)
 800141c:	f005 fa01 	bl	8006822 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 8001420:	4b43      	ldr	r3, [pc, #268]	; (8001530 <I3G450D_loop+0x1d8>)
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	2332      	movs	r3, #50	; 0x32
 8001426:	2201      	movs	r2, #1
 8001428:	4943      	ldr	r1, [pc, #268]	; (8001538 <I3G450D_loop+0x1e0>)
 800142a:	f005 fb36 	bl	8006a9a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	2102      	movs	r1, #2
 8001432:	483d      	ldr	r0, [pc, #244]	; (8001528 <I3G450D_loop+0x1d0>)
 8001434:	f001 ff26 	bl	8003284 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2102      	movs	r1, #2
 800143c:	483a      	ldr	r0, [pc, #232]	; (8001528 <I3G450D_loop+0x1d0>)
 800143e:	f001 ff21 	bl	8003284 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <I3G450D_loop+0x1d4>)
 8001444:	22aa      	movs	r2, #170	; 0xaa
 8001446:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <I3G450D_loop+0x1d8>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	2332      	movs	r3, #50	; 0x32
 800144e:	2201      	movs	r2, #1
 8001450:	4936      	ldr	r1, [pc, #216]	; (800152c <I3G450D_loop+0x1d4>)
 8001452:	f005 f9e6 	bl	8006822 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <I3G450D_loop+0x1d8>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	2332      	movs	r3, #50	; 0x32
 800145c:	2201      	movs	r2, #1
 800145e:	4937      	ldr	r1, [pc, #220]	; (800153c <I3G450D_loop+0x1e4>)
 8001460:	f005 fb1b 	bl	8006a9a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2102      	movs	r1, #2
 8001468:	482f      	ldr	r0, [pc, #188]	; (8001528 <I3G450D_loop+0x1d0>)
 800146a:	f001 ff0b 	bl	8003284 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2102      	movs	r1, #2
 8001472:	482d      	ldr	r0, [pc, #180]	; (8001528 <I3G450D_loop+0x1d0>)
 8001474:	f001 ff06 	bl	8003284 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <I3G450D_loop+0x1d4>)
 800147a:	22ab      	movs	r2, #171	; 0xab
 800147c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <I3G450D_loop+0x1d8>)
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	2332      	movs	r3, #50	; 0x32
 8001484:	2201      	movs	r2, #1
 8001486:	4929      	ldr	r1, [pc, #164]	; (800152c <I3G450D_loop+0x1d4>)
 8001488:	f005 f9cb 	bl	8006822 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <I3G450D_loop+0x1d8>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2332      	movs	r3, #50	; 0x32
 8001492:	2201      	movs	r2, #1
 8001494:	492a      	ldr	r1, [pc, #168]	; (8001540 <I3G450D_loop+0x1e8>)
 8001496:	f005 fb00 	bl	8006a9a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2102      	movs	r1, #2
 800149e:	4822      	ldr	r0, [pc, #136]	; (8001528 <I3G450D_loop+0x1d0>)
 80014a0:	f001 fef0 	bl	8003284 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	481f      	ldr	r0, [pc, #124]	; (8001528 <I3G450D_loop+0x1d0>)
 80014aa:	f001 feeb 	bl	8003284 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <I3G450D_loop+0x1d4>)
 80014b0:	22ac      	movs	r2, #172	; 0xac
 80014b2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <I3G450D_loop+0x1d8>)
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	2332      	movs	r3, #50	; 0x32
 80014ba:	2201      	movs	r2, #1
 80014bc:	491b      	ldr	r1, [pc, #108]	; (800152c <I3G450D_loop+0x1d4>)
 80014be:	f005 f9b0 	bl	8006822 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <I3G450D_loop+0x1d8>)
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	2332      	movs	r3, #50	; 0x32
 80014c8:	2201      	movs	r2, #1
 80014ca:	491e      	ldr	r1, [pc, #120]	; (8001544 <I3G450D_loop+0x1ec>)
 80014cc:	f005 fae5 	bl	8006a9a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2102      	movs	r1, #2
 80014d4:	4814      	ldr	r0, [pc, #80]	; (8001528 <I3G450D_loop+0x1d0>)
 80014d6:	f001 fed5 	bl	8003284 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2102      	movs	r1, #2
 80014de:	4812      	ldr	r0, [pc, #72]	; (8001528 <I3G450D_loop+0x1d0>)
 80014e0:	f001 fed0 	bl	8003284 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <I3G450D_loop+0x1d4>)
 80014e6:	22ad      	movs	r2, #173	; 0xad
 80014e8:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <I3G450D_loop+0x1d8>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	2332      	movs	r3, #50	; 0x32
 80014f0:	2201      	movs	r2, #1
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <I3G450D_loop+0x1d4>)
 80014f4:	f005 f995 	bl	8006822 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <I3G450D_loop+0x1d8>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	2332      	movs	r3, #50	; 0x32
 80014fe:	2201      	movs	r2, #1
 8001500:	4911      	ldr	r1, [pc, #68]	; (8001548 <I3G450D_loop+0x1f0>)
 8001502:	f005 faca 	bl	8006a9a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2102      	movs	r1, #2
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <I3G450D_loop+0x1d0>)
 800150c:	f001 feba 	bl	8003284 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <I3G450D_loop+0x1c8>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8001516:	4b03      	ldr	r3, [pc, #12]	; (8001524 <I3G450D_loop+0x1cc>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
				break;
 800151c:	e2ca      	b.n	8001ab4 <I3G450D_loop+0x75c>
 800151e:	bf00      	nop
 8001520:	200001d5 	.word	0x200001d5
 8001524:	20000000 	.word	0x20000000
 8001528:	40020800 	.word	0x40020800
 800152c:	2000310c 	.word	0x2000310c
 8001530:	20003118 	.word	0x20003118
 8001534:	20003111 	.word	0x20003111
 8001538:	20003112 	.word	0x20003112
 800153c:	20003113 	.word	0x20003113
 8001540:	20003114 	.word	0x20003114
 8001544:	20003115 	.word	0x20003115
 8001548:	20003116 	.word	0x20003116
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 800154c:	4ba0      	ldr	r3, [pc, #640]	; (80017d0 <I3G450D_loop+0x478>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b9e      	ldr	r3, [pc, #632]	; (80017d0 <I3G450D_loop+0x478>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8001562:	4b9b      	ldr	r3, [pc, #620]	; (80017d0 <I3G450D_loop+0x478>)
 8001564:	791b      	ldrb	r3, [r3, #4]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b99      	ldr	r3, [pc, #612]	; (80017d0 <I3G450D_loop+0x478>)
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001578:	4b95      	ldr	r3, [pc, #596]	; (80017d0 <I3G450D_loop+0x478>)
 800157a:	799b      	ldrb	r3, [r3, #6]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b93      	ldr	r3, [pc, #588]	; (80017d0 <I3G450D_loop+0x478>)
 8001582:	795b      	ldrb	r3, [r3, #5]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21b      	sxth	r3, r3
 800158a:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 800158c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <I3G450D_loop+0x47c>)
 8001594:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800159a:	b21a      	sxth	r2, r3
 800159c:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <I3G450D_loop+0x480>)
 800159e:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 80015a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	4b8d      	ldr	r3, [pc, #564]	; (80017dc <I3G450D_loop+0x484>)
 80015a6:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 80015a8:	4b8d      	ldr	r3, [pc, #564]	; (80017e0 <I3G450D_loop+0x488>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	f040 80d5 	bne.w	800175c <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 80015b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b8a      	ldr	r3, [pc, #552]	; (80017e4 <I3G450D_loop+0x48c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80017e8 <I3G450D_loop+0x490>
 80015cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d0:	4b86      	ldr	r3, [pc, #536]	; (80017ec <I3G450D_loop+0x494>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 80015d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80015da:	b21b      	sxth	r3, r3
 80015dc:	461a      	mov	r2, r3
 80015de:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <I3G450D_loop+0x498>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ec:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80017e8 <I3G450D_loop+0x490>
 80015f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f4:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <I3G450D_loop+0x49c>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 80015fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <I3G450D_loop+0x4a0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	ee07 3a90 	vmov	s15, r3
 800160a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80017e8 <I3G450D_loop+0x490>
 8001612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001616:	4b79      	ldr	r3, [pc, #484]	; (80017fc <I3G450D_loop+0x4a4>)
 8001618:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 800161c:	4b78      	ldr	r3, [pc, #480]	; (8001800 <I3G450D_loop+0x4a8>)
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8001620:	4b72      	ldr	r3, [pc, #456]	; (80017ec <I3G450D_loop+0x494>)
 8001622:	ed93 7a00 	vldr	s14, [r3]
 8001626:	4b77      	ldr	r3, [pc, #476]	; (8001804 <I3G450D_loop+0x4ac>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	dc0c      	bgt.n	8001650 <I3G450D_loop+0x2f8>
 8001636:	4b73      	ldr	r3, [pc, #460]	; (8001804 <I3G450D_loop+0x4ac>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eeb1 7a67 	vneg.f32	s14, s15
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <I3G450D_loop+0x494>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	dd1b      	ble.n	8001688 <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 8001650:	4b66      	ldr	r3, [pc, #408]	; (80017ec <I3G450D_loop+0x494>)
 8001652:	ed93 7a00 	vldr	s14, [r3]
 8001656:	4b6c      	ldr	r3, [pc, #432]	; (8001808 <I3G450D_loop+0x4b0>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001660:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800166c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001670:	4b66      	ldr	r3, [pc, #408]	; (800180c <I3G450D_loop+0x4b4>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800167a:	4b64      	ldr	r3, [pc, #400]	; (800180c <I3G450D_loop+0x4b4>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8001680:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <I3G450D_loop+0x494>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <I3G450D_loop+0x4b0>)
 8001686:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001688:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <I3G450D_loop+0x49c>)
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	4b60      	ldr	r3, [pc, #384]	; (8001810 <I3G450D_loop+0x4b8>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	dc0c      	bgt.n	80016b8 <I3G450D_loop+0x360>
 800169e:	4b5c      	ldr	r3, [pc, #368]	; (8001810 <I3G450D_loop+0x4b8>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eeb1 7a67 	vneg.f32	s14, s15
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <I3G450D_loop+0x49c>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	dd1b      	ble.n	80016f0 <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <I3G450D_loop+0x49c>)
 80016ba:	ed93 7a00 	vldr	s14, [r3]
 80016be:	4b55      	ldr	r3, [pc, #340]	; (8001814 <I3G450D_loop+0x4bc>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80016d4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016d8:	4b4f      	ldr	r3, [pc, #316]	; (8001818 <I3G450D_loop+0x4c0>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <I3G450D_loop+0x4c0>)
 80016e4:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <I3G450D_loop+0x49c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a49      	ldr	r2, [pc, #292]	; (8001814 <I3G450D_loop+0x4bc>)
 80016ee:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 80016f0:	4b42      	ldr	r3, [pc, #264]	; (80017fc <I3G450D_loop+0x4a4>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <I3G450D_loop+0x4c4>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001704:	dc0d      	bgt.n	8001722 <I3G450D_loop+0x3ca>
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <I3G450D_loop+0x4c4>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	eeb1 7a67 	vneg.f32	s14, s15
 8001710:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <I3G450D_loop+0x4a4>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	f340 81c2 	ble.w	8001aa6 <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8001722:	4b36      	ldr	r3, [pc, #216]	; (80017fc <I3G450D_loop+0x4a4>)
 8001724:	ed93 7a00 	vldr	s14, [r3]
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <I3G450D_loop+0x4c8>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001732:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800173e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <I3G450D_loop+0x4cc>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <I3G450D_loop+0x4cc>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <I3G450D_loop+0x4a4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <I3G450D_loop+0x4c8>)
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e1a4      	b.n	8001aa6 <I3G450D_loop+0x74e>
				switch(currentcalistate)
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <I3G450D_loop+0x488>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b02      	cmp	r3, #2
 8001762:	f000 819b 	beq.w	8001a9c <I3G450D_loop+0x744>
 8001766:	2b02      	cmp	r3, #2
 8001768:	f300 819a 	bgt.w	8001aa0 <I3G450D_loop+0x748>
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <I3G450D_loop+0x41e>
 8001770:	2b01      	cmp	r3, #1
 8001772:	d029      	beq.n	80017c8 <I3G450D_loop+0x470>
						break;
 8001774:	e194      	b.n	8001aa0 <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001776:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <I3G450D_loop+0x4d0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800177e:	b211      	sxth	r1, r2
 8001780:	4a2a      	ldr	r2, [pc, #168]	; (800182c <I3G450D_loop+0x4d4>)
 8001782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <I3G450D_loop+0x4d0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800178e:	b211      	sxth	r1, r2
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <I3G450D_loop+0x4d8>)
 8001792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <I3G450D_loop+0x4d0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800179c:	b211      	sxth	r1, r2
 800179e:	4a25      	ldr	r2, [pc, #148]	; (8001834 <I3G450D_loop+0x4dc>)
 80017a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <I3G450D_loop+0x4d0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <I3G450D_loop+0x4d0>)
 80017ac:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <I3G450D_loop+0x4d0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80017b6:	f0c0 8175 	bcc.w	8001aa4 <I3G450D_loop+0x74c>
							caliCounter=0;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <I3G450D_loop+0x4d0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <I3G450D_loop+0x488>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
						break;
 80017c6:	e16d      	b.n	8001aa4 <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017cc:	e0a5      	b.n	800191a <I3G450D_loop+0x5c2>
 80017ce:	bf00      	nop
 80017d0:	20003110 	.word	0x20003110
 80017d4:	20000220 	.word	0x20000220
 80017d8:	20000222 	.word	0x20000222
 80017dc:	20000224 	.word	0x20000224
 80017e0:	200001d4 	.word	0x200001d4
 80017e4:	200001e4 	.word	0x200001e4
 80017e8:	3d8f5c29 	.word	0x3d8f5c29
 80017ec:	200001d8 	.word	0x200001d8
 80017f0:	200001e8 	.word	0x200001e8
 80017f4:	200001dc 	.word	0x200001dc
 80017f8:	200001ec 	.word	0x200001ec
 80017fc:	200001e0 	.word	0x200001e0
 8001800:	3b449ba6 	.word	0x3b449ba6
 8001804:	200001f0 	.word	0x200001f0
 8001808:	20000208 	.word	0x20000208
 800180c:	200001fc 	.word	0x200001fc
 8001810:	200001f4 	.word	0x200001f4
 8001814:	2000020c 	.word	0x2000020c
 8001818:	20000200 	.word	0x20000200
 800181c:	200001f8 	.word	0x200001f8
 8001820:	20000210 	.word	0x20000210
 8001824:	20000204 	.word	0x20000204
 8001828:	20000228 	.word	0x20000228
 800182c:	2000022c 	.word	0x2000022c
 8001830:	200011cc 	.word	0x200011cc
 8001834:	2000216c 	.word	0x2000216c
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8001838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	3360      	adds	r3, #96	; 0x60
 800183e:	443b      	add	r3, r7
 8001840:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8001844:	461a      	mov	r2, r3
 8001846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	499d      	ldr	r1, [pc, #628]	; (8001ac0 <I3G450D_loop+0x768>)
 800184c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800184e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001852:	4413      	add	r3, r2
 8001854:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8001856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	3360      	adds	r3, #96	; 0x60
 800185c:	443b      	add	r3, r7
 800185e:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8001862:	461a      	mov	r2, r3
 8001864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	4996      	ldr	r1, [pc, #600]	; (8001ac4 <I3G450D_loop+0x76c>)
 800186a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800186c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001870:	4413      	add	r3, r2
 8001872:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	3360      	adds	r3, #96	; 0x60
 800187a:	443b      	add	r3, r7
 800187c:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8001880:	461a      	mov	r2, r3
 8001882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	4990      	ldr	r1, [pc, #576]	; (8001ac8 <I3G450D_loop+0x770>)
 8001888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800188a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800188e:	4413      	add	r3, r2
 8001890:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8001892:	4a8b      	ldr	r2, [pc, #556]	; (8001ac0 <I3G450D_loop+0x768>)
 8001894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001896:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	3360      	adds	r3, #96	; 0x60
 80018a0:	443b      	add	r3, r7
 80018a2:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 80018a6:	4a87      	ldr	r2, [pc, #540]	; (8001ac4 <I3G450D_loop+0x76c>)
 80018a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018aa:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80018ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	3360      	adds	r3, #96	; 0x60
 80018b4:	443b      	add	r3, r7
 80018b6:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 80018ba:	4a83      	ldr	r2, [pc, #524]	; (8001ac8 <I3G450D_loop+0x770>)
 80018bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018be:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80018c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	3360      	adds	r3, #96	; 0x60
 80018c8:	443b      	add	r3, r7
 80018ca:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 80018ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018d0:	4a7e      	ldr	r2, [pc, #504]	; (8001acc <I3G450D_loop+0x774>)
 80018d2:	fb82 1203 	smull	r1, r2, r2, r3
 80018d6:	1092      	asrs	r2, r2, #2
 80018d8:	17db      	asrs	r3, r3, #31
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	4a7c      	ldr	r2, [pc, #496]	; (8001ad0 <I3G450D_loop+0x778>)
 80018de:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 80018e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e2:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <I3G450D_loop+0x774>)
 80018e4:	fb82 1203 	smull	r1, r2, r2, r3
 80018e8:	1092      	asrs	r2, r2, #2
 80018ea:	17db      	asrs	r3, r3, #31
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4a79      	ldr	r2, [pc, #484]	; (8001ad4 <I3G450D_loop+0x77c>)
 80018f0:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 80018f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018f4:	4a75      	ldr	r2, [pc, #468]	; (8001acc <I3G450D_loop+0x774>)
 80018f6:	fb82 1203 	smull	r1, r2, r2, r3
 80018fa:	1092      	asrs	r2, r2, #2
 80018fc:	17db      	asrs	r3, r3, #31
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a75      	ldr	r2, [pc, #468]	; (8001ad8 <I3G450D_loop+0x780>)
 8001902:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8001904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001906:	3301      	adds	r3, #1
 8001908:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 800190a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800190c:	2b09      	cmp	r3, #9
 800190e:	d901      	bls.n	8001914 <I3G450D_loop+0x5bc>
									windowPosition=0;
 8001910:	2300      	movs	r3, #0
 8001912:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001916:	3301      	adds	r3, #1
 8001918:	64fb      	str	r3, [r7, #76]	; 0x4c
 800191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001920:	d38a      	bcc.n	8001838 <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001922:	2300      	movs	r3, #0
 8001924:	64bb      	str	r3, [r7, #72]	; 0x48
 8001926:	e089      	b.n	8001a3c <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8001928:	4a65      	ldr	r2, [pc, #404]	; (8001ac0 <I3G450D_loop+0x768>)
 800192a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001930:	461a      	mov	r2, r3
 8001932:	4b67      	ldr	r3, [pc, #412]	; (8001ad0 <I3G450D_loop+0x778>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1ad2      	subs	r2, r2, r3
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <I3G450D_loop+0x784>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	dd0a      	ble.n	8001956 <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8001940:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <I3G450D_loop+0x768>)
 8001942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001944:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001948:	461a      	mov	r2, r3
 800194a:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <I3G450D_loop+0x778>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a62      	ldr	r2, [pc, #392]	; (8001adc <I3G450D_loop+0x784>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e015      	b.n	8001982 <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8001956:	4a5a      	ldr	r2, [pc, #360]	; (8001ac0 <I3G450D_loop+0x768>)
 8001958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800195e:	461a      	mov	r2, r3
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <I3G450D_loop+0x778>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	1ad2      	subs	r2, r2, r3
 8001966:	4b5d      	ldr	r3, [pc, #372]	; (8001adc <I3G450D_loop+0x784>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	425b      	negs	r3, r3
 800196c:	429a      	cmp	r2, r3
 800196e:	da08      	bge.n	8001982 <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8001970:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <I3G450D_loop+0x778>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4952      	ldr	r1, [pc, #328]	; (8001ac0 <I3G450D_loop+0x768>)
 8001976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001978:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800197c:	1a9b      	subs	r3, r3, r2
 800197e:	4a57      	ldr	r2, [pc, #348]	; (8001adc <I3G450D_loop+0x784>)
 8001980:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8001982:	4a50      	ldr	r2, [pc, #320]	; (8001ac4 <I3G450D_loop+0x76c>)
 8001984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001986:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800198a:	461a      	mov	r2, r3
 800198c:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <I3G450D_loop+0x77c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	1ad2      	subs	r2, r2, r3
 8001992:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <I3G450D_loop+0x788>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	dd0a      	ble.n	80019b0 <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 800199a:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <I3G450D_loop+0x76c>)
 800199c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800199e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <I3G450D_loop+0x77c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	4a4d      	ldr	r2, [pc, #308]	; (8001ae0 <I3G450D_loop+0x788>)
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e015      	b.n	80019dc <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 80019b0:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <I3G450D_loop+0x76c>)
 80019b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b46      	ldr	r3, [pc, #280]	; (8001ad4 <I3G450D_loop+0x77c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	1ad2      	subs	r2, r2, r3
 80019c0:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <I3G450D_loop+0x788>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	425b      	negs	r3, r3
 80019c6:	429a      	cmp	r2, r3
 80019c8:	da08      	bge.n	80019dc <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 80019ca:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <I3G450D_loop+0x77c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	493d      	ldr	r1, [pc, #244]	; (8001ac4 <I3G450D_loop+0x76c>)
 80019d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019d2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	4a41      	ldr	r2, [pc, #260]	; (8001ae0 <I3G450D_loop+0x788>)
 80019da:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 80019dc:	4a3a      	ldr	r2, [pc, #232]	; (8001ac8 <I3G450D_loop+0x770>)
 80019de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019e0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <I3G450D_loop+0x780>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	1ad2      	subs	r2, r2, r3
 80019ec:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <I3G450D_loop+0x78c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dd0a      	ble.n	8001a0a <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 80019f4:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <I3G450D_loop+0x770>)
 80019f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b36      	ldr	r3, [pc, #216]	; (8001ad8 <I3G450D_loop+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a37      	ldr	r2, [pc, #220]	; (8001ae4 <I3G450D_loop+0x78c>)
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e015      	b.n	8001a36 <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8001a0a:	4a2f      	ldr	r2, [pc, #188]	; (8001ac8 <I3G450D_loop+0x770>)
 8001a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <I3G450D_loop+0x780>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1ad2      	subs	r2, r2, r3
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <I3G450D_loop+0x78c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	425b      	negs	r3, r3
 8001a20:	429a      	cmp	r2, r3
 8001a22:	da08      	bge.n	8001a36 <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <I3G450D_loop+0x780>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4927      	ldr	r1, [pc, #156]	; (8001ac8 <I3G450D_loop+0x770>)
 8001a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001a2c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <I3G450D_loop+0x78c>)
 8001a34:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a38:	3301      	adds	r3, #1
 8001a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001a42:	f4ff af71 	bcc.w	8001928 <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <I3G450D_loop+0x784>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a52:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001ae8 <I3G450D_loop+0x790>
 8001a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <I3G450D_loop+0x794>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <I3G450D_loop+0x788>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001ae8 <I3G450D_loop+0x790>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <I3G450D_loop+0x798>)
 8001a76:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <I3G450D_loop+0x78c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a86:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001ae8 <I3G450D_loop+0x790>
 8001a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <I3G450D_loop+0x79c>)
 8001a90:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <I3G450D_loop+0x7a0>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	701a      	strb	r2, [r3, #0]
							break;
 8001a9a:	e004      	b.n	8001aa6 <I3G450D_loop+0x74e>
						break;
 8001a9c:	bf00      	nop
 8001a9e:	e002      	b.n	8001aa6 <I3G450D_loop+0x74e>
						break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <I3G450D_loop+0x74e>
						break;
 8001aa4:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <I3G450D_loop+0x7a4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <I3G450D_loop+0x7a8>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
			break;
 8001ab2:	e000      	b.n	8001ab6 <I3G450D_loop+0x75e>
				break;
 8001ab4:	bf00      	nop

		}
}
 8001ab6:	bf00      	nop
 8001ab8:	3760      	adds	r7, #96	; 0x60
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000022c 	.word	0x2000022c
 8001ac4:	200011cc 	.word	0x200011cc
 8001ac8:	2000216c 	.word	0x2000216c
 8001acc:	66666667 	.word	0x66666667
 8001ad0:	200001e4 	.word	0x200001e4
 8001ad4:	200001e8 	.word	0x200001e8
 8001ad8:	200001ec 	.word	0x200001ec
 8001adc:	20000214 	.word	0x20000214
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	2000021c 	.word	0x2000021c
 8001ae8:	3d8f5c29 	.word	0x3d8f5c29
 8001aec:	200001f0 	.word	0x200001f0
 8001af0:	200001f4 	.word	0x200001f4
 8001af4:	200001f8 	.word	0x200001f8
 8001af8:	200001d4 	.word	0x200001d4
 8001afc:	200001d5 	.word	0x200001d5
 8001b00:	20000000 	.word	0x20000000

08001b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b08:	f000 ffa2 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0c:	f000 f830 	bl	8001b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b10:	f000 fa2c 	bl	8001f6c <MX_GPIO_Init>
  MX_CRC_Init();
 8001b14:	f000 f896 	bl	8001c44 <MX_CRC_Init>
  MX_FMC_Init();
 8001b18:	f000 f9d8 	bl	8001ecc <MX_FMC_Init>
  MX_SPI5_Init();
 8001b1c:	f000 f926 	bl	8001d6c <MX_SPI5_Init>
  MX_TIM1_Init();
 8001b20:	f000 f95a 	bl	8001dd8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001b24:	f000 f9a8 	bl	8001e78 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001b28:	f00b f9a0 	bl	800ce6c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001b2c:	f008 f82a 	bl	8009b84 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001b30:	f000 f89c 	bl	8001c6c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001b34:	f000 f8da 	bl	8001cec <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  I3G450D_Init(&hspi5);
 8001b38:	480a      	ldr	r0, [pc, #40]	; (8001b64 <main+0x60>)
 8001b3a:	f7ff fb45 	bl	80011c8 <I3G450D_Init>
  Lis3dhInit(&hi2c3);
 8001b3e:	480a      	ldr	r0, [pc, #40]	; (8001b68 <main+0x64>)
 8001b40:	f7ff fa46 	bl	8000fd0 <Lis3dhInit>
  RetargetInit(&huart1);
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <main+0x68>)
 8001b46:	f000 fbc5 	bl	80022d4 <RetargetInit>
  ConsoleInit(&huart1);
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <main+0x68>)
 8001b4c:	f7fe fdcc 	bl	80006e8 <ConsoleInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001b50:	f00b f9b2 	bl	800ceb8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    ConsoleProcess();
 8001b54:	f7fe fdf8 	bl	8000748 <ConsoleProcess>
   I3G450D_loop();
 8001b58:	f7ff fbfe 	bl	8001358 <I3G450D_loop>
   Lis3dhGetAcc();
 8001b5c:	f7ff fac0 	bl	80010e0 <Lis3dhGetAcc>
    MX_USB_HOST_Process();
 8001b60:	e7f6      	b.n	8001b50 <main+0x4c>
 8001b62:	bf00      	nop
 8001b64:	200031cc 	.word	0x200031cc
 8001b68:	20003178 	.word	0x20003178
 8001b6c:	2000326c 	.word	0x2000326c

08001b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b094      	sub	sp, #80	; 0x50
 8001b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	2230      	movs	r2, #48	; 0x30
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00b fcfe 	bl	800d580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <SystemClock_Config+0xcc>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <SystemClock_Config+0xcc>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <SystemClock_Config+0xcc>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <SystemClock_Config+0xd0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <SystemClock_Config+0xd0>)
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <SystemClock_Config+0xd0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be4:	2304      	movs	r3, #4
 8001be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001be8:	2348      	movs	r3, #72	; 0x48
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f004 f8bd 	bl	8005d78 <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c04:	f000 fb60 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	2102      	movs	r1, #2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f004 fb1f 	bl	8006268 <HAL_RCC_ClockConfig>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001c30:	f000 fb4a 	bl	80022c8 <Error_Handler>
  }
}
 8001c34:	bf00      	nop
 8001c36:	3750      	adds	r7, #80	; 0x50
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000

08001c44 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_CRC_Init+0x20>)
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <MX_CRC_Init+0x24>)
 8001c4c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_CRC_Init+0x20>)
 8001c50:	f001 f8a5 	bl	8002d9e <HAL_CRC_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001c5a:	f000 fb35 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000311c 	.word	0x2000311c
 8001c68:	40023000 	.word	0x40023000

08001c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_I2C1_Init+0x78>)
 8001c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <MX_I2C1_Init+0x7c>)
 8001c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001caa:	f002 ff27 	bl	8004afc <HAL_I2C_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cb4:	f000 fb08 	bl	80022c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001cbc:	f003 ffe1 	bl	8005c82 <HAL_I2CEx_ConfigAnalogFilter>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001cc6:	f000 faff 	bl	80022c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_I2C1_Init+0x74>)
 8001cce:	f004 f814 	bl	8005cfa <HAL_I2CEx_ConfigDigitalFilter>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001cd8:	f000 faf6 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20003124 	.word	0x20003124
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	000186a0 	.word	0x000186a0

08001cec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <MX_I2C3_Init+0x78>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001cf8:	4a1b      	ldr	r2, [pc, #108]	; (8001d68 <MX_I2C3_Init+0x7c>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d2a:	f002 fee7 	bl	8004afc <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f000 fac8 	bl	80022c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d3c:	f003 ffa1 	bl	8005c82 <HAL_I2CEx_ConfigAnalogFilter>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001d46:	f000 fabf 	bl	80022c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <MX_I2C3_Init+0x74>)
 8001d4e:	f003 ffd4 	bl	8005cfa <HAL_I2CEx_ConfigDigitalFilter>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001d58:	f000 fab6 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20003178 	.word	0x20003178
 8001d64:	40005c00 	.word	0x40005c00
 8001d68:	000186a0 	.word	0x000186a0

08001d6c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d72:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <MX_SPI5_Init+0x68>)
 8001d74:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d7c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001da0:	2218      	movs	r2, #24
 8001da2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001db8:	220a      	movs	r2, #10
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_SPI5_Init+0x64>)
 8001dbe:	f004 fca7 	bl	8006710 <HAL_SPI_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001dc8:	f000 fa7e 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200031cc 	.word	0x200031cc
 8001dd4:	40015000 	.word	0x40015000

08001dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dec:	463b      	mov	r3, r7
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <MX_TIM1_Init+0x9c>)
 8001df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e20:	4813      	ldr	r0, [pc, #76]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e22:	f005 fa1d 	bl	8007260 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 fa4c 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e3e:	f005 fa5e 	bl	80072fe <HAL_TIM_ConfigClockSource>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e48:	f000 fa3e 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_TIM1_Init+0x98>)
 8001e5a:	f005 fc51 	bl	8007700 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e64:	f000 fa30 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20003224 	.word	0x20003224
 8001e74:	40010000 	.word	0x40010000

08001e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_USART1_UART_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART1_UART_Init+0x4c>)
 8001eb0:	f005 fca2 	bl	80077f8 <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 fa05 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000326c 	.word	0x2000326c
 8001ec8:	40011000 	.word	0x40011000

08001ecc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <MX_FMC_Init+0x98>)
 8001ee6:	4a20      	ldr	r2, [pc, #128]	; (8001f68 <MX_FMC_Init+0x9c>)
 8001ee8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <MX_FMC_Init+0x98>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_FMC_Init+0x98>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <MX_FMC_Init+0x98>)
 8001ef8:	2204      	movs	r2, #4
 8001efa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_FMC_Init+0x98>)
 8001efe:	2210      	movs	r2, #16
 8001f00:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f0a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001f0e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001f30:	2307      	movs	r3, #7
 8001f32:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001f34:	2304      	movs	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_FMC_Init+0x98>)
 8001f4e:	f004 fbab 	bl	80066a8 <HAL_SDRAM_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001f58:	f000 f9b6 	bl	80022c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001f5c:	bf00      	nop
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200032b0 	.word	0x200032b0
 8001f68:	a0000140 	.word	0xa0000140

08001f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4ab1      	ldr	r2, [pc, #708]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4baf      	ldr	r3, [pc, #700]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	4bab      	ldr	r3, [pc, #684]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4aaa      	ldr	r2, [pc, #680]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4ba8      	ldr	r3, [pc, #672]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	61fb      	str	r3, [r7, #28]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	4ba4      	ldr	r3, [pc, #656]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4aa3      	ldr	r2, [pc, #652]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4ba1      	ldr	r3, [pc, #644]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	4b9d      	ldr	r3, [pc, #628]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a9c      	ldr	r2, [pc, #624]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b9a      	ldr	r3, [pc, #616]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b96      	ldr	r3, [pc, #600]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a95      	ldr	r2, [pc, #596]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b93      	ldr	r3, [pc, #588]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b8f      	ldr	r3, [pc, #572]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a8e      	ldr	r2, [pc, #568]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b8c      	ldr	r3, [pc, #560]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a87      	ldr	r2, [pc, #540]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002034:	f043 0310 	orr.w	r3, r3, #16
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <MX_GPIO_Init+0x2e4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b81      	ldr	r3, [pc, #516]	; (8002250 <MX_GPIO_Init+0x2e4>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a80      	ldr	r2, [pc, #512]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <MX_GPIO_Init+0x2e4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	2116      	movs	r1, #22
 8002066:	487b      	ldr	r0, [pc, #492]	; (8002254 <MX_GPIO_Init+0x2e8>)
 8002068:	f001 f90c 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800206c:	2200      	movs	r2, #0
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	4879      	ldr	r0, [pc, #484]	; (8002258 <MX_GPIO_Init+0x2ec>)
 8002072:	f001 f907 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800207c:	4877      	ldr	r0, [pc, #476]	; (800225c <MX_GPIO_Init+0x2f0>)
 800207e:	f001 f901 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002088:	4875      	ldr	r0, [pc, #468]	; (8002260 <MX_GPIO_Init+0x2f4>)
 800208a:	f001 f8fb 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800208e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a0:	230e      	movs	r3, #14
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	4619      	mov	r1, r3
 80020aa:	486e      	ldr	r0, [pc, #440]	; (8002264 <MX_GPIO_Init+0x2f8>)
 80020ac:	f000 ff26 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80020b0:	2316      	movs	r3, #22
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	4619      	mov	r1, r3
 80020c6:	4863      	ldr	r0, [pc, #396]	; (8002254 <MX_GPIO_Init+0x2e8>)
 80020c8:	f000 ff18 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	485d      	ldr	r0, [pc, #372]	; (8002258 <MX_GPIO_Init+0x2ec>)
 80020e2:	f000 ff0b 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80020e6:	f248 0306 	movw	r3, #32774	; 0x8006
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80020f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020fa:	4619      	mov	r1, r3
 80020fc:	4856      	ldr	r0, [pc, #344]	; (8002258 <MX_GPIO_Init+0x2ec>)
 80020fe:	f000 fefd 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8002102:	2358      	movs	r3, #88	; 0x58
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002112:	230e      	movs	r3, #14
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	484e      	ldr	r0, [pc, #312]	; (8002258 <MX_GPIO_Init+0x2ec>)
 800211e:	f000 feed 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	4619      	mov	r1, r3
 8002138:	4847      	ldr	r0, [pc, #284]	; (8002258 <MX_GPIO_Init+0x2ec>)
 800213a:	f000 fedf 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800213e:	2320      	movs	r3, #32
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002142:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	4840      	ldr	r0, [pc, #256]	; (8002254 <MX_GPIO_Init+0x2e8>)
 8002154:	f000 fed2 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002158:	2303      	movs	r3, #3
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002168:	2309      	movs	r3, #9
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	4619      	mov	r1, r3
 8002172:	483d      	ldr	r0, [pc, #244]	; (8002268 <MX_GPIO_Init+0x2fc>)
 8002174:	f000 fec2 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002178:	2304      	movs	r3, #4
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	4837      	ldr	r0, [pc, #220]	; (8002268 <MX_GPIO_Init+0x2fc>)
 800218c:	f000 feb6 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8002190:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021a2:	230e      	movs	r3, #14
 80021a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	482e      	ldr	r0, [pc, #184]	; (8002268 <MX_GPIO_Init+0x2fc>)
 80021ae:	f000 fea5 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80021b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	4825      	ldr	r0, [pc, #148]	; (800225c <MX_GPIO_Init+0x2f0>)
 80021c8:	f000 fe98 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80021cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e2:	4619      	mov	r1, r3
 80021e4:	481d      	ldr	r0, [pc, #116]	; (800225c <MX_GPIO_Init+0x2f0>)
 80021e6:	f000 fe89 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	2300      	movs	r3, #0
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021fa:	230e      	movs	r3, #14
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002202:	4619      	mov	r1, r3
 8002204:	4816      	ldr	r0, [pc, #88]	; (8002260 <MX_GPIO_Init+0x2f4>)
 8002206:	f000 fe79 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800220a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800221c:	230e      	movs	r3, #14
 800221e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002224:	4619      	mov	r1, r3
 8002226:	480b      	ldr	r0, [pc, #44]	; (8002254 <MX_GPIO_Init+0x2e8>)
 8002228:	f000 fe68 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800222c:	2348      	movs	r3, #72	; 0x48
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223c:	230e      	movs	r3, #14
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_GPIO_Init+0x2f0>)
 8002248:	f000 fe58 	bl	8002efc <HAL_GPIO_Init>
 800224c:	e00e      	b.n	800226c <MX_GPIO_Init+0x300>
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	40020800 	.word	0x40020800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020c00 	.word	0x40020c00
 8002260:	40021800 	.word	0x40021800
 8002264:	40021400 	.word	0x40021400
 8002268:	40020400 	.word	0x40020400

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 800226c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800227e:	2309      	movs	r3, #9
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	480e      	ldr	r0, [pc, #56]	; (80022c4 <MX_GPIO_Init+0x358>)
 800228a:	f000 fe37 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800228e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a4:	4619      	mov	r1, r3
 80022a6:	4807      	ldr	r0, [pc, #28]	; (80022c4 <MX_GPIO_Init+0x358>)
 80022a8:	f000 fe28 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2006      	movs	r0, #6
 80022b2:	f000 fd3e 	bl	8002d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022b6:	2006      	movs	r0, #6
 80022b8:	f000 fd57 	bl	8002d6a <HAL_NVIC_EnableIRQ>

}
 80022bc:	bf00      	nop
 80022be:	3738      	adds	r7, #56	; 0x38
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021800 	.word	0x40021800

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <Error_Handler+0x8>
	...

080022d4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <RetargetInit+0x28>)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <RetargetInit+0x2c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6898      	ldr	r0, [r3, #8]
 80022e8:	2300      	movs	r3, #0
 80022ea:	2202      	movs	r2, #2
 80022ec:	2100      	movs	r1, #0
 80022ee:	f00b fa57 	bl	800d7a0 <setvbuf>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200032e4 	.word	0x200032e4
 8002300:	20000030 	.word	0x20000030

08002304 <_isatty>:

int _isatty(int fd) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db04      	blt.n	800231c <_isatty+0x18>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	dc01      	bgt.n	800231c <_isatty+0x18>
    return 1;
 8002318:	2301      	movs	r3, #1
 800231a:	e005      	b.n	8002328 <_isatty+0x24>

  errno = EBADF;
 800231c:	f00b f8e8 	bl	800d4f0 <__errno>
 8002320:	4603      	mov	r3, r0
 8002322:	2209      	movs	r2, #9
 8002324:	601a      	str	r2, [r3, #0]
  return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_write>:

int _write(int fd, char* ptr, int len) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d002      	beq.n	8002348 <_write+0x18>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d111      	bne.n	800236c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <_write+0x54>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	b29a      	uxth	r2, r3
 8002350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	f005 fa9c 	bl	8007892 <HAL_UART_Transmit>
 800235a:	4603      	mov	r3, r0
 800235c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800235e:	7dfb      	ldrb	r3, [r7, #23]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <_write+0x38>
      return len;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	e008      	b.n	800237a <_write+0x4a>
    else
      return EIO;
 8002368:	2305      	movs	r3, #5
 800236a:	e006      	b.n	800237a <_write+0x4a>
  }
  errno = EBADF;
 800236c:	f00b f8c0 	bl	800d4f0 <__errno>
 8002370:	4603      	mov	r3, r0
 8002372:	2209      	movs	r2, #9
 8002374:	601a      	str	r2, [r3, #0]
  return -1;
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200032e4 	.word	0x200032e4

08002388 <_close>:

int _close(int fd) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db04      	blt.n	80023a0 <_close+0x18>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b02      	cmp	r3, #2
 800239a:	dc01      	bgt.n	80023a0 <_close+0x18>
    return 0;
 800239c:	2300      	movs	r3, #0
 800239e:	e006      	b.n	80023ae <_close+0x26>

  errno = EBADF;
 80023a0:	f00b f8a6 	bl	800d4f0 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2209      	movs	r2, #9
 80023a8:	601a      	str	r2, [r3, #0]
  return -1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80023c2:	f00b f895 	bl	800d4f0 <__errno>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2209      	movs	r2, #9
 80023ca:	601a      	str	r2, [r3, #0]
  return -1;
 80023cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_read>:

int _read(int fd, char* ptr, int len) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d110      	bne.n	800240c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <_read+0x4c>)
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f2:	2201      	movs	r2, #1
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	f005 fade 	bl	80079b6 <HAL_UART_Receive>
 80023fa:	4603      	mov	r3, r0
 80023fc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <_read+0x30>
      return 1;
 8002404:	2301      	movs	r3, #1
 8002406:	e008      	b.n	800241a <_read+0x42>
    else
      return EIO;
 8002408:	2305      	movs	r3, #5
 800240a:	e006      	b.n	800241a <_read+0x42>
  }
  errno = EBADF;
 800240c:	f00b f870 	bl	800d4f0 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	2209      	movs	r2, #9
 8002414:	601a      	str	r2, [r3, #0]
  return -1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200032e4 	.word	0x200032e4

08002428 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db08      	blt.n	800244a <_fstat+0x22>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	dc05      	bgt.n	800244a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002444:	605a      	str	r2, [r3, #4]
    return 0;
 8002446:	2300      	movs	r3, #0
 8002448:	e005      	b.n	8002456 <_fstat+0x2e>
  }

  errno = EBADF;
 800244a:	f00b f851 	bl	800d4f0 <__errno>
 800244e:	4603      	mov	r3, r0
 8002450:	2209      	movs	r2, #9
 8002452:	601a      	str	r2, [r3, #0]
  return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a0f      	ldr	r2, [pc, #60]	; (80024ac <HAL_MspInit+0x4c>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_MspInit+0x4c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	; (80024ac <HAL_MspInit+0x4c>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <HAL_CRC_MspInit+0x3c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10d      	bne.n	80024de <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_CRC_MspInit+0x40>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_CRC_MspInit+0x40>)
 80024cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_CRC_MspInit+0x40>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023000 	.word	0x40023000
 80024f0:	40023800 	.word	0x40023800

080024f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 031c 	add.w	r3, r7, #28
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a42      	ldr	r2, [pc, #264]	; (800261c <HAL_I2C_MspInit+0x128>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d12d      	bne.n	8002572 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a40      	ldr	r2, [pc, #256]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	61bb      	str	r3, [r7, #24]
 8002530:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002532:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002538:	2312      	movs	r3, #18
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002544:	2304      	movs	r3, #4
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4835      	ldr	r0, [pc, #212]	; (8002624 <HAL_I2C_MspInit+0x130>)
 8002550:	f000 fcd4 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	4b31      	ldr	r3, [pc, #196]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	4a30      	ldr	r2, [pc, #192]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 800255e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
 8002564:	4b2e      	ldr	r3, [pc, #184]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002570:	e050      	b.n	8002614 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <HAL_I2C_MspInit+0x134>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d14b      	bne.n	8002614 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	4a26      	ldr	r2, [pc, #152]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6313      	str	r3, [r2, #48]	; 0x30
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4a1f      	ldr	r2, [pc, #124]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6313      	str	r3, [r2, #48]	; 0x30
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80025b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ba:	2312      	movs	r3, #18
 80025bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025be:	2301      	movs	r3, #1
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025c6:	2304      	movs	r3, #4
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 031c 	add.w	r3, r7, #28
 80025ce:	4619      	mov	r1, r3
 80025d0:	4816      	ldr	r0, [pc, #88]	; (800262c <HAL_I2C_MspInit+0x138>)
 80025d2:	f000 fc93 	bl	8002efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025dc:	2312      	movs	r3, #18
 80025de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e4:	2303      	movs	r3, #3
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025e8:	2304      	movs	r3, #4
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	480f      	ldr	r0, [pc, #60]	; (8002630 <HAL_I2C_MspInit+0x13c>)
 80025f4:	f000 fc82 	bl	8002efc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	4a07      	ldr	r2, [pc, #28]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 8002602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002606:	6413      	str	r3, [r2, #64]	; 0x40
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_I2C_MspInit+0x12c>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
}
 8002614:	bf00      	nop
 8002616:	3730      	adds	r7, #48	; 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40005400 	.word	0x40005400
 8002620:	40023800 	.word	0x40023800
 8002624:	40020400 	.word	0x40020400
 8002628:	40005c00 	.word	0x40005c00
 800262c:	40020800 	.word	0x40020800
 8002630:	40020000 	.word	0x40020000

08002634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_SPI_MspInit+0x84>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d12c      	bne.n	80026b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_SPI_MspInit+0x88>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <HAL_SPI_MspInit+0x88>)
 8002660:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_SPI_MspInit+0x88>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_SPI_MspInit+0x88>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <HAL_SPI_MspInit+0x88>)
 800267c:	f043 0320 	orr.w	r3, r3, #32
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_SPI_MspInit+0x88>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800268e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80026a0:	2305      	movs	r3, #5
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	4619      	mov	r1, r3
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 80026ac:	f000 fc26 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80026b0:	bf00      	nop
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40015000 	.word	0x40015000
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40021400 	.word	0x40021400

080026c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_TIM_Base_MspInit+0x3c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d10d      	bne.n	80026f2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_TIM_Base_MspInit+0x40>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a09      	ldr	r2, [pc, #36]	; (8002704 <HAL_TIM_Base_MspInit+0x40>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b07      	ldr	r3, [pc, #28]	; (8002704 <HAL_TIM_Base_MspInit+0x40>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40010000 	.word	0x40010000
 8002704:	40023800 	.word	0x40023800

08002708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	; 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0314 	add.w	r3, r7, #20
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_UART_MspInit+0x94>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d134      	bne.n	8002794 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_UART_MspInit+0x98>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <HAL_UART_MspInit+0x98>)
 8002734:	f043 0310 	orr.w	r3, r3, #16
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <HAL_UART_MspInit+0x98>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_UART_MspInit+0x98>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_UART_MspInit+0x98>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_UART_MspInit+0x98>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002762:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002774:	2307      	movs	r3, #7
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	4619      	mov	r1, r3
 800277e:	4809      	ldr	r0, [pc, #36]	; (80027a4 <HAL_UART_MspInit+0x9c>)
 8002780:	f000 fbbc 	bl	8002efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2025      	movs	r0, #37	; 0x25
 800278a:	f000 fad2 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800278e:	2025      	movs	r0, #37	; 0x25
 8002790:	f000 faeb 	bl	8002d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002794:	bf00      	nop
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40011000 	.word	0x40011000
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020000 	.word	0x40020000

080027a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_FMC_MspInit+0x104>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d16f      	bne.n	80028a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_FMC_MspInit+0x104>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4b38      	ldr	r3, [pc, #224]	; (80028b0 <HAL_FMC_MspInit+0x108>)
 80027d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d2:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <HAL_FMC_MspInit+0x108>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6393      	str	r3, [r2, #56]	; 0x38
 80027da:	4b35      	ldr	r3, [pc, #212]	; (80028b0 <HAL_FMC_MspInit+0x108>)
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80027e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80027ea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80027f8:	230c      	movs	r3, #12
 80027fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	482c      	ldr	r0, [pc, #176]	; (80028b4 <HAL_FMC_MspInit+0x10c>)
 8002802:	f000 fb7b 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002806:	2301      	movs	r3, #1
 8002808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002816:	230c      	movs	r3, #12
 8002818:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4826      	ldr	r0, [pc, #152]	; (80028b8 <HAL_FMC_MspInit+0x110>)
 8002820:	f000 fb6c 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002824:	f248 1333 	movw	r3, #33075	; 0x8133
 8002828:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002832:	2303      	movs	r3, #3
 8002834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002836:	230c      	movs	r3, #12
 8002838:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4619      	mov	r1, r3
 800283e:	481f      	ldr	r0, [pc, #124]	; (80028bc <HAL_FMC_MspInit+0x114>)
 8002840:	f000 fb5c 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002844:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002848:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002856:	230c      	movs	r3, #12
 8002858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	4619      	mov	r1, r3
 800285e:	4818      	ldr	r0, [pc, #96]	; (80028c0 <HAL_FMC_MspInit+0x118>)
 8002860:	f000 fb4c 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002864:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002868:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002876:	230c      	movs	r3, #12
 8002878:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4811      	ldr	r0, [pc, #68]	; (80028c4 <HAL_FMC_MspInit+0x11c>)
 8002880:	f000 fb3c 	bl	8002efc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002884:	2360      	movs	r3, #96	; 0x60
 8002886:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002894:	230c      	movs	r3, #12
 8002896:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	4619      	mov	r1, r3
 800289c:	480a      	ldr	r0, [pc, #40]	; (80028c8 <HAL_FMC_MspInit+0x120>)
 800289e:	f000 fb2d 	bl	8002efc <HAL_GPIO_Init>
 80028a2:	e000      	b.n	80028a6 <HAL_FMC_MspInit+0xfe>
    return;
 80028a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200032e8 	.word	0x200032e8
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40021400 	.word	0x40021400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40021800 	.word	0x40021800
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40020400 	.word	0x40020400

080028cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80028d4:	f7ff ff68 	bl	80027a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <NMI_Handler+0x4>

080028e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ea:	e7fe      	b.n	80028ea <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <MemManage_Handler+0x4>

080028f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f6:	e7fe      	b.n	80028f6 <BusFault_Handler+0x4>

080028f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028fc:	e7fe      	b.n	80028fc <UsageFault_Handler+0x4>

080028fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800292c:	f000 f8e2 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002938:	2001      	movs	r0, #1
 800293a:	f000 fcbd 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <USART1_IRQHandler+0x10>)
 800294a:	f005 f907 	bl	8007b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	2000326c 	.word	0x2000326c

08002958 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <OTG_HS_IRQHandler+0x10>)
 800295e:	f000 ff2d 	bl	80037bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200036e4 	.word	0x200036e4

0800296c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002974:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	; (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800299c:	f00a fda8 	bl	800d4f0 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <_sbrk+0x64>)
 80029bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20030000 	.word	0x20030000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	200032ec 	.word	0x200032ec
 80029d4:	200039f8 	.word	0x200039f8

080029d8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <SystemInit+0x20>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <SystemInit+0x20>)
 80029e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a00:	480d      	ldr	r0, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a02:	490e      	ldr	r1, [pc, #56]	; (8002a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a04:	4a0e      	ldr	r2, [pc, #56]	; (8002a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0b      	ldr	r2, [pc, #44]	; (8002a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a18:	4c0b      	ldr	r4, [pc, #44]	; (8002a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a26:	f7ff ffd7 	bl	80029d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f00a fd67 	bl	800d4fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a2e:	f7ff f869 	bl	8001b04 <main>
  bx  lr    
 8002a32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002a34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a3c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002a40:	0800ecd4 	.word	0x0800ecd4
  ldr r2, =_sbss
 8002a44:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002a48:	200039f8 	.word	0x200039f8

08002a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	; (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	; (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 f94f 	bl	8002d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	200f      	movs	r0, #15
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fcec 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f967 	bl	8002d86 <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ad0:	f000 f92f 	bl	8002d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	2000000c 	.word	0x2000000c
 8002af0:	20000008 	.word	0x20000008

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	200032f0 	.word	0x200032f0

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200032f0 	.word	0x200032f0

08002b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000000c 	.word	0x2000000c

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bae:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	60d3      	str	r3, [r2, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ce8:	d301      	bcc.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00f      	b.n	8002d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SysTick_Config+0x40>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cfc:	f7ff ff8e 	bl	8002c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <SysTick_Config+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d06:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <SysTick_Config+0x40>)
 8002d08:	2207      	movs	r2, #7
 8002d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	e000e010 	.word	0xe000e010

08002d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ff29 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
 8002d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d44:	f7ff ff3e 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f7ff ff8e 	bl	8002c70 <NVIC_EncodePriority>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff5d 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff31 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ffa2 	bl	8002cd8 <SysTick_Config>
 8002d94:	4603      	mov	r3, r0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e00e      	b.n	8002dce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	795b      	ldrb	r3, [r3, #5]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fb75 	bl	80024b0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff fe9a 	bl	8002b1c <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d008      	beq.n	8002e08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e052      	b.n	8002eae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0216 	bic.w	r2, r2, #22
 8002e16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_DMA_Abort+0x62>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0208 	bic.w	r2, r2, #8
 8002e46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	e013      	b.n	8002e82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e5a:	f7ff fe5f 	bl	8002b1c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b05      	cmp	r3, #5
 8002e66:	d90c      	bls.n	8002e82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e015      	b.n	8002eae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e4      	bne.n	8002e5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	223f      	movs	r2, #63	; 0x3f
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	; 0x80
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e00c      	b.n	8002eee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2205      	movs	r2, #5
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e177      	b.n	8003208 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 8166 	bne.w	8003202 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d005      	beq.n	8002f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d130      	bne.n	8002fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	2203      	movs	r2, #3
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 0201 	and.w	r2, r3, #1
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d017      	beq.n	8002fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80c0 	beq.w	8003202 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_GPIO_Init+0x324>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_GPIO_Init+0x324>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_GPIO_Init+0x324>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a61      	ldr	r2, [pc, #388]	; (8003224 <HAL_GPIO_Init+0x328>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_GPIO_Init+0x32c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d037      	beq.n	800313a <HAL_GPIO_Init+0x23e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_GPIO_Init+0x330>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d031      	beq.n	8003136 <HAL_GPIO_Init+0x23a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a56      	ldr	r2, [pc, #344]	; (8003230 <HAL_GPIO_Init+0x334>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02b      	beq.n	8003132 <HAL_GPIO_Init+0x236>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a55      	ldr	r2, [pc, #340]	; (8003234 <HAL_GPIO_Init+0x338>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d025      	beq.n	800312e <HAL_GPIO_Init+0x232>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a54      	ldr	r2, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x33c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01f      	beq.n	800312a <HAL_GPIO_Init+0x22e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a53      	ldr	r2, [pc, #332]	; (800323c <HAL_GPIO_Init+0x340>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <HAL_GPIO_Init+0x22a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_GPIO_Init+0x344>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a51      	ldr	r2, [pc, #324]	; (8003244 <HAL_GPIO_Init+0x348>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00d      	beq.n	800311e <HAL_GPIO_Init+0x222>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a50      	ldr	r2, [pc, #320]	; (8003248 <HAL_GPIO_Init+0x34c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d007      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4f      	ldr	r2, [pc, #316]	; (800324c <HAL_GPIO_Init+0x350>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d101      	bne.n	8003116 <HAL_GPIO_Init+0x21a>
 8003112:	2309      	movs	r3, #9
 8003114:	e012      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003116:	230a      	movs	r3, #10
 8003118:	e010      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311a:	2308      	movs	r3, #8
 800311c:	e00e      	b.n	800313c <HAL_GPIO_Init+0x240>
 800311e:	2307      	movs	r3, #7
 8003120:	e00c      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003122:	2306      	movs	r3, #6
 8003124:	e00a      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003126:	2305      	movs	r3, #5
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312a:	2304      	movs	r3, #4
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x240>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x240>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x240>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	; (8003224 <HAL_GPIO_Init+0x328>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_GPIO_Init+0x354>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a34      	ldr	r2, [pc, #208]	; (8003250 <HAL_GPIO_Init+0x354>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b32      	ldr	r3, [pc, #200]	; (8003250 <HAL_GPIO_Init+0x354>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_GPIO_Init+0x354>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f ae84 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40021400 	.word	0x40021400
 8003240:	40021800 	.word	0x40021800
 8003244:	40021c00 	.word	0x40021c00
 8003248:	40022000 	.word	0x40022000
 800324c:	40022400 	.word	0x40022400
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e001      	b.n	8003276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	807b      	strh	r3, [r7, #2]
 8003290:	4613      	mov	r3, r2
 8003292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003294:	787b      	ldrb	r3, [r7, #1]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032a0:	e003      	b.n	80032aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032a2:	887b      	ldrh	r3, [r7, #2]
 80032a4:	041a      	lsls	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	619a      	str	r2, [r3, #24]
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d006      	beq.n	80032dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fe5e 	bl	8000f98 <HAL_GPIO_EXTI_Callback>
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40013c00 	.word	0x40013c00

080032e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80032e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ea:	b08f      	sub	sp, #60	; 0x3c
 80032ec:	af0a      	add	r7, sp, #40	; 0x28
 80032ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e054      	b.n	80033a4 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f009 fe07 	bl	800cf28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f005 fcaf 	bl	8008c9c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	687e      	ldr	r6, [r7, #4]
 8003346:	466d      	mov	r5, sp
 8003348:	f106 0410 	add.w	r4, r6, #16
 800334c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800334e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003354:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003358:	e885 0003 	stmia.w	r5, {r0, r1}
 800335c:	1d33      	adds	r3, r6, #4
 800335e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003360:	6838      	ldr	r0, [r7, #0]
 8003362:	f005 fc29 	bl	8008bb8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2101      	movs	r1, #1
 800336c:	4618      	mov	r0, r3
 800336e:	f005 fca6 	bl	8008cbe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	687e      	ldr	r6, [r7, #4]
 800337a:	466d      	mov	r5, sp
 800337c:	f106 0410 	add.w	r4, r6, #16
 8003380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003382:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003388:	e894 0003 	ldmia.w	r4, {r0, r1}
 800338c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003390:	1d33      	adds	r3, r6, #4
 8003392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f005 fe2f 	bl	8008ff8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033ac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af04      	add	r7, sp, #16
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	70fb      	strb	r3, [r7, #3]
 80033be:	460b      	mov	r3, r1
 80033c0:	70bb      	strb	r3, [r7, #2]
 80033c2:	4613      	mov	r3, r2
 80033c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_HCD_HC_Init+0x28>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e076      	b.n	80034c2 <HAL_HCD_HC_Init+0x116>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	333d      	adds	r3, #61	; 0x3d
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3338      	adds	r3, #56	; 0x38
 80033fc:	787a      	ldrb	r2, [r7, #1]
 80033fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3340      	adds	r3, #64	; 0x40
 800340e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003410:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	3339      	adds	r3, #57	; 0x39
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	333f      	adds	r3, #63	; 0x3f
 8003432:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	78ba      	ldrb	r2, [r7, #2]
 800343c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003440:	b2d0      	uxtb	r0, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	333a      	adds	r3, #58	; 0x3a
 800344e:	4602      	mov	r2, r0
 8003450:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003452:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003456:	2b00      	cmp	r3, #0
 8003458:	da09      	bge.n	800346e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333b      	adds	r3, #59	; 0x3b
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
 800346c:	e008      	b.n	8003480 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	333b      	adds	r3, #59	; 0x3b
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	333c      	adds	r3, #60	; 0x3c
 800348e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003492:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	787c      	ldrb	r4, [r7, #1]
 800349a:	78ba      	ldrb	r2, [r7, #2]
 800349c:	78f9      	ldrb	r1, [r7, #3]
 800349e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80034a0:	9302      	str	r3, [sp, #8]
 80034a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	4623      	mov	r3, r4
 80034b0:	f005 ff28 	bl	8009304 <USB_HC_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}

080034ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_HCD_HC_Halt+0x1e>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e00f      	b.n	8003508 <HAL_HCD_HC_Halt+0x3e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f006 f978 	bl	80097ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003506:	7bfb      	ldrb	r3, [r7, #15]
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	70fb      	strb	r3, [r7, #3]
 8003522:	460b      	mov	r3, r1
 8003524:	70bb      	strb	r3, [r7, #2]
 8003526:	4613      	mov	r3, r2
 8003528:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	212c      	movs	r1, #44	; 0x2c
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	4413      	add	r3, r2
 8003536:	333b      	adds	r3, #59	; 0x3b
 8003538:	78ba      	ldrb	r2, [r7, #2]
 800353a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	212c      	movs	r1, #44	; 0x2c
 8003542:	fb01 f303 	mul.w	r3, r1, r3
 8003546:	4413      	add	r3, r2
 8003548:	333f      	adds	r3, #63	; 0x3f
 800354a:	787a      	ldrb	r2, [r7, #1]
 800354c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800354e:	7c3b      	ldrb	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d112      	bne.n	800357a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3342      	adds	r3, #66	; 0x42
 8003562:	2203      	movs	r2, #3
 8003564:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	333d      	adds	r3, #61	; 0x3d
 8003574:	7f3a      	ldrb	r2, [r7, #28]
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e008      	b.n	800358c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800357a:	78fb      	ldrb	r3, [r7, #3]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3342      	adds	r3, #66	; 0x42
 8003588:	2202      	movs	r2, #2
 800358a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800358c:	787b      	ldrb	r3, [r7, #1]
 800358e:	2b03      	cmp	r3, #3
 8003590:	f200 80c6 	bhi.w	8003720 <HAL_HCD_HC_SubmitRequest+0x210>
 8003594:	a201      	add	r2, pc, #4	; (adr r2, 800359c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035ad 	.word	0x080035ad
 80035a0:	0800370d 	.word	0x0800370d
 80035a4:	08003611 	.word	0x08003611
 80035a8:	0800368f 	.word	0x0800368f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80035ac:	7c3b      	ldrb	r3, [r7, #16]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 80b8 	bne.w	8003724 <HAL_HCD_HC_SubmitRequest+0x214>
 80035b4:	78bb      	ldrb	r3, [r7, #2]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f040 80b4 	bne.w	8003724 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80035bc:	8b3b      	ldrh	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3355      	adds	r3, #85	; 0x55
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	212c      	movs	r1, #44	; 0x2c
 80035da:	fb01 f303 	mul.w	r3, r1, r3
 80035de:	4413      	add	r3, r2
 80035e0:	3355      	adds	r3, #85	; 0x55
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d109      	bne.n	80035fc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	3342      	adds	r3, #66	; 0x42
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035fa:	e093      	b.n	8003724 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	212c      	movs	r1, #44	; 0x2c
 8003602:	fb01 f303 	mul.w	r3, r1, r3
 8003606:	4413      	add	r3, r2
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]
      break;
 800360e:	e089      	b.n	8003724 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003610:	78bb      	ldrb	r3, [r7, #2]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d11d      	bne.n	8003652 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	3355      	adds	r3, #85	; 0x55
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	3342      	adds	r3, #66	; 0x42
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800363c:	e073      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3342      	adds	r3, #66	; 0x42
 800364c:	2202      	movs	r2, #2
 800364e:	701a      	strb	r2, [r3, #0]
      break;
 8003650:	e069      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3354      	adds	r3, #84	; 0x54
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3342      	adds	r3, #66	; 0x42
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
      break;
 8003678:	e055      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3342      	adds	r3, #66	; 0x42
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]
      break;
 800368c:	e04b      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11d      	bne.n	80036d0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3355      	adds	r3, #85	; 0x55
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3342      	adds	r3, #66	; 0x42
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036ba:	e034      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	3342      	adds	r3, #66	; 0x42
 80036ca:	2202      	movs	r2, #2
 80036cc:	701a      	strb	r2, [r3, #0]
      break;
 80036ce:	e02a      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	212c      	movs	r1, #44	; 0x2c
 80036d6:	fb01 f303 	mul.w	r3, r1, r3
 80036da:	4413      	add	r3, r2
 80036dc:	3354      	adds	r3, #84	; 0x54
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	212c      	movs	r1, #44	; 0x2c
 80036ea:	fb01 f303 	mul.w	r3, r1, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	3342      	adds	r3, #66	; 0x42
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
      break;
 80036f6:	e016      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3342      	adds	r3, #66	; 0x42
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
      break;
 800370a:	e00c      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3342      	adds	r3, #66	; 0x42
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
      break;
 800371e:	e002      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003724:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3344      	adds	r3, #68	; 0x44
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	8b3a      	ldrh	r2, [r7, #24]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	202c      	movs	r0, #44	; 0x2c
 8003740:	fb00 f303 	mul.w	r3, r0, r3
 8003744:	440b      	add	r3, r1
 8003746:	334c      	adds	r3, #76	; 0x4c
 8003748:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3360      	adds	r3, #96	; 0x60
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	3350      	adds	r3, #80	; 0x50
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3339      	adds	r3, #57	; 0x39
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3361      	adds	r3, #97	; 0x61
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	222c      	movs	r2, #44	; 0x2c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	3338      	adds	r3, #56	; 0x38
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	18d1      	adds	r1, r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	f005 fecc 	bl	8009548 <USB_HC_StartXfer>
 80037b0:	4603      	mov	r3, r0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop

080037bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f005 fbcd 	bl	8008f72 <USB_GetMode>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b01      	cmp	r3, #1
 80037dc:	f040 80f6 	bne.w	80039cc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f005 fbb1 	bl	8008f4c <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80ec 	beq.w	80039ca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f005 fba8 	bl	8008f4c <USB_ReadInterrupts>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	d104      	bne.n	8003812 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003810:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f005 fb98 	bl	8008f4c <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003826:	d104      	bne.n	8003832 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003830:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f005 fb88 	bl	8008f4c <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003846:	d104      	bne.n	8003852 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003850:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f005 fb78 	bl	8008f4c <USB_ReadInterrupts>
 800385c:	4603      	mov	r3, r0
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d103      	bne.n	800386e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2202      	movs	r2, #2
 800386c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f005 fb6a 	bl	8008f4c <USB_ReadInterrupts>
 8003878:	4603      	mov	r3, r0
 800387a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800387e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003882:	d11c      	bne.n	80038be <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800388c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10f      	bne.n	80038be <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800389e:	2110      	movs	r1, #16
 80038a0:	6938      	ldr	r0, [r7, #16]
 80038a2:	f005 fa59 	bl	8008d58 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80038a6:	6938      	ldr	r0, [r7, #16]
 80038a8:	f005 fa8a 	bl	8008dc0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2101      	movs	r1, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	f005 fc60 	bl	8009178 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f009 fbaf 	bl	800d01c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f005 fb42 	bl	8008f4c <USB_ReadInterrupts>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d2:	d102      	bne.n	80038da <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f001 f89e 	bl	8004a16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 fb34 	bl	8008f4c <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d106      	bne.n	80038fc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f009 fb78 	bl	800cfe4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2208      	movs	r2, #8
 80038fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f005 fb23 	bl	8008f4c <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d101      	bne.n	8003914 <HAL_HCD_IRQHandler+0x158>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_HCD_IRQHandler+0x15a>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0210 	bic.w	r2, r2, #16
 8003928:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ffa1 	bl	8004872 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0210 	orr.w	r2, r2, #16
 800393e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f005 fb01 	bl	8008f4c <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003954:	d13a      	bne.n	80039cc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f005 ff36 	bl	80097cc <USB_HC_ReadInterrupt>
 8003960:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e025      	b.n	80039b4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	fa22 f303 	lsr.w	r3, r2, r3
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d106      	bne.n	80039a2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8ab 	bl	8003af6 <HCD_HC_IN_IRQHandler>
 80039a0:	e005      	b.n	80039ae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fbf9 	bl	80041a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3d4      	bcc.n	8003968 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c6:	615a      	str	r2, [r3, #20]
 80039c8:	e000      	b.n	80039cc <HAL_HCD_IRQHandler+0x210>
      return;
 80039ca:	bf00      	nop
    }
  }
}
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_HCD_Start+0x16>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e013      	b.n	8003a10 <HAL_HCD_Start+0x3e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f005 fc22 	bl	8009240 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f005 f93a 	bl	8008c7a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_HCD_Stop+0x16>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e00d      	b.n	8003a4a <HAL_HCD_Stop+0x32>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f006 f810 	bl	8009a60 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f005 fbc4 	bl	80091ec <USB_ResetPort>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3360      	adds	r3, #96	; 0x60
 8003a88:	781b      	ldrb	r3, [r3, #0]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3350      	adds	r3, #80	; 0x50
 8003ab0:	681b      	ldr	r3, [r3, #0]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f005 fc08 	bl	80092e0 <USB_GetCurrentFrame>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f005 fbe3 	bl	80092b2 <USB_GetHostSpeed>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d11a      	bne.n	8003b5c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b32:	461a      	mov	r2, r3
 8003b34:	2304      	movs	r3, #4
 8003b36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	212c      	movs	r1, #44	; 0x2c
 8003b3e:	fb01 f303 	mul.w	r3, r1, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	3361      	adds	r3, #97	; 0x61
 8003b46:	2206      	movs	r2, #6
 8003b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f005 fe4a 	bl	80097ee <USB_HC_Halt>
 8003b5a:	e0af      	b.n	8003cbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b72:	d11b      	bne.n	8003bac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b80:	461a      	mov	r2, r3
 8003b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3361      	adds	r3, #97	; 0x61
 8003b96:	2207      	movs	r2, #7
 8003b98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f005 fe22 	bl	80097ee <USB_HC_Halt>
 8003baa:	e087      	b.n	8003cbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d109      	bne.n	8003bd6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	6093      	str	r3, [r2, #8]
 8003bd4:	e072      	b.n	8003cbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d11a      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	212c      	movs	r1, #44	; 0x2c
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
 8003c08:	4413      	add	r3, r2
 8003c0a:	3361      	adds	r3, #97	; 0x61
 8003c0c:	2205      	movs	r2, #5
 8003c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	4611      	mov	r1, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f005 fde7 	bl	80097ee <USB_HC_Halt>
 8003c20:	e04c      	b.n	8003cbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c38:	d11b      	bne.n	8003c72 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	461a      	mov	r2, r3
 8003c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	3361      	adds	r3, #97	; 0x61
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f005 fdbf 	bl	80097ee <USB_HC_Halt>
 8003c70:	e024      	b.n	8003cbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d119      	bne.n	8003cbc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	461a      	mov	r2, r3
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3361      	adds	r3, #97	; 0x61
 8003ca8:	2206      	movs	r2, #6
 8003caa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f005 fd99 	bl	80097ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd2:	d112      	bne.n	8003cfa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	4611      	mov	r1, r2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 fd85 	bl	80097ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003cf8:	e24e      	b.n	8004198 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 80df 	bne.w	8003ed0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d019      	beq.n	8003d4e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	212c      	movs	r1, #44	; 0x2c
 8003d20:	fb01 f303 	mul.w	r3, r1, r3
 8003d24:	4413      	add	r3, r2
 8003d26:	3348      	adds	r3, #72	; 0x48
 8003d28:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	0159      	lsls	r1, r3, #5
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	440b      	add	r3, r1
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003d3c:	1ad2      	subs	r2, r2, r3
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	202c      	movs	r0, #44	; 0x2c
 8003d44:	fb00 f303 	mul.w	r3, r0, r3
 8003d48:	440b      	add	r3, r1
 8003d4a:	3350      	adds	r3, #80	; 0x50
 8003d4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	335c      	adds	r3, #92	; 0x5c
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2301      	movs	r3, #1
 8003d82:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	333f      	adds	r3, #63	; 0x3f
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	333f      	adds	r3, #63	; 0x3f
 8003da6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d111      	bne.n	8003dd0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	4611      	mov	r1, r2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f005 fd19 	bl	80097ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2310      	movs	r3, #16
 8003dcc:	6093      	str	r3, [r2, #8]
 8003dce:	e03a      	b.n	8003e46 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	333f      	adds	r3, #63	; 0x3f
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d009      	beq.n	8003df8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	333f      	adds	r3, #63	; 0x3f
 8003df2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d126      	bne.n	8003e46 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e16:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	b2d9      	uxtb	r1, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	202c      	movs	r0, #44	; 0x2c
 8003e34:	fb00 f303 	mul.w	r3, r0, r3
 8003e38:	4413      	add	r3, r2
 8003e3a:	3360      	adds	r3, #96	; 0x60
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f009 f8f9 	bl	800d038 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d12b      	bne.n	8003ea6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	212c      	movs	r1, #44	; 0x2c
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	4413      	add	r3, r2
 8003e5a:	3348      	adds	r3, #72	; 0x48
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	202c      	movs	r0, #44	; 0x2c
 8003e64:	fb00 f202 	mul.w	r2, r0, r2
 8003e68:	440a      	add	r2, r1
 8003e6a:	3240      	adds	r2, #64	; 0x40
 8003e6c:	8812      	ldrh	r2, [r2, #0]
 8003e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 818e 	beq.w	8004198 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	212c      	movs	r1, #44	; 0x2c
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	4413      	add	r3, r2
 8003e88:	3354      	adds	r3, #84	; 0x54
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f083 0301 	eor.w	r3, r3, #1
 8003e90:	b2d8      	uxtb	r0, r3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	212c      	movs	r1, #44	; 0x2c
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3354      	adds	r3, #84	; 0x54
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	701a      	strb	r2, [r3, #0]
}
 8003ea4:	e178      	b.n	8004198 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	212c      	movs	r1, #44	; 0x2c
 8003eac:	fb01 f303 	mul.w	r3, r1, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3354      	adds	r3, #84	; 0x54
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	f083 0301 	eor.w	r3, r3, #1
 8003eba:	b2d8      	uxtb	r0, r3
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3354      	adds	r3, #84	; 0x54
 8003eca:	4602      	mov	r2, r0
 8003ecc:	701a      	strb	r2, [r3, #0]
}
 8003ece:	e163      	b.n	8004198 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	f040 80f6 	bne.w	80040d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3361      	adds	r3, #97	; 0x61
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d109      	bne.n	8003f10 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3360      	adds	r3, #96	; 0x60
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	e0c9      	b.n	80040a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3361      	adds	r3, #97	; 0x61
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b05      	cmp	r3, #5
 8003f22:	d109      	bne.n	8003f38 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	212c      	movs	r1, #44	; 0x2c
 8003f2a:	fb01 f303 	mul.w	r3, r1, r3
 8003f2e:	4413      	add	r3, r2
 8003f30:	3360      	adds	r3, #96	; 0x60
 8003f32:	2205      	movs	r2, #5
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e0b5      	b.n	80040a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	212c      	movs	r1, #44	; 0x2c
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	4413      	add	r3, r2
 8003f44:	3361      	adds	r3, #97	; 0x61
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b06      	cmp	r3, #6
 8003f4a:	d009      	beq.n	8003f60 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	212c      	movs	r1, #44	; 0x2c
 8003f52:	fb01 f303 	mul.w	r3, r1, r3
 8003f56:	4413      	add	r3, r2
 8003f58:	3361      	adds	r3, #97	; 0x61
 8003f5a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d150      	bne.n	8004002 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	335c      	adds	r3, #92	; 0x5c
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	202c      	movs	r0, #44	; 0x2c
 8003f78:	fb00 f303 	mul.w	r3, r0, r3
 8003f7c:	440b      	add	r3, r1
 8003f7e:	335c      	adds	r3, #92	; 0x5c
 8003f80:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	212c      	movs	r1, #44	; 0x2c
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	335c      	adds	r3, #92	; 0x5c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d912      	bls.n	8003fbc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	212c      	movs	r1, #44	; 0x2c
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	335c      	adds	r3, #92	; 0x5c
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	212c      	movs	r1, #44	; 0x2c
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3360      	adds	r3, #96	; 0x60
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fba:	e073      	b.n	80040a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	212c      	movs	r1, #44	; 0x2c
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3360      	adds	r3, #96	; 0x60
 8003fca:	2202      	movs	r2, #2
 8003fcc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fe4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004000:	e050      	b.n	80040a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	212c      	movs	r1, #44	; 0x2c
 8004008:	fb01 f303 	mul.w	r3, r1, r3
 800400c:	4413      	add	r3, r2
 800400e:	3361      	adds	r3, #97	; 0x61
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d122      	bne.n	800405c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3360      	adds	r3, #96	; 0x60
 8004024:	2202      	movs	r2, #2
 8004026:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800403e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004046:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	e023      	b.n	80040a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	3361      	adds	r3, #97	; 0x61
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b07      	cmp	r3, #7
 800406e:	d119      	bne.n	80040a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	212c      	movs	r1, #44	; 0x2c
 8004076:	fb01 f303 	mul.w	r3, r1, r3
 800407a:	4413      	add	r3, r2
 800407c:	335c      	adds	r3, #92	; 0x5c
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	202c      	movs	r0, #44	; 0x2c
 8004088:	fb00 f303 	mul.w	r3, r0, r3
 800408c:	440b      	add	r3, r1
 800408e:	335c      	adds	r3, #92	; 0x5c
 8004090:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	fb01 f303 	mul.w	r3, r1, r3
 800409c:	4413      	add	r3, r2
 800409e:	3360      	adds	r3, #96	; 0x60
 80040a0:	2204      	movs	r2, #4
 80040a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	461a      	mov	r2, r3
 80040b2:	2302      	movs	r3, #2
 80040b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	b2d9      	uxtb	r1, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	202c      	movs	r0, #44	; 0x2c
 80040c0:	fb00 f303 	mul.w	r3, r0, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	3360      	adds	r3, #96	; 0x60
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f008 ffb3 	bl	800d038 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040d2:	e061      	b.n	8004198 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d156      	bne.n	8004198 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	212c      	movs	r1, #44	; 0x2c
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	333f      	adds	r3, #63	; 0x3f
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d111      	bne.n	8004122 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	212c      	movs	r1, #44	; 0x2c
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	335c      	adds	r3, #92	; 0x5c
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f005 fb67 	bl	80097ee <USB_HC_Halt>
 8004120:	e031      	b.n	8004186 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	212c      	movs	r1, #44	; 0x2c
 8004128:	fb01 f303 	mul.w	r3, r1, r3
 800412c:	4413      	add	r3, r2
 800412e:	333f      	adds	r3, #63	; 0x3f
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	212c      	movs	r1, #44	; 0x2c
 800413c:	fb01 f303 	mul.w	r3, r1, r3
 8004140:	4413      	add	r3, r2
 8004142:	333f      	adds	r3, #63	; 0x3f
 8004144:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004146:	2b02      	cmp	r3, #2
 8004148:	d11d      	bne.n	8004186 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	212c      	movs	r1, #44	; 0x2c
 8004150:	fb01 f303 	mul.w	r3, r1, r3
 8004154:	4413      	add	r3, r2
 8004156:	335c      	adds	r3, #92	; 0x5c
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d110      	bne.n	8004186 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	3361      	adds	r3, #97	; 0x61
 8004172:	2203      	movs	r2, #3
 8004174:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	4611      	mov	r1, r2
 8004180:	4618      	mov	r0, r3
 8004182:	f005 fb34 	bl	80097ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	2310      	movs	r3, #16
 8004196:	6093      	str	r3, [r2, #8]
}
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b088      	sub	sp, #32
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80041b6:	78fb      	ldrb	r3, [r7, #3]
 80041b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d11a      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	2304      	movs	r3, #4
 80041e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	212c      	movs	r1, #44	; 0x2c
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	4413      	add	r3, r2
 80041ee:	3361      	adds	r3, #97	; 0x61
 80041f0:	2206      	movs	r2, #6
 80041f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f005 faf5 	bl	80097ee <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004204:	e331      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d12e      	bne.n	800427a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004228:	461a      	mov	r2, r3
 800422a:	2320      	movs	r3, #32
 800422c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	212c      	movs	r1, #44	; 0x2c
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	333d      	adds	r3, #61	; 0x3d
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	f040 8313 	bne.w	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	333d      	adds	r3, #61	; 0x3d
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	3360      	adds	r3, #96	; 0x60
 8004264:	2202      	movs	r2, #2
 8004266:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	4611      	mov	r1, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f005 fabb 	bl	80097ee <USB_HC_Halt>
}
 8004278:	e2f7      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800428c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004290:	d112      	bne.n	80042b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429e:	461a      	mov	r2, r3
 80042a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 fa9c 	bl	80097ee <USB_HC_Halt>
}
 80042b6:	e2d8      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d140      	bne.n	8004350 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	335c      	adds	r3, #92	; 0x5c
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d111      	bne.n	800431a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	333d      	adds	r3, #61	; 0x3d
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	461a      	mov	r2, r3
 8004328:	2301      	movs	r3, #1
 800432a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3361      	adds	r3, #97	; 0x61
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f005 fa50 	bl	80097ee <USB_HC_Halt>
}
 800434e:	e28c      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d12c      	bne.n	80043c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	3361      	adds	r3, #97	; 0x61
 8004374:	2204      	movs	r2, #4
 8004376:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	333d      	adds	r3, #61	; 0x3d
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	212c      	movs	r1, #44	; 0x2c
 8004390:	fb01 f303 	mul.w	r3, r1, r3
 8004394:	4413      	add	r3, r2
 8004396:	335c      	adds	r3, #92	; 0x5c
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 fa21 	bl	80097ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	461a      	mov	r2, r3
 80043ba:	2340      	movs	r3, #64	; 0x40
 80043bc:	6093      	str	r3, [r2, #8]
}
 80043be:	e254      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11a      	bne.n	800440c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	461a      	mov	r2, r3
 80043e4:	2308      	movs	r3, #8
 80043e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	212c      	movs	r1, #44	; 0x2c
 80043ee:	fb01 f303 	mul.w	r3, r1, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	3361      	adds	r3, #97	; 0x61
 80043f6:	2205      	movs	r2, #5
 80043f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	4611      	mov	r1, r2
 8004404:	4618      	mov	r0, r3
 8004406:	f005 f9f2 	bl	80097ee <USB_HC_Halt>
}
 800440a:	e22e      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b10      	cmp	r3, #16
 8004420:	d140      	bne.n	80044a4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	212c      	movs	r1, #44	; 0x2c
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	4413      	add	r3, r2
 800442e:	335c      	adds	r3, #92	; 0x5c
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3361      	adds	r3, #97	; 0x61
 8004442:	2203      	movs	r2, #3
 8004444:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	333d      	adds	r3, #61	; 0x3d
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d112      	bne.n	8004480 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	333c      	adds	r3, #60	; 0x3c
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	333d      	adds	r3, #61	; 0x3d
 800447c:	2201      	movs	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f005 f9af 	bl	80097ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800449c:	461a      	mov	r2, r3
 800449e:	2310      	movs	r3, #16
 80044a0:	6093      	str	r3, [r2, #8]
}
 80044a2:	e1e2      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d164      	bne.n	8004584 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d111      	bne.n	80044e6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	212c      	movs	r1, #44	; 0x2c
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	3361      	adds	r3, #97	; 0x61
 80044d0:	2206      	movs	r2, #6
 80044d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f005 f985 	bl	80097ee <USB_HC_Halt>
 80044e4:	e044      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	212c      	movs	r1, #44	; 0x2c
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	4413      	add	r3, r2
 80044f2:	335c      	adds	r3, #92	; 0x5c
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	202c      	movs	r0, #44	; 0x2c
 80044fe:	fb00 f303 	mul.w	r3, r0, r3
 8004502:	440b      	add	r3, r1
 8004504:	335c      	adds	r3, #92	; 0x5c
 8004506:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	212c      	movs	r1, #44	; 0x2c
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	335c      	adds	r3, #92	; 0x5c
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d920      	bls.n	800455e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	212c      	movs	r1, #44	; 0x2c
 8004522:	fb01 f303 	mul.w	r3, r1, r3
 8004526:	4413      	add	r3, r2
 8004528:	335c      	adds	r3, #92	; 0x5c
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	212c      	movs	r1, #44	; 0x2c
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	3360      	adds	r3, #96	; 0x60
 800453c:	2204      	movs	r2, #4
 800453e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	b2d9      	uxtb	r1, r3
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	202c      	movs	r0, #44	; 0x2c
 800454a:	fb00 f303 	mul.w	r3, r0, r3
 800454e:	4413      	add	r3, r2
 8004550:	3360      	adds	r3, #96	; 0x60
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f008 fd6e 	bl	800d038 <HAL_HCD_HC_NotifyURBChange_Callback>
 800455c:	e008      	b.n	8004570 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	212c      	movs	r1, #44	; 0x2c
 8004564:	fb01 f303 	mul.w	r3, r1, r3
 8004568:	4413      	add	r3, r2
 800456a:	3360      	adds	r3, #96	; 0x60
 800456c:	2202      	movs	r2, #2
 800456e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	4413      	add	r3, r2
 8004578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800457c:	461a      	mov	r2, r3
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	6093      	str	r3, [r2, #8]
}
 8004582:	e172      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	d11b      	bne.n	80045d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3361      	adds	r3, #97	; 0x61
 80045aa:	2208      	movs	r2, #8
 80045ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f005 f918 	bl	80097ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ca:	461a      	mov	r2, r3
 80045cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d0:	6093      	str	r3, [r2, #8]
}
 80045d2:	e14a      	b.n	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	f040 813f 	bne.w	800486a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	212c      	movs	r1, #44	; 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	3361      	adds	r3, #97	; 0x61
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d17d      	bne.n	80046fc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3360      	adds	r3, #96	; 0x60
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	212c      	movs	r1, #44	; 0x2c
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	333f      	adds	r3, #63	; 0x3f
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d00a      	beq.n	800463c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	212c      	movs	r1, #44	; 0x2c
 800462c:	fb01 f303 	mul.w	r3, r1, r3
 8004630:	4413      	add	r3, r2
 8004632:	333f      	adds	r3, #63	; 0x3f
 8004634:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004636:	2b03      	cmp	r3, #3
 8004638:	f040 8100 	bne.w	800483c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d113      	bne.n	800466c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3355      	adds	r3, #85	; 0x55
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	f083 0301 	eor.w	r3, r3, #1
 8004658:	b2d8      	uxtb	r0, r3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	3355      	adds	r3, #85	; 0x55
 8004668:	4602      	mov	r2, r0
 800466a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b01      	cmp	r3, #1
 8004672:	f040 80e3 	bne.w	800483c <HCD_HC_OUT_IRQHandler+0x69c>
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	334c      	adds	r3, #76	; 0x4c
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80d8 	beq.w	800483c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	334c      	adds	r3, #76	; 0x4c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	202c      	movs	r0, #44	; 0x2c
 80046a2:	fb00 f202 	mul.w	r2, r0, r2
 80046a6:	440a      	add	r2, r1
 80046a8:	3240      	adds	r2, #64	; 0x40
 80046aa:	8812      	ldrh	r2, [r2, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	3b01      	subs	r3, #1
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	202c      	movs	r0, #44	; 0x2c
 80046b6:	fb00 f202 	mul.w	r2, r0, r2
 80046ba:	440a      	add	r2, r1
 80046bc:	3240      	adds	r2, #64	; 0x40
 80046be:	8812      	ldrh	r2, [r2, #0]
 80046c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80b5 	beq.w	800483c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	212c      	movs	r1, #44	; 0x2c
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	4413      	add	r3, r2
 80046de:	3355      	adds	r3, #85	; 0x55
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	f083 0301 	eor.w	r3, r3, #1
 80046e6:	b2d8      	uxtb	r0, r3
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3355      	adds	r3, #85	; 0x55
 80046f6:	4602      	mov	r2, r0
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e09f      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	212c      	movs	r1, #44	; 0x2c
 8004702:	fb01 f303 	mul.w	r3, r1, r3
 8004706:	4413      	add	r3, r2
 8004708:	3361      	adds	r3, #97	; 0x61
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b03      	cmp	r3, #3
 800470e:	d109      	bne.n	8004724 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	212c      	movs	r1, #44	; 0x2c
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	4413      	add	r3, r2
 800471c:	3360      	adds	r3, #96	; 0x60
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	e08b      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	212c      	movs	r1, #44	; 0x2c
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	4413      	add	r3, r2
 8004730:	3361      	adds	r3, #97	; 0x61
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d109      	bne.n	800474c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	212c      	movs	r1, #44	; 0x2c
 800473e:	fb01 f303 	mul.w	r3, r1, r3
 8004742:	4413      	add	r3, r2
 8004744:	3360      	adds	r3, #96	; 0x60
 8004746:	2202      	movs	r2, #2
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e077      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	212c      	movs	r1, #44	; 0x2c
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	4413      	add	r3, r2
 8004758:	3361      	adds	r3, #97	; 0x61
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b05      	cmp	r3, #5
 800475e:	d109      	bne.n	8004774 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	212c      	movs	r1, #44	; 0x2c
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	4413      	add	r3, r2
 800476c:	3360      	adds	r3, #96	; 0x60
 800476e:	2205      	movs	r2, #5
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e063      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	3361      	adds	r3, #97	; 0x61
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b06      	cmp	r3, #6
 8004786:	d009      	beq.n	800479c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3361      	adds	r3, #97	; 0x61
 8004796:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004798:	2b08      	cmp	r3, #8
 800479a:	d14f      	bne.n	800483c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	335c      	adds	r3, #92	; 0x5c
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	202c      	movs	r0, #44	; 0x2c
 80047b4:	fb00 f303 	mul.w	r3, r0, r3
 80047b8:	440b      	add	r3, r1
 80047ba:	335c      	adds	r3, #92	; 0x5c
 80047bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	212c      	movs	r1, #44	; 0x2c
 80047c4:	fb01 f303 	mul.w	r3, r1, r3
 80047c8:	4413      	add	r3, r2
 80047ca:	335c      	adds	r3, #92	; 0x5c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d912      	bls.n	80047f8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	212c      	movs	r1, #44	; 0x2c
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	4413      	add	r3, r2
 80047de:	335c      	adds	r3, #92	; 0x5c
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	3360      	adds	r3, #96	; 0x60
 80047f2:	2204      	movs	r2, #4
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	e021      	b.n	800483c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	3360      	adds	r3, #96	; 0x60
 8004806:	2202      	movs	r2, #2
 8004808:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004820:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004828:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004836:	461a      	mov	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	461a      	mov	r2, r3
 800484a:	2302      	movs	r3, #2
 800484c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	b2d9      	uxtb	r1, r3
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	202c      	movs	r0, #44	; 0x2c
 8004858:	fb00 f303 	mul.w	r3, r0, r3
 800485c:	4413      	add	r3, r2
 800485e:	3360      	adds	r3, #96	; 0x60
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f008 fbe7 	bl	800d038 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800486a:	bf00      	nop
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b08a      	sub	sp, #40	; 0x28
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	0c5b      	lsrs	r3, r3, #17
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d004      	beq.n	80048b8 <HCD_RXQLVL_IRQHandler+0x46>
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	f000 80a9 	beq.w	8004a08 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80048b6:	e0aa      	b.n	8004a0e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 80a6 	beq.w	8004a0c <HCD_RXQLVL_IRQHandler+0x19a>
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	212c      	movs	r1, #44	; 0x2c
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3344      	adds	r3, #68	; 0x44
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 809b 	beq.w	8004a0c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	3350      	adds	r3, #80	; 0x50
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	441a      	add	r2, r3
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	202c      	movs	r0, #44	; 0x2c
 80048f0:	fb00 f303 	mul.w	r3, r0, r3
 80048f4:	440b      	add	r3, r1
 80048f6:	334c      	adds	r3, #76	; 0x4c
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d87a      	bhi.n	80049f4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	3344      	adds	r3, #68	; 0x44
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	b292      	uxth	r2, r2
 8004916:	4619      	mov	r1, r3
 8004918:	f004 fac0 	bl	8008e9c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	212c      	movs	r1, #44	; 0x2c
 8004922:	fb01 f303 	mul.w	r3, r1, r3
 8004926:	4413      	add	r3, r2
 8004928:	3344      	adds	r3, #68	; 0x44
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	441a      	add	r2, r3
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	202c      	movs	r0, #44	; 0x2c
 8004936:	fb00 f303 	mul.w	r3, r0, r3
 800493a:	440b      	add	r3, r1
 800493c:	3344      	adds	r3, #68	; 0x44
 800493e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3350      	adds	r3, #80	; 0x50
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	441a      	add	r2, r3
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	202c      	movs	r0, #44	; 0x2c
 800495a:	fb00 f303 	mul.w	r3, r0, r3
 800495e:	440b      	add	r3, r1
 8004960:	3350      	adds	r3, #80	; 0x50
 8004962:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	4413      	add	r3, r2
 800496c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	0cdb      	lsrs	r3, r3, #19
 8004974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004978:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3340      	adds	r3, #64	; 0x40
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4293      	cmp	r3, r2
 8004990:	d13c      	bne.n	8004a0c <HCD_RXQLVL_IRQHandler+0x19a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d039      	beq.n	8004a0c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	015a      	lsls	r2, r3, #5
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	4413      	add	r3, r2
 80049c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c4:	461a      	mov	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3354      	adds	r3, #84	; 0x54
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f083 0301 	eor.w	r3, r3, #1
 80049de:	b2d8      	uxtb	r0, r3
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3354      	adds	r3, #84	; 0x54
 80049ee:	4602      	mov	r2, r0
 80049f0:	701a      	strb	r2, [r3, #0]
      break;
 80049f2:	e00b      	b.n	8004a0c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3360      	adds	r3, #96	; 0x60
 8004a02:	2204      	movs	r2, #4
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	e001      	b.n	8004a0c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a08:	bf00      	nop
 8004a0a:	e000      	b.n	8004a0e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a0c:	bf00      	nop
  }
}
 8004a0e:	bf00      	nop
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b086      	sub	sp, #24
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d10b      	bne.n	8004a66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d102      	bne.n	8004a5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f008 fad1 	bl	800d000 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d132      	bne.n	8004ad6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f043 0308 	orr.w	r3, r3, #8
 8004a76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d126      	bne.n	8004ad0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d113      	bne.n	8004ab2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004a90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a94:	d106      	bne.n	8004aa4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f004 fb6b 	bl	8009178 <USB_InitFSLSPClkSel>
 8004aa2:	e011      	b.n	8004ac8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f004 fb64 	bl	8009178 <USB_InitFSLSPClkSel>
 8004ab0:	e00a      	b.n	8004ac8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d106      	bne.n	8004ac8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004ac6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f008 fac3 	bl	800d054 <HAL_HCD_PortEnabled_Callback>
 8004ace:	e002      	b.n	8004ad6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f008 facd 	bl	800d070 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d103      	bne.n	8004ae8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f043 0320 	orr.w	r3, r3, #32
 8004ae6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aee:	461a      	mov	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e12b      	b.n	8004d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fce6 	bl	80024f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b60:	f001 fd7a 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 8004b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4a81      	ldr	r2, [pc, #516]	; (8004d70 <HAL_I2C_Init+0x274>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d807      	bhi.n	8004b80 <HAL_I2C_Init+0x84>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a80      	ldr	r2, [pc, #512]	; (8004d74 <HAL_I2C_Init+0x278>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	bf94      	ite	ls
 8004b78:	2301      	movls	r3, #1
 8004b7a:	2300      	movhi	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e006      	b.n	8004b8e <HAL_I2C_Init+0x92>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4a7d      	ldr	r2, [pc, #500]	; (8004d78 <HAL_I2C_Init+0x27c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bf94      	ite	ls
 8004b88:	2301      	movls	r3, #1
 8004b8a:	2300      	movhi	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e0e7      	b.n	8004d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4a78      	ldr	r2, [pc, #480]	; (8004d7c <HAL_I2C_Init+0x280>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	0c9b      	lsrs	r3, r3, #18
 8004ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4a6a      	ldr	r2, [pc, #424]	; (8004d70 <HAL_I2C_Init+0x274>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d802      	bhi.n	8004bd0 <HAL_I2C_Init+0xd4>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	e009      	b.n	8004be4 <HAL_I2C_Init+0xe8>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	4a69      	ldr	r2, [pc, #420]	; (8004d80 <HAL_I2C_Init+0x284>)
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	099b      	lsrs	r3, r3, #6
 8004be2:	3301      	adds	r3, #1
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	495c      	ldr	r1, [pc, #368]	; (8004d70 <HAL_I2C_Init+0x274>)
 8004c00:	428b      	cmp	r3, r1
 8004c02:	d819      	bhi.n	8004c38 <HAL_I2C_Init+0x13c>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1e59      	subs	r1, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c18:	400b      	ands	r3, r1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_I2C_Init+0x138>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e59      	subs	r1, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	e051      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004c34:	2304      	movs	r3, #4
 8004c36:	e04f      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d111      	bne.n	8004c64 <HAL_I2C_Init+0x168>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1e58      	subs	r0, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e012      	b.n	8004c8a <HAL_I2C_Init+0x18e>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1e58      	subs	r0, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6859      	ldr	r1, [r3, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	0099      	lsls	r1, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <HAL_I2C_Init+0x196>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e022      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10e      	bne.n	8004cb8 <HAL_I2C_Init+0x1bc>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1e58      	subs	r0, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	440b      	add	r3, r1
 8004ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb6:	e00f      	b.n	8004cd8 <HAL_I2C_Init+0x1dc>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	1e58      	subs	r0, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	0099      	lsls	r1, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cce:	3301      	adds	r3, #1
 8004cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	6809      	ldr	r1, [r1, #0]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6911      	ldr	r1, [r2, #16]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68d2      	ldr	r2, [r2, #12]
 8004d12:	4311      	orrs	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	000186a0 	.word	0x000186a0
 8004d74:	001e847f 	.word	0x001e847f
 8004d78:	003d08ff 	.word	0x003d08ff
 8004d7c:	431bde83 	.word	0x431bde83
 8004d80:	10624dd3 	.word	0x10624dd3

08004d84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	460b      	mov	r3, r1
 8004d92:	817b      	strh	r3, [r7, #10]
 8004d94:	4613      	mov	r3, r2
 8004d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d98:	f7fd fec0 	bl	8002b1c <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	f040 80e0 	bne.w	8004f6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2319      	movs	r3, #25
 8004db2:	2201      	movs	r2, #1
 8004db4:	4970      	ldr	r1, [pc, #448]	; (8004f78 <HAL_I2C_Master_Transmit+0x1f4>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fd86 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0d3      	b.n	8004f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_I2C_Master_Transmit+0x50>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e0cc      	b.n	8004f6e <HAL_I2C_Master_Transmit+0x1ea>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d007      	beq.n	8004dfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2221      	movs	r2, #33	; 0x21
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2210      	movs	r2, #16
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	893a      	ldrh	r2, [r7, #8]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a50      	ldr	r2, [pc, #320]	; (8004f7c <HAL_I2C_Master_Transmit+0x1f8>)
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e3c:	8979      	ldrh	r1, [r7, #10]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6a3a      	ldr	r2, [r7, #32]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fbf0 	bl	8005628 <I2C_MasterRequestWrite>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e08d      	b.n	8004f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e68:	e066      	b.n	8004f38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	6a39      	ldr	r1, [r7, #32]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 fe00 	bl	8005a74 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d107      	bne.n	8004e92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e06b      	b.n	8004f6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	781a      	ldrb	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d11b      	bne.n	8004f0c <HAL_I2C_Master_Transmit+0x188>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d017      	beq.n	8004f0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	6a39      	ldr	r1, [r7, #32]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fdf0 	bl	8005af6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00d      	beq.n	8004f38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d107      	bne.n	8004f34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e01a      	b.n	8004f6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d194      	bne.n	8004e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e000      	b.n	8004f6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
  }
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	00100002 	.word	0x00100002
 8004f7c:	ffff0000 	.word	0xffff0000

08004f80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	607a      	str	r2, [r7, #4]
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	817b      	strh	r3, [r7, #10]
 8004f90:	4613      	mov	r3, r2
 8004f92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f94:	f7fd fdc2 	bl	8002b1c <HAL_GetTick>
 8004f98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b20      	cmp	r3, #32
 8004fa4:	f040 820b 	bne.w	80053be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2319      	movs	r3, #25
 8004fae:	2201      	movs	r2, #1
 8004fb0:	497c      	ldr	r1, [pc, #496]	; (80051a4 <HAL_I2C_Master_Receive+0x224>)
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fc88 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e1fe      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_I2C_Master_Receive+0x50>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e1f7      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d007      	beq.n	8004ff6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2222      	movs	r2, #34	; 0x22
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2210      	movs	r2, #16
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	893a      	ldrh	r2, [r7, #8]
 8005026:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	4a5c      	ldr	r2, [pc, #368]	; (80051a8 <HAL_I2C_Master_Receive+0x228>)
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005038:	8979      	ldrh	r1, [r7, #10]
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fb74 	bl	800572c <I2C_MasterRequestRead>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e1b8      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d113      	bne.n	800507e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e18c      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d11b      	bne.n	80050be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e16c      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d11b      	bne.n	80050fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	e14c      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800510c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800510e:	2300      	movs	r3, #0
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005124:	e138      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	2b03      	cmp	r3, #3
 800512c:	f200 80f1 	bhi.w	8005312 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005134:	2b01      	cmp	r3, #1
 8005136:	d123      	bne.n	8005180 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f000 fd1b 	bl	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e139      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800517e:	e10b      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b02      	cmp	r3, #2
 8005186:	d14e      	bne.n	8005226 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518e:	2200      	movs	r2, #0
 8005190:	4906      	ldr	r1, [pc, #24]	; (80051ac <HAL_I2C_Master_Receive+0x22c>)
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f000 fb98 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d008      	beq.n	80051b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e10e      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
 80051a2:	bf00      	nop
 80051a4:	00100002 	.word	0x00100002
 80051a8:	ffff0000 	.word	0xffff0000
 80051ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	b29a      	uxth	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005224:	e0b8      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	2200      	movs	r2, #0
 800522e:	4966      	ldr	r1, [pc, #408]	; (80053c8 <HAL_I2C_Master_Receive+0x448>)
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 fb49 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0bf      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691a      	ldr	r2, [r3, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	2200      	movs	r2, #0
 800528a:	494f      	ldr	r1, [pc, #316]	; (80053c8 <HAL_I2C_Master_Receive+0x448>)
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fb1b 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e091      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005310:	e042      	b.n	8005398 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fc2e 	bl	8005b78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e04c      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	1c5a      	adds	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005342:	3b01      	subs	r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d118      	bne.n	8005398 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	f47f aec2 	bne.w	8005126 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e000      	b.n	80053c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053be:	2302      	movs	r3, #2
  }
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3728      	adds	r7, #40	; 0x28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	00010004 	.word	0x00010004

080053cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	; 0x28
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	460b      	mov	r3, r1
 80053da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80053dc:	f7fd fb9e 	bl	8002b1c <HAL_GetTick>
 80053e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	f040 8111 	bne.w	8005616 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2319      	movs	r3, #25
 80053fa:	2201      	movs	r2, #1
 80053fc:	4988      	ldr	r1, [pc, #544]	; (8005620 <HAL_I2C_IsDeviceReady+0x254>)
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fa62 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800540a:	2302      	movs	r3, #2
 800540c:	e104      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2C_IsDeviceReady+0x50>
 8005418:	2302      	movs	r3, #2
 800541a:	e0fd      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d007      	beq.n	8005442 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005450:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2224      	movs	r2, #36	; 0x24
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a70      	ldr	r2, [pc, #448]	; (8005624 <HAL_I2C_IsDeviceReady+0x258>)
 8005464:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005474:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2200      	movs	r2, #0
 800547e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fa20 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549c:	d103      	bne.n	80054a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0b6      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054aa:	897b      	ldrh	r3, [r7, #10]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80054ba:	f7fd fb2f 	bl	8002b1c <HAL_GetTick>
 80054be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054ee:	e025      	b.n	800553c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054f0:	f7fd fb14 	bl	8002b1c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d302      	bcc.n	8005506 <HAL_I2C_IsDeviceReady+0x13a>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22a0      	movs	r2, #160	; 0xa0
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	bf0c      	ite	eq
 800551c:	2301      	moveq	r3, #1
 800551e:	2300      	movne	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2ba0      	cmp	r3, #160	; 0xa0
 8005546:	d005      	beq.n	8005554 <HAL_I2C_IsDeviceReady+0x188>
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <HAL_I2C_IsDeviceReady+0x188>
 800554e:	7dbb      	ldrb	r3, [r7, #22]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0cd      	beq.n	80054f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d129      	bne.n	80055be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005578:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557a:	2300      	movs	r3, #0
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	2319      	movs	r3, #25
 8005596:	2201      	movs	r2, #1
 8005598:	4921      	ldr	r1, [pc, #132]	; (8005620 <HAL_I2C_IsDeviceReady+0x254>)
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f994 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e036      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	e02c      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	9300      	str	r3, [sp, #0]
 80055dc:	2319      	movs	r3, #25
 80055de:	2201      	movs	r2, #1
 80055e0:	490f      	ldr	r1, [pc, #60]	; (8005620 <HAL_I2C_IsDeviceReady+0x254>)
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f970 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e012      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	3301      	adds	r3, #1
 80055f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	f4ff af32 	bcc.w	8005466 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005616:	2302      	movs	r3, #2
  }
}
 8005618:	4618      	mov	r0, r3
 800561a:	3720      	adds	r7, #32
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00100002 	.word	0x00100002
 8005624:	ffff0000 	.word	0xffff0000

08005628 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af02      	add	r7, sp, #8
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	460b      	mov	r3, r1
 8005636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d006      	beq.n	8005652 <I2C_MasterRequestWrite+0x2a>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d003      	beq.n	8005652 <I2C_MasterRequestWrite+0x2a>
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005650:	d108      	bne.n	8005664 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	e00b      	b.n	800567c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005668:	2b12      	cmp	r3, #18
 800566a:	d107      	bne.n	800567c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f91d 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d103      	bne.n	80056ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e035      	b.n	800571c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056b8:	d108      	bne.n	80056cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056ba:	897b      	ldrh	r3, [r7, #10]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	e01b      	b.n	8005704 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056cc:	897b      	ldrh	r3, [r7, #10]
 80056ce:	11db      	asrs	r3, r3, #7
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 0306 	and.w	r3, r3, #6
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f063 030f 	orn	r3, r3, #15
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	490e      	ldr	r1, [pc, #56]	; (8005724 <I2C_MasterRequestWrite+0xfc>)
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f943 	bl	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e010      	b.n	800571c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4907      	ldr	r1, [pc, #28]	; (8005728 <I2C_MasterRequestWrite+0x100>)
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f000 f933 	bl	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	00010008 	.word	0x00010008
 8005728:	00010002 	.word	0x00010002

0800572c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af02      	add	r7, sp, #8
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	460b      	mov	r3, r1
 800573a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005740:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005750:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b08      	cmp	r3, #8
 8005756:	d006      	beq.n	8005766 <I2C_MasterRequestRead+0x3a>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d003      	beq.n	8005766 <I2C_MasterRequestRead+0x3a>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005764:	d108      	bne.n	8005778 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e00b      	b.n	8005790 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	2b11      	cmp	r3, #17
 800577e:	d107      	bne.n	8005790 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f893 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00d      	beq.n	80057c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d103      	bne.n	80057c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e079      	b.n	80058b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057cc:	d108      	bne.n	80057e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057ce:	897b      	ldrh	r3, [r7, #10]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f043 0301 	orr.w	r3, r3, #1
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	611a      	str	r2, [r3, #16]
 80057de:	e05f      	b.n	80058a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80057e0:	897b      	ldrh	r3, [r7, #10]
 80057e2:	11db      	asrs	r3, r3, #7
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 0306 	and.w	r3, r3, #6
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	f063 030f 	orn	r3, r3, #15
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4930      	ldr	r1, [pc, #192]	; (80058c0 <I2C_MasterRequestRead+0x194>)
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 f8b9 	bl	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e054      	b.n	80058b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800580e:	897b      	ldrh	r3, [r7, #10]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4929      	ldr	r1, [pc, #164]	; (80058c4 <I2C_MasterRequestRead+0x198>)
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 f8a9 	bl	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e044      	b.n	80058b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005852:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f831 	bl	80058c8 <I2C_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800587a:	d103      	bne.n	8005884 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005882:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e017      	b.n	80058b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005888:	897b      	ldrh	r3, [r7, #10]
 800588a:	11db      	asrs	r3, r3, #7
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0306 	and.w	r3, r3, #6
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f063 030e 	orn	r3, r3, #14
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4907      	ldr	r1, [pc, #28]	; (80058c4 <I2C_MasterRequestRead+0x198>)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f865 	bl	8005976 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3718      	adds	r7, #24
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	00010008 	.word	0x00010008
 80058c4:	00010002 	.word	0x00010002

080058c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	4613      	mov	r3, r2
 80058d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058d8:	e025      	b.n	8005926 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e0:	d021      	beq.n	8005926 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fd f91b 	bl	8002b1c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d116      	bne.n	8005926 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e023      	b.n	800596e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	0c1b      	lsrs	r3, r3, #16
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10d      	bne.n	800594c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	43da      	mvns	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	4013      	ands	r3, r2
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	461a      	mov	r2, r3
 800594a:	e00c      	b.n	8005966 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	43da      	mvns	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf0c      	ite	eq
 800595e:	2301      	moveq	r3, #1
 8005960:	2300      	movne	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	461a      	mov	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	429a      	cmp	r2, r3
 800596a:	d0b6      	beq.n	80058da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005984:	e051      	b.n	8005a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d123      	bne.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f043 0204 	orr.w	r2, r3, #4
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e046      	b.n	8005a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e4:	d021      	beq.n	8005a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e6:	f7fd f899 	bl	8002b1c <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d116      	bne.n	8005a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e020      	b.n	8005a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10c      	bne.n	8005a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	43da      	mvns	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf14      	ite	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	2300      	moveq	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	e00b      	b.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	43da      	mvns	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	bf14      	ite	ne
 8005a60:	2301      	movne	r3, #1
 8005a62:	2300      	moveq	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d18d      	bne.n	8005986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a80:	e02d      	b.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f8ce 	bl	8005c24 <I2C_IsAcknowledgeFailed>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e02d      	b.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a98:	d021      	beq.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9a:	f7fd f83f 	bl	8002b1c <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d302      	bcc.n	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d116      	bne.n	8005ade <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	f043 0220 	orr.w	r2, r3, #32
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e007      	b.n	8005aee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	2b80      	cmp	r3, #128	; 0x80
 8005aea:	d1ca      	bne.n	8005a82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b02:	e02d      	b.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f88d 	bl	8005c24 <I2C_IsAcknowledgeFailed>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e02d      	b.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1a:	d021      	beq.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1c:	f7fc fffe 	bl	8002b1c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d116      	bne.n	8005b60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	f043 0220 	orr.w	r2, r3, #32
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e007      	b.n	8005b70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d1ca      	bne.n	8005b04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b84:	e042      	b.n	8005c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d119      	bne.n	8005bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e029      	b.n	8005c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc8:	f7fc ffa8 	bl	8002b1c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d116      	bne.n	8005c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0220 	orr.w	r2, r3, #32
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e007      	b.n	8005c1c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d1b5      	bne.n	8005b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3a:	d11b      	bne.n	8005c74 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c44:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f043 0204 	orr.w	r2, r3, #4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d129      	bne.n	8005cec <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	; 0x24
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0210 	bic.w	r2, r2, #16
 8005cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f042 0201 	orr.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d12a      	bne.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2224      	movs	r2, #36	; 0x24
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0201 	bic.w	r2, r2, #1
 8005d2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	f023 030f 	bic.w	r3, r3, #15
 8005d3a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	89fb      	ldrh	r3, [r7, #14]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	89fa      	ldrh	r2, [r7, #14]
 8005d4c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0201 	orr.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e267      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d075      	beq.n	8005e82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d96:	4b88      	ldr	r3, [pc, #544]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 030c 	and.w	r3, r3, #12
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d00c      	beq.n	8005dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005da2:	4b85      	ldr	r3, [pc, #532]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d112      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dae:	4b82      	ldr	r3, [pc, #520]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dba:	d10b      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dbc:	4b7e      	ldr	r3, [pc, #504]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d05b      	beq.n	8005e80 <HAL_RCC_OscConfig+0x108>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d157      	bne.n	8005e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e242      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d106      	bne.n	8005dec <HAL_RCC_OscConfig+0x74>
 8005dde:	4b76      	ldr	r3, [pc, #472]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a75      	ldr	r2, [pc, #468]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005de8:	6013      	str	r3, [r2, #0]
 8005dea:	e01d      	b.n	8005e28 <HAL_RCC_OscConfig+0xb0>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005df4:	d10c      	bne.n	8005e10 <HAL_RCC_OscConfig+0x98>
 8005df6:	4b70      	ldr	r3, [pc, #448]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a6f      	ldr	r2, [pc, #444]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b6d      	ldr	r3, [pc, #436]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a6c      	ldr	r2, [pc, #432]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	e00b      	b.n	8005e28 <HAL_RCC_OscConfig+0xb0>
 8005e10:	4b69      	ldr	r3, [pc, #420]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a68      	ldr	r2, [pc, #416]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4b66      	ldr	r3, [pc, #408]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a65      	ldr	r2, [pc, #404]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d013      	beq.n	8005e58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e30:	f7fc fe74 	bl	8002b1c <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e38:	f7fc fe70 	bl	8002b1c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e207      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4a:	4b5b      	ldr	r3, [pc, #364]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0f0      	beq.n	8005e38 <HAL_RCC_OscConfig+0xc0>
 8005e56:	e014      	b.n	8005e82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fc fe60 	bl	8002b1c <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e60:	f7fc fe5c 	bl	8002b1c <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b64      	cmp	r3, #100	; 0x64
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e1f3      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e72:	4b51      	ldr	r3, [pc, #324]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0xe8>
 8005e7e:	e000      	b.n	8005e82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d063      	beq.n	8005f56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e9a:	4b47      	ldr	r3, [pc, #284]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d11c      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ea6:	4b44      	ldr	r3, [pc, #272]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d116      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eb2:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_RCC_OscConfig+0x152>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d001      	beq.n	8005eca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e1c7      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eca:	4b3b      	ldr	r3, [pc, #236]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	4937      	ldr	r1, [pc, #220]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ede:	e03a      	b.n	8005f56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d020      	beq.n	8005f2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ee8:	4b34      	ldr	r3, [pc, #208]	; (8005fbc <HAL_RCC_OscConfig+0x244>)
 8005eea:	2201      	movs	r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eee:	f7fc fe15 	bl	8002b1c <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ef6:	f7fc fe11 	bl	8002b1c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1a8      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f08:	4b2b      	ldr	r3, [pc, #172]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	00db      	lsls	r3, r3, #3
 8005f22:	4925      	ldr	r1, [pc, #148]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]
 8005f28:	e015      	b.n	8005f56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f2a:	4b24      	ldr	r3, [pc, #144]	; (8005fbc <HAL_RCC_OscConfig+0x244>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fc fdf4 	bl	8002b1c <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f38:	f7fc fdf0 	bl	8002b1c <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e187      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4a:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f0      	bne.n	8005f38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d036      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d016      	beq.n	8005f98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f6a:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <HAL_RCC_OscConfig+0x248>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f70:	f7fc fdd4 	bl	8002b1c <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f78:	f7fc fdd0 	bl	8002b1c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e167      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	; (8005fb8 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x200>
 8005f96:	e01b      	b.n	8005fd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_RCC_OscConfig+0x248>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f9e:	f7fc fdbd 	bl	8002b1c <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fa4:	e00e      	b.n	8005fc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fa6:	f7fc fdb9 	bl	8002b1c <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d907      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e150      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	42470000 	.word	0x42470000
 8005fc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ea      	bne.n	8005fa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8097 	beq.w	800610c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe2:	4b81      	ldr	r3, [pc, #516]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10f      	bne.n	800600e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	4b7d      	ldr	r3, [pc, #500]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4a7c      	ldr	r2, [pc, #496]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffe:	4b7a      	ldr	r3, [pc, #488]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800600a:	2301      	movs	r3, #1
 800600c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600e:	4b77      	ldr	r3, [pc, #476]	; (80061ec <HAL_RCC_OscConfig+0x474>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006016:	2b00      	cmp	r3, #0
 8006018:	d118      	bne.n	800604c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800601a:	4b74      	ldr	r3, [pc, #464]	; (80061ec <HAL_RCC_OscConfig+0x474>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a73      	ldr	r2, [pc, #460]	; (80061ec <HAL_RCC_OscConfig+0x474>)
 8006020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006026:	f7fc fd79 	bl	8002b1c <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800602e:	f7fc fd75 	bl	8002b1c <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e10c      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006040:	4b6a      	ldr	r3, [pc, #424]	; (80061ec <HAL_RCC_OscConfig+0x474>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d106      	bne.n	8006062 <HAL_RCC_OscConfig+0x2ea>
 8006054:	4b64      	ldr	r3, [pc, #400]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006058:	4a63      	ldr	r2, [pc, #396]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 800605a:	f043 0301 	orr.w	r3, r3, #1
 800605e:	6713      	str	r3, [r2, #112]	; 0x70
 8006060:	e01c      	b.n	800609c <HAL_RCC_OscConfig+0x324>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b05      	cmp	r3, #5
 8006068:	d10c      	bne.n	8006084 <HAL_RCC_OscConfig+0x30c>
 800606a:	4b5f      	ldr	r3, [pc, #380]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 800606c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606e:	4a5e      	ldr	r2, [pc, #376]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006070:	f043 0304 	orr.w	r3, r3, #4
 8006074:	6713      	str	r3, [r2, #112]	; 0x70
 8006076:	4b5c      	ldr	r3, [pc, #368]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607a:	4a5b      	ldr	r2, [pc, #364]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	6713      	str	r3, [r2, #112]	; 0x70
 8006082:	e00b      	b.n	800609c <HAL_RCC_OscConfig+0x324>
 8006084:	4b58      	ldr	r3, [pc, #352]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	4a57      	ldr	r2, [pc, #348]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 800608a:	f023 0301 	bic.w	r3, r3, #1
 800608e:	6713      	str	r3, [r2, #112]	; 0x70
 8006090:	4b55      	ldr	r3, [pc, #340]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4a54      	ldr	r2, [pc, #336]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 0304 	bic.w	r3, r3, #4
 800609a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d015      	beq.n	80060d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a4:	f7fc fd3a 	bl	8002b1c <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060aa:	e00a      	b.n	80060c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ac:	f7fc fd36 	bl	8002b1c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e0cb      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c2:	4b49      	ldr	r3, [pc, #292]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0ee      	beq.n	80060ac <HAL_RCC_OscConfig+0x334>
 80060ce:	e014      	b.n	80060fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d0:	f7fc fd24 	bl	8002b1c <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d8:	f7fc fd20 	bl	8002b1c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0b5      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ee:	4b3e      	ldr	r3, [pc, #248]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 80060f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1ee      	bne.n	80060d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d105      	bne.n	800610c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006100:	4b39      	ldr	r3, [pc, #228]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	4a38      	ldr	r2, [pc, #224]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800610a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a1 	beq.w	8006258 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006116:	4b34      	ldr	r3, [pc, #208]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b08      	cmp	r3, #8
 8006120:	d05c      	beq.n	80061dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d141      	bne.n	80061ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612a:	4b31      	ldr	r3, [pc, #196]	; (80061f0 <HAL_RCC_OscConfig+0x478>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006130:	f7fc fcf4 	bl	8002b1c <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006138:	f7fc fcf0 	bl	8002b1c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e087      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	4b27      	ldr	r3, [pc, #156]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	3b01      	subs	r3, #1
 8006170:	041b      	lsls	r3, r3, #16
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	061b      	lsls	r3, r3, #24
 800617a:	491b      	ldr	r1, [pc, #108]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 800617c:	4313      	orrs	r3, r2
 800617e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006180:	4b1b      	ldr	r3, [pc, #108]	; (80061f0 <HAL_RCC_OscConfig+0x478>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fc fcc9 	bl	8002b1c <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618e:	f7fc fcc5 	bl	8002b1c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e05c      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f0      	beq.n	800618e <HAL_RCC_OscConfig+0x416>
 80061ac:	e054      	b.n	8006258 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061ae:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <HAL_RCC_OscConfig+0x478>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b4:	f7fc fcb2 	bl	8002b1c <HAL_GetTick>
 80061b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ba:	e008      	b.n	80061ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061bc:	f7fc fcae 	bl	8002b1c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e045      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <HAL_RCC_OscConfig+0x470>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1f0      	bne.n	80061bc <HAL_RCC_OscConfig+0x444>
 80061da:	e03d      	b.n	8006258 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e038      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
 80061e8:	40023800 	.word	0x40023800
 80061ec:	40007000 	.word	0x40007000
 80061f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061f4:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_RCC_OscConfig+0x4ec>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d028      	beq.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d121      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800621a:	429a      	cmp	r2, r3
 800621c:	d11a      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006224:	4013      	ands	r3, r2
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800622a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800622c:	4293      	cmp	r3, r2
 800622e:	d111      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	3b01      	subs	r3, #1
 800623e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006240:	429a      	cmp	r2, r3
 8006242:	d107      	bne.n	8006254 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40023800 	.word	0x40023800

08006268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e0cc      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800627c:	4b68      	ldr	r3, [pc, #416]	; (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d90c      	bls.n	80062a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628a:	4b65      	ldr	r3, [pc, #404]	; (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b63      	ldr	r3, [pc, #396]	; (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0b8      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d020      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062bc:	4b59      	ldr	r3, [pc, #356]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a58      	ldr	r2, [pc, #352]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062d4:	4b53      	ldr	r3, [pc, #332]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a52      	ldr	r2, [pc, #328]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e0:	4b50      	ldr	r3, [pc, #320]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	494d      	ldr	r1, [pc, #308]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d044      	beq.n	8006388 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d107      	bne.n	8006316 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006306:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d119      	bne.n	8006346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e07f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d003      	beq.n	8006326 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006322:	2b03      	cmp	r3, #3
 8006324:	d107      	bne.n	8006336 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006326:	4b3f      	ldr	r3, [pc, #252]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e06f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006336:	4b3b      	ldr	r3, [pc, #236]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e067      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006346:	4b37      	ldr	r3, [pc, #220]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f023 0203 	bic.w	r2, r3, #3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4934      	ldr	r1, [pc, #208]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	4313      	orrs	r3, r2
 8006356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006358:	f7fc fbe0 	bl	8002b1c <HAL_GetTick>
 800635c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800635e:	e00a      	b.n	8006376 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006360:	f7fc fbdc 	bl	8002b1c <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f241 3288 	movw	r2, #5000	; 0x1388
 800636e:	4293      	cmp	r3, r2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e04f      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006376:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 020c 	and.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	429a      	cmp	r2, r3
 8006386:	d1eb      	bne.n	8006360 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006388:	4b25      	ldr	r3, [pc, #148]	; (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 030f 	and.w	r3, r3, #15
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d20c      	bcs.n	80063b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006396:	4b22      	ldr	r3, [pc, #136]	; (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800639e:	4b20      	ldr	r3, [pc, #128]	; (8006420 <HAL_RCC_ClockConfig+0x1b8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e032      	b.n	8006416 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4916      	ldr	r1, [pc, #88]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	490e      	ldr	r1, [pc, #56]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ee:	f000 f821 	bl	8006434 <HAL_RCC_GetSysClockFreq>
 80063f2:	4602      	mov	r2, r0
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	490a      	ldr	r1, [pc, #40]	; (8006428 <HAL_RCC_ClockConfig+0x1c0>)
 8006400:	5ccb      	ldrb	r3, [r1, r3]
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <HAL_RCC_ClockConfig+0x1c4>)
 8006408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <HAL_RCC_ClockConfig+0x1c8>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f7fc fb40 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40023c00 	.word	0x40023c00
 8006424:	40023800 	.word	0x40023800
 8006428:	0800eafc 	.word	0x0800eafc
 800642c:	20000004 	.word	0x20000004
 8006430:	20000008 	.word	0x20000008

08006434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006438:	b094      	sub	sp, #80	; 0x50
 800643a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	647b      	str	r3, [r7, #68]	; 0x44
 8006440:	2300      	movs	r3, #0
 8006442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006444:	2300      	movs	r3, #0
 8006446:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800644c:	4b79      	ldr	r3, [pc, #484]	; (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
 8006454:	2b08      	cmp	r3, #8
 8006456:	d00d      	beq.n	8006474 <HAL_RCC_GetSysClockFreq+0x40>
 8006458:	2b08      	cmp	r3, #8
 800645a:	f200 80e1 	bhi.w	8006620 <HAL_RCC_GetSysClockFreq+0x1ec>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x34>
 8006462:	2b04      	cmp	r3, #4
 8006464:	d003      	beq.n	800646e <HAL_RCC_GetSysClockFreq+0x3a>
 8006466:	e0db      	b.n	8006620 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006468:	4b73      	ldr	r3, [pc, #460]	; (8006638 <HAL_RCC_GetSysClockFreq+0x204>)
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800646c:	e0db      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800646e:	4b73      	ldr	r3, [pc, #460]	; (800663c <HAL_RCC_GetSysClockFreq+0x208>)
 8006470:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006472:	e0d8      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006474:	4b6f      	ldr	r3, [pc, #444]	; (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800647c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800647e:	4b6d      	ldr	r3, [pc, #436]	; (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d063      	beq.n	8006552 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800648a:	4b6a      	ldr	r3, [pc, #424]	; (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	099b      	lsrs	r3, r3, #6
 8006490:	2200      	movs	r2, #0
 8006492:	63bb      	str	r3, [r7, #56]	; 0x38
 8006494:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
 80064a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064a6:	4622      	mov	r2, r4
 80064a8:	462b      	mov	r3, r5
 80064aa:	f04f 0000 	mov.w	r0, #0
 80064ae:	f04f 0100 	mov.w	r1, #0
 80064b2:	0159      	lsls	r1, r3, #5
 80064b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b8:	0150      	lsls	r0, r2, #5
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4621      	mov	r1, r4
 80064c0:	1a51      	subs	r1, r2, r1
 80064c2:	6139      	str	r1, [r7, #16]
 80064c4:	4629      	mov	r1, r5
 80064c6:	eb63 0301 	sbc.w	r3, r3, r1
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064d8:	4659      	mov	r1, fp
 80064da:	018b      	lsls	r3, r1, #6
 80064dc:	4651      	mov	r1, sl
 80064de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064e2:	4651      	mov	r1, sl
 80064e4:	018a      	lsls	r2, r1, #6
 80064e6:	4651      	mov	r1, sl
 80064e8:	ebb2 0801 	subs.w	r8, r2, r1
 80064ec:	4659      	mov	r1, fp
 80064ee:	eb63 0901 	sbc.w	r9, r3, r1
 80064f2:	f04f 0200 	mov.w	r2, #0
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006506:	4690      	mov	r8, r2
 8006508:	4699      	mov	r9, r3
 800650a:	4623      	mov	r3, r4
 800650c:	eb18 0303 	adds.w	r3, r8, r3
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	462b      	mov	r3, r5
 8006514:	eb49 0303 	adc.w	r3, r9, r3
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006526:	4629      	mov	r1, r5
 8006528:	024b      	lsls	r3, r1, #9
 800652a:	4621      	mov	r1, r4
 800652c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006530:	4621      	mov	r1, r4
 8006532:	024a      	lsls	r2, r1, #9
 8006534:	4610      	mov	r0, r2
 8006536:	4619      	mov	r1, r3
 8006538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800653a:	2200      	movs	r2, #0
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
 800653e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006540:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006544:	f7f9 fea4 	bl	8000290 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4613      	mov	r3, r2
 800654e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006550:	e058      	b.n	8006604 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006552:	4b38      	ldr	r3, [pc, #224]	; (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	099b      	lsrs	r3, r3, #6
 8006558:	2200      	movs	r2, #0
 800655a:	4618      	mov	r0, r3
 800655c:	4611      	mov	r1, r2
 800655e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006562:	623b      	str	r3, [r7, #32]
 8006564:	2300      	movs	r3, #0
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
 8006568:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800656c:	4642      	mov	r2, r8
 800656e:	464b      	mov	r3, r9
 8006570:	f04f 0000 	mov.w	r0, #0
 8006574:	f04f 0100 	mov.w	r1, #0
 8006578:	0159      	lsls	r1, r3, #5
 800657a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800657e:	0150      	lsls	r0, r2, #5
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4641      	mov	r1, r8
 8006586:	ebb2 0a01 	subs.w	sl, r2, r1
 800658a:	4649      	mov	r1, r9
 800658c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800659c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065a4:	ebb2 040a 	subs.w	r4, r2, sl
 80065a8:	eb63 050b 	sbc.w	r5, r3, fp
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	00eb      	lsls	r3, r5, #3
 80065b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ba:	00e2      	lsls	r2, r4, #3
 80065bc:	4614      	mov	r4, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	4643      	mov	r3, r8
 80065c2:	18e3      	adds	r3, r4, r3
 80065c4:	603b      	str	r3, [r7, #0]
 80065c6:	464b      	mov	r3, r9
 80065c8:	eb45 0303 	adc.w	r3, r5, r3
 80065cc:	607b      	str	r3, [r7, #4]
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065da:	4629      	mov	r1, r5
 80065dc:	028b      	lsls	r3, r1, #10
 80065de:	4621      	mov	r1, r4
 80065e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065e4:	4621      	mov	r1, r4
 80065e6:	028a      	lsls	r2, r1, #10
 80065e8:	4610      	mov	r0, r2
 80065ea:	4619      	mov	r1, r3
 80065ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ee:	2200      	movs	r2, #0
 80065f0:	61bb      	str	r3, [r7, #24]
 80065f2:	61fa      	str	r2, [r7, #28]
 80065f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065f8:	f7f9 fe4a 	bl	8000290 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4613      	mov	r3, r2
 8006602:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCC_GetSysClockFreq+0x200>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	0c1b      	lsrs	r3, r3, #16
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	3301      	adds	r3, #1
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006614:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006618:	fbb2 f3f3 	udiv	r3, r2, r3
 800661c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800661e:	e002      	b.n	8006626 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <HAL_RCC_GetSysClockFreq+0x204>)
 8006622:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006628:	4618      	mov	r0, r3
 800662a:	3750      	adds	r7, #80	; 0x50
 800662c:	46bd      	mov	sp, r7
 800662e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800
 8006638:	00f42400 	.word	0x00f42400
 800663c:	007a1200 	.word	0x007a1200

08006640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <HAL_RCC_GetHCLKFreq+0x14>)
 8006646:	681b      	ldr	r3, [r3, #0]
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000004 	.word	0x20000004

08006658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800665c:	f7ff fff0 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006660:	4602      	mov	r2, r0
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0a9b      	lsrs	r3, r3, #10
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	4903      	ldr	r1, [pc, #12]	; (800667c <HAL_RCC_GetPCLK1Freq+0x24>)
 800666e:	5ccb      	ldrb	r3, [r1, r3]
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	0800eb0c 	.word	0x0800eb0c

08006680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006684:	f7ff ffdc 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006688:	4602      	mov	r2, r0
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0b5b      	lsrs	r3, r3, #13
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	4903      	ldr	r1, [pc, #12]	; (80066a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006696:	5ccb      	ldrb	r3, [r1, r3]
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40023800 	.word	0x40023800
 80066a4:	0800eb0c 	.word	0x0800eb0c

080066a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e025      	b.n	8006708 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fc f8fb 	bl	80028cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f002 f99f 	bl	8008a2c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	461a      	mov	r2, r3
 80066f8:	6839      	ldr	r1, [r7, #0]
 80066fa:	f002 f9f4 	bl	8008ae6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e07b      	b.n	800681a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006732:	d009      	beq.n	8006748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	61da      	str	r2, [r3, #28]
 800673a:	e005      	b.n	8006748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fb ff66 	bl	8002634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800677e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	431a      	orrs	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	ea42 0103 	orr.w	r1, r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	0c1b      	lsrs	r3, r3, #16
 80067e6:	f003 0104 	and.w	r1, r3, #4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	f003 0210 	and.w	r2, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006808:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b088      	sub	sp, #32
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	603b      	str	r3, [r7, #0]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_SPI_Transmit+0x22>
 8006840:	2302      	movs	r3, #2
 8006842:	e126      	b.n	8006a92 <HAL_SPI_Transmit+0x270>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800684c:	f7fc f966 	bl	8002b1c <HAL_GetTick>
 8006850:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b01      	cmp	r3, #1
 8006860:	d002      	beq.n	8006868 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006862:	2302      	movs	r3, #2
 8006864:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006866:	e10b      	b.n	8006a80 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Transmit+0x52>
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d102      	bne.n	800687a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006878:	e102      	b.n	8006a80 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	88fa      	ldrh	r2, [r7, #6]
 8006892:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c0:	d10f      	bne.n	80068e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d007      	beq.n	8006900 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006908:	d14b      	bne.n	80069a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_SPI_Transmit+0xf6>
 8006912:	8afb      	ldrh	r3, [r7, #22]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d13e      	bne.n	8006996 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691c:	881a      	ldrh	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	1c9a      	adds	r2, r3, #2
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800693c:	e02b      	b.n	8006996 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d112      	bne.n	8006972 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006970:	e011      	b.n	8006996 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006972:	f7fc f8d3 	bl	8002b1c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d803      	bhi.n	800698a <HAL_SPI_Transmit+0x168>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006988:	d102      	bne.n	8006990 <HAL_SPI_Transmit+0x16e>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006994:	e074      	b.n	8006a80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1ce      	bne.n	800693e <HAL_SPI_Transmit+0x11c>
 80069a0:	e04c      	b.n	8006a3c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_SPI_Transmit+0x18e>
 80069aa:	8afb      	ldrh	r3, [r7, #22]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d140      	bne.n	8006a32 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	1c5a      	adds	r2, r3, #1
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80069d6:	e02c      	b.n	8006a32 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d113      	bne.n	8006a0e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29a      	uxth	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a0c:	e011      	b.n	8006a32 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0e:	f7fc f885 	bl	8002b1c <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d803      	bhi.n	8006a26 <HAL_SPI_Transmit+0x204>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a24:	d102      	bne.n	8006a2c <HAL_SPI_Transmit+0x20a>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d102      	bne.n	8006a32 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a30:	e026      	b.n	8006a80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1cd      	bne.n	80069d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fbcb 	bl	80071dc <SPI_EndRxTxTransaction>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	613b      	str	r3, [r7, #16]
 8006a6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e000      	b.n	8006a80 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006a7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b088      	sub	sp, #32
 8006a9e:	af02      	add	r7, sp, #8
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ab6:	d112      	bne.n	8006ade <HAL_SPI_Receive+0x44>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10e      	bne.n	8006ade <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006ac8:	88fa      	ldrh	r2, [r7, #6]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f8f1 	bl	8006cbc <HAL_SPI_TransmitReceive>
 8006ada:	4603      	mov	r3, r0
 8006adc:	e0ea      	b.n	8006cb4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_SPI_Receive+0x52>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e0e3      	b.n	8006cb4 <HAL_SPI_Receive+0x21a>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006af4:	f7fc f812 	bl	8002b1c <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d002      	beq.n	8006b0c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
 8006b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b0a:	e0ca      	b.n	8006ca2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d002      	beq.n	8006b18 <HAL_SPI_Receive+0x7e>
 8006b12:	88fb      	ldrh	r3, [r7, #6]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b1c:	e0c1      	b.n	8006ca2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2204      	movs	r2, #4
 8006b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	88fa      	ldrh	r2, [r7, #6]
 8006b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	88fa      	ldrh	r2, [r7, #6]
 8006b3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	d10f      	bne.n	8006b86 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b84:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b90:	2b40      	cmp	r3, #64	; 0x40
 8006b92:	d007      	beq.n	8006ba4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d162      	bne.n	8006c72 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006bac:	e02e      	b.n	8006c0c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d115      	bne.n	8006be8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f103 020c 	add.w	r2, r3, #12
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc8:	7812      	ldrb	r2, [r2, #0]
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006be6:	e011      	b.n	8006c0c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be8:	f7fb ff98 	bl	8002b1c <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d803      	bhi.n	8006c00 <HAL_SPI_Receive+0x166>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bfe:	d102      	bne.n	8006c06 <HAL_SPI_Receive+0x16c>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c0a:	e04a      	b.n	8006ca2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1cb      	bne.n	8006bae <HAL_SPI_Receive+0x114>
 8006c16:	e031      	b.n	8006c7c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d113      	bne.n	8006c4e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	b292      	uxth	r2, r2
 8006c32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	1c9a      	adds	r2, r3, #2
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c4c:	e011      	b.n	8006c72 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4e:	f7fb ff65 	bl	8002b1c <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d803      	bhi.n	8006c66 <HAL_SPI_Receive+0x1cc>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_Receive+0x1d2>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006c70:	e017      	b.n	8006ca2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1cd      	bne.n	8006c18 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fa45 	bl	8007110 <SPI_EndRxTransaction>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
 8006c9e:	e000      	b.n	8006ca2 <HAL_SPI_Receive+0x208>
  }

error :
 8006ca0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	; 0x30
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d101      	bne.n	8006ce2 <HAL_SPI_TransmitReceive+0x26>
 8006cde:	2302      	movs	r3, #2
 8006ce0:	e18a      	b.n	8006ff8 <HAL_SPI_TransmitReceive+0x33c>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cea:	f7fb ff17 	bl	8002b1c <HAL_GetTick>
 8006cee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006d00:	887b      	ldrh	r3, [r7, #2]
 8006d02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d00f      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x70>
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d12:	d107      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x68>
 8006d1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d003      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d2a:	e15b      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x82>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x82>
 8006d38:	887b      	ldrh	r3, [r7, #2]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006d44:	e14e      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d003      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2205      	movs	r2, #5
 8006d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	887a      	ldrh	r2, [r7, #2]
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	887a      	ldrh	r2, [r7, #2]
 8006d70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	887a      	ldrh	r2, [r7, #2]
 8006d7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	887a      	ldrh	r2, [r7, #2]
 8006d82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d007      	beq.n	8006dae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db6:	d178      	bne.n	8006eaa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_SPI_TransmitReceive+0x10a>
 8006dc0:	8b7b      	ldrh	r3, [r7, #26]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d166      	bne.n	8006e94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dca:	881a      	ldrh	r2, [r3, #0]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dea:	e053      	b.n	8006e94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d11b      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x176>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d016      	beq.n	8006e32 <HAL_SPI_TransmitReceive+0x176>
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d113      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	881a      	ldrh	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f003 0301 	and.w	r3, r3, #1
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d119      	bne.n	8006e74 <HAL_SPI_TransmitReceive+0x1b8>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	b292      	uxth	r2, r2
 8006e56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	1c9a      	adds	r2, r3, #2
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e70:	2301      	movs	r3, #1
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e74:	f7fb fe52 	bl	8002b1c <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d807      	bhi.n	8006e94 <HAL_SPI_TransmitReceive+0x1d8>
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e8a:	d003      	beq.n	8006e94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e92:	e0a7      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1a6      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x130>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1a1      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x130>
 8006ea8:	e07c      	b.n	8006fa4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_SPI_TransmitReceive+0x1fc>
 8006eb2:	8b7b      	ldrh	r3, [r7, #26]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d16b      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ede:	e057      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d11c      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x26c>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <HAL_SPI_TransmitReceive+0x26c>
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d114      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	7812      	ldrb	r2, [r2, #0]
 8006f0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d119      	bne.n	8006f6a <HAL_SPI_TransmitReceive+0x2ae>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d014      	beq.n	8006f6a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f66:	2301      	movs	r3, #1
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f6a:	f7fb fdd7 	bl	8002b1c <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d803      	bhi.n	8006f82 <HAL_SPI_TransmitReceive+0x2c6>
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f80:	d102      	bne.n	8006f88 <HAL_SPI_TransmitReceive+0x2cc>
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f8e:	e029      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1a2      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x224>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d19d      	bne.n	8006ee0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f917 	bl	80071dc <SPI_EndRxTxTransaction>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d006      	beq.n	8006fc2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006fc0:	e010      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	617b      	str	r3, [r7, #20]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	e000      	b.n	8006fe4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006fe2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ff4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3730      	adds	r7, #48	; 0x30
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007010:	f7fb fd84 	bl	8002b1c <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	4413      	add	r3, r2
 800701e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007020:	f7fb fd7c 	bl	8002b1c <HAL_GetTick>
 8007024:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	015b      	lsls	r3, r3, #5
 800702c:	0d1b      	lsrs	r3, r3, #20
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007036:	e054      	b.n	80070e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703e:	d050      	beq.n	80070e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007040:	f7fb fd6c 	bl	8002b1c <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	429a      	cmp	r2, r3
 800704e:	d902      	bls.n	8007056 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d13d      	bne.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800706e:	d111      	bne.n	8007094 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007078:	d004      	beq.n	8007084 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007082:	d107      	bne.n	8007094 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007092:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709c:	d10f      	bne.n	80070be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e017      	b.n	8007102 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	3b01      	subs	r3, #1
 80070e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4013      	ands	r3, r2
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d19b      	bne.n	8007038 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3720      	adds	r7, #32
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	20000004 	.word	0x20000004

08007110 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007124:	d111      	bne.n	800714a <SPI_EndRxTransaction+0x3a>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712e:	d004      	beq.n	800713a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007138:	d107      	bne.n	800714a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007148:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007152:	d12a      	bne.n	80071aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800715c:	d012      	beq.n	8007184 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2200      	movs	r2, #0
 8007166:	2180      	movs	r1, #128	; 0x80
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f7ff ff49 	bl	8007000 <SPI_WaitFlagStateUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02d      	beq.n	80071d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007178:	f043 0220 	orr.w	r2, r3, #32
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e026      	b.n	80071d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2200      	movs	r2, #0
 800718c:	2101      	movs	r1, #1
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f7ff ff36 	bl	8007000 <SPI_WaitFlagStateUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01a      	beq.n	80071d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719e:	f043 0220 	orr.w	r2, r3, #32
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e013      	b.n	80071d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2200      	movs	r2, #0
 80071b2:	2101      	movs	r1, #1
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f7ff ff23 	bl	8007000 <SPI_WaitFlagStateUntilTimeout>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d007      	beq.n	80071d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c4:	f043 0220 	orr.w	r2, r3, #32
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e000      	b.n	80071d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b088      	sub	sp, #32
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071e8:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <SPI_EndRxTxTransaction+0x7c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a1b      	ldr	r2, [pc, #108]	; (800725c <SPI_EndRxTxTransaction+0x80>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	0d5b      	lsrs	r3, r3, #21
 80071f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071f8:	fb02 f303 	mul.w	r3, r2, r3
 80071fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007206:	d112      	bne.n	800722e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2200      	movs	r2, #0
 8007210:	2180      	movs	r1, #128	; 0x80
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7ff fef4 	bl	8007000 <SPI_WaitFlagStateUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d016      	beq.n	800724c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007222:	f043 0220 	orr.w	r2, r3, #32
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e00f      	b.n	800724e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00a      	beq.n	800724a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	3b01      	subs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007244:	2b80      	cmp	r3, #128	; 0x80
 8007246:	d0f2      	beq.n	800722e <SPI_EndRxTxTransaction+0x52>
 8007248:	e000      	b.n	800724c <SPI_EndRxTxTransaction+0x70>
        break;
 800724a:	bf00      	nop
  }

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000004 	.word	0x20000004
 800725c:	165e9f81 	.word	0x165e9f81

08007260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e041      	b.n	80072f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d106      	bne.n	800728c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7fb fa1c 	bl	80026c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3304      	adds	r3, #4
 800729c:	4619      	mov	r1, r3
 800729e:	4610      	mov	r0, r2
 80072a0:	f000 f8f4 	bl	800748c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_TIM_ConfigClockSource+0x1c>
 8007316:	2302      	movs	r3, #2
 8007318:	e0b4      	b.n	8007484 <HAL_TIM_ConfigClockSource+0x186>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2202      	movs	r2, #2
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007338:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007340:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007352:	d03e      	beq.n	80073d2 <HAL_TIM_ConfigClockSource+0xd4>
 8007354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007358:	f200 8087 	bhi.w	800746a <HAL_TIM_ConfigClockSource+0x16c>
 800735c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007360:	f000 8086 	beq.w	8007470 <HAL_TIM_ConfigClockSource+0x172>
 8007364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007368:	d87f      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 800736a:	2b70      	cmp	r3, #112	; 0x70
 800736c:	d01a      	beq.n	80073a4 <HAL_TIM_ConfigClockSource+0xa6>
 800736e:	2b70      	cmp	r3, #112	; 0x70
 8007370:	d87b      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 8007372:	2b60      	cmp	r3, #96	; 0x60
 8007374:	d050      	beq.n	8007418 <HAL_TIM_ConfigClockSource+0x11a>
 8007376:	2b60      	cmp	r3, #96	; 0x60
 8007378:	d877      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 800737a:	2b50      	cmp	r3, #80	; 0x50
 800737c:	d03c      	beq.n	80073f8 <HAL_TIM_ConfigClockSource+0xfa>
 800737e:	2b50      	cmp	r3, #80	; 0x50
 8007380:	d873      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 8007382:	2b40      	cmp	r3, #64	; 0x40
 8007384:	d058      	beq.n	8007438 <HAL_TIM_ConfigClockSource+0x13a>
 8007386:	2b40      	cmp	r3, #64	; 0x40
 8007388:	d86f      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 800738a:	2b30      	cmp	r3, #48	; 0x30
 800738c:	d064      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0x15a>
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d86b      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 8007392:	2b20      	cmp	r3, #32
 8007394:	d060      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0x15a>
 8007396:	2b20      	cmp	r3, #32
 8007398:	d867      	bhi.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d05c      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0x15a>
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d05a      	beq.n	8007458 <HAL_TIM_ConfigClockSource+0x15a>
 80073a2:	e062      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	6899      	ldr	r1, [r3, #8]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f000 f984 	bl	80076c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	609a      	str	r2, [r3, #8]
      break;
 80073d0:	e04f      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6899      	ldr	r1, [r3, #8]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f000 f96d 	bl	80076c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073f4:	609a      	str	r2, [r3, #8]
      break;
 80073f6:	e03c      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	6859      	ldr	r1, [r3, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	461a      	mov	r2, r3
 8007406:	f000 f8e1 	bl	80075cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2150      	movs	r1, #80	; 0x50
 8007410:	4618      	mov	r0, r3
 8007412:	f000 f93a 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007416:	e02c      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6818      	ldr	r0, [r3, #0]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	6859      	ldr	r1, [r3, #4]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	461a      	mov	r2, r3
 8007426:	f000 f900 	bl	800762a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2160      	movs	r1, #96	; 0x60
 8007430:	4618      	mov	r0, r3
 8007432:	f000 f92a 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007436:	e01c      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6859      	ldr	r1, [r3, #4]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	461a      	mov	r2, r3
 8007446:	f000 f8c1 	bl	80075cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2140      	movs	r1, #64	; 0x40
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f91a 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007456:	e00c      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f000 f911 	bl	800768a <TIM_ITRx_SetConfig>
      break;
 8007468:	e003      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
      break;
 800746e:	e000      	b.n	8007472 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007470:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a40      	ldr	r2, [pc, #256]	; (80075a0 <TIM_Base_SetConfig+0x114>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d013      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074aa:	d00f      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a3d      	ldr	r2, [pc, #244]	; (80075a4 <TIM_Base_SetConfig+0x118>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00b      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3c      	ldr	r2, [pc, #240]	; (80075a8 <TIM_Base_SetConfig+0x11c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d007      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a3b      	ldr	r2, [pc, #236]	; (80075ac <TIM_Base_SetConfig+0x120>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d003      	beq.n	80074cc <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a3a      	ldr	r2, [pc, #232]	; (80075b0 <TIM_Base_SetConfig+0x124>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d108      	bne.n	80074de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a2f      	ldr	r2, [pc, #188]	; (80075a0 <TIM_Base_SetConfig+0x114>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d02b      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ec:	d027      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2c      	ldr	r2, [pc, #176]	; (80075a4 <TIM_Base_SetConfig+0x118>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d023      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2b      	ldr	r2, [pc, #172]	; (80075a8 <TIM_Base_SetConfig+0x11c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d01f      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <TIM_Base_SetConfig+0x120>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01b      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <TIM_Base_SetConfig+0x124>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d017      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <TIM_Base_SetConfig+0x128>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d013      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <TIM_Base_SetConfig+0x12c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d00f      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a26      	ldr	r2, [pc, #152]	; (80075bc <TIM_Base_SetConfig+0x130>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00b      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <TIM_Base_SetConfig+0x134>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d007      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <TIM_Base_SetConfig+0x138>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d003      	beq.n	800753e <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a23      	ldr	r2, [pc, #140]	; (80075c8 <TIM_Base_SetConfig+0x13c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d108      	bne.n	8007550 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	4313      	orrs	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	4313      	orrs	r3, r2
 800755c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a0a      	ldr	r2, [pc, #40]	; (80075a0 <TIM_Base_SetConfig+0x114>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d003      	beq.n	8007584 <TIM_Base_SetConfig+0xf8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a0c      	ldr	r2, [pc, #48]	; (80075b0 <TIM_Base_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d103      	bne.n	800758c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	615a      	str	r2, [r3, #20]
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40010400 	.word	0x40010400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800
 80075c0:	40001800 	.word	0x40001800
 80075c4:	40001c00 	.word	0x40001c00
 80075c8:	40002000 	.word	0x40002000

080075cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f023 0201 	bic.w	r2, r3, #1
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f023 030a 	bic.w	r3, r3, #10
 8007608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800762a:	b480      	push	{r7}
 800762c:	b087      	sub	sp, #28
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	f023 0210 	bic.w	r2, r3, #16
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	031b      	lsls	r3, r3, #12
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	621a      	str	r2, [r3, #32]
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f043 0307 	orr.w	r3, r3, #7
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	609a      	str	r2, [r3, #8]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	021a      	lsls	r2, r3, #8
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	bf00      	nop
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007714:	2302      	movs	r3, #2
 8007716:	e05a      	b.n	80077ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	4313      	orrs	r3, r2
 8007748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d022      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007764:	d01d      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1d      	ldr	r2, [pc, #116]	; (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d018      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a1b      	ldr	r2, [pc, #108]	; (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1a      	ldr	r2, [pc, #104]	; (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a18      	ldr	r2, [pc, #96]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a17      	ldr	r2, [pc, #92]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a15      	ldr	r2, [pc, #84]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d10c      	bne.n	80077bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40010000 	.word	0x40010000
 80077e0:	40000400 	.word	0x40000400
 80077e4:	40000800 	.word	0x40000800
 80077e8:	40000c00 	.word	0x40000c00
 80077ec:	40010400 	.word	0x40010400
 80077f0:	40014000 	.word	0x40014000
 80077f4:	40001800 	.word	0x40001800

080077f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e03f      	b.n	800788a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d106      	bne.n	8007824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fa ff72 	bl	8002708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2224      	movs	r2, #36	; 0x24
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800783a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fe81 	bl	8008544 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695a      	ldr	r2, [r3, #20]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b08a      	sub	sp, #40	; 0x28
 8007896:	af02      	add	r7, sp, #8
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d17c      	bne.n	80079ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_UART_Transmit+0x2c>
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e075      	b.n	80079ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_UART_Transmit+0x3e>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e06e      	b.n	80079ae <HAL_UART_Transmit+0x11c>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2221      	movs	r2, #33	; 0x21
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078e6:	f7fb f919 	bl	8002b1c <HAL_GetTick>
 80078ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	88fa      	ldrh	r2, [r7, #6]
 80078f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	88fa      	ldrh	r2, [r7, #6]
 80078f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007900:	d108      	bne.n	8007914 <HAL_UART_Transmit+0x82>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d104      	bne.n	8007914 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e003      	b.n	800791c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007924:	e02a      	b.n	800797c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	2200      	movs	r2, #0
 800792e:	2180      	movs	r1, #128	; 0x80
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 fbc1 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e036      	b.n	80079ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	3302      	adds	r3, #2
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e007      	b.n	800796e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	3301      	adds	r3, #1
 800796c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1cf      	bne.n	8007926 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	9300      	str	r3, [sp, #0]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2200      	movs	r2, #0
 800798e:	2140      	movs	r1, #64	; 0x40
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f000 fb91 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e006      	b.n	80079ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b08a      	sub	sp, #40	; 0x28
 80079ba:	af02      	add	r7, sp, #8
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	603b      	str	r3, [r7, #0]
 80079c2:	4613      	mov	r3, r2
 80079c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	f040 808c 	bne.w	8007af0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_UART_Receive+0x2e>
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e084      	b.n	8007af2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_UART_Receive+0x40>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e07d      	b.n	8007af2 <HAL_UART_Receive+0x13c>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2222      	movs	r2, #34	; 0x22
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a12:	f7fb f883 	bl	8002b1c <HAL_GetTick>
 8007a16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	88fa      	ldrh	r2, [r7, #6]
 8007a22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	d108      	bne.n	8007a40 <HAL_UART_Receive+0x8a>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d104      	bne.n	8007a40 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	e003      	b.n	8007a48 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007a50:	e043      	b.n	8007ada <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2120      	movs	r1, #32
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fb2b 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e042      	b.n	8007af2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10c      	bne.n	8007a8c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	3302      	adds	r3, #2
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	e01f      	b.n	8007acc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a94:	d007      	beq.n	8007aa6 <HAL_UART_Receive+0xf0>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <HAL_UART_Receive+0xfe>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e008      	b.n	8007ac6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1b6      	bne.n	8007a52 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	e000      	b.n	8007af2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007af0:	2302      	movs	r3, #2
  }
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3720      	adds	r7, #32
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	4613      	mov	r3, r2
 8007b06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b20      	cmp	r3, #32
 8007b12:	d11d      	bne.n	8007b50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d002      	beq.n	8007b20 <HAL_UART_Receive_IT+0x26>
 8007b1a:	88fb      	ldrh	r3, [r7, #6]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e016      	b.n	8007b52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_UART_Receive_IT+0x38>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e00f      	b.n	8007b52 <HAL_UART_Receive_IT+0x58>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	461a      	mov	r2, r3
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fb24 	bl	8008194 <UART_Start_Receive_IT>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	e000      	b.n	8007b52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b50:	2302      	movs	r3, #2
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b0ba      	sub	sp, #232	; 0xe8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10f      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x66>
 8007bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d003      	beq.n	8007bc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fc07 	bl	80083ce <UART_Receive_IT>
      return;
 8007bc0:	e256      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f000 80de 	beq.w	8007d88 <HAL_UART_IRQHandler+0x22c>
 8007bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80d1 	beq.w	8007d88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00b      	beq.n	8007c0a <HAL_UART_IRQHandler+0xae>
 8007bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f043 0201 	orr.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0e:	f003 0304 	and.w	r3, r3, #4
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00b      	beq.n	8007c2e <HAL_UART_IRQHandler+0xd2>
 8007c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d005      	beq.n	8007c2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	f043 0202 	orr.w	r2, r3, #2
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d00b      	beq.n	8007c52 <HAL_UART_IRQHandler+0xf6>
 8007c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	f043 0204 	orr.w	r2, r3, #4
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d011      	beq.n	8007c82 <HAL_UART_IRQHandler+0x126>
 8007c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d005      	beq.n	8007c82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	f043 0208 	orr.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 81ed 	beq.w	8008066 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_UART_IRQHandler+0x14e>
 8007c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fb92 	bl	80083ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	f003 0308 	and.w	r3, r3, #8
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <HAL_UART_IRQHandler+0x17a>
 8007cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d04f      	beq.n	8007d76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa9a 	bl	8008210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d141      	bne.n	8007d6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3314      	adds	r3, #20
 8007d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1d9      	bne.n	8007cea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d013      	beq.n	8007d66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d42:	4a7d      	ldr	r2, [pc, #500]	; (8007f38 <HAL_UART_IRQHandler+0x3dc>)
 8007d44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fb f8b3 	bl	8002eb6 <HAL_DMA_Abort_IT>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d016      	beq.n	8007d84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	e00e      	b.n	8007d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f990 	bl	800808c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	e00a      	b.n	8007d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f98c 	bl	800808c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d74:	e006      	b.n	8007d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f988 	bl	800808c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d82:	e170      	b.n	8008066 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	bf00      	nop
    return;
 8007d86:	e16e      	b.n	8008066 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	f040 814a 	bne.w	8008026 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8143 	beq.w	8008026 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 813c 	beq.w	8008026 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dae:	2300      	movs	r3, #0
 8007db0:	60bb      	str	r3, [r7, #8]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	60bb      	str	r3, [r7, #8]
 8007dc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dce:	2b40      	cmp	r3, #64	; 0x40
 8007dd0:	f040 80b4 	bne.w	8007f3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007de0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8140 	beq.w	800806a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007df2:	429a      	cmp	r2, r3
 8007df4:	f080 8139 	bcs.w	800806a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e0a:	f000 8088 	beq.w	8007f1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e1c:	e853 3f00 	ldrex	r3, [r3]
 8007e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1d9      	bne.n	8007e0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e6c:	f023 0301 	bic.w	r3, r3, #1
 8007e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3314      	adds	r3, #20
 8007e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e1      	bne.n	8007e5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e3      	bne.n	8007e96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eee:	f023 0310 	bic.w	r3, r3, #16
 8007ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f00:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e3      	bne.n	8007edc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fa ff5c 	bl	8002dd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8b6 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f34:	e099      	b.n	800806a <HAL_UART_IRQHandler+0x50e>
 8007f36:	bf00      	nop
 8007f38:	080082d7 	.word	0x080082d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 808b 	beq.w	800806e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8086 	beq.w	800806e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	330c      	adds	r3, #12
 8007f68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f86:	647a      	str	r2, [r7, #68]	; 0x44
 8007f88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e3      	bne.n	8007f62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3314      	adds	r3, #20
 8007fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e3      	bne.n	8007f9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0310 	bic.w	r3, r3, #16
 8007ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008004:	61fa      	str	r2, [r7, #28]
 8008006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	617b      	str	r3, [r7, #20]
   return(result);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e3      	bne.n	8007fe0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f83e 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008024:	e023      	b.n	800806e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800802a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_UART_IRQHandler+0x4ea>
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f95d 	bl	80082fe <UART_Transmit_IT>
    return;
 8008044:	e014      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00e      	beq.n	8008070 <HAL_UART_IRQHandler+0x514>
 8008052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d008      	beq.n	8008070 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f99d 	bl	800839e <UART_EndTransmit_IT>
    return;
 8008064:	e004      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
    return;
 8008066:	bf00      	nop
 8008068:	e002      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
      return;
 800806a:	bf00      	nop
 800806c:	e000      	b.n	8008070 <HAL_UART_IRQHandler+0x514>
      return;
 800806e:	bf00      	nop
  }
}
 8008070:	37e8      	adds	r7, #232	; 0xe8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop

08008078 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b090      	sub	sp, #64	; 0x40
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c8:	e050      	b.n	800816c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080d0:	d04c      	beq.n	800816c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080d8:	f7fa fd20 	bl	8002b1c <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d241      	bcs.n	800816c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008108:	637a      	str	r2, [r7, #52]	; 0x34
 800810a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800810e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e5      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3314      	adds	r3, #20
 8008122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	613b      	str	r3, [r7, #16]
   return(result);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f023 0301 	bic.w	r3, r3, #1
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3314      	adds	r3, #20
 800813a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813c:	623a      	str	r2, [r7, #32]
 800813e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69f9      	ldr	r1, [r7, #28]
 8008142:	6a3a      	ldr	r2, [r7, #32]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	61bb      	str	r3, [r7, #24]
   return(result);
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e00f      	b.n	800818c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	4013      	ands	r3, r2
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	429a      	cmp	r2, r3
 800817a:	bf0c      	ite	eq
 800817c:	2301      	moveq	r3, #1
 800817e:	2300      	movne	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	461a      	mov	r2, r3
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	429a      	cmp	r2, r3
 8008188:	d09f      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3740      	adds	r7, #64	; 0x40
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	88fa      	ldrh	r2, [r7, #6]
 80081ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	88fa      	ldrh	r2, [r7, #6]
 80081b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2222      	movs	r2, #34	; 0x22
 80081be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695a      	ldr	r2, [r3, #20]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0220 	orr.w	r2, r2, #32
 8008200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b095      	sub	sp, #84	; 0x54
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	330c      	adds	r3, #12
 800821e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800822e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	330c      	adds	r3, #12
 8008236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008238:	643a      	str	r2, [r7, #64]	; 0x40
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800823e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e5      	bne.n	8008218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3314      	adds	r3, #20
 8008252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	61fb      	str	r3, [r7, #28]
   return(result);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	64bb      	str	r3, [r7, #72]	; 0x48
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3314      	adds	r3, #20
 800826a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800826c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e5      	bne.n	800824c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	2b01      	cmp	r3, #1
 8008286:	d119      	bne.n	80082bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	330c      	adds	r3, #12
 800828e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60bb      	str	r3, [r7, #8]
   return(result);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	647b      	str	r3, [r7, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082a8:	61ba      	str	r2, [r7, #24]
 80082aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	6979      	ldr	r1, [r7, #20]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	613b      	str	r3, [r7, #16]
   return(result);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e5      	bne.n	8008288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082ca:	bf00      	nop
 80082cc:	3754      	adds	r7, #84	; 0x54
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2200      	movs	r2, #0
 80082e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f7ff fecb 	bl	800808c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b21      	cmp	r3, #33	; 0x21
 8008310:	d13e      	bne.n	8008390 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d114      	bne.n	8008346 <UART_Transmit_IT+0x48>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d110      	bne.n	8008346 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008338:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	1c9a      	adds	r2, r3, #2
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	621a      	str	r2, [r3, #32]
 8008344:	e008      	b.n	8008358 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	1c59      	adds	r1, r3, #1
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	6211      	str	r1, [r2, #32]
 8008350:	781a      	ldrb	r2, [r3, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29b      	uxth	r3, r3
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4619      	mov	r1, r3
 8008366:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008368:	2b00      	cmp	r3, #0
 800836a:	d10f      	bne.n	800838c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68da      	ldr	r2, [r3, #12]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800837a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68da      	ldr	r2, [r3, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800838a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	e000      	b.n	8008392 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008390:	2302      	movs	r3, #2
  }
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fe5a 	bl	8008078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b08c      	sub	sp, #48	; 0x30
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b22      	cmp	r3, #34	; 0x22
 80083e0:	f040 80ab 	bne.w	800853a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ec:	d117      	bne.n	800841e <UART_Receive_IT+0x50>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d113      	bne.n	800841e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800840c:	b29a      	uxth	r2, r3
 800840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008410:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	1c9a      	adds	r2, r3, #2
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
 800841c:	e026      	b.n	800846c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008430:	d007      	beq.n	8008442 <UART_Receive_IT+0x74>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <UART_Receive_IT+0x82>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	b2da      	uxtb	r2, r3
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	e008      	b.n	8008462 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800845c:	b2da      	uxtb	r2, r3
 800845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008460:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29b      	uxth	r3, r3
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	4619      	mov	r1, r3
 800847a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800847c:	2b00      	cmp	r3, #0
 800847e:	d15a      	bne.n	8008536 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0220 	bic.w	r2, r2, #32
 800848e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800849e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	695a      	ldr	r2, [r3, #20]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f022 0201 	bic.w	r2, r2, #1
 80084ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d135      	bne.n	800852c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	613b      	str	r3, [r7, #16]
   return(result);
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	f023 0310 	bic.w	r3, r3, #16
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084e6:	623a      	str	r2, [r7, #32]
 80084e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	69f9      	ldr	r1, [r7, #28]
 80084ec:	6a3a      	ldr	r2, [r7, #32]
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e5      	bne.n	80084c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0310 	and.w	r3, r3, #16
 8008504:	2b10      	cmp	r3, #16
 8008506:	d10a      	bne.n	800851e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008522:	4619      	mov	r1, r3
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7ff fdbb 	bl	80080a0 <HAL_UARTEx_RxEventCallback>
 800852a:	e002      	b.n	8008532 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7f8 fd07 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	e002      	b.n	800853c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800853a:	2302      	movs	r3, #2
  }
}
 800853c:	4618      	mov	r0, r3
 800853e:	3730      	adds	r7, #48	; 0x30
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008548:	b0c0      	sub	sp, #256	; 0x100
 800854a:	af00      	add	r7, sp, #0
 800854c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	68d9      	ldr	r1, [r3, #12]
 8008562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	ea40 0301 	orr.w	r3, r0, r1
 800856c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800856e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	431a      	orrs	r2, r3
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	431a      	orrs	r2, r3
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800859c:	f021 010c 	bic.w	r1, r1, #12
 80085a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085aa:	430b      	orrs	r3, r1
 80085ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80085ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085be:	6999      	ldr	r1, [r3, #24]
 80085c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	ea40 0301 	orr.w	r3, r0, r1
 80085ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	4b8f      	ldr	r3, [pc, #572]	; (8008810 <UART_SetConfig+0x2cc>)
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d005      	beq.n	80085e4 <UART_SetConfig+0xa0>
 80085d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b8d      	ldr	r3, [pc, #564]	; (8008814 <UART_SetConfig+0x2d0>)
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d104      	bne.n	80085ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085e4:	f7fe f84c 	bl	8006680 <HAL_RCC_GetPCLK2Freq>
 80085e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085ec:	e003      	b.n	80085f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085ee:	f7fe f833 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 80085f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008600:	f040 810c 	bne.w	800881c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008608:	2200      	movs	r2, #0
 800860a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800860e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008612:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008616:	4622      	mov	r2, r4
 8008618:	462b      	mov	r3, r5
 800861a:	1891      	adds	r1, r2, r2
 800861c:	65b9      	str	r1, [r7, #88]	; 0x58
 800861e:	415b      	adcs	r3, r3
 8008620:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008622:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008626:	4621      	mov	r1, r4
 8008628:	eb12 0801 	adds.w	r8, r2, r1
 800862c:	4629      	mov	r1, r5
 800862e:	eb43 0901 	adc.w	r9, r3, r1
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	f04f 0300 	mov.w	r3, #0
 800863a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800863e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008646:	4690      	mov	r8, r2
 8008648:	4699      	mov	r9, r3
 800864a:	4623      	mov	r3, r4
 800864c:	eb18 0303 	adds.w	r3, r8, r3
 8008650:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008654:	462b      	mov	r3, r5
 8008656:	eb49 0303 	adc.w	r3, r9, r3
 800865a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800865e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800866a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800866e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008672:	460b      	mov	r3, r1
 8008674:	18db      	adds	r3, r3, r3
 8008676:	653b      	str	r3, [r7, #80]	; 0x50
 8008678:	4613      	mov	r3, r2
 800867a:	eb42 0303 	adc.w	r3, r2, r3
 800867e:	657b      	str	r3, [r7, #84]	; 0x54
 8008680:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008684:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008688:	f7f7 fe02 	bl	8000290 <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4b61      	ldr	r3, [pc, #388]	; (8008818 <UART_SetConfig+0x2d4>)
 8008692:	fba3 2302 	umull	r2, r3, r3, r2
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	011c      	lsls	r4, r3, #4
 800869a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80086a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80086a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80086ac:	4642      	mov	r2, r8
 80086ae:	464b      	mov	r3, r9
 80086b0:	1891      	adds	r1, r2, r2
 80086b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80086b4:	415b      	adcs	r3, r3
 80086b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086bc:	4641      	mov	r1, r8
 80086be:	eb12 0a01 	adds.w	sl, r2, r1
 80086c2:	4649      	mov	r1, r9
 80086c4:	eb43 0b01 	adc.w	fp, r3, r1
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	f04f 0300 	mov.w	r3, #0
 80086d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086dc:	4692      	mov	sl, r2
 80086de:	469b      	mov	fp, r3
 80086e0:	4643      	mov	r3, r8
 80086e2:	eb1a 0303 	adds.w	r3, sl, r3
 80086e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086ea:	464b      	mov	r3, r9
 80086ec:	eb4b 0303 	adc.w	r3, fp, r3
 80086f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008700:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008704:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008708:	460b      	mov	r3, r1
 800870a:	18db      	adds	r3, r3, r3
 800870c:	643b      	str	r3, [r7, #64]	; 0x40
 800870e:	4613      	mov	r3, r2
 8008710:	eb42 0303 	adc.w	r3, r2, r3
 8008714:	647b      	str	r3, [r7, #68]	; 0x44
 8008716:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800871a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800871e:	f7f7 fdb7 	bl	8000290 <__aeabi_uldivmod>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4611      	mov	r1, r2
 8008728:	4b3b      	ldr	r3, [pc, #236]	; (8008818 <UART_SetConfig+0x2d4>)
 800872a:	fba3 2301 	umull	r2, r3, r3, r1
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	2264      	movs	r2, #100	; 0x64
 8008732:	fb02 f303 	mul.w	r3, r2, r3
 8008736:	1acb      	subs	r3, r1, r3
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800873e:	4b36      	ldr	r3, [pc, #216]	; (8008818 <UART_SetConfig+0x2d4>)
 8008740:	fba3 2302 	umull	r2, r3, r3, r2
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	005b      	lsls	r3, r3, #1
 8008748:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800874c:	441c      	add	r4, r3
 800874e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008752:	2200      	movs	r2, #0
 8008754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008758:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800875c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008760:	4642      	mov	r2, r8
 8008762:	464b      	mov	r3, r9
 8008764:	1891      	adds	r1, r2, r2
 8008766:	63b9      	str	r1, [r7, #56]	; 0x38
 8008768:	415b      	adcs	r3, r3
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800876c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008770:	4641      	mov	r1, r8
 8008772:	1851      	adds	r1, r2, r1
 8008774:	6339      	str	r1, [r7, #48]	; 0x30
 8008776:	4649      	mov	r1, r9
 8008778:	414b      	adcs	r3, r1
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008788:	4659      	mov	r1, fp
 800878a:	00cb      	lsls	r3, r1, #3
 800878c:	4651      	mov	r1, sl
 800878e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008792:	4651      	mov	r1, sl
 8008794:	00ca      	lsls	r2, r1, #3
 8008796:	4610      	mov	r0, r2
 8008798:	4619      	mov	r1, r3
 800879a:	4603      	mov	r3, r0
 800879c:	4642      	mov	r2, r8
 800879e:	189b      	adds	r3, r3, r2
 80087a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087a4:	464b      	mov	r3, r9
 80087a6:	460a      	mov	r2, r1
 80087a8:	eb42 0303 	adc.w	r3, r2, r3
 80087ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80087b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087c4:	460b      	mov	r3, r1
 80087c6:	18db      	adds	r3, r3, r3
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ca:	4613      	mov	r3, r2
 80087cc:	eb42 0303 	adc.w	r3, r2, r3
 80087d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087da:	f7f7 fd59 	bl	8000290 <__aeabi_uldivmod>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <UART_SetConfig+0x2d4>)
 80087e4:	fba3 1302 	umull	r1, r3, r3, r2
 80087e8:	095b      	lsrs	r3, r3, #5
 80087ea:	2164      	movs	r1, #100	; 0x64
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	3332      	adds	r3, #50	; 0x32
 80087f6:	4a08      	ldr	r2, [pc, #32]	; (8008818 <UART_SetConfig+0x2d4>)
 80087f8:	fba2 2303 	umull	r2, r3, r2, r3
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	f003 0207 	and.w	r2, r3, #7
 8008802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4422      	add	r2, r4
 800880a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800880c:	e105      	b.n	8008a1a <UART_SetConfig+0x4d6>
 800880e:	bf00      	nop
 8008810:	40011000 	.word	0x40011000
 8008814:	40011400 	.word	0x40011400
 8008818:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800881c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008820:	2200      	movs	r2, #0
 8008822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008826:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800882a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800882e:	4642      	mov	r2, r8
 8008830:	464b      	mov	r3, r9
 8008832:	1891      	adds	r1, r2, r2
 8008834:	6239      	str	r1, [r7, #32]
 8008836:	415b      	adcs	r3, r3
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
 800883a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800883e:	4641      	mov	r1, r8
 8008840:	1854      	adds	r4, r2, r1
 8008842:	4649      	mov	r1, r9
 8008844:	eb43 0501 	adc.w	r5, r3, r1
 8008848:	f04f 0200 	mov.w	r2, #0
 800884c:	f04f 0300 	mov.w	r3, #0
 8008850:	00eb      	lsls	r3, r5, #3
 8008852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008856:	00e2      	lsls	r2, r4, #3
 8008858:	4614      	mov	r4, r2
 800885a:	461d      	mov	r5, r3
 800885c:	4643      	mov	r3, r8
 800885e:	18e3      	adds	r3, r4, r3
 8008860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008864:	464b      	mov	r3, r9
 8008866:	eb45 0303 	adc.w	r3, r5, r3
 800886a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800886e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800887a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	f04f 0300 	mov.w	r3, #0
 8008886:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800888a:	4629      	mov	r1, r5
 800888c:	008b      	lsls	r3, r1, #2
 800888e:	4621      	mov	r1, r4
 8008890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008894:	4621      	mov	r1, r4
 8008896:	008a      	lsls	r2, r1, #2
 8008898:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800889c:	f7f7 fcf8 	bl	8000290 <__aeabi_uldivmod>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4b60      	ldr	r3, [pc, #384]	; (8008a28 <UART_SetConfig+0x4e4>)
 80088a6:	fba3 2302 	umull	r2, r3, r3, r2
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	011c      	lsls	r4, r3, #4
 80088ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	1891      	adds	r1, r2, r2
 80088c6:	61b9      	str	r1, [r7, #24]
 80088c8:	415b      	adcs	r3, r3
 80088ca:	61fb      	str	r3, [r7, #28]
 80088cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088d0:	4641      	mov	r1, r8
 80088d2:	1851      	adds	r1, r2, r1
 80088d4:	6139      	str	r1, [r7, #16]
 80088d6:	4649      	mov	r1, r9
 80088d8:	414b      	adcs	r3, r1
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	f04f 0200 	mov.w	r2, #0
 80088e0:	f04f 0300 	mov.w	r3, #0
 80088e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088e8:	4659      	mov	r1, fp
 80088ea:	00cb      	lsls	r3, r1, #3
 80088ec:	4651      	mov	r1, sl
 80088ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088f2:	4651      	mov	r1, sl
 80088f4:	00ca      	lsls	r2, r1, #3
 80088f6:	4610      	mov	r0, r2
 80088f8:	4619      	mov	r1, r3
 80088fa:	4603      	mov	r3, r0
 80088fc:	4642      	mov	r2, r8
 80088fe:	189b      	adds	r3, r3, r2
 8008900:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008904:	464b      	mov	r3, r9
 8008906:	460a      	mov	r2, r1
 8008908:	eb42 0303 	adc.w	r3, r2, r3
 800890c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	67bb      	str	r3, [r7, #120]	; 0x78
 800891a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800891c:	f04f 0200 	mov.w	r2, #0
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008928:	4649      	mov	r1, r9
 800892a:	008b      	lsls	r3, r1, #2
 800892c:	4641      	mov	r1, r8
 800892e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008932:	4641      	mov	r1, r8
 8008934:	008a      	lsls	r2, r1, #2
 8008936:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800893a:	f7f7 fca9 	bl	8000290 <__aeabi_uldivmod>
 800893e:	4602      	mov	r2, r0
 8008940:	460b      	mov	r3, r1
 8008942:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <UART_SetConfig+0x4e4>)
 8008944:	fba3 1302 	umull	r1, r3, r3, r2
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	2164      	movs	r1, #100	; 0x64
 800894c:	fb01 f303 	mul.w	r3, r1, r3
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	3332      	adds	r3, #50	; 0x32
 8008956:	4a34      	ldr	r2, [pc, #208]	; (8008a28 <UART_SetConfig+0x4e4>)
 8008958:	fba2 2303 	umull	r2, r3, r2, r3
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008962:	441c      	add	r4, r3
 8008964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008968:	2200      	movs	r2, #0
 800896a:	673b      	str	r3, [r7, #112]	; 0x70
 800896c:	677a      	str	r2, [r7, #116]	; 0x74
 800896e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008972:	4642      	mov	r2, r8
 8008974:	464b      	mov	r3, r9
 8008976:	1891      	adds	r1, r2, r2
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	415b      	adcs	r3, r3
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008982:	4641      	mov	r1, r8
 8008984:	1851      	adds	r1, r2, r1
 8008986:	6039      	str	r1, [r7, #0]
 8008988:	4649      	mov	r1, r9
 800898a:	414b      	adcs	r3, r1
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	f04f 0300 	mov.w	r3, #0
 8008996:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800899a:	4659      	mov	r1, fp
 800899c:	00cb      	lsls	r3, r1, #3
 800899e:	4651      	mov	r1, sl
 80089a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089a4:	4651      	mov	r1, sl
 80089a6:	00ca      	lsls	r2, r1, #3
 80089a8:	4610      	mov	r0, r2
 80089aa:	4619      	mov	r1, r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	4642      	mov	r2, r8
 80089b0:	189b      	adds	r3, r3, r2
 80089b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80089b4:	464b      	mov	r3, r9
 80089b6:	460a      	mov	r2, r1
 80089b8:	eb42 0303 	adc.w	r3, r2, r3
 80089bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	663b      	str	r3, [r7, #96]	; 0x60
 80089c8:	667a      	str	r2, [r7, #100]	; 0x64
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089d6:	4649      	mov	r1, r9
 80089d8:	008b      	lsls	r3, r1, #2
 80089da:	4641      	mov	r1, r8
 80089dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089e0:	4641      	mov	r1, r8
 80089e2:	008a      	lsls	r2, r1, #2
 80089e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089e8:	f7f7 fc52 	bl	8000290 <__aeabi_uldivmod>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <UART_SetConfig+0x4e4>)
 80089f2:	fba3 1302 	umull	r1, r3, r3, r2
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	2164      	movs	r1, #100	; 0x64
 80089fa:	fb01 f303 	mul.w	r3, r1, r3
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	3332      	adds	r3, #50	; 0x32
 8008a04:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <UART_SetConfig+0x4e4>)
 8008a06:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0a:	095b      	lsrs	r3, r3, #5
 8008a0c:	f003 020f 	and.w	r2, r3, #15
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4422      	add	r2, r4
 8008a18:	609a      	str	r2, [r3, #8]
}
 8008a1a:	bf00      	nop
 8008a1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a20:	46bd      	mov	sp, r7
 8008a22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a26:	bf00      	nop
 8008a28:	51eb851f 	.word	0x51eb851f

08008a2c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d123      	bne.n	8008a86 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008a46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	6851      	ldr	r1, [r2, #4]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	6892      	ldr	r2, [r2, #8]
 8008a52:	4311      	orrs	r1, r2
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	68d2      	ldr	r2, [r2, #12]
 8008a58:	4311      	orrs	r1, r2
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	6912      	ldr	r2, [r2, #16]
 8008a5e:	4311      	orrs	r1, r2
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	6952      	ldr	r2, [r2, #20]
 8008a64:	4311      	orrs	r1, r2
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	6992      	ldr	r2, [r2, #24]
 8008a6a:	4311      	orrs	r1, r2
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	69d2      	ldr	r2, [r2, #28]
 8008a70:	4311      	orrs	r1, r2
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	6a12      	ldr	r2, [r2, #32]
 8008a76:	4311      	orrs	r1, r2
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e028      	b.n	8008ad8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	69d9      	ldr	r1, [r3, #28]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	4319      	orrs	r1, r3
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008aac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	6851      	ldr	r1, [r2, #4]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	6892      	ldr	r2, [r2, #8]
 8008ab8:	4311      	orrs	r1, r2
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	68d2      	ldr	r2, [r2, #12]
 8008abe:	4311      	orrs	r1, r2
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	6912      	ldr	r2, [r2, #16]
 8008ac4:	4311      	orrs	r1, r2
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	6952      	ldr	r2, [r2, #20]
 8008aca:	4311      	orrs	r1, r2
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	6992      	ldr	r2, [r2, #24]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d128      	bne.n	8008b4a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	1e59      	subs	r1, r3, #1
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	4319      	orrs	r1, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	021b      	lsls	r3, r3, #8
 8008b18:	4319      	orrs	r1, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	031b      	lsls	r3, r3, #12
 8008b22:	4319      	orrs	r1, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	041b      	lsls	r3, r3, #16
 8008b2c:	4319      	orrs	r1, r3
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	695b      	ldr	r3, [r3, #20]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	051b      	lsls	r3, r3, #20
 8008b36:	4319      	orrs	r1, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	061b      	lsls	r3, r3, #24
 8008b40:	430b      	orrs	r3, r1
 8008b42:	431a      	orrs	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	e02f      	b.n	8008baa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	68d2      	ldr	r2, [r2, #12]
 8008b5a:	3a01      	subs	r2, #1
 8008b5c:	0311      	lsls	r1, r2, #12
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	6952      	ldr	r2, [r2, #20]
 8008b62:	3a01      	subs	r2, #1
 8008b64:	0512      	lsls	r2, r2, #20
 8008b66:	430a      	orrs	r2, r1
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	1e59      	subs	r1, r3, #1
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	4319      	orrs	r1, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	4319      	orrs	r1, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	041b      	lsls	r3, r3, #16
 8008b98:	4319      	orrs	r1, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	061b      	lsls	r3, r3, #24
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3714      	adds	r7, #20
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bb8:	b084      	sub	sp, #16
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	f107 001c 	add.w	r0, r7, #28
 8008bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d122      	bne.n	8008c16 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d105      	bne.n	8008c0a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 f9c0 	bl	8008f90 <USB_CoreReset>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
 8008c14:	e01a      	b.n	8008c4c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 f9b4 	bl	8008f90 <USB_CoreReset>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8008c3e:	e005      	b.n	8008c4c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d10b      	bne.n	8008c6a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f043 0206 	orr.w	r2, r3, #6
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f043 0220 	orr.w	r2, r3, #32
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c76:	b004      	add	sp, #16
 8008c78:	4770      	bx	lr

08008c7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b083      	sub	sp, #12
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f043 0201 	orr.w	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f023 0201 	bic.w	r2, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d115      	bne.n	8008d0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cec:	2001      	movs	r0, #1
 8008cee:	f7f9 ff21 	bl	8002b34 <HAL_Delay>
      ms++;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f93a 	bl	8008f72 <USB_GetMode>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d01e      	beq.n	8008d42 <USB_SetCurrentMode+0x84>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2b31      	cmp	r3, #49	; 0x31
 8008d08:	d9f0      	bls.n	8008cec <USB_SetCurrentMode+0x2e>
 8008d0a:	e01a      	b.n	8008d42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d115      	bne.n	8008d3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d1e:	2001      	movs	r0, #1
 8008d20:	f7f9 ff08 	bl	8002b34 <HAL_Delay>
      ms++;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f921 	bl	8008f72 <USB_GetMode>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <USB_SetCurrentMode+0x84>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b31      	cmp	r3, #49	; 0x31
 8008d3a:	d9f0      	bls.n	8008d1e <USB_SetCurrentMode+0x60>
 8008d3c:	e001      	b.n	8008d42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e005      	b.n	8008d4e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b32      	cmp	r3, #50	; 0x32
 8008d46:	d101      	bne.n	8008d4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e000      	b.n	8008d4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4a13      	ldr	r2, [pc, #76]	; (8008dbc <USB_FlushTxFifo+0x64>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d901      	bls.n	8008d78 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e01b      	b.n	8008db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	daf2      	bge.n	8008d66 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	019b      	lsls	r3, r3, #6
 8008d88:	f043 0220 	orr.w	r2, r3, #32
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3301      	adds	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a08      	ldr	r2, [pc, #32]	; (8008dbc <USB_FlushTxFifo+0x64>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d901      	bls.n	8008da2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e006      	b.n	8008db0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	f003 0320 	and.w	r3, r3, #32
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d0f0      	beq.n	8008d90 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	00030d40 	.word	0x00030d40

08008dc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	4a11      	ldr	r2, [pc, #68]	; (8008e1c <USB_FlushRxFifo+0x5c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e018      	b.n	8008e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	691b      	ldr	r3, [r3, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	daf2      	bge.n	8008dcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2210      	movs	r2, #16
 8008dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3301      	adds	r3, #1
 8008df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	4a08      	ldr	r2, [pc, #32]	; (8008e1c <USB_FlushRxFifo+0x5c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d901      	bls.n	8008e02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e006      	b.n	8008e10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d0f0      	beq.n	8008df0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	00030d40 	.word	0x00030d40

08008e20 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b089      	sub	sp, #36	; 0x24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	460b      	mov	r3, r1
 8008e30:	71fb      	strb	r3, [r7, #7]
 8008e32:	4613      	mov	r3, r2
 8008e34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008e3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d123      	bne.n	8008e8e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e46:	88bb      	ldrh	r3, [r7, #4]
 8008e48:	3303      	adds	r3, #3
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61bb      	str	r3, [r7, #24]
 8008e52:	e018      	b.n	8008e86 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e54:	79fb      	ldrb	r3, [r7, #7]
 8008e56:	031a      	lsls	r2, r3, #12
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e60:	461a      	mov	r2, r3
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	3301      	adds	r3, #1
 8008e72:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	3301      	adds	r3, #1
 8008e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	3301      	adds	r3, #1
 8008e84:	61bb      	str	r3, [r7, #24]
 8008e86:	69ba      	ldr	r2, [r7, #24]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d3e2      	bcc.n	8008e54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3724      	adds	r7, #36	; 0x24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b08b      	sub	sp, #44	; 0x2c
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008eb2:	88fb      	ldrh	r3, [r7, #6]
 8008eb4:	089b      	lsrs	r3, r3, #2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	623b      	str	r3, [r7, #32]
 8008ec6:	e014      	b.n	8008ef2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	601a      	str	r2, [r3, #0]
    pDest++;
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	3301      	adds	r3, #1
 8008ede:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	3301      	adds	r3, #1
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	623b      	str	r3, [r7, #32]
 8008ef2:	6a3a      	ldr	r2, [r7, #32]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d3e6      	bcc.n	8008ec8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008efa:	8bfb      	ldrh	r3, [r7, #30]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d01e      	beq.n	8008f3e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f107 0310 	add.w	r3, r7, #16
 8008f10:	6812      	ldr	r2, [r2, #0]
 8008f12:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	00db      	lsls	r3, r3, #3
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	701a      	strb	r2, [r3, #0]
      i++;
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	3301      	adds	r3, #1
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008f32:	8bfb      	ldrh	r3, [r7, #30]
 8008f34:	3b01      	subs	r3, #1
 8008f36:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008f38:	8bfb      	ldrh	r3, [r7, #30]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1ea      	bne.n	8008f14 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	372c      	adds	r7, #44	; 0x2c
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	4013      	ands	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f64:	68fb      	ldr	r3, [r7, #12]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	f003 0301 	and.w	r3, r3, #1
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	4a13      	ldr	r2, [pc, #76]	; (8008ff4 <USB_CoreReset+0x64>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d901      	bls.n	8008fae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e01b      	b.n	8008fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	daf2      	bge.n	8008f9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f043 0201 	orr.w	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	4a09      	ldr	r2, [pc, #36]	; (8008ff4 <USB_CoreReset+0x64>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d901      	bls.n	8008fd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e006      	b.n	8008fe6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d0f0      	beq.n	8008fc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	00030d40 	.word	0x00030d40

08008ff8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b086      	sub	sp, #24
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009018:	461a      	mov	r2, r3
 800901a:	2300      	movs	r3, #0
 800901c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904a:	2b00      	cmp	r3, #0
 800904c:	d018      	beq.n	8009080 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d10a      	bne.n	800906a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009062:	f043 0304 	orr.w	r3, r3, #4
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	e014      	b.n	8009094 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009078:	f023 0304 	bic.w	r3, r3, #4
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	e009      	b.n	8009094 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800908e:	f023 0304 	bic.w	r3, r3, #4
 8009092:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009094:	2110      	movs	r1, #16
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff fe5e 	bl	8008d58 <USB_FlushTxFifo>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fe8a 	bl	8008dc0 <USB_FlushRxFifo>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	e015      	b.n	80090e8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c8:	461a      	mov	r2, r3
 80090ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090ce:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090dc:	461a      	mov	r2, r3
 80090de:	2300      	movs	r3, #0
 80090e0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	3301      	adds	r3, #1
 80090e6:	613b      	str	r3, [r7, #16]
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d3e5      	bcc.n	80090bc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090fc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009110:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a13      	ldr	r2, [pc, #76]	; (8009164 <USB_HostInit+0x16c>)
 8009116:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a13      	ldr	r2, [pc, #76]	; (8009168 <USB_HostInit+0x170>)
 800911c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009120:	e009      	b.n	8009136 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2280      	movs	r2, #128	; 0x80
 8009126:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a10      	ldr	r2, [pc, #64]	; (800916c <USB_HostInit+0x174>)
 800912c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <USB_HostInit+0x178>)
 8009132:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	2b00      	cmp	r3, #0
 800913a:	d105      	bne.n	8009148 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f043 0210 	orr.w	r2, r3, #16
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	699a      	ldr	r2, [r3, #24]
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <USB_HostInit+0x17c>)
 800914e:	4313      	orrs	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009154:	7dfb      	ldrb	r3, [r7, #23]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009160:	b004      	add	sp, #16
 8009162:	4770      	bx	lr
 8009164:	01000200 	.word	0x01000200
 8009168:	00e00300 	.word	0x00e00300
 800916c:	00600080 	.word	0x00600080
 8009170:	004000e0 	.word	0x004000e0
 8009174:	a3200008 	.word	0xa3200008

08009178 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	68f9      	ldr	r1, [r7, #12]
 80091ac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80091b0:	4313      	orrs	r3, r2
 80091b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d107      	bne.n	80091ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c0:	461a      	mov	r2, r3
 80091c2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091c6:	6053      	str	r3, [r2, #4]
 80091c8:	e009      	b.n	80091de <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d106      	bne.n	80091de <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091d6:	461a      	mov	r2, r3
 80091d8:	f241 7370 	movw	r3, #6000	; 0x1770
 80091dc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800920c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800921a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800921c:	2064      	movs	r0, #100	; 0x64
 800921e:	f7f9 fc89 	bl	8002b34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	68fa      	ldr	r2, [r7, #12]
 8009226:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800922a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800922e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009230:	200a      	movs	r0, #10
 8009232:	f7f9 fc7f 	bl	8002b34 <HAL_Delay>

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009264:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d109      	bne.n	8009284 <USB_DriveVbus+0x44>
 8009270:	78fb      	ldrb	r3, [r7, #3]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d106      	bne.n	8009284 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800927e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009282:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800928a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800928e:	d109      	bne.n	80092a4 <USB_DriveVbus+0x64>
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800929e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092a2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	0c5b      	lsrs	r3, r3, #17
 80092d0:	f003 0303 	and.w	r3, r3, #3
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3714      	adds	r7, #20
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	b29b      	uxth	r3, r3
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	4608      	mov	r0, r1
 800930e:	4611      	mov	r1, r2
 8009310:	461a      	mov	r2, r3
 8009312:	4603      	mov	r3, r0
 8009314:	70fb      	strb	r3, [r7, #3]
 8009316:	460b      	mov	r3, r1
 8009318:	70bb      	strb	r3, [r7, #2]
 800931a:	4613      	mov	r3, r2
 800931c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009332:	461a      	mov	r2, r3
 8009334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009338:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800933a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800933e:	2b03      	cmp	r3, #3
 8009340:	d87e      	bhi.n	8009440 <USB_HC_Init+0x13c>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <USB_HC_Init+0x44>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	08009359 	.word	0x08009359
 800934c:	08009403 	.word	0x08009403
 8009350:	08009359 	.word	0x08009359
 8009354:	080093c5 	.word	0x080093c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	4413      	add	r3, r2
 8009360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009364:	461a      	mov	r2, r3
 8009366:	f240 439d 	movw	r3, #1181	; 0x49d
 800936a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800936c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009370:	2b00      	cmp	r3, #0
 8009372:	da10      	bge.n	8009396 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	0151      	lsls	r1, r2, #5
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	440a      	add	r2, r1
 800938a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800938e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009392:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009394:	e057      	b.n	8009446 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d051      	beq.n	8009446 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	78fa      	ldrb	r2, [r7, #3]
 80093b2:	0151      	lsls	r1, r2, #5
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	440a      	add	r2, r1
 80093b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80093c0:	60d3      	str	r3, [r2, #12]
      break;
 80093c2:	e040      	b.n	8009446 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d0:	461a      	mov	r2, r3
 80093d2:	f240 639d 	movw	r3, #1693	; 0x69d
 80093d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80093d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	da34      	bge.n	800944a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009400:	e023      	b.n	800944a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009402:	78fb      	ldrb	r3, [r7, #3]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940e:	461a      	mov	r2, r3
 8009410:	f240 2325 	movw	r3, #549	; 0x225
 8009414:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009416:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800941a:	2b00      	cmp	r3, #0
 800941c:	da17      	bge.n	800944e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800941e:	78fb      	ldrb	r3, [r7, #3]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	4413      	add	r3, r2
 8009426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	440a      	add	r2, r1
 8009434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009438:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800943c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800943e:	e006      	b.n	800944e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	77fb      	strb	r3, [r7, #31]
      break;
 8009444:	e004      	b.n	8009450 <USB_HC_Init+0x14c>
      break;
 8009446:	bf00      	nop
 8009448:	e002      	b.n	8009450 <USB_HC_Init+0x14c>
      break;
 800944a:	bf00      	nop
 800944c:	e000      	b.n	8009450 <USB_HC_Init+0x14c>
      break;
 800944e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	78fa      	ldrb	r2, [r7, #3]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f043 0302 	orr.w	r3, r3, #2
 800946e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009476:	699a      	ldr	r2, [r3, #24]
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	f003 030f 	and.w	r3, r3, #15
 800947e:	2101      	movs	r1, #1
 8009480:	fa01 f303 	lsl.w	r3, r1, r3
 8009484:	6939      	ldr	r1, [r7, #16]
 8009486:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800948a:	4313      	orrs	r3, r2
 800948c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800949a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	da03      	bge.n	80094aa <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80094a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094a6:	61bb      	str	r3, [r7, #24]
 80094a8:	e001      	b.n	80094ae <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff feff 	bl	80092b2 <USB_GetHostSpeed>
 80094b4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80094b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d106      	bne.n	80094cc <USB_HC_Init+0x1c8>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d003      	beq.n	80094cc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80094c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e001      	b.n	80094d0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094d0:	787b      	ldrb	r3, [r7, #1]
 80094d2:	059b      	lsls	r3, r3, #22
 80094d4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094d8:	78bb      	ldrb	r3, [r7, #2]
 80094da:	02db      	lsls	r3, r3, #11
 80094dc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094e0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80094e6:	049b      	lsls	r3, r3, #18
 80094e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80094ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094ee:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80094f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80094f4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80094fa:	78fb      	ldrb	r3, [r7, #3]
 80094fc:	0159      	lsls	r1, r3, #5
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	440b      	add	r3, r1
 8009502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009506:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800950c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800950e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009512:	2b03      	cmp	r3, #3
 8009514:	d003      	beq.n	800951e <USB_HC_Init+0x21a>
 8009516:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d10f      	bne.n	800953e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	015a      	lsls	r2, r3, #5
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	4413      	add	r3, r2
 8009526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	78fa      	ldrb	r2, [r7, #3]
 800952e:	0151      	lsls	r1, r2, #5
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	440a      	add	r2, r1
 8009534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800953c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800953e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3720      	adds	r7, #32
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08c      	sub	sp, #48	; 0x30
 800954c:	af02      	add	r7, sp, #8
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009564:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800956a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02d      	beq.n	80095ce <USB_HC_StartXfer+0x86>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	791b      	ldrb	r3, [r3, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d129      	bne.n	80095ce <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d117      	bne.n	80095b0 <USB_HC_StartXfer+0x68>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	79db      	ldrb	r3, [r3, #7]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <USB_HC_StartXfer+0x48>
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	79db      	ldrb	r3, [r3, #7]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d10f      	bne.n	80095b0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	4413      	add	r3, r2
 8009598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	69fa      	ldr	r2, [r7, #28]
 80095a0:	0151      	lsls	r1, r2, #5
 80095a2:	6a3a      	ldr	r2, [r7, #32]
 80095a4:	440a      	add	r2, r1
 80095a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ae:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <USB_HC_StartXfer+0x86>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	795b      	ldrb	r3, [r3, #5]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d107      	bne.n	80095ce <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	4619      	mov	r1, r3
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 fa0f 	bl	80099e8 <USB_DoPing>
      return HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e0f8      	b.n	80097c0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d018      	beq.n	8009608 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	8912      	ldrh	r2, [r2, #8]
 80095de:	4413      	add	r3, r2
 80095e0:	3b01      	subs	r3, #1
 80095e2:	68ba      	ldr	r2, [r7, #8]
 80095e4:	8912      	ldrh	r2, [r2, #8]
 80095e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ea:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80095ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80095ee:	8b7b      	ldrh	r3, [r7, #26]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d90b      	bls.n	800960c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80095f4:	8b7b      	ldrh	r3, [r7, #26]
 80095f6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80095f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	8912      	ldrh	r2, [r2, #8]
 80095fe:	fb03 f202 	mul.w	r2, r3, r2
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	611a      	str	r2, [r3, #16]
 8009606:	e001      	b.n	800960c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009608:	2301      	movs	r3, #1
 800960a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	78db      	ldrb	r3, [r3, #3]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d007      	beq.n	8009624 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	8912      	ldrh	r2, [r2, #8]
 800961a:	fb03 f202 	mul.w	r2, r3, r2
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	611a      	str	r2, [r3, #16]
 8009622:	e003      	b.n	800962c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	695a      	ldr	r2, [r3, #20]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009634:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009636:	04d9      	lsls	r1, r3, #19
 8009638:	4b63      	ldr	r3, [pc, #396]	; (80097c8 <USB_HC_StartXfer+0x280>)
 800963a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800963c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	7a9b      	ldrb	r3, [r3, #10]
 8009642:	075b      	lsls	r3, r3, #29
 8009644:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	0148      	lsls	r0, r1, #5
 800964c:	6a39      	ldr	r1, [r7, #32]
 800964e:	4401      	add	r1, r0
 8009650:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009654:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009656:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d009      	beq.n	8009672 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	68d9      	ldr	r1, [r3, #12]
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	015a      	lsls	r2, r3, #5
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	4413      	add	r3, r2
 800966a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966e:	460a      	mov	r2, r1
 8009670:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf0c      	ite	eq
 8009682:	2301      	moveq	r3, #1
 8009684:	2300      	movne	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	4413      	add	r3, r2
 8009692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	0151      	lsls	r1, r2, #5
 800969c:	6a3a      	ldr	r2, [r7, #32]
 800969e:	440a      	add	r2, r1
 80096a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80096a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	015a      	lsls	r2, r3, #5
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	4413      	add	r3, r2
 80096b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	7e7b      	ldrb	r3, [r7, #25]
 80096ba:	075b      	lsls	r3, r3, #29
 80096bc:	69f9      	ldr	r1, [r7, #28]
 80096be:	0148      	lsls	r0, r1, #5
 80096c0:	6a39      	ldr	r1, [r7, #32]
 80096c2:	4401      	add	r1, r0
 80096c4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80096c8:	4313      	orrs	r3, r2
 80096ca:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	015a      	lsls	r2, r3, #5
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	4413      	add	r3, r2
 80096d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096e2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	78db      	ldrb	r3, [r3, #3]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d004      	beq.n	80096f6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096f2:	613b      	str	r3, [r7, #16]
 80096f4:	e003      	b.n	80096fe <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096fc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009704:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	015a      	lsls	r2, r3, #5
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	4413      	add	r3, r2
 800970e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009712:	461a      	mov	r2, r3
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009718:	79fb      	ldrb	r3, [r7, #7]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e04e      	b.n	80097c0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	78db      	ldrb	r3, [r3, #3]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d149      	bne.n	80097be <USB_HC_StartXfer+0x276>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d045      	beq.n	80097be <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	79db      	ldrb	r3, [r3, #7]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d830      	bhi.n	800979c <USB_HC_StartXfer+0x254>
 800973a:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <USB_HC_StartXfer+0x1f8>)
 800973c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009740:	08009751 	.word	0x08009751
 8009744:	08009775 	.word	0x08009775
 8009748:	08009751 	.word	0x08009751
 800974c:	08009775 	.word	0x08009775
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	3303      	adds	r3, #3
 8009756:	089b      	lsrs	r3, r3, #2
 8009758:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800975a:	8afa      	ldrh	r2, [r7, #22]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	b29b      	uxth	r3, r3
 8009762:	429a      	cmp	r2, r3
 8009764:	d91c      	bls.n	80097a0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	f043 0220 	orr.w	r2, r3, #32
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	619a      	str	r2, [r3, #24]
        }
        break;
 8009772:	e015      	b.n	80097a0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	3303      	adds	r3, #3
 800977a:	089b      	lsrs	r3, r3, #2
 800977c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800977e:	8afa      	ldrh	r2, [r7, #22]
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009786:	691b      	ldr	r3, [r3, #16]
 8009788:	b29b      	uxth	r3, r3
 800978a:	429a      	cmp	r2, r3
 800978c:	d90a      	bls.n	80097a4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	619a      	str	r2, [r3, #24]
        }
        break;
 800979a:	e003      	b.n	80097a4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800979c:	bf00      	nop
 800979e:	e002      	b.n	80097a6 <USB_HC_StartXfer+0x25e>
        break;
 80097a0:	bf00      	nop
 80097a2:	e000      	b.n	80097a6 <USB_HC_StartXfer+0x25e>
        break;
 80097a4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	68d9      	ldr	r1, [r3, #12]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	785a      	ldrb	r2, [r3, #1]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	2000      	movs	r0, #0
 80097b6:	9000      	str	r0, [sp, #0]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7ff fb31 	bl	8008e20 <USB_WritePacket>
  }

  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3728      	adds	r7, #40	; 0x28
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	1ff80000 	.word	0x1ff80000

080097cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	b29b      	uxth	r3, r3
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b089      	sub	sp, #36	; 0x24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	4413      	add	r3, r2
 800980e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	0c9b      	lsrs	r3, r3, #18
 8009816:	f003 0303 	and.w	r3, r3, #3
 800981a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	0fdb      	lsrs	r3, r3, #31
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f003 0320 	and.w	r3, r3, #32
 800983a:	2b20      	cmp	r3, #32
 800983c:	d104      	bne.n	8009848 <USB_HC_Halt+0x5a>
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	e0c8      	b.n	80099da <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <USB_HC_Halt+0x66>
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b02      	cmp	r3, #2
 8009852:	d163      	bne.n	800991c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	4413      	add	r3, r2
 800985c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69ba      	ldr	r2, [r7, #24]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	69fa      	ldr	r2, [r7, #28]
 8009868:	440a      	add	r2, r1
 800986a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800986e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009872:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b00      	cmp	r3, #0
 800987e:	f040 80ab 	bne.w	80099d8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009886:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d133      	bne.n	80098f6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ac:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098da:	d81d      	bhi.n	8009918 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f2:	d0ec      	beq.n	80098ce <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80098f4:	e070      	b.n	80099d8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	440a      	add	r2, r1
 800990c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009914:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009916:	e05f      	b.n	80099d8 <USB_HC_Halt+0x1ea>
            break;
 8009918:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800991a:	e05d      	b.n	80099d8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	4413      	add	r3, r2
 8009924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69ba      	ldr	r2, [r7, #24]
 800992c:	0151      	lsls	r1, r2, #5
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	440a      	add	r2, r1
 8009932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009936:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800993a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d133      	bne.n	80099b4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	69ba      	ldr	r2, [r7, #24]
 800995c:	0151      	lsls	r1, r2, #5
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	440a      	add	r2, r1
 8009962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800996a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	4413      	add	r3, r2
 8009974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	0151      	lsls	r1, r2, #5
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	440a      	add	r2, r1
 8009982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800998a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3301      	adds	r3, #1
 8009990:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009998:	d81d      	bhi.n	80099d6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099b0:	d0ec      	beq.n	800998c <USB_HC_Halt+0x19e>
 80099b2:	e011      	b.n	80099d8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099d2:	6013      	str	r3, [r2, #0]
 80099d4:	e000      	b.n	80099d8 <USB_HC_Halt+0x1ea>
          break;
 80099d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3724      	adds	r7, #36	; 0x24
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
	...

080099e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80099f8:	78fb      	ldrb	r3, [r7, #3]
 80099fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80099fc:	2301      	movs	r3, #1
 80099fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	04da      	lsls	r2, r3, #19
 8009a04:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <USB_DoPing+0x74>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a18:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a30:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a38:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a46:	461a      	mov	r2, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	371c      	adds	r7, #28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	1ff80000 	.word	0x1ff80000

08009a60 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7ff f911 	bl	8008c9c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a7a:	2110      	movs	r1, #16
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff f96b 	bl	8008d58 <USB_FlushTxFifo>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff f997 	bl	8008dc0 <USB_FlushRxFifo>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d001      	beq.n	8009a9c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	61bb      	str	r3, [r7, #24]
 8009aa0:	e01f      	b.n	8009ae2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	015a      	lsls	r2, r3, #5
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ab8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ac0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ac8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	2b0f      	cmp	r3, #15
 8009ae6:	d9dc      	bls.n	8009aa2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61bb      	str	r3, [r7, #24]
 8009aec:	e034      	b.n	8009b58 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b04:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b14:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b22:	461a      	mov	r2, r3
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b34:	d80c      	bhi.n	8009b50 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b4c:	d0ec      	beq.n	8009b28 <USB_StopHost+0xc8>
 8009b4e:	e000      	b.n	8009b52 <USB_StopHost+0xf2>
        break;
 8009b50:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	3301      	adds	r3, #1
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	d9c7      	bls.n	8009aee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b64:	461a      	mov	r2, r3
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b6a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b72:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff f880 	bl	8008c7a <USB_EnableGlobalInt>

  return ret;
 8009b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3720      	adds	r7, #32
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009b88:	4904      	ldr	r1, [pc, #16]	; (8009b9c <MX_FATFS_Init+0x18>)
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <MX_FATFS_Init+0x1c>)
 8009b8c:	f003 f95e 	bl	800ce4c <FATFS_LinkDriver>
 8009b90:	4603      	mov	r3, r0
 8009b92:	461a      	mov	r2, r3
 8009b94:	4b03      	ldr	r3, [pc, #12]	; (8009ba4 <MX_FATFS_Init+0x20>)
 8009b96:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009b98:	bf00      	nop
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	200032f8 	.word	0x200032f8
 8009ba0:	0800eb14 	.word	0x0800eb14
 8009ba4:	200032f4 	.word	0x200032f4

08009ba8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009bce:	79fb      	ldrb	r3, [r7, #7]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4808      	ldr	r0, [pc, #32]	; (8009bf4 <USBH_status+0x34>)
 8009bd4:	f000 fe32 	bl	800a83c <USBH_MSC_UnitIsReady>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <USBH_status+0x24>
  {
    res = RES_OK;
 8009bde:	2300      	movs	r3, #0
 8009be0:	73fb      	strb	r3, [r7, #15]
 8009be2:	e001      	b.n	8009be8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20003308 	.word	0x20003308

08009bf8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b094      	sub	sp, #80	; 0x50
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	60b9      	str	r1, [r7, #8]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	603b      	str	r3, [r7, #0]
 8009c04:	4603      	mov	r3, r0
 8009c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009c0e:	7bf9      	ldrb	r1, [r7, #15]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	4813      	ldr	r0, [pc, #76]	; (8009c68 <USBH_read+0x70>)
 8009c1a:	f000 fe59 	bl	800a8d0 <USBH_MSC_Read>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d103      	bne.n	8009c2c <USBH_read+0x34>
  {
    res = RES_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c2a:	e017      	b.n	8009c5c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009c2c:	f107 0210 	add.w	r2, r7, #16
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	4619      	mov	r1, r3
 8009c34:	480c      	ldr	r0, [pc, #48]	; (8009c68 <USBH_read+0x70>)
 8009c36:	f000 fe27 	bl	800a888 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009c3a:	7f7b      	ldrb	r3, [r7, #29]
 8009c3c:	2b3a      	cmp	r3, #58	; 0x3a
 8009c3e:	d005      	beq.n	8009c4c <USBH_read+0x54>
 8009c40:	2b3a      	cmp	r3, #58	; 0x3a
 8009c42:	dc07      	bgt.n	8009c54 <USBH_read+0x5c>
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	d001      	beq.n	8009c4c <USBH_read+0x54>
 8009c48:	2b28      	cmp	r3, #40	; 0x28
 8009c4a:	d103      	bne.n	8009c54 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c52:	e003      	b.n	8009c5c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c5a:	bf00      	nop
    }
  }

  return res;
 8009c5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3748      	adds	r7, #72	; 0x48
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20003308 	.word	0x20003308

08009c6c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b094      	sub	sp, #80	; 0x50
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009c82:	7bf9      	ldrb	r1, [r7, #15]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	4817      	ldr	r0, [pc, #92]	; (8009cec <USBH_write+0x80>)
 8009c8e:	f000 fe88 	bl	800a9a2 <USBH_MSC_Write>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d103      	bne.n	8009ca0 <USBH_write+0x34>
  {
    res = RES_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009c9e:	e01f      	b.n	8009ce0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009ca0:	f107 0210 	add.w	r2, r7, #16
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4810      	ldr	r0, [pc, #64]	; (8009cec <USBH_write+0x80>)
 8009caa:	f000 fded 	bl	800a888 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009cae:	7f7b      	ldrb	r3, [r7, #29]
 8009cb0:	2b3a      	cmp	r3, #58	; 0x3a
 8009cb2:	d00d      	beq.n	8009cd0 <USBH_write+0x64>
 8009cb4:	2b3a      	cmp	r3, #58	; 0x3a
 8009cb6:	dc0f      	bgt.n	8009cd8 <USBH_write+0x6c>
 8009cb8:	2b28      	cmp	r3, #40	; 0x28
 8009cba:	d009      	beq.n	8009cd0 <USBH_write+0x64>
 8009cbc:	2b28      	cmp	r3, #40	; 0x28
 8009cbe:	dc0b      	bgt.n	8009cd8 <USBH_write+0x6c>
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d005      	beq.n	8009cd0 <USBH_write+0x64>
 8009cc4:	2b27      	cmp	r3, #39	; 0x27
 8009cc6:	d107      	bne.n	8009cd8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009cc8:	2302      	movs	r3, #2
 8009cca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009cce:	e007      	b.n	8009ce0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009cd6:	e003      	b.n	8009ce0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009cde:	bf00      	nop
    }
  }

  return res;
 8009ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3748      	adds	r7, #72	; 0x48
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20003308 	.word	0x20003308

08009cf0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b090      	sub	sp, #64	; 0x40
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	603a      	str	r2, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009d06:	79bb      	ldrb	r3, [r7, #6]
 8009d08:	2b03      	cmp	r3, #3
 8009d0a:	d852      	bhi.n	8009db2 <USBH_ioctl+0xc2>
 8009d0c:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <USBH_ioctl+0x24>)
 8009d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d12:	bf00      	nop
 8009d14:	08009d25 	.word	0x08009d25
 8009d18:	08009d2d 	.word	0x08009d2d
 8009d1c:	08009d57 	.word	0x08009d57
 8009d20:	08009d83 	.word	0x08009d83
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d2a:	e045      	b.n	8009db8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d2c:	f107 0208 	add.w	r2, r7, #8
 8009d30:	79fb      	ldrb	r3, [r7, #7]
 8009d32:	4619      	mov	r1, r3
 8009d34:	4823      	ldr	r0, [pc, #140]	; (8009dc4 <USBH_ioctl+0xd4>)
 8009d36:	f000 fda7 	bl	800a888 <USBH_MSC_GetLUNInfo>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d4c:	e034      	b.n	8009db8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d54:	e030      	b.n	8009db8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d56:	f107 0208 	add.w	r2, r7, #8
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4819      	ldr	r0, [pc, #100]	; (8009dc4 <USBH_ioctl+0xd4>)
 8009d60:	f000 fd92 	bl	800a888 <USBH_MSC_GetLUNInfo>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d107      	bne.n	8009d7a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009d6a:	8a3b      	ldrh	r3, [r7, #16]
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009d78:	e01e      	b.n	8009db8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d80:	e01a      	b.n	8009db8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009d82:	f107 0208 	add.w	r2, r7, #8
 8009d86:	79fb      	ldrb	r3, [r7, #7]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	480e      	ldr	r0, [pc, #56]	; (8009dc4 <USBH_ioctl+0xd4>)
 8009d8c:	f000 fd7c 	bl	800a888 <USBH_MSC_GetLUNInfo>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d109      	bne.n	8009daa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009d96:	8a3b      	ldrh	r3, [r7, #16]
 8009d98:	0a5b      	lsrs	r3, r3, #9
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009da8:	e006      	b.n	8009db8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009db0:	e002      	b.n	8009db8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009db2:	2304      	movs	r3, #4
 8009db4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009db8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3740      	adds	r7, #64	; 0x40
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20003308 	.word	0x20003308

08009dc8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b089      	sub	sp, #36	; 0x24
 8009dcc:	af04      	add	r7, sp, #16
 8009dce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dd6:	7919      	ldrb	r1, [r3, #4]
 8009dd8:	2350      	movs	r3, #80	; 0x50
 8009dda:	2206      	movs	r2, #6
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 fc6b 	bl	800b6b8 <USBH_FindInterface>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2bff      	cmp	r3, #255	; 0xff
 8009dea:	d002      	beq.n	8009df2 <USBH_MSC_InterfaceInit+0x2a>
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d901      	bls.n	8009df6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009df2:	2302      	movs	r3, #2
 8009df4:	e106      	b.n	800a004 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 fc40 	bl	800b680 <USBH_SelectInterface>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009e04:	7bbb      	ldrb	r3, [r7, #14]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e0fa      	b.n	800a004 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009e14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e18:	f003 fb94 	bl	800d544 <malloc>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e0e7      	b.n	800a004 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8009e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e38:	2100      	movs	r1, #0
 8009e3a:	68b8      	ldr	r0, [r7, #8]
 8009e3c:	f003 fba0 	bl	800d580 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	211a      	movs	r1, #26
 8009e46:	fb01 f303 	mul.w	r3, r1, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b25b      	sxtb	r3, r3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	da16      	bge.n	8009e86 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	211a      	movs	r1, #26
 8009e5e:	fb01 f303 	mul.w	r3, r1, r3
 8009e62:	4413      	add	r3, r2
 8009e64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e68:	781a      	ldrb	r2, [r3, #0]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	211a      	movs	r1, #26
 8009e74:	fb01 f303 	mul.w	r3, r1, r3
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009e7e:	881a      	ldrh	r2, [r3, #0]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	815a      	strh	r2, [r3, #10]
 8009e84:	e015      	b.n	8009eb2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009e86:	7bfb      	ldrb	r3, [r7, #15]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	211a      	movs	r1, #26
 8009e8c:	fb01 f303 	mul.w	r3, r1, r3
 8009e90:	4413      	add	r3, r2
 8009e92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009e96:	781a      	ldrb	r2, [r3, #0]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	211a      	movs	r1, #26
 8009ea2:	fb01 f303 	mul.w	r3, r1, r3
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	211a      	movs	r1, #26
 8009eb8:	fb01 f303 	mul.w	r3, r1, r3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	b25b      	sxtb	r3, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da16      	bge.n	8009ef8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	211a      	movs	r1, #26
 8009ed0:	fb01 f303 	mul.w	r3, r1, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	211a      	movs	r1, #26
 8009ee6:	fb01 f303 	mul.w	r3, r1, r3
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009ef0:	881a      	ldrh	r2, [r3, #0]
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	815a      	strh	r2, [r3, #10]
 8009ef6:	e015      	b.n	8009f24 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	211a      	movs	r1, #26
 8009efe:	fb01 f303 	mul.w	r3, r1, r3
 8009f02:	4413      	add	r3, r2
 8009f04:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009f08:	781a      	ldrb	r2, [r3, #0]
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	211a      	movs	r1, #26
 8009f14:	fb01 f303 	mul.w	r3, r1, r3
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009f1e:	881a      	ldrh	r2, [r3, #0]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2200      	movs	r2, #0
 8009f28:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2200      	movs	r2, #0
 8009f34:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	799b      	ldrb	r3, [r3, #6]
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f002 fed6 	bl	800ccee <USBH_AllocPipe>
 8009f42:	4603      	mov	r3, r0
 8009f44:	461a      	mov	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	79db      	ldrb	r3, [r3, #7]
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f002 fecc 	bl	800ccee <USBH_AllocPipe>
 8009f56:	4603      	mov	r3, r0
 8009f58:	461a      	mov	r2, r3
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fdc4 	bl	800aaec <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	799b      	ldrb	r3, [r3, #6]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01e      	beq.n	8009faa <USBH_MSC_InterfaceInit+0x1e2>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	891b      	ldrh	r3, [r3, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d01a      	beq.n	8009faa <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	7959      	ldrb	r1, [r3, #5]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	7998      	ldrb	r0, [r3, #6]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	8912      	ldrh	r2, [r2, #8]
 8009f8c:	9202      	str	r2, [sp, #8]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	9201      	str	r2, [sp, #4]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	4623      	mov	r3, r4
 8009f96:	4602      	mov	r2, r0
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f002 fe79 	bl	800cc90 <USBH_OpenPipe>
 8009f9e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	79db      	ldrb	r3, [r3, #7]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d02c      	beq.n	800a002 <USBH_MSC_InterfaceInit+0x23a>
 8009fa8:	e001      	b.n	8009fae <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e02a      	b.n	800a004 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	895b      	ldrh	r3, [r3, #10]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d025      	beq.n	800a002 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	7919      	ldrb	r1, [r3, #4]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	79d8      	ldrb	r0, [r3, #7]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	8952      	ldrh	r2, [r2, #10]
 8009fce:	9202      	str	r2, [sp, #8]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	9201      	str	r2, [sp, #4]
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	4623      	mov	r3, r4
 8009fd8:	4602      	mov	r2, r0
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f002 fe58 	bl	800cc90 <USBH_OpenPipe>
 8009fe0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	791b      	ldrb	r3, [r3, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f003 f9c8 	bl	800d380 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	795b      	ldrb	r3, [r3, #5]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f003 f9c1 	bl	800d380 <USBH_LL_SetToggle>

  return USBH_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e000      	b.n	800a004 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a002:	2303      	movs	r3, #3
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd90      	pop	{r4, r7, pc}

0800a00c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	795b      	ldrb	r3, [r3, #5]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00e      	beq.n	800a044 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	795b      	ldrb	r3, [r3, #5]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f002 fe4e 	bl	800ccce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	795b      	ldrb	r3, [r3, #5]
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f002 fe79 	bl	800cd30 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	791b      	ldrb	r3, [r3, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	791b      	ldrb	r3, [r3, #4]
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f002 fe3b 	bl	800ccce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	791b      	ldrb	r3, [r3, #4]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f002 fe66 	bl	800cd30 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a070:	69db      	ldr	r3, [r3, #28]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	4618      	mov	r0, r3
 800a080:	f003 fa68 	bl	800d554 <free>
    phost->pActiveClass->pData = 0U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a08a:	2200      	movs	r2, #0
 800a08c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	7b9b      	ldrb	r3, [r3, #14]
 800a0b2:	2b03      	cmp	r3, #3
 800a0b4:	d041      	beq.n	800a13a <USBH_MSC_ClassRequest+0xa2>
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	dc4b      	bgt.n	800a152 <USBH_MSC_ClassRequest+0xba>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <USBH_MSC_ClassRequest+0x2a>
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d147      	bne.n	800a152 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fcf1 	bl	800aaae <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d104      	bne.n	800a0e0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d137      	bne.n	800a156 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d804      	bhi.n	800a0f8 <USBH_MSC_ClassRequest+0x60>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	b2da      	uxtb	r2, r3
 800a0f6:	e000      	b.n	800a0fa <USBH_MSC_ClassRequest+0x62>
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a0fe:	2300      	movs	r3, #0
 800a100:	73bb      	strb	r3, [r7, #14]
 800a102:	e014      	b.n	800a12e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a104:	7bbb      	ldrb	r3, [r7, #14]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	2134      	movs	r1, #52	; 0x34
 800a10a:	fb01 f303 	mul.w	r3, r1, r3
 800a10e:	4413      	add	r3, r2
 800a110:	3392      	adds	r3, #146	; 0x92
 800a112:	2202      	movs	r2, #2
 800a114:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a116:	7bbb      	ldrb	r3, [r7, #14]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	2134      	movs	r1, #52	; 0x34
 800a11c:	fb01 f303 	mul.w	r3, r1, r3
 800a120:	4413      	add	r3, r2
 800a122:	33c1      	adds	r3, #193	; 0xc1
 800a124:	2200      	movs	r2, #0
 800a126:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a128:	7bbb      	ldrb	r3, [r7, #14]
 800a12a:	3301      	adds	r3, #1
 800a12c:	73bb      	strb	r3, [r7, #14]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	7bba      	ldrb	r2, [r7, #14]
 800a134:	429a      	cmp	r2, r3
 800a136:	d3e5      	bcc.n	800a104 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a138:	e00d      	b.n	800a156 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a13a:	2100      	movs	r1, #0
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f002 f888 	bl	800c252 <USBH_ClrFeature>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d108      	bne.n	800a15a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	7bda      	ldrb	r2, [r3, #15]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a150:	e003      	b.n	800a15a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a152:	bf00      	nop
 800a154:	e002      	b.n	800a15c <USBH_MSC_ClassRequest+0xc4>
      break;
 800a156:	bf00      	nop
 800a158:	e000      	b.n	800a15c <USBH_MSC_ClassRequest+0xc4>
      break;
 800a15a:	bf00      	nop
  }

  return status;
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a17a:	2301      	movs	r3, #1
 800a17c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a17e:	2301      	movs	r3, #1
 800a180:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a182:	2301      	movs	r3, #1
 800a184:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	7b1b      	ldrb	r3, [r3, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <USBH_MSC_Process+0x2e>
 800a18e:	2b01      	cmp	r3, #1
 800a190:	f000 8271 	beq.w	800a676 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a194:	e272      	b.n	800a67c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	f080 824f 	bcs.w	800a646 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	2334      	movs	r3, #52	; 0x34
 800a1b4:	fb01 f303 	mul.w	r3, r1, r3
 800a1b8:	4413      	add	r3, r2
 800a1ba:	3391      	adds	r3, #145	; 0x91
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	2334      	movs	r3, #52	; 0x34
 800a1cc:	fb01 f303 	mul.w	r3, r1, r3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3390      	adds	r3, #144	; 0x90
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	f200 8243 	bhi.w	800a662 <USBH_MSC_Process+0x4fa>
 800a1dc:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <USBH_MSC_Process+0x7c>)
 800a1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e2:	bf00      	nop
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a663 	.word	0x0800a663
 800a1ec:	0800a2d1 	.word	0x0800a2d1
 800a1f0:	0800a455 	.word	0x0800a455
 800a1f4:	0800a22f 	.word	0x0800a22f
 800a1f8:	0800a521 	.word	0x0800a521
 800a1fc:	0800a663 	.word	0x0800a663
 800a200:	0800a663 	.word	0x0800a663
 800a204:	0800a635 	.word	0x0800a635
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a20e:	4619      	mov	r1, r3
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	2334      	movs	r3, #52	; 0x34
 800a214:	fb01 f303 	mul.w	r3, r1, r3
 800a218:	4413      	add	r3, r2
 800a21a:	3390      	adds	r3, #144	; 0x90
 800a21c:	2204      	movs	r2, #4
 800a21e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a22c:	e222      	b.n	800a674 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a234:	b2d9      	uxtb	r1, r3
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a23c:	461a      	mov	r2, r3
 800a23e:	2334      	movs	r3, #52	; 0x34
 800a240:	fb02 f303 	mul.w	r3, r2, r3
 800a244:	3398      	adds	r3, #152	; 0x98
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	4413      	add	r3, r2
 800a24a:	3307      	adds	r3, #7
 800a24c:	461a      	mov	r2, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 ff6a 	bl	800b128 <USBH_MSC_SCSI_Inquiry>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10b      	bne.n	800a276 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a264:	4619      	mov	r1, r3
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	2334      	movs	r3, #52	; 0x34
 800a26a:	fb01 f303 	mul.w	r3, r1, r3
 800a26e:	4413      	add	r3, r2
 800a270:	3390      	adds	r3, #144	; 0x90
 800a272:	2202      	movs	r2, #2
 800a274:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d10c      	bne.n	800a296 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a282:	4619      	mov	r1, r3
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	2334      	movs	r3, #52	; 0x34
 800a288:	fb01 f303 	mul.w	r3, r1, r3
 800a28c:	4413      	add	r3, r2
 800a28e:	3390      	adds	r3, #144	; 0x90
 800a290:	2205      	movs	r2, #5
 800a292:	701a      	strb	r2, [r3, #0]
            break;
 800a294:	e1e7      	b.n	800a666 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b04      	cmp	r3, #4
 800a29a:	f040 81e4 	bne.w	800a666 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	2334      	movs	r3, #52	; 0x34
 800a2aa:	fb01 f303 	mul.w	r3, r1, r3
 800a2ae:	4413      	add	r3, r2
 800a2b0:	3390      	adds	r3, #144	; 0x90
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2bc:	4619      	mov	r1, r3
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	2334      	movs	r3, #52	; 0x34
 800a2c2:	fb01 f303 	mul.w	r3, r1, r3
 800a2c6:	4413      	add	r3, r2
 800a2c8:	3391      	adds	r3, #145	; 0x91
 800a2ca:	2202      	movs	r2, #2
 800a2cc:	701a      	strb	r2, [r3, #0]
            break;
 800a2ce:	e1ca      	b.n	800a666 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fe66 	bl	800afac <USBH_MSC_SCSI_TestUnitReady>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a2e4:	7bbb      	ldrb	r3, [r7, #14]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d149      	bne.n	800a37e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	2334      	movs	r3, #52	; 0x34
 800a2f6:	fb01 f303 	mul.w	r3, r1, r3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3392      	adds	r3, #146	; 0x92
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00c      	beq.n	800a31e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a30a:	4619      	mov	r1, r3
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	2334      	movs	r3, #52	; 0x34
 800a310:	fb01 f303 	mul.w	r3, r1, r3
 800a314:	4413      	add	r3, r2
 800a316:	33c1      	adds	r3, #193	; 0xc1
 800a318:	2201      	movs	r2, #1
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e00b      	b.n	800a336 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a324:	4619      	mov	r1, r3
 800a326:	693a      	ldr	r2, [r7, #16]
 800a328:	2334      	movs	r3, #52	; 0x34
 800a32a:	fb01 f303 	mul.w	r3, r1, r3
 800a32e:	4413      	add	r3, r2
 800a330:	33c1      	adds	r3, #193	; 0xc1
 800a332:	2200      	movs	r2, #0
 800a334:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a33c:	4619      	mov	r1, r3
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	2334      	movs	r3, #52	; 0x34
 800a342:	fb01 f303 	mul.w	r3, r1, r3
 800a346:	4413      	add	r3, r2
 800a348:	3390      	adds	r3, #144	; 0x90
 800a34a:	2203      	movs	r2, #3
 800a34c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a354:	4619      	mov	r1, r3
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	2334      	movs	r3, #52	; 0x34
 800a35a:	fb01 f303 	mul.w	r3, r1, r3
 800a35e:	4413      	add	r3, r2
 800a360:	3391      	adds	r3, #145	; 0x91
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a36c:	4619      	mov	r1, r3
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	2334      	movs	r3, #52	; 0x34
 800a372:	fb01 f303 	mul.w	r3, r1, r3
 800a376:	4413      	add	r3, r2
 800a378:	3392      	adds	r3, #146	; 0x92
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a37e:	7bbb      	ldrb	r3, [r7, #14]
 800a380:	2b02      	cmp	r3, #2
 800a382:	d14a      	bne.n	800a41a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a38a:	4619      	mov	r1, r3
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	2334      	movs	r3, #52	; 0x34
 800a390:	fb01 f303 	mul.w	r3, r1, r3
 800a394:	4413      	add	r3, r2
 800a396:	3392      	adds	r3, #146	; 0x92
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d00c      	beq.n	800a3b8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	2334      	movs	r3, #52	; 0x34
 800a3aa:	fb01 f303 	mul.w	r3, r1, r3
 800a3ae:	4413      	add	r3, r2
 800a3b0:	33c1      	adds	r3, #193	; 0xc1
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e00b      	b.n	800a3d0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3be:	4619      	mov	r1, r3
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	2334      	movs	r3, #52	; 0x34
 800a3c4:	fb01 f303 	mul.w	r3, r1, r3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	33c1      	adds	r3, #193	; 0xc1
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	2334      	movs	r3, #52	; 0x34
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	3390      	adds	r3, #144	; 0x90
 800a3e4:	2205      	movs	r2, #5
 800a3e6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	2334      	movs	r3, #52	; 0x34
 800a3f4:	fb01 f303 	mul.w	r3, r1, r3
 800a3f8:	4413      	add	r3, r2
 800a3fa:	3391      	adds	r3, #145	; 0x91
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a406:	4619      	mov	r1, r3
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	2334      	movs	r3, #52	; 0x34
 800a40c:	fb01 f303 	mul.w	r3, r1, r3
 800a410:	4413      	add	r3, r2
 800a412:	3392      	adds	r3, #146	; 0x92
 800a414:	2202      	movs	r2, #2
 800a416:	701a      	strb	r2, [r3, #0]
            break;
 800a418:	e127      	b.n	800a66a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	f040 8124 	bne.w	800a66a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a428:	4619      	mov	r1, r3
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	2334      	movs	r3, #52	; 0x34
 800a42e:	fb01 f303 	mul.w	r3, r1, r3
 800a432:	4413      	add	r3, r2
 800a434:	3390      	adds	r3, #144	; 0x90
 800a436:	2201      	movs	r2, #1
 800a438:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a440:	4619      	mov	r1, r3
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	2334      	movs	r3, #52	; 0x34
 800a446:	fb01 f303 	mul.w	r3, r1, r3
 800a44a:	4413      	add	r3, r2
 800a44c:	3391      	adds	r3, #145	; 0x91
 800a44e:	2202      	movs	r2, #2
 800a450:	701a      	strb	r2, [r3, #0]
            break;
 800a452:	e10a      	b.n	800a66a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a45a:	b2d9      	uxtb	r1, r3
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a462:	461a      	mov	r2, r3
 800a464:	2334      	movs	r3, #52	; 0x34
 800a466:	fb02 f303 	mul.w	r3, r2, r3
 800a46a:	3390      	adds	r3, #144	; 0x90
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	4413      	add	r3, r2
 800a470:	3304      	adds	r3, #4
 800a472:	461a      	mov	r2, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fddc 	bl	800b032 <USBH_MSC_SCSI_ReadCapacity>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d120      	bne.n	800a4c6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a48a:	4619      	mov	r1, r3
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	2334      	movs	r3, #52	; 0x34
 800a490:	fb01 f303 	mul.w	r3, r1, r3
 800a494:	4413      	add	r3, r2
 800a496:	3390      	adds	r3, #144	; 0x90
 800a498:	2201      	movs	r2, #1
 800a49a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	2334      	movs	r3, #52	; 0x34
 800a4a8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ac:	4413      	add	r3, r2
 800a4ae:	3391      	adds	r3, #145	; 0x91
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a4c4:	e0d3      	b.n	800a66e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d10c      	bne.n	800a4e6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	2334      	movs	r3, #52	; 0x34
 800a4d8:	fb01 f303 	mul.w	r3, r1, r3
 800a4dc:	4413      	add	r3, r2
 800a4de:	3390      	adds	r3, #144	; 0x90
 800a4e0:	2205      	movs	r2, #5
 800a4e2:	701a      	strb	r2, [r3, #0]
            break;
 800a4e4:	e0c3      	b.n	800a66e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	f040 80c0 	bne.w	800a66e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	2334      	movs	r3, #52	; 0x34
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	4413      	add	r3, r2
 800a500:	3390      	adds	r3, #144	; 0x90
 800a502:	2201      	movs	r2, #1
 800a504:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a50c:	4619      	mov	r1, r3
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	2334      	movs	r3, #52	; 0x34
 800a512:	fb01 f303 	mul.w	r3, r1, r3
 800a516:	4413      	add	r3, r2
 800a518:	3391      	adds	r3, #145	; 0x91
 800a51a:	2202      	movs	r2, #2
 800a51c:	701a      	strb	r2, [r3, #0]
            break;
 800a51e:	e0a6      	b.n	800a66e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a526:	b2d9      	uxtb	r1, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a52e:	461a      	mov	r2, r3
 800a530:	2334      	movs	r3, #52	; 0x34
 800a532:	fb02 f303 	mul.w	r3, r2, r3
 800a536:	3398      	adds	r3, #152	; 0x98
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4413      	add	r3, r2
 800a53c:	3304      	adds	r3, #4
 800a53e:	461a      	mov	r2, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fe96 	bl	800b272 <USBH_MSC_SCSI_RequestSense>
 800a546:	4603      	mov	r3, r0
 800a548:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d145      	bne.n	800a5dc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a556:	4619      	mov	r1, r3
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	2334      	movs	r3, #52	; 0x34
 800a55c:	fb01 f303 	mul.w	r3, r1, r3
 800a560:	4413      	add	r3, r2
 800a562:	339c      	adds	r3, #156	; 0x9c
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b06      	cmp	r3, #6
 800a568:	d00c      	beq.n	800a584 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a570:	4619      	mov	r1, r3
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	2334      	movs	r3, #52	; 0x34
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	339c      	adds	r3, #156	; 0x9c
 800a57e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a580:	2b02      	cmp	r3, #2
 800a582:	d117      	bne.n	800a5b4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	f242 720f 	movw	r2, #9999	; 0x270f
 800a596:	4293      	cmp	r3, r2
 800a598:	d80c      	bhi.n	800a5b4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	693a      	ldr	r2, [r7, #16]
 800a5a4:	2334      	movs	r3, #52	; 0x34
 800a5a6:	fb01 f303 	mul.w	r3, r1, r3
 800a5aa:	4413      	add	r3, r2
 800a5ac:	3390      	adds	r3, #144	; 0x90
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	701a      	strb	r2, [r3, #0]
                  break;
 800a5b2:	e05f      	b.n	800a674 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	2334      	movs	r3, #52	; 0x34
 800a5c0:	fb01 f303 	mul.w	r3, r1, r3
 800a5c4:	4413      	add	r3, r2
 800a5c6:	3390      	adds	r3, #144	; 0x90
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d10c      	bne.n	800a5fc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	2334      	movs	r3, #52	; 0x34
 800a5ee:	fb01 f303 	mul.w	r3, r1, r3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	3390      	adds	r3, #144	; 0x90
 800a5f6:	2208      	movs	r2, #8
 800a5f8:	701a      	strb	r2, [r3, #0]
            break;
 800a5fa:	e03a      	b.n	800a672 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	d137      	bne.n	800a672 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a608:	4619      	mov	r1, r3
 800a60a:	693a      	ldr	r2, [r7, #16]
 800a60c:	2334      	movs	r3, #52	; 0x34
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	4413      	add	r3, r2
 800a614:	3390      	adds	r3, #144	; 0x90
 800a616:	2201      	movs	r2, #1
 800a618:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a620:	4619      	mov	r1, r3
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	2334      	movs	r3, #52	; 0x34
 800a626:	fb01 f303 	mul.w	r3, r1, r3
 800a62a:	4413      	add	r3, r2
 800a62c:	3391      	adds	r3, #145	; 0x91
 800a62e:	2202      	movs	r2, #2
 800a630:	701a      	strb	r2, [r3, #0]
            break;
 800a632:	e01e      	b.n	800a672 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a63a:	3301      	adds	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a644:	e016      	b.n	800a674 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	2201      	movs	r2, #1
 800a652:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a65a:	2102      	movs	r1, #2
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	4798      	blx	r3
      break;
 800a660:	e00c      	b.n	800a67c <USBH_MSC_Process+0x514>
            break;
 800a662:	bf00      	nop
 800a664:	e00a      	b.n	800a67c <USBH_MSC_Process+0x514>
            break;
 800a666:	bf00      	nop
 800a668:	e008      	b.n	800a67c <USBH_MSC_Process+0x514>
            break;
 800a66a:	bf00      	nop
 800a66c:	e006      	b.n	800a67c <USBH_MSC_Process+0x514>
            break;
 800a66e:	bf00      	nop
 800a670:	e004      	b.n	800a67c <USBH_MSC_Process+0x514>
            break;
 800a672:	bf00      	nop
      break;
 800a674:	e002      	b.n	800a67c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	75fb      	strb	r3, [r7, #23]
      break;
 800a67a:	bf00      	nop
  }
  return error;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3718      	adds	r7, #24
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop

0800a688 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b088      	sub	sp, #32
 800a6a2:	af02      	add	r7, sp, #8
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6b0:	69db      	ldr	r3, [r3, #28]
 800a6b2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	693a      	ldr	r2, [r7, #16]
 800a6c0:	2134      	movs	r1, #52	; 0x34
 800a6c2:	fb01 f303 	mul.w	r3, r1, r3
 800a6c6:	4413      	add	r3, r2
 800a6c8:	3390      	adds	r3, #144	; 0x90
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	2b07      	cmp	r3, #7
 800a6ce:	d03c      	beq.n	800a74a <USBH_MSC_RdWrProcess+0xac>
 800a6d0:	2b07      	cmp	r3, #7
 800a6d2:	f300 80a7 	bgt.w	800a824 <USBH_MSC_RdWrProcess+0x186>
 800a6d6:	2b05      	cmp	r3, #5
 800a6d8:	d06c      	beq.n	800a7b4 <USBH_MSC_RdWrProcess+0x116>
 800a6da:	2b06      	cmp	r3, #6
 800a6dc:	f040 80a2 	bne.w	800a824 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a6e0:	78f9      	ldrb	r1, [r7, #3]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 fea5 	bl	800b43a <USBH_MSC_SCSI_Read>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a6fa:	78fb      	ldrb	r3, [r7, #3]
 800a6fc:	693a      	ldr	r2, [r7, #16]
 800a6fe:	2134      	movs	r1, #52	; 0x34
 800a700:	fb01 f303 	mul.w	r3, r1, r3
 800a704:	4413      	add	r3, r2
 800a706:	3390      	adds	r3, #144	; 0x90
 800a708:	2201      	movs	r2, #1
 800a70a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a710:	e08a      	b.n	800a828 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a712:	7bfb      	ldrb	r3, [r7, #15]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d109      	bne.n	800a72c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	2134      	movs	r1, #52	; 0x34
 800a71e:	fb01 f303 	mul.w	r3, r1, r3
 800a722:	4413      	add	r3, r2
 800a724:	3390      	adds	r3, #144	; 0x90
 800a726:	2205      	movs	r2, #5
 800a728:	701a      	strb	r2, [r3, #0]
      break;
 800a72a:	e07d      	b.n	800a828 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	2b04      	cmp	r3, #4
 800a730:	d17a      	bne.n	800a828 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a732:	78fb      	ldrb	r3, [r7, #3]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	2134      	movs	r1, #52	; 0x34
 800a738:	fb01 f303 	mul.w	r3, r1, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	3390      	adds	r3, #144	; 0x90
 800a740:	2208      	movs	r2, #8
 800a742:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a744:	2302      	movs	r3, #2
 800a746:	75fb      	strb	r3, [r7, #23]
      break;
 800a748:	e06e      	b.n	800a828 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a74a:	78f9      	ldrb	r1, [r7, #3]
 800a74c:	2300      	movs	r3, #0
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2300      	movs	r3, #0
 800a752:	2200      	movs	r2, #0
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fe05 	bl	800b364 <USBH_MSC_SCSI_Write>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10b      	bne.n	800a77c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a764:	78fb      	ldrb	r3, [r7, #3]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	2134      	movs	r1, #52	; 0x34
 800a76a:	fb01 f303 	mul.w	r3, r1, r3
 800a76e:	4413      	add	r3, r2
 800a770:	3390      	adds	r3, #144	; 0x90
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a77a:	e057      	b.n	800a82c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d109      	bne.n	800a796 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a782:	78fb      	ldrb	r3, [r7, #3]
 800a784:	693a      	ldr	r2, [r7, #16]
 800a786:	2134      	movs	r1, #52	; 0x34
 800a788:	fb01 f303 	mul.w	r3, r1, r3
 800a78c:	4413      	add	r3, r2
 800a78e:	3390      	adds	r3, #144	; 0x90
 800a790:	2205      	movs	r2, #5
 800a792:	701a      	strb	r2, [r3, #0]
      break;
 800a794:	e04a      	b.n	800a82c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d147      	bne.n	800a82c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	2134      	movs	r1, #52	; 0x34
 800a7a2:	fb01 f303 	mul.w	r3, r1, r3
 800a7a6:	4413      	add	r3, r2
 800a7a8:	3390      	adds	r3, #144	; 0x90
 800a7aa:	2208      	movs	r2, #8
 800a7ac:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a7ae:	2302      	movs	r3, #2
 800a7b0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7b2:	e03b      	b.n	800a82c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a7b4:	78fb      	ldrb	r3, [r7, #3]
 800a7b6:	2234      	movs	r2, #52	; 0x34
 800a7b8:	fb02 f303 	mul.w	r3, r2, r3
 800a7bc:	3398      	adds	r3, #152	; 0x98
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	1d1a      	adds	r2, r3, #4
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fd52 	bl	800b272 <USBH_MSC_SCSI_RequestSense>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d113      	bne.n	800a800 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	2134      	movs	r1, #52	; 0x34
 800a7de:	fb01 f303 	mul.w	r3, r1, r3
 800a7e2:	4413      	add	r3, r2
 800a7e4:	3390      	adds	r3, #144	; 0x90
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	2134      	movs	r1, #52	; 0x34
 800a7f0:	fb01 f303 	mul.w	r3, r1, r3
 800a7f4:	4413      	add	r3, r2
 800a7f6:	3391      	adds	r3, #145	; 0x91
 800a7f8:	2202      	movs	r2, #2
 800a7fa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a800:	7bfb      	ldrb	r3, [r7, #15]
 800a802:	2b02      	cmp	r3, #2
 800a804:	d014      	beq.n	800a830 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a806:	7bfb      	ldrb	r3, [r7, #15]
 800a808:	2b04      	cmp	r3, #4
 800a80a:	d111      	bne.n	800a830 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	2134      	movs	r1, #52	; 0x34
 800a812:	fb01 f303 	mul.w	r3, r1, r3
 800a816:	4413      	add	r3, r2
 800a818:	3390      	adds	r3, #144	; 0x90
 800a81a:	2208      	movs	r2, #8
 800a81c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a81e:	2302      	movs	r3, #2
 800a820:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a822:	e005      	b.n	800a830 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a824:	bf00      	nop
 800a826:	e004      	b.n	800a832 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a828:	bf00      	nop
 800a82a:	e002      	b.n	800a832 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a82c:	bf00      	nop
 800a82e:	e000      	b.n	800a832 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a830:	bf00      	nop

  }
  return error;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b0b      	cmp	r3, #11
 800a85a:	d10c      	bne.n	800a876 <USBH_MSC_UnitIsReady+0x3a>
 800a85c:	78fb      	ldrb	r3, [r7, #3]
 800a85e:	68ba      	ldr	r2, [r7, #8]
 800a860:	2134      	movs	r1, #52	; 0x34
 800a862:	fb01 f303 	mul.w	r3, r1, r3
 800a866:	4413      	add	r3, r2
 800a868:	3391      	adds	r3, #145	; 0x91
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a870:	2301      	movs	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
 800a874:	e001      	b.n	800a87a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b086      	sub	sp, #24
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	460b      	mov	r3, r1
 800a892:	607a      	str	r2, [r7, #4]
 800a894:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b0b      	cmp	r3, #11
 800a8a8:	d10d      	bne.n	800a8c6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	2234      	movs	r2, #52	; 0x34
 800a8ae:	fb02 f303 	mul.w	r3, r2, r3
 800a8b2:	3390      	adds	r3, #144	; 0x90
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	2234      	movs	r2, #52	; 0x34
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f002 fe51 	bl	800d564 <memcpy>
    return USBH_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	e000      	b.n	800a8c8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a8c6:	2302      	movs	r3, #2
  }
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3718      	adds	r7, #24
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af02      	add	r7, sp, #8
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	607a      	str	r2, [r7, #4]
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d00e      	beq.n	800a914 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a8fc:	2b0b      	cmp	r3, #11
 800a8fe:	d109      	bne.n	800a914 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a900:	7afb      	ldrb	r3, [r7, #11]
 800a902:	697a      	ldr	r2, [r7, #20]
 800a904:	2134      	movs	r1, #52	; 0x34
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	3390      	adds	r3, #144	; 0x90
 800a90e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a910:	2b01      	cmp	r3, #1
 800a912:	d001      	beq.n	800a918 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a914:	2302      	movs	r3, #2
 800a916:	e040      	b.n	800a99a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2206      	movs	r2, #6
 800a91c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a91e:	7afb      	ldrb	r3, [r7, #11]
 800a920:	697a      	ldr	r2, [r7, #20]
 800a922:	2134      	movs	r1, #52	; 0x34
 800a924:	fb01 f303 	mul.w	r3, r1, r3
 800a928:	4413      	add	r3, r2
 800a92a:	3390      	adds	r3, #144	; 0x90
 800a92c:	2206      	movs	r2, #6
 800a92e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a930:	7afb      	ldrb	r3, [r7, #11]
 800a932:	b29a      	uxth	r2, r3
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a93a:	7af9      	ldrb	r1, [r7, #11]
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fd78 	bl	800b43a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a950:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a952:	e016      	b.n	800a982 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	1ad2      	subs	r2, r2, r3
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	f242 7110 	movw	r1, #10000	; 0x2710
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	429a      	cmp	r2, r3
 800a96a:	d805      	bhi.n	800a978 <USBH_MSC_Read+0xa8>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a972:	b2db      	uxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2201      	movs	r2, #1
 800a97c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a97e:	2302      	movs	r3, #2
 800a980:	e00b      	b.n	800a99a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a982:	7afb      	ldrb	r3, [r7, #11]
 800a984:	4619      	mov	r1, r3
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fe89 	bl	800a69e <USBH_MSC_RdWrProcess>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d0e0      	beq.n	800a954 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2201      	movs	r2, #1
 800a996:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b088      	sub	sp, #32
 800a9a6:	af02      	add	r7, sp, #8
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	603b      	str	r3, [r7, #0]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9b8:	69db      	ldr	r3, [r3, #28]
 800a9ba:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00e      	beq.n	800a9e6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a9ce:	2b0b      	cmp	r3, #11
 800a9d0:	d109      	bne.n	800a9e6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a9d2:	7afb      	ldrb	r3, [r7, #11]
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	2134      	movs	r1, #52	; 0x34
 800a9d8:	fb01 f303 	mul.w	r3, r1, r3
 800a9dc:	4413      	add	r3, r2
 800a9de:	3390      	adds	r3, #144	; 0x90
 800a9e0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d001      	beq.n	800a9ea <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e040      	b.n	800aa6c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	2207      	movs	r2, #7
 800a9ee:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a9f0:	7afb      	ldrb	r3, [r7, #11]
 800a9f2:	697a      	ldr	r2, [r7, #20]
 800a9f4:	2134      	movs	r1, #52	; 0x34
 800a9f6:	fb01 f303 	mul.w	r3, r1, r3
 800a9fa:	4413      	add	r3, r2
 800a9fc:	3390      	adds	r3, #144	; 0x90
 800a9fe:	2207      	movs	r2, #7
 800aa00:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800aa02:	7afb      	ldrb	r3, [r7, #11]
 800aa04:	b29a      	uxth	r2, r3
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800aa0c:	7af9      	ldrb	r1, [r7, #11]
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 fca4 	bl	800b364 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa22:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aa24:	e016      	b.n	800aa54 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	f242 7110 	movw	r1, #10000	; 0x2710
 800aa36:	fb01 f303 	mul.w	r3, r1, r3
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d805      	bhi.n	800aa4a <USBH_MSC_Write+0xa8>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d104      	bne.n	800aa54 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800aa50:	2302      	movs	r3, #2
 800aa52:	e00b      	b.n	800aa6c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800aa54:	7afb      	ldrb	r3, [r7, #11]
 800aa56:	4619      	mov	r1, r3
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f7ff fe20 	bl	800a69e <USBH_MSC_RdWrProcess>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d0e0      	beq.n	800aa26 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	2201      	movs	r2, #1
 800aa68:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2221      	movs	r2, #33	; 0x21
 800aa80:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f001 fea4 	bl	800c7ec <USBH_CtlReq>
 800aaa4:	4603      	mov	r3, r0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	22a1      	movs	r2, #161	; 0xa1
 800aabc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	22fe      	movs	r2, #254	; 0xfe
 800aac2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800aad6:	2201      	movs	r2, #1
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f001 fe86 	bl	800c7ec <USBH_CtlReq>
 800aae0:	4603      	mov	r3, r0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
	...

0800aaec <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aafa:	69db      	ldr	r3, [r3, #28]
 800aafc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <USBH_MSC_BOT_Init+0x3c>)
 800ab02:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4a09      	ldr	r2, [pc, #36]	; (800ab2c <USBH_MSC_BOT_Init+0x40>)
 800ab08:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	43425355 	.word	0x43425355
 800ab2c:	20304050 	.word	0x20304050

0800ab30 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	460b      	mov	r3, r1
 800ab3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800ab40:	2301      	movs	r3, #1
 800ab42:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800ab44:	2301      	movs	r3, #1
 800ab46:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab60:	3b01      	subs	r3, #1
 800ab62:	2b0a      	cmp	r3, #10
 800ab64:	f200 819e 	bhi.w	800aea4 <USBH_MSC_BOT_Process+0x374>
 800ab68:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <USBH_MSC_BOT_Process+0x40>)
 800ab6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6e:	bf00      	nop
 800ab70:	0800ab9d 	.word	0x0800ab9d
 800ab74:	0800abc5 	.word	0x0800abc5
 800ab78:	0800ac2f 	.word	0x0800ac2f
 800ab7c:	0800ac4d 	.word	0x0800ac4d
 800ab80:	0800acd1 	.word	0x0800acd1
 800ab84:	0800acf3 	.word	0x0800acf3
 800ab88:	0800ad8b 	.word	0x0800ad8b
 800ab8c:	0800ada7 	.word	0x0800ada7
 800ab90:	0800adf9 	.word	0x0800adf9
 800ab94:	0800ae29 	.word	0x0800ae29
 800ab98:	0800ae8b 	.word	0x0800ae8b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2202      	movs	r2, #2
 800aba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	795b      	ldrb	r3, [r3, #5]
 800abb6:	2201      	movs	r2, #1
 800abb8:	9200      	str	r2, [sp, #0]
 800abba:	221f      	movs	r2, #31
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f002 f824 	bl	800cc0a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800abc2:	e17e      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	795b      	ldrb	r3, [r3, #5]
 800abc8:	4619      	mov	r1, r3
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f002 fbae 	bl	800d32c <USBH_LL_GetURBState>
 800abd0:	4603      	mov	r3, r0
 800abd2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800abd4:	7d3b      	ldrb	r3, [r7, #20]
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d118      	bne.n	800ac0c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00f      	beq.n	800ac02 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800abe8:	b25b      	sxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	da04      	bge.n	800abf8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	2203      	movs	r2, #3
 800abf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abf6:	e157      	b.n	800aea8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2205      	movs	r2, #5
 800abfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac00:	e152      	b.n	800aea8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2207      	movs	r2, #7
 800ac06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac0a:	e14d      	b.n	800aea8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac0c:	7d3b      	ldrb	r3, [r7, #20]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d104      	bne.n	800ac1c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac1a:	e145      	b.n	800aea8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800ac1c:	7d3b      	ldrb	r3, [r7, #20]
 800ac1e:	2b05      	cmp	r3, #5
 800ac20:	f040 8142 	bne.w	800aea8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	220a      	movs	r2, #10
 800ac28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ac2c:	e13c      	b.n	800aea8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	895a      	ldrh	r2, [r3, #10]
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	791b      	ldrb	r3, [r3, #4]
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 f809 	bl	800cc54 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	2204      	movs	r2, #4
 800ac46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800ac4a:	e13a      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	791b      	ldrb	r3, [r3, #4]
 800ac50:	4619      	mov	r1, r3
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f002 fb6a 	bl	800d32c <USBH_LL_GetURBState>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ac5c:	7d3b      	ldrb	r3, [r7, #20]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d12d      	bne.n	800acbe <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	8952      	ldrh	r2, [r2, #10]
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d910      	bls.n	800ac90 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	8952      	ldrh	r2, [r2, #10]
 800ac78:	441a      	add	r2, r3
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac84:	693a      	ldr	r2, [r7, #16]
 800ac86:	8952      	ldrh	r2, [r2, #10]
 800ac88:	1a9a      	subs	r2, r3, r2
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac8e:	e002      	b.n	800ac96 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	2200      	movs	r2, #0
 800ac94:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	895a      	ldrh	r2, [r3, #10]
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	791b      	ldrb	r3, [r3, #4]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 ffd1 	bl	800cc54 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800acb2:	e0fb      	b.n	800aeac <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	2207      	movs	r2, #7
 800acb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800acbc:	e0f6      	b.n	800aeac <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800acbe:	7d3b      	ldrb	r3, [r7, #20]
 800acc0:	2b05      	cmp	r3, #5
 800acc2:	f040 80f3 	bne.w	800aeac <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	2209      	movs	r2, #9
 800acca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800acce:	e0ed      	b.n	800aeac <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	891a      	ldrh	r2, [r3, #8]
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	795b      	ldrb	r3, [r3, #5]
 800acde:	2001      	movs	r0, #1
 800ace0:	9000      	str	r0, [sp, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f001 ff91 	bl	800cc0a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2206      	movs	r2, #6
 800acec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800acf0:	e0e7      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	795b      	ldrb	r3, [r3, #5]
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f002 fb17 	bl	800d32c <USBH_LL_GetURBState>
 800acfe:	4603      	mov	r3, r0
 800ad00:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ad02:	7d3b      	ldrb	r3, [r7, #20]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d12f      	bne.n	800ad68 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	8912      	ldrh	r2, [r2, #8]
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d910      	bls.n	800ad36 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	8912      	ldrh	r2, [r2, #8]
 800ad1e:	441a      	add	r2, r3
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad2a:	693a      	ldr	r2, [r7, #16]
 800ad2c:	8912      	ldrh	r2, [r2, #8]
 800ad2e:	1a9a      	subs	r2, r3, r2
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad34:	e002      	b.n	800ad3c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00c      	beq.n	800ad5e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	891a      	ldrh	r2, [r3, #8]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	795b      	ldrb	r3, [r3, #5]
 800ad52:	2001      	movs	r0, #1
 800ad54:	9000      	str	r0, [sp, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 ff57 	bl	800cc0a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800ad5c:	e0a8      	b.n	800aeb0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	2207      	movs	r2, #7
 800ad62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad66:	e0a3      	b.n	800aeb0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad68:	7d3b      	ldrb	r3, [r7, #20]
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d104      	bne.n	800ad78 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	2205      	movs	r2, #5
 800ad72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad76:	e09b      	b.n	800aeb0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800ad78:	7d3b      	ldrb	r3, [r7, #20]
 800ad7a:	2b05      	cmp	r3, #5
 800ad7c:	f040 8098 	bne.w	800aeb0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	220a      	movs	r2, #10
 800ad84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ad88:	e092      	b.n	800aeb0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	791b      	ldrb	r3, [r3, #4]
 800ad94:	220d      	movs	r2, #13
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f001 ff5c 	bl	800cc54 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2208      	movs	r2, #8
 800ada0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ada4:	e08d      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f002 fabd 	bl	800d32c <USBH_LL_GetURBState>
 800adb2:	4603      	mov	r3, r0
 800adb4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800adb6:	7d3b      	ldrb	r3, [r7, #20]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d115      	bne.n	800ade8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f8a9 	bl	800af24 <USBH_MSC_DecodeCSW>
 800add2:	4603      	mov	r3, r0
 800add4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800add6:	7d7b      	ldrb	r3, [r7, #21]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800ade0:	e068      	b.n	800aeb4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800ade2:	2302      	movs	r3, #2
 800ade4:	75fb      	strb	r3, [r7, #23]
      break;
 800ade6:	e065      	b.n	800aeb4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800ade8:	7d3b      	ldrb	r3, [r7, #20]
 800adea:	2b05      	cmp	r3, #5
 800adec:	d162      	bne.n	800aeb4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2209      	movs	r2, #9
 800adf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800adf6:	e05d      	b.n	800aeb4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	2200      	movs	r2, #0
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f864 	bl	800aecc <USBH_MSC_BOT_Abort>
 800ae04:	4603      	mov	r3, r0
 800ae06:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ae08:	7dbb      	ldrb	r3, [r7, #22]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d104      	bne.n	800ae18 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2207      	movs	r2, #7
 800ae12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800ae16:	e04f      	b.n	800aeb8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800ae18:	7dbb      	ldrb	r3, [r7, #22]
 800ae1a:	2b04      	cmp	r3, #4
 800ae1c:	d14c      	bne.n	800aeb8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	220b      	movs	r2, #11
 800ae22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae26:	e047      	b.n	800aeb8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f84c 	bl	800aecc <USBH_MSC_BOT_Abort>
 800ae34:	4603      	mov	r3, r0
 800ae36:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800ae38:	7dbb      	ldrb	r3, [r7, #22]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d11d      	bne.n	800ae7a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	795b      	ldrb	r3, [r3, #5]
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f002 facb 	bl	800d3e0 <USBH_LL_GetToggle>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	7959      	ldrb	r1, [r3, #5]
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	f1c3 0301 	rsb	r3, r3, #1
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f002 fa8f 	bl	800d380 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	791b      	ldrb	r3, [r3, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f002 fa88 	bl	800d380 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	2209      	movs	r2, #9
 800ae74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ae78:	e020      	b.n	800aebc <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800ae7a:	7dbb      	ldrb	r3, [r7, #22]
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d11d      	bne.n	800aebc <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	220b      	movs	r2, #11
 800ae84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ae88:	e018      	b.n	800aebc <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff fdf2 	bl	800aa74 <USBH_MSC_BOT_REQ_Reset>
 800ae90:	4603      	mov	r3, r0
 800ae92:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d112      	bne.n	800aec0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800aea2:	e00d      	b.n	800aec0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800aea4:	bf00      	nop
 800aea6:	e00c      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aea8:	bf00      	nop
 800aeaa:	e00a      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aeac:	bf00      	nop
 800aeae:	e008      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aeb0:	bf00      	nop
 800aeb2:	e006      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aeb4:	bf00      	nop
 800aeb6:	e004      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aeb8:	bf00      	nop
 800aeba:	e002      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aebc:	bf00      	nop
 800aebe:	e000      	b.n	800aec2 <USBH_MSC_BOT_Process+0x392>
      break;
 800aec0:	bf00      	nop
  }
  return status;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
 800aed8:	4613      	mov	r3, r2
 800aeda:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aedc:	2302      	movs	r3, #2
 800aede:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee6:	69db      	ldr	r3, [r3, #28]
 800aee8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aeea:	78bb      	ldrb	r3, [r7, #2]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <USBH_MSC_BOT_Abort+0x2a>
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d009      	beq.n	800af08 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aef4:	e011      	b.n	800af1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	79db      	ldrb	r3, [r3, #7]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f001 f9a8 	bl	800c252 <USBH_ClrFeature>
 800af02:	4603      	mov	r3, r0
 800af04:	73fb      	strb	r3, [r7, #15]
      break;
 800af06:	e008      	b.n	800af1a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	799b      	ldrb	r3, [r3, #6]
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f001 f99f 	bl	800c252 <USBH_ClrFeature>
 800af14:	4603      	mov	r3, r0
 800af16:	73fb      	strb	r3, [r7, #15]
      break;
 800af18:	bf00      	nop
  }
  return status;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af32:	69db      	ldr	r3, [r3, #28]
 800af34:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800af36:	2301      	movs	r3, #1
 800af38:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	791b      	ldrb	r3, [r3, #4]
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f002 f961 	bl	800d208 <USBH_LL_GetLastXferSize>
 800af46:	4603      	mov	r3, r0
 800af48:	2b0d      	cmp	r3, #13
 800af4a:	d002      	beq.n	800af52 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800af4c:	2302      	movs	r3, #2
 800af4e:	73fb      	strb	r3, [r7, #15]
 800af50:	e024      	b.n	800af9c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af56:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <USBH_MSC_DecodeCSW+0x84>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d11d      	bne.n	800af98 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af64:	429a      	cmp	r2, r3
 800af66:	d119      	bne.n	800af9c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800af72:	2300      	movs	r3, #0
 800af74:	73fb      	strb	r3, [r7, #15]
 800af76:	e011      	b.n	800af9c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d102      	bne.n	800af88 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800af82:	2301      	movs	r3, #1
 800af84:	73fb      	strb	r3, [r7, #15]
 800af86:	e009      	b.n	800af9c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d104      	bne.n	800af9c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800af92:	2302      	movs	r3, #2
 800af94:	73fb      	strb	r3, [r7, #15]
 800af96:	e001      	b.n	800af9c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800af98:	2302      	movs	r3, #2
 800af9a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	53425355 	.word	0x53425355

0800afac <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800afb8:	2302      	movs	r3, #2
 800afba:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afc2:	69db      	ldr	r3, [r3, #28]
 800afc4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d002      	beq.n	800afd6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d021      	beq.n	800b018 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afd4:	e028      	b.n	800b028 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2200      	movs	r2, #0
 800afda:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	220a      	movs	r2, #10
 800afe8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3363      	adds	r3, #99	; 0x63
 800aff0:	2210      	movs	r2, #16
 800aff2:	2100      	movs	r1, #0
 800aff4:	4618      	mov	r0, r3
 800aff6:	f002 fac3 	bl	800d580 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2202      	movs	r2, #2
 800b00e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b012:	2301      	movs	r3, #1
 800b014:	73fb      	strb	r3, [r7, #15]
      break;
 800b016:	e007      	b.n	800b028 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b018:	78fb      	ldrb	r3, [r7, #3]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff fd87 	bl	800ab30 <USBH_MSC_BOT_Process>
 800b022:	4603      	mov	r3, r0
 800b024:	73fb      	strb	r3, [r7, #15]
      break;
 800b026:	bf00      	nop
  }

  return error;
 800b028:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b086      	sub	sp, #24
 800b036:	af00      	add	r7, sp, #0
 800b038:	60f8      	str	r0, [r7, #12]
 800b03a:	460b      	mov	r3, r1
 800b03c:	607a      	str	r2, [r7, #4]
 800b03e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b040:	2301      	movs	r3, #1
 800b042:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b04a:	69db      	ldr	r3, [r3, #28]
 800b04c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b054:	2b01      	cmp	r3, #1
 800b056:	d002      	beq.n	800b05e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d027      	beq.n	800b0ac <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b05c:	e05f      	b.n	800b11e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	2208      	movs	r2, #8
 800b062:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	2280      	movs	r2, #128	; 0x80
 800b068:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	220a      	movs	r2, #10
 800b070:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	3363      	adds	r3, #99	; 0x63
 800b078:	2210      	movs	r2, #16
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f002 fa7f 	bl	800d580 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	2225      	movs	r2, #37	; 0x25
 800b086:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2202      	movs	r2, #2
 800b096:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f103 0210 	add.w	r2, r3, #16
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0aa:	e038      	b.n	800b11e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b0ac:	7afb      	ldrb	r3, [r7, #11]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7ff fd3d 	bl	800ab30 <USBH_MSC_BOT_Process>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b0ba:	7dfb      	ldrb	r3, [r7, #23]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d12d      	bne.n	800b11c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0c6:	3303      	adds	r3, #3
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d2:	3302      	adds	r3, #2
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	021b      	lsls	r3, r3, #8
 800b0d8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b0e6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	061b      	lsls	r3, r3, #24
 800b0f2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0fe:	3307      	adds	r3, #7
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	b29a      	uxth	r2, r3
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b10a:	3306      	adds	r3, #6
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	b29b      	uxth	r3, r3
 800b114:	4313      	orrs	r3, r2
 800b116:	b29a      	uxth	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	809a      	strh	r2, [r3, #4]
      break;
 800b11c:	bf00      	nop
  }

  return error;
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	460b      	mov	r3, r1
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b136:	2302      	movs	r3, #2
 800b138:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d002      	beq.n	800b154 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d03d      	beq.n	800b1ce <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b152:	e089      	b.n	800b268 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	2224      	movs	r2, #36	; 0x24
 800b158:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2280      	movs	r2, #128	; 0x80
 800b15e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	220a      	movs	r2, #10
 800b166:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	3363      	adds	r3, #99	; 0x63
 800b16e:	220a      	movs	r2, #10
 800b170:	2100      	movs	r1, #0
 800b172:	4618      	mov	r0, r3
 800b174:	f002 fa04 	bl	800d580 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2212      	movs	r2, #18
 800b17c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b180:	7afb      	ldrb	r3, [r7, #11]
 800b182:	015b      	lsls	r3, r3, #5
 800b184:	b2da      	uxtb	r2, r3
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	2224      	movs	r2, #36	; 0x24
 800b1a0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f103 0210 	add.w	r2, r3, #16
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	75fb      	strb	r3, [r7, #23]
      break;
 800b1cc:	e04c      	b.n	800b268 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b1ce:	7afb      	ldrb	r3, [r7, #11]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f7ff fcac 	bl	800ab30 <USBH_MSC_BOT_Process>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d141      	bne.n	800b266 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b1e2:	2222      	movs	r2, #34	; 0x22
 800b1e4:	2100      	movs	r1, #0
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f002 f9ca 	bl	800d580 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	f003 031f 	and.w	r3, r3, #31
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	095b      	lsrs	r3, r3, #5
 800b208:	b2da      	uxtb	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b214:	3301      	adds	r3, #1
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	b25b      	sxtb	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	da03      	bge.n	800b226 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	709a      	strb	r2, [r3, #2]
 800b224:	e002      	b.n	800b22c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	1cd8      	adds	r0, r3, #3
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b236:	3308      	adds	r3, #8
 800b238:	2208      	movs	r2, #8
 800b23a:	4619      	mov	r1, r3
 800b23c:	f002 f992 	bl	800d564 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f103 000c 	add.w	r0, r3, #12
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b24c:	3310      	adds	r3, #16
 800b24e:	2210      	movs	r2, #16
 800b250:	4619      	mov	r1, r3
 800b252:	f002 f987 	bl	800d564 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	331d      	adds	r3, #29
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b260:	3220      	adds	r2, #32
 800b262:	6812      	ldr	r2, [r2, #0]
 800b264:	601a      	str	r2, [r3, #0]
      break;
 800b266:	bf00      	nop
  }

  return error;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b086      	sub	sp, #24
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	460b      	mov	r3, r1
 800b27c:	607a      	str	r2, [r7, #4]
 800b27e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b280:	2302      	movs	r3, #2
 800b282:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b294:	2b01      	cmp	r3, #1
 800b296:	d002      	beq.n	800b29e <USBH_MSC_SCSI_RequestSense+0x2c>
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d03d      	beq.n	800b318 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b29c:	e05d      	b.n	800b35a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	220e      	movs	r2, #14
 800b2a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2280      	movs	r2, #128	; 0x80
 800b2a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	220a      	movs	r2, #10
 800b2b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	3363      	adds	r3, #99	; 0x63
 800b2b8:	2210      	movs	r2, #16
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f002 f95f 	bl	800d580 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	015b      	lsls	r3, r3, #5
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	220e      	movs	r2, #14
 800b2ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2202      	movs	r2, #2
 800b302:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	f103 0210 	add.w	r2, r3, #16
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b312:	2301      	movs	r3, #1
 800b314:	75fb      	strb	r3, [r7, #23]
      break;
 800b316:	e020      	b.n	800b35a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	4619      	mov	r1, r3
 800b31c:	68f8      	ldr	r0, [r7, #12]
 800b31e:	f7ff fc07 	bl	800ab30 <USBH_MSC_BOT_Process>
 800b322:	4603      	mov	r3, r0
 800b324:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b326:	7dfb      	ldrb	r3, [r7, #23]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d115      	bne.n	800b358 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b332:	3302      	adds	r3, #2
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b346:	7b1a      	ldrb	r2, [r3, #12]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b352:	7b5a      	ldrb	r2, [r3, #13]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	709a      	strb	r2, [r3, #2]
      break;
 800b358:	bf00      	nop
  }

  return error;
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	607a      	str	r2, [r7, #4]
 800b36e:	603b      	str	r3, [r7, #0]
 800b370:	460b      	mov	r3, r1
 800b372:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b374:	2302      	movs	r3, #2
 800b376:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b37e:	69db      	ldr	r3, [r3, #28]
 800b380:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d002      	beq.n	800b392 <USBH_MSC_SCSI_Write+0x2e>
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d047      	beq.n	800b420 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b390:	e04e      	b.n	800b430 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b398:	461a      	mov	r2, r3
 800b39a:	6a3b      	ldr	r3, [r7, #32]
 800b39c:	fb03 f202 	mul.w	r2, r3, r2
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	3363      	adds	r3, #99	; 0x63
 800b3b8:	2210      	movs	r2, #16
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f002 f8df 	bl	800d580 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	222a      	movs	r2, #42	; 0x2a
 800b3c6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b3ca:	79fa      	ldrb	r2, [r7, #7]
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b3d2:	79ba      	ldrb	r2, [r7, #6]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b3da:	797a      	ldrb	r2, [r7, #5]
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b3e2:	1d3b      	adds	r3, r7, #4
 800b3e4:	781a      	ldrb	r2, [r3, #0]
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b3ec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b3f6:	f107 0320 	add.w	r3, r7, #32
 800b3fa:	781a      	ldrb	r2, [r3, #0]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	2201      	movs	r2, #1
 800b406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2202      	movs	r2, #2
 800b40e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	683a      	ldr	r2, [r7, #0]
 800b416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b41a:	2301      	movs	r3, #1
 800b41c:	75fb      	strb	r3, [r7, #23]
      break;
 800b41e:	e007      	b.n	800b430 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b420:	7afb      	ldrb	r3, [r7, #11]
 800b422:	4619      	mov	r1, r3
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7ff fb83 	bl	800ab30 <USBH_MSC_BOT_Process>
 800b42a:	4603      	mov	r3, r0
 800b42c:	75fb      	strb	r3, [r7, #23]
      break;
 800b42e:	bf00      	nop
  }

  return error;
 800b430:	7dfb      	ldrb	r3, [r7, #23]
}
 800b432:	4618      	mov	r0, r3
 800b434:	3718      	adds	r7, #24
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}

0800b43a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
 800b446:	460b      	mov	r3, r1
 800b448:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b44a:	2302      	movs	r3, #2
 800b44c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d002      	beq.n	800b468 <USBH_MSC_SCSI_Read+0x2e>
 800b462:	2b02      	cmp	r3, #2
 800b464:	d047      	beq.n	800b4f6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b466:	e04e      	b.n	800b506 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b46e:	461a      	mov	r2, r3
 800b470:	6a3b      	ldr	r3, [r7, #32]
 800b472:	fb03 f202 	mul.w	r2, r3, r2
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2280      	movs	r2, #128	; 0x80
 800b47e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	220a      	movs	r2, #10
 800b486:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	3363      	adds	r3, #99	; 0x63
 800b48e:	2210      	movs	r2, #16
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f002 f874 	bl	800d580 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	2228      	movs	r2, #40	; 0x28
 800b49c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b4a0:	79fa      	ldrb	r2, [r7, #7]
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b4a8:	79ba      	ldrb	r2, [r7, #6]
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b4b0:	797a      	ldrb	r2, [r7, #5]
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b4b8:	1d3b      	adds	r3, r7, #4
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b4c2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b4cc:	f107 0320 	add.w	r3, r7, #32
 800b4d0:	781a      	ldrb	r2, [r3, #0]
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2202      	movs	r2, #2
 800b4e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b4e8:	693b      	ldr	r3, [r7, #16]
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f4:	e007      	b.n	800b506 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f7ff fb18 	bl	800ab30 <USBH_MSC_BOT_Process>
 800b500:	4603      	mov	r3, r0
 800b502:	75fb      	strb	r3, [r7, #23]
      break;
 800b504:	bf00      	nop
  }

  return error;
 800b506:	7dfb      	ldrb	r3, [r7, #23]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3718      	adds	r7, #24
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	60b9      	str	r1, [r7, #8]
 800b51a:	4613      	mov	r3, r2
 800b51c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b524:	2302      	movs	r3, #2
 800b526:	e029      	b.n	800b57c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	79fa      	ldrb	r2, [r7, #7]
 800b52c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f000 f81f 	bl	800b584 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f001 fd89 	bl	800d08c <USBH_LL_Init>

  return USBH_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b58c:	2300      	movs	r3, #0
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	e009      	b.n	800b5aa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	33e0      	adds	r3, #224	; 0xe0
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b0f      	cmp	r3, #15
 800b5ae:	d9f2      	bls.n	800b596 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
 800b5b4:	e009      	b.n	800b5ca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5d0:	d3f1      	bcc.n	800b5b6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2240      	movs	r2, #64	; 0x40
 800b5f6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2200      	movs	r2, #0
 800b602:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3714      	adds	r7, #20
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b636:	2300      	movs	r3, #0
 800b638:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d016      	beq.n	800b66e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10e      	bne.n	800b668 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b650:	1c59      	adds	r1, r3, #1
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	33de      	adds	r3, #222	; 0xde
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	73fb      	strb	r3, [r7, #15]
 800b666:	e004      	b.n	800b672 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b668:	2302      	movs	r3, #2
 800b66a:	73fb      	strb	r3, [r7, #15]
 800b66c:	e001      	b.n	800b672 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b66e:	2302      	movs	r3, #2
 800b670:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3714      	adds	r7, #20
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b696:	78fa      	ldrb	r2, [r7, #3]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d204      	bcs.n	800b6a6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	78fa      	ldrb	r2, [r7, #3]
 800b6a0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b6a4:	e001      	b.n	800b6aa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	4611      	mov	r1, r2
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	70fb      	strb	r3, [r7, #3]
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	70bb      	strb	r3, [r7, #2]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b6e0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6e2:	e025      	b.n	800b730 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b6e4:	7dfb      	ldrb	r3, [r7, #23]
 800b6e6:	221a      	movs	r2, #26
 800b6e8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	3302      	adds	r3, #2
 800b6f4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	795b      	ldrb	r3, [r3, #5]
 800b6fa:	78fa      	ldrb	r2, [r7, #3]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d002      	beq.n	800b706 <USBH_FindInterface+0x4e>
 800b700:	78fb      	ldrb	r3, [r7, #3]
 800b702:	2bff      	cmp	r3, #255	; 0xff
 800b704:	d111      	bne.n	800b72a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b70a:	78ba      	ldrb	r2, [r7, #2]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d002      	beq.n	800b716 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b710:	78bb      	ldrb	r3, [r7, #2]
 800b712:	2bff      	cmp	r3, #255	; 0xff
 800b714:	d109      	bne.n	800b72a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b71a:	787a      	ldrb	r2, [r7, #1]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d002      	beq.n	800b726 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b720:	787b      	ldrb	r3, [r7, #1]
 800b722:	2bff      	cmp	r3, #255	; 0xff
 800b724:	d101      	bne.n	800b72a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	e006      	b.n	800b738 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	3301      	adds	r3, #1
 800b72e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	2b01      	cmp	r3, #1
 800b734:	d9d6      	bls.n	800b6e4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b736:	23ff      	movs	r3, #255	; 0xff
}
 800b738:	4618      	mov	r0, r3
 800b73a:	371c      	adds	r7, #28
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f001 fce3 	bl	800d118 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b752:	2101      	movs	r1, #1
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 fdfc 	bl	800d352 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b75a:	2300      	movs	r3, #0
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b088      	sub	sp, #32
 800b768:	af04      	add	r7, sp, #16
 800b76a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b76c:	2302      	movs	r3, #2
 800b76e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d102      	bne.n	800b786 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2203      	movs	r2, #3
 800b784:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b0b      	cmp	r3, #11
 800b78e:	f200 81be 	bhi.w	800bb0e <USBH_Process+0x3aa>
 800b792:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <USBH_Process+0x34>)
 800b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b798:	0800b7c9 	.word	0x0800b7c9
 800b79c:	0800b7fb 	.word	0x0800b7fb
 800b7a0:	0800b863 	.word	0x0800b863
 800b7a4:	0800baa9 	.word	0x0800baa9
 800b7a8:	0800bb0f 	.word	0x0800bb0f
 800b7ac:	0800b907 	.word	0x0800b907
 800b7b0:	0800ba4f 	.word	0x0800ba4f
 800b7b4:	0800b93d 	.word	0x0800b93d
 800b7b8:	0800b95d 	.word	0x0800b95d
 800b7bc:	0800b97d 	.word	0x0800b97d
 800b7c0:	0800b9c1 	.word	0x0800b9c1
 800b7c4:	0800ba91 	.word	0x0800ba91
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 819e 	beq.w	800bb12 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b7dc:	20c8      	movs	r0, #200	; 0xc8
 800b7de:	f001 fe2f 	bl	800d440 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 fcf5 	bl	800d1d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b7f8:	e18b      	b.n	800bb12 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b800:	2b01      	cmp	r3, #1
 800b802:	d107      	bne.n	800b814 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b812:	e18d      	b.n	800bb30 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b81a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b81e:	d914      	bls.n	800b84a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b826:	3301      	adds	r3, #1
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b836:	2b03      	cmp	r3, #3
 800b838:	d903      	bls.n	800b842 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	220d      	movs	r2, #13
 800b83e:	701a      	strb	r2, [r3, #0]
      break;
 800b840:	e176      	b.n	800bb30 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	701a      	strb	r2, [r3, #0]
      break;
 800b848:	e172      	b.n	800bb30 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b850:	f103 020a 	add.w	r2, r3, #10
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b85a:	200a      	movs	r0, #10
 800b85c:	f001 fdf0 	bl	800d440 <USBH_Delay>
      break;
 800b860:	e166      	b.n	800bb30 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d005      	beq.n	800b878 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b872:	2104      	movs	r1, #4
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b878:	2064      	movs	r0, #100	; 0x64
 800b87a:	f001 fde1 	bl	800d440 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f001 fc80 	bl	800d184 <USBH_LL_GetSpeed>
 800b884:	4603      	mov	r3, r0
 800b886:	461a      	mov	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2205      	movs	r2, #5
 800b892:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b894:	2100      	movs	r1, #0
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 fa29 	bl	800ccee <USBH_AllocPipe>
 800b89c:	4603      	mov	r3, r0
 800b89e:	461a      	mov	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b8a4:	2180      	movs	r1, #128	; 0x80
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f001 fa21 	bl	800ccee <USBH_AllocPipe>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7919      	ldrb	r1, [r3, #4]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b8c8:	b292      	uxth	r2, r2
 800b8ca:	9202      	str	r2, [sp, #8]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	9201      	str	r2, [sp, #4]
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2280      	movs	r2, #128	; 0x80
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f001 f9da 	bl	800cc90 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	7959      	ldrb	r1, [r3, #5]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b8f0:	b292      	uxth	r2, r2
 800b8f2:	9202      	str	r2, [sp, #8]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	9201      	str	r2, [sp, #4]
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f001 f9c6 	bl	800cc90 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b904:	e114      	b.n	800bb30 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f918 	bl	800bb3c <USBH_HandleEnum>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b910:	7bbb      	ldrb	r3, [r7, #14]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 80fe 	bne.w	800bb16 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d103      	bne.n	800b934 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2208      	movs	r2, #8
 800b930:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b932:	e0f0      	b.n	800bb16 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2207      	movs	r2, #7
 800b938:	701a      	strb	r2, [r3, #0]
      break;
 800b93a:	e0ec      	b.n	800bb16 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 80e9 	beq.w	800bb1a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b94e:	2101      	movs	r1, #1
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2208      	movs	r2, #8
 800b958:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b95a:	e0de      	b.n	800bb1a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b962:	b29b      	uxth	r3, r3
 800b964:	4619      	mov	r1, r3
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fc2c 	bl	800c1c4 <USBH_SetCfg>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f040 80d5 	bne.w	800bb1e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2209      	movs	r2, #9
 800b978:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b97a:	e0d0      	b.n	800bb1e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b982:	f003 0320 	and.w	r3, r3, #32
 800b986:	2b00      	cmp	r3, #0
 800b988:	d016      	beq.n	800b9b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b98a:	2101      	movs	r1, #1
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fc3c 	bl	800c20a <USBH_SetFeature>
 800b992:	4603      	mov	r3, r0
 800b994:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d103      	bne.n	800b9a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	220a      	movs	r2, #10
 800b9a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b9a4:	e0bd      	b.n	800bb22 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	2b03      	cmp	r3, #3
 800b9ac:	f040 80b9 	bne.w	800bb22 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	220a      	movs	r2, #10
 800b9b4:	701a      	strb	r2, [r3, #0]
      break;
 800b9b6:	e0b4      	b.n	800bb22 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	220a      	movs	r2, #10
 800b9bc:	701a      	strb	r2, [r3, #0]
      break;
 800b9be:	e0b0      	b.n	800bb22 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 80ad 	beq.w	800bb26 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73fb      	strb	r3, [r7, #15]
 800b9d8:	e016      	b.n	800ba08 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b9da:	7bfa      	ldrb	r2, [r7, #15]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	32de      	adds	r2, #222	; 0xde
 800b9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e4:	791a      	ldrb	r2, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d108      	bne.n	800ba02 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b9f0:	7bfa      	ldrb	r2, [r7, #15]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	32de      	adds	r2, #222	; 0xde
 800b9f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ba00:	e005      	b.n	800ba0e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	3301      	adds	r3, #1
 800ba06:	73fb      	strb	r3, [r7, #15]
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0e5      	beq.n	800b9da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d016      	beq.n	800ba46 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	4798      	blx	r3
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2206      	movs	r2, #6
 800ba2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba36:	2103      	movs	r1, #3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba3c:	e073      	b.n	800bb26 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	220d      	movs	r2, #13
 800ba42:	701a      	strb	r2, [r3, #0]
      break;
 800ba44:	e06f      	b.n	800bb26 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	220d      	movs	r2, #13
 800ba4a:	701a      	strb	r2, [r3, #0]
      break;
 800ba4c:	e06b      	b.n	800bb26 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d017      	beq.n	800ba88 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	4798      	blx	r3
 800ba64:	4603      	mov	r3, r0
 800ba66:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d103      	bne.n	800ba78 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	220b      	movs	r2, #11
 800ba74:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba76:	e058      	b.n	800bb2a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d154      	bne.n	800bb2a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	220d      	movs	r2, #13
 800ba84:	701a      	strb	r2, [r3, #0]
      break;
 800ba86:	e050      	b.n	800bb2a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	220d      	movs	r2, #13
 800ba8c:	701a      	strb	r2, [r3, #0]
      break;
 800ba8e:	e04c      	b.n	800bb2a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d049      	beq.n	800bb2e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
      }
      break;
 800baa6:	e042      	b.n	800bb2e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff fd67 	bl	800b584 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2200      	movs	r2, #0
 800bad0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bae4:	2105      	movs	r1, #5
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d107      	bne.n	800bb06 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f7ff fe20 	bl	800b744 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb04:	e014      	b.n	800bb30 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f001 fb06 	bl	800d118 <USBH_LL_Start>
      break;
 800bb0c:	e010      	b.n	800bb30 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800bb0e:	bf00      	nop
 800bb10:	e00e      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb12:	bf00      	nop
 800bb14:	e00c      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb16:	bf00      	nop
 800bb18:	e00a      	b.n	800bb30 <USBH_Process+0x3cc>
    break;
 800bb1a:	bf00      	nop
 800bb1c:	e008      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb1e:	bf00      	nop
 800bb20:	e006      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb22:	bf00      	nop
 800bb24:	e004      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb26:	bf00      	nop
 800bb28:	e002      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb2a:	bf00      	nop
 800bb2c:	e000      	b.n	800bb30 <USBH_Process+0x3cc>
      break;
 800bb2e:	bf00      	nop
  }
  return USBH_OK;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop

0800bb3c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af04      	add	r7, sp, #16
 800bb42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bb44:	2301      	movs	r3, #1
 800bb46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	2b07      	cmp	r3, #7
 800bb52:	f200 81c1 	bhi.w	800bed8 <USBH_HandleEnum+0x39c>
 800bb56:	a201      	add	r2, pc, #4	; (adr r2, 800bb5c <USBH_HandleEnum+0x20>)
 800bb58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5c:	0800bb7d 	.word	0x0800bb7d
 800bb60:	0800bc3b 	.word	0x0800bc3b
 800bb64:	0800bca5 	.word	0x0800bca5
 800bb68:	0800bd33 	.word	0x0800bd33
 800bb6c:	0800bd9d 	.word	0x0800bd9d
 800bb70:	0800be0d 	.word	0x0800be0d
 800bb74:	0800be53 	.word	0x0800be53
 800bb78:	0800be99 	.word	0x0800be99
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bb7c:	2108      	movs	r1, #8
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fa50 	bl	800c024 <USBH_Get_DevDesc>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d130      	bne.n	800bbf0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	7919      	ldrb	r1, [r3, #4]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bbb2:	b292      	uxth	r2, r2
 800bbb4:	9202      	str	r2, [sp, #8]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	9201      	str	r2, [sp, #4]
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	2280      	movs	r2, #128	; 0x80
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f001 f865 	bl	800cc90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	7959      	ldrb	r1, [r3, #5]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bbda:	b292      	uxth	r2, r2
 800bbdc:	9202      	str	r2, [sp, #8]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	9201      	str	r2, [sp, #4]
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f001 f851 	bl	800cc90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bbee:	e175      	b.n	800bedc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	f040 8172 	bne.w	800bedc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bbfe:	3301      	adds	r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc0e:	2b03      	cmp	r3, #3
 800bc10:	d903      	bls.n	800bc1a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	220d      	movs	r2, #13
 800bc16:	701a      	strb	r2, [r3, #0]
      break;
 800bc18:	e160      	b.n	800bedc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	795b      	ldrb	r3, [r3, #5]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f885 	bl	800cd30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	791b      	ldrb	r3, [r3, #4]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f001 f87f 	bl	800cd30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]
      break;
 800bc38:	e150      	b.n	800bedc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bc3a:	2112      	movs	r1, #18
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f9f1 	bl	800c024 <USBH_Get_DevDesc>
 800bc42:	4603      	mov	r3, r0
 800bc44:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2202      	movs	r2, #2
 800bc50:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bc52:	e145      	b.n	800bee0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b03      	cmp	r3, #3
 800bc58:	f040 8142 	bne.w	800bee0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc62:	3301      	adds	r3, #1
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d903      	bls.n	800bc7e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	220d      	movs	r2, #13
 800bc7a:	701a      	strb	r2, [r3, #0]
      break;
 800bc7c:	e130      	b.n	800bee0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	795b      	ldrb	r3, [r3, #5]
 800bc82:	4619      	mov	r1, r3
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f001 f853 	bl	800cd30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	791b      	ldrb	r3, [r3, #4]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f84d 	bl	800cd30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	701a      	strb	r2, [r3, #0]
      break;
 800bca2:	e11d      	b.n	800bee0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bca4:	2101      	movs	r1, #1
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa68 	bl	800c17c <USBH_SetAddress>
 800bcac:	4603      	mov	r3, r0
 800bcae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bcb0:	7bbb      	ldrb	r3, [r7, #14]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d132      	bne.n	800bd1c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bcb6:	2002      	movs	r0, #2
 800bcb8:	f001 fbc2 	bl	800d440 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2203      	movs	r2, #3
 800bcc8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7919      	ldrb	r1, [r3, #4]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bcde:	b292      	uxth	r2, r2
 800bce0:	9202      	str	r2, [sp, #8]
 800bce2:	2200      	movs	r2, #0
 800bce4:	9201      	str	r2, [sp, #4]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	4603      	mov	r3, r0
 800bcea:	2280      	movs	r2, #128	; 0x80
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 ffcf 	bl	800cc90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	7959      	ldrb	r1, [r3, #5]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bd06:	b292      	uxth	r2, r2
 800bd08:	9202      	str	r2, [sp, #8]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	9201      	str	r2, [sp, #4]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	4603      	mov	r3, r0
 800bd12:	2200      	movs	r2, #0
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 ffbb 	bl	800cc90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bd1a:	e0e3      	b.n	800bee4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd1c:	7bbb      	ldrb	r3, [r7, #14]
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	f040 80e0 	bne.w	800bee4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	220d      	movs	r2, #13
 800bd28:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	705a      	strb	r2, [r3, #1]
      break;
 800bd30:	e0d8      	b.n	800bee4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bd32:	2109      	movs	r1, #9
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 f99d 	bl	800c074 <USBH_Get_CfgDesc>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d103      	bne.n	800bd4c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2204      	movs	r2, #4
 800bd48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd4a:	e0cd      	b.n	800bee8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	f040 80ca 	bne.w	800bee8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d903      	bls.n	800bd76 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	220d      	movs	r2, #13
 800bd72:	701a      	strb	r2, [r3, #0]
      break;
 800bd74:	e0b8      	b.n	800bee8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	795b      	ldrb	r3, [r3, #5]
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f000 ffd7 	bl	800cd30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	791b      	ldrb	r3, [r3, #4]
 800bd86:	4619      	mov	r1, r3
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f000 ffd1 	bl	800cd30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	701a      	strb	r2, [r3, #0]
      break;
 800bd9a:	e0a5      	b.n	800bee8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f965 	bl	800c074 <USBH_Get_CfgDesc>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d103      	bne.n	800bdbc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2205      	movs	r2, #5
 800bdb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bdba:	e097      	b.n	800beec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	2b03      	cmp	r3, #3
 800bdc0:	f040 8094 	bne.w	800beec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdca:	3301      	adds	r3, #1
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d903      	bls.n	800bde6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	220d      	movs	r2, #13
 800bde2:	701a      	strb	r2, [r3, #0]
      break;
 800bde4:	e082      	b.n	800beec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	795b      	ldrb	r3, [r3, #5]
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 ff9f 	bl	800cd30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	791b      	ldrb	r3, [r3, #4]
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 ff99 	bl	800cd30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	701a      	strb	r2, [r3, #0]
      break;
 800be0a:	e06f      	b.n	800beec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800be12:	2b00      	cmp	r3, #0
 800be14:	d019      	beq.n	800be4a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800be22:	23ff      	movs	r3, #255	; 0xff
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f949 	bl	800c0bc <USBH_Get_StringDesc>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be2e:	7bbb      	ldrb	r3, [r7, #14]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2206      	movs	r2, #6
 800be38:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be3a:	e059      	b.n	800bef0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d156      	bne.n	800bef0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2206      	movs	r2, #6
 800be46:	705a      	strb	r2, [r3, #1]
      break;
 800be48:	e052      	b.n	800bef0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2206      	movs	r2, #6
 800be4e:	705a      	strb	r2, [r3, #1]
      break;
 800be50:	e04e      	b.n	800bef0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d019      	beq.n	800be90 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800be68:	23ff      	movs	r3, #255	; 0xff
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f926 	bl	800c0bc <USBH_Get_StringDesc>
 800be70:	4603      	mov	r3, r0
 800be72:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800be74:	7bbb      	ldrb	r3, [r7, #14]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d103      	bne.n	800be82 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2207      	movs	r2, #7
 800be7e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800be80:	e038      	b.n	800bef4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be82:	7bbb      	ldrb	r3, [r7, #14]
 800be84:	2b03      	cmp	r3, #3
 800be86:	d135      	bne.n	800bef4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2207      	movs	r2, #7
 800be8c:	705a      	strb	r2, [r3, #1]
      break;
 800be8e:	e031      	b.n	800bef4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2207      	movs	r2, #7
 800be94:	705a      	strb	r2, [r3, #1]
      break;
 800be96:	e02d      	b.n	800bef4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d017      	beq.n	800bed2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800beae:	23ff      	movs	r3, #255	; 0xff
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f903 	bl	800c0bc <USBH_Get_StringDesc>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800bec4:	e018      	b.n	800bef8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bec6:	7bbb      	ldrb	r3, [r7, #14]
 800bec8:	2b03      	cmp	r3, #3
 800beca:	d115      	bne.n	800bef8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
      break;
 800bed0:	e012      	b.n	800bef8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800bed2:	2300      	movs	r3, #0
 800bed4:	73fb      	strb	r3, [r7, #15]
      break;
 800bed6:	e00f      	b.n	800bef8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800bed8:	bf00      	nop
 800beda:	e00e      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bedc:	bf00      	nop
 800bede:	e00c      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bee0:	bf00      	nop
 800bee2:	e00a      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bee4:	bf00      	nop
 800bee6:	e008      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bee8:	bf00      	nop
 800beea:	e006      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800beec:	bf00      	nop
 800beee:	e004      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bef0:	bf00      	nop
 800bef2:	e002      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bef4:	bf00      	nop
 800bef6:	e000      	b.n	800befa <USBH_HandleEnum+0x3be>
      break;
 800bef8:	bf00      	nop
  }
  return Status;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	683a      	ldr	r2, [r7, #0]
 800bf12:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800bf16:	bf00      	nop
 800bf18:	370c      	adds	r7, #12
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr

0800bf22 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bf30:	1c5a      	adds	r2, r3, #1
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f804 	bl	800bf46 <USBH_HandleSof>
}
 800bf3e:	bf00      	nop
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}

0800bf46 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b082      	sub	sp, #8
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b0b      	cmp	r3, #11
 800bf56:	d10a      	bne.n	800bf6e <USBH_HandleSof+0x28>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d005      	beq.n	800bf6e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	4798      	blx	r3
  }
}
 800bf6e:	bf00      	nop
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b083      	sub	sp, #12
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800bf86:	bf00      	nop
}
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bfa2:	bf00      	nop
}
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr

0800bfae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b083      	sub	sp, #12
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b082      	sub	sp, #8
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 f8a6 	bl	800d14e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	791b      	ldrb	r3, [r3, #4]
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 fe91 	bl	800cd30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	795b      	ldrb	r3, [r3, #5]
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fe8b 	bl	800cd30 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b086      	sub	sp, #24
 800c028:	af02      	add	r7, sp, #8
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	b29b      	uxth	r3, r3
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	4613      	mov	r3, r2
 800c03e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c042:	2100      	movs	r1, #0
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 f864 	bl	800c112 <USBH_GetDescriptor>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10a      	bne.n	800c06a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c060:	78fa      	ldrb	r2, [r7, #3]
 800c062:	b292      	uxth	r2, r2
 800c064:	4619      	mov	r1, r3
 800c066:	f000 f918 	bl	800c29a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af02      	add	r7, sp, #8
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	331c      	adds	r3, #28
 800c084:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c086:	887b      	ldrh	r3, [r7, #2]
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c090:	2100      	movs	r1, #0
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f83d 	bl	800c112 <USBH_GetDescriptor>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d107      	bne.n	800c0b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c0a2:	887b      	ldrh	r3, [r7, #2]
 800c0a4:	461a      	mov	r2, r3
 800c0a6:	68b9      	ldr	r1, [r7, #8]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f987 	bl	800c3bc <USBH_ParseCfgDesc>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3710      	adds	r7, #16
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af02      	add	r7, sp, #8
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	72fb      	strb	r3, [r7, #11]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c0d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c0e0:	893b      	ldrh	r3, [r7, #8]
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 f812 	bl	800c112 <USBH_GetDescriptor>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d107      	bne.n	800c108 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c0fe:	893a      	ldrh	r2, [r7, #8]
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	4618      	mov	r0, r3
 800c104:	f000 fb24 	bl	800c750 <USBH_ParseStringDesc>
  }

  return status;
 800c108:	7dfb      	ldrb	r3, [r7, #23]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3718      	adds	r7, #24
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b084      	sub	sp, #16
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	607b      	str	r3, [r7, #4]
 800c11c:	460b      	mov	r3, r1
 800c11e:	72fb      	strb	r3, [r7, #11]
 800c120:	4613      	mov	r3, r2
 800c122:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	789b      	ldrb	r3, [r3, #2]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d11c      	bne.n	800c166 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c12c:	7afb      	ldrb	r3, [r7, #11]
 800c12e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c132:	b2da      	uxtb	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2206      	movs	r2, #6
 800c13c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	893a      	ldrh	r2, [r7, #8]
 800c142:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c144:	893b      	ldrh	r3, [r7, #8]
 800c146:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c14a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c14e:	d104      	bne.n	800c15a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f240 4209 	movw	r2, #1033	; 0x409
 800c156:	829a      	strh	r2, [r3, #20]
 800c158:	e002      	b.n	800c160 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	8b3a      	ldrh	r2, [r7, #24]
 800c164:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c166:	8b3b      	ldrh	r3, [r7, #24]
 800c168:	461a      	mov	r2, r3
 800c16a:	6879      	ldr	r1, [r7, #4]
 800c16c:	68f8      	ldr	r0, [r7, #12]
 800c16e:	f000 fb3d 	bl	800c7ec <USBH_CtlReq>
 800c172:	4603      	mov	r3, r0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3710      	adds	r7, #16
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	789b      	ldrb	r3, [r3, #2]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d10f      	bne.n	800c1b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2205      	movs	r2, #5
 800c19a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c19c:	78fb      	ldrb	r3, [r7, #3]
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	2100      	movs	r1, #0
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fb19 	bl	800c7ec <USBH_CtlReq>
 800c1ba:	4603      	mov	r3, r0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	789b      	ldrb	r3, [r3, #2]
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d10e      	bne.n	800c1f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2209      	movs	r2, #9
 800c1e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	887a      	ldrh	r2, [r7, #2]
 800c1e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 faf6 	bl	800c7ec <USBH_CtlReq>
 800c200:	4603      	mov	r3, r0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	460b      	mov	r3, r1
 800c214:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	789b      	ldrb	r3, [r3, #2]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d10f      	bne.n	800c23e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2203      	movs	r2, #3
 800c228:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c22a:	78fb      	ldrb	r3, [r7, #3]
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c23e:	2200      	movs	r2, #0
 800c240:	2100      	movs	r1, #0
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fad2 	bl	800c7ec <USBH_CtlReq>
 800c248:	4603      	mov	r3, r0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	460b      	mov	r3, r1
 800c25c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	789b      	ldrb	r3, [r3, #2]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d10f      	bne.n	800c286 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2202      	movs	r2, #2
 800c26a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2201      	movs	r2, #1
 800c270:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c278:	78fb      	ldrb	r3, [r7, #3]
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c286:	2200      	movs	r2, #0
 800c288:	2100      	movs	r1, #0
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 faae 	bl	800c7ec <USBH_CtlReq>
 800c290:	4603      	mov	r3, r0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c29a:	b480      	push	{r7}
 800c29c:	b085      	sub	sp, #20
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	781a      	ldrb	r2, [r3, #0]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	785a      	ldrb	r2, [r3, #1]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	3302      	adds	r3, #2
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	3303      	adds	r3, #3
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	021b      	lsls	r3, r3, #8
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	b29a      	uxth	r2, r3
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	791a      	ldrb	r2, [r3, #4]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	795a      	ldrb	r2, [r3, #5]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	799a      	ldrb	r2, [r3, #6]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	79da      	ldrb	r2, [r3, #7]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	79db      	ldrb	r3, [r3, #7]
 800c2f8:	2b20      	cmp	r3, #32
 800c2fa:	dc11      	bgt.n	800c320 <USBH_ParseDevDesc+0x86>
 800c2fc:	2b08      	cmp	r3, #8
 800c2fe:	db16      	blt.n	800c32e <USBH_ParseDevDesc+0x94>
 800c300:	3b08      	subs	r3, #8
 800c302:	2201      	movs	r2, #1
 800c304:	fa02 f303 	lsl.w	r3, r2, r3
 800c308:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c30c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c310:	2b00      	cmp	r3, #0
 800c312:	bf14      	ite	ne
 800c314:	2301      	movne	r3, #1
 800c316:	2300      	moveq	r3, #0
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d102      	bne.n	800c324 <USBH_ParseDevDesc+0x8a>
 800c31e:	e006      	b.n	800c32e <USBH_ParseDevDesc+0x94>
 800c320:	2b40      	cmp	r3, #64	; 0x40
 800c322:	d104      	bne.n	800c32e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	79da      	ldrb	r2, [r3, #7]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	71da      	strb	r2, [r3, #7]
      break;
 800c32c:	e003      	b.n	800c336 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2240      	movs	r2, #64	; 0x40
 800c332:	71da      	strb	r2, [r3, #7]
      break;
 800c334:	bf00      	nop
  }

  if (length > 8U)
 800c336:	88fb      	ldrh	r3, [r7, #6]
 800c338:	2b08      	cmp	r3, #8
 800c33a:	d939      	bls.n	800c3b0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3308      	adds	r3, #8
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	b29a      	uxth	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3309      	adds	r3, #9
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	021b      	lsls	r3, r3, #8
 800c34e:	b29b      	uxth	r3, r3
 800c350:	4313      	orrs	r3, r2
 800c352:	b29a      	uxth	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	330a      	adds	r3, #10
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	b29a      	uxth	r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	330b      	adds	r3, #11
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b29b      	uxth	r3, r3
 800c368:	021b      	lsls	r3, r3, #8
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	4313      	orrs	r3, r2
 800c36e:	b29a      	uxth	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	330c      	adds	r3, #12
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	330d      	adds	r3, #13
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	b29b      	uxth	r3, r3
 800c384:	021b      	lsls	r3, r3, #8
 800c386:	b29b      	uxth	r3, r3
 800c388:	4313      	orrs	r3, r2
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	7b9a      	ldrb	r2, [r3, #14]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	7bda      	ldrb	r2, [r3, #15]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	7c1a      	ldrb	r2, [r3, #16]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	7c5a      	ldrb	r2, [r3, #17]
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	745a      	strb	r2, [r3, #17]
  }
}
 800c3b0:	bf00      	nop
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b08c      	sub	sp, #48	; 0x30
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	60b9      	str	r1, [r7, #8]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c3d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	785a      	ldrb	r2, [r3, #1]
 800c3f8:	6a3b      	ldr	r3, [r7, #32]
 800c3fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	3302      	adds	r3, #2
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	b29a      	uxth	r2, r3
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	3303      	adds	r3, #3
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	021b      	lsls	r3, r3, #8
 800c40e:	b29b      	uxth	r3, r3
 800c410:	4313      	orrs	r3, r2
 800c412:	b29b      	uxth	r3, r3
 800c414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c418:	bf28      	it	cs
 800c41a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c41e:	b29a      	uxth	r2, r3
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	791a      	ldrb	r2, [r3, #4]
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	795a      	ldrb	r2, [r3, #5]
 800c430:	6a3b      	ldr	r3, [r7, #32]
 800c432:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	799a      	ldrb	r2, [r3, #6]
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	79da      	ldrb	r2, [r3, #7]
 800c440:	6a3b      	ldr	r3, [r7, #32]
 800c442:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	7a1a      	ldrb	r2, [r3, #8]
 800c448:	6a3b      	ldr	r3, [r7, #32]
 800c44a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c44c:	6a3b      	ldr	r3, [r7, #32]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b09      	cmp	r3, #9
 800c452:	d002      	beq.n	800c45a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	2209      	movs	r2, #9
 800c458:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c45a:	88fb      	ldrh	r3, [r7, #6]
 800c45c:	2b09      	cmp	r3, #9
 800c45e:	f240 809d 	bls.w	800c59c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c462:	2309      	movs	r3, #9
 800c464:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c466:	2300      	movs	r3, #0
 800c468:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c46a:	e081      	b.n	800c570 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c46c:	f107 0316 	add.w	r3, r7, #22
 800c470:	4619      	mov	r1, r3
 800c472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c474:	f000 f99f 	bl	800c7b6 <USBH_GetNextDesc>
 800c478:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47c:	785b      	ldrb	r3, [r3, #1]
 800c47e:	2b04      	cmp	r3, #4
 800c480:	d176      	bne.n	800c570 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	2b09      	cmp	r3, #9
 800c488:	d002      	beq.n	800c490 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48c:	2209      	movs	r2, #9
 800c48e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c494:	221a      	movs	r2, #26
 800c496:	fb02 f303 	mul.w	r3, r2, r3
 800c49a:	3308      	adds	r3, #8
 800c49c:	6a3a      	ldr	r2, [r7, #32]
 800c49e:	4413      	add	r3, r2
 800c4a0:	3302      	adds	r3, #2
 800c4a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c4a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4a6:	69f8      	ldr	r0, [r7, #28]
 800c4a8:	f000 f87e 	bl	800c5a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c4b6:	e043      	b.n	800c540 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c4b8:	f107 0316 	add.w	r3, r7, #22
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4c0:	f000 f979 	bl	800c7b6 <USBH_GetNextDesc>
 800c4c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	2b05      	cmp	r3, #5
 800c4cc:	d138      	bne.n	800c540 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	795b      	ldrb	r3, [r3, #5]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d10f      	bne.n	800c4f6 <USBH_ParseCfgDesc+0x13a>
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	799b      	ldrb	r3, [r3, #6]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d10b      	bne.n	800c4f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	79db      	ldrb	r3, [r3, #7]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10f      	bne.n	800c506 <USBH_ParseCfgDesc+0x14a>
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b09      	cmp	r3, #9
 800c4ec:	d00b      	beq.n	800c506 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f0:	2209      	movs	r2, #9
 800c4f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c4f4:	e007      	b.n	800c506 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	2b07      	cmp	r3, #7
 800c4fc:	d004      	beq.n	800c508 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c500:	2207      	movs	r2, #7
 800c502:	701a      	strb	r2, [r3, #0]
 800c504:	e000      	b.n	800c508 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c506:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c50c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c510:	3201      	adds	r2, #1
 800c512:	00d2      	lsls	r2, r2, #3
 800c514:	211a      	movs	r1, #26
 800c516:	fb01 f303 	mul.w	r3, r1, r3
 800c51a:	4413      	add	r3, r2
 800c51c:	3308      	adds	r3, #8
 800c51e:	6a3a      	ldr	r2, [r7, #32]
 800c520:	4413      	add	r3, r2
 800c522:	3304      	adds	r3, #4
 800c524:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c528:	69b9      	ldr	r1, [r7, #24]
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	f000 f86b 	bl	800c606 <USBH_ParseEPDesc>
 800c530:	4603      	mov	r3, r0
 800c532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c53a:	3301      	adds	r3, #1
 800c53c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	791b      	ldrb	r3, [r3, #4]
 800c544:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c548:	429a      	cmp	r2, r3
 800c54a:	d204      	bcs.n	800c556 <USBH_ParseCfgDesc+0x19a>
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	885a      	ldrh	r2, [r3, #2]
 800c550:	8afb      	ldrh	r3, [r7, #22]
 800c552:	429a      	cmp	r2, r3
 800c554:	d8b0      	bhi.n	800c4b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	791b      	ldrb	r3, [r3, #4]
 800c55a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c55e:	429a      	cmp	r2, r3
 800c560:	d201      	bcs.n	800c566 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c562:	2303      	movs	r3, #3
 800c564:	e01c      	b.n	800c5a0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c56a:	3301      	adds	r3, #1
 800c56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c574:	2b01      	cmp	r3, #1
 800c576:	d805      	bhi.n	800c584 <USBH_ParseCfgDesc+0x1c8>
 800c578:	6a3b      	ldr	r3, [r7, #32]
 800c57a:	885a      	ldrh	r2, [r3, #2]
 800c57c:	8afb      	ldrh	r3, [r7, #22]
 800c57e:	429a      	cmp	r2, r3
 800c580:	f63f af74 	bhi.w	800c46c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c584:	6a3b      	ldr	r3, [r7, #32]
 800c586:	791b      	ldrb	r3, [r3, #4]
 800c588:	2b02      	cmp	r3, #2
 800c58a:	bf28      	it	cs
 800c58c:	2302      	movcs	r3, #2
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c594:	429a      	cmp	r2, r3
 800c596:	d201      	bcs.n	800c59c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c598:	2303      	movs	r3, #3
 800c59a:	e001      	b.n	800c5a0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c59c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3730      	adds	r7, #48	; 0x30
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}

0800c5a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	785a      	ldrb	r2, [r3, #1]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	789a      	ldrb	r2, [r3, #2]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	78da      	ldrb	r2, [r3, #3]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	791a      	ldrb	r2, [r3, #4]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	795a      	ldrb	r2, [r3, #5]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	799a      	ldrb	r2, [r3, #6]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	79da      	ldrb	r2, [r3, #7]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	7a1a      	ldrb	r2, [r3, #8]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	721a      	strb	r2, [r3, #8]
}
 800c5fa:	bf00      	nop
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c606:	b480      	push	{r7}
 800c608:	b087      	sub	sp, #28
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	60b9      	str	r1, [r7, #8]
 800c610:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	785a      	ldrb	r2, [r3, #1]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	789a      	ldrb	r2, [r3, #2]
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	78da      	ldrb	r2, [r3, #3]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3304      	adds	r3, #4
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3305      	adds	r3, #5
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	b29b      	uxth	r3, r3
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	b29b      	uxth	r3, r3
 800c64a:	4313      	orrs	r3, r2
 800c64c:	b29a      	uxth	r2, r3
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	799a      	ldrb	r2, [r3, #6]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	889b      	ldrh	r3, [r3, #4]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c662:	2303      	movs	r3, #3
 800c664:	75fb      	strb	r3, [r7, #23]
 800c666:	e033      	b.n	800c6d0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	889b      	ldrh	r3, [r3, #4]
 800c66c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c670:	f023 0307 	bic.w	r3, r3, #7
 800c674:	b29a      	uxth	r2, r3
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	889b      	ldrh	r3, [r3, #4]
 800c67e:	b21a      	sxth	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3304      	adds	r3, #4
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	b299      	uxth	r1, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3305      	adds	r3, #5
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	b29b      	uxth	r3, r3
 800c690:	021b      	lsls	r3, r3, #8
 800c692:	b29b      	uxth	r3, r3
 800c694:	430b      	orrs	r3, r1
 800c696:	b29b      	uxth	r3, r3
 800c698:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d110      	bne.n	800c6c2 <USBH_ParseEPDesc+0xbc>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3304      	adds	r3, #4
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	b299      	uxth	r1, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3305      	adds	r3, #5
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	b21b      	sxth	r3, r3
 800c6ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6be:	b21b      	sxth	r3, r3
 800c6c0:	e001      	b.n	800c6c6 <USBH_ParseEPDesc+0xc0>
 800c6c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	b21b      	sxth	r3, r3
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d116      	bne.n	800c708 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	78db      	ldrb	r3, [r3, #3]
 800c6de:	f003 0303 	and.w	r3, r3, #3
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d005      	beq.n	800c6f2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	78db      	ldrb	r3, [r3, #3]
 800c6ea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d127      	bne.n	800c742 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	799b      	ldrb	r3, [r3, #6]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d003      	beq.n	800c702 <USBH_ParseEPDesc+0xfc>
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	799b      	ldrb	r3, [r3, #6]
 800c6fe:	2b10      	cmp	r3, #16
 800c700:	d91f      	bls.n	800c742 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c702:	2303      	movs	r3, #3
 800c704:	75fb      	strb	r3, [r7, #23]
 800c706:	e01c      	b.n	800c742 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	78db      	ldrb	r3, [r3, #3]
 800c70c:	f003 0303 	and.w	r3, r3, #3
 800c710:	2b01      	cmp	r3, #1
 800c712:	d10a      	bne.n	800c72a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	799b      	ldrb	r3, [r3, #6]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <USBH_ParseEPDesc+0x11e>
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	799b      	ldrb	r3, [r3, #6]
 800c720:	2b10      	cmp	r3, #16
 800c722:	d90e      	bls.n	800c742 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c724:	2303      	movs	r3, #3
 800c726:	75fb      	strb	r3, [r7, #23]
 800c728:	e00b      	b.n	800c742 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	78db      	ldrb	r3, [r3, #3]
 800c72e:	f003 0303 	and.w	r3, r3, #3
 800c732:	2b03      	cmp	r3, #3
 800c734:	d105      	bne.n	800c742 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	799b      	ldrb	r3, [r3, #6]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d101      	bne.n	800c742 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c73e:	2303      	movs	r3, #3
 800c740:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c742:	7dfb      	ldrb	r3, [r7, #23]
}
 800c744:	4618      	mov	r0, r3
 800c746:	371c      	adds	r7, #28
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	4613      	mov	r3, r2
 800c75c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3301      	adds	r3, #1
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b03      	cmp	r3, #3
 800c766:	d120      	bne.n	800c7aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	1e9a      	subs	r2, r3, #2
 800c76e:	88fb      	ldrh	r3, [r7, #6]
 800c770:	4293      	cmp	r3, r2
 800c772:	bf28      	it	cs
 800c774:	4613      	movcs	r3, r2
 800c776:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	3302      	adds	r3, #2
 800c77c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c77e:	2300      	movs	r3, #0
 800c780:	82fb      	strh	r3, [r7, #22]
 800c782:	e00b      	b.n	800c79c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c784:	8afb      	ldrh	r3, [r7, #22]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	4413      	add	r3, r2
 800c78a:	781a      	ldrb	r2, [r3, #0]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	3301      	adds	r3, #1
 800c794:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c796:	8afb      	ldrh	r3, [r7, #22]
 800c798:	3302      	adds	r3, #2
 800c79a:	82fb      	strh	r3, [r7, #22]
 800c79c:	8afa      	ldrh	r2, [r7, #22]
 800c79e:	8abb      	ldrh	r3, [r7, #20]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d3ef      	bcc.n	800c784 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	701a      	strb	r2, [r3, #0]
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	371c      	adds	r7, #28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	881a      	ldrh	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4413      	add	r3, r2
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4413      	add	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7de:	68fb      	ldr	r3, [r7, #12]
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3714      	adds	r7, #20
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	789b      	ldrb	r3, [r3, #2]
 800c802:	2b01      	cmp	r3, #1
 800c804:	d002      	beq.n	800c80c <USBH_CtlReq+0x20>
 800c806:	2b02      	cmp	r3, #2
 800c808:	d00f      	beq.n	800c82a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c80a:	e027      	b.n	800c85c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	88fa      	ldrh	r2, [r7, #6]
 800c816:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2202      	movs	r2, #2
 800c822:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c824:	2301      	movs	r3, #1
 800c826:	75fb      	strb	r3, [r7, #23]
      break;
 800c828:	e018      	b.n	800c85c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 f81c 	bl	800c868 <USBH_HandleControl>
 800c830:	4603      	mov	r3, r0
 800c832:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c834:	7dfb      	ldrb	r3, [r7, #23]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <USBH_CtlReq+0x54>
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	2b03      	cmp	r3, #3
 800c83e:	d106      	bne.n	800c84e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2201      	movs	r2, #1
 800c844:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	2200      	movs	r2, #0
 800c84a:	761a      	strb	r2, [r3, #24]
      break;
 800c84c:	e005      	b.n	800c85a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d102      	bne.n	800c85a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2201      	movs	r2, #1
 800c858:	709a      	strb	r2, [r3, #2]
      break;
 800c85a:	bf00      	nop
  }
  return status;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
	...

0800c868 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af02      	add	r7, sp, #8
 800c86e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c870:	2301      	movs	r3, #1
 800c872:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c874:	2300      	movs	r3, #0
 800c876:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	7e1b      	ldrb	r3, [r3, #24]
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b0a      	cmp	r3, #10
 800c880:	f200 8156 	bhi.w	800cb30 <USBH_HandleControl+0x2c8>
 800c884:	a201      	add	r2, pc, #4	; (adr r2, 800c88c <USBH_HandleControl+0x24>)
 800c886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88a:	bf00      	nop
 800c88c:	0800c8b9 	.word	0x0800c8b9
 800c890:	0800c8d3 	.word	0x0800c8d3
 800c894:	0800c93d 	.word	0x0800c93d
 800c898:	0800c963 	.word	0x0800c963
 800c89c:	0800c99b 	.word	0x0800c99b
 800c8a0:	0800c9c5 	.word	0x0800c9c5
 800c8a4:	0800ca17 	.word	0x0800ca17
 800c8a8:	0800ca39 	.word	0x0800ca39
 800c8ac:	0800ca75 	.word	0x0800ca75
 800c8b0:	0800ca9b 	.word	0x0800ca9b
 800c8b4:	0800cad9 	.word	0x0800cad9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f103 0110 	add.w	r1, r3, #16
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	795b      	ldrb	r3, [r3, #5]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f943 	bl	800cb50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	761a      	strb	r2, [r3, #24]
      break;
 800c8d0:	e139      	b.n	800cb46 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	795b      	ldrb	r3, [r3, #5]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fd27 	bl	800d32c <USBH_LL_GetURBState>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d11e      	bne.n	800c926 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	7c1b      	ldrb	r3, [r3, #16]
 800c8ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	8adb      	ldrh	r3, [r3, #22]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c8fa:	7b7b      	ldrb	r3, [r7, #13]
 800c8fc:	2b80      	cmp	r3, #128	; 0x80
 800c8fe:	d103      	bne.n	800c908 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2203      	movs	r2, #3
 800c904:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c906:	e115      	b.n	800cb34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2205      	movs	r2, #5
 800c90c:	761a      	strb	r2, [r3, #24]
      break;
 800c90e:	e111      	b.n	800cb34 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c910:	7b7b      	ldrb	r3, [r7, #13]
 800c912:	2b80      	cmp	r3, #128	; 0x80
 800c914:	d103      	bne.n	800c91e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2209      	movs	r2, #9
 800c91a:	761a      	strb	r2, [r3, #24]
      break;
 800c91c:	e10a      	b.n	800cb34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2207      	movs	r2, #7
 800c922:	761a      	strb	r2, [r3, #24]
      break;
 800c924:	e106      	b.n	800cb34 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	2b04      	cmp	r3, #4
 800c92a:	d003      	beq.n	800c934 <USBH_HandleControl+0xcc>
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	f040 8100 	bne.w	800cb34 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	220b      	movs	r2, #11
 800c938:	761a      	strb	r2, [r3, #24]
      break;
 800c93a:	e0fb      	b.n	800cb34 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c942:	b29a      	uxth	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6899      	ldr	r1, [r3, #8]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	899a      	ldrh	r2, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	791b      	ldrb	r3, [r3, #4]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f93a 	bl	800cbce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2204      	movs	r2, #4
 800c95e:	761a      	strb	r2, [r3, #24]
      break;
 800c960:	e0f1      	b.n	800cb46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	791b      	ldrb	r3, [r3, #4]
 800c966:	4619      	mov	r1, r3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 fcdf 	bl	800d32c <USBH_LL_GetURBState>
 800c96e:	4603      	mov	r3, r0
 800c970:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c972:	7bbb      	ldrb	r3, [r7, #14]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d102      	bne.n	800c97e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2209      	movs	r2, #9
 800c97c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c97e:	7bbb      	ldrb	r3, [r7, #14]
 800c980:	2b05      	cmp	r3, #5
 800c982:	d102      	bne.n	800c98a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c984:	2303      	movs	r3, #3
 800c986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c988:	e0d6      	b.n	800cb38 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c98a:	7bbb      	ldrb	r3, [r7, #14]
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	f040 80d3 	bne.w	800cb38 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	220b      	movs	r2, #11
 800c996:	761a      	strb	r2, [r3, #24]
      break;
 800c998:	e0ce      	b.n	800cb38 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6899      	ldr	r1, [r3, #8]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	899a      	ldrh	r2, [r3, #12]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	795b      	ldrb	r3, [r3, #5]
 800c9a6:	2001      	movs	r0, #1
 800c9a8:	9000      	str	r0, [sp, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f8ea 	bl	800cb84 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2206      	movs	r2, #6
 800c9c0:	761a      	strb	r2, [r3, #24]
      break;
 800c9c2:	e0c0      	b.n	800cb46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	795b      	ldrb	r3, [r3, #5]
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fcae 	bl	800d32c <USBH_LL_GetURBState>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c9d4:	7bbb      	ldrb	r3, [r7, #14]
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d103      	bne.n	800c9e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2207      	movs	r2, #7
 800c9de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9e0:	e0ac      	b.n	800cb3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	2b05      	cmp	r3, #5
 800c9e6:	d105      	bne.n	800c9f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	220c      	movs	r2, #12
 800c9ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f2:	e0a3      	b.n	800cb3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d103      	bne.n	800ca02 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2205      	movs	r2, #5
 800c9fe:	761a      	strb	r2, [r3, #24]
      break;
 800ca00:	e09c      	b.n	800cb3c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ca02:	7bbb      	ldrb	r3, [r7, #14]
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	f040 8099 	bne.w	800cb3c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	220b      	movs	r2, #11
 800ca0e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ca10:	2302      	movs	r3, #2
 800ca12:	73fb      	strb	r3, [r7, #15]
      break;
 800ca14:	e092      	b.n	800cb3c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	791b      	ldrb	r3, [r3, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f8d5 	bl	800cbce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2208      	movs	r2, #8
 800ca34:	761a      	strb	r2, [r3, #24]

      break;
 800ca36:	e086      	b.n	800cb46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	791b      	ldrb	r3, [r3, #4]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fc74 	bl	800d32c <USBH_LL_GetURBState>
 800ca44:	4603      	mov	r3, r0
 800ca46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ca48:	7bbb      	ldrb	r3, [r7, #14]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d105      	bne.n	800ca5a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	220d      	movs	r2, #13
 800ca52:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ca58:	e072      	b.n	800cb40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	2b04      	cmp	r3, #4
 800ca5e:	d103      	bne.n	800ca68 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	220b      	movs	r2, #11
 800ca64:	761a      	strb	r2, [r3, #24]
      break;
 800ca66:	e06b      	b.n	800cb40 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ca68:	7bbb      	ldrb	r3, [r7, #14]
 800ca6a:	2b05      	cmp	r3, #5
 800ca6c:	d168      	bne.n	800cb40 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ca6e:	2303      	movs	r3, #3
 800ca70:	73fb      	strb	r3, [r7, #15]
      break;
 800ca72:	e065      	b.n	800cb40 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	795b      	ldrb	r3, [r3, #5]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	9200      	str	r2, [sp, #0]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	2100      	movs	r1, #0
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f87f 	bl	800cb84 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	220a      	movs	r2, #10
 800ca96:	761a      	strb	r2, [r3, #24]
      break;
 800ca98:	e055      	b.n	800cb46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	795b      	ldrb	r3, [r3, #5]
 800ca9e:	4619      	mov	r1, r3
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fc43 	bl	800d32c <USBH_LL_GetURBState>
 800caa6:	4603      	mov	r3, r0
 800caa8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800caaa:	7bbb      	ldrb	r3, [r7, #14]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d105      	bne.n	800cabc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800cab0:	2300      	movs	r3, #0
 800cab2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	220d      	movs	r2, #13
 800cab8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800caba:	e043      	b.n	800cb44 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d103      	bne.n	800caca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2209      	movs	r2, #9
 800cac6:	761a      	strb	r2, [r3, #24]
      break;
 800cac8:	e03c      	b.n	800cb44 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d139      	bne.n	800cb44 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	220b      	movs	r2, #11
 800cad4:	761a      	strb	r2, [r3, #24]
      break;
 800cad6:	e035      	b.n	800cb44 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7e5b      	ldrb	r3, [r3, #25]
 800cadc:	3301      	adds	r3, #1
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	765a      	strb	r2, [r3, #25]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	7e5b      	ldrb	r3, [r3, #25]
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d806      	bhi.n	800cafa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2201      	movs	r2, #1
 800caf6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800caf8:	e025      	b.n	800cb46 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb00:	2106      	movs	r1, #6
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	795b      	ldrb	r3, [r3, #5]
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f90c 	bl	800cd30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	791b      	ldrb	r3, [r3, #4]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f906 	bl	800cd30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb2e:	e00a      	b.n	800cb46 <USBH_HandleControl+0x2de>

    default:
      break;
 800cb30:	bf00      	nop
 800cb32:	e008      	b.n	800cb46 <USBH_HandleControl+0x2de>
      break;
 800cb34:	bf00      	nop
 800cb36:	e006      	b.n	800cb46 <USBH_HandleControl+0x2de>
      break;
 800cb38:	bf00      	nop
 800cb3a:	e004      	b.n	800cb46 <USBH_HandleControl+0x2de>
      break;
 800cb3c:	bf00      	nop
 800cb3e:	e002      	b.n	800cb46 <USBH_HandleControl+0x2de>
      break;
 800cb40:	bf00      	nop
 800cb42:	e000      	b.n	800cb46 <USBH_HandleControl+0x2de>
      break;
 800cb44:	bf00      	nop
  }

  return status;
 800cb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af04      	add	r7, sp, #16
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cb5e:	79f9      	ldrb	r1, [r7, #7]
 800cb60:	2300      	movs	r3, #0
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	2308      	movs	r3, #8
 800cb66:	9302      	str	r3, [sp, #8]
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	2300      	movs	r3, #0
 800cb72:	2200      	movs	r2, #0
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 fba8 	bl	800d2ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af04      	add	r7, sp, #16
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4611      	mov	r1, r2
 800cb90:	461a      	mov	r2, r3
 800cb92:	460b      	mov	r3, r1
 800cb94:	80fb      	strh	r3, [r7, #6]
 800cb96:	4613      	mov	r3, r2
 800cb98:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cba4:	2300      	movs	r3, #0
 800cba6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cba8:	7979      	ldrb	r1, [r7, #5]
 800cbaa:	7e3b      	ldrb	r3, [r7, #24]
 800cbac:	9303      	str	r3, [sp, #12]
 800cbae:	88fb      	ldrh	r3, [r7, #6]
 800cbb0:	9302      	str	r3, [sp, #8]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	2300      	movs	r3, #0
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f000 fb83 	bl	800d2ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b088      	sub	sp, #32
 800cbd2:	af04      	add	r7, sp, #16
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	4611      	mov	r1, r2
 800cbda:	461a      	mov	r2, r3
 800cbdc:	460b      	mov	r3, r1
 800cbde:	80fb      	strh	r3, [r7, #6]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cbe4:	7979      	ldrb	r1, [r7, #5]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	9303      	str	r3, [sp, #12]
 800cbea:	88fb      	ldrh	r3, [r7, #6]
 800cbec:	9302      	str	r3, [sp, #8]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	68f8      	ldr	r0, [r7, #12]
 800cbfc:	f000 fb65 	bl	800d2ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cc00:	2300      	movs	r3, #0

}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cc0a:	b580      	push	{r7, lr}
 800cc0c:	b088      	sub	sp, #32
 800cc0e:	af04      	add	r7, sp, #16
 800cc10:	60f8      	str	r0, [r7, #12]
 800cc12:	60b9      	str	r1, [r7, #8]
 800cc14:	4611      	mov	r1, r2
 800cc16:	461a      	mov	r2, r3
 800cc18:	460b      	mov	r3, r1
 800cc1a:	80fb      	strh	r3, [r7, #6]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc2e:	7979      	ldrb	r1, [r7, #5]
 800cc30:	7e3b      	ldrb	r3, [r7, #24]
 800cc32:	9303      	str	r3, [sp, #12]
 800cc34:	88fb      	ldrh	r3, [r7, #6]
 800cc36:	9302      	str	r3, [sp, #8]
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2302      	movs	r3, #2
 800cc42:	2200      	movs	r2, #0
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 fb40 	bl	800d2ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af04      	add	r7, sp, #16
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	461a      	mov	r2, r3
 800cc62:	460b      	mov	r3, r1
 800cc64:	80fb      	strh	r3, [r7, #6]
 800cc66:	4613      	mov	r3, r2
 800cc68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cc6a:	7979      	ldrb	r1, [r7, #5]
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	88fb      	ldrh	r3, [r7, #6]
 800cc72:	9302      	str	r3, [sp, #8]
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	2301      	movs	r3, #1
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	2201      	movs	r2, #1
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f000 fb22 	bl	800d2ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cc86:	2300      	movs	r3, #0
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af04      	add	r7, sp, #16
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	4608      	mov	r0, r1
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	461a      	mov	r2, r3
 800cc9e:	4603      	mov	r3, r0
 800cca0:	70fb      	strb	r3, [r7, #3]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70bb      	strb	r3, [r7, #2]
 800cca6:	4613      	mov	r3, r2
 800cca8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ccaa:	7878      	ldrb	r0, [r7, #1]
 800ccac:	78ba      	ldrb	r2, [r7, #2]
 800ccae:	78f9      	ldrb	r1, [r7, #3]
 800ccb0:	8b3b      	ldrh	r3, [r7, #24]
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	7d3b      	ldrb	r3, [r7, #20]
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	7c3b      	ldrb	r3, [r7, #16]
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fab5 	bl	800d22e <USBH_LL_OpenPipe>

  return USBH_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b082      	sub	sp, #8
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	6078      	str	r0, [r7, #4]
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ccda:	78fb      	ldrb	r3, [r7, #3]
 800ccdc:	4619      	mov	r1, r3
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 fad4 	bl	800d28c <USBH_LL_ClosePipe>

  return USBH_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b084      	sub	sp, #16
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f836 	bl	800cd6c <USBH_GetFreePipe>
 800cd00:	4603      	mov	r3, r0
 800cd02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800cd04:	89fb      	ldrh	r3, [r7, #14]
 800cd06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d00a      	beq.n	800cd24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800cd0e:	78fa      	ldrb	r2, [r7, #3]
 800cd10:	89fb      	ldrh	r3, [r7, #14]
 800cd12:	f003 030f 	and.w	r3, r3, #15
 800cd16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	33e0      	adds	r3, #224	; 0xe0
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	440b      	add	r3, r1
 800cd22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800cd24:	89fb      	ldrh	r3, [r7, #14]
 800cd26:	b2db      	uxtb	r3, r3
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800cd3c:	78fb      	ldrb	r3, [r7, #3]
 800cd3e:	2b0f      	cmp	r3, #15
 800cd40:	d80d      	bhi.n	800cd5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800cd42:	78fb      	ldrb	r3, [r7, #3]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	33e0      	adds	r3, #224	; 0xe0
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	78fb      	ldrb	r3, [r7, #3]
 800cd50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800cd54:	6879      	ldr	r1, [r7, #4]
 800cd56:	33e0      	adds	r3, #224	; 0xe0
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800cd74:	2300      	movs	r3, #0
 800cd76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]
 800cd7c:	e00f      	b.n	800cd9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	33e0      	adds	r3, #224	; 0xe0
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d102      	bne.n	800cd98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	e007      	b.n	800cda8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	73fb      	strb	r3, [r7, #15]
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
 800cda0:	2b0f      	cmp	r3, #15
 800cda2:	d9ec      	bls.n	800cd7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800cda4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b087      	sub	sp, #28
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cdca:	4b1f      	ldr	r3, [pc, #124]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cdcc:	7a5b      	ldrb	r3, [r3, #9]
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d131      	bne.n	800ce38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cdd4:	4b1c      	ldr	r3, [pc, #112]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cdd6:	7a5b      	ldrb	r3, [r3, #9]
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	461a      	mov	r2, r3
 800cddc:	4b1a      	ldr	r3, [pc, #104]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cdde:	2100      	movs	r1, #0
 800cde0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cde2:	4b19      	ldr	r3, [pc, #100]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cde4:	7a5b      	ldrb	r3, [r3, #9]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	4a17      	ldr	r2, [pc, #92]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	68fa      	ldr	r2, [r7, #12]
 800cdf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cdf2:	4b15      	ldr	r3, [pc, #84]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cdf4:	7a5b      	ldrb	r3, [r3, #9]
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800cdfc:	4413      	add	r3, r2
 800cdfe:	79fa      	ldrb	r2, [r7, #7]
 800ce00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ce02:	4b11      	ldr	r3, [pc, #68]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800ce04:	7a5b      	ldrb	r3, [r3, #9]
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	1c5a      	adds	r2, r3, #1
 800ce0a:	b2d1      	uxtb	r1, r2
 800ce0c:	4a0e      	ldr	r2, [pc, #56]	; (800ce48 <FATFS_LinkDriverEx+0x94>)
 800ce0e:	7251      	strb	r1, [r2, #9]
 800ce10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce12:	7dbb      	ldrb	r3, [r7, #22]
 800ce14:	3330      	adds	r3, #48	; 0x30
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	223a      	movs	r2, #58	; 0x3a
 800ce22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	3302      	adds	r3, #2
 800ce28:	222f      	movs	r2, #47	; 0x2f
 800ce2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	3303      	adds	r3, #3
 800ce30:	2200      	movs	r2, #0
 800ce32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce34:	2300      	movs	r3, #0
 800ce36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	200032fc 	.word	0x200032fc

0800ce4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce56:	2200      	movs	r2, #0
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff ffaa 	bl	800cdb4 <FATFS_LinkDriverEx>
 800ce60:	4603      	mov	r3, r0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
	...

0800ce6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ce70:	2200      	movs	r2, #0
 800ce72:	490e      	ldr	r1, [pc, #56]	; (800ceac <MX_USB_HOST_Init+0x40>)
 800ce74:	480e      	ldr	r0, [pc, #56]	; (800ceb0 <MX_USB_HOST_Init+0x44>)
 800ce76:	f7fe fb4b 	bl	800b510 <USBH_Init>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d001      	beq.n	800ce84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ce80:	f7f5 fa22 	bl	80022c8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800ce84:	490b      	ldr	r1, [pc, #44]	; (800ceb4 <MX_USB_HOST_Init+0x48>)
 800ce86:	480a      	ldr	r0, [pc, #40]	; (800ceb0 <MX_USB_HOST_Init+0x44>)
 800ce88:	f7fe fbd0 	bl	800b62c <USBH_RegisterClass>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ce92:	f7f5 fa19 	bl	80022c8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ce96:	4806      	ldr	r0, [pc, #24]	; (800ceb0 <MX_USB_HOST_Init+0x44>)
 800ce98:	f7fe fc54 	bl	800b744 <USBH_Start>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cea2:	f7f5 fa11 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cea6:	bf00      	nop
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	0800cecd 	.word	0x0800cecd
 800ceb0:	20003308 	.word	0x20003308
 800ceb4:	20000010 	.word	0x20000010

0800ceb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800cebc:	4802      	ldr	r0, [pc, #8]	; (800cec8 <MX_USB_HOST_Process+0x10>)
 800cebe:	f7fe fc51 	bl	800b764 <USBH_Process>
}
 800cec2:	bf00      	nop
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20003308 	.word	0x20003308

0800cecc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	3b01      	subs	r3, #1
 800cedc:	2b04      	cmp	r3, #4
 800cede:	d819      	bhi.n	800cf14 <USBH_UserProcess+0x48>
 800cee0:	a201      	add	r2, pc, #4	; (adr r2, 800cee8 <USBH_UserProcess+0x1c>)
 800cee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cee6:	bf00      	nop
 800cee8:	0800cf15 	.word	0x0800cf15
 800ceec:	0800cf05 	.word	0x0800cf05
 800cef0:	0800cf15 	.word	0x0800cf15
 800cef4:	0800cf0d 	.word	0x0800cf0d
 800cef8:	0800cefd 	.word	0x0800cefd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cefc:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <USBH_UserProcess+0x58>)
 800cefe:	2203      	movs	r2, #3
 800cf00:	701a      	strb	r2, [r3, #0]
  break;
 800cf02:	e008      	b.n	800cf16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <USBH_UserProcess+0x58>)
 800cf06:	2202      	movs	r2, #2
 800cf08:	701a      	strb	r2, [r3, #0]
  break;
 800cf0a:	e004      	b.n	800cf16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <USBH_UserProcess+0x58>)
 800cf0e:	2201      	movs	r2, #1
 800cf10:	701a      	strb	r2, [r3, #0]
  break;
 800cf12:	e000      	b.n	800cf16 <USBH_UserProcess+0x4a>

  default:
  break;
 800cf14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cf16:	bf00      	nop
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
 800cf22:	bf00      	nop
 800cf24:	200036e0 	.word	0x200036e0

0800cf28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08a      	sub	sp, #40	; 0x28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf30:	f107 0314 	add.w	r3, r7, #20
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	605a      	str	r2, [r3, #4]
 800cf3a:	609a      	str	r2, [r3, #8]
 800cf3c:	60da      	str	r2, [r3, #12]
 800cf3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a24      	ldr	r2, [pc, #144]	; (800cfd8 <HAL_HCD_MspInit+0xb0>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d141      	bne.n	800cfce <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	613b      	str	r3, [r7, #16]
 800cf4e:	4b23      	ldr	r3, [pc, #140]	; (800cfdc <HAL_HCD_MspInit+0xb4>)
 800cf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf52:	4a22      	ldr	r2, [pc, #136]	; (800cfdc <HAL_HCD_MspInit+0xb4>)
 800cf54:	f043 0302 	orr.w	r3, r3, #2
 800cf58:	6313      	str	r3, [r2, #48]	; 0x30
 800cf5a:	4b20      	ldr	r3, [pc, #128]	; (800cfdc <HAL_HCD_MspInit+0xb4>)
 800cf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5e:	f003 0302 	and.w	r3, r3, #2
 800cf62:	613b      	str	r3, [r7, #16]
 800cf64:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cf66:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800cf6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf70:	2300      	movs	r3, #0
 800cf72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf74:	2300      	movs	r3, #0
 800cf76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cf78:	230c      	movs	r3, #12
 800cf7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf7c:	f107 0314 	add.w	r3, r7, #20
 800cf80:	4619      	mov	r1, r3
 800cf82:	4817      	ldr	r0, [pc, #92]	; (800cfe0 <HAL_HCD_MspInit+0xb8>)
 800cf84:	f7f5 ffba 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cf88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cf96:	f107 0314 	add.w	r3, r7, #20
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	4810      	ldr	r0, [pc, #64]	; (800cfe0 <HAL_HCD_MspInit+0xb8>)
 800cf9e:	f7f5 ffad 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	4b0d      	ldr	r3, [pc, #52]	; (800cfdc <HAL_HCD_MspInit+0xb4>)
 800cfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfaa:	4a0c      	ldr	r2, [pc, #48]	; (800cfdc <HAL_HCD_MspInit+0xb4>)
 800cfac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cfb0:	6313      	str	r3, [r2, #48]	; 0x30
 800cfb2:	4b0a      	ldr	r3, [pc, #40]	; (800cfdc <HAL_HCD_MspInit+0xb4>)
 800cfb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfba:	60fb      	str	r3, [r7, #12]
 800cfbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	204d      	movs	r0, #77	; 0x4d
 800cfc4:	f7f5 feb5 	bl	8002d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cfc8:	204d      	movs	r0, #77	; 0x4d
 800cfca:	f7f5 fece 	bl	8002d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cfce:	bf00      	nop
 800cfd0:	3728      	adds	r7, #40	; 0x28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	40040000 	.word	0x40040000
 800cfdc:	40023800 	.word	0x40023800
 800cfe0:	40020400 	.word	0x40020400

0800cfe4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe ff95 	bl	800bf22 <USBH_LL_IncTimer>
}
 800cff8:	bf00      	nop
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe ffcd 	bl	800bfae <USBH_LL_Connect>
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fe ffd6 	bl	800bfdc <USBH_LL_Disconnect>
}
 800d030:	bf00      	nop
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	70fb      	strb	r3, [r7, #3]
 800d044:	4613      	mov	r3, r2
 800d046:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d062:	4618      	mov	r0, r3
 800d064:	f7fe ff87 	bl	800bf76 <USBH_LL_PortEnabled>
}
 800d068:	bf00      	nop
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fe ff87 	bl	800bf92 <USBH_LL_PortDisabled>
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d132      	bne.n	800d104 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d09e:	4a1c      	ldr	r2, [pc, #112]	; (800d110 <USBH_LL_Init+0x84>)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4a19      	ldr	r2, [pc, #100]	; (800d110 <USBH_LL_Init+0x84>)
 800d0aa:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d0ae:	4b18      	ldr	r3, [pc, #96]	; (800d110 <USBH_LL_Init+0x84>)
 800d0b0:	4a18      	ldr	r2, [pc, #96]	; (800d114 <USBH_LL_Init+0x88>)
 800d0b2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d0b4:	4b16      	ldr	r3, [pc, #88]	; (800d110 <USBH_LL_Init+0x84>)
 800d0b6:	220c      	movs	r2, #12
 800d0b8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d0ba:	4b15      	ldr	r3, [pc, #84]	; (800d110 <USBH_LL_Init+0x84>)
 800d0bc:	2201      	movs	r2, #1
 800d0be:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d0c0:	4b13      	ldr	r3, [pc, #76]	; (800d110 <USBH_LL_Init+0x84>)
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d0c6:	4b12      	ldr	r3, [pc, #72]	; (800d110 <USBH_LL_Init+0x84>)
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <USBH_LL_Init+0x84>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d0d2:	4b0f      	ldr	r3, [pc, #60]	; (800d110 <USBH_LL_Init+0x84>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d0d8:	4b0d      	ldr	r3, [pc, #52]	; (800d110 <USBH_LL_Init+0x84>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d0de:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <USBH_LL_Init+0x84>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d0e4:	480a      	ldr	r0, [pc, #40]	; (800d110 <USBH_LL_Init+0x84>)
 800d0e6:	f7f6 f8ff 	bl	80032e8 <HAL_HCD_Init>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d001      	beq.n	800d0f4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d0f0:	f7f5 f8ea 	bl	80022c8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d0f4:	4806      	ldr	r0, [pc, #24]	; (800d110 <USBH_LL_Init+0x84>)
 800d0f6:	f7f6 fce2 	bl	8003abe <HAL_HCD_GetCurrentFrame>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7fe ff00 	bl	800bf04 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	200036e4 	.word	0x200036e4
 800d114:	40040000 	.word	0x40040000

0800d118 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f6 fc4f 	bl	80039d2 <HAL_HCD_Start>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f98c 	bl	800d458 <USBH_Get_USB_Status>
 800d140:	4603      	mov	r3, r0
 800d142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d144:	7bbb      	ldrb	r3, [r7, #14]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d156:	2300      	movs	r3, #0
 800d158:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d164:	4618      	mov	r0, r3
 800d166:	f7f6 fc57 	bl	8003a18 <HAL_HCD_Stop>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d16e:	7bfb      	ldrb	r3, [r7, #15]
 800d170:	4618      	mov	r0, r3
 800d172:	f000 f971 	bl	800d458 <USBH_Get_USB_Status>
 800d176:	4603      	mov	r3, r0
 800d178:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d17a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d18c:	2301      	movs	r3, #1
 800d18e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d196:	4618      	mov	r0, r3
 800d198:	f7f6 fc9f 	bl	8003ada <HAL_HCD_GetCurrentSpeed>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d00c      	beq.n	800d1bc <USBH_LL_GetSpeed+0x38>
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d80d      	bhi.n	800d1c2 <USBH_LL_GetSpeed+0x3e>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <USBH_LL_GetSpeed+0x2c>
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d003      	beq.n	800d1b6 <USBH_LL_GetSpeed+0x32>
 800d1ae:	e008      	b.n	800d1c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d1b4:	e008      	b.n	800d1c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ba:	e005      	b.n	800d1c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d1bc:	2302      	movs	r3, #2
 800d1be:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c0:	e002      	b.n	800d1c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1c6:	bf00      	nop
  }
  return  speed;
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b084      	sub	sp, #16
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f6 fc32 	bl	8003a52 <HAL_HCD_ResetPort>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d1f2:	7bfb      	ldrb	r3, [r7, #15]
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f000 f92f 	bl	800d458 <USBH_Get_USB_Status>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d21a:	78fa      	ldrb	r2, [r7, #3]
 800d21c:	4611      	mov	r1, r2
 800d21e:	4618      	mov	r0, r3
 800d220:	f7f6 fc39 	bl	8003a96 <HAL_HCD_HC_GetXferCount>
 800d224:	4603      	mov	r3, r0
}
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d22e:	b590      	push	{r4, r7, lr}
 800d230:	b089      	sub	sp, #36	; 0x24
 800d232:	af04      	add	r7, sp, #16
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	4608      	mov	r0, r1
 800d238:	4611      	mov	r1, r2
 800d23a:	461a      	mov	r2, r3
 800d23c:	4603      	mov	r3, r0
 800d23e:	70fb      	strb	r3, [r7, #3]
 800d240:	460b      	mov	r3, r1
 800d242:	70bb      	strb	r3, [r7, #2]
 800d244:	4613      	mov	r3, r2
 800d246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d256:	787c      	ldrb	r4, [r7, #1]
 800d258:	78ba      	ldrb	r2, [r7, #2]
 800d25a:	78f9      	ldrb	r1, [r7, #3]
 800d25c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d25e:	9302      	str	r3, [sp, #8]
 800d260:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d264:	9301      	str	r3, [sp, #4]
 800d266:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	4623      	mov	r3, r4
 800d26e:	f7f6 f89d 	bl	80033ac <HAL_HCD_HC_Init>
 800d272:	4603      	mov	r3, r0
 800d274:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d276:	7bfb      	ldrb	r3, [r7, #15]
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 f8ed 	bl	800d458 <USBH_Get_USB_Status>
 800d27e:	4603      	mov	r3, r0
 800d280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d282:	7bbb      	ldrb	r3, [r7, #14]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3714      	adds	r7, #20
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd90      	pop	{r4, r7, pc}

0800d28c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d29c:	2300      	movs	r3, #0
 800d29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d2a6:	78fa      	ldrb	r2, [r7, #3]
 800d2a8:	4611      	mov	r1, r2
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f6 f90d 	bl	80034ca <HAL_HCD_HC_Halt>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 f8ce 	bl	800d458 <USBH_Get_USB_Status>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d2ca:	b590      	push	{r4, r7, lr}
 800d2cc:	b089      	sub	sp, #36	; 0x24
 800d2ce:	af04      	add	r7, sp, #16
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	4608      	mov	r0, r1
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	4603      	mov	r3, r0
 800d2da:	70fb      	strb	r3, [r7, #3]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70bb      	strb	r3, [r7, #2]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d2f2:	787c      	ldrb	r4, [r7, #1]
 800d2f4:	78ba      	ldrb	r2, [r7, #2]
 800d2f6:	78f9      	ldrb	r1, [r7, #3]
 800d2f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d300:	9302      	str	r3, [sp, #8]
 800d302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d304:	9301      	str	r3, [sp, #4]
 800d306:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d30a:	9300      	str	r3, [sp, #0]
 800d30c:	4623      	mov	r3, r4
 800d30e:	f7f6 f8ff 	bl	8003510 <HAL_HCD_HC_SubmitRequest>
 800d312:	4603      	mov	r3, r0
 800d314:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d316:	7bfb      	ldrb	r3, [r7, #15]
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 f89d 	bl	800d458 <USBH_Get_USB_Status>
 800d31e:	4603      	mov	r3, r0
 800d320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d322:	7bbb      	ldrb	r3, [r7, #14]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3714      	adds	r7, #20
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd90      	pop	{r4, r7, pc}

0800d32c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d33e:	78fa      	ldrb	r2, [r7, #3]
 800d340:	4611      	mov	r1, r2
 800d342:	4618      	mov	r0, r3
 800d344:	f7f6 fb93 	bl	8003a6e <HAL_HCD_HC_GetURBState>
 800d348:	4603      	mov	r3, r0
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3708      	adds	r7, #8
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b082      	sub	sp, #8
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	460b      	mov	r3, r1
 800d35c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d364:	2b00      	cmp	r3, #0
 800d366:	d103      	bne.n	800d370 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d368:	78fb      	ldrb	r3, [r7, #3]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f000 f8a0 	bl	800d4b0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d370:	20c8      	movs	r0, #200	; 0xc8
 800d372:	f7f5 fbdf 	bl	8002b34 <HAL_Delay>
  return USBH_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
 800d38c:	4613      	mov	r3, r2
 800d38e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d396:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d398:	78fb      	ldrb	r3, [r7, #3]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	212c      	movs	r1, #44	; 0x2c
 800d39e:	fb01 f303 	mul.w	r3, r1, r3
 800d3a2:	4413      	add	r3, r2
 800d3a4:	333b      	adds	r3, #59	; 0x3b
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d009      	beq.n	800d3c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d3ac:	78fb      	ldrb	r3, [r7, #3]
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	212c      	movs	r1, #44	; 0x2c
 800d3b2:	fb01 f303 	mul.w	r3, r1, r3
 800d3b6:	4413      	add	r3, r2
 800d3b8:	3354      	adds	r3, #84	; 0x54
 800d3ba:	78ba      	ldrb	r2, [r7, #2]
 800d3bc:	701a      	strb	r2, [r3, #0]
 800d3be:	e008      	b.n	800d3d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	212c      	movs	r1, #44	; 0x2c
 800d3c6:	fb01 f303 	mul.w	r3, r1, r3
 800d3ca:	4413      	add	r3, r2
 800d3cc:	3355      	adds	r3, #85	; 0x55
 800d3ce:	78ba      	ldrb	r2, [r7, #2]
 800d3d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d3f6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d3f8:	78fb      	ldrb	r3, [r7, #3]
 800d3fa:	68ba      	ldr	r2, [r7, #8]
 800d3fc:	212c      	movs	r1, #44	; 0x2c
 800d3fe:	fb01 f303 	mul.w	r3, r1, r3
 800d402:	4413      	add	r3, r2
 800d404:	333b      	adds	r3, #59	; 0x3b
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d009      	beq.n	800d420 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d40c:	78fb      	ldrb	r3, [r7, #3]
 800d40e:	68ba      	ldr	r2, [r7, #8]
 800d410:	212c      	movs	r1, #44	; 0x2c
 800d412:	fb01 f303 	mul.w	r3, r1, r3
 800d416:	4413      	add	r3, r2
 800d418:	3354      	adds	r3, #84	; 0x54
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	73fb      	strb	r3, [r7, #15]
 800d41e:	e008      	b.n	800d432 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d420:	78fb      	ldrb	r3, [r7, #3]
 800d422:	68ba      	ldr	r2, [r7, #8]
 800d424:	212c      	movs	r1, #44	; 0x2c
 800d426:	fb01 f303 	mul.w	r3, r1, r3
 800d42a:	4413      	add	r3, r2
 800d42c:	3355      	adds	r3, #85	; 0x55
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d432:	7bfb      	ldrb	r3, [r7, #15]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3714      	adds	r7, #20
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f7f5 fb73 	bl	8002b34 <HAL_Delay>
}
 800d44e:	bf00      	nop
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
	...

0800d458 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	4603      	mov	r3, r0
 800d460:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d817      	bhi.n	800d49c <USBH_Get_USB_Status+0x44>
 800d46c:	a201      	add	r2, pc, #4	; (adr r2, 800d474 <USBH_Get_USB_Status+0x1c>)
 800d46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d472:	bf00      	nop
 800d474:	0800d485 	.word	0x0800d485
 800d478:	0800d48b 	.word	0x0800d48b
 800d47c:	0800d491 	.word	0x0800d491
 800d480:	0800d497 	.word	0x0800d497
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	73fb      	strb	r3, [r7, #15]
    break;
 800d488:	e00b      	b.n	800d4a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d48a:	2302      	movs	r3, #2
 800d48c:	73fb      	strb	r3, [r7, #15]
    break;
 800d48e:	e008      	b.n	800d4a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d490:	2301      	movs	r3, #1
 800d492:	73fb      	strb	r3, [r7, #15]
    break;
 800d494:	e005      	b.n	800d4a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d496:	2302      	movs	r3, #2
 800d498:	73fb      	strb	r3, [r7, #15]
    break;
 800d49a:	e002      	b.n	800d4a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d49c:	2302      	movs	r3, #2
 800d49e:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a0:	bf00      	nop
  }
  return usb_status;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3714      	adds	r7, #20
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d4be:	79fb      	ldrb	r3, [r7, #7]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d102      	bne.n	800d4ca <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	73fb      	strb	r3, [r7, #15]
 800d4c8:	e001      	b.n	800d4ce <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	2110      	movs	r1, #16
 800d4d4:	4803      	ldr	r0, [pc, #12]	; (800d4e4 <MX_DriverVbusHS+0x34>)
 800d4d6:	f7f5 fed5 	bl	8003284 <HAL_GPIO_WritePin>
}
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	40020800 	.word	0x40020800

0800d4e8 <atoi>:
 800d4e8:	220a      	movs	r2, #10
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	f000 baa0 	b.w	800da30 <strtol>

0800d4f0 <__errno>:
 800d4f0:	4b01      	ldr	r3, [pc, #4]	; (800d4f8 <__errno+0x8>)
 800d4f2:	6818      	ldr	r0, [r3, #0]
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	20000030 	.word	0x20000030

0800d4fc <__libc_init_array>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	4d0d      	ldr	r5, [pc, #52]	; (800d534 <__libc_init_array+0x38>)
 800d500:	4c0d      	ldr	r4, [pc, #52]	; (800d538 <__libc_init_array+0x3c>)
 800d502:	1b64      	subs	r4, r4, r5
 800d504:	10a4      	asrs	r4, r4, #2
 800d506:	2600      	movs	r6, #0
 800d508:	42a6      	cmp	r6, r4
 800d50a:	d109      	bne.n	800d520 <__libc_init_array+0x24>
 800d50c:	4d0b      	ldr	r5, [pc, #44]	; (800d53c <__libc_init_array+0x40>)
 800d50e:	4c0c      	ldr	r4, [pc, #48]	; (800d540 <__libc_init_array+0x44>)
 800d510:	f001 f91e 	bl	800e750 <_init>
 800d514:	1b64      	subs	r4, r4, r5
 800d516:	10a4      	asrs	r4, r4, #2
 800d518:	2600      	movs	r6, #0
 800d51a:	42a6      	cmp	r6, r4
 800d51c:	d105      	bne.n	800d52a <__libc_init_array+0x2e>
 800d51e:	bd70      	pop	{r4, r5, r6, pc}
 800d520:	f855 3b04 	ldr.w	r3, [r5], #4
 800d524:	4798      	blx	r3
 800d526:	3601      	adds	r6, #1
 800d528:	e7ee      	b.n	800d508 <__libc_init_array+0xc>
 800d52a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d52e:	4798      	blx	r3
 800d530:	3601      	adds	r6, #1
 800d532:	e7f2      	b.n	800d51a <__libc_init_array+0x1e>
 800d534:	0800eccc 	.word	0x0800eccc
 800d538:	0800eccc 	.word	0x0800eccc
 800d53c:	0800eccc 	.word	0x0800eccc
 800d540:	0800ecd0 	.word	0x0800ecd0

0800d544 <malloc>:
 800d544:	4b02      	ldr	r3, [pc, #8]	; (800d550 <malloc+0xc>)
 800d546:	4601      	mov	r1, r0
 800d548:	6818      	ldr	r0, [r3, #0]
 800d54a:	f000 b88d 	b.w	800d668 <_malloc_r>
 800d54e:	bf00      	nop
 800d550:	20000030 	.word	0x20000030

0800d554 <free>:
 800d554:	4b02      	ldr	r3, [pc, #8]	; (800d560 <free+0xc>)
 800d556:	4601      	mov	r1, r0
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	f000 b819 	b.w	800d590 <_free_r>
 800d55e:	bf00      	nop
 800d560:	20000030 	.word	0x20000030

0800d564 <memcpy>:
 800d564:	440a      	add	r2, r1
 800d566:	4291      	cmp	r1, r2
 800d568:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d56c:	d100      	bne.n	800d570 <memcpy+0xc>
 800d56e:	4770      	bx	lr
 800d570:	b510      	push	{r4, lr}
 800d572:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d576:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d57a:	4291      	cmp	r1, r2
 800d57c:	d1f9      	bne.n	800d572 <memcpy+0xe>
 800d57e:	bd10      	pop	{r4, pc}

0800d580 <memset>:
 800d580:	4402      	add	r2, r0
 800d582:	4603      	mov	r3, r0
 800d584:	4293      	cmp	r3, r2
 800d586:	d100      	bne.n	800d58a <memset+0xa>
 800d588:	4770      	bx	lr
 800d58a:	f803 1b01 	strb.w	r1, [r3], #1
 800d58e:	e7f9      	b.n	800d584 <memset+0x4>

0800d590 <_free_r>:
 800d590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d592:	2900      	cmp	r1, #0
 800d594:	d044      	beq.n	800d620 <_free_r+0x90>
 800d596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d59a:	9001      	str	r0, [sp, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f1a1 0404 	sub.w	r4, r1, #4
 800d5a2:	bfb8      	it	lt
 800d5a4:	18e4      	addlt	r4, r4, r3
 800d5a6:	f000 fc6d 	bl	800de84 <__malloc_lock>
 800d5aa:	4a1e      	ldr	r2, [pc, #120]	; (800d624 <_free_r+0x94>)
 800d5ac:	9801      	ldr	r0, [sp, #4]
 800d5ae:	6813      	ldr	r3, [r2, #0]
 800d5b0:	b933      	cbnz	r3, 800d5c0 <_free_r+0x30>
 800d5b2:	6063      	str	r3, [r4, #4]
 800d5b4:	6014      	str	r4, [r2, #0]
 800d5b6:	b003      	add	sp, #12
 800d5b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d5bc:	f000 bc68 	b.w	800de90 <__malloc_unlock>
 800d5c0:	42a3      	cmp	r3, r4
 800d5c2:	d908      	bls.n	800d5d6 <_free_r+0x46>
 800d5c4:	6825      	ldr	r5, [r4, #0]
 800d5c6:	1961      	adds	r1, r4, r5
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	bf01      	itttt	eq
 800d5cc:	6819      	ldreq	r1, [r3, #0]
 800d5ce:	685b      	ldreq	r3, [r3, #4]
 800d5d0:	1949      	addeq	r1, r1, r5
 800d5d2:	6021      	streq	r1, [r4, #0]
 800d5d4:	e7ed      	b.n	800d5b2 <_free_r+0x22>
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	b10b      	cbz	r3, 800d5e0 <_free_r+0x50>
 800d5dc:	42a3      	cmp	r3, r4
 800d5de:	d9fa      	bls.n	800d5d6 <_free_r+0x46>
 800d5e0:	6811      	ldr	r1, [r2, #0]
 800d5e2:	1855      	adds	r5, r2, r1
 800d5e4:	42a5      	cmp	r5, r4
 800d5e6:	d10b      	bne.n	800d600 <_free_r+0x70>
 800d5e8:	6824      	ldr	r4, [r4, #0]
 800d5ea:	4421      	add	r1, r4
 800d5ec:	1854      	adds	r4, r2, r1
 800d5ee:	42a3      	cmp	r3, r4
 800d5f0:	6011      	str	r1, [r2, #0]
 800d5f2:	d1e0      	bne.n	800d5b6 <_free_r+0x26>
 800d5f4:	681c      	ldr	r4, [r3, #0]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	6053      	str	r3, [r2, #4]
 800d5fa:	4421      	add	r1, r4
 800d5fc:	6011      	str	r1, [r2, #0]
 800d5fe:	e7da      	b.n	800d5b6 <_free_r+0x26>
 800d600:	d902      	bls.n	800d608 <_free_r+0x78>
 800d602:	230c      	movs	r3, #12
 800d604:	6003      	str	r3, [r0, #0]
 800d606:	e7d6      	b.n	800d5b6 <_free_r+0x26>
 800d608:	6825      	ldr	r5, [r4, #0]
 800d60a:	1961      	adds	r1, r4, r5
 800d60c:	428b      	cmp	r3, r1
 800d60e:	bf04      	itt	eq
 800d610:	6819      	ldreq	r1, [r3, #0]
 800d612:	685b      	ldreq	r3, [r3, #4]
 800d614:	6063      	str	r3, [r4, #4]
 800d616:	bf04      	itt	eq
 800d618:	1949      	addeq	r1, r1, r5
 800d61a:	6021      	streq	r1, [r4, #0]
 800d61c:	6054      	str	r4, [r2, #4]
 800d61e:	e7ca      	b.n	800d5b6 <_free_r+0x26>
 800d620:	b003      	add	sp, #12
 800d622:	bd30      	pop	{r4, r5, pc}
 800d624:	200039e8 	.word	0x200039e8

0800d628 <sbrk_aligned>:
 800d628:	b570      	push	{r4, r5, r6, lr}
 800d62a:	4e0e      	ldr	r6, [pc, #56]	; (800d664 <sbrk_aligned+0x3c>)
 800d62c:	460c      	mov	r4, r1
 800d62e:	6831      	ldr	r1, [r6, #0]
 800d630:	4605      	mov	r5, r0
 800d632:	b911      	cbnz	r1, 800d63a <sbrk_aligned+0x12>
 800d634:	f000 f8a4 	bl	800d780 <_sbrk_r>
 800d638:	6030      	str	r0, [r6, #0]
 800d63a:	4621      	mov	r1, r4
 800d63c:	4628      	mov	r0, r5
 800d63e:	f000 f89f 	bl	800d780 <_sbrk_r>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	d00a      	beq.n	800d65c <sbrk_aligned+0x34>
 800d646:	1cc4      	adds	r4, r0, #3
 800d648:	f024 0403 	bic.w	r4, r4, #3
 800d64c:	42a0      	cmp	r0, r4
 800d64e:	d007      	beq.n	800d660 <sbrk_aligned+0x38>
 800d650:	1a21      	subs	r1, r4, r0
 800d652:	4628      	mov	r0, r5
 800d654:	f000 f894 	bl	800d780 <_sbrk_r>
 800d658:	3001      	adds	r0, #1
 800d65a:	d101      	bne.n	800d660 <sbrk_aligned+0x38>
 800d65c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d660:	4620      	mov	r0, r4
 800d662:	bd70      	pop	{r4, r5, r6, pc}
 800d664:	200039ec 	.word	0x200039ec

0800d668 <_malloc_r>:
 800d668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66c:	1ccd      	adds	r5, r1, #3
 800d66e:	f025 0503 	bic.w	r5, r5, #3
 800d672:	3508      	adds	r5, #8
 800d674:	2d0c      	cmp	r5, #12
 800d676:	bf38      	it	cc
 800d678:	250c      	movcc	r5, #12
 800d67a:	2d00      	cmp	r5, #0
 800d67c:	4607      	mov	r7, r0
 800d67e:	db01      	blt.n	800d684 <_malloc_r+0x1c>
 800d680:	42a9      	cmp	r1, r5
 800d682:	d905      	bls.n	800d690 <_malloc_r+0x28>
 800d684:	230c      	movs	r3, #12
 800d686:	603b      	str	r3, [r7, #0]
 800d688:	2600      	movs	r6, #0
 800d68a:	4630      	mov	r0, r6
 800d68c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d690:	4e2e      	ldr	r6, [pc, #184]	; (800d74c <_malloc_r+0xe4>)
 800d692:	f000 fbf7 	bl	800de84 <__malloc_lock>
 800d696:	6833      	ldr	r3, [r6, #0]
 800d698:	461c      	mov	r4, r3
 800d69a:	bb34      	cbnz	r4, 800d6ea <_malloc_r+0x82>
 800d69c:	4629      	mov	r1, r5
 800d69e:	4638      	mov	r0, r7
 800d6a0:	f7ff ffc2 	bl	800d628 <sbrk_aligned>
 800d6a4:	1c43      	adds	r3, r0, #1
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	d14d      	bne.n	800d746 <_malloc_r+0xde>
 800d6aa:	6834      	ldr	r4, [r6, #0]
 800d6ac:	4626      	mov	r6, r4
 800d6ae:	2e00      	cmp	r6, #0
 800d6b0:	d140      	bne.n	800d734 <_malloc_r+0xcc>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	4631      	mov	r1, r6
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	eb04 0803 	add.w	r8, r4, r3
 800d6bc:	f000 f860 	bl	800d780 <_sbrk_r>
 800d6c0:	4580      	cmp	r8, r0
 800d6c2:	d13a      	bne.n	800d73a <_malloc_r+0xd2>
 800d6c4:	6821      	ldr	r1, [r4, #0]
 800d6c6:	3503      	adds	r5, #3
 800d6c8:	1a6d      	subs	r5, r5, r1
 800d6ca:	f025 0503 	bic.w	r5, r5, #3
 800d6ce:	3508      	adds	r5, #8
 800d6d0:	2d0c      	cmp	r5, #12
 800d6d2:	bf38      	it	cc
 800d6d4:	250c      	movcc	r5, #12
 800d6d6:	4629      	mov	r1, r5
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f7ff ffa5 	bl	800d628 <sbrk_aligned>
 800d6de:	3001      	adds	r0, #1
 800d6e0:	d02b      	beq.n	800d73a <_malloc_r+0xd2>
 800d6e2:	6823      	ldr	r3, [r4, #0]
 800d6e4:	442b      	add	r3, r5
 800d6e6:	6023      	str	r3, [r4, #0]
 800d6e8:	e00e      	b.n	800d708 <_malloc_r+0xa0>
 800d6ea:	6822      	ldr	r2, [r4, #0]
 800d6ec:	1b52      	subs	r2, r2, r5
 800d6ee:	d41e      	bmi.n	800d72e <_malloc_r+0xc6>
 800d6f0:	2a0b      	cmp	r2, #11
 800d6f2:	d916      	bls.n	800d722 <_malloc_r+0xba>
 800d6f4:	1961      	adds	r1, r4, r5
 800d6f6:	42a3      	cmp	r3, r4
 800d6f8:	6025      	str	r5, [r4, #0]
 800d6fa:	bf18      	it	ne
 800d6fc:	6059      	strne	r1, [r3, #4]
 800d6fe:	6863      	ldr	r3, [r4, #4]
 800d700:	bf08      	it	eq
 800d702:	6031      	streq	r1, [r6, #0]
 800d704:	5162      	str	r2, [r4, r5]
 800d706:	604b      	str	r3, [r1, #4]
 800d708:	4638      	mov	r0, r7
 800d70a:	f104 060b 	add.w	r6, r4, #11
 800d70e:	f000 fbbf 	bl	800de90 <__malloc_unlock>
 800d712:	f026 0607 	bic.w	r6, r6, #7
 800d716:	1d23      	adds	r3, r4, #4
 800d718:	1af2      	subs	r2, r6, r3
 800d71a:	d0b6      	beq.n	800d68a <_malloc_r+0x22>
 800d71c:	1b9b      	subs	r3, r3, r6
 800d71e:	50a3      	str	r3, [r4, r2]
 800d720:	e7b3      	b.n	800d68a <_malloc_r+0x22>
 800d722:	6862      	ldr	r2, [r4, #4]
 800d724:	42a3      	cmp	r3, r4
 800d726:	bf0c      	ite	eq
 800d728:	6032      	streq	r2, [r6, #0]
 800d72a:	605a      	strne	r2, [r3, #4]
 800d72c:	e7ec      	b.n	800d708 <_malloc_r+0xa0>
 800d72e:	4623      	mov	r3, r4
 800d730:	6864      	ldr	r4, [r4, #4]
 800d732:	e7b2      	b.n	800d69a <_malloc_r+0x32>
 800d734:	4634      	mov	r4, r6
 800d736:	6876      	ldr	r6, [r6, #4]
 800d738:	e7b9      	b.n	800d6ae <_malloc_r+0x46>
 800d73a:	230c      	movs	r3, #12
 800d73c:	603b      	str	r3, [r7, #0]
 800d73e:	4638      	mov	r0, r7
 800d740:	f000 fba6 	bl	800de90 <__malloc_unlock>
 800d744:	e7a1      	b.n	800d68a <_malloc_r+0x22>
 800d746:	6025      	str	r5, [r4, #0]
 800d748:	e7de      	b.n	800d708 <_malloc_r+0xa0>
 800d74a:	bf00      	nop
 800d74c:	200039e8 	.word	0x200039e8

0800d750 <iprintf>:
 800d750:	b40f      	push	{r0, r1, r2, r3}
 800d752:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <iprintf+0x2c>)
 800d754:	b513      	push	{r0, r1, r4, lr}
 800d756:	681c      	ldr	r4, [r3, #0]
 800d758:	b124      	cbz	r4, 800d764 <iprintf+0x14>
 800d75a:	69a3      	ldr	r3, [r4, #24]
 800d75c:	b913      	cbnz	r3, 800d764 <iprintf+0x14>
 800d75e:	4620      	mov	r0, r4
 800d760:	f000 fa8a 	bl	800dc78 <__sinit>
 800d764:	ab05      	add	r3, sp, #20
 800d766:	9a04      	ldr	r2, [sp, #16]
 800d768:	68a1      	ldr	r1, [r4, #8]
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	4620      	mov	r0, r4
 800d76e:	f000 fbbf 	bl	800def0 <_vfiprintf_r>
 800d772:	b002      	add	sp, #8
 800d774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d778:	b004      	add	sp, #16
 800d77a:	4770      	bx	lr
 800d77c:	20000030 	.word	0x20000030

0800d780 <_sbrk_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4d06      	ldr	r5, [pc, #24]	; (800d79c <_sbrk_r+0x1c>)
 800d784:	2300      	movs	r3, #0
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	602b      	str	r3, [r5, #0]
 800d78c:	f7f5 f8ee 	bl	800296c <_sbrk>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_sbrk_r+0x1a>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_sbrk_r+0x1a>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	200039f4 	.word	0x200039f4

0800d7a0 <setvbuf>:
 800d7a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7a4:	461d      	mov	r5, r3
 800d7a6:	4b5d      	ldr	r3, [pc, #372]	; (800d91c <setvbuf+0x17c>)
 800d7a8:	681f      	ldr	r7, [r3, #0]
 800d7aa:	4604      	mov	r4, r0
 800d7ac:	460e      	mov	r6, r1
 800d7ae:	4690      	mov	r8, r2
 800d7b0:	b127      	cbz	r7, 800d7bc <setvbuf+0x1c>
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	b913      	cbnz	r3, 800d7bc <setvbuf+0x1c>
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	f000 fa5e 	bl	800dc78 <__sinit>
 800d7bc:	4b58      	ldr	r3, [pc, #352]	; (800d920 <setvbuf+0x180>)
 800d7be:	429c      	cmp	r4, r3
 800d7c0:	d167      	bne.n	800d892 <setvbuf+0xf2>
 800d7c2:	687c      	ldr	r4, [r7, #4]
 800d7c4:	f1b8 0f02 	cmp.w	r8, #2
 800d7c8:	d006      	beq.n	800d7d8 <setvbuf+0x38>
 800d7ca:	f1b8 0f01 	cmp.w	r8, #1
 800d7ce:	f200 809f 	bhi.w	800d910 <setvbuf+0x170>
 800d7d2:	2d00      	cmp	r5, #0
 800d7d4:	f2c0 809c 	blt.w	800d910 <setvbuf+0x170>
 800d7d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7da:	07db      	lsls	r3, r3, #31
 800d7dc:	d405      	bmi.n	800d7ea <setvbuf+0x4a>
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	0598      	lsls	r0, r3, #22
 800d7e2:	d402      	bmi.n	800d7ea <setvbuf+0x4a>
 800d7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7e6:	f000 fae5 	bl	800ddb4 <__retarget_lock_acquire_recursive>
 800d7ea:	4621      	mov	r1, r4
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	f000 f9af 	bl	800db50 <_fflush_r>
 800d7f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7f4:	b141      	cbz	r1, 800d808 <setvbuf+0x68>
 800d7f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7fa:	4299      	cmp	r1, r3
 800d7fc:	d002      	beq.n	800d804 <setvbuf+0x64>
 800d7fe:	4638      	mov	r0, r7
 800d800:	f7ff fec6 	bl	800d590 <_free_r>
 800d804:	2300      	movs	r3, #0
 800d806:	6363      	str	r3, [r4, #52]	; 0x34
 800d808:	2300      	movs	r3, #0
 800d80a:	61a3      	str	r3, [r4, #24]
 800d80c:	6063      	str	r3, [r4, #4]
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	0619      	lsls	r1, r3, #24
 800d812:	d503      	bpl.n	800d81c <setvbuf+0x7c>
 800d814:	6921      	ldr	r1, [r4, #16]
 800d816:	4638      	mov	r0, r7
 800d818:	f7ff feba 	bl	800d590 <_free_r>
 800d81c:	89a3      	ldrh	r3, [r4, #12]
 800d81e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	f1b8 0f02 	cmp.w	r8, #2
 800d82a:	81a3      	strh	r3, [r4, #12]
 800d82c:	d06c      	beq.n	800d908 <setvbuf+0x168>
 800d82e:	ab01      	add	r3, sp, #4
 800d830:	466a      	mov	r2, sp
 800d832:	4621      	mov	r1, r4
 800d834:	4638      	mov	r0, r7
 800d836:	f000 fabf 	bl	800ddb8 <__swhatbuf_r>
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	4318      	orrs	r0, r3
 800d83e:	81a0      	strh	r0, [r4, #12]
 800d840:	2d00      	cmp	r5, #0
 800d842:	d130      	bne.n	800d8a6 <setvbuf+0x106>
 800d844:	9d00      	ldr	r5, [sp, #0]
 800d846:	4628      	mov	r0, r5
 800d848:	f7ff fe7c 	bl	800d544 <malloc>
 800d84c:	4606      	mov	r6, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	d155      	bne.n	800d8fe <setvbuf+0x15e>
 800d852:	f8dd 9000 	ldr.w	r9, [sp]
 800d856:	45a9      	cmp	r9, r5
 800d858:	d14a      	bne.n	800d8f0 <setvbuf+0x150>
 800d85a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d85e:	2200      	movs	r2, #0
 800d860:	60a2      	str	r2, [r4, #8]
 800d862:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d866:	6022      	str	r2, [r4, #0]
 800d868:	6122      	str	r2, [r4, #16]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d870:	6162      	str	r2, [r4, #20]
 800d872:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d874:	f043 0302 	orr.w	r3, r3, #2
 800d878:	07d2      	lsls	r2, r2, #31
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	d405      	bmi.n	800d88a <setvbuf+0xea>
 800d87e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d882:	d102      	bne.n	800d88a <setvbuf+0xea>
 800d884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d886:	f000 fa96 	bl	800ddb6 <__retarget_lock_release_recursive>
 800d88a:	4628      	mov	r0, r5
 800d88c:	b003      	add	sp, #12
 800d88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d892:	4b24      	ldr	r3, [pc, #144]	; (800d924 <setvbuf+0x184>)
 800d894:	429c      	cmp	r4, r3
 800d896:	d101      	bne.n	800d89c <setvbuf+0xfc>
 800d898:	68bc      	ldr	r4, [r7, #8]
 800d89a:	e793      	b.n	800d7c4 <setvbuf+0x24>
 800d89c:	4b22      	ldr	r3, [pc, #136]	; (800d928 <setvbuf+0x188>)
 800d89e:	429c      	cmp	r4, r3
 800d8a0:	bf08      	it	eq
 800d8a2:	68fc      	ldreq	r4, [r7, #12]
 800d8a4:	e78e      	b.n	800d7c4 <setvbuf+0x24>
 800d8a6:	2e00      	cmp	r6, #0
 800d8a8:	d0cd      	beq.n	800d846 <setvbuf+0xa6>
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	b913      	cbnz	r3, 800d8b4 <setvbuf+0x114>
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f000 f9e2 	bl	800dc78 <__sinit>
 800d8b4:	f1b8 0f01 	cmp.w	r8, #1
 800d8b8:	bf08      	it	eq
 800d8ba:	89a3      	ldrheq	r3, [r4, #12]
 800d8bc:	6026      	str	r6, [r4, #0]
 800d8be:	bf04      	itt	eq
 800d8c0:	f043 0301 	orreq.w	r3, r3, #1
 800d8c4:	81a3      	strheq	r3, [r4, #12]
 800d8c6:	89a2      	ldrh	r2, [r4, #12]
 800d8c8:	f012 0308 	ands.w	r3, r2, #8
 800d8cc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d8d0:	d01c      	beq.n	800d90c <setvbuf+0x16c>
 800d8d2:	07d3      	lsls	r3, r2, #31
 800d8d4:	bf41      	itttt	mi
 800d8d6:	2300      	movmi	r3, #0
 800d8d8:	426d      	negmi	r5, r5
 800d8da:	60a3      	strmi	r3, [r4, #8]
 800d8dc:	61a5      	strmi	r5, [r4, #24]
 800d8de:	bf58      	it	pl
 800d8e0:	60a5      	strpl	r5, [r4, #8]
 800d8e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d8e4:	f015 0501 	ands.w	r5, r5, #1
 800d8e8:	d115      	bne.n	800d916 <setvbuf+0x176>
 800d8ea:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d8ee:	e7c8      	b.n	800d882 <setvbuf+0xe2>
 800d8f0:	4648      	mov	r0, r9
 800d8f2:	f7ff fe27 	bl	800d544 <malloc>
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d0ae      	beq.n	800d85a <setvbuf+0xba>
 800d8fc:	464d      	mov	r5, r9
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d904:	81a3      	strh	r3, [r4, #12]
 800d906:	e7d0      	b.n	800d8aa <setvbuf+0x10a>
 800d908:	2500      	movs	r5, #0
 800d90a:	e7a8      	b.n	800d85e <setvbuf+0xbe>
 800d90c:	60a3      	str	r3, [r4, #8]
 800d90e:	e7e8      	b.n	800d8e2 <setvbuf+0x142>
 800d910:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d914:	e7b9      	b.n	800d88a <setvbuf+0xea>
 800d916:	2500      	movs	r5, #0
 800d918:	e7b7      	b.n	800d88a <setvbuf+0xea>
 800d91a:	bf00      	nop
 800d91c:	20000030 	.word	0x20000030
 800d920:	0800ec50 	.word	0x0800ec50
 800d924:	0800ec70 	.word	0x0800ec70
 800d928:	0800ec30 	.word	0x0800ec30

0800d92c <_strtol_l.constprop.0>:
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d932:	d001      	beq.n	800d938 <_strtol_l.constprop.0+0xc>
 800d934:	2b24      	cmp	r3, #36	; 0x24
 800d936:	d906      	bls.n	800d946 <_strtol_l.constprop.0+0x1a>
 800d938:	f7ff fdda 	bl	800d4f0 <__errno>
 800d93c:	2316      	movs	r3, #22
 800d93e:	6003      	str	r3, [r0, #0]
 800d940:	2000      	movs	r0, #0
 800d942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d946:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800da2c <_strtol_l.constprop.0+0x100>
 800d94a:	460d      	mov	r5, r1
 800d94c:	462e      	mov	r6, r5
 800d94e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d952:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d956:	f017 0708 	ands.w	r7, r7, #8
 800d95a:	d1f7      	bne.n	800d94c <_strtol_l.constprop.0+0x20>
 800d95c:	2c2d      	cmp	r4, #45	; 0x2d
 800d95e:	d132      	bne.n	800d9c6 <_strtol_l.constprop.0+0x9a>
 800d960:	782c      	ldrb	r4, [r5, #0]
 800d962:	2701      	movs	r7, #1
 800d964:	1cb5      	adds	r5, r6, #2
 800d966:	2b00      	cmp	r3, #0
 800d968:	d05b      	beq.n	800da22 <_strtol_l.constprop.0+0xf6>
 800d96a:	2b10      	cmp	r3, #16
 800d96c:	d109      	bne.n	800d982 <_strtol_l.constprop.0+0x56>
 800d96e:	2c30      	cmp	r4, #48	; 0x30
 800d970:	d107      	bne.n	800d982 <_strtol_l.constprop.0+0x56>
 800d972:	782c      	ldrb	r4, [r5, #0]
 800d974:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d978:	2c58      	cmp	r4, #88	; 0x58
 800d97a:	d14d      	bne.n	800da18 <_strtol_l.constprop.0+0xec>
 800d97c:	786c      	ldrb	r4, [r5, #1]
 800d97e:	2310      	movs	r3, #16
 800d980:	3502      	adds	r5, #2
 800d982:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d986:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d98a:	f04f 0c00 	mov.w	ip, #0
 800d98e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d992:	4666      	mov	r6, ip
 800d994:	fb03 8a19 	mls	sl, r3, r9, r8
 800d998:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d99c:	f1be 0f09 	cmp.w	lr, #9
 800d9a0:	d816      	bhi.n	800d9d0 <_strtol_l.constprop.0+0xa4>
 800d9a2:	4674      	mov	r4, lr
 800d9a4:	42a3      	cmp	r3, r4
 800d9a6:	dd24      	ble.n	800d9f2 <_strtol_l.constprop.0+0xc6>
 800d9a8:	f1bc 0f00 	cmp.w	ip, #0
 800d9ac:	db1e      	blt.n	800d9ec <_strtol_l.constprop.0+0xc0>
 800d9ae:	45b1      	cmp	r9, r6
 800d9b0:	d31c      	bcc.n	800d9ec <_strtol_l.constprop.0+0xc0>
 800d9b2:	d101      	bne.n	800d9b8 <_strtol_l.constprop.0+0x8c>
 800d9b4:	45a2      	cmp	sl, r4
 800d9b6:	db19      	blt.n	800d9ec <_strtol_l.constprop.0+0xc0>
 800d9b8:	fb06 4603 	mla	r6, r6, r3, r4
 800d9bc:	f04f 0c01 	mov.w	ip, #1
 800d9c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d9c4:	e7e8      	b.n	800d998 <_strtol_l.constprop.0+0x6c>
 800d9c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d9c8:	bf04      	itt	eq
 800d9ca:	782c      	ldrbeq	r4, [r5, #0]
 800d9cc:	1cb5      	addeq	r5, r6, #2
 800d9ce:	e7ca      	b.n	800d966 <_strtol_l.constprop.0+0x3a>
 800d9d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d9d4:	f1be 0f19 	cmp.w	lr, #25
 800d9d8:	d801      	bhi.n	800d9de <_strtol_l.constprop.0+0xb2>
 800d9da:	3c37      	subs	r4, #55	; 0x37
 800d9dc:	e7e2      	b.n	800d9a4 <_strtol_l.constprop.0+0x78>
 800d9de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d9e2:	f1be 0f19 	cmp.w	lr, #25
 800d9e6:	d804      	bhi.n	800d9f2 <_strtol_l.constprop.0+0xc6>
 800d9e8:	3c57      	subs	r4, #87	; 0x57
 800d9ea:	e7db      	b.n	800d9a4 <_strtol_l.constprop.0+0x78>
 800d9ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d9f0:	e7e6      	b.n	800d9c0 <_strtol_l.constprop.0+0x94>
 800d9f2:	f1bc 0f00 	cmp.w	ip, #0
 800d9f6:	da05      	bge.n	800da04 <_strtol_l.constprop.0+0xd8>
 800d9f8:	2322      	movs	r3, #34	; 0x22
 800d9fa:	6003      	str	r3, [r0, #0]
 800d9fc:	4646      	mov	r6, r8
 800d9fe:	b942      	cbnz	r2, 800da12 <_strtol_l.constprop.0+0xe6>
 800da00:	4630      	mov	r0, r6
 800da02:	e79e      	b.n	800d942 <_strtol_l.constprop.0+0x16>
 800da04:	b107      	cbz	r7, 800da08 <_strtol_l.constprop.0+0xdc>
 800da06:	4276      	negs	r6, r6
 800da08:	2a00      	cmp	r2, #0
 800da0a:	d0f9      	beq.n	800da00 <_strtol_l.constprop.0+0xd4>
 800da0c:	f1bc 0f00 	cmp.w	ip, #0
 800da10:	d000      	beq.n	800da14 <_strtol_l.constprop.0+0xe8>
 800da12:	1e69      	subs	r1, r5, #1
 800da14:	6011      	str	r1, [r2, #0]
 800da16:	e7f3      	b.n	800da00 <_strtol_l.constprop.0+0xd4>
 800da18:	2430      	movs	r4, #48	; 0x30
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d1b1      	bne.n	800d982 <_strtol_l.constprop.0+0x56>
 800da1e:	2308      	movs	r3, #8
 800da20:	e7af      	b.n	800d982 <_strtol_l.constprop.0+0x56>
 800da22:	2c30      	cmp	r4, #48	; 0x30
 800da24:	d0a5      	beq.n	800d972 <_strtol_l.constprop.0+0x46>
 800da26:	230a      	movs	r3, #10
 800da28:	e7ab      	b.n	800d982 <_strtol_l.constprop.0+0x56>
 800da2a:	bf00      	nop
 800da2c:	0800eb2d 	.word	0x0800eb2d

0800da30 <strtol>:
 800da30:	4613      	mov	r3, r2
 800da32:	460a      	mov	r2, r1
 800da34:	4601      	mov	r1, r0
 800da36:	4802      	ldr	r0, [pc, #8]	; (800da40 <strtol+0x10>)
 800da38:	6800      	ldr	r0, [r0, #0]
 800da3a:	f7ff bf77 	b.w	800d92c <_strtol_l.constprop.0>
 800da3e:	bf00      	nop
 800da40:	20000030 	.word	0x20000030

0800da44 <__sflush_r>:
 800da44:	898a      	ldrh	r2, [r1, #12]
 800da46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4a:	4605      	mov	r5, r0
 800da4c:	0710      	lsls	r0, r2, #28
 800da4e:	460c      	mov	r4, r1
 800da50:	d458      	bmi.n	800db04 <__sflush_r+0xc0>
 800da52:	684b      	ldr	r3, [r1, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	dc05      	bgt.n	800da64 <__sflush_r+0x20>
 800da58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	dc02      	bgt.n	800da64 <__sflush_r+0x20>
 800da5e:	2000      	movs	r0, #0
 800da60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da66:	2e00      	cmp	r6, #0
 800da68:	d0f9      	beq.n	800da5e <__sflush_r+0x1a>
 800da6a:	2300      	movs	r3, #0
 800da6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da70:	682f      	ldr	r7, [r5, #0]
 800da72:	602b      	str	r3, [r5, #0]
 800da74:	d032      	beq.n	800dadc <__sflush_r+0x98>
 800da76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	075a      	lsls	r2, r3, #29
 800da7c:	d505      	bpl.n	800da8a <__sflush_r+0x46>
 800da7e:	6863      	ldr	r3, [r4, #4]
 800da80:	1ac0      	subs	r0, r0, r3
 800da82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da84:	b10b      	cbz	r3, 800da8a <__sflush_r+0x46>
 800da86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da88:	1ac0      	subs	r0, r0, r3
 800da8a:	2300      	movs	r3, #0
 800da8c:	4602      	mov	r2, r0
 800da8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da90:	6a21      	ldr	r1, [r4, #32]
 800da92:	4628      	mov	r0, r5
 800da94:	47b0      	blx	r6
 800da96:	1c43      	adds	r3, r0, #1
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	d106      	bne.n	800daaa <__sflush_r+0x66>
 800da9c:	6829      	ldr	r1, [r5, #0]
 800da9e:	291d      	cmp	r1, #29
 800daa0:	d82c      	bhi.n	800dafc <__sflush_r+0xb8>
 800daa2:	4a2a      	ldr	r2, [pc, #168]	; (800db4c <__sflush_r+0x108>)
 800daa4:	40ca      	lsrs	r2, r1
 800daa6:	07d6      	lsls	r6, r2, #31
 800daa8:	d528      	bpl.n	800dafc <__sflush_r+0xb8>
 800daaa:	2200      	movs	r2, #0
 800daac:	6062      	str	r2, [r4, #4]
 800daae:	04d9      	lsls	r1, r3, #19
 800dab0:	6922      	ldr	r2, [r4, #16]
 800dab2:	6022      	str	r2, [r4, #0]
 800dab4:	d504      	bpl.n	800dac0 <__sflush_r+0x7c>
 800dab6:	1c42      	adds	r2, r0, #1
 800dab8:	d101      	bne.n	800dabe <__sflush_r+0x7a>
 800daba:	682b      	ldr	r3, [r5, #0]
 800dabc:	b903      	cbnz	r3, 800dac0 <__sflush_r+0x7c>
 800dabe:	6560      	str	r0, [r4, #84]	; 0x54
 800dac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dac2:	602f      	str	r7, [r5, #0]
 800dac4:	2900      	cmp	r1, #0
 800dac6:	d0ca      	beq.n	800da5e <__sflush_r+0x1a>
 800dac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dacc:	4299      	cmp	r1, r3
 800dace:	d002      	beq.n	800dad6 <__sflush_r+0x92>
 800dad0:	4628      	mov	r0, r5
 800dad2:	f7ff fd5d 	bl	800d590 <_free_r>
 800dad6:	2000      	movs	r0, #0
 800dad8:	6360      	str	r0, [r4, #52]	; 0x34
 800dada:	e7c1      	b.n	800da60 <__sflush_r+0x1c>
 800dadc:	6a21      	ldr	r1, [r4, #32]
 800dade:	2301      	movs	r3, #1
 800dae0:	4628      	mov	r0, r5
 800dae2:	47b0      	blx	r6
 800dae4:	1c41      	adds	r1, r0, #1
 800dae6:	d1c7      	bne.n	800da78 <__sflush_r+0x34>
 800dae8:	682b      	ldr	r3, [r5, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d0c4      	beq.n	800da78 <__sflush_r+0x34>
 800daee:	2b1d      	cmp	r3, #29
 800daf0:	d001      	beq.n	800daf6 <__sflush_r+0xb2>
 800daf2:	2b16      	cmp	r3, #22
 800daf4:	d101      	bne.n	800dafa <__sflush_r+0xb6>
 800daf6:	602f      	str	r7, [r5, #0]
 800daf8:	e7b1      	b.n	800da5e <__sflush_r+0x1a>
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db00:	81a3      	strh	r3, [r4, #12]
 800db02:	e7ad      	b.n	800da60 <__sflush_r+0x1c>
 800db04:	690f      	ldr	r7, [r1, #16]
 800db06:	2f00      	cmp	r7, #0
 800db08:	d0a9      	beq.n	800da5e <__sflush_r+0x1a>
 800db0a:	0793      	lsls	r3, r2, #30
 800db0c:	680e      	ldr	r6, [r1, #0]
 800db0e:	bf08      	it	eq
 800db10:	694b      	ldreq	r3, [r1, #20]
 800db12:	600f      	str	r7, [r1, #0]
 800db14:	bf18      	it	ne
 800db16:	2300      	movne	r3, #0
 800db18:	eba6 0807 	sub.w	r8, r6, r7
 800db1c:	608b      	str	r3, [r1, #8]
 800db1e:	f1b8 0f00 	cmp.w	r8, #0
 800db22:	dd9c      	ble.n	800da5e <__sflush_r+0x1a>
 800db24:	6a21      	ldr	r1, [r4, #32]
 800db26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db28:	4643      	mov	r3, r8
 800db2a:	463a      	mov	r2, r7
 800db2c:	4628      	mov	r0, r5
 800db2e:	47b0      	blx	r6
 800db30:	2800      	cmp	r0, #0
 800db32:	dc06      	bgt.n	800db42 <__sflush_r+0xfe>
 800db34:	89a3      	ldrh	r3, [r4, #12]
 800db36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db3a:	81a3      	strh	r3, [r4, #12]
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db40:	e78e      	b.n	800da60 <__sflush_r+0x1c>
 800db42:	4407      	add	r7, r0
 800db44:	eba8 0800 	sub.w	r8, r8, r0
 800db48:	e7e9      	b.n	800db1e <__sflush_r+0xda>
 800db4a:	bf00      	nop
 800db4c:	20400001 	.word	0x20400001

0800db50 <_fflush_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	690b      	ldr	r3, [r1, #16]
 800db54:	4605      	mov	r5, r0
 800db56:	460c      	mov	r4, r1
 800db58:	b913      	cbnz	r3, 800db60 <_fflush_r+0x10>
 800db5a:	2500      	movs	r5, #0
 800db5c:	4628      	mov	r0, r5
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	b118      	cbz	r0, 800db6a <_fflush_r+0x1a>
 800db62:	6983      	ldr	r3, [r0, #24]
 800db64:	b90b      	cbnz	r3, 800db6a <_fflush_r+0x1a>
 800db66:	f000 f887 	bl	800dc78 <__sinit>
 800db6a:	4b14      	ldr	r3, [pc, #80]	; (800dbbc <_fflush_r+0x6c>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	d11b      	bne.n	800dba8 <_fflush_r+0x58>
 800db70:	686c      	ldr	r4, [r5, #4]
 800db72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d0ef      	beq.n	800db5a <_fflush_r+0xa>
 800db7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db7c:	07d0      	lsls	r0, r2, #31
 800db7e:	d404      	bmi.n	800db8a <_fflush_r+0x3a>
 800db80:	0599      	lsls	r1, r3, #22
 800db82:	d402      	bmi.n	800db8a <_fflush_r+0x3a>
 800db84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db86:	f000 f915 	bl	800ddb4 <__retarget_lock_acquire_recursive>
 800db8a:	4628      	mov	r0, r5
 800db8c:	4621      	mov	r1, r4
 800db8e:	f7ff ff59 	bl	800da44 <__sflush_r>
 800db92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db94:	07da      	lsls	r2, r3, #31
 800db96:	4605      	mov	r5, r0
 800db98:	d4e0      	bmi.n	800db5c <_fflush_r+0xc>
 800db9a:	89a3      	ldrh	r3, [r4, #12]
 800db9c:	059b      	lsls	r3, r3, #22
 800db9e:	d4dd      	bmi.n	800db5c <_fflush_r+0xc>
 800dba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba2:	f000 f908 	bl	800ddb6 <__retarget_lock_release_recursive>
 800dba6:	e7d9      	b.n	800db5c <_fflush_r+0xc>
 800dba8:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <_fflush_r+0x70>)
 800dbaa:	429c      	cmp	r4, r3
 800dbac:	d101      	bne.n	800dbb2 <_fflush_r+0x62>
 800dbae:	68ac      	ldr	r4, [r5, #8]
 800dbb0:	e7df      	b.n	800db72 <_fflush_r+0x22>
 800dbb2:	4b04      	ldr	r3, [pc, #16]	; (800dbc4 <_fflush_r+0x74>)
 800dbb4:	429c      	cmp	r4, r3
 800dbb6:	bf08      	it	eq
 800dbb8:	68ec      	ldreq	r4, [r5, #12]
 800dbba:	e7da      	b.n	800db72 <_fflush_r+0x22>
 800dbbc:	0800ec50 	.word	0x0800ec50
 800dbc0:	0800ec70 	.word	0x0800ec70
 800dbc4:	0800ec30 	.word	0x0800ec30

0800dbc8 <std>:
 800dbc8:	2300      	movs	r3, #0
 800dbca:	b510      	push	{r4, lr}
 800dbcc:	4604      	mov	r4, r0
 800dbce:	e9c0 3300 	strd	r3, r3, [r0]
 800dbd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbd6:	6083      	str	r3, [r0, #8]
 800dbd8:	8181      	strh	r1, [r0, #12]
 800dbda:	6643      	str	r3, [r0, #100]	; 0x64
 800dbdc:	81c2      	strh	r2, [r0, #14]
 800dbde:	6183      	str	r3, [r0, #24]
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	2208      	movs	r2, #8
 800dbe4:	305c      	adds	r0, #92	; 0x5c
 800dbe6:	f7ff fccb 	bl	800d580 <memset>
 800dbea:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <std+0x38>)
 800dbec:	6263      	str	r3, [r4, #36]	; 0x24
 800dbee:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <std+0x3c>)
 800dbf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbf2:	4b05      	ldr	r3, [pc, #20]	; (800dc08 <std+0x40>)
 800dbf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbf6:	4b05      	ldr	r3, [pc, #20]	; (800dc0c <std+0x44>)
 800dbf8:	6224      	str	r4, [r4, #32]
 800dbfa:	6323      	str	r3, [r4, #48]	; 0x30
 800dbfc:	bd10      	pop	{r4, pc}
 800dbfe:	bf00      	nop
 800dc00:	0800e479 	.word	0x0800e479
 800dc04:	0800e49b 	.word	0x0800e49b
 800dc08:	0800e4d3 	.word	0x0800e4d3
 800dc0c:	0800e4f7 	.word	0x0800e4f7

0800dc10 <_cleanup_r>:
 800dc10:	4901      	ldr	r1, [pc, #4]	; (800dc18 <_cleanup_r+0x8>)
 800dc12:	f000 b8af 	b.w	800dd74 <_fwalk_reent>
 800dc16:	bf00      	nop
 800dc18:	0800db51 	.word	0x0800db51

0800dc1c <__sfmoreglue>:
 800dc1c:	b570      	push	{r4, r5, r6, lr}
 800dc1e:	2268      	movs	r2, #104	; 0x68
 800dc20:	1e4d      	subs	r5, r1, #1
 800dc22:	4355      	muls	r5, r2
 800dc24:	460e      	mov	r6, r1
 800dc26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc2a:	f7ff fd1d 	bl	800d668 <_malloc_r>
 800dc2e:	4604      	mov	r4, r0
 800dc30:	b140      	cbz	r0, 800dc44 <__sfmoreglue+0x28>
 800dc32:	2100      	movs	r1, #0
 800dc34:	e9c0 1600 	strd	r1, r6, [r0]
 800dc38:	300c      	adds	r0, #12
 800dc3a:	60a0      	str	r0, [r4, #8]
 800dc3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc40:	f7ff fc9e 	bl	800d580 <memset>
 800dc44:	4620      	mov	r0, r4
 800dc46:	bd70      	pop	{r4, r5, r6, pc}

0800dc48 <__sfp_lock_acquire>:
 800dc48:	4801      	ldr	r0, [pc, #4]	; (800dc50 <__sfp_lock_acquire+0x8>)
 800dc4a:	f000 b8b3 	b.w	800ddb4 <__retarget_lock_acquire_recursive>
 800dc4e:	bf00      	nop
 800dc50:	200039f1 	.word	0x200039f1

0800dc54 <__sfp_lock_release>:
 800dc54:	4801      	ldr	r0, [pc, #4]	; (800dc5c <__sfp_lock_release+0x8>)
 800dc56:	f000 b8ae 	b.w	800ddb6 <__retarget_lock_release_recursive>
 800dc5a:	bf00      	nop
 800dc5c:	200039f1 	.word	0x200039f1

0800dc60 <__sinit_lock_acquire>:
 800dc60:	4801      	ldr	r0, [pc, #4]	; (800dc68 <__sinit_lock_acquire+0x8>)
 800dc62:	f000 b8a7 	b.w	800ddb4 <__retarget_lock_acquire_recursive>
 800dc66:	bf00      	nop
 800dc68:	200039f2 	.word	0x200039f2

0800dc6c <__sinit_lock_release>:
 800dc6c:	4801      	ldr	r0, [pc, #4]	; (800dc74 <__sinit_lock_release+0x8>)
 800dc6e:	f000 b8a2 	b.w	800ddb6 <__retarget_lock_release_recursive>
 800dc72:	bf00      	nop
 800dc74:	200039f2 	.word	0x200039f2

0800dc78 <__sinit>:
 800dc78:	b510      	push	{r4, lr}
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	f7ff fff0 	bl	800dc60 <__sinit_lock_acquire>
 800dc80:	69a3      	ldr	r3, [r4, #24]
 800dc82:	b11b      	cbz	r3, 800dc8c <__sinit+0x14>
 800dc84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc88:	f7ff bff0 	b.w	800dc6c <__sinit_lock_release>
 800dc8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc90:	6523      	str	r3, [r4, #80]	; 0x50
 800dc92:	4b13      	ldr	r3, [pc, #76]	; (800dce0 <__sinit+0x68>)
 800dc94:	4a13      	ldr	r2, [pc, #76]	; (800dce4 <__sinit+0x6c>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc9a:	42a3      	cmp	r3, r4
 800dc9c:	bf04      	itt	eq
 800dc9e:	2301      	moveq	r3, #1
 800dca0:	61a3      	streq	r3, [r4, #24]
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 f820 	bl	800dce8 <__sfp>
 800dca8:	6060      	str	r0, [r4, #4]
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f000 f81c 	bl	800dce8 <__sfp>
 800dcb0:	60a0      	str	r0, [r4, #8]
 800dcb2:	4620      	mov	r0, r4
 800dcb4:	f000 f818 	bl	800dce8 <__sfp>
 800dcb8:	2200      	movs	r2, #0
 800dcba:	60e0      	str	r0, [r4, #12]
 800dcbc:	2104      	movs	r1, #4
 800dcbe:	6860      	ldr	r0, [r4, #4]
 800dcc0:	f7ff ff82 	bl	800dbc8 <std>
 800dcc4:	68a0      	ldr	r0, [r4, #8]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	2109      	movs	r1, #9
 800dcca:	f7ff ff7d 	bl	800dbc8 <std>
 800dcce:	68e0      	ldr	r0, [r4, #12]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	2112      	movs	r1, #18
 800dcd4:	f7ff ff78 	bl	800dbc8 <std>
 800dcd8:	2301      	movs	r3, #1
 800dcda:	61a3      	str	r3, [r4, #24]
 800dcdc:	e7d2      	b.n	800dc84 <__sinit+0xc>
 800dcde:	bf00      	nop
 800dce0:	0800eb28 	.word	0x0800eb28
 800dce4:	0800dc11 	.word	0x0800dc11

0800dce8 <__sfp>:
 800dce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcea:	4607      	mov	r7, r0
 800dcec:	f7ff ffac 	bl	800dc48 <__sfp_lock_acquire>
 800dcf0:	4b1e      	ldr	r3, [pc, #120]	; (800dd6c <__sfp+0x84>)
 800dcf2:	681e      	ldr	r6, [r3, #0]
 800dcf4:	69b3      	ldr	r3, [r6, #24]
 800dcf6:	b913      	cbnz	r3, 800dcfe <__sfp+0x16>
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f7ff ffbd 	bl	800dc78 <__sinit>
 800dcfe:	3648      	adds	r6, #72	; 0x48
 800dd00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	d503      	bpl.n	800dd10 <__sfp+0x28>
 800dd08:	6833      	ldr	r3, [r6, #0]
 800dd0a:	b30b      	cbz	r3, 800dd50 <__sfp+0x68>
 800dd0c:	6836      	ldr	r6, [r6, #0]
 800dd0e:	e7f7      	b.n	800dd00 <__sfp+0x18>
 800dd10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd14:	b9d5      	cbnz	r5, 800dd4c <__sfp+0x64>
 800dd16:	4b16      	ldr	r3, [pc, #88]	; (800dd70 <__sfp+0x88>)
 800dd18:	60e3      	str	r3, [r4, #12]
 800dd1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd1e:	6665      	str	r5, [r4, #100]	; 0x64
 800dd20:	f000 f847 	bl	800ddb2 <__retarget_lock_init_recursive>
 800dd24:	f7ff ff96 	bl	800dc54 <__sfp_lock_release>
 800dd28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd30:	6025      	str	r5, [r4, #0]
 800dd32:	61a5      	str	r5, [r4, #24]
 800dd34:	2208      	movs	r2, #8
 800dd36:	4629      	mov	r1, r5
 800dd38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd3c:	f7ff fc20 	bl	800d580 <memset>
 800dd40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd48:	4620      	mov	r0, r4
 800dd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd4c:	3468      	adds	r4, #104	; 0x68
 800dd4e:	e7d9      	b.n	800dd04 <__sfp+0x1c>
 800dd50:	2104      	movs	r1, #4
 800dd52:	4638      	mov	r0, r7
 800dd54:	f7ff ff62 	bl	800dc1c <__sfmoreglue>
 800dd58:	4604      	mov	r4, r0
 800dd5a:	6030      	str	r0, [r6, #0]
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	d1d5      	bne.n	800dd0c <__sfp+0x24>
 800dd60:	f7ff ff78 	bl	800dc54 <__sfp_lock_release>
 800dd64:	230c      	movs	r3, #12
 800dd66:	603b      	str	r3, [r7, #0]
 800dd68:	e7ee      	b.n	800dd48 <__sfp+0x60>
 800dd6a:	bf00      	nop
 800dd6c:	0800eb28 	.word	0x0800eb28
 800dd70:	ffff0001 	.word	0xffff0001

0800dd74 <_fwalk_reent>:
 800dd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd78:	4606      	mov	r6, r0
 800dd7a:	4688      	mov	r8, r1
 800dd7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd80:	2700      	movs	r7, #0
 800dd82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd86:	f1b9 0901 	subs.w	r9, r9, #1
 800dd8a:	d505      	bpl.n	800dd98 <_fwalk_reent+0x24>
 800dd8c:	6824      	ldr	r4, [r4, #0]
 800dd8e:	2c00      	cmp	r4, #0
 800dd90:	d1f7      	bne.n	800dd82 <_fwalk_reent+0xe>
 800dd92:	4638      	mov	r0, r7
 800dd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd98:	89ab      	ldrh	r3, [r5, #12]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d907      	bls.n	800ddae <_fwalk_reent+0x3a>
 800dd9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dda2:	3301      	adds	r3, #1
 800dda4:	d003      	beq.n	800ddae <_fwalk_reent+0x3a>
 800dda6:	4629      	mov	r1, r5
 800dda8:	4630      	mov	r0, r6
 800ddaa:	47c0      	blx	r8
 800ddac:	4307      	orrs	r7, r0
 800ddae:	3568      	adds	r5, #104	; 0x68
 800ddb0:	e7e9      	b.n	800dd86 <_fwalk_reent+0x12>

0800ddb2 <__retarget_lock_init_recursive>:
 800ddb2:	4770      	bx	lr

0800ddb4 <__retarget_lock_acquire_recursive>:
 800ddb4:	4770      	bx	lr

0800ddb6 <__retarget_lock_release_recursive>:
 800ddb6:	4770      	bx	lr

0800ddb8 <__swhatbuf_r>:
 800ddb8:	b570      	push	{r4, r5, r6, lr}
 800ddba:	460e      	mov	r6, r1
 800ddbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	b096      	sub	sp, #88	; 0x58
 800ddc4:	4614      	mov	r4, r2
 800ddc6:	461d      	mov	r5, r3
 800ddc8:	da08      	bge.n	800dddc <__swhatbuf_r+0x24>
 800ddca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	602a      	str	r2, [r5, #0]
 800ddd2:	061a      	lsls	r2, r3, #24
 800ddd4:	d410      	bmi.n	800ddf8 <__swhatbuf_r+0x40>
 800ddd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddda:	e00e      	b.n	800ddfa <__swhatbuf_r+0x42>
 800dddc:	466a      	mov	r2, sp
 800ddde:	f000 fc71 	bl	800e6c4 <_fstat_r>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	dbf1      	blt.n	800ddca <__swhatbuf_r+0x12>
 800dde6:	9a01      	ldr	r2, [sp, #4]
 800dde8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddf0:	425a      	negs	r2, r3
 800ddf2:	415a      	adcs	r2, r3
 800ddf4:	602a      	str	r2, [r5, #0]
 800ddf6:	e7ee      	b.n	800ddd6 <__swhatbuf_r+0x1e>
 800ddf8:	2340      	movs	r3, #64	; 0x40
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	b016      	add	sp, #88	; 0x58
 800de00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800de04 <__smakebuf_r>:
 800de04:	898b      	ldrh	r3, [r1, #12]
 800de06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de08:	079d      	lsls	r5, r3, #30
 800de0a:	4606      	mov	r6, r0
 800de0c:	460c      	mov	r4, r1
 800de0e:	d507      	bpl.n	800de20 <__smakebuf_r+0x1c>
 800de10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	6123      	str	r3, [r4, #16]
 800de18:	2301      	movs	r3, #1
 800de1a:	6163      	str	r3, [r4, #20]
 800de1c:	b002      	add	sp, #8
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	ab01      	add	r3, sp, #4
 800de22:	466a      	mov	r2, sp
 800de24:	f7ff ffc8 	bl	800ddb8 <__swhatbuf_r>
 800de28:	9900      	ldr	r1, [sp, #0]
 800de2a:	4605      	mov	r5, r0
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7ff fc1b 	bl	800d668 <_malloc_r>
 800de32:	b948      	cbnz	r0, 800de48 <__smakebuf_r+0x44>
 800de34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de38:	059a      	lsls	r2, r3, #22
 800de3a:	d4ef      	bmi.n	800de1c <__smakebuf_r+0x18>
 800de3c:	f023 0303 	bic.w	r3, r3, #3
 800de40:	f043 0302 	orr.w	r3, r3, #2
 800de44:	81a3      	strh	r3, [r4, #12]
 800de46:	e7e3      	b.n	800de10 <__smakebuf_r+0xc>
 800de48:	4b0d      	ldr	r3, [pc, #52]	; (800de80 <__smakebuf_r+0x7c>)
 800de4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800de4c:	89a3      	ldrh	r3, [r4, #12]
 800de4e:	6020      	str	r0, [r4, #0]
 800de50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de54:	81a3      	strh	r3, [r4, #12]
 800de56:	9b00      	ldr	r3, [sp, #0]
 800de58:	6163      	str	r3, [r4, #20]
 800de5a:	9b01      	ldr	r3, [sp, #4]
 800de5c:	6120      	str	r0, [r4, #16]
 800de5e:	b15b      	cbz	r3, 800de78 <__smakebuf_r+0x74>
 800de60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de64:	4630      	mov	r0, r6
 800de66:	f000 fc3f 	bl	800e6e8 <_isatty_r>
 800de6a:	b128      	cbz	r0, 800de78 <__smakebuf_r+0x74>
 800de6c:	89a3      	ldrh	r3, [r4, #12]
 800de6e:	f023 0303 	bic.w	r3, r3, #3
 800de72:	f043 0301 	orr.w	r3, r3, #1
 800de76:	81a3      	strh	r3, [r4, #12]
 800de78:	89a0      	ldrh	r0, [r4, #12]
 800de7a:	4305      	orrs	r5, r0
 800de7c:	81a5      	strh	r5, [r4, #12]
 800de7e:	e7cd      	b.n	800de1c <__smakebuf_r+0x18>
 800de80:	0800dc11 	.word	0x0800dc11

0800de84 <__malloc_lock>:
 800de84:	4801      	ldr	r0, [pc, #4]	; (800de8c <__malloc_lock+0x8>)
 800de86:	f7ff bf95 	b.w	800ddb4 <__retarget_lock_acquire_recursive>
 800de8a:	bf00      	nop
 800de8c:	200039f0 	.word	0x200039f0

0800de90 <__malloc_unlock>:
 800de90:	4801      	ldr	r0, [pc, #4]	; (800de98 <__malloc_unlock+0x8>)
 800de92:	f7ff bf90 	b.w	800ddb6 <__retarget_lock_release_recursive>
 800de96:	bf00      	nop
 800de98:	200039f0 	.word	0x200039f0

0800de9c <__sfputc_r>:
 800de9c:	6893      	ldr	r3, [r2, #8]
 800de9e:	3b01      	subs	r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	b410      	push	{r4}
 800dea4:	6093      	str	r3, [r2, #8]
 800dea6:	da08      	bge.n	800deba <__sfputc_r+0x1e>
 800dea8:	6994      	ldr	r4, [r2, #24]
 800deaa:	42a3      	cmp	r3, r4
 800deac:	db01      	blt.n	800deb2 <__sfputc_r+0x16>
 800deae:	290a      	cmp	r1, #10
 800deb0:	d103      	bne.n	800deba <__sfputc_r+0x1e>
 800deb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deb6:	f000 bb23 	b.w	800e500 <__swbuf_r>
 800deba:	6813      	ldr	r3, [r2, #0]
 800debc:	1c58      	adds	r0, r3, #1
 800debe:	6010      	str	r0, [r2, #0]
 800dec0:	7019      	strb	r1, [r3, #0]
 800dec2:	4608      	mov	r0, r1
 800dec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <__sfputs_r>:
 800deca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800decc:	4606      	mov	r6, r0
 800dece:	460f      	mov	r7, r1
 800ded0:	4614      	mov	r4, r2
 800ded2:	18d5      	adds	r5, r2, r3
 800ded4:	42ac      	cmp	r4, r5
 800ded6:	d101      	bne.n	800dedc <__sfputs_r+0x12>
 800ded8:	2000      	movs	r0, #0
 800deda:	e007      	b.n	800deec <__sfputs_r+0x22>
 800dedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee0:	463a      	mov	r2, r7
 800dee2:	4630      	mov	r0, r6
 800dee4:	f7ff ffda 	bl	800de9c <__sfputc_r>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d1f3      	bne.n	800ded4 <__sfputs_r+0xa>
 800deec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800def0 <_vfiprintf_r>:
 800def0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def4:	460d      	mov	r5, r1
 800def6:	b09d      	sub	sp, #116	; 0x74
 800def8:	4614      	mov	r4, r2
 800defa:	4698      	mov	r8, r3
 800defc:	4606      	mov	r6, r0
 800defe:	b118      	cbz	r0, 800df08 <_vfiprintf_r+0x18>
 800df00:	6983      	ldr	r3, [r0, #24]
 800df02:	b90b      	cbnz	r3, 800df08 <_vfiprintf_r+0x18>
 800df04:	f7ff feb8 	bl	800dc78 <__sinit>
 800df08:	4b89      	ldr	r3, [pc, #548]	; (800e130 <_vfiprintf_r+0x240>)
 800df0a:	429d      	cmp	r5, r3
 800df0c:	d11b      	bne.n	800df46 <_vfiprintf_r+0x56>
 800df0e:	6875      	ldr	r5, [r6, #4]
 800df10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df12:	07d9      	lsls	r1, r3, #31
 800df14:	d405      	bmi.n	800df22 <_vfiprintf_r+0x32>
 800df16:	89ab      	ldrh	r3, [r5, #12]
 800df18:	059a      	lsls	r2, r3, #22
 800df1a:	d402      	bmi.n	800df22 <_vfiprintf_r+0x32>
 800df1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df1e:	f7ff ff49 	bl	800ddb4 <__retarget_lock_acquire_recursive>
 800df22:	89ab      	ldrh	r3, [r5, #12]
 800df24:	071b      	lsls	r3, r3, #28
 800df26:	d501      	bpl.n	800df2c <_vfiprintf_r+0x3c>
 800df28:	692b      	ldr	r3, [r5, #16]
 800df2a:	b9eb      	cbnz	r3, 800df68 <_vfiprintf_r+0x78>
 800df2c:	4629      	mov	r1, r5
 800df2e:	4630      	mov	r0, r6
 800df30:	f000 fb4a 	bl	800e5c8 <__swsetup_r>
 800df34:	b1c0      	cbz	r0, 800df68 <_vfiprintf_r+0x78>
 800df36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df38:	07dc      	lsls	r4, r3, #31
 800df3a:	d50e      	bpl.n	800df5a <_vfiprintf_r+0x6a>
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df40:	b01d      	add	sp, #116	; 0x74
 800df42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df46:	4b7b      	ldr	r3, [pc, #492]	; (800e134 <_vfiprintf_r+0x244>)
 800df48:	429d      	cmp	r5, r3
 800df4a:	d101      	bne.n	800df50 <_vfiprintf_r+0x60>
 800df4c:	68b5      	ldr	r5, [r6, #8]
 800df4e:	e7df      	b.n	800df10 <_vfiprintf_r+0x20>
 800df50:	4b79      	ldr	r3, [pc, #484]	; (800e138 <_vfiprintf_r+0x248>)
 800df52:	429d      	cmp	r5, r3
 800df54:	bf08      	it	eq
 800df56:	68f5      	ldreq	r5, [r6, #12]
 800df58:	e7da      	b.n	800df10 <_vfiprintf_r+0x20>
 800df5a:	89ab      	ldrh	r3, [r5, #12]
 800df5c:	0598      	lsls	r0, r3, #22
 800df5e:	d4ed      	bmi.n	800df3c <_vfiprintf_r+0x4c>
 800df60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df62:	f7ff ff28 	bl	800ddb6 <__retarget_lock_release_recursive>
 800df66:	e7e9      	b.n	800df3c <_vfiprintf_r+0x4c>
 800df68:	2300      	movs	r3, #0
 800df6a:	9309      	str	r3, [sp, #36]	; 0x24
 800df6c:	2320      	movs	r3, #32
 800df6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df72:	f8cd 800c 	str.w	r8, [sp, #12]
 800df76:	2330      	movs	r3, #48	; 0x30
 800df78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e13c <_vfiprintf_r+0x24c>
 800df7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df80:	f04f 0901 	mov.w	r9, #1
 800df84:	4623      	mov	r3, r4
 800df86:	469a      	mov	sl, r3
 800df88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df8c:	b10a      	cbz	r2, 800df92 <_vfiprintf_r+0xa2>
 800df8e:	2a25      	cmp	r2, #37	; 0x25
 800df90:	d1f9      	bne.n	800df86 <_vfiprintf_r+0x96>
 800df92:	ebba 0b04 	subs.w	fp, sl, r4
 800df96:	d00b      	beq.n	800dfb0 <_vfiprintf_r+0xc0>
 800df98:	465b      	mov	r3, fp
 800df9a:	4622      	mov	r2, r4
 800df9c:	4629      	mov	r1, r5
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7ff ff93 	bl	800deca <__sfputs_r>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	f000 80aa 	beq.w	800e0fe <_vfiprintf_r+0x20e>
 800dfaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfac:	445a      	add	r2, fp
 800dfae:	9209      	str	r2, [sp, #36]	; 0x24
 800dfb0:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f000 80a2 	beq.w	800e0fe <_vfiprintf_r+0x20e>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfc4:	f10a 0a01 	add.w	sl, sl, #1
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	9307      	str	r3, [sp, #28]
 800dfcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfd0:	931a      	str	r3, [sp, #104]	; 0x68
 800dfd2:	4654      	mov	r4, sl
 800dfd4:	2205      	movs	r2, #5
 800dfd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfda:	4858      	ldr	r0, [pc, #352]	; (800e13c <_vfiprintf_r+0x24c>)
 800dfdc:	f7f2 f908 	bl	80001f0 <memchr>
 800dfe0:	9a04      	ldr	r2, [sp, #16]
 800dfe2:	b9d8      	cbnz	r0, 800e01c <_vfiprintf_r+0x12c>
 800dfe4:	06d1      	lsls	r1, r2, #27
 800dfe6:	bf44      	itt	mi
 800dfe8:	2320      	movmi	r3, #32
 800dfea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfee:	0713      	lsls	r3, r2, #28
 800dff0:	bf44      	itt	mi
 800dff2:	232b      	movmi	r3, #43	; 0x2b
 800dff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dff8:	f89a 3000 	ldrb.w	r3, [sl]
 800dffc:	2b2a      	cmp	r3, #42	; 0x2a
 800dffe:	d015      	beq.n	800e02c <_vfiprintf_r+0x13c>
 800e000:	9a07      	ldr	r2, [sp, #28]
 800e002:	4654      	mov	r4, sl
 800e004:	2000      	movs	r0, #0
 800e006:	f04f 0c0a 	mov.w	ip, #10
 800e00a:	4621      	mov	r1, r4
 800e00c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e010:	3b30      	subs	r3, #48	; 0x30
 800e012:	2b09      	cmp	r3, #9
 800e014:	d94e      	bls.n	800e0b4 <_vfiprintf_r+0x1c4>
 800e016:	b1b0      	cbz	r0, 800e046 <_vfiprintf_r+0x156>
 800e018:	9207      	str	r2, [sp, #28]
 800e01a:	e014      	b.n	800e046 <_vfiprintf_r+0x156>
 800e01c:	eba0 0308 	sub.w	r3, r0, r8
 800e020:	fa09 f303 	lsl.w	r3, r9, r3
 800e024:	4313      	orrs	r3, r2
 800e026:	9304      	str	r3, [sp, #16]
 800e028:	46a2      	mov	sl, r4
 800e02a:	e7d2      	b.n	800dfd2 <_vfiprintf_r+0xe2>
 800e02c:	9b03      	ldr	r3, [sp, #12]
 800e02e:	1d19      	adds	r1, r3, #4
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	9103      	str	r1, [sp, #12]
 800e034:	2b00      	cmp	r3, #0
 800e036:	bfbb      	ittet	lt
 800e038:	425b      	neglt	r3, r3
 800e03a:	f042 0202 	orrlt.w	r2, r2, #2
 800e03e:	9307      	strge	r3, [sp, #28]
 800e040:	9307      	strlt	r3, [sp, #28]
 800e042:	bfb8      	it	lt
 800e044:	9204      	strlt	r2, [sp, #16]
 800e046:	7823      	ldrb	r3, [r4, #0]
 800e048:	2b2e      	cmp	r3, #46	; 0x2e
 800e04a:	d10c      	bne.n	800e066 <_vfiprintf_r+0x176>
 800e04c:	7863      	ldrb	r3, [r4, #1]
 800e04e:	2b2a      	cmp	r3, #42	; 0x2a
 800e050:	d135      	bne.n	800e0be <_vfiprintf_r+0x1ce>
 800e052:	9b03      	ldr	r3, [sp, #12]
 800e054:	1d1a      	adds	r2, r3, #4
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	9203      	str	r2, [sp, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	bfb8      	it	lt
 800e05e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e062:	3402      	adds	r4, #2
 800e064:	9305      	str	r3, [sp, #20]
 800e066:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e14c <_vfiprintf_r+0x25c>
 800e06a:	7821      	ldrb	r1, [r4, #0]
 800e06c:	2203      	movs	r2, #3
 800e06e:	4650      	mov	r0, sl
 800e070:	f7f2 f8be 	bl	80001f0 <memchr>
 800e074:	b140      	cbz	r0, 800e088 <_vfiprintf_r+0x198>
 800e076:	2340      	movs	r3, #64	; 0x40
 800e078:	eba0 000a 	sub.w	r0, r0, sl
 800e07c:	fa03 f000 	lsl.w	r0, r3, r0
 800e080:	9b04      	ldr	r3, [sp, #16]
 800e082:	4303      	orrs	r3, r0
 800e084:	3401      	adds	r4, #1
 800e086:	9304      	str	r3, [sp, #16]
 800e088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e08c:	482c      	ldr	r0, [pc, #176]	; (800e140 <_vfiprintf_r+0x250>)
 800e08e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e092:	2206      	movs	r2, #6
 800e094:	f7f2 f8ac 	bl	80001f0 <memchr>
 800e098:	2800      	cmp	r0, #0
 800e09a:	d03f      	beq.n	800e11c <_vfiprintf_r+0x22c>
 800e09c:	4b29      	ldr	r3, [pc, #164]	; (800e144 <_vfiprintf_r+0x254>)
 800e09e:	bb1b      	cbnz	r3, 800e0e8 <_vfiprintf_r+0x1f8>
 800e0a0:	9b03      	ldr	r3, [sp, #12]
 800e0a2:	3307      	adds	r3, #7
 800e0a4:	f023 0307 	bic.w	r3, r3, #7
 800e0a8:	3308      	adds	r3, #8
 800e0aa:	9303      	str	r3, [sp, #12]
 800e0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ae:	443b      	add	r3, r7
 800e0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b2:	e767      	b.n	800df84 <_vfiprintf_r+0x94>
 800e0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	2001      	movs	r0, #1
 800e0bc:	e7a5      	b.n	800e00a <_vfiprintf_r+0x11a>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	3401      	adds	r4, #1
 800e0c2:	9305      	str	r3, [sp, #20]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	f04f 0c0a 	mov.w	ip, #10
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0d0:	3a30      	subs	r2, #48	; 0x30
 800e0d2:	2a09      	cmp	r2, #9
 800e0d4:	d903      	bls.n	800e0de <_vfiprintf_r+0x1ee>
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d0c5      	beq.n	800e066 <_vfiprintf_r+0x176>
 800e0da:	9105      	str	r1, [sp, #20]
 800e0dc:	e7c3      	b.n	800e066 <_vfiprintf_r+0x176>
 800e0de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e7f0      	b.n	800e0ca <_vfiprintf_r+0x1da>
 800e0e8:	ab03      	add	r3, sp, #12
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	462a      	mov	r2, r5
 800e0ee:	4b16      	ldr	r3, [pc, #88]	; (800e148 <_vfiprintf_r+0x258>)
 800e0f0:	a904      	add	r1, sp, #16
 800e0f2:	4630      	mov	r0, r6
 800e0f4:	f3af 8000 	nop.w
 800e0f8:	4607      	mov	r7, r0
 800e0fa:	1c78      	adds	r0, r7, #1
 800e0fc:	d1d6      	bne.n	800e0ac <_vfiprintf_r+0x1bc>
 800e0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e100:	07d9      	lsls	r1, r3, #31
 800e102:	d405      	bmi.n	800e110 <_vfiprintf_r+0x220>
 800e104:	89ab      	ldrh	r3, [r5, #12]
 800e106:	059a      	lsls	r2, r3, #22
 800e108:	d402      	bmi.n	800e110 <_vfiprintf_r+0x220>
 800e10a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e10c:	f7ff fe53 	bl	800ddb6 <__retarget_lock_release_recursive>
 800e110:	89ab      	ldrh	r3, [r5, #12]
 800e112:	065b      	lsls	r3, r3, #25
 800e114:	f53f af12 	bmi.w	800df3c <_vfiprintf_r+0x4c>
 800e118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e11a:	e711      	b.n	800df40 <_vfiprintf_r+0x50>
 800e11c:	ab03      	add	r3, sp, #12
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	462a      	mov	r2, r5
 800e122:	4b09      	ldr	r3, [pc, #36]	; (800e148 <_vfiprintf_r+0x258>)
 800e124:	a904      	add	r1, sp, #16
 800e126:	4630      	mov	r0, r6
 800e128:	f000 f880 	bl	800e22c <_printf_i>
 800e12c:	e7e4      	b.n	800e0f8 <_vfiprintf_r+0x208>
 800e12e:	bf00      	nop
 800e130:	0800ec50 	.word	0x0800ec50
 800e134:	0800ec70 	.word	0x0800ec70
 800e138:	0800ec30 	.word	0x0800ec30
 800e13c:	0800ec90 	.word	0x0800ec90
 800e140:	0800ec9a 	.word	0x0800ec9a
 800e144:	00000000 	.word	0x00000000
 800e148:	0800decb 	.word	0x0800decb
 800e14c:	0800ec96 	.word	0x0800ec96

0800e150 <_printf_common>:
 800e150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e154:	4616      	mov	r6, r2
 800e156:	4699      	mov	r9, r3
 800e158:	688a      	ldr	r2, [r1, #8]
 800e15a:	690b      	ldr	r3, [r1, #16]
 800e15c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e160:	4293      	cmp	r3, r2
 800e162:	bfb8      	it	lt
 800e164:	4613      	movlt	r3, r2
 800e166:	6033      	str	r3, [r6, #0]
 800e168:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e16c:	4607      	mov	r7, r0
 800e16e:	460c      	mov	r4, r1
 800e170:	b10a      	cbz	r2, 800e176 <_printf_common+0x26>
 800e172:	3301      	adds	r3, #1
 800e174:	6033      	str	r3, [r6, #0]
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	0699      	lsls	r1, r3, #26
 800e17a:	bf42      	ittt	mi
 800e17c:	6833      	ldrmi	r3, [r6, #0]
 800e17e:	3302      	addmi	r3, #2
 800e180:	6033      	strmi	r3, [r6, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	f015 0506 	ands.w	r5, r5, #6
 800e188:	d106      	bne.n	800e198 <_printf_common+0x48>
 800e18a:	f104 0a19 	add.w	sl, r4, #25
 800e18e:	68e3      	ldr	r3, [r4, #12]
 800e190:	6832      	ldr	r2, [r6, #0]
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	42ab      	cmp	r3, r5
 800e196:	dc26      	bgt.n	800e1e6 <_printf_common+0x96>
 800e198:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e19c:	1e13      	subs	r3, r2, #0
 800e19e:	6822      	ldr	r2, [r4, #0]
 800e1a0:	bf18      	it	ne
 800e1a2:	2301      	movne	r3, #1
 800e1a4:	0692      	lsls	r2, r2, #26
 800e1a6:	d42b      	bmi.n	800e200 <_printf_common+0xb0>
 800e1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1ac:	4649      	mov	r1, r9
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	47c0      	blx	r8
 800e1b2:	3001      	adds	r0, #1
 800e1b4:	d01e      	beq.n	800e1f4 <_printf_common+0xa4>
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	68e5      	ldr	r5, [r4, #12]
 800e1ba:	6832      	ldr	r2, [r6, #0]
 800e1bc:	f003 0306 	and.w	r3, r3, #6
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	bf08      	it	eq
 800e1c4:	1aad      	subeq	r5, r5, r2
 800e1c6:	68a3      	ldr	r3, [r4, #8]
 800e1c8:	6922      	ldr	r2, [r4, #16]
 800e1ca:	bf0c      	ite	eq
 800e1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1d0:	2500      	movne	r5, #0
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	bfc4      	itt	gt
 800e1d6:	1a9b      	subgt	r3, r3, r2
 800e1d8:	18ed      	addgt	r5, r5, r3
 800e1da:	2600      	movs	r6, #0
 800e1dc:	341a      	adds	r4, #26
 800e1de:	42b5      	cmp	r5, r6
 800e1e0:	d11a      	bne.n	800e218 <_printf_common+0xc8>
 800e1e2:	2000      	movs	r0, #0
 800e1e4:	e008      	b.n	800e1f8 <_printf_common+0xa8>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	4652      	mov	r2, sl
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	4638      	mov	r0, r7
 800e1ee:	47c0      	blx	r8
 800e1f0:	3001      	adds	r0, #1
 800e1f2:	d103      	bne.n	800e1fc <_printf_common+0xac>
 800e1f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fc:	3501      	adds	r5, #1
 800e1fe:	e7c6      	b.n	800e18e <_printf_common+0x3e>
 800e200:	18e1      	adds	r1, r4, r3
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	2030      	movs	r0, #48	; 0x30
 800e206:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e20a:	4422      	add	r2, r4
 800e20c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e210:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e214:	3302      	adds	r3, #2
 800e216:	e7c7      	b.n	800e1a8 <_printf_common+0x58>
 800e218:	2301      	movs	r3, #1
 800e21a:	4622      	mov	r2, r4
 800e21c:	4649      	mov	r1, r9
 800e21e:	4638      	mov	r0, r7
 800e220:	47c0      	blx	r8
 800e222:	3001      	adds	r0, #1
 800e224:	d0e6      	beq.n	800e1f4 <_printf_common+0xa4>
 800e226:	3601      	adds	r6, #1
 800e228:	e7d9      	b.n	800e1de <_printf_common+0x8e>
	...

0800e22c <_printf_i>:
 800e22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	7e0f      	ldrb	r7, [r1, #24]
 800e232:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e234:	2f78      	cmp	r7, #120	; 0x78
 800e236:	4691      	mov	r9, r2
 800e238:	4680      	mov	r8, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	469a      	mov	sl, r3
 800e23e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e242:	d807      	bhi.n	800e254 <_printf_i+0x28>
 800e244:	2f62      	cmp	r7, #98	; 0x62
 800e246:	d80a      	bhi.n	800e25e <_printf_i+0x32>
 800e248:	2f00      	cmp	r7, #0
 800e24a:	f000 80d8 	beq.w	800e3fe <_printf_i+0x1d2>
 800e24e:	2f58      	cmp	r7, #88	; 0x58
 800e250:	f000 80a3 	beq.w	800e39a <_printf_i+0x16e>
 800e254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e25c:	e03a      	b.n	800e2d4 <_printf_i+0xa8>
 800e25e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e262:	2b15      	cmp	r3, #21
 800e264:	d8f6      	bhi.n	800e254 <_printf_i+0x28>
 800e266:	a101      	add	r1, pc, #4	; (adr r1, 800e26c <_printf_i+0x40>)
 800e268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e26c:	0800e2c5 	.word	0x0800e2c5
 800e270:	0800e2d9 	.word	0x0800e2d9
 800e274:	0800e255 	.word	0x0800e255
 800e278:	0800e255 	.word	0x0800e255
 800e27c:	0800e255 	.word	0x0800e255
 800e280:	0800e255 	.word	0x0800e255
 800e284:	0800e2d9 	.word	0x0800e2d9
 800e288:	0800e255 	.word	0x0800e255
 800e28c:	0800e255 	.word	0x0800e255
 800e290:	0800e255 	.word	0x0800e255
 800e294:	0800e255 	.word	0x0800e255
 800e298:	0800e3e5 	.word	0x0800e3e5
 800e29c:	0800e309 	.word	0x0800e309
 800e2a0:	0800e3c7 	.word	0x0800e3c7
 800e2a4:	0800e255 	.word	0x0800e255
 800e2a8:	0800e255 	.word	0x0800e255
 800e2ac:	0800e407 	.word	0x0800e407
 800e2b0:	0800e255 	.word	0x0800e255
 800e2b4:	0800e309 	.word	0x0800e309
 800e2b8:	0800e255 	.word	0x0800e255
 800e2bc:	0800e255 	.word	0x0800e255
 800e2c0:	0800e3cf 	.word	0x0800e3cf
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	1d1a      	adds	r2, r3, #4
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	602a      	str	r2, [r5, #0]
 800e2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	e0a3      	b.n	800e420 <_printf_i+0x1f4>
 800e2d8:	6820      	ldr	r0, [r4, #0]
 800e2da:	6829      	ldr	r1, [r5, #0]
 800e2dc:	0606      	lsls	r6, r0, #24
 800e2de:	f101 0304 	add.w	r3, r1, #4
 800e2e2:	d50a      	bpl.n	800e2fa <_printf_i+0xce>
 800e2e4:	680e      	ldr	r6, [r1, #0]
 800e2e6:	602b      	str	r3, [r5, #0]
 800e2e8:	2e00      	cmp	r6, #0
 800e2ea:	da03      	bge.n	800e2f4 <_printf_i+0xc8>
 800e2ec:	232d      	movs	r3, #45	; 0x2d
 800e2ee:	4276      	negs	r6, r6
 800e2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2f4:	485e      	ldr	r0, [pc, #376]	; (800e470 <_printf_i+0x244>)
 800e2f6:	230a      	movs	r3, #10
 800e2f8:	e019      	b.n	800e32e <_printf_i+0x102>
 800e2fa:	680e      	ldr	r6, [r1, #0]
 800e2fc:	602b      	str	r3, [r5, #0]
 800e2fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e302:	bf18      	it	ne
 800e304:	b236      	sxthne	r6, r6
 800e306:	e7ef      	b.n	800e2e8 <_printf_i+0xbc>
 800e308:	682b      	ldr	r3, [r5, #0]
 800e30a:	6820      	ldr	r0, [r4, #0]
 800e30c:	1d19      	adds	r1, r3, #4
 800e30e:	6029      	str	r1, [r5, #0]
 800e310:	0601      	lsls	r1, r0, #24
 800e312:	d501      	bpl.n	800e318 <_printf_i+0xec>
 800e314:	681e      	ldr	r6, [r3, #0]
 800e316:	e002      	b.n	800e31e <_printf_i+0xf2>
 800e318:	0646      	lsls	r6, r0, #25
 800e31a:	d5fb      	bpl.n	800e314 <_printf_i+0xe8>
 800e31c:	881e      	ldrh	r6, [r3, #0]
 800e31e:	4854      	ldr	r0, [pc, #336]	; (800e470 <_printf_i+0x244>)
 800e320:	2f6f      	cmp	r7, #111	; 0x6f
 800e322:	bf0c      	ite	eq
 800e324:	2308      	moveq	r3, #8
 800e326:	230a      	movne	r3, #10
 800e328:	2100      	movs	r1, #0
 800e32a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e32e:	6865      	ldr	r5, [r4, #4]
 800e330:	60a5      	str	r5, [r4, #8]
 800e332:	2d00      	cmp	r5, #0
 800e334:	bfa2      	ittt	ge
 800e336:	6821      	ldrge	r1, [r4, #0]
 800e338:	f021 0104 	bicge.w	r1, r1, #4
 800e33c:	6021      	strge	r1, [r4, #0]
 800e33e:	b90e      	cbnz	r6, 800e344 <_printf_i+0x118>
 800e340:	2d00      	cmp	r5, #0
 800e342:	d04d      	beq.n	800e3e0 <_printf_i+0x1b4>
 800e344:	4615      	mov	r5, r2
 800e346:	fbb6 f1f3 	udiv	r1, r6, r3
 800e34a:	fb03 6711 	mls	r7, r3, r1, r6
 800e34e:	5dc7      	ldrb	r7, [r0, r7]
 800e350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e354:	4637      	mov	r7, r6
 800e356:	42bb      	cmp	r3, r7
 800e358:	460e      	mov	r6, r1
 800e35a:	d9f4      	bls.n	800e346 <_printf_i+0x11a>
 800e35c:	2b08      	cmp	r3, #8
 800e35e:	d10b      	bne.n	800e378 <_printf_i+0x14c>
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	07de      	lsls	r6, r3, #31
 800e364:	d508      	bpl.n	800e378 <_printf_i+0x14c>
 800e366:	6923      	ldr	r3, [r4, #16]
 800e368:	6861      	ldr	r1, [r4, #4]
 800e36a:	4299      	cmp	r1, r3
 800e36c:	bfde      	ittt	le
 800e36e:	2330      	movle	r3, #48	; 0x30
 800e370:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e378:	1b52      	subs	r2, r2, r5
 800e37a:	6122      	str	r2, [r4, #16]
 800e37c:	f8cd a000 	str.w	sl, [sp]
 800e380:	464b      	mov	r3, r9
 800e382:	aa03      	add	r2, sp, #12
 800e384:	4621      	mov	r1, r4
 800e386:	4640      	mov	r0, r8
 800e388:	f7ff fee2 	bl	800e150 <_printf_common>
 800e38c:	3001      	adds	r0, #1
 800e38e:	d14c      	bne.n	800e42a <_printf_i+0x1fe>
 800e390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e394:	b004      	add	sp, #16
 800e396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e39a:	4835      	ldr	r0, [pc, #212]	; (800e470 <_printf_i+0x244>)
 800e39c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e3a0:	6829      	ldr	r1, [r5, #0]
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3a8:	6029      	str	r1, [r5, #0]
 800e3aa:	061d      	lsls	r5, r3, #24
 800e3ac:	d514      	bpl.n	800e3d8 <_printf_i+0x1ac>
 800e3ae:	07df      	lsls	r7, r3, #31
 800e3b0:	bf44      	itt	mi
 800e3b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e3b6:	6023      	strmi	r3, [r4, #0]
 800e3b8:	b91e      	cbnz	r6, 800e3c2 <_printf_i+0x196>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	f023 0320 	bic.w	r3, r3, #32
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	2310      	movs	r3, #16
 800e3c4:	e7b0      	b.n	800e328 <_printf_i+0xfc>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	f043 0320 	orr.w	r3, r3, #32
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	2378      	movs	r3, #120	; 0x78
 800e3d0:	4828      	ldr	r0, [pc, #160]	; (800e474 <_printf_i+0x248>)
 800e3d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3d6:	e7e3      	b.n	800e3a0 <_printf_i+0x174>
 800e3d8:	0659      	lsls	r1, r3, #25
 800e3da:	bf48      	it	mi
 800e3dc:	b2b6      	uxthmi	r6, r6
 800e3de:	e7e6      	b.n	800e3ae <_printf_i+0x182>
 800e3e0:	4615      	mov	r5, r2
 800e3e2:	e7bb      	b.n	800e35c <_printf_i+0x130>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	6826      	ldr	r6, [r4, #0]
 800e3e8:	6961      	ldr	r1, [r4, #20]
 800e3ea:	1d18      	adds	r0, r3, #4
 800e3ec:	6028      	str	r0, [r5, #0]
 800e3ee:	0635      	lsls	r5, r6, #24
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	d501      	bpl.n	800e3f8 <_printf_i+0x1cc>
 800e3f4:	6019      	str	r1, [r3, #0]
 800e3f6:	e002      	b.n	800e3fe <_printf_i+0x1d2>
 800e3f8:	0670      	lsls	r0, r6, #25
 800e3fa:	d5fb      	bpl.n	800e3f4 <_printf_i+0x1c8>
 800e3fc:	8019      	strh	r1, [r3, #0]
 800e3fe:	2300      	movs	r3, #0
 800e400:	6123      	str	r3, [r4, #16]
 800e402:	4615      	mov	r5, r2
 800e404:	e7ba      	b.n	800e37c <_printf_i+0x150>
 800e406:	682b      	ldr	r3, [r5, #0]
 800e408:	1d1a      	adds	r2, r3, #4
 800e40a:	602a      	str	r2, [r5, #0]
 800e40c:	681d      	ldr	r5, [r3, #0]
 800e40e:	6862      	ldr	r2, [r4, #4]
 800e410:	2100      	movs	r1, #0
 800e412:	4628      	mov	r0, r5
 800e414:	f7f1 feec 	bl	80001f0 <memchr>
 800e418:	b108      	cbz	r0, 800e41e <_printf_i+0x1f2>
 800e41a:	1b40      	subs	r0, r0, r5
 800e41c:	6060      	str	r0, [r4, #4]
 800e41e:	6863      	ldr	r3, [r4, #4]
 800e420:	6123      	str	r3, [r4, #16]
 800e422:	2300      	movs	r3, #0
 800e424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e428:	e7a8      	b.n	800e37c <_printf_i+0x150>
 800e42a:	6923      	ldr	r3, [r4, #16]
 800e42c:	462a      	mov	r2, r5
 800e42e:	4649      	mov	r1, r9
 800e430:	4640      	mov	r0, r8
 800e432:	47d0      	blx	sl
 800e434:	3001      	adds	r0, #1
 800e436:	d0ab      	beq.n	800e390 <_printf_i+0x164>
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	079b      	lsls	r3, r3, #30
 800e43c:	d413      	bmi.n	800e466 <_printf_i+0x23a>
 800e43e:	68e0      	ldr	r0, [r4, #12]
 800e440:	9b03      	ldr	r3, [sp, #12]
 800e442:	4298      	cmp	r0, r3
 800e444:	bfb8      	it	lt
 800e446:	4618      	movlt	r0, r3
 800e448:	e7a4      	b.n	800e394 <_printf_i+0x168>
 800e44a:	2301      	movs	r3, #1
 800e44c:	4632      	mov	r2, r6
 800e44e:	4649      	mov	r1, r9
 800e450:	4640      	mov	r0, r8
 800e452:	47d0      	blx	sl
 800e454:	3001      	adds	r0, #1
 800e456:	d09b      	beq.n	800e390 <_printf_i+0x164>
 800e458:	3501      	adds	r5, #1
 800e45a:	68e3      	ldr	r3, [r4, #12]
 800e45c:	9903      	ldr	r1, [sp, #12]
 800e45e:	1a5b      	subs	r3, r3, r1
 800e460:	42ab      	cmp	r3, r5
 800e462:	dcf2      	bgt.n	800e44a <_printf_i+0x21e>
 800e464:	e7eb      	b.n	800e43e <_printf_i+0x212>
 800e466:	2500      	movs	r5, #0
 800e468:	f104 0619 	add.w	r6, r4, #25
 800e46c:	e7f5      	b.n	800e45a <_printf_i+0x22e>
 800e46e:	bf00      	nop
 800e470:	0800eca1 	.word	0x0800eca1
 800e474:	0800ecb2 	.word	0x0800ecb2

0800e478 <__sread>:
 800e478:	b510      	push	{r4, lr}
 800e47a:	460c      	mov	r4, r1
 800e47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e480:	f000 f954 	bl	800e72c <_read_r>
 800e484:	2800      	cmp	r0, #0
 800e486:	bfab      	itete	ge
 800e488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e48a:	89a3      	ldrhlt	r3, [r4, #12]
 800e48c:	181b      	addge	r3, r3, r0
 800e48e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e492:	bfac      	ite	ge
 800e494:	6563      	strge	r3, [r4, #84]	; 0x54
 800e496:	81a3      	strhlt	r3, [r4, #12]
 800e498:	bd10      	pop	{r4, pc}

0800e49a <__swrite>:
 800e49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e49e:	461f      	mov	r7, r3
 800e4a0:	898b      	ldrh	r3, [r1, #12]
 800e4a2:	05db      	lsls	r3, r3, #23
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	460c      	mov	r4, r1
 800e4a8:	4616      	mov	r6, r2
 800e4aa:	d505      	bpl.n	800e4b8 <__swrite+0x1e>
 800e4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f000 f928 	bl	800e708 <_lseek_r>
 800e4b8:	89a3      	ldrh	r3, [r4, #12]
 800e4ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4c2:	81a3      	strh	r3, [r4, #12]
 800e4c4:	4632      	mov	r2, r6
 800e4c6:	463b      	mov	r3, r7
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ce:	f000 b869 	b.w	800e5a4 <_write_r>

0800e4d2 <__sseek>:
 800e4d2:	b510      	push	{r4, lr}
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4da:	f000 f915 	bl	800e708 <_lseek_r>
 800e4de:	1c43      	adds	r3, r0, #1
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	bf15      	itete	ne
 800e4e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4ee:	81a3      	strheq	r3, [r4, #12]
 800e4f0:	bf18      	it	ne
 800e4f2:	81a3      	strhne	r3, [r4, #12]
 800e4f4:	bd10      	pop	{r4, pc}

0800e4f6 <__sclose>:
 800e4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4fa:	f000 b8d3 	b.w	800e6a4 <_close_r>
	...

0800e500 <__swbuf_r>:
 800e500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e502:	460e      	mov	r6, r1
 800e504:	4614      	mov	r4, r2
 800e506:	4605      	mov	r5, r0
 800e508:	b118      	cbz	r0, 800e512 <__swbuf_r+0x12>
 800e50a:	6983      	ldr	r3, [r0, #24]
 800e50c:	b90b      	cbnz	r3, 800e512 <__swbuf_r+0x12>
 800e50e:	f7ff fbb3 	bl	800dc78 <__sinit>
 800e512:	4b21      	ldr	r3, [pc, #132]	; (800e598 <__swbuf_r+0x98>)
 800e514:	429c      	cmp	r4, r3
 800e516:	d12b      	bne.n	800e570 <__swbuf_r+0x70>
 800e518:	686c      	ldr	r4, [r5, #4]
 800e51a:	69a3      	ldr	r3, [r4, #24]
 800e51c:	60a3      	str	r3, [r4, #8]
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	071a      	lsls	r2, r3, #28
 800e522:	d52f      	bpl.n	800e584 <__swbuf_r+0x84>
 800e524:	6923      	ldr	r3, [r4, #16]
 800e526:	b36b      	cbz	r3, 800e584 <__swbuf_r+0x84>
 800e528:	6923      	ldr	r3, [r4, #16]
 800e52a:	6820      	ldr	r0, [r4, #0]
 800e52c:	1ac0      	subs	r0, r0, r3
 800e52e:	6963      	ldr	r3, [r4, #20]
 800e530:	b2f6      	uxtb	r6, r6
 800e532:	4283      	cmp	r3, r0
 800e534:	4637      	mov	r7, r6
 800e536:	dc04      	bgt.n	800e542 <__swbuf_r+0x42>
 800e538:	4621      	mov	r1, r4
 800e53a:	4628      	mov	r0, r5
 800e53c:	f7ff fb08 	bl	800db50 <_fflush_r>
 800e540:	bb30      	cbnz	r0, 800e590 <__swbuf_r+0x90>
 800e542:	68a3      	ldr	r3, [r4, #8]
 800e544:	3b01      	subs	r3, #1
 800e546:	60a3      	str	r3, [r4, #8]
 800e548:	6823      	ldr	r3, [r4, #0]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	6022      	str	r2, [r4, #0]
 800e54e:	701e      	strb	r6, [r3, #0]
 800e550:	6963      	ldr	r3, [r4, #20]
 800e552:	3001      	adds	r0, #1
 800e554:	4283      	cmp	r3, r0
 800e556:	d004      	beq.n	800e562 <__swbuf_r+0x62>
 800e558:	89a3      	ldrh	r3, [r4, #12]
 800e55a:	07db      	lsls	r3, r3, #31
 800e55c:	d506      	bpl.n	800e56c <__swbuf_r+0x6c>
 800e55e:	2e0a      	cmp	r6, #10
 800e560:	d104      	bne.n	800e56c <__swbuf_r+0x6c>
 800e562:	4621      	mov	r1, r4
 800e564:	4628      	mov	r0, r5
 800e566:	f7ff faf3 	bl	800db50 <_fflush_r>
 800e56a:	b988      	cbnz	r0, 800e590 <__swbuf_r+0x90>
 800e56c:	4638      	mov	r0, r7
 800e56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e570:	4b0a      	ldr	r3, [pc, #40]	; (800e59c <__swbuf_r+0x9c>)
 800e572:	429c      	cmp	r4, r3
 800e574:	d101      	bne.n	800e57a <__swbuf_r+0x7a>
 800e576:	68ac      	ldr	r4, [r5, #8]
 800e578:	e7cf      	b.n	800e51a <__swbuf_r+0x1a>
 800e57a:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <__swbuf_r+0xa0>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	bf08      	it	eq
 800e580:	68ec      	ldreq	r4, [r5, #12]
 800e582:	e7ca      	b.n	800e51a <__swbuf_r+0x1a>
 800e584:	4621      	mov	r1, r4
 800e586:	4628      	mov	r0, r5
 800e588:	f000 f81e 	bl	800e5c8 <__swsetup_r>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d0cb      	beq.n	800e528 <__swbuf_r+0x28>
 800e590:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e594:	e7ea      	b.n	800e56c <__swbuf_r+0x6c>
 800e596:	bf00      	nop
 800e598:	0800ec50 	.word	0x0800ec50
 800e59c:	0800ec70 	.word	0x0800ec70
 800e5a0:	0800ec30 	.word	0x0800ec30

0800e5a4 <_write_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4d07      	ldr	r5, [pc, #28]	; (800e5c4 <_write_r+0x20>)
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	4608      	mov	r0, r1
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	602a      	str	r2, [r5, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	f7f3 febc 	bl	8002330 <_write>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_write_r+0x1e>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_write_r+0x1e>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	200039f4 	.word	0x200039f4

0800e5c8 <__swsetup_r>:
 800e5c8:	4b32      	ldr	r3, [pc, #200]	; (800e694 <__swsetup_r+0xcc>)
 800e5ca:	b570      	push	{r4, r5, r6, lr}
 800e5cc:	681d      	ldr	r5, [r3, #0]
 800e5ce:	4606      	mov	r6, r0
 800e5d0:	460c      	mov	r4, r1
 800e5d2:	b125      	cbz	r5, 800e5de <__swsetup_r+0x16>
 800e5d4:	69ab      	ldr	r3, [r5, #24]
 800e5d6:	b913      	cbnz	r3, 800e5de <__swsetup_r+0x16>
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f7ff fb4d 	bl	800dc78 <__sinit>
 800e5de:	4b2e      	ldr	r3, [pc, #184]	; (800e698 <__swsetup_r+0xd0>)
 800e5e0:	429c      	cmp	r4, r3
 800e5e2:	d10f      	bne.n	800e604 <__swsetup_r+0x3c>
 800e5e4:	686c      	ldr	r4, [r5, #4]
 800e5e6:	89a3      	ldrh	r3, [r4, #12]
 800e5e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5ec:	0719      	lsls	r1, r3, #28
 800e5ee:	d42c      	bmi.n	800e64a <__swsetup_r+0x82>
 800e5f0:	06dd      	lsls	r5, r3, #27
 800e5f2:	d411      	bmi.n	800e618 <__swsetup_r+0x50>
 800e5f4:	2309      	movs	r3, #9
 800e5f6:	6033      	str	r3, [r6, #0]
 800e5f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e5fc:	81a3      	strh	r3, [r4, #12]
 800e5fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e602:	e03e      	b.n	800e682 <__swsetup_r+0xba>
 800e604:	4b25      	ldr	r3, [pc, #148]	; (800e69c <__swsetup_r+0xd4>)
 800e606:	429c      	cmp	r4, r3
 800e608:	d101      	bne.n	800e60e <__swsetup_r+0x46>
 800e60a:	68ac      	ldr	r4, [r5, #8]
 800e60c:	e7eb      	b.n	800e5e6 <__swsetup_r+0x1e>
 800e60e:	4b24      	ldr	r3, [pc, #144]	; (800e6a0 <__swsetup_r+0xd8>)
 800e610:	429c      	cmp	r4, r3
 800e612:	bf08      	it	eq
 800e614:	68ec      	ldreq	r4, [r5, #12]
 800e616:	e7e6      	b.n	800e5e6 <__swsetup_r+0x1e>
 800e618:	0758      	lsls	r0, r3, #29
 800e61a:	d512      	bpl.n	800e642 <__swsetup_r+0x7a>
 800e61c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e61e:	b141      	cbz	r1, 800e632 <__swsetup_r+0x6a>
 800e620:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e624:	4299      	cmp	r1, r3
 800e626:	d002      	beq.n	800e62e <__swsetup_r+0x66>
 800e628:	4630      	mov	r0, r6
 800e62a:	f7fe ffb1 	bl	800d590 <_free_r>
 800e62e:	2300      	movs	r3, #0
 800e630:	6363      	str	r3, [r4, #52]	; 0x34
 800e632:	89a3      	ldrh	r3, [r4, #12]
 800e634:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e638:	81a3      	strh	r3, [r4, #12]
 800e63a:	2300      	movs	r3, #0
 800e63c:	6063      	str	r3, [r4, #4]
 800e63e:	6923      	ldr	r3, [r4, #16]
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	89a3      	ldrh	r3, [r4, #12]
 800e644:	f043 0308 	orr.w	r3, r3, #8
 800e648:	81a3      	strh	r3, [r4, #12]
 800e64a:	6923      	ldr	r3, [r4, #16]
 800e64c:	b94b      	cbnz	r3, 800e662 <__swsetup_r+0x9a>
 800e64e:	89a3      	ldrh	r3, [r4, #12]
 800e650:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e658:	d003      	beq.n	800e662 <__swsetup_r+0x9a>
 800e65a:	4621      	mov	r1, r4
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7ff fbd1 	bl	800de04 <__smakebuf_r>
 800e662:	89a0      	ldrh	r0, [r4, #12]
 800e664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e668:	f010 0301 	ands.w	r3, r0, #1
 800e66c:	d00a      	beq.n	800e684 <__swsetup_r+0xbc>
 800e66e:	2300      	movs	r3, #0
 800e670:	60a3      	str	r3, [r4, #8]
 800e672:	6963      	ldr	r3, [r4, #20]
 800e674:	425b      	negs	r3, r3
 800e676:	61a3      	str	r3, [r4, #24]
 800e678:	6923      	ldr	r3, [r4, #16]
 800e67a:	b943      	cbnz	r3, 800e68e <__swsetup_r+0xc6>
 800e67c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e680:	d1ba      	bne.n	800e5f8 <__swsetup_r+0x30>
 800e682:	bd70      	pop	{r4, r5, r6, pc}
 800e684:	0781      	lsls	r1, r0, #30
 800e686:	bf58      	it	pl
 800e688:	6963      	ldrpl	r3, [r4, #20]
 800e68a:	60a3      	str	r3, [r4, #8]
 800e68c:	e7f4      	b.n	800e678 <__swsetup_r+0xb0>
 800e68e:	2000      	movs	r0, #0
 800e690:	e7f7      	b.n	800e682 <__swsetup_r+0xba>
 800e692:	bf00      	nop
 800e694:	20000030 	.word	0x20000030
 800e698:	0800ec50 	.word	0x0800ec50
 800e69c:	0800ec70 	.word	0x0800ec70
 800e6a0:	0800ec30 	.word	0x0800ec30

0800e6a4 <_close_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4d06      	ldr	r5, [pc, #24]	; (800e6c0 <_close_r+0x1c>)
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	602b      	str	r3, [r5, #0]
 800e6b0:	f7f3 fe6a 	bl	8002388 <_close>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_close_r+0x1a>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_close_r+0x1a>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	200039f4 	.word	0x200039f4

0800e6c4 <_fstat_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4d07      	ldr	r5, [pc, #28]	; (800e6e4 <_fstat_r+0x20>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	4611      	mov	r1, r2
 800e6d0:	602b      	str	r3, [r5, #0]
 800e6d2:	f7f3 fea9 	bl	8002428 <_fstat>
 800e6d6:	1c43      	adds	r3, r0, #1
 800e6d8:	d102      	bne.n	800e6e0 <_fstat_r+0x1c>
 800e6da:	682b      	ldr	r3, [r5, #0]
 800e6dc:	b103      	cbz	r3, 800e6e0 <_fstat_r+0x1c>
 800e6de:	6023      	str	r3, [r4, #0]
 800e6e0:	bd38      	pop	{r3, r4, r5, pc}
 800e6e2:	bf00      	nop
 800e6e4:	200039f4 	.word	0x200039f4

0800e6e8 <_isatty_r>:
 800e6e8:	b538      	push	{r3, r4, r5, lr}
 800e6ea:	4d06      	ldr	r5, [pc, #24]	; (800e704 <_isatty_r+0x1c>)
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	4608      	mov	r0, r1
 800e6f2:	602b      	str	r3, [r5, #0]
 800e6f4:	f7f3 fe06 	bl	8002304 <_isatty>
 800e6f8:	1c43      	adds	r3, r0, #1
 800e6fa:	d102      	bne.n	800e702 <_isatty_r+0x1a>
 800e6fc:	682b      	ldr	r3, [r5, #0]
 800e6fe:	b103      	cbz	r3, 800e702 <_isatty_r+0x1a>
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	bd38      	pop	{r3, r4, r5, pc}
 800e704:	200039f4 	.word	0x200039f4

0800e708 <_lseek_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4d07      	ldr	r5, [pc, #28]	; (800e728 <_lseek_r+0x20>)
 800e70c:	4604      	mov	r4, r0
 800e70e:	4608      	mov	r0, r1
 800e710:	4611      	mov	r1, r2
 800e712:	2200      	movs	r2, #0
 800e714:	602a      	str	r2, [r5, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	f7f3 fe4d 	bl	80023b6 <_lseek>
 800e71c:	1c43      	adds	r3, r0, #1
 800e71e:	d102      	bne.n	800e726 <_lseek_r+0x1e>
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	b103      	cbz	r3, 800e726 <_lseek_r+0x1e>
 800e724:	6023      	str	r3, [r4, #0]
 800e726:	bd38      	pop	{r3, r4, r5, pc}
 800e728:	200039f4 	.word	0x200039f4

0800e72c <_read_r>:
 800e72c:	b538      	push	{r3, r4, r5, lr}
 800e72e:	4d07      	ldr	r5, [pc, #28]	; (800e74c <_read_r+0x20>)
 800e730:	4604      	mov	r4, r0
 800e732:	4608      	mov	r0, r1
 800e734:	4611      	mov	r1, r2
 800e736:	2200      	movs	r2, #0
 800e738:	602a      	str	r2, [r5, #0]
 800e73a:	461a      	mov	r2, r3
 800e73c:	f7f3 fe4c 	bl	80023d8 <_read>
 800e740:	1c43      	adds	r3, r0, #1
 800e742:	d102      	bne.n	800e74a <_read_r+0x1e>
 800e744:	682b      	ldr	r3, [r5, #0]
 800e746:	b103      	cbz	r3, 800e74a <_read_r+0x1e>
 800e748:	6023      	str	r3, [r4, #0]
 800e74a:	bd38      	pop	{r3, r4, r5, pc}
 800e74c:	200039f4 	.word	0x200039f4

0800e750 <_init>:
 800e750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e752:	bf00      	nop
 800e754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e756:	bc08      	pop	{r3}
 800e758:	469e      	mov	lr, r3
 800e75a:	4770      	bx	lr

0800e75c <_fini>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	bf00      	nop
 800e760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e762:	bc08      	pop	{r3}
 800e764:	469e      	mov	lr, r3
 800e766:	4770      	bx	lr
