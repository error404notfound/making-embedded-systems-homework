
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800ee04  0800ee04  0001ee04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f460  0800f460  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  0800f460  0800f460  0001f460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f468  0800f468  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f468  0800f468  0001f468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f46c  0800f46c  0001f46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0800f470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020158  2**0
                  CONTENTS
 10 .bss          00003990  20000158  20000158  00020158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003ae8  20003ae8  00020158  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029b63  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005fe6  00000000  00000000  00049ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e60  00000000  00000000  0004fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bf0  00000000  00000000  00051b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d066  00000000  00000000  00053728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b6c2  00000000  00000000  0008078e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec3c3  00000000  00000000  000abe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00198213  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086f8  00000000  00000000  00198264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000158 	.word	0x20000158
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800edec 	.word	0x0800edec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000015c 	.word	0x2000015c
 80001ec:	0800edec 	.word	0x0800edec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fc4b 	bl	8000f8c <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc9c 	bl	8001034 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc99 	bl	8001034 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc96 	bl	8001034 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800ee04 	.word	0x0800ee04
 8000738:	0800ee4c 	.word	0x0800ee4c
 800073c:	0800ee50 	.word	0x0800ee50
 8000740:	20000274 	.word	0x20000274
 8000744:	20000174 	.word	0x20000174

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fc2b 	bl	8000fbc <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb78 	bl	8000e90 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fc20 	bl	8001034 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fc1d 	bl	8001034 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fc1a 	bl	8001034 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc0e 	bl	8001034 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fc0b 	bl	8001034 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fbe8 	bl	8001034 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fbe5 	bl	8001034 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fbce 	bl	8001034 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000274 	.word	0x20000274
 80008a4:	20000174 	.word	0x20000174
 80008a8:	20000278 	.word	0x20000278
 80008ac:	0800ee54 	.word	0x0800ee54
 80008b0:	0800ee5c 	.word	0x0800ee5c
 80008b4:	0800ee4c 	.word	0x0800ee4c
 80008b8:	0800ee64 	.word	0x0800ee64
 80008bc:	0800ee50 	.word	0x0800ee50

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00d f87e 	bl	800dac8 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 faad 	bl	8001034 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa41 	bl	8001034 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleReceiveParamString>:
{
	ConsoleIoSendString(buffer);
	ConsoleIoSendString(STR_ENDLINE);
	return COMMAND_SUCCESS;
}
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterChar){
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b088      	sub	sp, #32
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	460b      	mov	r3, r1
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	72fb      	strb	r3, [r7, #11]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	77fb      	strb	r3, [r7, #31]
	uint32_t startIndex = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
	uint16_t value = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	82bb      	strh	r3, [r7, #20]
	uint32_t i =0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
	char charVal;


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fe05 	bl	80008c0 <ConsoleParamFindN>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	77fb      	strb	r3, [r7, #31]
	i = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
	charVal = buffer[startIndex + i];
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000ccc:	e00e      	b.n	8000cec <ConsoleReceiveParamString+0x62>
				&& ( PARAMETER_SEPARATER != charVal )
			&& ( i < INT16_MAX_STR_LENGTH ) )
		{
		parameterChar[i] = charVal;					// copy the relevant part
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	7dfa      	ldrb	r2, [r7, #23]
 8000cd6:	701a      	strb	r2, [r3, #0]
			i++;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
			charVal = buffer[startIndex + i];
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d008      	beq.n	8000d04 <ConsoleReceiveParamString+0x7a>
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	2b0d      	cmp	r3, #13
 8000cf6:	d005      	beq.n	8000d04 <ConsoleReceiveParamString+0x7a>
				&& ( PARAMETER_SEPARATER != charVal )
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	2b20      	cmp	r3, #32
 8000cfc:	d002      	beq.n	8000d04 <ConsoleReceiveParamString+0x7a>
			&& ( i < INT16_MAX_STR_LENGTH ) )
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9e4      	bls.n	8000cce <ConsoleReceiveParamString+0x44>
		}
		if ( i == INT16_MAX_STR_LENGTH)
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d101      	bne.n	8000d0e <ConsoleReceiveParamString+0x84>
		{
			result = COMMAND_PARAMETER_ERROR;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	77fb      	strb	r3, [r7, #31]
		}
		if ( COMMAND_SUCCESS == result )
 8000d0e:	7ffb      	ldrb	r3, [r7, #31]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <ConsoleReceiveParamString+0x94>
		{
			parameterChar[i] = NULL_CHAR;
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
	return result;
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d4c:	230a      	movs	r3, #10
 8000d4e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e01e      	b.n	8000d94 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d56:	4914      	ldr	r1, [pc, #80]	; (8000da8 <ConsoleCommandHelp+0x68>)
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4413      	add	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	440b      	add	r3, r1
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f964 	bl	8001034 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <ConsoleCommandHelp+0x6c>)
 8000d6e:	f000 f961 	bl	8001034 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4613      	mov	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <ConsoleCommandHelp+0x68>)
 8000d80:	4413      	add	r3, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f956 	bl	8001034 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <ConsoleCommandHelp+0x70>)
 8000d8a:	f000 f953 	bl	8001034 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3db      	bcc.n	8000d56 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800efc8 	.word	0x0800efc8
 8000dac:	0800eebc 	.word	0x0800eebc
 8000db0:	0800eec0 	.word	0x0800eec0

08000db4 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fdad 	bl	8000924 <ConsoleReceiveParamInt16>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d116      	bne.n	8000e02 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <ConsoleCommandParamExampleInt16+0x58>)
 8000dd6:	f000 f92d 	bl	8001034 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fed5 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <ConsoleCommandParamExampleInt16+0x5c>)
 8000de6:	f000 f925 	bl	8001034 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe3e 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <ConsoleCommandParamExampleInt16+0x60>)
 8000df8:	f000 f91c 	bl	8001034 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <ConsoleCommandParamExampleInt16+0x64>)
 8000dfe:	f000 f919 	bl	8001034 <ConsoleIoSendString>
	}
	return result;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	0800eec4 	.word	0x0800eec4
 8000e10:	0800eed4 	.word	0x0800eed4
 8000e14:	0800eedc 	.word	0x0800eedc
 8000e18:	0800eec0 	.word	0x0800eec0

08000e1c <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fdd7 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d109      	bne.n	8000e50 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e3e:	f000 f8f9 	bl	8001034 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e42:	89bb      	ldrh	r3, [r7, #12]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe14 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e4c:	f000 f8f2 	bl	8001034 <ConsoleIoSendString>
	}
	return result;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	0800eee0 	.word	0x0800eee0
 8000e60:	0800eec0 	.word	0x0800eec0

08000e64 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <ConsoleCommandVer+0x24>)
 8000e72:	f000 f8df 	bl	8001034 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <ConsoleCommandVer+0x28>)
 8000e78:	f000 f8dc 	bl	8001034 <ConsoleIoSendString>
	return result;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	0800eef0 	.word	0x0800eef0
 8000e8c:	0800eec0 	.word	0x0800eec0

08000e90 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <ConsoleCommandsGetTable+0x10>)
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	0800efc8 	.word	0x0800efc8

08000ea4 <ConsoleCommandDebugPrint>:

static eCommandResult_T ConsoleCommandDebugPrint(const char buffer[])
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
	// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
	// All though it's great input sanitisation it's okay for this.
	char command[5] ={0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fee2 	bl	8000c8a <ConsoleReceiveParamString>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
	char trigger = command[1];
 8000eca:	7a7b      	ldrb	r3, [r7, #9]
 8000ecc:	73bb      	strb	r3, [r7, #14]
	if ('n'==trigger)
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8000ed2:	d103      	bne.n	8000edc <ConsoleCommandDebugPrint+0x38>
	{
		// trigger is on
		setUserDebugLogging(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f002 f859 	bl	8002f8c <setUserDebugLogging>
 8000eda:	e005      	b.n	8000ee8 <ConsoleCommandDebugPrint+0x44>
	}
	else if('f'== trigger){
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	2b66      	cmp	r3, #102	; 0x66
 8000ee0:	d102      	bne.n	8000ee8 <ConsoleCommandDebugPrint+0x44>

		// trigger is off.
		setUserDebugLogging(0);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f002 f852 	bl	8002f8c <setUserDebugLogging>
	else
	{
		//the inputs bad output guide text.
	}

	return result;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <ConsoleCommandSetMode>:
static eCommandResult_T ConsoleCommandSetMode(const char buffer[]){
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]

	eCommandResult_T result = COMMAND_SUCCESS;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	2300      	movs	r3, #0
 8000f04:	733b      	strb	r3, [r7, #12]
	// get the mode they want to set.
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff febb 	bl	8000c8a <ConsoleReceiveParamString>
 8000f14:	4603      	mov	r3, r0
 8000f16:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <ConsoleCommandSetState>:
static eCommandResult_T ConsoleCommandSetState(const char buffer[]){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b084      	sub	sp, #16
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	2300      	movs	r3, #0
 8000f34:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff fea3 	bl	8000c8a <ConsoleReceiveParamString>
 8000f44:	4603      	mov	r3, r0
 8000f46:	73fb      	strb	r3, [r7, #15]

	return result;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <ConsoleCommandSetStateTimeout>:
static eCommandResult_T ConsoleCommandSetStateTimeout(const char buffer[]){}
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	bf00      	nop
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
	charCount = 0;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <reset+0x1c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <reset+0x20>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]

}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000284 	.word	0x20000284
 8000f88:	20000280 	.word	0x20000280

08000f8c <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <ConsoleIoInit+0x28>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <ConsoleIoInit+0x28>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4905      	ldr	r1, [pc, #20]	; (8000fb8 <ConsoleIoInit+0x2c>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f007 f899 	bl	80080da <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000027c 	.word	0x2000027c
 8000fb8:	20000292 	.word	0x20000292

08000fbc <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <ConsoleIoReceive+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d11f      	bne.n	8001014 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000fd4:	e00a      	b.n	8000fec <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4912      	ldr	r1, [pc, #72]	; (8001028 <ConsoleIoReceive+0x6c>)
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	440a      	add	r2, r1
 8000fe2:	7812      	ldrb	r2, [r2, #0]
 8000fe4:	701a      	strb	r2, [r3, #0]
			i++;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <ConsoleIoReceive+0x70>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d3ed      	bcc.n	8000fd6 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <ConsoleIoReceive+0x70>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8001004:	4908      	ldr	r1, [pc, #32]	; (8001028 <ConsoleIoReceive+0x6c>)
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <ConsoleIoReceive+0x74>)
 8001008:	f00c fe92 	bl	800dd30 <iprintf>
		// reset counts
		reset();
 800100c:	f7ff ffac 	bl	8000f68 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8001010:	2300      	movs	r3, #0
 8001012:	e003      	b.n	800101c <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000280 	.word	0x20000280
 8001028:	20000288 	.word	0x20000288
 800102c:	20000284 	.word	0x20000284
 8001030:	0800ef04 	.word	0x0800ef04

08001034 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4804      	ldr	r0, [pc, #16]	; (8001050 <ConsoleIoSendString+0x1c>)
 8001040:	f00c fe76 	bl	800dd30 <iprintf>
	return CONSOLE_SUCCESS;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800ef04 	.word	0x0800ef04

08001054 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_UART_RxCpltCallback+0x44>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_UART_RxCpltCallback+0x48>)
 8001062:	7811      	ldrb	r1, [r2, #0]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_UART_RxCpltCallback+0x4c>)
 8001066:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_UART_RxCpltCallback+0x44>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <HAL_UART_RxCpltCallback+0x44>)
 8001070:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_UART_RxCpltCallback+0x48>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b0a      	cmp	r3, #10
 8001078:	d102      	bne.n	8001080 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_UART_RxCpltCallback+0x50>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_UART_RxCpltCallback+0x54>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	4905      	ldr	r1, [pc, #20]	; (800109c <HAL_UART_RxCpltCallback+0x48>)
 8001088:	4618      	mov	r0, r3
 800108a:	f007 f826 	bl	80080da <HAL_UART_Receive_IT>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000284 	.word	0x20000284
 800109c:	20000292 	.word	0x20000292
 80010a0:	20000288 	.word	0x20000288
 80010a4:	20000280 	.word	0x20000280
 80010a8:	2000027c 	.word	0x2000027c

080010ac <MovementControllerInit>:
extern movementData_t lastAccel;

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f9be 	bl	8001438 <Lis3dhInit>

	I3G450D_Init(SPIxHandle);
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f000 fb13 	bl	80016e8 <I3G450D_Init>



}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MovementControllerProcess>:
int MovementControllerProcess(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
	// Gets for the gyroscope.
	 I3G450D_loop();
 80010d2:	f000 fbd1 	bl	8001878 <I3G450D_loop>
	 Lis3dhGetAcc();
 80010d6:	f000 fa3d 	bl	8001554 <Lis3dhGetAcc>
	int16_t acelX,acelY,acelZ;
	AccelGetData(&acelX, &acelY, &acelZ);
 80010da:	1cba      	adds	r2, r7, #2
 80010dc:	1d39      	adds	r1, r7, #4
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fab9 	bl	8001658 <AccelGetData>
	printf("%d,%d,%d \n",acelX,acelY,acelZ);
 80010e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ea:	4619      	mov	r1, r3
 80010ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010f0:	461a      	mov	r2, r3
 80010f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <MovementControllerProcess+0x3c>)
 80010f8:	f00c fe1a 	bl	800dd30 <iprintf>

	return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	0800ef08 	.word	0x0800ef08

0800110c <getInterruptType>:
gesture_t getInterruptType( sensor_t sensor ){
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]


}
 8001116:	bf00      	nop
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <SessionControllerInit>:
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}

void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle,UART_HandleTypeDef * HUARTxHandler)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]


	MovementControllerInit(I2Cxhandle,SPIxHandle);
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	68f8      	ldr	r0, [r7, #12]
 8001134:	f7ff ffba 	bl	80010ac <MovementControllerInit>
	ConsoleInit(HUARTxHandler);
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff fad5 	bl	80006e8 <ConsoleInit>

	// fill mode table;
	//getBreathModeTableEntry(&modeTable[0] );

	currentState = START;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SessionControllerInit+0x34>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001144:	f001 ffda 	bl	80030fc <HAL_GetTick>
 8001148:	4603      	mov	r3, r0
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <SessionControllerInit+0x38>)
 800114c:	6013      	str	r3, [r2, #0]


}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000293 	.word	0x20000293
 800115c:	200002a8 	.word	0x200002a8

08001160 <SessionControllerProcess>:
void SessionControllerProcess()
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0


// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <SessionControllerProcess+0x74>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	4a1a      	ldr	r2, [pc, #104]	; (80011d8 <SessionControllerProcess+0x78>)
 800116e:	460b      	mov	r3, r1
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	1a5b      	subs	r3, r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	1d3c      	adds	r4, r7, #4
 800117a:	461d      	mov	r5, r3
 800117c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001180:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001184:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	627b      	str	r3, [r7, #36]	; 0x24

	//out put for training model
	MovementControllerProcess();
 800118c:	f7ff ff9e 	bl	80010cc <MovementControllerProcess>


	//MovementControllerProcess();


	if ( HAL_GetTick() - timeStateStarted > timeout )
 8001190:	f001 ffb4 	bl	80030fc <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <SessionControllerProcess+0x7c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800119e:	429a      	cmp	r2, r3
 80011a0:	d201      	bcs.n	80011a6 <SessionControllerProcess+0x46>
	{

		current.onEnd();
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <SessionControllerProcess+0x80>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d101      	bne.n	80011b2 <SessionControllerProcess+0x52>
	{

		current.onButtonPress();
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4798      	blx	r3
	if( 1 == gestureRecognized ){
		// gesture recognized response.
		// get the gesture tag from MovementController.

	}
	if( 1 == accelerometorInterrupt)
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <SessionControllerProcess+0x84>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d106      	bne.n	80011c8 <SessionControllerProcess+0x68>
	{
		// The interrupt has been triggered.
		// get what interrupted it from movementController.
		gesture_t gesture =  getInterruptType( ACCELEROMETER );
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ffa6 	bl	800110c <getInterruptType>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// run proccess for current state.
		current.stateProcess();
	}


}
 80011c6:	e001      	b.n	80011cc <SessionControllerProcess+0x6c>
		current.stateProcess();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	4798      	blx	r3
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdb0      	pop	{r4, r5, r7, pc}
 80011d4:	20000293 	.word	0x20000293
 80011d8:	20000000 	.word	0x20000000
 80011dc:	200002a8 	.word	0x200002a8
 80011e0:	200002ac 	.word	0x200002ac
 80011e4:	200002b0 	.word	0x200002b0

080011e8 <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	debugPrint(" State = starting");
	return 0;
}
int IdleAwake(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <IdleAwake+0x28>)
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <IdleAwake+0x2c>)
 80011f2:	701a      	strb	r2, [r3, #0]
	currentState = IDLE_AWAKE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <IdleAwake+0x28>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80011fa:	f001 ff7f 	bl	80030fc <HAL_GetTick>
 80011fe:	4603      	mov	r3, r0
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <IdleAwake+0x30>)
 8001202:	6013      	str	r3, [r2, #0]
	debugPrint(" State = IdleAwake");
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <IdleAwake+0x34>)
 8001206:	f001 fea1 	bl	8002f4c <debugPrint>
	return 0;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000293 	.word	0x20000293
 8001214:	20000294 	.word	0x20000294
 8001218:	200002a8 	.word	0x200002a8
 800121c:	0800ef28 	.word	0x0800ef28

08001220 <DeepSleep>:
int DeepSleep(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <DeepSleep+0x28>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <DeepSleep+0x2c>)
 800122a:	701a      	strb	r2, [r3, #0]
	currentState = DEEP_SLEEP;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <DeepSleep+0x28>)
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001232:	f001 ff63 	bl	80030fc <HAL_GetTick>
 8001236:	4603      	mov	r3, r0
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <DeepSleep+0x30>)
 800123a:	6013      	str	r3, [r2, #0]
	debugPrint(" State = DeepSleep");
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <DeepSleep+0x34>)
 800123e:	f001 fe85 	bl	8002f4c <debugPrint>
	return 0;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000293 	.word	0x20000293
 800124c:	20000294 	.word	0x20000294
 8001250:	200002a8 	.word	0x200002a8
 8001254:	0800ef3c 	.word	0x0800ef3c

08001258 <WaitingForSelection>:
int WaitingForSelection(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	previouseState = currentState;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <WaitingForSelection+0x28>)
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <WaitingForSelection+0x2c>)
 8001262:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <WaitingForSelection+0x28>)
 8001266:	2203      	movs	r2, #3
 8001268:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800126a:	f001 ff47 	bl	80030fc <HAL_GetTick>
 800126e:	4603      	mov	r3, r0
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <WaitingForSelection+0x30>)
 8001272:	6013      	str	r3, [r2, #0]
	debugPrint(" State = WaitingForSelection");
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <WaitingForSelection+0x34>)
 8001276:	f001 fe69 	bl	8002f4c <debugPrint>
	return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000293 	.word	0x20000293
 8001284:	20000294 	.word	0x20000294
 8001288:	200002a8 	.word	0x200002a8
 800128c:	0800ef50 	.word	0x0800ef50

08001290 <LoadMode>:
int LoadMode(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LoadMode+0x28>)
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LoadMode+0x2c>)
 800129a:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <LoadMode+0x28>)
 800129e:	2203      	movs	r2, #3
 80012a0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80012a2:	f001 ff2b 	bl	80030fc <HAL_GetTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <LoadMode+0x30>)
 80012aa:	6013      	str	r3, [r2, #0]
	debugPrint(" State = LoadMode");
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <LoadMode+0x34>)
 80012ae:	f001 fe4d 	bl	8002f4c <debugPrint>
	return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000293 	.word	0x20000293
 80012bc:	20000294 	.word	0x20000294
 80012c0:	200002a8 	.word	0x200002a8
 80012c4:	0800ef70 	.word	0x0800ef70

080012c8 <CliMode>:
int CliMode(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

	previouseState = currentState;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <CliMode+0x34>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <CliMode+0x38>)
 80012d2:	701a      	strb	r2, [r3, #0]
	currentState = CLI_MODE;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <CliMode+0x34>)
 80012d6:	2206      	movs	r2, #6
 80012d8:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <CliMode+0x3c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
	// in climode we want the debug output off while we are waiting for input.
	pauseDebugLogging();
 80012e0:	f001 fe64 	bl	8002fac <pauseDebugLogging>

	timeStateStarted = HAL_GetTick();
 80012e4:	f001 ff0a 	bl	80030fc <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <CliMode+0x40>)
 80012ec:	6013      	str	r3, [r2, #0]
	debugPrint(" State = CliMode");
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <CliMode+0x44>)
 80012f0:	f001 fe2c 	bl	8002f4c <debugPrint>

	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000293 	.word	0x20000293
 8001300:	20000294 	.word	0x20000294
 8001304:	200002ac 	.word	0x200002ac
 8001308:	200002a8 	.word	0x200002a8
 800130c:	0800ef84 	.word	0x0800ef84

08001310 <StartPreviouseMode>:
int StartPreviouseMode(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	currentState = previouseState;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <StartPreviouseMode+0x2c>)
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <StartPreviouseMode+0x30>)
 800131a:	701a      	strb	r2, [r3, #0]
	previouseState = CLI_MODE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <StartPreviouseMode+0x2c>)
 800131e:	2206      	movs	r2, #6
 8001320:	701a      	strb	r2, [r3, #0]
	// we also reset to our currentDebugMode
	resumeDebugLogging();
 8001322:	f001 fe4f 	bl	8002fc4 <resumeDebugLogging>

	timeStateStarted = HAL_GetTick();
 8001326:	f001 fee9 	bl	80030fc <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <StartPreviouseMode+0x34>)
 800132e:	6013      	str	r3, [r2, #0]
	debugPrint(" State = StartPreviouseMode");
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <StartPreviouseMode+0x38>)
 8001332:	f001 fe0b 	bl	8002f4c <debugPrint>
	return 0;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000294 	.word	0x20000294
 8001340:	20000293 	.word	0x20000293
 8001344:	200002a8 	.word	0x200002a8
 8001348:	0800ef98 	.word	0x0800ef98

0800134c <InMode>:
int InMode()
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <InMode+0x20>)
 8001352:	2205      	movs	r2, #5
 8001354:	701a      	strb	r2, [r3, #0]

	timeStateStarted = HAL_GetTick();
 8001356:	f001 fed1 	bl	80030fc <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <InMode+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
	debugPrint(" State = InMode");
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <InMode+0x28>)
 8001362:	f001 fdf3 	bl	8002f4c <debugPrint>
	return 0;
 8001366:	2300      	movs	r3, #0

}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000293 	.word	0x20000293
 8001370:	200002a8 	.word	0x200002a8
 8001374:	0800efb4 	.word	0x0800efb4

08001378 <StartProcess>:
int SleepOutput(){return 0;}
int WaitingForInputOutput(){return 0;}
int CliModeOutput(){return 0;}
int ModeLoading(){return 0;}

int StartProcess(){return 0;}
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
 800137c:	2300      	movs	r3, #0
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <IdleAwakeProcess>:

int IdleAwakeProcess(){return 0;}
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
 800138c:	2300      	movs	r3, #0
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DeepSleepProcess>:

int DeepSleepProcess(){return 0;}
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
 800139c:	2300      	movs	r3, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <WaitingForSelectionProcess>:

int WaitingForSelectionProcess(){return 0;}
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	2300      	movs	r3, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LoadModeProcess>:

int LoadModeProcess(){return 0;}
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	2300      	movs	r3, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <CliModeProcess>:

int CliModeProcess(){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
	ConsoleProcess();
 80013cc:	f7ff f9bc 	bl	8000748 <ConsoleProcess>

	return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}

int InModeProcess(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	currentMode.modeProcess();
 80013dc:	4b02      	ldr	r3, [pc, #8]	; (80013e8 <InModeProcess+0x10>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4798      	blx	r3
	return 0;}
 80013e2:	2300      	movs	r3, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000298 	.word	0x20000298

080013ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 80013f6:	2301      	movs	r3, #1
 80013f8:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_GPIO_EXTI_Callback+0x40>)
 80013fc:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	4619      	mov	r1, r3
 8001402:	68b8      	ldr	r0, [r7, #8]
 8001404:	f002 fa16 	bl	8003834 <HAL_GPIO_ReadPin>
 8001408:	4603      	mov	r3, r0
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_Callback+0x44>)
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
	}
	if( GPIO_Pin == GPIO_PIN_8)
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800141a:	d102      	bne.n	8001422 <HAL_GPIO_EXTI_Callback+0x36>
	{
		accelerometorInterrupt = 1;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_GPIO_EXTI_Callback+0x48>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]
	}

}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40020000 	.word	0x40020000
 8001430:	200002ac 	.word	0x200002ac
 8001434:	200002b0 	.word	0x200002b0

08001438 <Lis3dhInit>:

}



HAL_StatusTypeDef Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af02      	add	r7, sp, #8
 800143e:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8001440:	4a43      	ldr	r2, [pc, #268]	; (8001550 <Lis3dhInit+0x118>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001446:	238f      	movs	r3, #143	; 0x8f
 8001448:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <Lis3dhInit+0x118>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	2130      	movs	r1, #48	; 0x30
 8001450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001454:	2201      	movs	r2, #1
 8001456:	f004 faa9 	bl	80059ac <HAL_I2C_IsDeviceReady>
 800145a:	4603      	mov	r3, r0
 800145c:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <Lis3dhInit+0x118>)
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	2130      	movs	r1, #48	; 0x30
 8001464:	f107 0214 	add.w	r2, r7, #20
 8001468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	f003 ff78 	bl	8005364 <HAL_I2C_Master_Transmit>
 8001474:	4603      	mov	r3, r0
 8001476:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 800147e:	f000 f92b 	bl	80016d8 <errorHandler>
 8001482:	e05f      	b.n	8001544 <Lis3dhInit+0x10c>

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001484:	4b32      	ldr	r3, [pc, #200]	; (8001550 <Lis3dhInit+0x118>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	2130      	movs	r1, #48	; 0x30
 800148a:	f107 0208 	add.w	r2, r7, #8
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2302      	movs	r3, #2
 8001496:	f004 f863 	bl	8005560 <HAL_I2C_Master_Receive>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <Lis3dhInit+0x72>

	        	//Handle error.
	        	errorHandler();
 80014a4:	f000 f918 	bl	80016d8 <errorHandler>
 80014a8:	e04c      	b.n	8001544 <Lis3dhInit+0x10c>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 100HZ so that we can use interrupts
	        	// and that we will read all three axis
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <Lis3dhInit+0x118>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	2130      	movs	r1, #48	; 0x30
 80014b4:	f107 0214 	add.w	r2, r7, #20
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2301      	movs	r3, #1
 80014c0:	f003 ff50 	bl	8005364 <HAL_I2C_Master_Transmit>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80014c8:	4b21      	ldr	r3, [pc, #132]	; (8001550 <Lis3dhInit+0x118>)
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	2130      	movs	r1, #48	; 0x30
 80014ce:	f107 0208 	add.w	r2, r7, #8
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2302      	movs	r3, #2
 80014da:	f004 f841 	bl	8005560 <HAL_I2C_Master_Receive>
 80014de:	4603      	mov	r3, r0
 80014e0:	75fb      	strb	r3, [r7, #23]

				sendBuff[0] = LIS3DH_REG_CTRL1;
 80014e2:	2320      	movs	r3, #32
 80014e4:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_100HZ;
 80014e6:	2357      	movs	r3, #87	; 0x57
 80014e8:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <Lis3dhInit+0x118>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	2130      	movs	r1, #48	; 0x30
 80014f0:	f107 0214 	add.w	r2, r7, #20
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2302      	movs	r3, #2
 80014fc:	f003 ff32 	bl	8005364 <HAL_I2C_Master_Transmit>
 8001500:	4603      	mov	r3, r0
 8001502:	75fb      	strb	r3, [r7, #23]

				//Read to make sure the write worked.
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001504:	23a0      	movs	r3, #160	; 0xa0
 8001506:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <Lis3dhInit+0x118>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	2130      	movs	r1, #48	; 0x30
 800150e:	f107 0214 	add.w	r2, r7, #20
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2301      	movs	r3, #1
 800151a:	f003 ff23 	bl	8005364 <HAL_I2C_Master_Transmit>
 800151e:	4603      	mov	r3, r0
 8001520:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <Lis3dhInit+0x118>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	2130      	movs	r1, #48	; 0x30
 8001528:	f107 0208 	add.w	r2, r7, #8
 800152c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2302      	movs	r3, #2
 8001534:	f004 f814 	bl	8005560 <HAL_I2C_Master_Receive>
 8001538:	4603      	mov	r3, r0
 800153a:	75fb      	strb	r3, [r7, #23]

				ret = Lis3dhInteruptSetup();
 800153c:	f000 f8ae 	bl	800169c <Lis3dhInteruptSetup>
 8001540:	4603      	mov	r3, r0
 8001542:	75fb      	strb	r3, [r7, #23]
	        }

	    }


return ret;
 8001544:	7dfb      	ldrb	r3, [r7, #23]




}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002b4 	.word	0x200002b4

08001554 <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 800155a:	23a7      	movs	r3, #167	; 0xa7
 800155c:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <Lis3dhGetAcc+0xf4>)
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	2130      	movs	r1, #48	; 0x30
 8001564:	f107 0214 	add.w	r2, r7, #20
 8001568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	2301      	movs	r3, #1
 8001570:	f003 fef8 	bl	8005364 <HAL_I2C_Master_Transmit>
 8001574:	4603      	mov	r3, r0
 8001576:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001578:	4b33      	ldr	r3, [pc, #204]	; (8001648 <Lis3dhGetAcc+0xf4>)
 800157a:	6818      	ldr	r0, [r3, #0]
 800157c:	2130      	movs	r1, #48	; 0x30
 800157e:	f107 0208 	add.w	r2, r7, #8
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2302      	movs	r3, #2
 800158a:	f003 ffe9 	bl	8005560 <HAL_I2C_Master_Receive>
 800158e:	4603      	mov	r3, r0
 8001590:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 8001592:	23a8      	movs	r3, #168	; 0xa8
 8001594:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <Lis3dhGetAcc+0xf4>)
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	2130      	movs	r1, #48	; 0x30
 800159c:	f107 0214 	add.w	r2, r7, #20
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	f003 fedc 	bl	8005364 <HAL_I2C_Master_Transmit>
 80015ac:	4603      	mov	r3, r0
 80015ae:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <Lis3dhGetAcc+0xf4>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	2130      	movs	r1, #48	; 0x30
 80015b6:	f107 0208 	add.w	r2, r7, #8
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2306      	movs	r3, #6
 80015c2:	f003 ffcd 	bl	8005560 <HAL_I2C_Master_Receive>
 80015c6:	4603      	mov	r3, r0
 80015c8:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 80015ca:	7a7b      	ldrb	r3, [r7, #9]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 80015d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b29a      	uxth	r2, r3
 80015da:	7a3b      	ldrb	r3, [r7, #8]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4413      	add	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 80015ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	7abb      	ldrb	r3, [r7, #10]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	b21b      	sxth	r3, r3
 8001600:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 8001602:	7b7b      	ldrb	r3, [r7, #13]
 8001604:	b21b      	sxth	r3, r3
 8001606:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8001608:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800160c:	b29b      	uxth	r3, r3
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b29a      	uxth	r2, r3
 8001612:	7b3b      	ldrb	r3, [r7, #12]
 8001614:	b29b      	uxth	r3, r3
 8001616:	4413      	add	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	b21b      	sxth	r3, r3
 800161c:	80bb      	strh	r3, [r7, #4]

	  LastXAcel = val[0];
 800161e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <Lis3dhGetAcc+0xf8>)
 8001626:	801a      	strh	r2, [r3, #0]
	  LastYAcel = val[1];
 8001628:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800162c:	b29a      	uxth	r2, r3
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <Lis3dhGetAcc+0xfc>)
 8001630:	801a      	strh	r2, [r3, #0]
	  LastZAcel = val[2];
 8001632:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001636:	b29a      	uxth	r2, r3
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <Lis3dhGetAcc+0x100>)
 800163a:	801a      	strh	r2, [r3, #0]

	return ret;
 800163c:	7dfb      	ldrb	r3, [r7, #23]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200002b4 	.word	0x200002b4
 800164c:	200002b8 	.word	0x200002b8
 8001650:	200002ba 	.word	0x200002ba
 8001654:	200002bc 	.word	0x200002bc

08001658 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	*acelX = LastXAcel;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <AccelGetData+0x38>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b21a      	sxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	801a      	strh	r2, [r3, #0]
	*acelY = LastYAcel;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <AccelGetData+0x3c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	b21a      	sxth	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	801a      	strh	r2, [r3, #0]
	*acelZ = LastZAcel;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <AccelGetData+0x40>)
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	b21a      	sxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	801a      	strh	r2, [r3, #0]

}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	200002b8 	.word	0x200002b8
 8001694:	200002ba 	.word	0x200002ba
 8001698:	200002bc 	.word	0x200002bc

0800169c <Lis3dhInteruptSetup>:
HAL_StatusTypeDef Lis3dhInteruptSetup()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	// set the double tap interrupt

	sendBuff[0] = LIS3DH_REG_CTRL1;
 80016a6:	2320      	movs	r3, #32
 80016a8:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x57;
 80016aa:	2357      	movs	r3, #87	; 0x57
 80016ac:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <Lis3dhInteruptSetup+0x38>)
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	2130      	movs	r1, #48	; 0x30
 80016b4:	f107 020c 	add.w	r2, r7, #12
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2302      	movs	r3, #2
 80016c0:	f003 fe50 	bl	8005364 <HAL_I2C_Master_Transmit>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73fb      	strb	r3, [r7, #15]

	return ret;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]

}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200002b4 	.word	0x200002b4

080016d8 <errorHandler>:
void errorHandler()
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
	// handle the error
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 80016f0:	4a5d      	ldr	r2, [pc, #372]	; (8001868 <I3G450D_Init+0x180>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	2102      	movs	r1, #2
 80016fa:	485c      	ldr	r0, [pc, #368]	; (800186c <I3G450D_Init+0x184>)
 80016fc:	f002 f8b2 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001700:	2014      	movs	r0, #20
 8001702:	f001 fd07 	bl	8003114 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001706:	2200      	movs	r2, #0
 8001708:	2102      	movs	r1, #2
 800170a:	4858      	ldr	r0, [pc, #352]	; (800186c <I3G450D_Init+0x184>)
 800170c:	f002 f8aa 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001710:	2014      	movs	r0, #20
 8001712:	f001 fcff 	bl	8003114 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <I3G450D_Init+0x188>)
 8001718:	2220      	movs	r2, #32
 800171a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 800171c:	4b54      	ldr	r3, [pc, #336]	; (8001870 <I3G450D_Init+0x188>)
 800171e:	22ff      	movs	r2, #255	; 0xff
 8001720:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <I3G450D_Init+0x180>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	2332      	movs	r3, #50	; 0x32
 8001728:	2202      	movs	r2, #2
 800172a:	4951      	ldr	r1, [pc, #324]	; (8001870 <I3G450D_Init+0x188>)
 800172c:	f005 fb69 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2102      	movs	r1, #2
 8001734:	484d      	ldr	r0, [pc, #308]	; (800186c <I3G450D_Init+0x184>)
 8001736:	f002 f895 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800173a:	2014      	movs	r0, #20
 800173c:	f001 fcea 	bl	8003114 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2102      	movs	r1, #2
 8001744:	4849      	ldr	r0, [pc, #292]	; (800186c <I3G450D_Init+0x184>)
 8001746:	f002 f88d 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800174a:	2014      	movs	r0, #20
 800174c:	f001 fce2 	bl	8003114 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8001750:	4b47      	ldr	r3, [pc, #284]	; (8001870 <I3G450D_Init+0x188>)
 8001752:	2221      	movs	r2, #33	; 0x21
 8001754:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <I3G450D_Init+0x188>)
 8001758:	2200      	movs	r2, #0
 800175a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <I3G450D_Init+0x180>)
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	2332      	movs	r3, #50	; 0x32
 8001762:	2202      	movs	r2, #2
 8001764:	4942      	ldr	r1, [pc, #264]	; (8001870 <I3G450D_Init+0x188>)
 8001766:	f005 fb4c 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2102      	movs	r1, #2
 800176e:	483f      	ldr	r0, [pc, #252]	; (800186c <I3G450D_Init+0x184>)
 8001770:	f002 f878 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001774:	2014      	movs	r0, #20
 8001776:	f001 fccd 	bl	8003114 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2102      	movs	r1, #2
 800177e:	483b      	ldr	r0, [pc, #236]	; (800186c <I3G450D_Init+0x184>)
 8001780:	f002 f870 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001784:	2014      	movs	r0, #20
 8001786:	f001 fcc5 	bl	8003114 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800178a:	4b39      	ldr	r3, [pc, #228]	; (8001870 <I3G450D_Init+0x188>)
 800178c:	2222      	movs	r2, #34	; 0x22
 800178e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001790:	4b37      	ldr	r3, [pc, #220]	; (8001870 <I3G450D_Init+0x188>)
 8001792:	2200      	movs	r2, #0
 8001794:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <I3G450D_Init+0x180>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	2332      	movs	r3, #50	; 0x32
 800179c:	2202      	movs	r2, #2
 800179e:	4934      	ldr	r1, [pc, #208]	; (8001870 <I3G450D_Init+0x188>)
 80017a0:	f005 fb2f 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2102      	movs	r1, #2
 80017a8:	4830      	ldr	r0, [pc, #192]	; (800186c <I3G450D_Init+0x184>)
 80017aa:	f002 f85b 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017ae:	2014      	movs	r0, #20
 80017b0:	f001 fcb0 	bl	8003114 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2102      	movs	r1, #2
 80017b8:	482c      	ldr	r0, [pc, #176]	; (800186c <I3G450D_Init+0x184>)
 80017ba:	f002 f853 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017be:	2014      	movs	r0, #20
 80017c0:	f001 fca8 	bl	8003114 <HAL_Delay>
	spiTxBuf[0]=0x23;
 80017c4:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <I3G450D_Init+0x188>)
 80017c6:	2223      	movs	r2, #35	; 0x23
 80017c8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80017ca:	4b29      	ldr	r3, [pc, #164]	; (8001870 <I3G450D_Init+0x188>)
 80017cc:	2220      	movs	r2, #32
 80017ce:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <I3G450D_Init+0x180>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	2332      	movs	r3, #50	; 0x32
 80017d6:	2202      	movs	r2, #2
 80017d8:	4925      	ldr	r1, [pc, #148]	; (8001870 <I3G450D_Init+0x188>)
 80017da:	f005 fb12 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2102      	movs	r1, #2
 80017e2:	4822      	ldr	r0, [pc, #136]	; (800186c <I3G450D_Init+0x184>)
 80017e4:	f002 f83e 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017e8:	2014      	movs	r0, #20
 80017ea:	f001 fc93 	bl	8003114 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2102      	movs	r1, #2
 80017f2:	481e      	ldr	r0, [pc, #120]	; (800186c <I3G450D_Init+0x184>)
 80017f4:	f002 f836 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80017f8:	2014      	movs	r0, #20
 80017fa:	f001 fc8b 	bl	8003114 <HAL_Delay>
	spiTxBuf[0]=0x24;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <I3G450D_Init+0x188>)
 8001800:	2224      	movs	r2, #36	; 0x24
 8001802:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <I3G450D_Init+0x188>)
 8001806:	2210      	movs	r2, #16
 8001808:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800180a:	4b17      	ldr	r3, [pc, #92]	; (8001868 <I3G450D_Init+0x180>)
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	2332      	movs	r3, #50	; 0x32
 8001810:	2202      	movs	r2, #2
 8001812:	4917      	ldr	r1, [pc, #92]	; (8001870 <I3G450D_Init+0x188>)
 8001814:	f005 faf5 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001818:	2201      	movs	r2, #1
 800181a:	2102      	movs	r1, #2
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <I3G450D_Init+0x184>)
 800181e:	f002 f821 	bl	8003864 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001822:	2014      	movs	r0, #20
 8001824:	f001 fc76 	bl	8003114 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	2102      	movs	r1, #2
 800182c:	480f      	ldr	r0, [pc, #60]	; (800186c <I3G450D_Init+0x184>)
 800182e:	f002 f819 	bl	8003864 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <I3G450D_Init+0x188>)
 8001834:	228f      	movs	r2, #143	; 0x8f
 8001836:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <I3G450D_Init+0x180>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	2332      	movs	r3, #50	; 0x32
 800183e:	2201      	movs	r2, #1
 8001840:	490b      	ldr	r1, [pc, #44]	; (8001870 <I3G450D_Init+0x188>)
 8001842:	f005 fade 	bl	8006e02 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <I3G450D_Init+0x180>)
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	2332      	movs	r3, #50	; 0x32
 800184c:	2201      	movs	r2, #1
 800184e:	4909      	ldr	r1, [pc, #36]	; (8001874 <I3G450D_Init+0x18c>)
 8001850:	f005 fc13 	bl	800707a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2102      	movs	r1, #2
 8001858:	4804      	ldr	r0, [pc, #16]	; (800186c <I3G450D_Init+0x184>)
 800185a:	f002 f803 	bl	8003864 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20003200 	.word	0x20003200
 800186c:	40020800 	.word	0x40020800
 8001870:	200031f4 	.word	0x200031f4
 8001874:	200031f9 	.word	0x200031f9

08001878 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b098      	sub	sp, #96	; 0x60
 800187c:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 800187e:	2300      	movs	r3, #0
 8001880:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001884:	2300      	movs	r3, #0
 8001886:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800188a:	2300      	movs	r3, #0
 800188c:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 80018b4:	463b      	mov	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <I3G450D_loop+0x1c8>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <I3G450D_loop+0x6a>
 80018da:	2b01      	cmp	r3, #1
 80018dc:	f000 80c6 	beq.w	8001a6c <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 80018e0:	e379      	b.n	8001fd6 <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 80018e2:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <I3G450D_loop+0x1cc>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 8374 	bne.w	8001fd4 <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	4855      	ldr	r0, [pc, #340]	; (8001a48 <I3G450D_loop+0x1d0>)
 80018f2:	f001 ffb7 	bl	8003864 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <I3G450D_loop+0x1d4>)
 80018f8:	22a8      	movs	r2, #168	; 0xa8
 80018fa:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80018fc:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <I3G450D_loop+0x1d8>)
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	2332      	movs	r3, #50	; 0x32
 8001902:	2201      	movs	r2, #1
 8001904:	4951      	ldr	r1, [pc, #324]	; (8001a4c <I3G450D_loop+0x1d4>)
 8001906:	f005 fa7c 	bl	8006e02 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 800190a:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <I3G450D_loop+0x1d8>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	2332      	movs	r3, #50	; 0x32
 8001910:	2201      	movs	r2, #1
 8001912:	4950      	ldr	r1, [pc, #320]	; (8001a54 <I3G450D_loop+0x1dc>)
 8001914:	f005 fbb1 	bl	800707a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2102      	movs	r1, #2
 800191c:	484a      	ldr	r0, [pc, #296]	; (8001a48 <I3G450D_loop+0x1d0>)
 800191e:	f001 ffa1 	bl	8003864 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2102      	movs	r1, #2
 8001926:	4848      	ldr	r0, [pc, #288]	; (8001a48 <I3G450D_loop+0x1d0>)
 8001928:	f001 ff9c 	bl	8003864 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <I3G450D_loop+0x1d4>)
 800192e:	22a9      	movs	r2, #169	; 0xa9
 8001930:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <I3G450D_loop+0x1d8>)
 8001934:	6818      	ldr	r0, [r3, #0]
 8001936:	2332      	movs	r3, #50	; 0x32
 8001938:	2201      	movs	r2, #1
 800193a:	4944      	ldr	r1, [pc, #272]	; (8001a4c <I3G450D_loop+0x1d4>)
 800193c:	f005 fa61 	bl	8006e02 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 8001940:	4b43      	ldr	r3, [pc, #268]	; (8001a50 <I3G450D_loop+0x1d8>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	2332      	movs	r3, #50	; 0x32
 8001946:	2201      	movs	r2, #1
 8001948:	4943      	ldr	r1, [pc, #268]	; (8001a58 <I3G450D_loop+0x1e0>)
 800194a:	f005 fb96 	bl	800707a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2102      	movs	r1, #2
 8001952:	483d      	ldr	r0, [pc, #244]	; (8001a48 <I3G450D_loop+0x1d0>)
 8001954:	f001 ff86 	bl	8003864 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	2102      	movs	r1, #2
 800195c:	483a      	ldr	r0, [pc, #232]	; (8001a48 <I3G450D_loop+0x1d0>)
 800195e:	f001 ff81 	bl	8003864 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <I3G450D_loop+0x1d4>)
 8001964:	22aa      	movs	r2, #170	; 0xaa
 8001966:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <I3G450D_loop+0x1d8>)
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	2332      	movs	r3, #50	; 0x32
 800196e:	2201      	movs	r2, #1
 8001970:	4936      	ldr	r1, [pc, #216]	; (8001a4c <I3G450D_loop+0x1d4>)
 8001972:	f005 fa46 	bl	8006e02 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 8001976:	4b36      	ldr	r3, [pc, #216]	; (8001a50 <I3G450D_loop+0x1d8>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	2332      	movs	r3, #50	; 0x32
 800197c:	2201      	movs	r2, #1
 800197e:	4937      	ldr	r1, [pc, #220]	; (8001a5c <I3G450D_loop+0x1e4>)
 8001980:	f005 fb7b 	bl	800707a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	2102      	movs	r1, #2
 8001988:	482f      	ldr	r0, [pc, #188]	; (8001a48 <I3G450D_loop+0x1d0>)
 800198a:	f001 ff6b 	bl	8003864 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2102      	movs	r1, #2
 8001992:	482d      	ldr	r0, [pc, #180]	; (8001a48 <I3G450D_loop+0x1d0>)
 8001994:	f001 ff66 	bl	8003864 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001998:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <I3G450D_loop+0x1d4>)
 800199a:	22ab      	movs	r2, #171	; 0xab
 800199c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <I3G450D_loop+0x1d8>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	2332      	movs	r3, #50	; 0x32
 80019a4:	2201      	movs	r2, #1
 80019a6:	4929      	ldr	r1, [pc, #164]	; (8001a4c <I3G450D_loop+0x1d4>)
 80019a8:	f005 fa2b 	bl	8006e02 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <I3G450D_loop+0x1d8>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	2332      	movs	r3, #50	; 0x32
 80019b2:	2201      	movs	r2, #1
 80019b4:	492a      	ldr	r1, [pc, #168]	; (8001a60 <I3G450D_loop+0x1e8>)
 80019b6:	f005 fb60 	bl	800707a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	2102      	movs	r1, #2
 80019be:	4822      	ldr	r0, [pc, #136]	; (8001a48 <I3G450D_loop+0x1d0>)
 80019c0:	f001 ff50 	bl	8003864 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2102      	movs	r1, #2
 80019c8:	481f      	ldr	r0, [pc, #124]	; (8001a48 <I3G450D_loop+0x1d0>)
 80019ca:	f001 ff4b 	bl	8003864 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <I3G450D_loop+0x1d4>)
 80019d0:	22ac      	movs	r2, #172	; 0xac
 80019d2:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80019d4:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <I3G450D_loop+0x1d8>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	2332      	movs	r3, #50	; 0x32
 80019da:	2201      	movs	r2, #1
 80019dc:	491b      	ldr	r1, [pc, #108]	; (8001a4c <I3G450D_loop+0x1d4>)
 80019de:	f005 fa10 	bl	8006e02 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <I3G450D_loop+0x1d8>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	2332      	movs	r3, #50	; 0x32
 80019e8:	2201      	movs	r2, #1
 80019ea:	491e      	ldr	r1, [pc, #120]	; (8001a64 <I3G450D_loop+0x1ec>)
 80019ec:	f005 fb45 	bl	800707a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2102      	movs	r1, #2
 80019f4:	4814      	ldr	r0, [pc, #80]	; (8001a48 <I3G450D_loop+0x1d0>)
 80019f6:	f001 ff35 	bl	8003864 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2102      	movs	r1, #2
 80019fe:	4812      	ldr	r0, [pc, #72]	; (8001a48 <I3G450D_loop+0x1d0>)
 8001a00:	f001 ff30 	bl	8003864 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <I3G450D_loop+0x1d4>)
 8001a06:	22ad      	movs	r2, #173	; 0xad
 8001a08:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <I3G450D_loop+0x1d8>)
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	2332      	movs	r3, #50	; 0x32
 8001a10:	2201      	movs	r2, #1
 8001a12:	490e      	ldr	r1, [pc, #56]	; (8001a4c <I3G450D_loop+0x1d4>)
 8001a14:	f005 f9f5 	bl	8006e02 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <I3G450D_loop+0x1d8>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	2332      	movs	r3, #50	; 0x32
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4911      	ldr	r1, [pc, #68]	; (8001a68 <I3G450D_loop+0x1f0>)
 8001a22:	f005 fb2a 	bl	800707a <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4807      	ldr	r0, [pc, #28]	; (8001a48 <I3G450D_loop+0x1d0>)
 8001a2c:	f001 ff1a 	bl	8003864 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <I3G450D_loop+0x1c8>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8001a36:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <I3G450D_loop+0x1cc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
				break;
 8001a3c:	e2ca      	b.n	8001fd4 <I3G450D_loop+0x75c>
 8001a3e:	bf00      	nop
 8001a40:	200002bf 	.word	0x200002bf
 8001a44:	200000c4 	.word	0x200000c4
 8001a48:	40020800 	.word	0x40020800
 8001a4c:	200031f4 	.word	0x200031f4
 8001a50:	20003200 	.word	0x20003200
 8001a54:	200031f9 	.word	0x200031f9
 8001a58:	200031fa 	.word	0x200031fa
 8001a5c:	200031fb 	.word	0x200031fb
 8001a60:	200031fc 	.word	0x200031fc
 8001a64:	200031fd 	.word	0x200031fd
 8001a68:	200031fe 	.word	0x200031fe
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8001a6c:	4ba0      	ldr	r3, [pc, #640]	; (8001cf0 <I3G450D_loop+0x478>)
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	4b9e      	ldr	r3, [pc, #632]	; (8001cf0 <I3G450D_loop+0x478>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8001a82:	4b9b      	ldr	r3, [pc, #620]	; (8001cf0 <I3G450D_loop+0x478>)
 8001a84:	791b      	ldrb	r3, [r3, #4]
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	4b99      	ldr	r3, [pc, #612]	; (8001cf0 <I3G450D_loop+0x478>)
 8001a8c:	78db      	ldrb	r3, [r3, #3]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	4313      	orrs	r3, r2
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8001a98:	4b95      	ldr	r3, [pc, #596]	; (8001cf0 <I3G450D_loop+0x478>)
 8001a9a:	799b      	ldrb	r3, [r3, #6]
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21a      	sxth	r2, r3
 8001aa0:	4b93      	ldr	r3, [pc, #588]	; (8001cf0 <I3G450D_loop+0x478>)
 8001aa2:	795b      	ldrb	r3, [r3, #5]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8001aac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	4b90      	ldr	r3, [pc, #576]	; (8001cf4 <I3G450D_loop+0x47c>)
 8001ab4:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8001ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	4b8e      	ldr	r3, [pc, #568]	; (8001cf8 <I3G450D_loop+0x480>)
 8001abe:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8001ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001ac2:	b21a      	sxth	r2, r3
 8001ac4:	4b8d      	ldr	r3, [pc, #564]	; (8001cfc <I3G450D_loop+0x484>)
 8001ac6:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8001ac8:	4b8d      	ldr	r3, [pc, #564]	; (8001d00 <I3G450D_loop+0x488>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 80d5 	bne.w	8001c7c <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8001ad2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001ad6:	b21b      	sxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b8a      	ldr	r3, [pc, #552]	; (8001d04 <I3G450D_loop+0x48c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001d08 <I3G450D_loop+0x490>
 8001aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af0:	4b86      	ldr	r3, [pc, #536]	; (8001d0c <I3G450D_loop+0x494>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8001af6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b84      	ldr	r3, [pc, #528]	; (8001d10 <I3G450D_loop+0x498>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001d08 <I3G450D_loop+0x490>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	4b7f      	ldr	r3, [pc, #508]	; (8001d14 <I3G450D_loop+0x49c>)
 8001b16:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8001b1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b7d      	ldr	r3, [pc, #500]	; (8001d18 <I3G450D_loop+0x4a0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b2e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001d08 <I3G450D_loop+0x490>
 8001b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b36:	4b79      	ldr	r3, [pc, #484]	; (8001d1c <I3G450D_loop+0x4a4>)
 8001b38:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8001b3c:	4b78      	ldr	r3, [pc, #480]	; (8001d20 <I3G450D_loop+0x4a8>)
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8001b40:	4b72      	ldr	r3, [pc, #456]	; (8001d0c <I3G450D_loop+0x494>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <I3G450D_loop+0x4ac>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	dc0c      	bgt.n	8001b70 <I3G450D_loop+0x2f8>
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <I3G450D_loop+0x4ac>)
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	eeb1 7a67 	vneg.f32	s14, s15
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <I3G450D_loop+0x494>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd1b      	ble.n	8001ba8 <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 8001b70:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <I3G450D_loop+0x494>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <I3G450D_loop+0x4b0>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b80:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <I3G450D_loop+0x4b4>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <I3G450D_loop+0x4b4>)
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8001ba0:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <I3G450D_loop+0x494>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a60      	ldr	r2, [pc, #384]	; (8001d28 <I3G450D_loop+0x4b0>)
 8001ba6:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8001ba8:	4b5a      	ldr	r3, [pc, #360]	; (8001d14 <I3G450D_loop+0x49c>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	4b60      	ldr	r3, [pc, #384]	; (8001d30 <I3G450D_loop+0x4b8>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbc:	dc0c      	bgt.n	8001bd8 <I3G450D_loop+0x360>
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <I3G450D_loop+0x4b8>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eeb1 7a67 	vneg.f32	s14, s15
 8001bc8:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <I3G450D_loop+0x49c>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd1b      	ble.n	8001c10 <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8001bd8:	4b4e      	ldr	r3, [pc, #312]	; (8001d14 <I3G450D_loop+0x49c>)
 8001bda:	ed93 7a00 	vldr	s14, [r3]
 8001bde:	4b55      	ldr	r3, [pc, #340]	; (8001d34 <I3G450D_loop+0x4bc>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bf8:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <I3G450D_loop+0x4c0>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <I3G450D_loop+0x4c0>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8001c08:	4b42      	ldr	r3, [pc, #264]	; (8001d14 <I3G450D_loop+0x49c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a49      	ldr	r2, [pc, #292]	; (8001d34 <I3G450D_loop+0x4bc>)
 8001c0e:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <I3G450D_loop+0x4a4>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <I3G450D_loop+0x4c4>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	dc0d      	bgt.n	8001c42 <I3G450D_loop+0x3ca>
 8001c26:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <I3G450D_loop+0x4c4>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eeb1 7a67 	vneg.f32	s14, s15
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <I3G450D_loop+0x4a4>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	f340 81c2 	ble.w	8001fc6 <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <I3G450D_loop+0x4a4>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <I3G450D_loop+0x4c8>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001c5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <I3G450D_loop+0x4cc>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <I3G450D_loop+0x4cc>)
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	; (8001d1c <I3G450D_loop+0x4a4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a32      	ldr	r2, [pc, #200]	; (8001d40 <I3G450D_loop+0x4c8>)
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e1a4      	b.n	8001fc6 <I3G450D_loop+0x74e>
				switch(currentcalistate)
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <I3G450D_loop+0x488>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	f000 819b 	beq.w	8001fbc <I3G450D_loop+0x744>
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	f300 819a 	bgt.w	8001fc0 <I3G450D_loop+0x748>
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <I3G450D_loop+0x41e>
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d029      	beq.n	8001ce8 <I3G450D_loop+0x470>
						break;
 8001c94:	e194      	b.n	8001fc0 <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001c9e:	b211      	sxth	r1, r2
 8001ca0:	4a2a      	ldr	r2, [pc, #168]	; (8001d4c <I3G450D_loop+0x4d4>)
 8001ca2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001cae:	b211      	sxth	r1, r2
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <I3G450D_loop+0x4d8>)
 8001cb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001cbc:	b211      	sxth	r1, r2
 8001cbe:	4a25      	ldr	r2, [pc, #148]	; (8001d54 <I3G450D_loop+0x4dc>)
 8001cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001ccc:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001cd6:	f0c0 8175 	bcc.w	8001fc4 <I3G450D_loop+0x74c>
							caliCounter=0;
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <I3G450D_loop+0x4d0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <I3G450D_loop+0x488>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
						break;
 8001ce6:	e16d      	b.n	8001fc4 <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cec:	e0a5      	b.n	8001e3a <I3G450D_loop+0x5c2>
 8001cee:	bf00      	nop
 8001cf0:	200031f8 	.word	0x200031f8
 8001cf4:	20000308 	.word	0x20000308
 8001cf8:	2000030a 	.word	0x2000030a
 8001cfc:	2000030c 	.word	0x2000030c
 8001d00:	200002be 	.word	0x200002be
 8001d04:	200002cc 	.word	0x200002cc
 8001d08:	3d8f5c29 	.word	0x3d8f5c29
 8001d0c:	200002c0 	.word	0x200002c0
 8001d10:	200002d0 	.word	0x200002d0
 8001d14:	200002c4 	.word	0x200002c4
 8001d18:	200002d4 	.word	0x200002d4
 8001d1c:	200002c8 	.word	0x200002c8
 8001d20:	3b449ba6 	.word	0x3b449ba6
 8001d24:	200002d8 	.word	0x200002d8
 8001d28:	200002f0 	.word	0x200002f0
 8001d2c:	200002e4 	.word	0x200002e4
 8001d30:	200002dc 	.word	0x200002dc
 8001d34:	200002f4 	.word	0x200002f4
 8001d38:	200002e8 	.word	0x200002e8
 8001d3c:	200002e0 	.word	0x200002e0
 8001d40:	200002f8 	.word	0x200002f8
 8001d44:	200002ec 	.word	0x200002ec
 8001d48:	20000310 	.word	0x20000310
 8001d4c:	20000314 	.word	0x20000314
 8001d50:	200012b4 	.word	0x200012b4
 8001d54:	20002254 	.word	0x20002254
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	3360      	adds	r3, #96	; 0x60
 8001d5e:	443b      	add	r3, r7
 8001d60:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8001d64:	461a      	mov	r2, r3
 8001d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	499d      	ldr	r1, [pc, #628]	; (8001fe0 <I3G450D_loop+0x768>)
 8001d6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d6e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001d72:	4413      	add	r3, r2
 8001d74:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8001d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	3360      	adds	r3, #96	; 0x60
 8001d7c:	443b      	add	r3, r7
 8001d7e:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8001d82:	461a      	mov	r2, r3
 8001d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d86:	1a9b      	subs	r3, r3, r2
 8001d88:	4996      	ldr	r1, [pc, #600]	; (8001fe4 <I3G450D_loop+0x76c>)
 8001d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d8c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001d90:	4413      	add	r3, r2
 8001d92:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8001d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	3360      	adds	r3, #96	; 0x60
 8001d9a:	443b      	add	r3, r7
 8001d9c:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8001da0:	461a      	mov	r2, r3
 8001da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	4990      	ldr	r1, [pc, #576]	; (8001fe8 <I3G450D_loop+0x770>)
 8001da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001daa:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001dae:	4413      	add	r3, r2
 8001db0:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8001db2:	4a8b      	ldr	r2, [pc, #556]	; (8001fe0 <I3G450D_loop+0x768>)
 8001db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	443b      	add	r3, r7
 8001dc2:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <I3G450D_loop+0x76c>)
 8001dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dca:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	3360      	adds	r3, #96	; 0x60
 8001dd4:	443b      	add	r3, r7
 8001dd6:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8001dda:	4a83      	ldr	r2, [pc, #524]	; (8001fe8 <I3G450D_loop+0x770>)
 8001ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dde:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8001de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	3360      	adds	r3, #96	; 0x60
 8001de8:	443b      	add	r3, r7
 8001dea:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8001dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df0:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <I3G450D_loop+0x774>)
 8001df2:	fb82 1203 	smull	r1, r2, r2, r3
 8001df6:	1092      	asrs	r2, r2, #2
 8001df8:	17db      	asrs	r3, r3, #31
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a7c      	ldr	r2, [pc, #496]	; (8001ff0 <I3G450D_loop+0x778>)
 8001dfe:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8001e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e02:	4a7a      	ldr	r2, [pc, #488]	; (8001fec <I3G450D_loop+0x774>)
 8001e04:	fb82 1203 	smull	r1, r2, r2, r3
 8001e08:	1092      	asrs	r2, r2, #2
 8001e0a:	17db      	asrs	r3, r3, #31
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	4a79      	ldr	r2, [pc, #484]	; (8001ff4 <I3G450D_loop+0x77c>)
 8001e10:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8001e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e14:	4a75      	ldr	r2, [pc, #468]	; (8001fec <I3G450D_loop+0x774>)
 8001e16:	fb82 1203 	smull	r1, r2, r2, r3
 8001e1a:	1092      	asrs	r2, r2, #2
 8001e1c:	17db      	asrs	r3, r3, #31
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <I3G450D_loop+0x780>)
 8001e22:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8001e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e26:	3301      	adds	r3, #1
 8001e28:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d901      	bls.n	8001e34 <I3G450D_loop+0x5bc>
									windowPosition=0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e36:	3301      	adds	r3, #1
 8001e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e40:	d38a      	bcc.n	8001d58 <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e46:	e089      	b.n	8001f5c <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <I3G450D_loop+0x768>)
 8001e4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b67      	ldr	r3, [pc, #412]	; (8001ff0 <I3G450D_loop+0x778>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1ad2      	subs	r2, r2, r3
 8001e58:	4b68      	ldr	r3, [pc, #416]	; (8001ffc <I3G450D_loop+0x784>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	dd0a      	ble.n	8001e76 <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8001e60:	4a5f      	ldr	r2, [pc, #380]	; (8001fe0 <I3G450D_loop+0x768>)
 8001e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e64:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <I3G450D_loop+0x778>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	4a62      	ldr	r2, [pc, #392]	; (8001ffc <I3G450D_loop+0x784>)
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e015      	b.n	8001ea2 <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8001e76:	4a5a      	ldr	r2, [pc, #360]	; (8001fe0 <I3G450D_loop+0x768>)
 8001e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <I3G450D_loop+0x778>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1ad2      	subs	r2, r2, r3
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <I3G450D_loop+0x784>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	425b      	negs	r3, r3
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	da08      	bge.n	8001ea2 <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8001e90:	4b57      	ldr	r3, [pc, #348]	; (8001ff0 <I3G450D_loop+0x778>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4952      	ldr	r1, [pc, #328]	; (8001fe0 <I3G450D_loop+0x768>)
 8001e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e98:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <I3G450D_loop+0x784>)
 8001ea0:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8001ea2:	4a50      	ldr	r2, [pc, #320]	; (8001fe4 <I3G450D_loop+0x76c>)
 8001ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b51      	ldr	r3, [pc, #324]	; (8001ff4 <I3G450D_loop+0x77c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	1ad2      	subs	r2, r2, r3
 8001eb2:	4b53      	ldr	r3, [pc, #332]	; (8002000 <I3G450D_loop+0x788>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dd0a      	ble.n	8001ed0 <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8001eba:	4a4a      	ldr	r2, [pc, #296]	; (8001fe4 <I3G450D_loop+0x76c>)
 8001ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ebe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b4b      	ldr	r3, [pc, #300]	; (8001ff4 <I3G450D_loop+0x77c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	4a4d      	ldr	r2, [pc, #308]	; (8002000 <I3G450D_loop+0x788>)
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e015      	b.n	8001efc <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8001ed0:	4a44      	ldr	r2, [pc, #272]	; (8001fe4 <I3G450D_loop+0x76c>)
 8001ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <I3G450D_loop+0x77c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	1ad2      	subs	r2, r2, r3
 8001ee0:	4b47      	ldr	r3, [pc, #284]	; (8002000 <I3G450D_loop+0x788>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	425b      	negs	r3, r3
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	da08      	bge.n	8001efc <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8001eea:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <I3G450D_loop+0x77c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	493d      	ldr	r1, [pc, #244]	; (8001fe4 <I3G450D_loop+0x76c>)
 8001ef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ef2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	4a41      	ldr	r2, [pc, #260]	; (8002000 <I3G450D_loop+0x788>)
 8001efa:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8001efc:	4a3a      	ldr	r2, [pc, #232]	; (8001fe8 <I3G450D_loop+0x770>)
 8001efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f00:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b3c      	ldr	r3, [pc, #240]	; (8001ff8 <I3G450D_loop+0x780>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	1ad2      	subs	r2, r2, r3
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <I3G450D_loop+0x78c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dd0a      	ble.n	8001f2a <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8001f14:	4a34      	ldr	r2, [pc, #208]	; (8001fe8 <I3G450D_loop+0x770>)
 8001f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <I3G450D_loop+0x780>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	4a37      	ldr	r2, [pc, #220]	; (8002004 <I3G450D_loop+0x78c>)
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	e015      	b.n	8001f56 <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8001f2a:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <I3G450D_loop+0x770>)
 8001f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <I3G450D_loop+0x780>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	1ad2      	subs	r2, r2, r3
 8001f3a:	4b32      	ldr	r3, [pc, #200]	; (8002004 <I3G450D_loop+0x78c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	425b      	negs	r3, r3
 8001f40:	429a      	cmp	r2, r3
 8001f42:	da08      	bge.n	8001f56 <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8001f44:	4b2c      	ldr	r3, [pc, #176]	; (8001ff8 <I3G450D_loop+0x780>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <I3G450D_loop+0x770>)
 8001f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f4c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <I3G450D_loop+0x78c>)
 8001f54:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f58:	3301      	adds	r3, #1
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f62:	f4ff af71 	bcc.w	8001e48 <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <I3G450D_loop+0x784>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002008 <I3G450D_loop+0x790>
 8001f76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <I3G450D_loop+0x794>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <I3G450D_loop+0x788>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002008 <I3G450D_loop+0x790>
 8001f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <I3G450D_loop+0x798>)
 8001f96:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <I3G450D_loop+0x78c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002008 <I3G450D_loop+0x790>
 8001faa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fae:	4b19      	ldr	r3, [pc, #100]	; (8002014 <I3G450D_loop+0x79c>)
 8001fb0:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <I3G450D_loop+0x7a0>)
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	701a      	strb	r2, [r3, #0]
							break;
 8001fba:	e004      	b.n	8001fc6 <I3G450D_loop+0x74e>
						break;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <I3G450D_loop+0x74e>
						break;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <I3G450D_loop+0x74e>
						break;
 8001fc4:	bf00      	nop
			currentState=L3GD20_fisrt;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <I3G450D_loop+0x7a4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <I3G450D_loop+0x7a8>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
			break;
 8001fd2:	e000      	b.n	8001fd6 <I3G450D_loop+0x75e>
				break;
 8001fd4:	bf00      	nop

		}
}
 8001fd6:	bf00      	nop
 8001fd8:	3760      	adds	r7, #96	; 0x60
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000314 	.word	0x20000314
 8001fe4:	200012b4 	.word	0x200012b4
 8001fe8:	20002254 	.word	0x20002254
 8001fec:	66666667 	.word	0x66666667
 8001ff0:	200002cc 	.word	0x200002cc
 8001ff4:	200002d0 	.word	0x200002d0
 8001ff8:	200002d4 	.word	0x200002d4
 8001ffc:	200002fc 	.word	0x200002fc
 8002000:	20000300 	.word	0x20000300
 8002004:	20000304 	.word	0x20000304
 8002008:	3d8f5c29 	.word	0x3d8f5c29
 800200c:	200002d8 	.word	0x200002d8
 8002010:	200002dc 	.word	0x200002dc
 8002014:	200002e0 	.word	0x200002e0
 8002018:	200002be 	.word	0x200002be
 800201c:	200002bf 	.word	0x200002bf
 8002020:	200000c4 	.word	0x200000c4

08002024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002028:	f001 f802 	bl	8003030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800202c:	f000 f828 	bl	8002080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002030:	f000 fa24 	bl	800247c <MX_GPIO_Init>
  MX_CRC_Init();
 8002034:	f000 f88e 	bl	8002154 <MX_CRC_Init>
  MX_FMC_Init();
 8002038:	f000 f9d0 	bl	80023dc <MX_FMC_Init>
  MX_SPI5_Init();
 800203c:	f000 f91e 	bl	800227c <MX_SPI5_Init>
  MX_TIM1_Init();
 8002040:	f000 f952 	bl	80022e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002044:	f000 f9a0 	bl	8002388 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8002048:	f00b fa00 	bl	800d44c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800204c:	f008 f88a 	bl	800a164 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002050:	f000 f894 	bl	800217c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002054:	f000 f8d2 	bl	80021fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <main+0x50>)
 800205a:	f000 fbdb 	bl	8002814 <RetargetInit>
  SessionControllerInit(&hi2c3,&hspi5,&huart1);
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <main+0x50>)
 8002060:	4905      	ldr	r1, [pc, #20]	; (8002078 <main+0x54>)
 8002062:	4806      	ldr	r0, [pc, #24]	; (800207c <main+0x58>)
 8002064:	f7ff f85e 	bl	8001124 <SessionControllerInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002068:	f00b fa16 	bl	800d498 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    SessionControllerProcess();
 800206c:	f7ff f878 	bl	8001160 <SessionControllerProcess>
    MX_USB_HOST_Process();
 8002070:	e7fa      	b.n	8002068 <main+0x44>
 8002072:	bf00      	nop
 8002074:	20003354 	.word	0x20003354
 8002078:	200032b4 	.word	0x200032b4
 800207c:	20003260 	.word	0x20003260

08002080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b094      	sub	sp, #80	; 0x50
 8002084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002086:	f107 0320 	add.w	r3, r7, #32
 800208a:	2230      	movs	r2, #48	; 0x30
 800208c:	2100      	movs	r1, #0
 800208e:	4618      	mov	r0, r3
 8002090:	f00b fd66 	bl	800db60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <SystemClock_Config+0xcc>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <SystemClock_Config+0xcc>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <SystemClock_Config+0xcc>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <SystemClock_Config+0xd0>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020cc:	4a20      	ldr	r2, [pc, #128]	; (8002150 <SystemClock_Config+0xd0>)
 80020ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <SystemClock_Config+0xd0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020e0:	2301      	movs	r3, #1
 80020e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ea:	2302      	movs	r3, #2
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020f4:	2304      	movs	r3, #4
 80020f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020f8:	2348      	movs	r3, #72	; 0x48
 80020fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020fc:	2302      	movs	r3, #2
 80020fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002100:	2303      	movs	r3, #3
 8002102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002104:	f107 0320 	add.w	r3, r7, #32
 8002108:	4618      	mov	r0, r3
 800210a:	f004 f925 	bl	8006358 <HAL_RCC_OscConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002114:	f000 fb78 	bl	8002808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002118:	230f      	movs	r3, #15
 800211a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	2102      	movs	r1, #2
 8002134:	4618      	mov	r0, r3
 8002136:	f004 fb87 	bl	8006848 <HAL_RCC_ClockConfig>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002140:	f000 fb62 	bl	8002808 <Error_Handler>
  }
}
 8002144:	bf00      	nop
 8002146:	3750      	adds	r7, #80	; 0x50
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000

08002154 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_CRC_Init+0x20>)
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <MX_CRC_Init+0x24>)
 800215c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_CRC_Init+0x20>)
 8002160:	f001 f90d 	bl	800337e <HAL_CRC_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800216a:	f000 fb4d 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20003204 	.word	0x20003204
 8002178:	40023000 	.word	0x40023000

0800217c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_I2C1_Init+0x74>)
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <MX_I2C1_Init+0x78>)
 8002184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_I2C1_Init+0x74>)
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <MX_I2C1_Init+0x7c>)
 800218a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_I2C1_Init+0x74>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_I2C1_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_I2C1_Init+0x74>)
 800219a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800219e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ac:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021b8:	480d      	ldr	r0, [pc, #52]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021ba:	f002 ff8f 	bl	80050dc <HAL_I2C_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021c4:	f000 fb20 	bl	8002808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021c8:	2100      	movs	r1, #0
 80021ca:	4809      	ldr	r0, [pc, #36]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021cc:	f004 f849 	bl	8006262 <HAL_I2CEx_ConfigAnalogFilter>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80021d6:	f000 fb17 	bl	8002808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021da:	2100      	movs	r1, #0
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <MX_I2C1_Init+0x74>)
 80021de:	f004 f87c 	bl	80062da <HAL_I2CEx_ConfigDigitalFilter>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80021e8:	f000 fb0e 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000320c 	.word	0x2000320c
 80021f4:	40005400 	.word	0x40005400
 80021f8:	000186a0 	.word	0x000186a0

080021fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <MX_I2C3_Init+0x74>)
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <MX_I2C3_Init+0x78>)
 8002204:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002206:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <MX_I2C3_Init+0x74>)
 8002208:	4a1b      	ldr	r2, [pc, #108]	; (8002278 <MX_I2C3_Init+0x7c>)
 800220a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <MX_I2C3_Init+0x74>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <MX_I2C3_Init+0x74>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002218:	4b15      	ldr	r3, [pc, #84]	; (8002270 <MX_I2C3_Init+0x74>)
 800221a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800221e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <MX_I2C3_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <MX_I2C3_Init+0x74>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_I2C3_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <MX_I2C3_Init+0x74>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <MX_I2C3_Init+0x74>)
 800223a:	f002 ff4f 	bl	80050dc <HAL_I2C_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002244:	f000 fae0 	bl	8002808 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002248:	2100      	movs	r1, #0
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <MX_I2C3_Init+0x74>)
 800224c:	f004 f809 	bl	8006262 <HAL_I2CEx_ConfigAnalogFilter>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002256:	f000 fad7 	bl	8002808 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800225a:	2100      	movs	r1, #0
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <MX_I2C3_Init+0x74>)
 800225e:	f004 f83c 	bl	80062da <HAL_I2CEx_ConfigDigitalFilter>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002268:	f000 face 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20003260 	.word	0x20003260
 8002274:	40005c00 	.word	0x40005c00
 8002278:	000186a0 	.word	0x000186a0

0800227c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_SPI5_Init+0x64>)
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <MX_SPI5_Init+0x68>)
 8002284:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_SPI5_Init+0x64>)
 8002288:	f44f 7282 	mov.w	r2, #260	; 0x104
 800228c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_SPI5_Init+0x64>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_SPI5_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_SPI5_Init+0x64>)
 800229c:	2200      	movs	r2, #0
 800229e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ac:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022b0:	2218      	movs	r2, #24
 80022b2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022c8:	220a      	movs	r2, #10
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <MX_SPI5_Init+0x64>)
 80022ce:	f004 fd0f 	bl	8006cf0 <HAL_SPI_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80022d8:	f000 fa96 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200032b4 	.word	0x200032b4
 80022e4:	40015000 	.word	0x40015000

080022e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002304:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <MX_TIM1_Init+0x98>)
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <MX_TIM1_Init+0x9c>)
 8002308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <MX_TIM1_Init+0x98>)
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <MX_TIM1_Init+0x98>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_TIM1_Init+0x98>)
 8002318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <MX_TIM1_Init+0x98>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <MX_TIM1_Init+0x98>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <MX_TIM1_Init+0x98>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002330:	4813      	ldr	r0, [pc, #76]	; (8002380 <MX_TIM1_Init+0x98>)
 8002332:	f005 fa85 	bl	8007840 <HAL_TIM_Base_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800233c:	f000 fa64 	bl	8002808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	4619      	mov	r1, r3
 800234c:	480c      	ldr	r0, [pc, #48]	; (8002380 <MX_TIM1_Init+0x98>)
 800234e:	f005 fac6 	bl	80078de <HAL_TIM_ConfigClockSource>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002358:	f000 fa56 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002364:	463b      	mov	r3, r7
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_TIM1_Init+0x98>)
 800236a:	f005 fcb9 	bl	8007ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002374:	f000 fa48 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000330c 	.word	0x2000330c
 8002384:	40010000 	.word	0x40010000

08002388 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <MX_USART1_UART_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART1_UART_Init+0x4c>)
 80023c0:	f005 fd0a 	bl	8007dd8 <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ca:	f000 fa1d 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20003354 	.word	0x20003354
 80023d8:	40011000 	.word	0x40011000

080023dc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
 80023f0:	615a      	str	r2, [r3, #20]
 80023f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <MX_FMC_Init+0x98>)
 80023f6:	4a20      	ldr	r2, [pc, #128]	; (8002478 <MX_FMC_Init+0x9c>)
 80023f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <MX_FMC_Init+0x98>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <MX_FMC_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <MX_FMC_Init+0x98>)
 8002408:	2204      	movs	r2, #4
 800240a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <MX_FMC_Init+0x98>)
 800240e:	2210      	movs	r2, #16
 8002410:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <MX_FMC_Init+0x98>)
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <MX_FMC_Init+0x98>)
 800241a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800241e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_FMC_Init+0x98>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002426:	4b13      	ldr	r3, [pc, #76]	; (8002474 <MX_FMC_Init+0x98>)
 8002428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800242c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_FMC_Init+0x98>)
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_FMC_Init+0x98>)
 8002436:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800243c:	2302      	movs	r3, #2
 800243e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002440:	2307      	movs	r3, #7
 8002442:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002444:	2304      	movs	r3, #4
 8002446:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002448:	2307      	movs	r3, #7
 800244a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800244c:	2303      	movs	r3, #3
 800244e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002454:	2302      	movs	r3, #2
 8002456:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4619      	mov	r1, r3
 800245c:	4805      	ldr	r0, [pc, #20]	; (8002474 <MX_FMC_Init+0x98>)
 800245e:	f004 fc13 	bl	8006c88 <HAL_SDRAM_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002468:	f000 f9ce 	bl	8002808 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20003398 	.word	0x20003398
 8002478:	a0000140 	.word	0xa0000140

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	4bb2      	ldr	r3, [pc, #712]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	4ab1      	ldr	r2, [pc, #708]	; (8002760 <MX_GPIO_Init+0x2e4>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	6313      	str	r3, [r2, #48]	; 0x30
 80024a2:	4baf      	ldr	r3, [pc, #700]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	623b      	str	r3, [r7, #32]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	4bab      	ldr	r3, [pc, #684]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4aaa      	ldr	r2, [pc, #680]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024b8:	f043 0320 	orr.w	r3, r3, #32
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4ba8      	ldr	r3, [pc, #672]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0320 	and.w	r3, r3, #32
 80024c6:	61fb      	str	r3, [r7, #28]
 80024c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	4ba4      	ldr	r3, [pc, #656]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4aa3      	ldr	r2, [pc, #652]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4ba1      	ldr	r3, [pc, #644]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	4b9d      	ldr	r3, [pc, #628]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a9c      	ldr	r2, [pc, #624]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b9a      	ldr	r3, [pc, #616]	; (8002760 <MX_GPIO_Init+0x2e4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b96      	ldr	r3, [pc, #600]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a95      	ldr	r2, [pc, #596]	; (8002760 <MX_GPIO_Init+0x2e4>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b93      	ldr	r3, [pc, #588]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a8e      	ldr	r2, [pc, #568]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b8c      	ldr	r3, [pc, #560]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a87      	ldr	r2, [pc, #540]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002544:	f043 0310 	orr.w	r3, r3, #16
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b85      	ldr	r3, [pc, #532]	; (8002760 <MX_GPIO_Init+0x2e4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	4b81      	ldr	r3, [pc, #516]	; (8002760 <MX_GPIO_Init+0x2e4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a80      	ldr	r2, [pc, #512]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <MX_GPIO_Init+0x2e4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	2116      	movs	r1, #22
 8002576:	487b      	ldr	r0, [pc, #492]	; (8002764 <MX_GPIO_Init+0x2e8>)
 8002578:	f001 f974 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800257c:	2200      	movs	r2, #0
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	4879      	ldr	r0, [pc, #484]	; (8002768 <MX_GPIO_Init+0x2ec>)
 8002582:	f001 f96f 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800258c:	4877      	ldr	r0, [pc, #476]	; (800276c <MX_GPIO_Init+0x2f0>)
 800258e:	f001 f969 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002592:	2200      	movs	r2, #0
 8002594:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002598:	4875      	ldr	r0, [pc, #468]	; (8002770 <MX_GPIO_Init+0x2f4>)
 800259a:	f001 f963 	bl	8003864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800259e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025b0:	230e      	movs	r3, #14
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	486e      	ldr	r0, [pc, #440]	; (8002774 <MX_GPIO_Init+0x2f8>)
 80025bc:	f000 ff8e 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80025c0:	2316      	movs	r3, #22
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	4619      	mov	r1, r3
 80025d6:	4863      	ldr	r0, [pc, #396]	; (8002764 <MX_GPIO_Init+0x2e8>)
 80025d8:	f000 ff80 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ee:	4619      	mov	r1, r3
 80025f0:	485d      	ldr	r0, [pc, #372]	; (8002768 <MX_GPIO_Init+0x2ec>)
 80025f2:	f000 ff73 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80025f6:	f248 0306 	movw	r3, #32774	; 0x8006
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80025fc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800260a:	4619      	mov	r1, r3
 800260c:	4856      	ldr	r0, [pc, #344]	; (8002768 <MX_GPIO_Init+0x2ec>)
 800260e:	f000 ff65 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8002612:	2358      	movs	r3, #88	; 0x58
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002622:	230e      	movs	r3, #14
 8002624:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262a:	4619      	mov	r1, r3
 800262c:	484e      	ldr	r0, [pc, #312]	; (8002768 <MX_GPIO_Init+0x2ec>)
 800262e:	f000 ff55 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002636:	2301      	movs	r3, #1
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002646:	4619      	mov	r1, r3
 8002648:	4847      	ldr	r0, [pc, #284]	; (8002768 <MX_GPIO_Init+0x2ec>)
 800264a:	f000 ff47 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800264e:	2320      	movs	r3, #32
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002652:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800265c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002660:	4619      	mov	r1, r3
 8002662:	4840      	ldr	r0, [pc, #256]	; (8002764 <MX_GPIO_Init+0x2e8>)
 8002664:	f000 ff3a 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002668:	2303      	movs	r3, #3
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002678:	2309      	movs	r3, #9
 800267a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002680:	4619      	mov	r1, r3
 8002682:	483d      	ldr	r0, [pc, #244]	; (8002778 <MX_GPIO_Init+0x2fc>)
 8002684:	f000 ff2a 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002688:	2304      	movs	r3, #4
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	4837      	ldr	r0, [pc, #220]	; (8002778 <MX_GPIO_Init+0x2fc>)
 800269c:	f000 ff1e 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 80026a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b2:	230e      	movs	r3, #14
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	482e      	ldr	r0, [pc, #184]	; (8002778 <MX_GPIO_Init+0x2fc>)
 80026be:	f000 ff0d 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80026c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d4:	4619      	mov	r1, r3
 80026d6:	4825      	ldr	r0, [pc, #148]	; (800276c <MX_GPIO_Init+0x2f0>)
 80026d8:	f000 ff00 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80026dc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e2:	2301      	movs	r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f2:	4619      	mov	r1, r3
 80026f4:	481d      	ldr	r0, [pc, #116]	; (800276c <MX_GPIO_Init+0x2f0>)
 80026f6:	f000 fef1 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800270a:	230e      	movs	r3, #14
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	4619      	mov	r1, r3
 8002714:	4816      	ldr	r0, [pc, #88]	; (8002770 <MX_GPIO_Init+0x2f4>)
 8002716:	f000 fee1 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800271a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002728:	2300      	movs	r3, #0
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800272c:	230e      	movs	r3, #14
 800272e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002734:	4619      	mov	r1, r3
 8002736:	480b      	ldr	r0, [pc, #44]	; (8002764 <MX_GPIO_Init+0x2e8>)
 8002738:	f000 fed0 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800273c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002750:	4619      	mov	r1, r3
 8002752:	4804      	ldr	r0, [pc, #16]	; (8002764 <MX_GPIO_Init+0x2e8>)
 8002754:	f000 fec2 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002758:	2348      	movs	r3, #72	; 0x48
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	e00d      	b.n	800277c <MX_GPIO_Init+0x300>
 8002760:	40023800 	.word	0x40023800
 8002764:	40020800 	.word	0x40020800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021800 	.word	0x40021800
 8002774:	40021400 	.word	0x40021400
 8002778:	40020400 	.word	0x40020400
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002786:	230e      	movs	r3, #14
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800278e:	4619      	mov	r1, r3
 8002790:	481b      	ldr	r0, [pc, #108]	; (8002800 <MX_GPIO_Init+0x384>)
 8002792:	f000 fea3 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8002796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027a8:	2309      	movs	r3, #9
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	4814      	ldr	r0, [pc, #80]	; (8002804 <MX_GPIO_Init+0x388>)
 80027b4:	f000 fe92 	bl	80034dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80027b8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027be:	2301      	movs	r3, #1
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ce:	4619      	mov	r1, r3
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <MX_GPIO_Init+0x388>)
 80027d2:	f000 fe83 	bl	80034dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2006      	movs	r0, #6
 80027dc:	f000 fd99 	bl	8003312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027e0:	2006      	movs	r0, #6
 80027e2:	f000 fdb2 	bl	800334a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2017      	movs	r0, #23
 80027ec:	f000 fd91 	bl	8003312 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027f0:	2017      	movs	r0, #23
 80027f2:	f000 fdaa 	bl	800334a <HAL_NVIC_EnableIRQ>

}
 80027f6:	bf00      	nop
 80027f8:	3738      	adds	r7, #56	; 0x38
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40020c00 	.word	0x40020c00
 8002804:	40021800 	.word	0x40021800

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800280c:	b672      	cpsid	i
}
 800280e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002810:	e7fe      	b.n	8002810 <Error_Handler+0x8>
	...

08002814 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <RetargetInit+0x28>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <RetargetInit+0x2c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6898      	ldr	r0, [r3, #8]
 8002828:	2300      	movs	r3, #0
 800282a:	2202      	movs	r2, #2
 800282c:	2100      	movs	r1, #0
 800282e:	f00b fabd 	bl	800ddac <setvbuf>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200033cc 	.word	0x200033cc
 8002840:	200000f4 	.word	0x200000f4

08002844 <_isatty>:

int _isatty(int fd) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	db04      	blt.n	800285c <_isatty+0x18>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	dc01      	bgt.n	800285c <_isatty+0x18>
    return 1;
 8002858:	2301      	movs	r3, #1
 800285a:	e005      	b.n	8002868 <_isatty+0x24>

  errno = EBADF;
 800285c:	f00b f938 	bl	800dad0 <__errno>
 8002860:	4603      	mov	r3, r0
 8002862:	2209      	movs	r2, #9
 8002864:	601a      	str	r2, [r3, #0]
  return 0;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_write>:

int _write(int fd, char* ptr, int len) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <_write+0x18>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d111      	bne.n	80028ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <_write+0x54>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	b29a      	uxth	r2, r3
 8002890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	f005 faec 	bl	8007e72 <HAL_UART_Transmit>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <_write+0x38>
      return len;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e008      	b.n	80028ba <_write+0x4a>
    else
      return EIO;
 80028a8:	2305      	movs	r3, #5
 80028aa:	e006      	b.n	80028ba <_write+0x4a>
  }
  errno = EBADF;
 80028ac:	f00b f910 	bl	800dad0 <__errno>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2209      	movs	r2, #9
 80028b4:	601a      	str	r2, [r3, #0]
  return -1;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200033cc 	.word	0x200033cc

080028c8 <_close>:

int _close(int fd) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db04      	blt.n	80028e0 <_close+0x18>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	dc01      	bgt.n	80028e0 <_close+0x18>
    return 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	e006      	b.n	80028ee <_close+0x26>

  errno = EBADF;
 80028e0:	f00b f8f6 	bl	800dad0 <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2209      	movs	r2, #9
 80028e8:	601a      	str	r2, [r3, #0]
  return -1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002902:	f00b f8e5 	bl	800dad0 <__errno>
 8002906:	4603      	mov	r3, r0
 8002908:	2209      	movs	r2, #9
 800290a:	601a      	str	r2, [r3, #0]
  return -1;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_read>:

int _read(int fd, char* ptr, int len) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d110      	bne.n	800294c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <_read+0x4c>)
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002932:	2201      	movs	r2, #1
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	f005 fb2e 	bl	8007f96 <HAL_UART_Receive>
 800293a:	4603      	mov	r3, r0
 800293c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <_read+0x30>
      return 1;
 8002944:	2301      	movs	r3, #1
 8002946:	e008      	b.n	800295a <_read+0x42>
    else
      return EIO;
 8002948:	2305      	movs	r3, #5
 800294a:	e006      	b.n	800295a <_read+0x42>
  }
  errno = EBADF;
 800294c:	f00b f8c0 	bl	800dad0 <__errno>
 8002950:	4603      	mov	r3, r0
 8002952:	2209      	movs	r2, #9
 8002954:	601a      	str	r2, [r3, #0]
  return -1;
 8002956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200033cc 	.word	0x200033cc

08002968 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db08      	blt.n	800298a <_fstat+0x22>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	dc05      	bgt.n	800298a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002984:	605a      	str	r2, [r3, #4]
    return 0;
 8002986:	2300      	movs	r3, #0
 8002988:	e005      	b.n	8002996 <_fstat+0x2e>
  }

  errno = EBADF;
 800298a:	f00b f8a1 	bl	800dad0 <__errno>
 800298e:	4603      	mov	r3, r0
 8002990:	2209      	movs	r2, #9
 8002992:	601a      	str	r2, [r3, #0]
  return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_MspInit+0x4c>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a0f      	ldr	r2, [pc, #60]	; (80029ec <HAL_MspInit+0x4c>)
 80029b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_MspInit+0x4c>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_MspInit+0x4c>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <HAL_MspInit+0x4c>)
 80029cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_MspInit+0x4c>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <HAL_CRC_MspInit+0x3c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10d      	bne.n	8002a1e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_CRC_MspInit+0x40>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_CRC_MspInit+0x40>)
 8002a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_CRC_MspInit+0x40>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023000 	.word	0x40023000
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	; 0x30
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 031c 	add.w	r3, r7, #28
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a42      	ldr	r2, [pc, #264]	; (8002b5c <HAL_I2C_MspInit+0x128>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d12d      	bne.n	8002ab2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a40      	ldr	r2, [pc, #256]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b3e      	ldr	r3, [pc, #248]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a78:	2312      	movs	r3, #18
 8002a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a80:	2303      	movs	r3, #3
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a84:	2304      	movs	r3, #4
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4835      	ldr	r0, [pc, #212]	; (8002b64 <HAL_I2C_MspInit+0x130>)
 8002a90:	f000 fd24 	bl	80034dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002a9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ab0:	e050      	b.n	8002b54 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <HAL_I2C_MspInit+0x134>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d14b      	bne.n	8002b54 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6313      	str	r3, [r2, #48]	; 0x30
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afa:	2312      	movs	r3, #18
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b06:	2304      	movs	r3, #4
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4816      	ldr	r0, [pc, #88]	; (8002b6c <HAL_I2C_MspInit+0x138>)
 8002b12:	f000 fce3 	bl	80034dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	4619      	mov	r1, r3
 8002b32:	480f      	ldr	r0, [pc, #60]	; (8002b70 <HAL_I2C_MspInit+0x13c>)
 8002b34:	f000 fcd2 	bl	80034dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002b42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b46:	6413      	str	r3, [r2, #64]	; 0x40
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_I2C_MspInit+0x12c>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
}
 8002b54:	bf00      	nop
 8002b56:	3730      	adds	r7, #48	; 0x30
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40005400 	.word	0x40005400
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40005c00 	.word	0x40005c00
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020000 	.word	0x40020000

08002b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a19      	ldr	r2, [pc, #100]	; (8002bf8 <HAL_SPI_MspInit+0x84>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d12c      	bne.n	8002bf0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002bbc:	f043 0320 	orr.w	r3, r3, #32
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_SPI_MspInit+0x88>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002bce:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002be0:	2305      	movs	r3, #5
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4619      	mov	r1, r3
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <HAL_SPI_MspInit+0x8c>)
 8002bec:	f000 fc76 	bl	80034dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002bf0:	bf00      	nop
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40015000 	.word	0x40015000
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40021400 	.word	0x40021400

08002c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <HAL_TIM_Base_MspInit+0x3c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10d      	bne.n	8002c32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <HAL_TIM_Base_MspInit+0x40>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_TIM_Base_MspInit+0x40>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_TIM_Base_MspInit+0x40>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40010000 	.word	0x40010000
 8002c44:	40023800 	.word	0x40023800

08002c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_UART_MspInit+0x94>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d134      	bne.n	8002cd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	4a1b      	ldr	r2, [pc, #108]	; (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <HAL_UART_MspInit+0x98>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb4:	2307      	movs	r3, #7
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <HAL_UART_MspInit+0x9c>)
 8002cc0:	f000 fc0c 	bl	80034dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2025      	movs	r0, #37	; 0x25
 8002cca:	f000 fb22 	bl	8003312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cce:	2025      	movs	r0, #37	; 0x25
 8002cd0:	f000 fb3b 	bl	800334a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cd4:	bf00      	nop
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002cfc:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_FMC_MspInit+0x104>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d16f      	bne.n	8002de4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002d04:	4b39      	ldr	r3, [pc, #228]	; (8002dec <HAL_FMC_MspInit+0x104>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	603b      	str	r3, [r7, #0]
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_FMC_MspInit+0x108>)
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <HAL_FMC_MspInit+0x108>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6393      	str	r3, [r2, #56]	; 0x38
 8002d1a:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <HAL_FMC_MspInit+0x108>)
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002d26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d2a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d38:	230c      	movs	r3, #12
 8002d3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	482c      	ldr	r0, [pc, #176]	; (8002df4 <HAL_FMC_MspInit+0x10c>)
 8002d42:	f000 fbcb 	bl	80034dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002d46:	2301      	movs	r3, #1
 8002d48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d52:	2303      	movs	r3, #3
 8002d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d56:	230c      	movs	r3, #12
 8002d58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4826      	ldr	r0, [pc, #152]	; (8002df8 <HAL_FMC_MspInit+0x110>)
 8002d60:	f000 fbbc 	bl	80034dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002d64:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d68:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d76:	230c      	movs	r3, #12
 8002d78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d7a:	1d3b      	adds	r3, r7, #4
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	481f      	ldr	r0, [pc, #124]	; (8002dfc <HAL_FMC_MspInit+0x114>)
 8002d80:	f000 fbac 	bl	80034dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002d84:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d88:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002d96:	230c      	movs	r3, #12
 8002d98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4818      	ldr	r0, [pc, #96]	; (8002e00 <HAL_FMC_MspInit+0x118>)
 8002da0:	f000 fb9c 	bl	80034dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002da4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002da8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db2:	2303      	movs	r3, #3
 8002db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002db6:	230c      	movs	r3, #12
 8002db8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4811      	ldr	r0, [pc, #68]	; (8002e04 <HAL_FMC_MspInit+0x11c>)
 8002dc0:	f000 fb8c 	bl	80034dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002dc4:	2360      	movs	r3, #96	; 0x60
 8002dc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	480a      	ldr	r0, [pc, #40]	; (8002e08 <HAL_FMC_MspInit+0x120>)
 8002dde:	f000 fb7d 	bl	80034dc <HAL_GPIO_Init>
 8002de2:	e000      	b.n	8002de6 <HAL_FMC_MspInit+0xfe>
    return;
 8002de4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200033d0 	.word	0x200033d0
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40020c00 	.word	0x40020c00
 8002e08:	40020400 	.word	0x40020400

08002e0c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002e14:	f7ff ff68 	bl	8002ce8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e24:	e7fe      	b.n	8002e24 <NMI_Handler+0x4>

08002e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2a:	e7fe      	b.n	8002e2a <HardFault_Handler+0x4>

08002e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <MemManage_Handler+0x4>

08002e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e36:	e7fe      	b.n	8002e36 <BusFault_Handler+0x4>

08002e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <UsageFault_Handler+0x4>

08002e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e6c:	f000 f932 	bl	80030d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f000 fd0d 	bl	8003898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002e86:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e8a:	f000 fd05 	bl	8003898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <USART1_IRQHandler+0x10>)
 8002e9a:	f005 f94f 	bl	800813c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20003354 	.word	0x20003354

08002ea8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <OTG_HS_IRQHandler+0x10>)
 8002eae:	f000 ff75 	bl	8003d9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200037d4 	.word	0x200037d4

08002ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <_sbrk+0x5c>)
 8002ec6:	4b15      	ldr	r3, [pc, #84]	; (8002f1c <_sbrk+0x60>)
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed0:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_sbrk+0x64>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <_sbrk+0x64>)
 8002eda:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <_sbrk+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <_sbrk+0x64>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002eec:	f00a fdf0 	bl	800dad0 <__errno>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efa:	e009      	b.n	8002f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <_sbrk+0x64>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a05      	ldr	r2, [pc, #20]	; (8002f20 <_sbrk+0x64>)
 8002f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20030000 	.word	0x20030000
 8002f1c:	00000400 	.word	0x00000400
 8002f20:	200033d4 	.word	0x200033d4
 8002f24:	20003ae8 	.word	0x20003ae8

08002f28 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f2c:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <SystemInit+0x20>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <SystemInit+0x20>)
 8002f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <debugPrint>:

int debugLogging = 0;
int paused = 0;

void debugPrint(char * buffer)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	if(debugLogging&!paused)
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <debugPrint+0x38>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <debugPrint+0x3c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <debugPrint+0x2e>
	{
		printf(buffer);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f00a fede 	bl	800dd30 <iprintf>
		printf("\n");
 8002f74:	200a      	movs	r0, #10
 8002f76:	f00a fef3 	bl	800dd60 <putchar>
	}
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200033dc 	.word	0x200033dc
 8002f88:	200033d8 	.word	0x200033d8

08002f8c <setUserDebugLogging>:
void setUserDebugLogging ( int set )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	debugLogging = set;
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <setUserDebugLogging+0x1c>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	200033d8 	.word	0x200033d8

08002fac <pauseDebugLogging>:
int getDebugLogging( )
{
	return debugLogging;
}
void pauseDebugLogging(){paused = 1;}
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <pauseDebugLogging+0x14>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	200033dc 	.word	0x200033dc

08002fc4 <resumeDebugLogging>:
void resumeDebugLogging(){paused = 0;}
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <resumeDebugLogging+0x14>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	200033dc 	.word	0x200033dc

08002fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003014 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fe0:	480d      	ldr	r0, [pc, #52]	; (8003018 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fe2:	490e      	ldr	r1, [pc, #56]	; (800301c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fe4:	4a0e      	ldr	r2, [pc, #56]	; (8003020 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe8:	e002      	b.n	8002ff0 <LoopCopyDataInit>

08002fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fee:	3304      	adds	r3, #4

08002ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff4:	d3f9      	bcc.n	8002fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ff8:	4c0b      	ldr	r4, [pc, #44]	; (8003028 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ffc:	e001      	b.n	8003002 <LoopFillZerobss>

08002ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003000:	3204      	adds	r2, #4

08003002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003004:	d3fb      	bcc.n	8002ffe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003006:	f7ff ff8f 	bl	8002f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300a:	f00a fd67 	bl	800dadc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800300e:	f7ff f809 	bl	8002024 <main>
  bx  lr    
 8003012:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003014:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800301c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8003020:	0800f470 	.word	0x0800f470
  ldr r2, =_sbss
 8003024:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8003028:	20003ae8 	.word	0x20003ae8

0800302c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800302c:	e7fe      	b.n	800302c <ADC_IRQHandler>
	...

08003030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_Init+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0d      	ldr	r2, [pc, #52]	; (8003070 <HAL_Init+0x40>)
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_Init+0x40>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_Init+0x40>)
 8003046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800304a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_Init+0x40>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003058:	2003      	movs	r0, #3
 800305a:	f000 f94f 	bl	80032fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800305e:	200f      	movs	r0, #15
 8003060:	f000 f808 	bl	8003074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003064:	f7ff fc9c 	bl	80029a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00

08003074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_InitTick+0x54>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_InitTick+0x58>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f967 	bl	8003366 <HAL_SYSTICK_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e00e      	b.n	80030c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b0f      	cmp	r3, #15
 80030a6:	d80a      	bhi.n	80030be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a8:	2200      	movs	r2, #0
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030b0:	f000 f92f 	bl	8003312 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030b4:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <HAL_InitTick+0x5c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200000c8 	.word	0x200000c8
 80030cc:	200000d0 	.word	0x200000d0
 80030d0:	200000cc 	.word	0x200000cc

080030d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_IncTick+0x20>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_IncTick+0x24>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_IncTick+0x24>)
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	200000d0 	.word	0x200000d0
 80030f8:	200033e0 	.word	0x200033e0

080030fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_GetTick+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200033e0 	.word	0x200033e0

08003114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff ffee 	bl	80030fc <HAL_GetTick>
 8003120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800312c:	d005      	beq.n	800313a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_Delay+0x44>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800313a:	bf00      	nop
 800313c:	f7ff ffde 	bl	80030fc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d8f7      	bhi.n	800313c <HAL_Delay+0x28>
  {
  }
}
 800314c:	bf00      	nop
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200000d0 	.word	0x200000d0

0800315c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <__NVIC_SetPriorityGrouping+0x44>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003178:	4013      	ands	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800318e:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	60d3      	str	r3, [r2, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <__NVIC_GetPriorityGrouping+0x18>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 0307 	and.w	r3, r3, #7
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db0b      	blt.n	80031ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4907      	ldr	r1, [pc, #28]	; (80031f8 <__NVIC_EnableIRQ+0x38>)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2001      	movs	r0, #1
 80031e2:	fa00 f202 	lsl.w	r2, r0, r2
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000e100 	.word	0xe000e100

080031fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	6039      	str	r1, [r7, #0]
 8003206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	db0a      	blt.n	8003226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	490c      	ldr	r1, [pc, #48]	; (8003248 <__NVIC_SetPriority+0x4c>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	0112      	lsls	r2, r2, #4
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	440b      	add	r3, r1
 8003220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003224:	e00a      	b.n	800323c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4908      	ldr	r1, [pc, #32]	; (800324c <__NVIC_SetPriority+0x50>)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	3b04      	subs	r3, #4
 8003234:	0112      	lsls	r2, r2, #4
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	440b      	add	r3, r1
 800323a:	761a      	strb	r2, [r3, #24]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000e100 	.word	0xe000e100
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003250:	b480      	push	{r7}
 8003252:	b089      	sub	sp, #36	; 0x24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f1c3 0307 	rsb	r3, r3, #7
 800326a:	2b04      	cmp	r3, #4
 800326c:	bf28      	it	cs
 800326e:	2304      	movcs	r3, #4
 8003270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3304      	adds	r3, #4
 8003276:	2b06      	cmp	r3, #6
 8003278:	d902      	bls.n	8003280 <NVIC_EncodePriority+0x30>
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	3b03      	subs	r3, #3
 800327e:	e000      	b.n	8003282 <NVIC_EncodePriority+0x32>
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43da      	mvns	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	401a      	ands	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	43d9      	mvns	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	4313      	orrs	r3, r2
         );
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3724      	adds	r7, #36	; 0x24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c8:	d301      	bcc.n	80032ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00f      	b.n	80032ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ce:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <SysTick_Config+0x40>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032d6:	210f      	movs	r1, #15
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032dc:	f7ff ff8e 	bl	80031fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <SysTick_Config+0x40>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <SysTick_Config+0x40>)
 80032e8:	2207      	movs	r2, #7
 80032ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000e010 	.word	0xe000e010

080032fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ff29 	bl	800315c <__NVIC_SetPriorityGrouping>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003324:	f7ff ff3e 	bl	80031a4 <__NVIC_GetPriorityGrouping>
 8003328:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	6978      	ldr	r0, [r7, #20]
 8003330:	f7ff ff8e 	bl	8003250 <NVIC_EncodePriority>
 8003334:	4602      	mov	r2, r0
 8003336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff5d 	bl	80031fc <__NVIC_SetPriority>
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	4603      	mov	r3, r0
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff ff31 	bl	80031c0 <__NVIC_EnableIRQ>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b082      	sub	sp, #8
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff ffa2 	bl	80032b8 <SysTick_Config>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e00e      	b.n	80033ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	795b      	ldrb	r3, [r3, #5]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fb25 	bl	80029f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b084      	sub	sp, #16
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff fe9a 	bl	80030fc <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d008      	beq.n	80033e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e052      	b.n	800348e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0216 	bic.w	r2, r2, #22
 80033f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695a      	ldr	r2, [r3, #20]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003406:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d103      	bne.n	8003418 <HAL_DMA_Abort+0x62>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0208 	bic.w	r2, r2, #8
 8003426:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003438:	e013      	b.n	8003462 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800343a:	f7ff fe5f 	bl	80030fc <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b05      	cmp	r3, #5
 8003446:	d90c      	bls.n	8003462 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2203      	movs	r2, #3
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e015      	b.n	800348e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e4      	bne.n	800343a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	223f      	movs	r2, #63	; 0x3f
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d004      	beq.n	80034b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e00c      	b.n	80034ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2205      	movs	r2, #5
 80034b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	; 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	e177      	b.n	80037e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f8:	2201      	movs	r2, #1
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	429a      	cmp	r2, r3
 8003512:	f040 8166 	bne.w	80037e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d005      	beq.n	800352e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800352a:	2b02      	cmp	r3, #2
 800352c:	d130      	bne.n	8003590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	2203      	movs	r2, #3
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003564:	2201      	movs	r2, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 0201 	and.w	r2, r3, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b03      	cmp	r3, #3
 800359a:	d017      	beq.n	80035cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	2203      	movs	r2, #3
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d123      	bne.n	8003620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	08da      	lsrs	r2, r3, #3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3208      	adds	r2, #8
 80035e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	220f      	movs	r2, #15
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80c0 	beq.w	80037e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_GPIO_Init+0x324>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a65      	ldr	r2, [pc, #404]	; (8003800 <HAL_GPIO_Init+0x324>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_GPIO_Init+0x324>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800367e:	4a61      	ldr	r2, [pc, #388]	; (8003804 <HAL_GPIO_Init+0x328>)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	3302      	adds	r3, #2
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a58      	ldr	r2, [pc, #352]	; (8003808 <HAL_GPIO_Init+0x32c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d037      	beq.n	800371a <HAL_GPIO_Init+0x23e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a57      	ldr	r2, [pc, #348]	; (800380c <HAL_GPIO_Init+0x330>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d031      	beq.n	8003716 <HAL_GPIO_Init+0x23a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a56      	ldr	r2, [pc, #344]	; (8003810 <HAL_GPIO_Init+0x334>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02b      	beq.n	8003712 <HAL_GPIO_Init+0x236>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a55      	ldr	r2, [pc, #340]	; (8003814 <HAL_GPIO_Init+0x338>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d025      	beq.n	800370e <HAL_GPIO_Init+0x232>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a54      	ldr	r2, [pc, #336]	; (8003818 <HAL_GPIO_Init+0x33c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01f      	beq.n	800370a <HAL_GPIO_Init+0x22e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a53      	ldr	r2, [pc, #332]	; (800381c <HAL_GPIO_Init+0x340>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d019      	beq.n	8003706 <HAL_GPIO_Init+0x22a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a52      	ldr	r2, [pc, #328]	; (8003820 <HAL_GPIO_Init+0x344>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_GPIO_Init+0x226>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a51      	ldr	r2, [pc, #324]	; (8003824 <HAL_GPIO_Init+0x348>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00d      	beq.n	80036fe <HAL_GPIO_Init+0x222>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a50      	ldr	r2, [pc, #320]	; (8003828 <HAL_GPIO_Init+0x34c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <HAL_GPIO_Init+0x21e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4f      	ldr	r2, [pc, #316]	; (800382c <HAL_GPIO_Init+0x350>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_GPIO_Init+0x21a>
 80036f2:	2309      	movs	r3, #9
 80036f4:	e012      	b.n	800371c <HAL_GPIO_Init+0x240>
 80036f6:	230a      	movs	r3, #10
 80036f8:	e010      	b.n	800371c <HAL_GPIO_Init+0x240>
 80036fa:	2308      	movs	r3, #8
 80036fc:	e00e      	b.n	800371c <HAL_GPIO_Init+0x240>
 80036fe:	2307      	movs	r3, #7
 8003700:	e00c      	b.n	800371c <HAL_GPIO_Init+0x240>
 8003702:	2306      	movs	r3, #6
 8003704:	e00a      	b.n	800371c <HAL_GPIO_Init+0x240>
 8003706:	2305      	movs	r3, #5
 8003708:	e008      	b.n	800371c <HAL_GPIO_Init+0x240>
 800370a:	2304      	movs	r3, #4
 800370c:	e006      	b.n	800371c <HAL_GPIO_Init+0x240>
 800370e:	2303      	movs	r3, #3
 8003710:	e004      	b.n	800371c <HAL_GPIO_Init+0x240>
 8003712:	2302      	movs	r3, #2
 8003714:	e002      	b.n	800371c <HAL_GPIO_Init+0x240>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x240>
 800371a:	2300      	movs	r3, #0
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f002 0203 	and.w	r2, r2, #3
 8003722:	0092      	lsls	r2, r2, #2
 8003724:	4093      	lsls	r3, r2
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800372c:	4935      	ldr	r1, [pc, #212]	; (8003804 <HAL_GPIO_Init+0x328>)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	3302      	adds	r3, #2
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <HAL_GPIO_Init+0x354>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800375e:	4a34      	ldr	r2, [pc, #208]	; (8003830 <HAL_GPIO_Init+0x354>)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_GPIO_Init+0x354>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	43db      	mvns	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003788:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_GPIO_Init+0x354>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_GPIO_Init+0x354>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037b2:	4a1f      	ldr	r2, [pc, #124]	; (8003830 <HAL_GPIO_Init+0x354>)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <HAL_GPIO_Init+0x354>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <HAL_GPIO_Init+0x354>)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3301      	adds	r3, #1
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b0f      	cmp	r3, #15
 80037ec:	f67f ae84 	bls.w	80034f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40013800 	.word	0x40013800
 8003808:	40020000 	.word	0x40020000
 800380c:	40020400 	.word	0x40020400
 8003810:	40020800 	.word	0x40020800
 8003814:	40020c00 	.word	0x40020c00
 8003818:	40021000 	.word	0x40021000
 800381c:	40021400 	.word	0x40021400
 8003820:	40021800 	.word	0x40021800
 8003824:	40021c00 	.word	0x40021c00
 8003828:	40022000 	.word	0x40022000
 800382c:	40022400 	.word	0x40022400
 8003830:	40013c00 	.word	0x40013c00

08003834 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
 8003850:	e001      	b.n	8003856 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003856:	7bfb      	ldrb	r3, [r7, #15]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
 8003870:	4613      	mov	r3, r2
 8003872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003874:	787b      	ldrb	r3, [r7, #1]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387a:	887a      	ldrh	r2, [r7, #2]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003880:	e003      	b.n	800388a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	041a      	lsls	r2, r3, #16
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	619a      	str	r2, [r3, #24]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b0:	88fb      	ldrh	r3, [r7, #6]
 80038b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fd98 	bl	80013ec <HAL_GPIO_EXTI_Callback>
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40013c00 	.word	0x40013c00

080038c8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80038c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ca:	b08f      	sub	sp, #60	; 0x3c
 80038cc:	af0a      	add	r7, sp, #40	; 0x28
 80038ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e054      	b.n	8003984 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f009 fe07 	bl	800d508 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d102      	bne.n	8003914 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f005 fcaf 	bl	800927c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	687e      	ldr	r6, [r7, #4]
 8003926:	466d      	mov	r5, sp
 8003928:	f106 0410 	add.w	r4, r6, #16
 800392c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800392e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003938:	e885 0003 	stmia.w	r5, {r0, r1}
 800393c:	1d33      	adds	r3, r6, #4
 800393e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003940:	6838      	ldr	r0, [r7, #0]
 8003942:	f005 fc29 	bl	8009198 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f005 fca6 	bl	800929e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	687e      	ldr	r6, [r7, #4]
 800395a:	466d      	mov	r5, sp
 800395c:	f106 0410 	add.w	r4, r6, #16
 8003960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800396c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003970:	1d33      	adds	r3, r6, #4
 8003972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003974:	6838      	ldr	r0, [r7, #0]
 8003976:	f005 fe2f 	bl	80095d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800398c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	b089      	sub	sp, #36	; 0x24
 8003990:	af04      	add	r7, sp, #16
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	70fb      	strb	r3, [r7, #3]
 800399e:	460b      	mov	r3, r1
 80039a0:	70bb      	strb	r3, [r7, #2]
 80039a2:	4613      	mov	r3, r2
 80039a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_HCD_HC_Init+0x28>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e076      	b.n	8003aa2 <HAL_HCD_HC_Init+0x116>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	333d      	adds	r3, #61	; 0x3d
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	212c      	movs	r1, #44	; 0x2c
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	4413      	add	r3, r2
 80039da:	3338      	adds	r3, #56	; 0x38
 80039dc:	787a      	ldrb	r2, [r7, #1]
 80039de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3340      	adds	r3, #64	; 0x40
 80039ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039f0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	212c      	movs	r1, #44	; 0x2c
 80039f8:	fb01 f303 	mul.w	r3, r1, r3
 80039fc:	4413      	add	r3, r2
 80039fe:	3339      	adds	r3, #57	; 0x39
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	333f      	adds	r3, #63	; 0x3f
 8003a12:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	78ba      	ldrb	r2, [r7, #2]
 8003a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a20:	b2d0      	uxtb	r0, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	333a      	adds	r3, #58	; 0x3a
 8003a2e:	4602      	mov	r2, r0
 8003a30:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003a32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da09      	bge.n	8003a4e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	333b      	adds	r3, #59	; 0x3b
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e008      	b.n	8003a60 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	333b      	adds	r3, #59	; 0x3b
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	212c      	movs	r1, #44	; 0x2c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	333c      	adds	r3, #60	; 0x3c
 8003a6e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003a72:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	787c      	ldrb	r4, [r7, #1]
 8003a7a:	78ba      	ldrb	r2, [r7, #2]
 8003a7c:	78f9      	ldrb	r1, [r7, #3]
 8003a7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4623      	mov	r3, r4
 8003a90:	f005 ff28 	bl	80098e4 <USB_HC_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd90      	pop	{r4, r7, pc}

08003aaa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_HCD_HC_Halt+0x1e>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e00f      	b.n	8003ae8 <HAL_HCD_HC_Halt+0x3e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f006 f978 	bl	8009dce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	70fb      	strb	r3, [r7, #3]
 8003b02:	460b      	mov	r3, r1
 8003b04:	70bb      	strb	r3, [r7, #2]
 8003b06:	4613      	mov	r3, r2
 8003b08:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	212c      	movs	r1, #44	; 0x2c
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	333b      	adds	r3, #59	; 0x3b
 8003b18:	78ba      	ldrb	r2, [r7, #2]
 8003b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	333f      	adds	r3, #63	; 0x3f
 8003b2a:	787a      	ldrb	r2, [r7, #1]
 8003b2c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003b2e:	7c3b      	ldrb	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d112      	bne.n	8003b5a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	212c      	movs	r1, #44	; 0x2c
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	3342      	adds	r3, #66	; 0x42
 8003b42:	2203      	movs	r2, #3
 8003b44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	333d      	adds	r3, #61	; 0x3d
 8003b54:	7f3a      	ldrb	r2, [r7, #28]
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e008      	b.n	8003b6c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	212c      	movs	r1, #44	; 0x2c
 8003b60:	fb01 f303 	mul.w	r3, r1, r3
 8003b64:	4413      	add	r3, r2
 8003b66:	3342      	adds	r3, #66	; 0x42
 8003b68:	2202      	movs	r2, #2
 8003b6a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003b6c:	787b      	ldrb	r3, [r7, #1]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	f200 80c6 	bhi.w	8003d00 <HAL_HCD_HC_SubmitRequest+0x210>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003ced 	.word	0x08003ced
 8003b84:	08003bf1 	.word	0x08003bf1
 8003b88:	08003c6f 	.word	0x08003c6f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003b8c:	7c3b      	ldrb	r3, [r7, #16]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	f040 80b8 	bne.w	8003d04 <HAL_HCD_HC_SubmitRequest+0x214>
 8003b94:	78bb      	ldrb	r3, [r7, #2]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 80b4 	bne.w	8003d04 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003b9c:	8b3b      	ldrh	r3, [r7, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d108      	bne.n	8003bb4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	212c      	movs	r1, #44	; 0x2c
 8003ba8:	fb01 f303 	mul.w	r3, r1, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	3355      	adds	r3, #85	; 0x55
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3355      	adds	r3, #85	; 0x55
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d109      	bne.n	8003bdc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3342      	adds	r3, #66	; 0x42
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bda:	e093      	b.n	8003d04 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3342      	adds	r3, #66	; 0x42
 8003bea:	2202      	movs	r2, #2
 8003bec:	701a      	strb	r2, [r3, #0]
      break;
 8003bee:	e089      	b.n	8003d04 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003bf0:	78bb      	ldrb	r3, [r7, #2]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11d      	bne.n	8003c32 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	212c      	movs	r1, #44	; 0x2c
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	3355      	adds	r3, #85	; 0x55
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c0a:	78fb      	ldrb	r3, [r7, #3]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3342      	adds	r3, #66	; 0x42
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003c1c:	e073      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	212c      	movs	r1, #44	; 0x2c
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	3342      	adds	r3, #66	; 0x42
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	701a      	strb	r2, [r3, #0]
      break;
 8003c30:	e069      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	212c      	movs	r1, #44	; 0x2c
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3354      	adds	r3, #84	; 0x54
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3342      	adds	r3, #66	; 0x42
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
      break;
 8003c58:	e055      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	3342      	adds	r3, #66	; 0x42
 8003c68:	2202      	movs	r2, #2
 8003c6a:	701a      	strb	r2, [r3, #0]
      break;
 8003c6c:	e04b      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003c6e:	78bb      	ldrb	r3, [r7, #2]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11d      	bne.n	8003cb0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3355      	adds	r3, #85	; 0x55
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	3342      	adds	r3, #66	; 0x42
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003c9a:	e034      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	212c      	movs	r1, #44	; 0x2c
 8003ca2:	fb01 f303 	mul.w	r3, r1, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3342      	adds	r3, #66	; 0x42
 8003caa:	2202      	movs	r2, #2
 8003cac:	701a      	strb	r2, [r3, #0]
      break;
 8003cae:	e02a      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	212c      	movs	r1, #44	; 0x2c
 8003cb6:	fb01 f303 	mul.w	r3, r1, r3
 8003cba:	4413      	add	r3, r2
 8003cbc:	3354      	adds	r3, #84	; 0x54
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	212c      	movs	r1, #44	; 0x2c
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3342      	adds	r3, #66	; 0x42
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
      break;
 8003cd6:	e016      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3342      	adds	r3, #66	; 0x42
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	701a      	strb	r2, [r3, #0]
      break;
 8003cea:	e00c      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	212c      	movs	r1, #44	; 0x2c
 8003cf2:	fb01 f303 	mul.w	r3, r1, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3342      	adds	r3, #66	; 0x42
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
      break;
 8003cfe:	e002      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003d00:	bf00      	nop
 8003d02:	e000      	b.n	8003d06 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003d04:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	212c      	movs	r1, #44	; 0x2c
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	4413      	add	r3, r2
 8003d12:	3344      	adds	r3, #68	; 0x44
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	8b3a      	ldrh	r2, [r7, #24]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	202c      	movs	r0, #44	; 0x2c
 8003d20:	fb00 f303 	mul.w	r3, r0, r3
 8003d24:	440b      	add	r3, r1
 8003d26:	334c      	adds	r3, #76	; 0x4c
 8003d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003d2a:	78fb      	ldrb	r3, [r7, #3]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	212c      	movs	r1, #44	; 0x2c
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	4413      	add	r3, r2
 8003d36:	3360      	adds	r3, #96	; 0x60
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3350      	adds	r3, #80	; 0x50
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3339      	adds	r3, #57	; 0x39
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3361      	adds	r3, #97	; 0x61
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	222c      	movs	r2, #44	; 0x2c
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	3338      	adds	r3, #56	; 0x38
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	18d1      	adds	r1, r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f005 fecc 	bl	8009b28 <USB_HC_StartXfer>
 8003d90:	4603      	mov	r3, r0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop

08003d9c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f005 fbcd 	bl	8009552 <USB_GetMode>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	f040 80f6 	bne.w	8003fac <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f005 fbb1 	bl	800952c <USB_ReadInterrupts>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80ec 	beq.w	8003faa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 fba8 	bl	800952c <USB_ReadInterrupts>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003de6:	d104      	bne.n	8003df2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f005 fb98 	bl	800952c <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e06:	d104      	bne.n	8003e12 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f005 fb88 	bl	800952c <USB_ReadInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e26:	d104      	bne.n	8003e32 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f005 fb78 	bl	800952c <USB_ReadInterrupts>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d103      	bne.n	8003e4e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f005 fb6a 	bl	800952c <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e62:	d11c      	bne.n	8003e9e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e6c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003e7e:	2110      	movs	r1, #16
 8003e80:	6938      	ldr	r0, [r7, #16]
 8003e82:	f005 fa59 	bl	8009338 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003e86:	6938      	ldr	r0, [r7, #16]
 8003e88:	f005 fa8a 	bl	80093a0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 fc60 	bl	8009758 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f009 fbaf 	bl	800d5fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f005 fb42 	bl	800952c <USB_ReadInterrupts>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb2:	d102      	bne.n	8003eba <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f001 f89e 	bl	8004ff6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f005 fb34 	bl	800952c <USB_ReadInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d106      	bne.n	8003edc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f009 fb78 	bl	800d5c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f005 fb23 	bl	800952c <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d101      	bne.n	8003ef4 <HAL_HCD_IRQHandler+0x158>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <HAL_HCD_IRQHandler+0x15a>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d012      	beq.n	8003f20 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0210 	bic.w	r2, r2, #16
 8003f08:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 ffa1 	bl	8004e52 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f042 0210 	orr.w	r2, r2, #16
 8003f1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f005 fb01 	bl	800952c <USB_ReadInterrupts>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f34:	d13a      	bne.n	8003fac <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f005 ff36 	bl	8009dac <USB_HC_ReadInterrupt>
 8003f40:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e025      	b.n	8003f94 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d018      	beq.n	8003f8e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f72:	d106      	bne.n	8003f82 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8ab 	bl	80040d6 <HCD_HC_IN_IRQHandler>
 8003f80:	e005      	b.n	8003f8e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 fbf9 	bl	8004780 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d3d4      	bcc.n	8003f48 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa6:	615a      	str	r2, [r3, #20]
 8003fa8:	e000      	b.n	8003fac <HAL_HCD_IRQHandler+0x210>
      return;
 8003faa:	bf00      	nop
    }
  }
}
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_HCD_Start+0x16>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e013      	b.n	8003ff0 <HAL_HCD_Start+0x3e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f005 fc22 	bl	8009820 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f005 f93a 	bl	800925a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_HCD_Stop+0x16>
 800400a:	2302      	movs	r3, #2
 800400c:	e00d      	b.n	800402a <HAL_HCD_Stop+0x32>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f006 f810 	bl	800a040 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f005 fbc4 	bl	80097cc <USB_ResetPort>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	212c      	movs	r1, #44	; 0x2c
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	4413      	add	r3, r2
 8004066:	3360      	adds	r3, #96	; 0x60
 8004068:	781b      	ldrb	r3, [r3, #0]
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	212c      	movs	r1, #44	; 0x2c
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	4413      	add	r3, r2
 800408e:	3350      	adds	r3, #80	; 0x50
 8004090:	681b      	ldr	r3, [r3, #0]
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f005 fc08 	bl	80098c0 <USB_GetCurrentFrame>
 80040b0:	4603      	mov	r3, r0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f005 fbe3 	bl	8009892 <USB_GetHostSpeed>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b086      	sub	sp, #24
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	015a      	lsls	r2, r3, #5
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d11a      	bne.n	800413c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	461a      	mov	r2, r3
 8004114:	2304      	movs	r3, #4
 8004116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3361      	adds	r3, #97	; 0x61
 8004126:	2206      	movs	r2, #6
 8004128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f005 fe4a 	bl	8009dce <USB_HC_Halt>
 800413a:	e0af      	b.n	800429c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d11b      	bne.n	800418c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	461a      	mov	r2, r3
 8004162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004166:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	3361      	adds	r3, #97	; 0x61
 8004176:	2207      	movs	r2, #7
 8004178:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f005 fe22 	bl	8009dce <USB_HC_Halt>
 800418a:	e087      	b.n	800429c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d109      	bne.n	80041b6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ae:	461a      	mov	r2, r3
 80041b0:	2320      	movs	r3, #32
 80041b2:	6093      	str	r3, [r2, #8]
 80041b4:	e072      	b.n	800429c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d11a      	bne.n	8004202 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d8:	461a      	mov	r2, r3
 80041da:	2308      	movs	r3, #8
 80041dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	212c      	movs	r1, #44	; 0x2c
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	4413      	add	r3, r2
 80041ea:	3361      	adds	r3, #97	; 0x61
 80041ec:	2205      	movs	r2, #5
 80041ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f005 fde7 	bl	8009dce <USB_HC_Halt>
 8004200:	e04c      	b.n	800429c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4413      	add	r3, r2
 800420a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004218:	d11b      	bne.n	8004252 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004226:	461a      	mov	r2, r3
 8004228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800422c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	212c      	movs	r1, #44	; 0x2c
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	4413      	add	r3, r2
 800423a:	3361      	adds	r3, #97	; 0x61
 800423c:	2208      	movs	r2, #8
 800423e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	4611      	mov	r1, r2
 800424a:	4618      	mov	r0, r3
 800424c:	f005 fdbf 	bl	8009dce <USB_HC_Halt>
 8004250:	e024      	b.n	800429c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004264:	2b80      	cmp	r3, #128	; 0x80
 8004266:	d119      	bne.n	800429c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	461a      	mov	r2, r3
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	212c      	movs	r1, #44	; 0x2c
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	3361      	adds	r3, #97	; 0x61
 8004288:	2206      	movs	r2, #6
 800428a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f005 fd99 	bl	8009dce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b2:	d112      	bne.n	80042da <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f005 fd85 	bl	8009dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d0:	461a      	mov	r2, r3
 80042d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042d6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80042d8:	e24e      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	f040 80df 	bne.w	80044b0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d019      	beq.n	800432e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	212c      	movs	r1, #44	; 0x2c
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	4413      	add	r3, r2
 8004306:	3348      	adds	r3, #72	; 0x48
 8004308:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	0159      	lsls	r1, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	440b      	add	r3, r1
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800431c:	1ad2      	subs	r2, r2, r3
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	202c      	movs	r0, #44	; 0x2c
 8004324:	fb00 f303 	mul.w	r3, r0, r3
 8004328:	440b      	add	r3, r1
 800432a:	3350      	adds	r3, #80	; 0x50
 800432c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	3361      	adds	r3, #97	; 0x61
 800433c:	2201      	movs	r2, #1
 800433e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	212c      	movs	r1, #44	; 0x2c
 8004346:	fb01 f303 	mul.w	r3, r1, r3
 800434a:	4413      	add	r3, r2
 800434c:	335c      	adds	r3, #92	; 0x5c
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4413      	add	r3, r2
 800435a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435e:	461a      	mov	r2, r3
 8004360:	2301      	movs	r3, #1
 8004362:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	212c      	movs	r1, #44	; 0x2c
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	4413      	add	r3, r2
 8004370:	333f      	adds	r3, #63	; 0x3f
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	212c      	movs	r1, #44	; 0x2c
 800437e:	fb01 f303 	mul.w	r3, r1, r3
 8004382:	4413      	add	r3, r2
 8004384:	333f      	adds	r3, #63	; 0x3f
 8004386:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004388:	2b02      	cmp	r3, #2
 800438a:	d111      	bne.n	80043b0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f005 fd19 	bl	8009dce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	461a      	mov	r2, r3
 80043aa:	2310      	movs	r3, #16
 80043ac:	6093      	str	r3, [r2, #8]
 80043ae:	e03a      	b.n	8004426 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	333f      	adds	r3, #63	; 0x3f
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d009      	beq.n	80043d8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	212c      	movs	r1, #44	; 0x2c
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	4413      	add	r3, r2
 80043d0:	333f      	adds	r3, #63	; 0x3f
 80043d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d126      	bne.n	8004426 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	3360      	adds	r3, #96	; 0x60
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	b2d9      	uxtb	r1, r3
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	202c      	movs	r0, #44	; 0x2c
 8004414:	fb00 f303 	mul.w	r3, r0, r3
 8004418:	4413      	add	r3, r2
 800441a:	3360      	adds	r3, #96	; 0x60
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f009 f8f9 	bl	800d618 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d12b      	bne.n	8004486 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	3348      	adds	r3, #72	; 0x48
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	202c      	movs	r0, #44	; 0x2c
 8004444:	fb00 f202 	mul.w	r2, r0, r2
 8004448:	440a      	add	r2, r1
 800444a:	3240      	adds	r2, #64	; 0x40
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 818e 	beq.w	8004778 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3354      	adds	r3, #84	; 0x54
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2d8      	uxtb	r0, r3
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	3354      	adds	r3, #84	; 0x54
 8004480:	4602      	mov	r2, r0
 8004482:	701a      	strb	r2, [r3, #0]
}
 8004484:	e178      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	212c      	movs	r1, #44	; 0x2c
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	4413      	add	r3, r2
 8004492:	3354      	adds	r3, #84	; 0x54
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	f083 0301 	eor.w	r3, r3, #1
 800449a:	b2d8      	uxtb	r0, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3354      	adds	r3, #84	; 0x54
 80044aa:	4602      	mov	r2, r0
 80044ac:	701a      	strb	r2, [r3, #0]
}
 80044ae:	e163      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	f040 80f6 	bne.w	80046b4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3361      	adds	r3, #97	; 0x61
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d109      	bne.n	80044f0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	3360      	adds	r3, #96	; 0x60
 80044ea:	2201      	movs	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e0c9      	b.n	8004684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	3361      	adds	r3, #97	; 0x61
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d109      	bne.n	8004518 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3360      	adds	r3, #96	; 0x60
 8004512:	2205      	movs	r2, #5
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e0b5      	b.n	8004684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3361      	adds	r3, #97	; 0x61
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b06      	cmp	r3, #6
 800452a:	d009      	beq.n	8004540 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3361      	adds	r3, #97	; 0x61
 800453a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800453c:	2b08      	cmp	r3, #8
 800453e:	d150      	bne.n	80045e2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	335c      	adds	r3, #92	; 0x5c
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	202c      	movs	r0, #44	; 0x2c
 8004558:	fb00 f303 	mul.w	r3, r0, r3
 800455c:	440b      	add	r3, r1
 800455e:	335c      	adds	r3, #92	; 0x5c
 8004560:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	212c      	movs	r1, #44	; 0x2c
 8004568:	fb01 f303 	mul.w	r3, r1, r3
 800456c:	4413      	add	r3, r2
 800456e:	335c      	adds	r3, #92	; 0x5c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d912      	bls.n	800459c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	335c      	adds	r3, #92	; 0x5c
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3360      	adds	r3, #96	; 0x60
 8004596:	2204      	movs	r2, #4
 8004598:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800459a:	e073      	b.n	8004684 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3360      	adds	r3, #96	; 0x60
 80045aa:	2202      	movs	r2, #2
 80045ac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045cc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045e0:	e050      	b.n	8004684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	212c      	movs	r1, #44	; 0x2c
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	4413      	add	r3, r2
 80045ee:	3361      	adds	r3, #97	; 0x61
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d122      	bne.n	800463c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	212c      	movs	r1, #44	; 0x2c
 80045fc:	fb01 f303 	mul.w	r3, r1, r3
 8004600:	4413      	add	r3, r2
 8004602:	3360      	adds	r3, #96	; 0x60
 8004604:	2202      	movs	r2, #2
 8004606:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800461e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004626:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e023      	b.n	8004684 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	3361      	adds	r3, #97	; 0x61
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b07      	cmp	r3, #7
 800464e:	d119      	bne.n	8004684 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	212c      	movs	r1, #44	; 0x2c
 8004656:	fb01 f303 	mul.w	r3, r1, r3
 800465a:	4413      	add	r3, r2
 800465c:	335c      	adds	r3, #92	; 0x5c
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	202c      	movs	r0, #44	; 0x2c
 8004668:	fb00 f303 	mul.w	r3, r0, r3
 800466c:	440b      	add	r3, r1
 800466e:	335c      	adds	r3, #92	; 0x5c
 8004670:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3360      	adds	r3, #96	; 0x60
 8004680:	2204      	movs	r2, #4
 8004682:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	461a      	mov	r2, r3
 8004692:	2302      	movs	r3, #2
 8004694:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	b2d9      	uxtb	r1, r3
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	202c      	movs	r0, #44	; 0x2c
 80046a0:	fb00 f303 	mul.w	r3, r0, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	3360      	adds	r3, #96	; 0x60
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f008 ffb3 	bl	800d618 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80046b2:	e061      	b.n	8004778 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d156      	bne.n	8004778 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	333f      	adds	r3, #63	; 0x3f
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d111      	bne.n	8004702 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	212c      	movs	r1, #44	; 0x2c
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	4413      	add	r3, r2
 80046ea:	335c      	adds	r3, #92	; 0x5c
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f005 fb67 	bl	8009dce <USB_HC_Halt>
 8004700:	e031      	b.n	8004766 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	212c      	movs	r1, #44	; 0x2c
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	4413      	add	r3, r2
 800470e:	333f      	adds	r3, #63	; 0x3f
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	333f      	adds	r3, #63	; 0x3f
 8004724:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004726:	2b02      	cmp	r3, #2
 8004728:	d11d      	bne.n	8004766 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	212c      	movs	r1, #44	; 0x2c
 8004730:	fb01 f303 	mul.w	r3, r1, r3
 8004734:	4413      	add	r3, r2
 8004736:	335c      	adds	r3, #92	; 0x5c
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d110      	bne.n	8004766 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	212c      	movs	r1, #44	; 0x2c
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	4413      	add	r3, r2
 8004750:	3361      	adds	r3, #97	; 0x61
 8004752:	2203      	movs	r2, #3
 8004754:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f005 fb34 	bl	8009dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004772:	461a      	mov	r2, r3
 8004774:	2310      	movs	r3, #16
 8004776:	6093      	str	r3, [r2, #8]
}
 8004778:	bf00      	nop
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d11a      	bne.n	80047e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	461a      	mov	r2, r3
 80047be:	2304      	movs	r3, #4
 80047c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	212c      	movs	r1, #44	; 0x2c
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	3361      	adds	r3, #97	; 0x61
 80047d0:	2206      	movs	r2, #6
 80047d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	b2d2      	uxtb	r2, r2
 80047dc:	4611      	mov	r1, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f005 faf5 	bl	8009dce <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80047e4:	e331      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b20      	cmp	r3, #32
 80047fa:	d12e      	bne.n	800485a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	2320      	movs	r3, #32
 800480c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	212c      	movs	r1, #44	; 0x2c
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	4413      	add	r3, r2
 800481a:	333d      	adds	r3, #61	; 0x3d
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b01      	cmp	r3, #1
 8004820:	f040 8313 	bne.w	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	212c      	movs	r1, #44	; 0x2c
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	4413      	add	r3, r2
 8004830:	333d      	adds	r3, #61	; 0x3d
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	212c      	movs	r1, #44	; 0x2c
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	4413      	add	r3, r2
 8004842:	3360      	adds	r3, #96	; 0x60
 8004844:	2202      	movs	r2, #2
 8004846:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	4611      	mov	r1, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f005 fabb 	bl	8009dce <USB_HC_Halt>
}
 8004858:	e2f7      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800486c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004870:	d112      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	015a      	lsls	r2, r3, #5
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	4413      	add	r3, r2
 800487a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800487e:	461a      	mov	r2, r3
 8004880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004884:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	4611      	mov	r1, r2
 8004890:	4618      	mov	r0, r3
 8004892:	f005 fa9c 	bl	8009dce <USB_HC_Halt>
}
 8004896:	e2d8      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d140      	bne.n	8004930 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	335c      	adds	r3, #92	; 0x5c
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d111      	bne.n	80048fa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	212c      	movs	r1, #44	; 0x2c
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	4413      	add	r3, r2
 80048e2:	333d      	adds	r3, #61	; 0x3d
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f4:	461a      	mov	r2, r3
 80048f6:	2340      	movs	r3, #64	; 0x40
 80048f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	4413      	add	r3, r2
 8004902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004906:	461a      	mov	r2, r3
 8004908:	2301      	movs	r3, #1
 800490a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3361      	adds	r3, #97	; 0x61
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	b2d2      	uxtb	r2, r2
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f005 fa50 	bl	8009dce <USB_HC_Halt>
}
 800492e:	e28c      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d12c      	bne.n	80049a0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	3361      	adds	r3, #97	; 0x61
 8004954:	2204      	movs	r2, #4
 8004956:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	212c      	movs	r1, #44	; 0x2c
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	4413      	add	r3, r2
 8004964:	333d      	adds	r3, #61	; 0x3d
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	212c      	movs	r1, #44	; 0x2c
 8004970:	fb01 f303 	mul.w	r3, r1, r3
 8004974:	4413      	add	r3, r2
 8004976:	335c      	adds	r3, #92	; 0x5c
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f005 fa21 	bl	8009dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	4413      	add	r3, r2
 8004994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004998:	461a      	mov	r2, r3
 800499a:	2340      	movs	r3, #64	; 0x40
 800499c:	6093      	str	r3, [r2, #8]
}
 800499e:	e254      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d11a      	bne.n	80049ec <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c2:	461a      	mov	r2, r3
 80049c4:	2308      	movs	r3, #8
 80049c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	3361      	adds	r3, #97	; 0x61
 80049d6:	2205      	movs	r2, #5
 80049d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f005 f9f2 	bl	8009dce <USB_HC_Halt>
}
 80049ea:	e22e      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0310 	and.w	r3, r3, #16
 80049fe:	2b10      	cmp	r3, #16
 8004a00:	d140      	bne.n	8004a84 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	212c      	movs	r1, #44	; 0x2c
 8004a08:	fb01 f303 	mul.w	r3, r1, r3
 8004a0c:	4413      	add	r3, r2
 8004a0e:	335c      	adds	r3, #92	; 0x5c
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	212c      	movs	r1, #44	; 0x2c
 8004a1a:	fb01 f303 	mul.w	r3, r1, r3
 8004a1e:	4413      	add	r3, r2
 8004a20:	3361      	adds	r3, #97	; 0x61
 8004a22:	2203      	movs	r2, #3
 8004a24:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	212c      	movs	r1, #44	; 0x2c
 8004a2c:	fb01 f303 	mul.w	r3, r1, r3
 8004a30:	4413      	add	r3, r2
 8004a32:	333d      	adds	r3, #61	; 0x3d
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d112      	bne.n	8004a60 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	212c      	movs	r1, #44	; 0x2c
 8004a40:	fb01 f303 	mul.w	r3, r1, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	333c      	adds	r3, #60	; 0x3c
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d108      	bne.n	8004a60 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	333d      	adds	r3, #61	; 0x3d
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	4611      	mov	r1, r2
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f005 f9af 	bl	8009dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	2310      	movs	r3, #16
 8004a80:	6093      	str	r3, [r2, #8]
}
 8004a82:	e1e2      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a96:	2b80      	cmp	r3, #128	; 0x80
 8004a98:	d164      	bne.n	8004b64 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d111      	bne.n	8004ac6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	212c      	movs	r1, #44	; 0x2c
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	4413      	add	r3, r2
 8004aae:	3361      	adds	r3, #97	; 0x61
 8004ab0:	2206      	movs	r2, #6
 8004ab2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f005 f985 	bl	8009dce <USB_HC_Halt>
 8004ac4:	e044      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	212c      	movs	r1, #44	; 0x2c
 8004acc:	fb01 f303 	mul.w	r3, r1, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	335c      	adds	r3, #92	; 0x5c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	202c      	movs	r0, #44	; 0x2c
 8004ade:	fb00 f303 	mul.w	r3, r0, r3
 8004ae2:	440b      	add	r3, r1
 8004ae4:	335c      	adds	r3, #92	; 0x5c
 8004ae6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	212c      	movs	r1, #44	; 0x2c
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	335c      	adds	r3, #92	; 0x5c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d920      	bls.n	8004b3e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	212c      	movs	r1, #44	; 0x2c
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	4413      	add	r3, r2
 8004b08:	335c      	adds	r3, #92	; 0x5c
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	212c      	movs	r1, #44	; 0x2c
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	3360      	adds	r3, #96	; 0x60
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	b2d9      	uxtb	r1, r3
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	202c      	movs	r0, #44	; 0x2c
 8004b2a:	fb00 f303 	mul.w	r3, r0, r3
 8004b2e:	4413      	add	r3, r2
 8004b30:	3360      	adds	r3, #96	; 0x60
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f008 fd6e 	bl	800d618 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b3c:	e008      	b.n	8004b50 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	3360      	adds	r3, #96	; 0x60
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	6093      	str	r3, [r2, #8]
}
 8004b62:	e172      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d11b      	bne.n	8004bb4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3361      	adds	r3, #97	; 0x61
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f005 f918 	bl	8009dce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004baa:	461a      	mov	r2, r3
 8004bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb0:	6093      	str	r3, [r2, #8]
}
 8004bb2:	e14a      	b.n	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	f040 813f 	bne.w	8004e4a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3361      	adds	r3, #97	; 0x61
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d17d      	bne.n	8004cdc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	212c      	movs	r1, #44	; 0x2c
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	3360      	adds	r3, #96	; 0x60
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	333f      	adds	r3, #63	; 0x3f
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d00a      	beq.n	8004c1c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	212c      	movs	r1, #44	; 0x2c
 8004c0c:	fb01 f303 	mul.w	r3, r1, r3
 8004c10:	4413      	add	r3, r2
 8004c12:	333f      	adds	r3, #63	; 0x3f
 8004c14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	f040 8100 	bne.w	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d113      	bne.n	8004c4c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	3355      	adds	r3, #85	; 0x55
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f083 0301 	eor.w	r3, r3, #1
 8004c38:	b2d8      	uxtb	r0, r3
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	3355      	adds	r3, #85	; 0x55
 8004c48:	4602      	mov	r2, r0
 8004c4a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 80e3 	bne.w	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	212c      	movs	r1, #44	; 0x2c
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	334c      	adds	r3, #76	; 0x4c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80d8 	beq.w	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	212c      	movs	r1, #44	; 0x2c
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	334c      	adds	r3, #76	; 0x4c
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	202c      	movs	r0, #44	; 0x2c
 8004c82:	fb00 f202 	mul.w	r2, r0, r2
 8004c86:	440a      	add	r2, r1
 8004c88:	3240      	adds	r2, #64	; 0x40
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	202c      	movs	r0, #44	; 0x2c
 8004c96:	fb00 f202 	mul.w	r2, r0, r2
 8004c9a:	440a      	add	r2, r1
 8004c9c:	3240      	adds	r2, #64	; 0x40
 8004c9e:	8812      	ldrh	r2, [r2, #0]
 8004ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80b5 	beq.w	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	212c      	movs	r1, #44	; 0x2c
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3355      	adds	r3, #85	; 0x55
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	f083 0301 	eor.w	r3, r3, #1
 8004cc6:	b2d8      	uxtb	r0, r3
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	212c      	movs	r1, #44	; 0x2c
 8004cce:	fb01 f303 	mul.w	r3, r1, r3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3355      	adds	r3, #85	; 0x55
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	e09f      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3361      	adds	r3, #97	; 0x61
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d109      	bne.n	8004d04 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3360      	adds	r3, #96	; 0x60
 8004cfe:	2202      	movs	r2, #2
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e08b      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	212c      	movs	r1, #44	; 0x2c
 8004d0a:	fb01 f303 	mul.w	r3, r1, r3
 8004d0e:	4413      	add	r3, r2
 8004d10:	3361      	adds	r3, #97	; 0x61
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d109      	bne.n	8004d2c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	212c      	movs	r1, #44	; 0x2c
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	4413      	add	r3, r2
 8004d24:	3360      	adds	r3, #96	; 0x60
 8004d26:	2202      	movs	r2, #2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	e077      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	212c      	movs	r1, #44	; 0x2c
 8004d32:	fb01 f303 	mul.w	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3361      	adds	r3, #97	; 0x61
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b05      	cmp	r3, #5
 8004d3e:	d109      	bne.n	8004d54 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	212c      	movs	r1, #44	; 0x2c
 8004d46:	fb01 f303 	mul.w	r3, r1, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3360      	adds	r3, #96	; 0x60
 8004d4e:	2205      	movs	r2, #5
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	e063      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	212c      	movs	r1, #44	; 0x2c
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	4413      	add	r3, r2
 8004d60:	3361      	adds	r3, #97	; 0x61
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	d009      	beq.n	8004d7c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	212c      	movs	r1, #44	; 0x2c
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	3361      	adds	r3, #97	; 0x61
 8004d76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d14f      	bne.n	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	212c      	movs	r1, #44	; 0x2c
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	4413      	add	r3, r2
 8004d88:	335c      	adds	r3, #92	; 0x5c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	202c      	movs	r0, #44	; 0x2c
 8004d94:	fb00 f303 	mul.w	r3, r0, r3
 8004d98:	440b      	add	r3, r1
 8004d9a:	335c      	adds	r3, #92	; 0x5c
 8004d9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	335c      	adds	r3, #92	; 0x5c
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d912      	bls.n	8004dd8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	335c      	adds	r3, #92	; 0x5c
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	212c      	movs	r1, #44	; 0x2c
 8004dca:	fb01 f303 	mul.w	r3, r1, r3
 8004dce:	4413      	add	r3, r2
 8004dd0:	3360      	adds	r3, #96	; 0x60
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e021      	b.n	8004e1c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	212c      	movs	r1, #44	; 0x2c
 8004dde:	fb01 f303 	mul.w	r3, r1, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	3360      	adds	r3, #96	; 0x60
 8004de6:	2202      	movs	r2, #2
 8004de8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e00:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e08:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e16:	461a      	mov	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	b2d9      	uxtb	r1, r3
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	202c      	movs	r0, #44	; 0x2c
 8004e38:	fb00 f303 	mul.w	r3, r0, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3360      	adds	r3, #96	; 0x60
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	461a      	mov	r2, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f008 fbe7 	bl	800d618 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e4a:	bf00      	nop
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b08a      	sub	sp, #40	; 0x28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	0c5b      	lsrs	r3, r3, #17
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	091b      	lsrs	r3, r3, #4
 8004e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e86:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d004      	beq.n	8004e98 <HCD_RXQLVL_IRQHandler+0x46>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	f000 80a9 	beq.w	8004fe8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004e96:	e0aa      	b.n	8004fee <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80a6 	beq.w	8004fec <HCD_RXQLVL_IRQHandler+0x19a>
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	212c      	movs	r1, #44	; 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3344      	adds	r3, #68	; 0x44
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 809b 	beq.w	8004fec <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3350      	adds	r3, #80	; 0x50
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	441a      	add	r2, r3
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	202c      	movs	r0, #44	; 0x2c
 8004ed0:	fb00 f303 	mul.w	r3, r0, r3
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334c      	adds	r3, #76	; 0x4c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d87a      	bhi.n	8004fd4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	212c      	movs	r1, #44	; 0x2c
 8004ee8:	fb01 f303 	mul.w	r3, r1, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	3344      	adds	r3, #68	; 0x44
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	f004 fac0 	bl	800947c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3344      	adds	r3, #68	; 0x44
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	441a      	add	r2, r3
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	202c      	movs	r0, #44	; 0x2c
 8004f16:	fb00 f303 	mul.w	r3, r0, r3
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3344      	adds	r3, #68	; 0x44
 8004f1e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	212c      	movs	r1, #44	; 0x2c
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3350      	adds	r3, #80	; 0x50
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	441a      	add	r2, r3
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	202c      	movs	r0, #44	; 0x2c
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	440b      	add	r3, r1
 8004f40:	3350      	adds	r3, #80	; 0x50
 8004f42:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	0cdb      	lsrs	r3, r3, #19
 8004f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f58:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	212c      	movs	r1, #44	; 0x2c
 8004f60:	fb01 f303 	mul.w	r3, r1, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	3340      	adds	r3, #64	; 0x40
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d13c      	bne.n	8004fec <HCD_RXQLVL_IRQHandler+0x19a>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d039      	beq.n	8004fec <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f8e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f96:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	212c      	movs	r1, #44	; 0x2c
 8004fb0:	fb01 f303 	mul.w	r3, r1, r3
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3354      	adds	r3, #84	; 0x54
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2d8      	uxtb	r0, r3
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	212c      	movs	r1, #44	; 0x2c
 8004fc6:	fb01 f303 	mul.w	r3, r1, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	3354      	adds	r3, #84	; 0x54
 8004fce:	4602      	mov	r2, r0
 8004fd0:	701a      	strb	r2, [r3, #0]
      break;
 8004fd2:	e00b      	b.n	8004fec <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	212c      	movs	r1, #44	; 0x2c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	3360      	adds	r3, #96	; 0x60
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	701a      	strb	r2, [r3, #0]
      break;
 8004fe6:	e001      	b.n	8004fec <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004fe8:	bf00      	nop
 8004fea:	e000      	b.n	8004fee <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004fec:	bf00      	nop
  }
}
 8004fee:	bf00      	nop
 8004ff0:	3728      	adds	r7, #40	; 0x28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005022:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d10b      	bne.n	8005046 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b01      	cmp	r3, #1
 8005036:	d102      	bne.n	800503e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f008 fad1 	bl	800d5e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f043 0302 	orr.w	r3, r3, #2
 8005044:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d132      	bne.n	80050b6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f043 0308 	orr.w	r3, r3, #8
 8005056:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b04      	cmp	r3, #4
 8005060:	d126      	bne.n	80050b0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d113      	bne.n	8005092 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005074:	d106      	bne.n	8005084 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2102      	movs	r1, #2
 800507c:	4618      	mov	r0, r3
 800507e:	f004 fb6b 	bl	8009758 <USB_InitFSLSPClkSel>
 8005082:	e011      	b.n	80050a8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2101      	movs	r1, #1
 800508a:	4618      	mov	r0, r3
 800508c:	f004 fb64 	bl	8009758 <USB_InitFSLSPClkSel>
 8005090:	e00a      	b.n	80050a8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d106      	bne.n	80050a8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050a0:	461a      	mov	r2, r3
 80050a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80050a6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f008 fac3 	bl	800d634 <HAL_HCD_PortEnabled_Callback>
 80050ae:	e002      	b.n	80050b6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f008 facd 	bl	800d650 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d103      	bne.n	80050c8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f043 0320 	orr.w	r3, r3, #32
 80050c6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050ce:	461a      	mov	r2, r3
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e12b      	b.n	8005346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd fc96 	bl	8002a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800512e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800513e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005140:	f001 fd7a 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8005144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4a81      	ldr	r2, [pc, #516]	; (8005350 <HAL_I2C_Init+0x274>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d807      	bhi.n	8005160 <HAL_I2C_Init+0x84>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a80      	ldr	r2, [pc, #512]	; (8005354 <HAL_I2C_Init+0x278>)
 8005154:	4293      	cmp	r3, r2
 8005156:	bf94      	ite	ls
 8005158:	2301      	movls	r3, #1
 800515a:	2300      	movhi	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e006      	b.n	800516e <HAL_I2C_Init+0x92>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_I2C_Init+0x27c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	bf94      	ite	ls
 8005168:	2301      	movls	r3, #1
 800516a:	2300      	movhi	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e0e7      	b.n	8005346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a78      	ldr	r2, [pc, #480]	; (800535c <HAL_I2C_Init+0x280>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0c9b      	lsrs	r3, r3, #18
 8005180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a6a      	ldr	r2, [pc, #424]	; (8005350 <HAL_I2C_Init+0x274>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d802      	bhi.n	80051b0 <HAL_I2C_Init+0xd4>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	3301      	adds	r3, #1
 80051ae:	e009      	b.n	80051c4 <HAL_I2C_Init+0xe8>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a69      	ldr	r2, [pc, #420]	; (8005360 <HAL_I2C_Init+0x284>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	3301      	adds	r3, #1
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	495c      	ldr	r1, [pc, #368]	; (8005350 <HAL_I2C_Init+0x274>)
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d819      	bhi.n	8005218 <HAL_I2C_Init+0x13c>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1e59      	subs	r1, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f2:	1c59      	adds	r1, r3, #1
 80051f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051f8:	400b      	ands	r3, r1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_I2C_Init+0x138>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e59      	subs	r1, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fbb1 f3f3 	udiv	r3, r1, r3
 800520c:	3301      	adds	r3, #1
 800520e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005212:	e051      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005214:	2304      	movs	r3, #4
 8005216:	e04f      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <HAL_I2C_Init+0x168>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e58      	subs	r0, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	440b      	add	r3, r1
 800522e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005232:	3301      	adds	r3, #1
 8005234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e012      	b.n	800526a <HAL_I2C_Init+0x18e>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1e58      	subs	r0, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	0099      	lsls	r1, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Init+0x196>
 800526e:	2301      	movs	r3, #1
 8005270:	e022      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10e      	bne.n	8005298 <HAL_I2C_Init+0x1bc>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1e58      	subs	r0, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	440b      	add	r3, r1
 8005288:	fbb0 f3f3 	udiv	r3, r0, r3
 800528c:	3301      	adds	r3, #1
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005296:	e00f      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1e58      	subs	r0, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	0099      	lsls	r1, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ae:	3301      	adds	r3, #1
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6911      	ldr	r1, [r2, #16]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68d2      	ldr	r2, [r2, #12]
 80052f2:	4311      	orrs	r1, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	000186a0 	.word	0x000186a0
 8005354:	001e847f 	.word	0x001e847f
 8005358:	003d08ff 	.word	0x003d08ff
 800535c:	431bde83 	.word	0x431bde83
 8005360:	10624dd3 	.word	0x10624dd3

08005364 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b088      	sub	sp, #32
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	461a      	mov	r2, r3
 8005370:	460b      	mov	r3, r1
 8005372:	817b      	strh	r3, [r7, #10]
 8005374:	4613      	mov	r3, r2
 8005376:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005378:	f7fd fec0 	bl	80030fc <HAL_GetTick>
 800537c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b20      	cmp	r3, #32
 8005388:	f040 80e0 	bne.w	800554c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	2319      	movs	r3, #25
 8005392:	2201      	movs	r2, #1
 8005394:	4970      	ldr	r1, [pc, #448]	; (8005558 <HAL_I2C_Master_Transmit+0x1f4>)
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 fd86 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80053a2:	2302      	movs	r3, #2
 80053a4:	e0d3      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_I2C_Master_Transmit+0x50>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e0cc      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d007      	beq.n	80053da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2221      	movs	r2, #33	; 0x21
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2210      	movs	r2, #16
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	893a      	ldrh	r2, [r7, #8]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a50      	ldr	r2, [pc, #320]	; (800555c <HAL_I2C_Master_Transmit+0x1f8>)
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800541c:	8979      	ldrh	r1, [r7, #10]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	6a3a      	ldr	r2, [r7, #32]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fbf0 	bl	8005c08 <I2C_MasterRequestWrite>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e08d      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005448:	e066      	b.n	8005518 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6a39      	ldr	r1, [r7, #32]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fe00 	bl	8006054 <I2C_WaitOnTXEFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	2b04      	cmp	r3, #4
 8005460:	d107      	bne.n	8005472 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005470:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e06b      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	781a      	ldrb	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800549e:	3b01      	subs	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d11b      	bne.n	80054ec <HAL_I2C_Master_Transmit+0x188>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d017      	beq.n	80054ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	6a39      	ldr	r1, [r7, #32]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 fdf0 	bl	80060d6 <I2C_WaitOnBTFFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00d      	beq.n	8005518 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005500:	2b04      	cmp	r3, #4
 8005502:	d107      	bne.n	8005514 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e01a      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	2b00      	cmp	r3, #0
 800551e:	d194      	bne.n	800544a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	00100002 	.word	0x00100002
 800555c:	ffff0000 	.word	0xffff0000

08005560 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08c      	sub	sp, #48	; 0x30
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	461a      	mov	r2, r3
 800556c:	460b      	mov	r3, r1
 800556e:	817b      	strh	r3, [r7, #10]
 8005570:	4613      	mov	r3, r2
 8005572:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005574:	f7fd fdc2 	bl	80030fc <HAL_GetTick>
 8005578:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b20      	cmp	r3, #32
 8005584:	f040 820b 	bne.w	800599e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	2319      	movs	r3, #25
 800558e:	2201      	movs	r2, #1
 8005590:	497c      	ldr	r1, [pc, #496]	; (8005784 <HAL_I2C_Master_Receive+0x224>)
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fc88 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
 80055a0:	e1fe      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2C_Master_Receive+0x50>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e1f7      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d007      	beq.n	80055d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2222      	movs	r2, #34	; 0x22
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2210      	movs	r2, #16
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	893a      	ldrh	r2, [r7, #8]
 8005606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4a5c      	ldr	r2, [pc, #368]	; (8005788 <HAL_I2C_Master_Receive+0x228>)
 8005616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005618:	8979      	ldrh	r1, [r7, #10]
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fb74 	bl	8005d0c <I2C_MasterRequestRead>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e1b8      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	2b00      	cmp	r3, #0
 8005634:	d113      	bne.n	800565e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	623b      	str	r3, [r7, #32]
 800564a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e18c      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	2b01      	cmp	r3, #1
 8005664:	d11b      	bne.n	800569e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e16c      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d11b      	bne.n	80056de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	61bb      	str	r3, [r7, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	e14c      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005704:	e138      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	2b03      	cmp	r3, #3
 800570c:	f200 80f1 	bhi.w	80058f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005714:	2b01      	cmp	r3, #1
 8005716:	d123      	bne.n	8005760 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 fd1b 	bl	8006158 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e139      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800575e:	e10b      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005764:	2b02      	cmp	r3, #2
 8005766:	d14e      	bne.n	8005806 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	2200      	movs	r2, #0
 8005770:	4906      	ldr	r1, [pc, #24]	; (800578c <HAL_I2C_Master_Receive+0x22c>)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fb98 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d008      	beq.n	8005790 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e10e      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
 8005782:	bf00      	nop
 8005784:	00100002 	.word	0x00100002
 8005788:	ffff0000 	.word	0xffff0000
 800578c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005804:	e0b8      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	2200      	movs	r2, #0
 800580e:	4966      	ldr	r1, [pc, #408]	; (80059a8 <HAL_I2C_Master_Receive+0x448>)
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fb49 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0bf      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2200      	movs	r2, #0
 800586a:	494f      	ldr	r1, [pc, #316]	; (80059a8 <HAL_I2C_Master_Receive+0x448>)
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fb1b 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e091      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800588a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058f0:	e042      	b.n	8005978 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fc2e 	bl	8006158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e04c      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b04      	cmp	r3, #4
 8005944:	d118      	bne.n	8005978 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	f47f aec2 	bne.w	8005706 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	e000      	b.n	80059a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800599e:	2302      	movs	r3, #2
  }
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3728      	adds	r7, #40	; 0x28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	00010004 	.word	0x00010004

080059ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	460b      	mov	r3, r1
 80059ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80059bc:	f7fd fb9e 	bl	80030fc <HAL_GetTick>
 80059c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	f040 8111 	bne.w	8005bf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	2319      	movs	r3, #25
 80059da:	2201      	movs	r2, #1
 80059dc:	4988      	ldr	r1, [pc, #544]	; (8005c00 <HAL_I2C_IsDeviceReady+0x254>)
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fa62 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
 80059ec:	e104      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_I2C_IsDeviceReady+0x50>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0fd      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d007      	beq.n	8005a22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0201 	orr.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2224      	movs	r2, #36	; 0x24
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a70      	ldr	r2, [pc, #448]	; (8005c04 <HAL_I2C_IsDeviceReady+0x258>)
 8005a44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fa20 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7c:	d103      	bne.n	8005a86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e0b6      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a8a:	897b      	ldrh	r3, [r7, #10]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd fb2f 	bl	80030fc <HAL_GetTick>
 8005a9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	bf0c      	ite	eq
 8005aae:	2301      	moveq	r3, #1
 8005ab0:	2300      	movne	r3, #0
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2301      	moveq	r3, #1
 8005ac8:	2300      	movne	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ace:	e025      	b.n	8005b1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ad0:	f7fd fb14 	bl	80030fc <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d302      	bcc.n	8005ae6 <HAL_I2C_IsDeviceReady+0x13a>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	22a0      	movs	r2, #160	; 0xa0
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2ba0      	cmp	r3, #160	; 0xa0
 8005b26:	d005      	beq.n	8005b34 <HAL_I2C_IsDeviceReady+0x188>
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <HAL_I2C_IsDeviceReady+0x188>
 8005b2e:	7dbb      	ldrb	r3, [r7, #22]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0cd      	beq.n	8005ad0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d129      	bne.n	8005b9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2319      	movs	r3, #25
 8005b76:	2201      	movs	r2, #1
 8005b78:	4921      	ldr	r1, [pc, #132]	; (8005c00 <HAL_I2C_IsDeviceReady+0x254>)
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 f994 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e036      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e02c      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2319      	movs	r3, #25
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	490f      	ldr	r1, [pc, #60]	; (8005c00 <HAL_I2C_IsDeviceReady+0x254>)
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f970 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e012      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	f4ff af32 	bcc.w	8005a46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005bf6:	2302      	movs	r3, #2
  }
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3720      	adds	r7, #32
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	00100002 	.word	0x00100002
 8005c04:	ffff0000 	.word	0xffff0000

08005c08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	460b      	mov	r3, r1
 8005c16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d006      	beq.n	8005c32 <I2C_MasterRequestWrite+0x2a>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d003      	beq.n	8005c32 <I2C_MasterRequestWrite+0x2a>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c30:	d108      	bne.n	8005c44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	e00b      	b.n	8005c5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	2b12      	cmp	r3, #18
 8005c4a:	d107      	bne.n	8005c5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f91d 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00d      	beq.n	8005c90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c82:	d103      	bne.n	8005c8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e035      	b.n	8005cfc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c98:	d108      	bne.n	8005cac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ca8:	611a      	str	r2, [r3, #16]
 8005caa:	e01b      	b.n	8005ce4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cac:	897b      	ldrh	r3, [r7, #10]
 8005cae:	11db      	asrs	r3, r3, #7
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f063 030f 	orn	r3, r3, #15
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	490e      	ldr	r1, [pc, #56]	; (8005d04 <I2C_MasterRequestWrite+0xfc>)
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f943 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e010      	b.n	8005cfc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cda:	897b      	ldrh	r3, [r7, #10]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4907      	ldr	r1, [pc, #28]	; (8005d08 <I2C_MasterRequestWrite+0x100>)
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f933 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	00010008 	.word	0x00010008
 8005d08:	00010002 	.word	0x00010002

08005d0c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d30:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d006      	beq.n	8005d46 <I2C_MasterRequestRead+0x3a>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d003      	beq.n	8005d46 <I2C_MasterRequestRead+0x3a>
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d44:	d108      	bne.n	8005d58 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e00b      	b.n	8005d70 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	2b11      	cmp	r3, #17
 8005d5e:	d107      	bne.n	8005d70 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f893 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d96:	d103      	bne.n	8005da0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e079      	b.n	8005e98 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dac:	d108      	bne.n	8005dc0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]
 8005dbe:	e05f      	b.n	8005e80 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005dc0:	897b      	ldrh	r3, [r7, #10]
 8005dc2:	11db      	asrs	r3, r3, #7
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f003 0306 	and.w	r3, r3, #6
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f063 030f 	orn	r3, r3, #15
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	4930      	ldr	r1, [pc, #192]	; (8005ea0 <I2C_MasterRequestRead+0x194>)
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f8b9 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e054      	b.n	8005e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dee:	897b      	ldrh	r3, [r7, #10]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4929      	ldr	r1, [pc, #164]	; (8005ea4 <I2C_MasterRequestRead+0x198>)
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f8a9 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e044      	b.n	8005e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e32:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f831 	bl	8005ea8 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00d      	beq.n	8005e68 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e5a:	d103      	bne.n	8005e64 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e62:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e017      	b.n	8005e98 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	11db      	asrs	r3, r3, #7
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	f003 0306 	and.w	r3, r3, #6
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f063 030e 	orn	r3, r3, #14
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <I2C_MasterRequestRead+0x198>)
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f865 	bl	8005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	00010008 	.word	0x00010008
 8005ea4:	00010002 	.word	0x00010002

08005ea8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb8:	e025      	b.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec0:	d021      	beq.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec2:	f7fd f91b 	bl	80030fc <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d302      	bcc.n	8005ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d116      	bne.n	8005f06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	f043 0220 	orr.w	r2, r3, #32
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e023      	b.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10d      	bne.n	8005f2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	43da      	mvns	r2, r3
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	461a      	mov	r2, r3
 8005f2a:	e00c      	b.n	8005f46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	43da      	mvns	r2, r3
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d0b6      	beq.n	8005eba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f64:	e051      	b.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d123      	bne.n	8005fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e046      	b.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc4:	d021      	beq.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc6:	f7fd f899 	bl	80030fc <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d302      	bcc.n	8005fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d116      	bne.n	800600a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e020      	b.n	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10c      	bne.n	800602e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	43da      	mvns	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	bf14      	ite	ne
 8006026:	2301      	movne	r3, #1
 8006028:	2300      	moveq	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	e00b      	b.n	8006046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	43da      	mvns	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d18d      	bne.n	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006060:	e02d      	b.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f8ce 	bl	8006204 <I2C_IsAcknowledgeFailed>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e02d      	b.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006078:	d021      	beq.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607a:	f7fd f83f 	bl	80030fc <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	429a      	cmp	r2, r3
 8006088:	d302      	bcc.n	8006090 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d116      	bne.n	80060be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f043 0220 	orr.w	r2, r3, #32
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e007      	b.n	80060ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c8:	2b80      	cmp	r3, #128	; 0x80
 80060ca:	d1ca      	bne.n	8006062 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
 80060de:	60b9      	str	r1, [r7, #8]
 80060e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060e2:	e02d      	b.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f88d 	bl	8006204 <I2C_IsAcknowledgeFailed>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e02d      	b.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fa:	d021      	beq.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060fc:	f7fc fffe 	bl	80030fc <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	d302      	bcc.n	8006112 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d116      	bne.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e007      	b.n	8006150 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b04      	cmp	r3, #4
 800614c:	d1ca      	bne.n	80060e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006164:	e042      	b.n	80061ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b10      	cmp	r3, #16
 8006172:	d119      	bne.n	80061a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0210 	mvn.w	r2, #16
 800617c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e029      	b.n	80061fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a8:	f7fc ffa8 	bl	80030fc <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d116      	bne.n	80061ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e007      	b.n	80061fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d1b5      	bne.n	8006166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621a:	d11b      	bne.n	8006254 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006224:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	f043 0204 	orr.w	r2, r3, #4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b20      	cmp	r3, #32
 8006276:	d129      	bne.n	80062cc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2224      	movs	r2, #36	; 0x24
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0210 	bic.w	r2, r2, #16
 800629e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d12a      	bne.n	800634a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006314:	89fb      	ldrh	r3, [r7, #14]
 8006316:	f023 030f 	bic.w	r3, r3, #15
 800631a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	b29a      	uxth	r2, r3
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	4313      	orrs	r3, r2
 8006324:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	89fa      	ldrh	r2, [r7, #14]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e267      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d075      	beq.n	8006462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006376:	4b88      	ldr	r3, [pc, #544]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
 800637e:	2b04      	cmp	r3, #4
 8006380:	d00c      	beq.n	800639c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006382:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800638a:	2b08      	cmp	r3, #8
 800638c:	d112      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800638e:	4b82      	ldr	r3, [pc, #520]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800639a:	d10b      	bne.n	80063b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800639c:	4b7e      	ldr	r3, [pc, #504]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d05b      	beq.n	8006460 <HAL_RCC_OscConfig+0x108>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d157      	bne.n	8006460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e242      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063bc:	d106      	bne.n	80063cc <HAL_RCC_OscConfig+0x74>
 80063be:	4b76      	ldr	r3, [pc, #472]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a75      	ldr	r2, [pc, #468]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e01d      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCC_OscConfig+0x98>
 80063d6:	4b70      	ldr	r3, [pc, #448]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a6f      	ldr	r2, [pc, #444]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e0:	6013      	str	r3, [r2, #0]
 80063e2:	4b6d      	ldr	r3, [pc, #436]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a6c      	ldr	r2, [pc, #432]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e00b      	b.n	8006408 <HAL_RCC_OscConfig+0xb0>
 80063f0:	4b69      	ldr	r3, [pc, #420]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a68      	ldr	r2, [pc, #416]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b66      	ldr	r3, [pc, #408]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a65      	ldr	r2, [pc, #404]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d013      	beq.n	8006438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fc fe74 	bl	80030fc <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006418:	f7fc fe70 	bl	80030fc <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e207      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b5b      	ldr	r3, [pc, #364]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f0      	beq.n	8006418 <HAL_RCC_OscConfig+0xc0>
 8006436:	e014      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006438:	f7fc fe60 	bl	80030fc <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006440:	f7fc fe5c 	bl	80030fc <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e1f3      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006452:	4b51      	ldr	r3, [pc, #324]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0xe8>
 800645e:	e000      	b.n	8006462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d063      	beq.n	8006536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800646e:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006482:	2b08      	cmp	r3, #8
 8006484:	d11c      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006486:	4b44      	ldr	r3, [pc, #272]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d116      	bne.n	80064c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006492:	4b41      	ldr	r3, [pc, #260]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d001      	beq.n	80064aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e1c7      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	4937      	ldr	r1, [pc, #220]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064be:	e03a      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d020      	beq.n	800650a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064c8:	4b34      	ldr	r3, [pc, #208]	; (800659c <HAL_RCC_OscConfig+0x244>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ce:	f7fc fe15 	bl	80030fc <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d6:	f7fc fe11 	bl	80030fc <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1a8      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f4:	4b28      	ldr	r3, [pc, #160]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4925      	ldr	r1, [pc, #148]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 8006504:	4313      	orrs	r3, r2
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	e015      	b.n	8006536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650a:	4b24      	ldr	r3, [pc, #144]	; (800659c <HAL_RCC_OscConfig+0x244>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006510:	f7fc fdf4 	bl	80030fc <HAL_GetTick>
 8006514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006516:	e008      	b.n	800652a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006518:	f7fc fdf0 	bl	80030fc <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b02      	cmp	r3, #2
 8006524:	d901      	bls.n	800652a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e187      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1f0      	bne.n	8006518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d036      	beq.n	80065b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d016      	beq.n	8006578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654a:	4b15      	ldr	r3, [pc, #84]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800654c:	2201      	movs	r2, #1
 800654e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006550:	f7fc fdd4 	bl	80030fc <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006556:	e008      	b.n	800656a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006558:	f7fc fdd0 	bl	80030fc <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d901      	bls.n	800656a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e167      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_OscConfig+0x240>)
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f0      	beq.n	8006558 <HAL_RCC_OscConfig+0x200>
 8006576:	e01b      	b.n	80065b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_RCC_OscConfig+0x248>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800657e:	f7fc fdbd 	bl	80030fc <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006584:	e00e      	b.n	80065a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006586:	f7fc fdb9 	bl	80030fc <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d907      	bls.n	80065a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e150      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 8006598:	40023800 	.word	0x40023800
 800659c:	42470000 	.word	0x42470000
 80065a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a4:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ea      	bne.n	8006586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 8097 	beq.w	80066ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065c2:	4b81      	ldr	r3, [pc, #516]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10f      	bne.n	80065ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	4b7d      	ldr	r3, [pc, #500]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a7c      	ldr	r2, [pc, #496]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	60bb      	str	r3, [r7, #8]
 80065e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ea:	2301      	movs	r3, #1
 80065ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ee:	4b77      	ldr	r3, [pc, #476]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d118      	bne.n	800662c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065fa:	4b74      	ldr	r3, [pc, #464]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a73      	ldr	r2, [pc, #460]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006606:	f7fc fd79 	bl	80030fc <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800660e:	f7fc fd75 	bl	80030fc <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e10c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006620:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <HAL_RCC_OscConfig+0x474>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <HAL_RCC_OscConfig+0x2ea>
 8006634:	4b64      	ldr	r3, [pc, #400]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a63      	ldr	r2, [pc, #396]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e01c      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b05      	cmp	r3, #5
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0x30c>
 800664a:	4b5f      	ldr	r3, [pc, #380]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664e:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006650:	f043 0304 	orr.w	r3, r3, #4
 8006654:	6713      	str	r3, [r2, #112]	; 0x70
 8006656:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665a:	4a5b      	ldr	r2, [pc, #364]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 0301 	orr.w	r3, r3, #1
 8006660:	6713      	str	r3, [r2, #112]	; 0x70
 8006662:	e00b      	b.n	800667c <HAL_RCC_OscConfig+0x324>
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006668:	4a57      	ldr	r2, [pc, #348]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800666a:	f023 0301 	bic.w	r3, r3, #1
 800666e:	6713      	str	r3, [r2, #112]	; 0x70
 8006670:	4b55      	ldr	r3, [pc, #340]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006674:	4a54      	ldr	r2, [pc, #336]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006676:	f023 0304 	bic.w	r3, r3, #4
 800667a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d015      	beq.n	80066b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fc fd3a 	bl	80030fc <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668a:	e00a      	b.n	80066a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800668c:	f7fc fd36 	bl	80030fc <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f241 3288 	movw	r2, #5000	; 0x1388
 800669a:	4293      	cmp	r3, r2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0cb      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a2:	4b49      	ldr	r3, [pc, #292]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0ee      	beq.n	800668c <HAL_RCC_OscConfig+0x334>
 80066ae:	e014      	b.n	80066da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b0:	f7fc fd24 	bl	80030fc <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b6:	e00a      	b.n	80066ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066b8:	f7fc fd20 	bl	80030fc <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d901      	bls.n	80066ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e0b5      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ce:	4b3e      	ldr	r3, [pc, #248]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1ee      	bne.n	80066b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d105      	bne.n	80066ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066e0:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	4a38      	ldr	r2, [pc, #224]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80a1 	beq.w	8006838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 030c 	and.w	r3, r3, #12
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d05c      	beq.n	80067bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d141      	bne.n	800678e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670a:	4b31      	ldr	r3, [pc, #196]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006710:	f7fc fcf4 	bl	80030fc <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006718:	f7fc fcf0 	bl	80030fc <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e087      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1f0      	bne.n	8006718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	431a      	orrs	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	019b      	lsls	r3, r3, #6
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	3b01      	subs	r3, #1
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	491b      	ldr	r1, [pc, #108]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 800675c:	4313      	orrs	r3, r2
 800675e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006760:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006766:	f7fc fcc9 	bl	80030fc <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800676e:	f7fc fcc5 	bl	80030fc <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e05c      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x416>
 800678c:	e054      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fc fcb2 	bl	80030fc <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679c:	f7fc fcae 	bl	80030fc <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e045      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x444>
 80067ba:	e03d      	b.n	8006838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d107      	bne.n	80067d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e038      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40007000 	.word	0x40007000
 80067d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067d4:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <HAL_RCC_OscConfig+0x4ec>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d028      	beq.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d121      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d11a      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800680a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800680c:	4293      	cmp	r3, r2
 800680e:	d111      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	3b01      	subs	r3, #1
 800681e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006820:	429a      	cmp	r2, r3
 8006822:	d107      	bne.n	8006834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800

08006848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e0cc      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800685c:	4b68      	ldr	r3, [pc, #416]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d90c      	bls.n	8006884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686a:	4b65      	ldr	r3, [pc, #404]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006872:	4b63      	ldr	r3, [pc, #396]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e0b8      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800689c:	4b59      	ldr	r3, [pc, #356]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a58      	ldr	r2, [pc, #352]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0308 	and.w	r3, r3, #8
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068b4:	4b53      	ldr	r3, [pc, #332]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a52      	ldr	r2, [pc, #328]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c0:	4b50      	ldr	r3, [pc, #320]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	494d      	ldr	r1, [pc, #308]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d044      	beq.n	8006968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d107      	bne.n	80068f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e6:	4b47      	ldr	r3, [pc, #284]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d119      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e07f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d003      	beq.n	8006906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006902:	2b03      	cmp	r3, #3
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006906:	4b3f      	ldr	r3, [pc, #252]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e06f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e067      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4934      	ldr	r1, [pc, #208]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006938:	f7fc fbe0 	bl	80030fc <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006940:	f7fc fbdc 	bl	80030fc <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	; 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e04f      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	4b2b      	ldr	r3, [pc, #172]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006968:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d20c      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b22      	ldr	r3, [pc, #136]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <HAL_RCC_ClockConfig+0x1b8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d001      	beq.n	8006990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e032      	b.n	80069f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800699c:	4b19      	ldr	r3, [pc, #100]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4916      	ldr	r1, [pc, #88]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ba:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	490e      	ldr	r1, [pc, #56]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069ce:	f000 f821 	bl	8006a14 <HAL_RCC_GetSysClockFreq>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <HAL_RCC_ClockConfig+0x1bc>)
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	490a      	ldr	r1, [pc, #40]	; (8006a08 <HAL_RCC_ClockConfig+0x1c0>)
 80069e0:	5ccb      	ldrb	r3, [r1, r3]
 80069e2:	fa22 f303 	lsr.w	r3, r2, r3
 80069e6:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <HAL_RCC_ClockConfig+0x1c4>)
 80069e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069ea:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_RCC_ClockConfig+0x1c8>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fc fb40 	bl	8003074 <HAL_InitTick>

  return HAL_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	40023c00 	.word	0x40023c00
 8006a04:	40023800 	.word	0x40023800
 8006a08:	0800f298 	.word	0x0800f298
 8006a0c:	200000c8 	.word	0x200000c8
 8006a10:	200000cc 	.word	0x200000cc

08006a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b094      	sub	sp, #80	; 0x50
 8006a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a20:	2300      	movs	r3, #0
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a24:	2300      	movs	r3, #0
 8006a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a2c:	4b79      	ldr	r3, [pc, #484]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d00d      	beq.n	8006a54 <HAL_RCC_GetSysClockFreq+0x40>
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	f200 80e1 	bhi.w	8006c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_RCC_GetSysClockFreq+0x34>
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d003      	beq.n	8006a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a46:	e0db      	b.n	8006c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a48:	4b73      	ldr	r3, [pc, #460]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006a4c:	e0db      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a4e:	4b73      	ldr	r3, [pc, #460]	; (8006c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8006a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a52:	e0d8      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a54:	4b6f      	ldr	r3, [pc, #444]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a5e:	4b6d      	ldr	r3, [pc, #436]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d063      	beq.n	8006b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a6a:	4b6a      	ldr	r3, [pc, #424]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	099b      	lsrs	r3, r3, #6
 8006a70:	2200      	movs	r2, #0
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
 8006a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a86:	4622      	mov	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	f04f 0000 	mov.w	r0, #0
 8006a8e:	f04f 0100 	mov.w	r1, #0
 8006a92:	0159      	lsls	r1, r3, #5
 8006a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a98:	0150      	lsls	r0, r2, #5
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	1a51      	subs	r1, r2, r1
 8006aa2:	6139      	str	r1, [r7, #16]
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ab8:	4659      	mov	r1, fp
 8006aba:	018b      	lsls	r3, r1, #6
 8006abc:	4651      	mov	r1, sl
 8006abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	018a      	lsls	r2, r1, #6
 8006ac6:	4651      	mov	r1, sl
 8006ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8006acc:	4659      	mov	r1, fp
 8006ace:	eb63 0901 	sbc.w	r9, r3, r1
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ae6:	4690      	mov	r8, r2
 8006ae8:	4699      	mov	r9, r3
 8006aea:	4623      	mov	r3, r4
 8006aec:	eb18 0303 	adds.w	r3, r8, r3
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	462b      	mov	r3, r5
 8006af4:	eb49 0303 	adc.w	r3, r9, r3
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006b06:	4629      	mov	r1, r5
 8006b08:	024b      	lsls	r3, r1, #9
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006b10:	4621      	mov	r1, r4
 8006b12:	024a      	lsls	r2, r1, #9
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b24:	f7f9 fbb4 	bl	8000290 <__aeabi_uldivmod>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b30:	e058      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b32:	4b38      	ldr	r3, [pc, #224]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	099b      	lsrs	r3, r3, #6
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	f04f 0000 	mov.w	r0, #0
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	0159      	lsls	r1, r3, #5
 8006b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b5e:	0150      	lsls	r0, r2, #5
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4641      	mov	r1, r8
 8006b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b84:	ebb2 040a 	subs.w	r4, r2, sl
 8006b88:	eb63 050b 	sbc.w	r5, r3, fp
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	00eb      	lsls	r3, r5, #3
 8006b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9a:	00e2      	lsls	r2, r4, #3
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	4643      	mov	r3, r8
 8006ba2:	18e3      	adds	r3, r4, r3
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	eb45 0303 	adc.w	r3, r5, r3
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bba:	4629      	mov	r1, r5
 8006bbc:	028b      	lsls	r3, r1, #10
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	028a      	lsls	r2, r1, #10
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61bb      	str	r3, [r7, #24]
 8006bd2:	61fa      	str	r2, [r7, #28]
 8006bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bd8:	f7f9 fb5a 	bl	8000290 <__aeabi_uldivmod>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4613      	mov	r3, r2
 8006be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	3301      	adds	r3, #1
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bfe:	e002      	b.n	8006c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c00:	4b05      	ldr	r3, [pc, #20]	; (8006c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3750      	adds	r7, #80	; 0x50
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800
 8006c18:	00f42400 	.word	0x00f42400
 8006c1c:	007a1200 	.word	0x007a1200

08006c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c20:	b480      	push	{r7}
 8006c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c24:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c26:	681b      	ldr	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	200000c8 	.word	0x200000c8

08006c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c3c:	f7ff fff0 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	0a9b      	lsrs	r3, r3, #10
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	4903      	ldr	r1, [pc, #12]	; (8006c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c4e:	5ccb      	ldrb	r3, [r1, r3]
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	0800f2a8 	.word	0x0800f2a8

08006c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c64:	f7ff ffdc 	bl	8006c20 <HAL_RCC_GetHCLKFreq>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4b05      	ldr	r3, [pc, #20]	; (8006c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	0b5b      	lsrs	r3, r3, #13
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	4903      	ldr	r1, [pc, #12]	; (8006c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
 8006c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40023800 	.word	0x40023800
 8006c84:	0800f2a8 	.word	0x0800f2a8

08006c88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e025      	b.n	8006ce8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d106      	bne.n	8006cb6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7fc f8ab 	bl	8002e0c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4610      	mov	r0, r2
 8006cca:	f002 f99f 	bl	800900c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	f002 f9f4 	bl	80090c6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e07b      	b.n	8006dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d12:	d009      	beq.n	8006d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	61da      	str	r2, [r3, #28]
 8006d1a:	e005      	b.n	8006d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fb ff16 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d70:	431a      	orrs	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	431a      	orrs	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	ea42 0103 	orr.w	r1, r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 0104 	and.w	r1, r3, #4
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	f003 0210 	and.w	r2, r3, #16
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b088      	sub	sp, #32
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_SPI_Transmit+0x22>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e126      	b.n	8007072 <HAL_SPI_Transmit+0x270>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e2c:	f7fc f966 	bl	80030fc <HAL_GetTick>
 8006e30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
 8006e44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e46:	e10b      	b.n	8007060 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_SPI_Transmit+0x52>
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e58:	e102      	b.n	8007060 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2203      	movs	r2, #3
 8006e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	88fa      	ldrh	r2, [r7, #6]
 8006e78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea0:	d10f      	bne.n	8006ec2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ec0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b40      	cmp	r3, #64	; 0x40
 8006ece:	d007      	beq.n	8006ee0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ede:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee8:	d14b      	bne.n	8006f82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SPI_Transmit+0xf6>
 8006ef2:	8afb      	ldrh	r3, [r7, #22]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d13e      	bne.n	8006f76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	881a      	ldrh	r2, [r3, #0]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	1c9a      	adds	r2, r3, #2
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f1c:	e02b      	b.n	8006f76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d112      	bne.n	8006f52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	881a      	ldrh	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	1c9a      	adds	r2, r3, #2
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f50:	e011      	b.n	8006f76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f52:	f7fc f8d3 	bl	80030fc <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d803      	bhi.n	8006f6a <HAL_SPI_Transmit+0x168>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f68:	d102      	bne.n	8006f70 <HAL_SPI_Transmit+0x16e>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f74:	e074      	b.n	8007060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ce      	bne.n	8006f1e <HAL_SPI_Transmit+0x11c>
 8006f80:	e04c      	b.n	800701c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <HAL_SPI_Transmit+0x18e>
 8006f8a:	8afb      	ldrh	r3, [r7, #22]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d140      	bne.n	8007012 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006fb6:	e02c      	b.n	8007012 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d113      	bne.n	8006fee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	7812      	ldrb	r2, [r2, #0]
 8006fd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fec:	e011      	b.n	8007012 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fee:	f7fc f885 	bl	80030fc <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d803      	bhi.n	8007006 <HAL_SPI_Transmit+0x204>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007004:	d102      	bne.n	800700c <HAL_SPI_Transmit+0x20a>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007010:	e026      	b.n	8007060 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1cd      	bne.n	8006fb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 fbcb 	bl	80077bc <SPI_EndRxTxTransaction>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2220      	movs	r2, #32
 8007030:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800703a:	2300      	movs	r3, #0
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	613b      	str	r3, [r7, #16]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e000      	b.n	8007060 <HAL_SPI_Transmit+0x25e>
  }

error:
 800705e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007070:	7ffb      	ldrb	r3, [r7, #31]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3720      	adds	r7, #32
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b088      	sub	sp, #32
 800707e:	af02      	add	r7, sp, #8
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007096:	d112      	bne.n	80070be <HAL_SPI_Receive+0x44>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10e      	bne.n	80070be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2204      	movs	r2, #4
 80070a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070a8:	88fa      	ldrh	r2, [r7, #6]
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4613      	mov	r3, r2
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f8f1 	bl	800729c <HAL_SPI_TransmitReceive>
 80070ba:	4603      	mov	r3, r0
 80070bc:	e0ea      	b.n	8007294 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_SPI_Receive+0x52>
 80070c8:	2302      	movs	r3, #2
 80070ca:	e0e3      	b.n	8007294 <HAL_SPI_Receive+0x21a>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070d4:	f7fc f812 	bl	80030fc <HAL_GetTick>
 80070d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80070e6:	2302      	movs	r3, #2
 80070e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070ea:	e0ca      	b.n	8007282 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <HAL_SPI_Receive+0x7e>
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d102      	bne.n	80070fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070fc:	e0c1      	b.n	8007282 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2204      	movs	r2, #4
 8007102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007144:	d10f      	bne.n	8007166 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007154:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007164:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d007      	beq.n	8007184 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007182:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d162      	bne.n	8007252 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800718c:	e02e      	b.n	80071ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b01      	cmp	r3, #1
 800719a:	d115      	bne.n	80071c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f103 020c 	add.w	r2, r3, #12
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	7812      	ldrb	r2, [r2, #0]
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071c6:	e011      	b.n	80071ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071c8:	f7fb ff98 	bl	80030fc <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d803      	bhi.n	80071e0 <HAL_SPI_Receive+0x166>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071de:	d102      	bne.n	80071e6 <HAL_SPI_Receive+0x16c>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071ea:	e04a      	b.n	8007282 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1cb      	bne.n	800718e <HAL_SPI_Receive+0x114>
 80071f6:	e031      	b.n	800725c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b01      	cmp	r3, #1
 8007204:	d113      	bne.n	800722e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	b292      	uxth	r2, r2
 8007212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	1c9a      	adds	r2, r3, #2
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	b29a      	uxth	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800722c:	e011      	b.n	8007252 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800722e:	f7fb ff65 	bl	80030fc <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d803      	bhi.n	8007246 <HAL_SPI_Receive+0x1cc>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007244:	d102      	bne.n	800724c <HAL_SPI_Receive+0x1d2>
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d102      	bne.n	8007252 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007250:	e017      	b.n	8007282 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1cd      	bne.n	80071f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fa45 	bl	80076f0 <SPI_EndRxTransaction>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
 800727e:	e000      	b.n	8007282 <HAL_SPI_Receive+0x208>
  }

error :
 8007280:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007292:	7dfb      	ldrb	r3, [r7, #23]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08c      	sub	sp, #48	; 0x30
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072aa:	2301      	movs	r3, #1
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_SPI_TransmitReceive+0x26>
 80072be:	2302      	movs	r3, #2
 80072c0:	e18a      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x33c>
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ca:	f7fb ff17 	bl	80030fc <HAL_GetTick>
 80072ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072e0:	887b      	ldrh	r3, [r7, #2]
 80072e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d00f      	beq.n	800730c <HAL_SPI_TransmitReceive+0x70>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072f2:	d107      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x68>
 80072fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007300:	2b04      	cmp	r3, #4
 8007302:	d003      	beq.n	800730c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007304:	2302      	movs	r3, #2
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800730a:	e15b      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <HAL_SPI_TransmitReceive+0x82>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_SPI_TransmitReceive+0x82>
 8007318:	887b      	ldrh	r3, [r7, #2]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007324:	e14e      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b04      	cmp	r3, #4
 8007330:	d003      	beq.n	800733a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2205      	movs	r2, #5
 8007336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	887a      	ldrh	r2, [r7, #2]
 800734a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	887a      	ldrh	r2, [r7, #2]
 8007350:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	887a      	ldrh	r2, [r7, #2]
 800735c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	887a      	ldrh	r2, [r7, #2]
 8007362:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d007      	beq.n	800738e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800738c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007396:	d178      	bne.n	800748a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x10a>
 80073a0:	8b7b      	ldrh	r3, [r7, #26]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d166      	bne.n	8007474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073aa:	881a      	ldrh	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b6:	1c9a      	adds	r2, r3, #2
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	3b01      	subs	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ca:	e053      	b.n	8007474 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d11b      	bne.n	8007412 <HAL_SPI_TransmitReceive+0x176>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d016      	beq.n	8007412 <HAL_SPI_TransmitReceive+0x176>
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d113      	bne.n	8007412 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	881a      	ldrh	r2, [r3, #0]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	1c9a      	adds	r2, r3, #2
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b01      	cmp	r3, #1
 800741e:	d119      	bne.n	8007454 <HAL_SPI_TransmitReceive+0x1b8>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d014      	beq.n	8007454 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	b292      	uxth	r2, r2
 8007436:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	1c9a      	adds	r2, r3, #2
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b29a      	uxth	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007450:	2301      	movs	r3, #1
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007454:	f7fb fe52 	bl	80030fc <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007460:	429a      	cmp	r2, r3
 8007462:	d807      	bhi.n	8007474 <HAL_SPI_TransmitReceive+0x1d8>
 8007464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800746a:	d003      	beq.n	8007474 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007472:	e0a7      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1a6      	bne.n	80073cc <HAL_SPI_TransmitReceive+0x130>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1a1      	bne.n	80073cc <HAL_SPI_TransmitReceive+0x130>
 8007488:	e07c      	b.n	8007584 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <HAL_SPI_TransmitReceive+0x1fc>
 8007492:	8b7b      	ldrh	r3, [r7, #26]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d16b      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	330c      	adds	r3, #12
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074be:	e057      	b.n	8007570 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d11c      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x26c>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d017      	beq.n	8007508 <HAL_SPI_TransmitReceive+0x26c>
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d114      	bne.n	8007508 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	330c      	adds	r3, #12
 80074e8:	7812      	ldrb	r2, [r2, #0]
 80074ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	d119      	bne.n	800754a <HAL_SPI_TransmitReceive+0x2ae>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d014      	beq.n	800754a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007546:	2301      	movs	r3, #1
 8007548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800754a:	f7fb fdd7 	bl	80030fc <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007556:	429a      	cmp	r2, r3
 8007558:	d803      	bhi.n	8007562 <HAL_SPI_TransmitReceive+0x2c6>
 800755a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007560:	d102      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x2cc>
 8007562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800756e:	e029      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1a2      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x224>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d19d      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 f917 	bl	80077bc <SPI_EndRxTxTransaction>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d006      	beq.n	80075a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075a0:	e010      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	e000      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3730      	adds	r7, #48	; 0x30
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075f0:	f7fb fd84 	bl	80030fc <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	1a9b      	subs	r3, r3, r2
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	4413      	add	r3, r2
 80075fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007600:	f7fb fd7c 	bl	80030fc <HAL_GetTick>
 8007604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007606:	4b39      	ldr	r3, [pc, #228]	; (80076ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	015b      	lsls	r3, r3, #5
 800760c:	0d1b      	lsrs	r3, r3, #20
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	fb02 f303 	mul.w	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007616:	e054      	b.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761e:	d050      	beq.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007620:	f7fb fd6c 	bl	80030fc <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	429a      	cmp	r2, r3
 800762e:	d902      	bls.n	8007636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d13d      	bne.n	80076b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800764e:	d111      	bne.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007658:	d004      	beq.n	8007664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007662:	d107      	bne.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767c:	d10f      	bne.n	800769e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800769c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e017      	b.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	3b01      	subs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d19b      	bne.n	8007618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	200000c8 	.word	0x200000c8

080076f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007704:	d111      	bne.n	800772a <SPI_EndRxTransaction+0x3a>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770e:	d004      	beq.n	800771a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007718:	d107      	bne.n	800772a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007728:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007732:	d12a      	bne.n	800778a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773c:	d012      	beq.n	8007764 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2200      	movs	r2, #0
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff ff49 	bl	80075e0 <SPI_WaitFlagStateUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d02d      	beq.n	80077b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007758:	f043 0220 	orr.w	r2, r3, #32
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e026      	b.n	80077b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	2101      	movs	r1, #1
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7ff ff36 	bl	80075e0 <SPI_WaitFlagStateUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01a      	beq.n	80077b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f043 0220 	orr.w	r2, r3, #32
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e013      	b.n	80077b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2200      	movs	r2, #0
 8007792:	2101      	movs	r1, #1
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff ff23 	bl	80075e0 <SPI_WaitFlagStateUntilTimeout>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	f043 0220 	orr.w	r2, r3, #32
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e000      	b.n	80077b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b088      	sub	sp, #32
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <SPI_EndRxTxTransaction+0x7c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a1b      	ldr	r2, [pc, #108]	; (800783c <SPI_EndRxTxTransaction+0x80>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	0d5b      	lsrs	r3, r3, #21
 80077d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e6:	d112      	bne.n	800780e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2200      	movs	r2, #0
 80077f0:	2180      	movs	r1, #128	; 0x80
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f7ff fef4 	bl	80075e0 <SPI_WaitFlagStateUntilTimeout>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d016      	beq.n	800782c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007802:	f043 0220 	orr.w	r2, r3, #32
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e00f      	b.n	800782e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00a      	beq.n	800782a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	3b01      	subs	r3, #1
 8007818:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007824:	2b80      	cmp	r3, #128	; 0x80
 8007826:	d0f2      	beq.n	800780e <SPI_EndRxTxTransaction+0x52>
 8007828:	e000      	b.n	800782c <SPI_EndRxTxTransaction+0x70>
        break;
 800782a:	bf00      	nop
  }

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200000c8 	.word	0x200000c8
 800783c:	165e9f81 	.word	0x165e9f81

08007840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e041      	b.n	80078d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d106      	bne.n	800786c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb f9cc 	bl	8002c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3304      	adds	r3, #4
 800787c:	4619      	mov	r1, r3
 800787e:	4610      	mov	r0, r2
 8007880:	f000 f8f4 	bl	8007a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_ConfigClockSource+0x1c>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e0b4      	b.n	8007a64 <HAL_TIM_ConfigClockSource+0x186>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007918:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007920:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68ba      	ldr	r2, [r7, #8]
 8007928:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007932:	d03e      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0xd4>
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007938:	f200 8087 	bhi.w	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007940:	f000 8086 	beq.w	8007a50 <HAL_TIM_ConfigClockSource+0x172>
 8007944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007948:	d87f      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 800794a:	2b70      	cmp	r3, #112	; 0x70
 800794c:	d01a      	beq.n	8007984 <HAL_TIM_ConfigClockSource+0xa6>
 800794e:	2b70      	cmp	r3, #112	; 0x70
 8007950:	d87b      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 8007952:	2b60      	cmp	r3, #96	; 0x60
 8007954:	d050      	beq.n	80079f8 <HAL_TIM_ConfigClockSource+0x11a>
 8007956:	2b60      	cmp	r3, #96	; 0x60
 8007958:	d877      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 800795a:	2b50      	cmp	r3, #80	; 0x50
 800795c:	d03c      	beq.n	80079d8 <HAL_TIM_ConfigClockSource+0xfa>
 800795e:	2b50      	cmp	r3, #80	; 0x50
 8007960:	d873      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 8007962:	2b40      	cmp	r3, #64	; 0x40
 8007964:	d058      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0x13a>
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d86f      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 800796a:	2b30      	cmp	r3, #48	; 0x30
 800796c:	d064      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0x15a>
 800796e:	2b30      	cmp	r3, #48	; 0x30
 8007970:	d86b      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 8007972:	2b20      	cmp	r3, #32
 8007974:	d060      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0x15a>
 8007976:	2b20      	cmp	r3, #32
 8007978:	d867      	bhi.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d05c      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0x15a>
 800797e:	2b10      	cmp	r3, #16
 8007980:	d05a      	beq.n	8007a38 <HAL_TIM_ConfigClockSource+0x15a>
 8007982:	e062      	b.n	8007a4a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	6899      	ldr	r1, [r3, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f000 f984 	bl	8007ca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	609a      	str	r2, [r3, #8]
      break;
 80079b0:	e04f      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6899      	ldr	r1, [r3, #8]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f000 f96d 	bl	8007ca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079d4:	609a      	str	r2, [r3, #8]
      break;
 80079d6:	e03c      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	6859      	ldr	r1, [r3, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	461a      	mov	r2, r3
 80079e6:	f000 f8e1 	bl	8007bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2150      	movs	r1, #80	; 0x50
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 f93a 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 80079f6:	e02c      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6859      	ldr	r1, [r3, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	461a      	mov	r2, r3
 8007a06:	f000 f900 	bl	8007c0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2160      	movs	r1, #96	; 0x60
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 f92a 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 8007a16:	e01c      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6859      	ldr	r1, [r3, #4]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	461a      	mov	r2, r3
 8007a26:	f000 f8c1 	bl	8007bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2140      	movs	r1, #64	; 0x40
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 f91a 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 8007a36:	e00c      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4619      	mov	r1, r3
 8007a42:	4610      	mov	r0, r2
 8007a44:	f000 f911 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 8007a48:	e003      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4e:	e000      	b.n	8007a52 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a40      	ldr	r2, [pc, #256]	; (8007b80 <TIM_Base_SetConfig+0x114>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d00f      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3d      	ldr	r2, [pc, #244]	; (8007b84 <TIM_Base_SetConfig+0x118>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00b      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a3c      	ldr	r2, [pc, #240]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d007      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a3b      	ldr	r2, [pc, #236]	; (8007b8c <TIM_Base_SetConfig+0x120>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d003      	beq.n	8007aac <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a3a      	ldr	r2, [pc, #232]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d108      	bne.n	8007abe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <TIM_Base_SetConfig+0x114>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d02b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007acc:	d027      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a2c      	ldr	r2, [pc, #176]	; (8007b84 <TIM_Base_SetConfig+0x118>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d023      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a2b      	ldr	r2, [pc, #172]	; (8007b88 <TIM_Base_SetConfig+0x11c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d01f      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a2a      	ldr	r2, [pc, #168]	; (8007b8c <TIM_Base_SetConfig+0x120>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d01b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a29      	ldr	r2, [pc, #164]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d017      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a28      	ldr	r2, [pc, #160]	; (8007b94 <TIM_Base_SetConfig+0x128>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a27      	ldr	r2, [pc, #156]	; (8007b98 <TIM_Base_SetConfig+0x12c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d00f      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a26      	ldr	r2, [pc, #152]	; (8007b9c <TIM_Base_SetConfig+0x130>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00b      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a25      	ldr	r2, [pc, #148]	; (8007ba0 <TIM_Base_SetConfig+0x134>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d007      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <TIM_Base_SetConfig+0x138>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d003      	beq.n	8007b1e <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a23      	ldr	r2, [pc, #140]	; (8007ba8 <TIM_Base_SetConfig+0x13c>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <TIM_Base_SetConfig+0x114>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_Base_SetConfig+0xf8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <TIM_Base_SetConfig+0x124>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d103      	bne.n	8007b6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	615a      	str	r2, [r3, #20]
}
 8007b72:	bf00      	nop
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40000400 	.word	0x40000400
 8007b88:	40000800 	.word	0x40000800
 8007b8c:	40000c00 	.word	0x40000c00
 8007b90:	40010400 	.word	0x40010400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800
 8007ba0:	40001800 	.word	0x40001800
 8007ba4:	40001c00 	.word	0x40001c00
 8007ba8:	40002000 	.word	0x40002000

08007bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	f023 0201 	bic.w	r2, r3, #1
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 030a 	bic.w	r3, r3, #10
 8007be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	621a      	str	r2, [r3, #32]
}
 8007bfe:	bf00      	nop
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b087      	sub	sp, #28
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f023 0210 	bic.w	r2, r3, #16
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
 8007c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	031b      	lsls	r3, r3, #12
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f043 0307 	orr.w	r3, r3, #7
 8007c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	609a      	str	r2, [r3, #8]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	021a      	lsls	r2, r3, #8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	609a      	str	r2, [r3, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d101      	bne.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e05a      	b.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a21      	ldr	r2, [pc, #132]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d022      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d01d      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1d      	ldr	r2, [pc, #116]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d018      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1b      	ldr	r2, [pc, #108]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1a      	ldr	r2, [pc, #104]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a18      	ldr	r2, [pc, #96]	; (8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a17      	ldr	r2, [pc, #92]	; (8007dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d004      	beq.n	8007d82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d10c      	bne.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40000400 	.word	0x40000400
 8007dc4:	40000800 	.word	0x40000800
 8007dc8:	40000c00 	.word	0x40000c00
 8007dcc:	40010400 	.word	0x40010400
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40001800 	.word	0x40001800

08007dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e03f      	b.n	8007e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d106      	bne.n	8007e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fa ff22 	bl	8002c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2224      	movs	r2, #36	; 0x24
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68da      	ldr	r2, [r3, #12]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 fe81 	bl	8008b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b08a      	sub	sp, #40	; 0x28
 8007e76:	af02      	add	r7, sp, #8
 8007e78:	60f8      	str	r0, [r7, #12]
 8007e7a:	60b9      	str	r1, [r7, #8]
 8007e7c:	603b      	str	r3, [r7, #0]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d17c      	bne.n	8007f8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_UART_Transmit+0x2c>
 8007e98:	88fb      	ldrh	r3, [r7, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e075      	b.n	8007f8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d101      	bne.n	8007eb0 <HAL_UART_Transmit+0x3e>
 8007eac:	2302      	movs	r3, #2
 8007eae:	e06e      	b.n	8007f8e <HAL_UART_Transmit+0x11c>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2221      	movs	r2, #33	; 0x21
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ec6:	f7fb f919 	bl	80030fc <HAL_GetTick>
 8007eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	88fa      	ldrh	r2, [r7, #6]
 8007ed0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	88fa      	ldrh	r2, [r7, #6]
 8007ed6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee0:	d108      	bne.n	8007ef4 <HAL_UART_Transmit+0x82>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d104      	bne.n	8007ef4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	61bb      	str	r3, [r7, #24]
 8007ef2:	e003      	b.n	8007efc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f04:	e02a      	b.n	8007f5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fbc1 	bl	8008698 <UART_WaitOnFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f1c:	2303      	movs	r3, #3
 8007f1e:	e036      	b.n	8007f8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e007      	b.n	8007f4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	781a      	ldrb	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	3b01      	subs	r3, #1
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1cf      	bne.n	8007f06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2140      	movs	r1, #64	; 0x40
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f000 fb91 	bl	8008698 <UART_WaitOnFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e006      	b.n	8007f8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e000      	b.n	8007f8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
  }
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b08a      	sub	sp, #40	; 0x28
 8007f9a:	af02      	add	r7, sp, #8
 8007f9c:	60f8      	str	r0, [r7, #12]
 8007f9e:	60b9      	str	r1, [r7, #8]
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	f040 808c 	bne.w	80080d0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_UART_Receive+0x2e>
 8007fbe:	88fb      	ldrh	r3, [r7, #6]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e084      	b.n	80080d2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_UART_Receive+0x40>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e07d      	b.n	80080d2 <HAL_UART_Receive+0x13c>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2222      	movs	r2, #34	; 0x22
 8007fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ff2:	f7fb f883 	bl	80030fc <HAL_GetTick>
 8007ff6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	88fa      	ldrh	r2, [r7, #6]
 8007ffc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800800c:	d108      	bne.n	8008020 <HAL_UART_Receive+0x8a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d104      	bne.n	8008020 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e003      	b.n	8008028 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008024:	2300      	movs	r3, #0
 8008026:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008030:	e043      	b.n	80080ba <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2200      	movs	r2, #0
 800803a:	2120      	movs	r1, #32
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 fb2b 	bl	8008698 <UART_WaitOnFlagUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e042      	b.n	80080d2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10c      	bne.n	800806c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	b29b      	uxth	r3, r3
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	b29a      	uxth	r2, r3
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	3302      	adds	r3, #2
 8008068:	61bb      	str	r3, [r7, #24]
 800806a:	e01f      	b.n	80080ac <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008074:	d007      	beq.n	8008086 <HAL_UART_Receive+0xf0>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <HAL_UART_Receive+0xfe>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d106      	bne.n	8008094 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	b2da      	uxtb	r2, r3
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	e008      	b.n	80080a6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080be:	b29b      	uxth	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1b6      	bne.n	8008032 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	e000      	b.n	80080d2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80080d0:	2302      	movs	r3, #2
  }
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	4613      	mov	r3, r2
 80080e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b20      	cmp	r3, #32
 80080f2:	d11d      	bne.n	8008130 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <HAL_UART_Receive_IT+0x26>
 80080fa:	88fb      	ldrh	r3, [r7, #6]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e016      	b.n	8008132 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_UART_Receive_IT+0x38>
 800810e:	2302      	movs	r3, #2
 8008110:	e00f      	b.n	8008132 <HAL_UART_Receive_IT+0x58>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	461a      	mov	r2, r3
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f000 fb24 	bl	8008774 <UART_Start_Receive_IT>
 800812c:	4603      	mov	r3, r0
 800812e:	e000      	b.n	8008132 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008130:	2302      	movs	r3, #2
  }
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b0ba      	sub	sp, #232	; 0xe8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008162:	2300      	movs	r3, #0
 8008164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 030f 	and.w	r3, r3, #15
 8008176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800817a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10f      	bne.n	80081a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008186:	f003 0320 	and.w	r3, r3, #32
 800818a:	2b00      	cmp	r3, #0
 800818c:	d009      	beq.n	80081a2 <HAL_UART_IRQHandler+0x66>
 800818e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008192:	f003 0320 	and.w	r3, r3, #32
 8008196:	2b00      	cmp	r3, #0
 8008198:	d003      	beq.n	80081a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc07 	bl	80089ae <UART_Receive_IT>
      return;
 80081a0:	e256      	b.n	8008650 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 80de 	beq.w	8008368 <HAL_UART_IRQHandler+0x22c>
 80081ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d106      	bne.n	80081c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80d1 	beq.w	8008368 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <HAL_UART_IRQHandler+0xae>
 80081d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	f043 0201 	orr.w	r2, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <HAL_UART_IRQHandler+0xd2>
 80081f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	f043 0202 	orr.w	r2, r3, #2
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800820e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <HAL_UART_IRQHandler+0xf6>
 800821a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d005      	beq.n	8008232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	f043 0204 	orr.w	r2, r3, #4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008236:	f003 0308 	and.w	r3, r3, #8
 800823a:	2b00      	cmp	r3, #0
 800823c:	d011      	beq.n	8008262 <HAL_UART_IRQHandler+0x126>
 800823e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d105      	bne.n	8008256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800824a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d005      	beq.n	8008262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	f043 0208 	orr.w	r2, r3, #8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 81ed 	beq.w	8008646 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	d008      	beq.n	800828a <HAL_UART_IRQHandler+0x14e>
 8008278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fb92 	bl	80089ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b40      	cmp	r3, #64	; 0x40
 8008296:	bf0c      	ite	eq
 8008298:	2301      	moveq	r3, #1
 800829a:	2300      	movne	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <HAL_UART_IRQHandler+0x17a>
 80082ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d04f      	beq.n	8008356 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 fa9a 	bl	80087f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d141      	bne.n	800834e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3314      	adds	r3, #20
 80082d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3314      	adds	r3, #20
 80082f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008306:	e841 2300 	strex	r3, r2, [r1]
 800830a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800830e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1d9      	bne.n	80082ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	2b00      	cmp	r3, #0
 800831c:	d013      	beq.n	8008346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	4a7d      	ldr	r2, [pc, #500]	; (8008518 <HAL_UART_IRQHandler+0x3dc>)
 8008324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb f8b3 	bl	8003496 <HAL_DMA_Abort_IT>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d016      	beq.n	8008364 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	e00e      	b.n	8008364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f990 	bl	800866c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	e00a      	b.n	8008364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f98c 	bl	800866c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008354:	e006      	b.n	8008364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f988 	bl	800866c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008362:	e170      	b.n	8008646 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008364:	bf00      	nop
    return;
 8008366:	e16e      	b.n	8008646 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	2b01      	cmp	r3, #1
 800836e:	f040 814a 	bne.w	8008606 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8143 	beq.w	8008606 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 813c 	beq.w	8008606 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800838e:	2300      	movs	r3, #0
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	60bb      	str	r3, [r7, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	60bb      	str	r3, [r7, #8]
 80083a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	f040 80b4 	bne.w	800851c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 8140 	beq.w	800864a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083d2:	429a      	cmp	r2, r3
 80083d4:	f080 8139 	bcs.w	800864a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ea:	f000 8088 	beq.w	80084fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083fc:	e853 3f00 	ldrex	r3, [r3]
 8008400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800840c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	330c      	adds	r3, #12
 8008416:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800841a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800841e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1d9      	bne.n	80083ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3314      	adds	r3, #20
 8008440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008444:	e853 3f00 	ldrex	r3, [r3]
 8008448:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800844a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800844c:	f023 0301 	bic.w	r3, r3, #1
 8008450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3314      	adds	r3, #20
 800845a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800845e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008462:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e1      	bne.n	800843a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3314      	adds	r3, #20
 800847c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3314      	adds	r3, #20
 8008496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800849a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800849c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e3      	bne.n	8008476 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	330c      	adds	r3, #12
 80084c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	f023 0310 	bic.w	r3, r3, #16
 80084d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	330c      	adds	r3, #12
 80084dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80084e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084e8:	e841 2300 	strex	r3, r2, [r1]
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1e3      	bne.n	80084bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	4618      	mov	r0, r3
 80084fa:	f7fa ff5c 	bl	80033b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008506:	b29b      	uxth	r3, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	b29b      	uxth	r3, r3
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8b6 	bl	8008680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008514:	e099      	b.n	800864a <HAL_UART_IRQHandler+0x50e>
 8008516:	bf00      	nop
 8008518:	080088b7 	.word	0x080088b7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008524:	b29b      	uxth	r3, r3
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 808b 	beq.w	800864e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 8086 	beq.w	800864e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	330c      	adds	r3, #12
 8008562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008566:	647a      	str	r2, [r7, #68]	; 0x44
 8008568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800856c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1e3      	bne.n	8008542 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3314      	adds	r3, #20
 8008580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	623b      	str	r3, [r7, #32]
   return(result);
 800858a:	6a3b      	ldr	r3, [r7, #32]
 800858c:	f023 0301 	bic.w	r3, r3, #1
 8008590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3314      	adds	r3, #20
 800859a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800859e:	633a      	str	r2, [r7, #48]	; 0x30
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e3      	bne.n	800857a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	330c      	adds	r3, #12
 80085c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0310 	bic.w	r3, r3, #16
 80085d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	330c      	adds	r3, #12
 80085e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80085e4:	61fa      	str	r2, [r7, #28]
 80085e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	69b9      	ldr	r1, [r7, #24]
 80085ea:	69fa      	ldr	r2, [r7, #28]
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	617b      	str	r3, [r7, #20]
   return(result);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e3      	bne.n	80085c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085fc:	4619      	mov	r1, r3
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f83e 	bl	8008680 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008604:	e023      	b.n	800864e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <HAL_UART_IRQHandler+0x4ea>
 8008612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f95d 	bl	80088de <UART_Transmit_IT>
    return;
 8008624:	e014      	b.n	8008650 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00e      	beq.n	8008650 <HAL_UART_IRQHandler+0x514>
 8008632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f99d 	bl	800897e <UART_EndTransmit_IT>
    return;
 8008644:	e004      	b.n	8008650 <HAL_UART_IRQHandler+0x514>
    return;
 8008646:	bf00      	nop
 8008648:	e002      	b.n	8008650 <HAL_UART_IRQHandler+0x514>
      return;
 800864a:	bf00      	nop
 800864c:	e000      	b.n	8008650 <HAL_UART_IRQHandler+0x514>
      return;
 800864e:	bf00      	nop
  }
}
 8008650:	37e8      	adds	r7, #232	; 0xe8
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop

08008658 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b090      	sub	sp, #64	; 0x40
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	4613      	mov	r3, r2
 80086a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086a8:	e050      	b.n	800874c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b0:	d04c      	beq.n	800874c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80086b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d007      	beq.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80086b8:	f7fa fd20 	bl	80030fc <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d241      	bcs.n	800874c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	330c      	adds	r3, #12
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d2:	e853 3f00 	ldrex	r3, [r3]
 80086d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80086e8:	637a      	str	r2, [r7, #52]	; 0x34
 80086ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e5      	bne.n	80086c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3314      	adds	r3, #20
 8008702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	613b      	str	r3, [r7, #16]
   return(result);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	63bb      	str	r3, [r7, #56]	; 0x38
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3314      	adds	r3, #20
 800871a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800871c:	623a      	str	r2, [r7, #32]
 800871e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	69f9      	ldr	r1, [r7, #28]
 8008722:	6a3a      	ldr	r2, [r7, #32]
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	61bb      	str	r3, [r7, #24]
   return(result);
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e5      	bne.n	80086fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2220      	movs	r2, #32
 800873c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e00f      	b.n	800876c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	4013      	ands	r3, r2
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	429a      	cmp	r2, r3
 800875a:	bf0c      	ite	eq
 800875c:	2301      	moveq	r3, #1
 800875e:	2300      	movne	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	79fb      	ldrb	r3, [r7, #7]
 8008766:	429a      	cmp	r2, r3
 8008768:	d09f      	beq.n	80086aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3740      	adds	r7, #64	; 0x40
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	4613      	mov	r3, r2
 8008780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	88fa      	ldrh	r2, [r7, #6]
 8008792:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2222      	movs	r2, #34	; 0x22
 800879e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d007      	beq.n	80087c2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68da      	ldr	r2, [r3, #12]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695a      	ldr	r2, [r3, #20]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f042 0201 	orr.w	r2, r2, #1
 80087d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0220 	orr.w	r2, r2, #32
 80087e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b095      	sub	sp, #84	; 0x54
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	330c      	adds	r3, #12
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800880e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	330c      	adds	r3, #12
 8008816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008818:	643a      	str	r2, [r7, #64]	; 0x40
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800881e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e5      	bne.n	80087f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3314      	adds	r3, #20
 8008832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	61fb      	str	r3, [r7, #28]
   return(result);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3314      	adds	r3, #20
 800884a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800884c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	2b01      	cmp	r3, #1
 8008866:	d119      	bne.n	800889c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	330c      	adds	r3, #12
 800886e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	60bb      	str	r3, [r7, #8]
   return(result);
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f023 0310 	bic.w	r3, r3, #16
 800887e:	647b      	str	r3, [r7, #68]	; 0x44
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	330c      	adds	r3, #12
 8008886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008888:	61ba      	str	r2, [r7, #24]
 800888a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888c:	6979      	ldr	r1, [r7, #20]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	e841 2300 	strex	r3, r2, [r1]
 8008894:	613b      	str	r3, [r7, #16]
   return(result);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1e5      	bne.n	8008868 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088aa:	bf00      	nop
 80088ac:	3754      	adds	r7, #84	; 0x54
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fecb 	bl	800866c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d6:	bf00      	nop
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b21      	cmp	r3, #33	; 0x21
 80088f0:	d13e      	bne.n	8008970 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088fa:	d114      	bne.n	8008926 <UART_Transmit_IT+0x48>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d110      	bne.n	8008926 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008918:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	1c9a      	adds	r2, r3, #2
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	621a      	str	r2, [r3, #32]
 8008924:	e008      	b.n	8008938 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	1c59      	adds	r1, r3, #1
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6211      	str	r1, [r2, #32]
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29b      	uxth	r3, r3
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	4619      	mov	r1, r3
 8008946:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10f      	bne.n	800896c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800896a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	e000      	b.n	8008972 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008970:	2302      	movs	r3, #2
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008994:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff fe5a 	bl	8008658 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b08c      	sub	sp, #48	; 0x30
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b22      	cmp	r3, #34	; 0x22
 80089c0:	f040 80ab 	bne.w	8008b1a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089cc:	d117      	bne.n	80089fe <UART_Receive_IT+0x50>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d113      	bne.n	80089fe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089d6:	2300      	movs	r3, #0
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	1c9a      	adds	r2, r3, #2
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28
 80089fc:	e026      	b.n	8008a4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a10:	d007      	beq.n	8008a22 <UART_Receive_IT+0x74>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10a      	bne.n	8008a30 <UART_Receive_IT+0x82>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	e008      	b.n	8008a42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d15a      	bne.n	8008b16 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f022 0220 	bic.w	r2, r2, #32
 8008a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0201 	bic.w	r2, r2, #1
 8008a8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d135      	bne.n	8008b0c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	330c      	adds	r3, #12
 8008aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f023 0310 	bic.w	r3, r3, #16
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	623a      	str	r2, [r7, #32]
 8008ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	69f9      	ldr	r1, [r7, #28]
 8008acc:	6a3a      	ldr	r2, [r7, #32]
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e5      	bne.n	8008aa6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	d10a      	bne.n	8008afe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	60fb      	str	r3, [r7, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff fdbb 	bl	8008680 <HAL_UARTEx_RxEventCallback>
 8008b0a:	e002      	b.n	8008b12 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7f8 faa1 	bl	8001054 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b12:	2300      	movs	r3, #0
 8008b14:	e002      	b.n	8008b1c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	e000      	b.n	8008b1c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b1a:	2302      	movs	r3, #2
  }
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3730      	adds	r7, #48	; 0x30
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b28:	b0c0      	sub	sp, #256	; 0x100
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b40:	68d9      	ldr	r1, [r3, #12]
 8008b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	ea40 0301 	orr.w	r3, r0, r1
 8008b4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	431a      	orrs	r2, r3
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b7c:	f021 010c 	bic.w	r1, r1, #12
 8008b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9e:	6999      	ldr	r1, [r3, #24]
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	ea40 0301 	orr.w	r3, r0, r1
 8008baa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b8f      	ldr	r3, [pc, #572]	; (8008df0 <UART_SetConfig+0x2cc>)
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d005      	beq.n	8008bc4 <UART_SetConfig+0xa0>
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b8d      	ldr	r3, [pc, #564]	; (8008df4 <UART_SetConfig+0x2d0>)
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d104      	bne.n	8008bce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bc4:	f7fe f84c 	bl	8006c60 <HAL_RCC_GetPCLK2Freq>
 8008bc8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bcc:	e003      	b.n	8008bd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bce:	f7fe f833 	bl	8006c38 <HAL_RCC_GetPCLK1Freq>
 8008bd2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be0:	f040 810c 	bne.w	8008dfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008be4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be8:	2200      	movs	r2, #0
 8008bea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bf2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	462b      	mov	r3, r5
 8008bfa:	1891      	adds	r1, r2, r2
 8008bfc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bfe:	415b      	adcs	r3, r3
 8008c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c06:	4621      	mov	r1, r4
 8008c08:	eb12 0801 	adds.w	r8, r2, r1
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	eb43 0901 	adc.w	r9, r3, r1
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c26:	4690      	mov	r8, r2
 8008c28:	4699      	mov	r9, r3
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	eb18 0303 	adds.w	r3, r8, r3
 8008c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c34:	462b      	mov	r3, r5
 8008c36:	eb49 0303 	adc.w	r3, r9, r3
 8008c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c52:	460b      	mov	r3, r1
 8008c54:	18db      	adds	r3, r3, r3
 8008c56:	653b      	str	r3, [r7, #80]	; 0x50
 8008c58:	4613      	mov	r3, r2
 8008c5a:	eb42 0303 	adc.w	r3, r2, r3
 8008c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c68:	f7f7 fb12 	bl	8000290 <__aeabi_uldivmod>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4b61      	ldr	r3, [pc, #388]	; (8008df8 <UART_SetConfig+0x2d4>)
 8008c72:	fba3 2302 	umull	r2, r3, r3, r2
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	011c      	lsls	r4, r3, #4
 8008c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	464b      	mov	r3, r9
 8008c90:	1891      	adds	r1, r2, r2
 8008c92:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c94:	415b      	adcs	r3, r3
 8008c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c9c:	4641      	mov	r1, r8
 8008c9e:	eb12 0a01 	adds.w	sl, r2, r1
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	eb43 0b01 	adc.w	fp, r3, r1
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	f04f 0300 	mov.w	r3, #0
 8008cb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cbc:	4692      	mov	sl, r2
 8008cbe:	469b      	mov	fp, r3
 8008cc0:	4643      	mov	r3, r8
 8008cc2:	eb1a 0303 	adds.w	r3, sl, r3
 8008cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cca:	464b      	mov	r3, r9
 8008ccc:	eb4b 0303 	adc.w	r3, fp, r3
 8008cd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ce0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ce4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	18db      	adds	r3, r3, r3
 8008cec:	643b      	str	r3, [r7, #64]	; 0x40
 8008cee:	4613      	mov	r3, r2
 8008cf0:	eb42 0303 	adc.w	r3, r2, r3
 8008cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008cfe:	f7f7 fac7 	bl	8000290 <__aeabi_uldivmod>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4611      	mov	r1, r2
 8008d08:	4b3b      	ldr	r3, [pc, #236]	; (8008df8 <UART_SetConfig+0x2d4>)
 8008d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	2264      	movs	r2, #100	; 0x64
 8008d12:	fb02 f303 	mul.w	r3, r2, r3
 8008d16:	1acb      	subs	r3, r1, r3
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d1e:	4b36      	ldr	r3, [pc, #216]	; (8008df8 <UART_SetConfig+0x2d4>)
 8008d20:	fba3 2302 	umull	r2, r3, r3, r2
 8008d24:	095b      	lsrs	r3, r3, #5
 8008d26:	005b      	lsls	r3, r3, #1
 8008d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d2c:	441c      	add	r4, r3
 8008d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d32:	2200      	movs	r2, #0
 8008d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d40:	4642      	mov	r2, r8
 8008d42:	464b      	mov	r3, r9
 8008d44:	1891      	adds	r1, r2, r2
 8008d46:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d48:	415b      	adcs	r3, r3
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d50:	4641      	mov	r1, r8
 8008d52:	1851      	adds	r1, r2, r1
 8008d54:	6339      	str	r1, [r7, #48]	; 0x30
 8008d56:	4649      	mov	r1, r9
 8008d58:	414b      	adcs	r3, r1
 8008d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	f04f 0300 	mov.w	r3, #0
 8008d64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d68:	4659      	mov	r1, fp
 8008d6a:	00cb      	lsls	r3, r1, #3
 8008d6c:	4651      	mov	r1, sl
 8008d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d72:	4651      	mov	r1, sl
 8008d74:	00ca      	lsls	r2, r1, #3
 8008d76:	4610      	mov	r0, r2
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	4642      	mov	r2, r8
 8008d7e:	189b      	adds	r3, r3, r2
 8008d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d84:	464b      	mov	r3, r9
 8008d86:	460a      	mov	r2, r1
 8008d88:	eb42 0303 	adc.w	r3, r2, r3
 8008d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008da0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008da4:	460b      	mov	r3, r1
 8008da6:	18db      	adds	r3, r3, r3
 8008da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008daa:	4613      	mov	r3, r2
 8008dac:	eb42 0303 	adc.w	r3, r2, r3
 8008db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008db6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dba:	f7f7 fa69 	bl	8000290 <__aeabi_uldivmod>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <UART_SetConfig+0x2d4>)
 8008dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8008dc8:	095b      	lsrs	r3, r3, #5
 8008dca:	2164      	movs	r1, #100	; 0x64
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	3332      	adds	r3, #50	; 0x32
 8008dd6:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <UART_SetConfig+0x2d4>)
 8008dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ddc:	095b      	lsrs	r3, r3, #5
 8008dde:	f003 0207 	and.w	r2, r3, #7
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4422      	add	r2, r4
 8008dea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dec:	e105      	b.n	8008ffa <UART_SetConfig+0x4d6>
 8008dee:	bf00      	nop
 8008df0:	40011000 	.word	0x40011000
 8008df4:	40011400 	.word	0x40011400
 8008df8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e00:	2200      	movs	r2, #0
 8008e02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e0e:	4642      	mov	r2, r8
 8008e10:	464b      	mov	r3, r9
 8008e12:	1891      	adds	r1, r2, r2
 8008e14:	6239      	str	r1, [r7, #32]
 8008e16:	415b      	adcs	r3, r3
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e1e:	4641      	mov	r1, r8
 8008e20:	1854      	adds	r4, r2, r1
 8008e22:	4649      	mov	r1, r9
 8008e24:	eb43 0501 	adc.w	r5, r3, r1
 8008e28:	f04f 0200 	mov.w	r2, #0
 8008e2c:	f04f 0300 	mov.w	r3, #0
 8008e30:	00eb      	lsls	r3, r5, #3
 8008e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e36:	00e2      	lsls	r2, r4, #3
 8008e38:	4614      	mov	r4, r2
 8008e3a:	461d      	mov	r5, r3
 8008e3c:	4643      	mov	r3, r8
 8008e3e:	18e3      	adds	r3, r4, r3
 8008e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e44:	464b      	mov	r3, r9
 8008e46:	eb45 0303 	adc.w	r3, r5, r3
 8008e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e5e:	f04f 0200 	mov.w	r2, #0
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	008b      	lsls	r3, r1, #2
 8008e6e:	4621      	mov	r1, r4
 8008e70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e74:	4621      	mov	r1, r4
 8008e76:	008a      	lsls	r2, r1, #2
 8008e78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e7c:	f7f7 fa08 	bl	8000290 <__aeabi_uldivmod>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4b60      	ldr	r3, [pc, #384]	; (8009008 <UART_SetConfig+0x4e4>)
 8008e86:	fba3 2302 	umull	r2, r3, r3, r2
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	011c      	lsls	r4, r3, #4
 8008e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	1891      	adds	r1, r2, r2
 8008ea6:	61b9      	str	r1, [r7, #24]
 8008ea8:	415b      	adcs	r3, r3
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	1851      	adds	r1, r2, r1
 8008eb4:	6139      	str	r1, [r7, #16]
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	414b      	adcs	r3, r1
 8008eba:	617b      	str	r3, [r7, #20]
 8008ebc:	f04f 0200 	mov.w	r2, #0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ec8:	4659      	mov	r1, fp
 8008eca:	00cb      	lsls	r3, r1, #3
 8008ecc:	4651      	mov	r1, sl
 8008ece:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ed2:	4651      	mov	r1, sl
 8008ed4:	00ca      	lsls	r2, r1, #3
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4603      	mov	r3, r0
 8008edc:	4642      	mov	r2, r8
 8008ede:	189b      	adds	r3, r3, r2
 8008ee0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ee4:	464b      	mov	r3, r9
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	eb42 0303 	adc.w	r3, r2, r3
 8008eec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8008efa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008efc:	f04f 0200 	mov.w	r2, #0
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f08:	4649      	mov	r1, r9
 8008f0a:	008b      	lsls	r3, r1, #2
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f12:	4641      	mov	r1, r8
 8008f14:	008a      	lsls	r2, r1, #2
 8008f16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f1a:	f7f7 f9b9 	bl	8000290 <__aeabi_uldivmod>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4b39      	ldr	r3, [pc, #228]	; (8009008 <UART_SetConfig+0x4e4>)
 8008f24:	fba3 1302 	umull	r1, r3, r3, r2
 8008f28:	095b      	lsrs	r3, r3, #5
 8008f2a:	2164      	movs	r1, #100	; 0x64
 8008f2c:	fb01 f303 	mul.w	r3, r1, r3
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	3332      	adds	r3, #50	; 0x32
 8008f36:	4a34      	ldr	r2, [pc, #208]	; (8009008 <UART_SetConfig+0x4e4>)
 8008f38:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3c:	095b      	lsrs	r3, r3, #5
 8008f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f42:	441c      	add	r4, r3
 8008f44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f48:	2200      	movs	r2, #0
 8008f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8008f4c:	677a      	str	r2, [r7, #116]	; 0x74
 8008f4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f52:	4642      	mov	r2, r8
 8008f54:	464b      	mov	r3, r9
 8008f56:	1891      	adds	r1, r2, r2
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	415b      	adcs	r3, r3
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f62:	4641      	mov	r1, r8
 8008f64:	1851      	adds	r1, r2, r1
 8008f66:	6039      	str	r1, [r7, #0]
 8008f68:	4649      	mov	r1, r9
 8008f6a:	414b      	adcs	r3, r1
 8008f6c:	607b      	str	r3, [r7, #4]
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	00cb      	lsls	r3, r1, #3
 8008f7e:	4651      	mov	r1, sl
 8008f80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f84:	4651      	mov	r1, sl
 8008f86:	00ca      	lsls	r2, r1, #3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	4642      	mov	r2, r8
 8008f90:	189b      	adds	r3, r3, r2
 8008f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f94:	464b      	mov	r3, r9
 8008f96:	460a      	mov	r2, r1
 8008f98:	eb42 0303 	adc.w	r3, r2, r3
 8008f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8008fa8:	667a      	str	r2, [r7, #100]	; 0x64
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	f04f 0300 	mov.w	r3, #0
 8008fb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	008b      	lsls	r3, r1, #2
 8008fba:	4641      	mov	r1, r8
 8008fbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	008a      	lsls	r2, r1, #2
 8008fc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fc8:	f7f7 f962 	bl	8000290 <__aeabi_uldivmod>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4b0d      	ldr	r3, [pc, #52]	; (8009008 <UART_SetConfig+0x4e4>)
 8008fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	2164      	movs	r1, #100	; 0x64
 8008fda:	fb01 f303 	mul.w	r3, r1, r3
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	011b      	lsls	r3, r3, #4
 8008fe2:	3332      	adds	r3, #50	; 0x32
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <UART_SetConfig+0x4e4>)
 8008fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	f003 020f 	and.w	r2, r3, #15
 8008ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4422      	add	r2, r4
 8008ff8:	609a      	str	r2, [r3, #8]
}
 8008ffa:	bf00      	nop
 8008ffc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009000:	46bd      	mov	sp, r7
 8009002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009006:	bf00      	nop
 8009008:	51eb851f 	.word	0x51eb851f

0800900c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d123      	bne.n	8009066 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009026:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	6851      	ldr	r1, [r2, #4]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	6892      	ldr	r2, [r2, #8]
 8009032:	4311      	orrs	r1, r2
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	68d2      	ldr	r2, [r2, #12]
 8009038:	4311      	orrs	r1, r2
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	6912      	ldr	r2, [r2, #16]
 800903e:	4311      	orrs	r1, r2
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	6952      	ldr	r2, [r2, #20]
 8009044:	4311      	orrs	r1, r2
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	6992      	ldr	r2, [r2, #24]
 800904a:	4311      	orrs	r1, r2
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	69d2      	ldr	r2, [r2, #28]
 8009050:	4311      	orrs	r1, r2
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	6a12      	ldr	r2, [r2, #32]
 8009056:	4311      	orrs	r1, r2
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800905c:	430a      	orrs	r2, r1
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	e028      	b.n	80090b8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	69d9      	ldr	r1, [r3, #28]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	4319      	orrs	r1, r3
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	430b      	orrs	r3, r1
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800908c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	6851      	ldr	r1, [r2, #4]
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	6892      	ldr	r2, [r2, #8]
 8009098:	4311      	orrs	r1, r2
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	68d2      	ldr	r2, [r2, #12]
 800909e:	4311      	orrs	r1, r2
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	6912      	ldr	r2, [r2, #16]
 80090a4:	4311      	orrs	r1, r2
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	6952      	ldr	r2, [r2, #20]
 80090aa:	4311      	orrs	r1, r2
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	6992      	ldr	r2, [r2, #24]
 80090b0:	430a      	orrs	r2, r1
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d128      	bne.n	800912a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	1e59      	subs	r1, r3, #1
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	011b      	lsls	r3, r3, #4
 80090ee:	4319      	orrs	r1, r3
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	4319      	orrs	r1, r3
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	3b01      	subs	r3, #1
 8009100:	031b      	lsls	r3, r3, #12
 8009102:	4319      	orrs	r1, r3
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	3b01      	subs	r3, #1
 800910a:	041b      	lsls	r3, r3, #16
 800910c:	4319      	orrs	r1, r3
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	3b01      	subs	r3, #1
 8009114:	051b      	lsls	r3, r3, #20
 8009116:	4319      	orrs	r1, r3
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	3b01      	subs	r3, #1
 800911e:	061b      	lsls	r3, r3, #24
 8009120:	430b      	orrs	r3, r1
 8009122:	431a      	orrs	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	609a      	str	r2, [r3, #8]
 8009128:	e02f      	b.n	800918a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009132:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	68d2      	ldr	r2, [r2, #12]
 800913a:	3a01      	subs	r2, #1
 800913c:	0311      	lsls	r1, r2, #12
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	6952      	ldr	r2, [r2, #20]
 8009142:	3a01      	subs	r2, #1
 8009144:	0512      	lsls	r2, r2, #20
 8009146:	430a      	orrs	r2, r1
 8009148:	431a      	orrs	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	1e59      	subs	r1, r3, #1
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	3b01      	subs	r3, #1
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	4319      	orrs	r1, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	3b01      	subs	r3, #1
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	4319      	orrs	r1, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	3b01      	subs	r3, #1
 8009176:	041b      	lsls	r3, r3, #16
 8009178:	4319      	orrs	r1, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	3b01      	subs	r3, #1
 8009180:	061b      	lsls	r3, r3, #24
 8009182:	430b      	orrs	r3, r1
 8009184:	431a      	orrs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009198:	b084      	sub	sp, #16
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	f107 001c 	add.w	r0, r7, #28
 80091a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d122      	bne.n	80091f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80091c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d105      	bne.n	80091ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f9c0 	bl	8009570 <USB_CoreReset>
 80091f0:	4603      	mov	r3, r0
 80091f2:	73fb      	strb	r3, [r7, #15]
 80091f4:	e01a      	b.n	800922c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9b4 	bl	8009570 <USB_CoreReset>
 8009208:	4603      	mov	r3, r0
 800920a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800920c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009216:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
 800921e:	e005      	b.n	800922c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	2b01      	cmp	r3, #1
 8009230:	d10b      	bne.n	800924a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	f043 0206 	orr.w	r2, r3, #6
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	f043 0220 	orr.w	r2, r3, #32
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009256:	b004      	add	sp, #16
 8009258:	4770      	bx	lr

0800925a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800925a:	b480      	push	{r7}
 800925c:	b083      	sub	sp, #12
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	f043 0201 	orr.w	r2, r3, #1
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f023 0201 	bic.w	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d115      	bne.n	80092ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092cc:	2001      	movs	r0, #1
 80092ce:	f7f9 ff21 	bl	8003114 <HAL_Delay>
      ms++;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3301      	adds	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f93a 	bl	8009552 <USB_GetMode>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d01e      	beq.n	8009322 <USB_SetCurrentMode+0x84>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b31      	cmp	r3, #49	; 0x31
 80092e8:	d9f0      	bls.n	80092cc <USB_SetCurrentMode+0x2e>
 80092ea:	e01a      	b.n	8009322 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d115      	bne.n	800931e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80092fe:	2001      	movs	r0, #1
 8009300:	f7f9 ff08 	bl	8003114 <HAL_Delay>
      ms++;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f921 	bl	8009552 <USB_GetMode>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <USB_SetCurrentMode+0x84>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2b31      	cmp	r3, #49	; 0x31
 800931a:	d9f0      	bls.n	80092fe <USB_SetCurrentMode+0x60>
 800931c:	e001      	b.n	8009322 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e005      	b.n	800932e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b32      	cmp	r3, #50	; 0x32
 8009326:	d101      	bne.n	800932c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e000      	b.n	800932e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4a13      	ldr	r2, [pc, #76]	; (800939c <USB_FlushTxFifo+0x64>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d901      	bls.n	8009358 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e01b      	b.n	8009390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	daf2      	bge.n	8009346 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	019b      	lsls	r3, r3, #6
 8009368:	f043 0220 	orr.w	r2, r3, #32
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a08      	ldr	r2, [pc, #32]	; (800939c <USB_FlushTxFifo+0x64>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d901      	bls.n	8009382 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e006      	b.n	8009390 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b20      	cmp	r3, #32
 800938c:	d0f0      	beq.n	8009370 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	00030d40 	.word	0x00030d40

080093a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4a11      	ldr	r2, [pc, #68]	; (80093fc <USB_FlushRxFifo+0x5c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d901      	bls.n	80093be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e018      	b.n	80093f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	daf2      	bge.n	80093ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2210      	movs	r2, #16
 80093ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4a08      	ldr	r2, [pc, #32]	; (80093fc <USB_FlushRxFifo+0x5c>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d901      	bls.n	80093e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e006      	b.n	80093f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b10      	cmp	r3, #16
 80093ec:	d0f0      	beq.n	80093d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	00030d40 	.word	0x00030d40

08009400 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009400:	b480      	push	{r7}
 8009402:	b089      	sub	sp, #36	; 0x24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	4611      	mov	r1, r2
 800940c:	461a      	mov	r2, r3
 800940e:	460b      	mov	r3, r1
 8009410:	71fb      	strb	r3, [r7, #7]
 8009412:	4613      	mov	r3, r2
 8009414:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800941e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d123      	bne.n	800946e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009426:	88bb      	ldrh	r3, [r7, #4]
 8009428:	3303      	adds	r3, #3
 800942a:	089b      	lsrs	r3, r3, #2
 800942c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800942e:	2300      	movs	r3, #0
 8009430:	61bb      	str	r3, [r7, #24]
 8009432:	e018      	b.n	8009466 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009434:	79fb      	ldrb	r3, [r7, #7]
 8009436:	031a      	lsls	r2, r3, #12
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	4413      	add	r3, r2
 800943c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009440:	461a      	mov	r2, r3
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	3301      	adds	r3, #1
 800944c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	3301      	adds	r3, #1
 8009452:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3301      	adds	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	3301      	adds	r3, #1
 800945e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	3301      	adds	r3, #1
 8009464:	61bb      	str	r3, [r7, #24]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	d3e2      	bcc.n	8009434 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3724      	adds	r7, #36	; 0x24
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800947c:	b480      	push	{r7}
 800947e:	b08b      	sub	sp, #44	; 0x2c
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4613      	mov	r3, r2
 8009488:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009492:	88fb      	ldrh	r3, [r7, #6]
 8009494:	089b      	lsrs	r3, r3, #2
 8009496:	b29b      	uxth	r3, r3
 8009498:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	623b      	str	r3, [r7, #32]
 80094a6:	e014      	b.n	80094d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	3301      	adds	r3, #1
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	3301      	adds	r3, #1
 80094be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	3301      	adds	r3, #1
 80094c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	3301      	adds	r3, #1
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80094cc:	6a3b      	ldr	r3, [r7, #32]
 80094ce:	3301      	adds	r3, #1
 80094d0:	623b      	str	r3, [r7, #32]
 80094d2:	6a3a      	ldr	r2, [r7, #32]
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d3e6      	bcc.n	80094a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80094da:	8bfb      	ldrh	r3, [r7, #30]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01e      	beq.n	800951e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ea:	461a      	mov	r2, r3
 80094ec:	f107 0310 	add.w	r3, r7, #16
 80094f0:	6812      	ldr	r2, [r2, #0]
 80094f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009500:	b2da      	uxtb	r2, r3
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	701a      	strb	r2, [r3, #0]
      i++;
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	3301      	adds	r3, #1
 800950a:	623b      	str	r3, [r7, #32]
      pDest++;
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	3301      	adds	r3, #1
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009512:	8bfb      	ldrh	r3, [r7, #30]
 8009514:	3b01      	subs	r3, #1
 8009516:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009518:	8bfb      	ldrh	r3, [r7, #30]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1ea      	bne.n	80094f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009520:	4618      	mov	r0, r3
 8009522:	372c      	adds	r7, #44	; 0x2c
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	4013      	ands	r3, r2
 8009542:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009544:	68fb      	ldr	r3, [r7, #12]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f003 0301 	and.w	r3, r3, #1
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
	...

08009570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3301      	adds	r3, #1
 8009580:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4a13      	ldr	r2, [pc, #76]	; (80095d4 <USB_CoreReset+0x64>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d901      	bls.n	800958e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e01b      	b.n	80095c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	daf2      	bge.n	800957c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f043 0201 	orr.w	r2, r3, #1
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <USB_CoreReset+0x64>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d901      	bls.n	80095b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e006      	b.n	80095c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d0f0      	beq.n	80095a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	00030d40 	.word	0x00030d40

080095d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095d8:	b084      	sub	sp, #16
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095f8:	461a      	mov	r2, r3
 80095fa:	2300      	movs	r3, #0
 80095fc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962a:	2b00      	cmp	r3, #0
 800962c:	d018      	beq.n	8009660 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	2b01      	cmp	r3, #1
 8009632:	d10a      	bne.n	800964a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009642:	f043 0304 	orr.w	r3, r3, #4
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	e014      	b.n	8009674 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009658:	f023 0304 	bic.w	r3, r3, #4
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	e009      	b.n	8009674 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800966e:	f023 0304 	bic.w	r3, r3, #4
 8009672:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009674:	2110      	movs	r1, #16
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7ff fe5e 	bl	8009338 <USB_FlushTxFifo>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fe8a 	bl	80093a0 <USB_FlushRxFifo>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	e015      	b.n	80096c8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a8:	461a      	mov	r2, r3
 80096aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096ae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096bc:	461a      	mov	r2, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	3301      	adds	r3, #1
 80096c6:	613b      	str	r3, [r7, #16]
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d3e5      	bcc.n	800969c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096dc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4a13      	ldr	r2, [pc, #76]	; (8009744 <USB_HostInit+0x16c>)
 80096f6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a13      	ldr	r2, [pc, #76]	; (8009748 <USB_HostInit+0x170>)
 80096fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009700:	e009      	b.n	8009716 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2280      	movs	r2, #128	; 0x80
 8009706:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a10      	ldr	r2, [pc, #64]	; (800974c <USB_HostInit+0x174>)
 800970c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a0f      	ldr	r2, [pc, #60]	; (8009750 <USB_HostInit+0x178>)
 8009712:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	2b00      	cmp	r3, #0
 800971a:	d105      	bne.n	8009728 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f043 0210 	orr.w	r2, r3, #16
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699a      	ldr	r2, [r3, #24]
 800972c:	4b09      	ldr	r3, [pc, #36]	; (8009754 <USB_HostInit+0x17c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009740:	b004      	add	sp, #16
 8009742:	4770      	bx	lr
 8009744:	01000200 	.word	0x01000200
 8009748:	00e00300 	.word	0x00e00300
 800974c:	00600080 	.word	0x00600080
 8009750:	004000e0 	.word	0x004000e0
 8009754:	a3200008 	.word	0xa3200008

08009758 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009758:	b480      	push	{r7}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68fa      	ldr	r2, [r7, #12]
 8009772:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009776:	f023 0303 	bic.w	r3, r3, #3
 800977a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009790:	4313      	orrs	r3, r2
 8009792:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d107      	bne.n	80097aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097a0:	461a      	mov	r2, r3
 80097a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80097a6:	6053      	str	r3, [r2, #4]
 80097a8:	e009      	b.n	80097be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d106      	bne.n	80097be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097b6:	461a      	mov	r2, r3
 80097b8:	f241 7370 	movw	r3, #6000	; 0x1770
 80097bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80097d8:	2300      	movs	r3, #0
 80097da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80097ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80097f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80097fc:	2064      	movs	r0, #100	; 0x64
 80097fe:	f7f9 fc89 	bl	8003114 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800980a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800980e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009810:	200a      	movs	r0, #10
 8009812:	f7f9 fc7f 	bl	8003114 <HAL_Delay>

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009844:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d109      	bne.n	8009864 <USB_DriveVbus+0x44>
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d106      	bne.n	8009864 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800985e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009862:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800986a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800986e:	d109      	bne.n	8009884 <USB_DriveVbus+0x64>
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800987e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009882:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009892:	b480      	push	{r7}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	0c5b      	lsrs	r3, r3, #17
 80098b0:	f003 0303 	and.w	r3, r3, #3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	b29b      	uxth	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
	...

080098e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	70fb      	strb	r3, [r7, #3]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70bb      	strb	r3, [r7, #2]
 80098fa:	4613      	mov	r3, r2
 80098fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009912:	461a      	mov	r2, r3
 8009914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009918:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800991a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800991e:	2b03      	cmp	r3, #3
 8009920:	d87e      	bhi.n	8009a20 <USB_HC_Init+0x13c>
 8009922:	a201      	add	r2, pc, #4	; (adr r2, 8009928 <USB_HC_Init+0x44>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009939 	.word	0x08009939
 800992c:	080099e3 	.word	0x080099e3
 8009930:	08009939 	.word	0x08009939
 8009934:	080099a5 	.word	0x080099a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4413      	add	r3, r2
 8009940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009944:	461a      	mov	r2, r3
 8009946:	f240 439d 	movw	r3, #1181	; 0x49d
 800994a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800994c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009950:	2b00      	cmp	r3, #0
 8009952:	da10      	bge.n	8009976 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	4413      	add	r3, r2
 800995c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	0151      	lsls	r1, r2, #5
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	440a      	add	r2, r1
 800996a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800996e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009972:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009974:	e057      	b.n	8009a26 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800997a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997e:	2b00      	cmp	r3, #0
 8009980:	d051      	beq.n	8009a26 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	4413      	add	r3, r2
 800998a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	78fa      	ldrb	r2, [r7, #3]
 8009992:	0151      	lsls	r1, r2, #5
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	440a      	add	r2, r1
 8009998:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800999c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80099a0:	60d3      	str	r3, [r2, #12]
      break;
 80099a2:	e040      	b.n	8009a26 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099b0:	461a      	mov	r2, r3
 80099b2:	f240 639d 	movw	r3, #1693	; 0x69d
 80099b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80099b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	da34      	bge.n	8009a2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	0151      	lsls	r1, r2, #5
 80099d2:	693a      	ldr	r2, [r7, #16]
 80099d4:	440a      	add	r2, r1
 80099d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80099da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099de:	60d3      	str	r3, [r2, #12]
      }

      break;
 80099e0:	e023      	b.n	8009a2a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80099e2:	78fb      	ldrb	r3, [r7, #3]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	461a      	mov	r2, r3
 80099f0:	f240 2325 	movw	r3, #549	; 0x225
 80099f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80099f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	da17      	bge.n	8009a2e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80099fe:	78fb      	ldrb	r3, [r7, #3]
 8009a00:	015a      	lsls	r2, r3, #5
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	4413      	add	r3, r2
 8009a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	0151      	lsls	r1, r2, #5
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	440a      	add	r2, r1
 8009a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a18:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009a1c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009a1e:	e006      	b.n	8009a2e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	77fb      	strb	r3, [r7, #31]
      break;
 8009a24:	e004      	b.n	8009a30 <USB_HC_Init+0x14c>
      break;
 8009a26:	bf00      	nop
 8009a28:	e002      	b.n	8009a30 <USB_HC_Init+0x14c>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <USB_HC_Init+0x14c>
      break;
 8009a2e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	015a      	lsls	r2, r3, #5
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	4413      	add	r3, r2
 8009a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	78fa      	ldrb	r2, [r7, #3]
 8009a40:	0151      	lsls	r1, r2, #5
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	440a      	add	r2, r1
 8009a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009a4a:	f043 0302 	orr.w	r3, r3, #2
 8009a4e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a56:	699a      	ldr	r2, [r3, #24]
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	f003 030f 	and.w	r3, r3, #15
 8009a5e:	2101      	movs	r1, #1
 8009a60:	fa01 f303 	lsl.w	r3, r1, r3
 8009a64:	6939      	ldr	r1, [r7, #16]
 8009a66:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009a7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da03      	bge.n	8009a8a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	e001      	b.n	8009a8e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff feff 	bl	8009892 <USB_GetHostSpeed>
 8009a94:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d106      	bne.n	8009aac <USB_HC_Init+0x1c8>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d003      	beq.n	8009aac <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009aa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e001      	b.n	8009ab0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ab0:	787b      	ldrb	r3, [r7, #1]
 8009ab2:	059b      	lsls	r3, r3, #22
 8009ab4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009ab8:	78bb      	ldrb	r3, [r7, #2]
 8009aba:	02db      	lsls	r3, r3, #11
 8009abc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ac0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009ac6:	049b      	lsls	r3, r3, #18
 8009ac8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009acc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009ace:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009ad0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009ad4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	0159      	lsls	r1, r3, #5
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	440b      	add	r3, r1
 8009ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ae6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009aec:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009aee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d003      	beq.n	8009afe <USB_HC_Init+0x21a>
 8009af6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d10f      	bne.n	8009b1e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009afe:	78fb      	ldrb	r3, [r7, #3]
 8009b00:	015a      	lsls	r2, r3, #5
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	4413      	add	r3, r2
 8009b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	0151      	lsls	r1, r2, #5
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	440a      	add	r2, r1
 8009b14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b1c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009b1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3720      	adds	r7, #32
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b08c      	sub	sp, #48	; 0x30
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b44:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d02d      	beq.n	8009bae <USB_HC_StartXfer+0x86>
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d129      	bne.n	8009bae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8009b5a:	79fb      	ldrb	r3, [r7, #7]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d117      	bne.n	8009b90 <USB_HC_StartXfer+0x68>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	79db      	ldrb	r3, [r3, #7]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <USB_HC_StartXfer+0x48>
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	79db      	ldrb	r3, [r3, #7]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d10f      	bne.n	8009b90 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009b70:	69fb      	ldr	r3, [r7, #28]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	0151      	lsls	r1, r2, #5
 8009b82:	6a3a      	ldr	r2, [r7, #32]
 8009b84:	440a      	add	r2, r1
 8009b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <USB_HC_StartXfer+0x86>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	795b      	ldrb	r3, [r3, #5]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d107      	bne.n	8009bae <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f000 fa0f 	bl	8009fc8 <USB_DoPing>
      return HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e0f8      	b.n	8009da0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d018      	beq.n	8009be8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	8912      	ldrh	r2, [r2, #8]
 8009bbe:	4413      	add	r3, r2
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	8912      	ldrh	r2, [r2, #8]
 8009bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bca:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009bcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009bce:	8b7b      	ldrh	r3, [r7, #26]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d90b      	bls.n	8009bec <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009bd4:	8b7b      	ldrh	r3, [r7, #26]
 8009bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009bd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	8912      	ldrh	r2, [r2, #8]
 8009bde:	fb03 f202 	mul.w	r2, r3, r2
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	611a      	str	r2, [r3, #16]
 8009be6:	e001      	b.n	8009bec <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009be8:	2301      	movs	r3, #1
 8009bea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	78db      	ldrb	r3, [r3, #3]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d007      	beq.n	8009c04 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009bf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	8912      	ldrh	r2, [r2, #8]
 8009bfa:	fb03 f202 	mul.w	r2, r3, r2
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	611a      	str	r2, [r3, #16]
 8009c02:	e003      	b.n	8009c0c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	695a      	ldr	r2, [r3, #20]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009c16:	04d9      	lsls	r1, r3, #19
 8009c18:	4b63      	ldr	r3, [pc, #396]	; (8009da8 <USB_HC_StartXfer+0x280>)
 8009c1a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c1c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	7a9b      	ldrb	r3, [r3, #10]
 8009c22:	075b      	lsls	r3, r3, #29
 8009c24:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c28:	69f9      	ldr	r1, [r7, #28]
 8009c2a:	0148      	lsls	r0, r1, #5
 8009c2c:	6a39      	ldr	r1, [r7, #32]
 8009c2e:	4401      	add	r1, r0
 8009c30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009c34:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009c36:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	68d9      	ldr	r1, [r3, #12]
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	015a      	lsls	r2, r3, #5
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	4413      	add	r3, r2
 8009c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c4e:	460a      	mov	r2, r1
 8009c50:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bf0c      	ite	eq
 8009c62:	2301      	moveq	r3, #1
 8009c64:	2300      	movne	r3, #0
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	6a3b      	ldr	r3, [r7, #32]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	0151      	lsls	r1, r2, #5
 8009c7c:	6a3a      	ldr	r2, [r7, #32]
 8009c7e:	440a      	add	r2, r1
 8009c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009c84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c88:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	7e7b      	ldrb	r3, [r7, #25]
 8009c9a:	075b      	lsls	r3, r3, #29
 8009c9c:	69f9      	ldr	r1, [r7, #28]
 8009c9e:	0148      	lsls	r0, r1, #5
 8009ca0:	6a39      	ldr	r1, [r7, #32]
 8009ca2:	4401      	add	r1, r0
 8009ca4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009cc2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	78db      	ldrb	r3, [r3, #3]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d004      	beq.n	8009cd6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cd2:	613b      	str	r3, [r7, #16]
 8009cd4:	e003      	b.n	8009cde <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cdc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ce4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	6a3b      	ldr	r3, [r7, #32]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009cf8:	79fb      	ldrb	r3, [r7, #7]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e04e      	b.n	8009da0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	78db      	ldrb	r3, [r3, #3]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d149      	bne.n	8009d9e <USB_HC_StartXfer+0x276>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d045      	beq.n	8009d9e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	79db      	ldrb	r3, [r3, #7]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d830      	bhi.n	8009d7c <USB_HC_StartXfer+0x254>
 8009d1a:	a201      	add	r2, pc, #4	; (adr r2, 8009d20 <USB_HC_StartXfer+0x1f8>)
 8009d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d20:	08009d31 	.word	0x08009d31
 8009d24:	08009d55 	.word	0x08009d55
 8009d28:	08009d31 	.word	0x08009d31
 8009d2c:	08009d55 	.word	0x08009d55
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	3303      	adds	r3, #3
 8009d36:	089b      	lsrs	r3, r3, #2
 8009d38:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009d3a:	8afa      	ldrh	r2, [r7, #22]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d91c      	bls.n	8009d80 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	f043 0220 	orr.w	r2, r3, #32
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	619a      	str	r2, [r3, #24]
        }
        break;
 8009d52:	e015      	b.n	8009d80 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	3303      	adds	r3, #3
 8009d5a:	089b      	lsrs	r3, r3, #2
 8009d5c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009d5e:	8afa      	ldrh	r2, [r7, #22]
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d90a      	bls.n	8009d84 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	619a      	str	r2, [r3, #24]
        }
        break;
 8009d7a:	e003      	b.n	8009d84 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009d7c:	bf00      	nop
 8009d7e:	e002      	b.n	8009d86 <USB_HC_StartXfer+0x25e>
        break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <USB_HC_StartXfer+0x25e>
        break;
 8009d84:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	68d9      	ldr	r1, [r3, #12]
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	785a      	ldrb	r2, [r3, #1]
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	2000      	movs	r0, #0
 8009d96:	9000      	str	r0, [sp, #0]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff fb31 	bl	8009400 <USB_WritePacket>
  }

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3728      	adds	r7, #40	; 0x28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	1ff80000 	.word	0x1ff80000

08009dac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	b29b      	uxth	r3, r3
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b089      	sub	sp, #36	; 0x24
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009dde:	78fb      	ldrb	r3, [r7, #3]
 8009de0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	0c9b      	lsrs	r3, r3, #18
 8009df6:	f003 0303 	and.w	r3, r3, #3
 8009dfa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	0fdb      	lsrs	r3, r3, #31
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f003 0320 	and.w	r3, r3, #32
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	d104      	bne.n	8009e28 <USB_HC_Halt+0x5a>
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d101      	bne.n	8009e28 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e0c8      	b.n	8009fba <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <USB_HC_Halt+0x66>
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d163      	bne.n	8009efc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	0151      	lsls	r1, r2, #5
 8009e46:	69fa      	ldr	r2, [r7, #28]
 8009e48:	440a      	add	r2, r1
 8009e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f003 0320 	and.w	r3, r3, #32
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 80ab 	bne.w	8009fb8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d133      	bne.n	8009ed6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	0151      	lsls	r1, r2, #5
 8009e80:	69fa      	ldr	r2, [r7, #28]
 8009e82:	440a      	add	r2, r1
 8009e84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e8c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	015a      	lsls	r2, r3, #5
 8009e92:	69fb      	ldr	r3, [r7, #28]
 8009e94:	4413      	add	r3, r2
 8009e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	0151      	lsls	r1, r2, #5
 8009ea0:	69fa      	ldr	r2, [r7, #28]
 8009ea2:	440a      	add	r2, r1
 8009ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009eac:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eba:	d81d      	bhi.n	8009ef8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ed2:	d0ec      	beq.n	8009eae <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ed4:	e070      	b.n	8009fb8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	0151      	lsls	r1, r2, #5
 8009ee8:	69fa      	ldr	r2, [r7, #28]
 8009eea:	440a      	add	r2, r1
 8009eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ef4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009ef6:	e05f      	b.n	8009fb8 <USB_HC_Halt+0x1ea>
            break;
 8009ef8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009efa:	e05d      	b.n	8009fb8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	0151      	lsls	r1, r2, #5
 8009f0e:	69fa      	ldr	r2, [r7, #28]
 8009f10:	440a      	add	r2, r1
 8009f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f1a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d133      	bne.n	8009f94 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	015a      	lsls	r2, r3, #5
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	4413      	add	r3, r2
 8009f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	0151      	lsls	r1, r2, #5
 8009f5e:	69fa      	ldr	r2, [r7, #28]
 8009f60:	440a      	add	r2, r1
 8009f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f6a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f78:	d81d      	bhi.n	8009fb6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f90:	d0ec      	beq.n	8009f6c <USB_HC_Halt+0x19e>
 8009f92:	e011      	b.n	8009fb8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	69fb      	ldr	r3, [r7, #28]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	0151      	lsls	r1, r2, #5
 8009fa6:	69fa      	ldr	r2, [r7, #28]
 8009fa8:	440a      	add	r2, r1
 8009faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	e000      	b.n	8009fb8 <USB_HC_Halt+0x1ea>
          break;
 8009fb6:	bf00      	nop
    }
  }

  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3724      	adds	r7, #36	; 0x24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
	...

08009fc8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009fd8:	78fb      	ldrb	r3, [r7, #3]
 8009fda:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	04da      	lsls	r2, r3, #19
 8009fe4:	4b15      	ldr	r3, [pc, #84]	; (800a03c <USB_DoPing+0x74>)
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4413      	add	r3, r2
 800a002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a010:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a018:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	4413      	add	r3, r2
 800a022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a026:	461a      	mov	r2, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	1ff80000 	.word	0x1ff80000

0800a040 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b088      	sub	sp, #32
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff f911 	bl	800927c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a05a:	2110      	movs	r1, #16
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff f96b 	bl	8009338 <USB_FlushTxFifo>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f7ff f997 	bl	80093a0 <USB_FlushRxFifo>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a07c:	2300      	movs	r3, #0
 800a07e:	61bb      	str	r3, [r7, #24]
 800a080:	e01f      	b.n	800a0c2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a098:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	015a      	lsls	r2, r3, #5
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b0f      	cmp	r3, #15
 800a0c6:	d9dc      	bls.n	800a082 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	61bb      	str	r3, [r7, #24]
 800a0cc:	e034      	b.n	800a138 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	015a      	lsls	r2, r3, #5
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a0ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a0f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a102:	461a      	mov	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	3301      	adds	r3, #1
 800a10c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a114:	d80c      	bhi.n	800a130 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a12c:	d0ec      	beq.n	800a108 <USB_StopHost+0xc8>
 800a12e:	e000      	b.n	800a132 <USB_StopHost+0xf2>
        break;
 800a130:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	3301      	adds	r3, #1
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b0f      	cmp	r3, #15
 800a13c:	d9c7      	bls.n	800a0ce <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a144:	461a      	mov	r2, r3
 800a146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a14a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a152:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f7ff f880 	bl	800925a <USB_EnableGlobalInt>

  return ret;
 800a15a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3720      	adds	r7, #32
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800a168:	4904      	ldr	r1, [pc, #16]	; (800a17c <MX_FATFS_Init+0x18>)
 800a16a:	4805      	ldr	r0, [pc, #20]	; (800a180 <MX_FATFS_Init+0x1c>)
 800a16c:	f003 f95e 	bl	800d42c <FATFS_LinkDriver>
 800a170:	4603      	mov	r3, r0
 800a172:	461a      	mov	r2, r3
 800a174:	4b03      	ldr	r3, [pc, #12]	; (800a184 <MX_FATFS_Init+0x20>)
 800a176:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a178:	bf00      	nop
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	200033e8 	.word	0x200033e8
 800a180:	0800f2b0 	.word	0x0800f2b0
 800a184:	200033e4 	.word	0x200033e4

0800a188 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4808      	ldr	r0, [pc, #32]	; (800a1d4 <USBH_status+0x34>)
 800a1b4:	f000 fe32 	bl	800ae1c <USBH_MSC_UnitIsReady>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <USBH_status+0x24>
  {
    res = RES_OK;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
 800a1c2:	e001      	b.n	800a1c8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	200033f8 	.word	0x200033f8

0800a1d8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b094      	sub	sp, #80	; 0x50
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	607a      	str	r2, [r7, #4]
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800a1ee:	7bf9      	ldrb	r1, [r7, #15]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	4813      	ldr	r0, [pc, #76]	; (800a248 <USBH_read+0x70>)
 800a1fa:	f000 fe59 	bl	800aeb0 <USBH_MSC_Read>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d103      	bne.n	800a20c <USBH_read+0x34>
  {
    res = RES_OK;
 800a204:	2300      	movs	r3, #0
 800a206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a20a:	e017      	b.n	800a23c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a20c:	f107 0210 	add.w	r2, r7, #16
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4619      	mov	r1, r3
 800a214:	480c      	ldr	r0, [pc, #48]	; (800a248 <USBH_read+0x70>)
 800a216:	f000 fe27 	bl	800ae68 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a21a:	7f7b      	ldrb	r3, [r7, #29]
 800a21c:	2b3a      	cmp	r3, #58	; 0x3a
 800a21e:	d005      	beq.n	800a22c <USBH_read+0x54>
 800a220:	2b3a      	cmp	r3, #58	; 0x3a
 800a222:	dc07      	bgt.n	800a234 <USBH_read+0x5c>
 800a224:	2b04      	cmp	r3, #4
 800a226:	d001      	beq.n	800a22c <USBH_read+0x54>
 800a228:	2b28      	cmp	r3, #40	; 0x28
 800a22a:	d103      	bne.n	800a234 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a22c:	2303      	movs	r3, #3
 800a22e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a232:	e003      	b.n	800a23c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a23a:	bf00      	nop
    }
  }

  return res;
 800a23c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a240:	4618      	mov	r0, r3
 800a242:	3748      	adds	r7, #72	; 0x48
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200033f8 	.word	0x200033f8

0800a24c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b094      	sub	sp, #80	; 0x50
 800a250:	af02      	add	r7, sp, #8
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	603b      	str	r3, [r7, #0]
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800a262:	7bf9      	ldrb	r1, [r7, #15]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	4817      	ldr	r0, [pc, #92]	; (800a2cc <USBH_write+0x80>)
 800a26e:	f000 fe88 	bl	800af82 <USBH_MSC_Write>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d103      	bne.n	800a280 <USBH_write+0x34>
  {
    res = RES_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a27e:	e01f      	b.n	800a2c0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800a280:	f107 0210 	add.w	r2, r7, #16
 800a284:	7bfb      	ldrb	r3, [r7, #15]
 800a286:	4619      	mov	r1, r3
 800a288:	4810      	ldr	r0, [pc, #64]	; (800a2cc <USBH_write+0x80>)
 800a28a:	f000 fded 	bl	800ae68 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800a28e:	7f7b      	ldrb	r3, [r7, #29]
 800a290:	2b3a      	cmp	r3, #58	; 0x3a
 800a292:	d00d      	beq.n	800a2b0 <USBH_write+0x64>
 800a294:	2b3a      	cmp	r3, #58	; 0x3a
 800a296:	dc0f      	bgt.n	800a2b8 <USBH_write+0x6c>
 800a298:	2b28      	cmp	r3, #40	; 0x28
 800a29a:	d009      	beq.n	800a2b0 <USBH_write+0x64>
 800a29c:	2b28      	cmp	r3, #40	; 0x28
 800a29e:	dc0b      	bgt.n	800a2b8 <USBH_write+0x6c>
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d005      	beq.n	800a2b0 <USBH_write+0x64>
 800a2a4:	2b27      	cmp	r3, #39	; 0x27
 800a2a6:	d107      	bne.n	800a2b8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a2ae:	e007      	b.n	800a2c0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a2b6:	e003      	b.n	800a2c0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800a2be:	bf00      	nop
    }
  }

  return res;
 800a2c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3748      	adds	r7, #72	; 0x48
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	200033f8 	.word	0x200033f8

0800a2d0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b090      	sub	sp, #64	; 0x40
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	603a      	str	r2, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
 800a2dc:	460b      	mov	r3, r1
 800a2de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800a2e6:	79bb      	ldrb	r3, [r7, #6]
 800a2e8:	2b03      	cmp	r3, #3
 800a2ea:	d852      	bhi.n	800a392 <USBH_ioctl+0xc2>
 800a2ec:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <USBH_ioctl+0x24>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a30d 	.word	0x0800a30d
 800a2fc:	0800a337 	.word	0x0800a337
 800a300:	0800a363 	.word	0x0800a363
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a30a:	e045      	b.n	800a398 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a30c:	f107 0208 	add.w	r2, r7, #8
 800a310:	79fb      	ldrb	r3, [r7, #7]
 800a312:	4619      	mov	r1, r3
 800a314:	4823      	ldr	r0, [pc, #140]	; (800a3a4 <USBH_ioctl+0xd4>)
 800a316:	f000 fda7 	bl	800ae68 <USBH_MSC_GetLUNInfo>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d106      	bne.n	800a32e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a32c:	e034      	b.n	800a398 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a334:	e030      	b.n	800a398 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a336:	f107 0208 	add.w	r2, r7, #8
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	4619      	mov	r1, r3
 800a33e:	4819      	ldr	r0, [pc, #100]	; (800a3a4 <USBH_ioctl+0xd4>)
 800a340:	f000 fd92 	bl	800ae68 <USBH_MSC_GetLUNInfo>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d107      	bne.n	800a35a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800a34a:	8a3b      	ldrh	r3, [r7, #16]
 800a34c:	461a      	mov	r2, r3
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a358:	e01e      	b.n	800a398 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a360:	e01a      	b.n	800a398 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800a362:	f107 0208 	add.w	r2, r7, #8
 800a366:	79fb      	ldrb	r3, [r7, #7]
 800a368:	4619      	mov	r1, r3
 800a36a:	480e      	ldr	r0, [pc, #56]	; (800a3a4 <USBH_ioctl+0xd4>)
 800a36c:	f000 fd7c 	bl	800ae68 <USBH_MSC_GetLUNInfo>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800a376:	8a3b      	ldrh	r3, [r7, #16]
 800a378:	0a5b      	lsrs	r3, r3, #9
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	461a      	mov	r2, r3
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800a388:	e006      	b.n	800a398 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800a390:	e002      	b.n	800a398 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800a392:	2304      	movs	r3, #4
 800a394:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800a398:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3740      	adds	r7, #64	; 0x40
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	200033f8 	.word	0x200033f8

0800a3a8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b089      	sub	sp, #36	; 0x24
 800a3ac:	af04      	add	r7, sp, #16
 800a3ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3b6:	7919      	ldrb	r1, [r3, #4]
 800a3b8:	2350      	movs	r3, #80	; 0x50
 800a3ba:	2206      	movs	r2, #6
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 fc6b 	bl	800bc98 <USBH_FindInterface>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
 800a3c8:	2bff      	cmp	r3, #255	; 0xff
 800a3ca:	d002      	beq.n	800a3d2 <USBH_MSC_InterfaceInit+0x2a>
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d901      	bls.n	800a3d6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e106      	b.n	800a5e4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800a3d6:	7bfb      	ldrb	r3, [r7, #15]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 fc40 	bl	800bc60 <USBH_SelectInterface>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e0fa      	b.n	800a5e4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a3f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a3f8:	f003 fb94 	bl	800db24 <malloc>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a410:	2302      	movs	r3, #2
 800a412:	e0e7      	b.n	800a5e4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a414:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a418:	2100      	movs	r1, #0
 800a41a:	68b8      	ldr	r0, [r7, #8]
 800a41c:	f003 fba0 	bl	800db60 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	211a      	movs	r1, #26
 800a426:	fb01 f303 	mul.w	r3, r1, r3
 800a42a:	4413      	add	r3, r2
 800a42c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b25b      	sxtb	r3, r3
 800a434:	2b00      	cmp	r3, #0
 800a436:	da16      	bge.n	800a466 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	211a      	movs	r1, #26
 800a43e:	fb01 f303 	mul.w	r3, r1, r3
 800a442:	4413      	add	r3, r2
 800a444:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a448:	781a      	ldrb	r2, [r3, #0]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a44e:	7bfb      	ldrb	r3, [r7, #15]
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	211a      	movs	r1, #26
 800a454:	fb01 f303 	mul.w	r3, r1, r3
 800a458:	4413      	add	r3, r2
 800a45a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a45e:	881a      	ldrh	r2, [r3, #0]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	815a      	strh	r2, [r3, #10]
 800a464:	e015      	b.n	800a492 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	211a      	movs	r1, #26
 800a46c:	fb01 f303 	mul.w	r3, r1, r3
 800a470:	4413      	add	r3, r2
 800a472:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a476:	781a      	ldrb	r2, [r3, #0]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a47c:	7bfb      	ldrb	r3, [r7, #15]
 800a47e:	687a      	ldr	r2, [r7, #4]
 800a480:	211a      	movs	r1, #26
 800a482:	fb01 f303 	mul.w	r3, r1, r3
 800a486:	4413      	add	r3, r2
 800a488:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a48c:	881a      	ldrh	r2, [r3, #0]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800a492:	7bfb      	ldrb	r3, [r7, #15]
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	211a      	movs	r1, #26
 800a498:	fb01 f303 	mul.w	r3, r1, r3
 800a49c:	4413      	add	r3, r2
 800a49e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	b25b      	sxtb	r3, r3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da16      	bge.n	800a4d8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a4aa:	7bfb      	ldrb	r3, [r7, #15]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	211a      	movs	r1, #26
 800a4b0:	fb01 f303 	mul.w	r3, r1, r3
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4ba:	781a      	ldrb	r2, [r3, #0]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	211a      	movs	r1, #26
 800a4c6:	fb01 f303 	mul.w	r3, r1, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4d0:	881a      	ldrh	r2, [r3, #0]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	815a      	strh	r2, [r3, #10]
 800a4d6:	e015      	b.n	800a504 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	211a      	movs	r1, #26
 800a4de:	fb01 f303 	mul.w	r3, r1, r3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	211a      	movs	r1, #26
 800a4f4:	fb01 f303 	mul.w	r3, r1, r3
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2200      	movs	r2, #0
 800a508:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	2200      	movs	r2, #0
 800a50e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2200      	movs	r2, #0
 800a514:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	799b      	ldrb	r3, [r3, #6]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f002 fed6 	bl	800d2ce <USBH_AllocPipe>
 800a522:	4603      	mov	r3, r0
 800a524:	461a      	mov	r2, r3
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	79db      	ldrb	r3, [r3, #7]
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f002 fecc 	bl	800d2ce <USBH_AllocPipe>
 800a536:	4603      	mov	r3, r0
 800a538:	461a      	mov	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fdc4 	bl	800b0cc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	799b      	ldrb	r3, [r3, #6]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <USBH_MSC_InterfaceInit+0x1e2>
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	891b      	ldrh	r3, [r3, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d01a      	beq.n	800a58a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	7959      	ldrb	r1, [r3, #5]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	7998      	ldrb	r0, [r3, #6]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	8912      	ldrh	r2, [r2, #8]
 800a56c:	9202      	str	r2, [sp, #8]
 800a56e:	2202      	movs	r2, #2
 800a570:	9201      	str	r2, [sp, #4]
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	4623      	mov	r3, r4
 800a576:	4602      	mov	r2, r0
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f002 fe79 	bl	800d270 <USBH_OpenPipe>
 800a57e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	79db      	ldrb	r3, [r3, #7]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d02c      	beq.n	800a5e2 <USBH_MSC_InterfaceInit+0x23a>
 800a588:	e001      	b.n	800a58e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e02a      	b.n	800a5e4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	895b      	ldrh	r3, [r3, #10]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d025      	beq.n	800a5e2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	7919      	ldrb	r1, [r3, #4]
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	79d8      	ldrb	r0, [r3, #7]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	8952      	ldrh	r2, [r2, #10]
 800a5ae:	9202      	str	r2, [sp, #8]
 800a5b0:	2202      	movs	r2, #2
 800a5b2:	9201      	str	r2, [sp, #4]
 800a5b4:	9300      	str	r3, [sp, #0]
 800a5b6:	4623      	mov	r3, r4
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f002 fe58 	bl	800d270 <USBH_OpenPipe>
 800a5c0:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	791b      	ldrb	r3, [r3, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f003 f9c8 	bl	800d960 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	795b      	ldrb	r3, [r3, #5]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f003 f9c1 	bl	800d960 <USBH_LL_SetToggle>

  return USBH_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e000      	b.n	800a5e4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800a5e2:	2303      	movs	r3, #3
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd90      	pop	{r4, r7, pc}

0800a5ec <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	795b      	ldrb	r3, [r3, #5]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00e      	beq.n	800a624 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	795b      	ldrb	r3, [r3, #5]
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f002 fe4e 	bl	800d2ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	795b      	ldrb	r3, [r3, #5]
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f002 fe79 	bl	800d310 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	791b      	ldrb	r3, [r3, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00e      	beq.n	800a64a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	791b      	ldrb	r3, [r3, #4]
 800a630:	4619      	mov	r1, r3
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f002 fe3b 	bl	800d2ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	791b      	ldrb	r3, [r3, #4]
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f002 fe66 	bl	800d310 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00b      	beq.n	800a66e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	4618      	mov	r0, r3
 800a660:	f003 fa68 	bl	800db34 <free>
    phost->pActiveClass->pData = 0U;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a66a:	2200      	movs	r2, #0
 800a66c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a686:	69db      	ldr	r3, [r3, #28]
 800a688:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a68a:	2301      	movs	r3, #1
 800a68c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	7b9b      	ldrb	r3, [r3, #14]
 800a692:	2b03      	cmp	r3, #3
 800a694:	d041      	beq.n	800a71a <USBH_MSC_ClassRequest+0xa2>
 800a696:	2b03      	cmp	r3, #3
 800a698:	dc4b      	bgt.n	800a732 <USBH_MSC_ClassRequest+0xba>
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d001      	beq.n	800a6a2 <USBH_MSC_ClassRequest+0x2a>
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d147      	bne.n	800a732 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fcf1 	bl	800b08e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d104      	bne.n	800a6c0 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d137      	bne.n	800a736 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d804      	bhi.n	800a6d8 <USBH_MSC_ClassRequest+0x60>
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	e000      	b.n	800a6da <USBH_MSC_ClassRequest+0x62>
 800a6d8:	2202      	movs	r2, #2
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	73bb      	strb	r3, [r7, #14]
 800a6e2:	e014      	b.n	800a70e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	2134      	movs	r1, #52	; 0x34
 800a6ea:	fb01 f303 	mul.w	r3, r1, r3
 800a6ee:	4413      	add	r3, r2
 800a6f0:	3392      	adds	r3, #146	; 0x92
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	68ba      	ldr	r2, [r7, #8]
 800a6fa:	2134      	movs	r1, #52	; 0x34
 800a6fc:	fb01 f303 	mul.w	r3, r1, r3
 800a700:	4413      	add	r3, r2
 800a702:	33c1      	adds	r3, #193	; 0xc1
 800a704:	2200      	movs	r2, #0
 800a706:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	3301      	adds	r3, #1
 800a70c:	73bb      	strb	r3, [r7, #14]
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	7bba      	ldrb	r2, [r7, #14]
 800a714:	429a      	cmp	r2, r3
 800a716:	d3e5      	bcc.n	800a6e4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800a718:	e00d      	b.n	800a736 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800a71a:	2100      	movs	r1, #0
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f002 f888 	bl	800c832 <USBH_ClrFeature>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d108      	bne.n	800a73a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	7bda      	ldrb	r2, [r3, #15]
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	739a      	strb	r2, [r3, #14]
      }
      break;
 800a730:	e003      	b.n	800a73a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800a732:	bf00      	nop
 800a734:	e002      	b.n	800a73c <USBH_MSC_ClassRequest+0xc4>
      break;
 800a736:	bf00      	nop
 800a738:	e000      	b.n	800a73c <USBH_MSC_ClassRequest+0xc4>
      break;
 800a73a:	bf00      	nop
  }

  return status;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
	...

0800a748 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a75a:	2301      	movs	r3, #1
 800a75c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800a75e:	2301      	movs	r3, #1
 800a760:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800a762:	2301      	movs	r3, #1
 800a764:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	7b1b      	ldrb	r3, [r3, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <USBH_MSC_Process+0x2e>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	f000 8271 	beq.w	800ac56 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800a774:	e272      	b.n	800ac5c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	b29b      	uxth	r3, r3
 800a782:	429a      	cmp	r2, r3
 800a784:	f080 824f 	bcs.w	800ac26 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a78e:	4619      	mov	r1, r3
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	2334      	movs	r3, #52	; 0x34
 800a794:	fb01 f303 	mul.w	r3, r1, r3
 800a798:	4413      	add	r3, r2
 800a79a:	3391      	adds	r3, #145	; 0x91
 800a79c:	2201      	movs	r2, #1
 800a79e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	2334      	movs	r3, #52	; 0x34
 800a7ac:	fb01 f303 	mul.w	r3, r1, r3
 800a7b0:	4413      	add	r3, r2
 800a7b2:	3390      	adds	r3, #144	; 0x90
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	f200 8243 	bhi.w	800ac42 <USBH_MSC_Process+0x4fa>
 800a7bc:	a201      	add	r2, pc, #4	; (adr r2, 800a7c4 <USBH_MSC_Process+0x7c>)
 800a7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c2:	bf00      	nop
 800a7c4:	0800a7e9 	.word	0x0800a7e9
 800a7c8:	0800ac43 	.word	0x0800ac43
 800a7cc:	0800a8b1 	.word	0x0800a8b1
 800a7d0:	0800aa35 	.word	0x0800aa35
 800a7d4:	0800a80f 	.word	0x0800a80f
 800a7d8:	0800ab01 	.word	0x0800ab01
 800a7dc:	0800ac43 	.word	0x0800ac43
 800a7e0:	0800ac43 	.word	0x0800ac43
 800a7e4:	0800ac15 	.word	0x0800ac15
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	2334      	movs	r3, #52	; 0x34
 800a7f4:	fb01 f303 	mul.w	r3, r1, r3
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3390      	adds	r3, #144	; 0x90
 800a7fc:	2204      	movs	r2, #4
 800a7fe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800a80c:	e222      	b.n	800ac54 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a814:	b2d9      	uxtb	r1, r3
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a81c:	461a      	mov	r2, r3
 800a81e:	2334      	movs	r3, #52	; 0x34
 800a820:	fb02 f303 	mul.w	r3, r2, r3
 800a824:	3398      	adds	r3, #152	; 0x98
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	4413      	add	r3, r2
 800a82a:	3307      	adds	r3, #7
 800a82c:	461a      	mov	r2, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 ff6a 	bl	800b708 <USBH_MSC_SCSI_Inquiry>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10b      	bne.n	800a856 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a844:	4619      	mov	r1, r3
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	2334      	movs	r3, #52	; 0x34
 800a84a:	fb01 f303 	mul.w	r3, r1, r3
 800a84e:	4413      	add	r3, r2
 800a850:	3390      	adds	r3, #144	; 0x90
 800a852:	2202      	movs	r2, #2
 800a854:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800a856:	7bfb      	ldrb	r3, [r7, #15]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d10c      	bne.n	800a876 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a862:	4619      	mov	r1, r3
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	2334      	movs	r3, #52	; 0x34
 800a868:	fb01 f303 	mul.w	r3, r1, r3
 800a86c:	4413      	add	r3, r2
 800a86e:	3390      	adds	r3, #144	; 0x90
 800a870:	2205      	movs	r2, #5
 800a872:	701a      	strb	r2, [r3, #0]
            break;
 800a874:	e1e7      	b.n	800ac46 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	2b04      	cmp	r3, #4
 800a87a:	f040 81e4 	bne.w	800ac46 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a884:	4619      	mov	r1, r3
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	2334      	movs	r3, #52	; 0x34
 800a88a:	fb01 f303 	mul.w	r3, r1, r3
 800a88e:	4413      	add	r3, r2
 800a890:	3390      	adds	r3, #144	; 0x90
 800a892:	2201      	movs	r2, #1
 800a894:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a89c:	4619      	mov	r1, r3
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	2334      	movs	r3, #52	; 0x34
 800a8a2:	fb01 f303 	mul.w	r3, r1, r3
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3391      	adds	r3, #145	; 0x91
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	701a      	strb	r2, [r3, #0]
            break;
 800a8ae:	e1ca      	b.n	800ac46 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fe66 	bl	800b58c <USBH_MSC_SCSI_TestUnitReady>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d149      	bne.n	800a95e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	2334      	movs	r3, #52	; 0x34
 800a8d6:	fb01 f303 	mul.w	r3, r1, r3
 800a8da:	4413      	add	r3, r2
 800a8dc:	3392      	adds	r3, #146	; 0x92
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00c      	beq.n	800a8fe <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	2334      	movs	r3, #52	; 0x34
 800a8f0:	fb01 f303 	mul.w	r3, r1, r3
 800a8f4:	4413      	add	r3, r2
 800a8f6:	33c1      	adds	r3, #193	; 0xc1
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e00b      	b.n	800a916 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a904:	4619      	mov	r1, r3
 800a906:	693a      	ldr	r2, [r7, #16]
 800a908:	2334      	movs	r3, #52	; 0x34
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	4413      	add	r3, r2
 800a910:	33c1      	adds	r3, #193	; 0xc1
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a91c:	4619      	mov	r1, r3
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	2334      	movs	r3, #52	; 0x34
 800a922:	fb01 f303 	mul.w	r3, r1, r3
 800a926:	4413      	add	r3, r2
 800a928:	3390      	adds	r3, #144	; 0x90
 800a92a:	2203      	movs	r2, #3
 800a92c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a934:	4619      	mov	r1, r3
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	2334      	movs	r3, #52	; 0x34
 800a93a:	fb01 f303 	mul.w	r3, r1, r3
 800a93e:	4413      	add	r3, r2
 800a940:	3391      	adds	r3, #145	; 0x91
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a94c:	4619      	mov	r1, r3
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	2334      	movs	r3, #52	; 0x34
 800a952:	fb01 f303 	mul.w	r3, r1, r3
 800a956:	4413      	add	r3, r2
 800a958:	3392      	adds	r3, #146	; 0x92
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b02      	cmp	r3, #2
 800a962:	d14a      	bne.n	800a9fa <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a96a:	4619      	mov	r1, r3
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	2334      	movs	r3, #52	; 0x34
 800a970:	fb01 f303 	mul.w	r3, r1, r3
 800a974:	4413      	add	r3, r2
 800a976:	3392      	adds	r3, #146	; 0x92
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d00c      	beq.n	800a998 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a984:	4619      	mov	r1, r3
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	2334      	movs	r3, #52	; 0x34
 800a98a:	fb01 f303 	mul.w	r3, r1, r3
 800a98e:	4413      	add	r3, r2
 800a990:	33c1      	adds	r3, #193	; 0xc1
 800a992:	2201      	movs	r2, #1
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	e00b      	b.n	800a9b0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a99e:	4619      	mov	r1, r3
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	2334      	movs	r3, #52	; 0x34
 800a9a4:	fb01 f303 	mul.w	r3, r1, r3
 800a9a8:	4413      	add	r3, r2
 800a9aa:	33c1      	adds	r3, #193	; 0xc1
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	2334      	movs	r3, #52	; 0x34
 800a9bc:	fb01 f303 	mul.w	r3, r1, r3
 800a9c0:	4413      	add	r3, r2
 800a9c2:	3390      	adds	r3, #144	; 0x90
 800a9c4:	2205      	movs	r2, #5
 800a9c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	2334      	movs	r3, #52	; 0x34
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	4413      	add	r3, r2
 800a9da:	3391      	adds	r3, #145	; 0x91
 800a9dc:	2201      	movs	r2, #1
 800a9de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	2334      	movs	r3, #52	; 0x34
 800a9ec:	fb01 f303 	mul.w	r3, r1, r3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	3392      	adds	r3, #146	; 0x92
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	701a      	strb	r2, [r3, #0]
            break;
 800a9f8:	e127      	b.n	800ac4a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	f040 8124 	bne.w	800ac4a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa08:	4619      	mov	r1, r3
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	2334      	movs	r3, #52	; 0x34
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	4413      	add	r3, r2
 800aa14:	3390      	adds	r3, #144	; 0x90
 800aa16:	2201      	movs	r2, #1
 800aa18:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa20:	4619      	mov	r1, r3
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	2334      	movs	r3, #52	; 0x34
 800aa26:	fb01 f303 	mul.w	r3, r1, r3
 800aa2a:	4413      	add	r3, r2
 800aa2c:	3391      	adds	r3, #145	; 0x91
 800aa2e:	2202      	movs	r2, #2
 800aa30:	701a      	strb	r2, [r3, #0]
            break;
 800aa32:	e10a      	b.n	800ac4a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa3a:	b2d9      	uxtb	r1, r3
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa42:	461a      	mov	r2, r3
 800aa44:	2334      	movs	r3, #52	; 0x34
 800aa46:	fb02 f303 	mul.w	r3, r2, r3
 800aa4a:	3390      	adds	r3, #144	; 0x90
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	4413      	add	r3, r2
 800aa50:	3304      	adds	r3, #4
 800aa52:	461a      	mov	r2, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fddc 	bl	800b612 <USBH_MSC_SCSI_ReadCapacity>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d120      	bne.n	800aaa6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	2334      	movs	r3, #52	; 0x34
 800aa70:	fb01 f303 	mul.w	r3, r1, r3
 800aa74:	4413      	add	r3, r2
 800aa76:	3390      	adds	r3, #144	; 0x90
 800aa78:	2201      	movs	r2, #1
 800aa7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa82:	4619      	mov	r1, r3
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	2334      	movs	r3, #52	; 0x34
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3391      	adds	r3, #145	; 0x91
 800aa90:	2200      	movs	r2, #0
 800aa92:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800aaa4:	e0d3      	b.n	800ac4e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d10c      	bne.n	800aac6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aab2:	4619      	mov	r1, r3
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	2334      	movs	r3, #52	; 0x34
 800aab8:	fb01 f303 	mul.w	r3, r1, r3
 800aabc:	4413      	add	r3, r2
 800aabe:	3390      	adds	r3, #144	; 0x90
 800aac0:	2205      	movs	r2, #5
 800aac2:	701a      	strb	r2, [r3, #0]
            break;
 800aac4:	e0c3      	b.n	800ac4e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	f040 80c0 	bne.w	800ac4e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aad4:	4619      	mov	r1, r3
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	2334      	movs	r3, #52	; 0x34
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	4413      	add	r3, r2
 800aae0:	3390      	adds	r3, #144	; 0x90
 800aae2:	2201      	movs	r2, #1
 800aae4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aaec:	4619      	mov	r1, r3
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	2334      	movs	r3, #52	; 0x34
 800aaf2:	fb01 f303 	mul.w	r3, r1, r3
 800aaf6:	4413      	add	r3, r2
 800aaf8:	3391      	adds	r3, #145	; 0x91
 800aafa:	2202      	movs	r2, #2
 800aafc:	701a      	strb	r2, [r3, #0]
            break;
 800aafe:	e0a6      	b.n	800ac4e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab06:	b2d9      	uxtb	r1, r3
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2334      	movs	r3, #52	; 0x34
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	3398      	adds	r3, #152	; 0x98
 800ab18:	693a      	ldr	r2, [r7, #16]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fe96 	bl	800b852 <USBH_MSC_SCSI_RequestSense>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ab2a:	7bfb      	ldrb	r3, [r7, #15]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d145      	bne.n	800abbc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab36:	4619      	mov	r1, r3
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	2334      	movs	r3, #52	; 0x34
 800ab3c:	fb01 f303 	mul.w	r3, r1, r3
 800ab40:	4413      	add	r3, r2
 800ab42:	339c      	adds	r3, #156	; 0x9c
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b06      	cmp	r3, #6
 800ab48:	d00c      	beq.n	800ab64 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab50:	4619      	mov	r1, r3
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	2334      	movs	r3, #52	; 0x34
 800ab56:	fb01 f303 	mul.w	r3, r1, r3
 800ab5a:	4413      	add	r3, r2
 800ab5c:	339c      	adds	r3, #156	; 0x9c
 800ab5e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d117      	bne.n	800ab94 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	f242 720f 	movw	r2, #9999	; 0x270f
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d80c      	bhi.n	800ab94 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab80:	4619      	mov	r1, r3
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	2334      	movs	r3, #52	; 0x34
 800ab86:	fb01 f303 	mul.w	r3, r1, r3
 800ab8a:	4413      	add	r3, r2
 800ab8c:	3390      	adds	r3, #144	; 0x90
 800ab8e:	2202      	movs	r2, #2
 800ab90:	701a      	strb	r2, [r3, #0]
                  break;
 800ab92:	e05f      	b.n	800ac54 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	2334      	movs	r3, #52	; 0x34
 800aba0:	fb01 f303 	mul.w	r3, r1, r3
 800aba4:	4413      	add	r3, r2
 800aba6:	3390      	adds	r3, #144	; 0x90
 800aba8:	2201      	movs	r2, #1
 800abaa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abb2:	3301      	adds	r3, #1
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d10c      	bne.n	800abdc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abc8:	4619      	mov	r1, r3
 800abca:	693a      	ldr	r2, [r7, #16]
 800abcc:	2334      	movs	r3, #52	; 0x34
 800abce:	fb01 f303 	mul.w	r3, r1, r3
 800abd2:	4413      	add	r3, r2
 800abd4:	3390      	adds	r3, #144	; 0x90
 800abd6:	2208      	movs	r2, #8
 800abd8:	701a      	strb	r2, [r3, #0]
            break;
 800abda:	e03a      	b.n	800ac52 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d137      	bne.n	800ac52 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abe8:	4619      	mov	r1, r3
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	2334      	movs	r3, #52	; 0x34
 800abee:	fb01 f303 	mul.w	r3, r1, r3
 800abf2:	4413      	add	r3, r2
 800abf4:	3390      	adds	r3, #144	; 0x90
 800abf6:	2201      	movs	r2, #1
 800abf8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac00:	4619      	mov	r1, r3
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	2334      	movs	r3, #52	; 0x34
 800ac06:	fb01 f303 	mul.w	r3, r1, r3
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3391      	adds	r3, #145	; 0x91
 800ac0e:	2202      	movs	r2, #2
 800ac10:	701a      	strb	r2, [r3, #0]
            break;
 800ac12:	e01e      	b.n	800ac52 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac1a:	3301      	adds	r3, #1
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ac24:	e016      	b.n	800ac54 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2201      	movs	r2, #1
 800ac32:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac3a:	2102      	movs	r1, #2
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	4798      	blx	r3
      break;
 800ac40:	e00c      	b.n	800ac5c <USBH_MSC_Process+0x514>
            break;
 800ac42:	bf00      	nop
 800ac44:	e00a      	b.n	800ac5c <USBH_MSC_Process+0x514>
            break;
 800ac46:	bf00      	nop
 800ac48:	e008      	b.n	800ac5c <USBH_MSC_Process+0x514>
            break;
 800ac4a:	bf00      	nop
 800ac4c:	e006      	b.n	800ac5c <USBH_MSC_Process+0x514>
            break;
 800ac4e:	bf00      	nop
 800ac50:	e004      	b.n	800ac5c <USBH_MSC_Process+0x514>
            break;
 800ac52:	bf00      	nop
      break;
 800ac54:	e002      	b.n	800ac5c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]
      break;
 800ac5a:	bf00      	nop
  }
  return error;
 800ac5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3718      	adds	r7, #24
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop

0800ac68 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b088      	sub	sp, #32
 800ac82:	af02      	add	r7, sp, #8
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800ac94:	2301      	movs	r3, #1
 800ac96:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800ac9c:	78fb      	ldrb	r3, [r7, #3]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	2134      	movs	r1, #52	; 0x34
 800aca2:	fb01 f303 	mul.w	r3, r1, r3
 800aca6:	4413      	add	r3, r2
 800aca8:	3390      	adds	r3, #144	; 0x90
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	2b07      	cmp	r3, #7
 800acae:	d03c      	beq.n	800ad2a <USBH_MSC_RdWrProcess+0xac>
 800acb0:	2b07      	cmp	r3, #7
 800acb2:	f300 80a7 	bgt.w	800ae04 <USBH_MSC_RdWrProcess+0x186>
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d06c      	beq.n	800ad94 <USBH_MSC_RdWrProcess+0x116>
 800acba:	2b06      	cmp	r3, #6
 800acbc:	f040 80a2 	bne.w	800ae04 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800acc0:	78f9      	ldrb	r1, [r7, #3]
 800acc2:	2300      	movs	r3, #0
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	2300      	movs	r3, #0
 800acc8:	2200      	movs	r2, #0
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fea5 	bl	800ba1a <USBH_MSC_SCSI_Read>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800acda:	78fb      	ldrb	r3, [r7, #3]
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	2134      	movs	r1, #52	; 0x34
 800ace0:	fb01 f303 	mul.w	r3, r1, r3
 800ace4:	4413      	add	r3, r2
 800ace6:	3390      	adds	r3, #144	; 0x90
 800ace8:	2201      	movs	r2, #1
 800acea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acf0:	e08a      	b.n	800ae08 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d109      	bne.n	800ad0c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	2134      	movs	r1, #52	; 0x34
 800acfe:	fb01 f303 	mul.w	r3, r1, r3
 800ad02:	4413      	add	r3, r2
 800ad04:	3390      	adds	r3, #144	; 0x90
 800ad06:	2205      	movs	r2, #5
 800ad08:	701a      	strb	r2, [r3, #0]
      break;
 800ad0a:	e07d      	b.n	800ae08 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d17a      	bne.n	800ae08 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ad12:	78fb      	ldrb	r3, [r7, #3]
 800ad14:	693a      	ldr	r2, [r7, #16]
 800ad16:	2134      	movs	r1, #52	; 0x34
 800ad18:	fb01 f303 	mul.w	r3, r1, r3
 800ad1c:	4413      	add	r3, r2
 800ad1e:	3390      	adds	r3, #144	; 0x90
 800ad20:	2208      	movs	r2, #8
 800ad22:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ad24:	2302      	movs	r3, #2
 800ad26:	75fb      	strb	r3, [r7, #23]
      break;
 800ad28:	e06e      	b.n	800ae08 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800ad2a:	78f9      	ldrb	r1, [r7, #3]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2300      	movs	r3, #0
 800ad32:	2200      	movs	r2, #0
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fe05 	bl	800b944 <USBH_MSC_SCSI_Write>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10b      	bne.n	800ad5c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	2134      	movs	r1, #52	; 0x34
 800ad4a:	fb01 f303 	mul.w	r3, r1, r3
 800ad4e:	4413      	add	r3, r2
 800ad50:	3390      	adds	r3, #144	; 0x90
 800ad52:	2201      	movs	r2, #1
 800ad54:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad5a:	e057      	b.n	800ae0c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d109      	bne.n	800ad76 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	2134      	movs	r1, #52	; 0x34
 800ad68:	fb01 f303 	mul.w	r3, r1, r3
 800ad6c:	4413      	add	r3, r2
 800ad6e:	3390      	adds	r3, #144	; 0x90
 800ad70:	2205      	movs	r2, #5
 800ad72:	701a      	strb	r2, [r3, #0]
      break;
 800ad74:	e04a      	b.n	800ae0c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d147      	bne.n	800ae0c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	693a      	ldr	r2, [r7, #16]
 800ad80:	2134      	movs	r1, #52	; 0x34
 800ad82:	fb01 f303 	mul.w	r3, r1, r3
 800ad86:	4413      	add	r3, r2
 800ad88:	3390      	adds	r3, #144	; 0x90
 800ad8a:	2208      	movs	r2, #8
 800ad8c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800ad8e:	2302      	movs	r3, #2
 800ad90:	75fb      	strb	r3, [r7, #23]
      break;
 800ad92:	e03b      	b.n	800ae0c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	2234      	movs	r2, #52	; 0x34
 800ad98:	fb02 f303 	mul.w	r3, r2, r3
 800ad9c:	3398      	adds	r3, #152	; 0x98
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	4413      	add	r3, r2
 800ada2:	1d1a      	adds	r2, r3, #4
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fd52 	bl	800b852 <USBH_MSC_SCSI_RequestSense>
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d113      	bne.n	800ade0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	2134      	movs	r1, #52	; 0x34
 800adbe:	fb01 f303 	mul.w	r3, r1, r3
 800adc2:	4413      	add	r3, r2
 800adc4:	3390      	adds	r3, #144	; 0x90
 800adc6:	2201      	movs	r2, #1
 800adc8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	693a      	ldr	r2, [r7, #16]
 800adce:	2134      	movs	r1, #52	; 0x34
 800add0:	fb01 f303 	mul.w	r3, r1, r3
 800add4:	4413      	add	r3, r2
 800add6:	3391      	adds	r3, #145	; 0x91
 800add8:	2202      	movs	r2, #2
 800adda:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800addc:	2302      	movs	r3, #2
 800adde:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d014      	beq.n	800ae10 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d111      	bne.n	800ae10 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800adec:	78fb      	ldrb	r3, [r7, #3]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	2134      	movs	r1, #52	; 0x34
 800adf2:	fb01 f303 	mul.w	r3, r1, r3
 800adf6:	4413      	add	r3, r2
 800adf8:	3390      	adds	r3, #144	; 0x90
 800adfa:	2208      	movs	r2, #8
 800adfc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800adfe:	2302      	movs	r3, #2
 800ae00:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae02:	e005      	b.n	800ae10 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800ae04:	bf00      	nop
 800ae06:	e004      	b.n	800ae12 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ae08:	bf00      	nop
 800ae0a:	e002      	b.n	800ae12 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e000      	b.n	800ae12 <USBH_MSC_RdWrProcess+0x194>
      break;
 800ae10:	bf00      	nop

  }
  return error;
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b0b      	cmp	r3, #11
 800ae3a:	d10c      	bne.n	800ae56 <USBH_MSC_UnitIsReady+0x3a>
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	2134      	movs	r1, #52	; 0x34
 800ae42:	fb01 f303 	mul.w	r3, r1, r3
 800ae46:	4413      	add	r3, r2
 800ae48:	3391      	adds	r3, #145	; 0x91
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800ae50:	2301      	movs	r3, #1
 800ae52:	73fb      	strb	r3, [r7, #15]
 800ae54:	e001      	b.n	800ae5a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b086      	sub	sp, #24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	460b      	mov	r3, r1
 800ae72:	607a      	str	r2, [r7, #4]
 800ae74:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae7c:	69db      	ldr	r3, [r3, #28]
 800ae7e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b0b      	cmp	r3, #11
 800ae88:	d10d      	bne.n	800aea6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	2234      	movs	r2, #52	; 0x34
 800ae8e:	fb02 f303 	mul.w	r3, r2, r3
 800ae92:	3390      	adds	r3, #144	; 0x90
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	4413      	add	r3, r2
 800ae98:	2234      	movs	r2, #52	; 0x34
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f002 fe51 	bl	800db44 <memcpy>
    return USBH_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	e000      	b.n	800aea8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800aea6:	2302      	movs	r3, #2
  }
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	607a      	str	r2, [r7, #4]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	460b      	mov	r3, r1
 800aebe:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aec6:	69db      	ldr	r3, [r3, #28]
 800aec8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00e      	beq.n	800aef4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800aedc:	2b0b      	cmp	r3, #11
 800aede:	d109      	bne.n	800aef4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800aee0:	7afb      	ldrb	r3, [r7, #11]
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	2134      	movs	r1, #52	; 0x34
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	3390      	adds	r3, #144	; 0x90
 800aeee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d001      	beq.n	800aef8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800aef4:	2302      	movs	r3, #2
 800aef6:	e040      	b.n	800af7a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2206      	movs	r2, #6
 800aefc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800aefe:	7afb      	ldrb	r3, [r7, #11]
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	2134      	movs	r1, #52	; 0x34
 800af04:	fb01 f303 	mul.w	r3, r1, r3
 800af08:	4413      	add	r3, r2
 800af0a:	3390      	adds	r3, #144	; 0x90
 800af0c:	2206      	movs	r2, #6
 800af0e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	b29a      	uxth	r2, r3
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800af1a:	7af9      	ldrb	r1, [r7, #11]
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fd78 	bl	800ba1a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af30:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800af32:	e016      	b.n	800af62 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	1ad2      	subs	r2, r2, r3
 800af3e:	6a3b      	ldr	r3, [r7, #32]
 800af40:	f242 7110 	movw	r1, #10000	; 0x2710
 800af44:	fb01 f303 	mul.w	r3, r1, r3
 800af48:	429a      	cmp	r2, r3
 800af4a:	d805      	bhi.n	800af58 <USBH_MSC_Read+0xa8>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b00      	cmp	r3, #0
 800af56:	d104      	bne.n	800af62 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2201      	movs	r2, #1
 800af5c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800af5e:	2302      	movs	r3, #2
 800af60:	e00b      	b.n	800af7a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	4619      	mov	r1, r3
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff fe89 	bl	800ac7e <USBH_MSC_RdWrProcess>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d0e0      	beq.n	800af34 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2201      	movs	r2, #1
 800af76:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b088      	sub	sp, #32
 800af86:	af02      	add	r7, sp, #8
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	607a      	str	r2, [r7, #4]
 800af8c:	603b      	str	r3, [r7, #0]
 800af8e:	460b      	mov	r3, r1
 800af90:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800af98:	69db      	ldr	r3, [r3, #28]
 800af9a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00e      	beq.n	800afc6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800afae:	2b0b      	cmp	r3, #11
 800afb0:	d109      	bne.n	800afc6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800afb2:	7afb      	ldrb	r3, [r7, #11]
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	2134      	movs	r1, #52	; 0x34
 800afb8:	fb01 f303 	mul.w	r3, r1, r3
 800afbc:	4413      	add	r3, r2
 800afbe:	3390      	adds	r3, #144	; 0x90
 800afc0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d001      	beq.n	800afca <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800afc6:	2302      	movs	r3, #2
 800afc8:	e040      	b.n	800b04c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2207      	movs	r2, #7
 800afce:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	2134      	movs	r1, #52	; 0x34
 800afd6:	fb01 f303 	mul.w	r3, r1, r3
 800afda:	4413      	add	r3, r2
 800afdc:	3390      	adds	r3, #144	; 0x90
 800afde:	2207      	movs	r2, #7
 800afe0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800afe2:	7afb      	ldrb	r3, [r7, #11]
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800afec:	7af9      	ldrb	r1, [r7, #11]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 fca4 	bl	800b944 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b002:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b004:	e016      	b.n	800b034 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	1ad2      	subs	r2, r2, r3
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	f242 7110 	movw	r1, #10000	; 0x2710
 800b016:	fb01 f303 	mul.w	r3, r1, r3
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d805      	bhi.n	800b02a <USBH_MSC_Write+0xa8>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d104      	bne.n	800b034 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2201      	movs	r2, #1
 800b02e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b030:	2302      	movs	r3, #2
 800b032:	e00b      	b.n	800b04c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b034:	7afb      	ldrb	r3, [r7, #11]
 800b036:	4619      	mov	r1, r3
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7ff fe20 	bl	800ac7e <USBH_MSC_RdWrProcess>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b01      	cmp	r3, #1
 800b042:	d0e0      	beq.n	800b006 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2201      	movs	r2, #1
 800b048:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3718      	adds	r7, #24
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2221      	movs	r2, #33	; 0x21
 800b060:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2200      	movs	r2, #0
 800b078:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800b07a:	2200      	movs	r2, #0
 800b07c:	2100      	movs	r1, #0
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 fea4 	bl	800cdcc <USBH_CtlReq>
 800b084:	4603      	mov	r3, r0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	22a1      	movs	r2, #161	; 0xa1
 800b09c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	22fe      	movs	r2, #254	; 0xfe
 800b0a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f001 fe86 	bl	800cdcc <USBH_CtlReq>
 800b0c0:	4603      	mov	r3, r0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0da:	69db      	ldr	r3, [r3, #28]
 800b0dc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4a09      	ldr	r2, [pc, #36]	; (800b108 <USBH_MSC_BOT_Init+0x3c>)
 800b0e2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4a09      	ldr	r2, [pc, #36]	; (800b10c <USBH_MSC_BOT_Init+0x40>)
 800b0e8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2201      	movs	r2, #1
 800b0f6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	43425355 	.word	0x43425355
 800b10c:	20304050 	.word	0x20304050

0800b110 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af02      	add	r7, sp, #8
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	460b      	mov	r3, r1
 800b11a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b11c:	2301      	movs	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b120:	2301      	movs	r3, #1
 800b122:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b124:	2301      	movs	r3, #1
 800b126:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b128:	2300      	movs	r3, #0
 800b12a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b140:	3b01      	subs	r3, #1
 800b142:	2b0a      	cmp	r3, #10
 800b144:	f200 819e 	bhi.w	800b484 <USBH_MSC_BOT_Process+0x374>
 800b148:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <USBH_MSC_BOT_Process+0x40>)
 800b14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14e:	bf00      	nop
 800b150:	0800b17d 	.word	0x0800b17d
 800b154:	0800b1a5 	.word	0x0800b1a5
 800b158:	0800b20f 	.word	0x0800b20f
 800b15c:	0800b22d 	.word	0x0800b22d
 800b160:	0800b2b1 	.word	0x0800b2b1
 800b164:	0800b2d3 	.word	0x0800b2d3
 800b168:	0800b36b 	.word	0x0800b36b
 800b16c:	0800b387 	.word	0x0800b387
 800b170:	0800b3d9 	.word	0x0800b3d9
 800b174:	0800b409 	.word	0x0800b409
 800b178:	0800b46b 	.word	0x0800b46b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	78fa      	ldrb	r2, [r7, #3]
 800b180:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	795b      	ldrb	r3, [r3, #5]
 800b196:	2201      	movs	r2, #1
 800b198:	9200      	str	r2, [sp, #0]
 800b19a:	221f      	movs	r2, #31
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f002 f824 	bl	800d1ea <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b1a2:	e17e      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	795b      	ldrb	r3, [r3, #5]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f002 fbae 	bl	800d90c <USBH_LL_GetURBState>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b1b4:	7d3b      	ldrb	r3, [r7, #20]
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d118      	bne.n	800b1ec <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00f      	beq.n	800b1e2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b1c8:	b25b      	sxtb	r3, r3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	da04      	bge.n	800b1d8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2203      	movs	r2, #3
 800b1d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b1d6:	e157      	b.n	800b488 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2205      	movs	r2, #5
 800b1dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1e0:	e152      	b.n	800b488 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2207      	movs	r2, #7
 800b1e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1ea:	e14d      	b.n	800b488 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1ec:	7d3b      	ldrb	r3, [r7, #20]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	d104      	bne.n	800b1fc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b1fa:	e145      	b.n	800b488 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800b1fc:	7d3b      	ldrb	r3, [r7, #20]
 800b1fe:	2b05      	cmp	r3, #5
 800b200:	f040 8142 	bne.w	800b488 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	220a      	movs	r2, #10
 800b208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b20c:	e13c      	b.n	800b488 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	895a      	ldrh	r2, [r3, #10]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	791b      	ldrb	r3, [r3, #4]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f002 f809 	bl	800d234 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2204      	movs	r2, #4
 800b226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b22a:	e13a      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	791b      	ldrb	r3, [r3, #4]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f002 fb6a 	bl	800d90c <USBH_LL_GetURBState>
 800b238:	4603      	mov	r3, r0
 800b23a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b23c:	7d3b      	ldrb	r3, [r7, #20]
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d12d      	bne.n	800b29e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	8952      	ldrh	r2, [r2, #10]
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d910      	bls.n	800b270 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	8952      	ldrh	r2, [r2, #10]
 800b258:	441a      	add	r2, r3
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	8952      	ldrh	r2, [r2, #10]
 800b268:	1a9a      	subs	r2, r3, r2
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	65da      	str	r2, [r3, #92]	; 0x5c
 800b26e:	e002      	b.n	800b276 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	2200      	movs	r2, #0
 800b274:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00a      	beq.n	800b294 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	895a      	ldrh	r2, [r3, #10]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	791b      	ldrb	r3, [r3, #4]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f001 ffd1 	bl	800d234 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b292:	e0fb      	b.n	800b48c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	2207      	movs	r2, #7
 800b298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b29c:	e0f6      	b.n	800b48c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800b29e:	7d3b      	ldrb	r3, [r7, #20]
 800b2a0:	2b05      	cmp	r3, #5
 800b2a2:	f040 80f3 	bne.w	800b48c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2209      	movs	r2, #9
 800b2aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2ae:	e0ed      	b.n	800b48c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	891a      	ldrh	r2, [r3, #8]
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	795b      	ldrb	r3, [r3, #5]
 800b2be:	2001      	movs	r0, #1
 800b2c0:	9000      	str	r0, [sp, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 ff91 	bl	800d1ea <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2206      	movs	r2, #6
 800b2cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b2d0:	e0e7      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	795b      	ldrb	r3, [r3, #5]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f002 fb17 	bl	800d90c <USBH_LL_GetURBState>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b2e2:	7d3b      	ldrb	r3, [r7, #20]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d12f      	bne.n	800b348 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	8912      	ldrh	r2, [r2, #8]
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d910      	bls.n	800b316 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2fa:	693a      	ldr	r2, [r7, #16]
 800b2fc:	8912      	ldrh	r2, [r2, #8]
 800b2fe:	441a      	add	r2, r3
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b30a:	693a      	ldr	r2, [r7, #16]
 800b30c:	8912      	ldrh	r2, [r2, #8]
 800b30e:	1a9a      	subs	r2, r3, r2
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	65da      	str	r2, [r3, #92]	; 0x5c
 800b314:	e002      	b.n	800b31c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2200      	movs	r2, #0
 800b31a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00c      	beq.n	800b33e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	891a      	ldrh	r2, [r3, #8]
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	795b      	ldrb	r3, [r3, #5]
 800b332:	2001      	movs	r0, #1
 800b334:	9000      	str	r0, [sp, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 ff57 	bl	800d1ea <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800b33c:	e0a8      	b.n	800b490 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	2207      	movs	r2, #7
 800b342:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b346:	e0a3      	b.n	800b490 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b348:	7d3b      	ldrb	r3, [r7, #20]
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d104      	bne.n	800b358 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2205      	movs	r2, #5
 800b352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b356:	e09b      	b.n	800b490 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800b358:	7d3b      	ldrb	r3, [r7, #20]
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	f040 8098 	bne.w	800b490 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	220a      	movs	r2, #10
 800b364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b368:	e092      	b.n	800b490 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	791b      	ldrb	r3, [r3, #4]
 800b374:	220d      	movs	r2, #13
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f001 ff5c 	bl	800d234 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2208      	movs	r2, #8
 800b380:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b384:	e08d      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	791b      	ldrb	r3, [r3, #4]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f002 fabd 	bl	800d90c <USBH_LL_GetURBState>
 800b392:	4603      	mov	r3, r0
 800b394:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b396:	7d3b      	ldrb	r3, [r7, #20]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d115      	bne.n	800b3c8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f8a9 	bl	800b504 <USBH_MSC_DecodeCSW>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b3b6:	7d7b      	ldrb	r3, [r7, #21]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800b3c0:	e068      	b.n	800b494 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800b3c2:	2302      	movs	r3, #2
 800b3c4:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c6:	e065      	b.n	800b494 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800b3c8:	7d3b      	ldrb	r3, [r7, #20]
 800b3ca:	2b05      	cmp	r3, #5
 800b3cc:	d162      	bne.n	800b494 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2209      	movs	r2, #9
 800b3d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b3d6:	e05d      	b.n	800b494 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b3d8:	78fb      	ldrb	r3, [r7, #3]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 f864 	bl	800b4ac <USBH_MSC_BOT_Abort>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b3e8:	7dbb      	ldrb	r3, [r7, #22]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d104      	bne.n	800b3f8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2207      	movs	r2, #7
 800b3f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b3f6:	e04f      	b.n	800b498 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b3f8:	7dbb      	ldrb	r3, [r7, #22]
 800b3fa:	2b04      	cmp	r3, #4
 800b3fc:	d14c      	bne.n	800b498 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	220b      	movs	r2, #11
 800b402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b406:	e047      	b.n	800b498 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	2201      	movs	r2, #1
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f84c 	bl	800b4ac <USBH_MSC_BOT_Abort>
 800b414:	4603      	mov	r3, r0
 800b416:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b418:	7dbb      	ldrb	r3, [r7, #22]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d11d      	bne.n	800b45a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	795b      	ldrb	r3, [r3, #5]
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f002 facb 	bl	800d9c0 <USBH_LL_GetToggle>
 800b42a:	4603      	mov	r3, r0
 800b42c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	7959      	ldrb	r1, [r3, #5]
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	f1c3 0301 	rsb	r3, r3, #1
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	461a      	mov	r2, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f002 fa8f 	bl	800d960 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	791b      	ldrb	r3, [r3, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f002 fa88 	bl	800d960 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	2209      	movs	r2, #9
 800b454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800b458:	e020      	b.n	800b49c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800b45a:	7dbb      	ldrb	r3, [r7, #22]
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	d11d      	bne.n	800b49c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	220b      	movs	r2, #11
 800b464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b468:	e018      	b.n	800b49c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f7ff fdf2 	bl	800b054 <USBH_MSC_BOT_REQ_Reset>
 800b470:	4603      	mov	r3, r0
 800b472:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d112      	bne.n	800b4a0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800b482:	e00d      	b.n	800b4a0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800b484:	bf00      	nop
 800b486:	e00c      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b488:	bf00      	nop
 800b48a:	e00a      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b48c:	bf00      	nop
 800b48e:	e008      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b490:	bf00      	nop
 800b492:	e006      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b494:	bf00      	nop
 800b496:	e004      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b498:	bf00      	nop
 800b49a:	e002      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b49c:	bf00      	nop
 800b49e:	e000      	b.n	800b4a2 <USBH_MSC_BOT_Process+0x392>
      break;
 800b4a0:	bf00      	nop
  }
  return status;
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800b4bc:	2302      	movs	r3, #2
 800b4be:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800b4ca:	78bb      	ldrb	r3, [r7, #2]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <USBH_MSC_BOT_Abort+0x2a>
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d009      	beq.n	800b4e8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800b4d4:	e011      	b.n	800b4fa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	79db      	ldrb	r3, [r3, #7]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 f9a8 	bl	800c832 <USBH_ClrFeature>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e6:	e008      	b.n	800b4fa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	799b      	ldrb	r3, [r3, #6]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f001 f99f 	bl	800c832 <USBH_ClrFeature>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4f8:	bf00      	nop
  }
  return status;
 800b4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b512:	69db      	ldr	r3, [r3, #28]
 800b514:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800b516:	2301      	movs	r3, #1
 800b518:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	791b      	ldrb	r3, [r3, #4]
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f002 f961 	bl	800d7e8 <USBH_LL_GetLastXferSize>
 800b526:	4603      	mov	r3, r0
 800b528:	2b0d      	cmp	r3, #13
 800b52a:	d002      	beq.n	800b532 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800b52c:	2302      	movs	r3, #2
 800b52e:	73fb      	strb	r3, [r7, #15]
 800b530:	e024      	b.n	800b57c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b536:	4a14      	ldr	r2, [pc, #80]	; (800b588 <USBH_MSC_DecodeCSW+0x84>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d11d      	bne.n	800b578 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b544:	429a      	cmp	r2, r3
 800b546:	d119      	bne.n	800b57c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d102      	bne.n	800b558 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800b552:	2300      	movs	r3, #0
 800b554:	73fb      	strb	r3, [r7, #15]
 800b556:	e011      	b.n	800b57c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d102      	bne.n	800b568 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800b562:	2301      	movs	r3, #1
 800b564:	73fb      	strb	r3, [r7, #15]
 800b566:	e009      	b.n	800b57c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d104      	bne.n	800b57c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800b572:	2302      	movs	r3, #2
 800b574:	73fb      	strb	r3, [r7, #15]
 800b576:	e001      	b.n	800b57c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800b578:	2302      	movs	r3, #2
 800b57a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	53425355 	.word	0x53425355

0800b58c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	460b      	mov	r3, r1
 800b596:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b598:	2302      	movs	r3, #2
 800b59a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d002      	beq.n	800b5b6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d021      	beq.n	800b5f8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b5b4:	e028      	b.n	800b608 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	220a      	movs	r2, #10
 800b5c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	3363      	adds	r3, #99	; 0x63
 800b5d0:	2210      	movs	r2, #16
 800b5d2:	2100      	movs	r1, #0
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f002 fac3 	bl	800db60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f6:	e007      	b.n	800b608 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff fd87 	bl	800b110 <USBH_MSC_BOT_Process>
 800b602:	4603      	mov	r3, r0
 800b604:	73fb      	strb	r3, [r7, #15]
      break;
 800b606:	bf00      	nop
  }

  return error;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b086      	sub	sp, #24
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	460b      	mov	r3, r1
 800b61c:	607a      	str	r2, [r7, #4]
 800b61e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800b620:	2301      	movs	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b634:	2b01      	cmp	r3, #1
 800b636:	d002      	beq.n	800b63e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d027      	beq.n	800b68c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800b63c:	e05f      	b.n	800b6fe <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2208      	movs	r2, #8
 800b642:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	2280      	movs	r2, #128	; 0x80
 800b648:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	220a      	movs	r2, #10
 800b650:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	3363      	adds	r3, #99	; 0x63
 800b658:	2210      	movs	r2, #16
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f002 fa7f 	bl	800db60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2225      	movs	r2, #37	; 0x25
 800b666:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2202      	movs	r2, #2
 800b676:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	f103 0210 	add.w	r2, r3, #16
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
      break;
 800b68a:	e038      	b.n	800b6fe <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b68c:	7afb      	ldrb	r3, [r7, #11]
 800b68e:	4619      	mov	r1, r3
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f7ff fd3d 	bl	800b110 <USBH_MSC_BOT_Process>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d12d      	bne.n	800b6fc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b2:	3302      	adds	r3, #2
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	021b      	lsls	r3, r3, #8
 800b6b8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b6c6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	061b      	lsls	r3, r3, #24
 800b6d2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6de:	3307      	adds	r3, #7
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ea:	3306      	adds	r3, #6
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	809a      	strh	r2, [r3, #4]
      break;
 800b6fc:	bf00      	nop
  }

  return error;
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	460b      	mov	r3, r1
 800b712:	607a      	str	r2, [r7, #4]
 800b714:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800b716:	2302      	movs	r3, #2
 800b718:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b720:	69db      	ldr	r3, [r3, #28]
 800b722:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d002      	beq.n	800b734 <USBH_MSC_SCSI_Inquiry+0x2c>
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d03d      	beq.n	800b7ae <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800b732:	e089      	b.n	800b848 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2224      	movs	r2, #36	; 0x24
 800b738:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	2280      	movs	r2, #128	; 0x80
 800b73e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	220a      	movs	r2, #10
 800b746:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3363      	adds	r3, #99	; 0x63
 800b74e:	220a      	movs	r2, #10
 800b750:	2100      	movs	r1, #0
 800b752:	4618      	mov	r0, r3
 800b754:	f002 fa04 	bl	800db60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	2212      	movs	r2, #18
 800b75c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b760:	7afb      	ldrb	r3, [r7, #11]
 800b762:	015b      	lsls	r3, r3, #5
 800b764:	b2da      	uxtb	r2, r3
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2224      	movs	r2, #36	; 0x24
 800b780:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	2202      	movs	r2, #2
 800b798:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	f103 0210 	add.w	r2, r3, #16
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ac:	e04c      	b.n	800b848 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b7ae:	7afb      	ldrb	r3, [r7, #11]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff fcac 	bl	800b110 <USBH_MSC_BOT_Process>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d141      	bne.n	800b846 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800b7c2:	2222      	movs	r2, #34	; 0x22
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f002 f9ca 	bl	800db60 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	f003 031f 	and.w	r3, r3, #31
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	095b      	lsrs	r3, r3, #5
 800b7e8:	b2da      	uxtb	r2, r3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	b25b      	sxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	da03      	bge.n	800b806 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	709a      	strb	r2, [r3, #2]
 800b804:	e002      	b.n	800b80c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	1cd8      	adds	r0, r3, #3
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b816:	3308      	adds	r3, #8
 800b818:	2208      	movs	r2, #8
 800b81a:	4619      	mov	r1, r3
 800b81c:	f002 f992 	bl	800db44 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f103 000c 	add.w	r0, r3, #12
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b82c:	3310      	adds	r3, #16
 800b82e:	2210      	movs	r2, #16
 800b830:	4619      	mov	r1, r3
 800b832:	f002 f987 	bl	800db44 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	331d      	adds	r3, #29
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800b840:	3220      	adds	r2, #32
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	601a      	str	r2, [r3, #0]
      break;
 800b846:	bf00      	nop
  }

  return error;
 800b848:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b086      	sub	sp, #24
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	460b      	mov	r3, r1
 800b85c:	607a      	str	r2, [r7, #4]
 800b85e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b860:	2302      	movs	r3, #2
 800b862:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b86a:	69db      	ldr	r3, [r3, #28]
 800b86c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b874:	2b01      	cmp	r3, #1
 800b876:	d002      	beq.n	800b87e <USBH_MSC_SCSI_RequestSense+0x2c>
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d03d      	beq.n	800b8f8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800b87c:	e05d      	b.n	800b93a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	220e      	movs	r2, #14
 800b882:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2280      	movs	r2, #128	; 0x80
 800b888:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	220a      	movs	r2, #10
 800b890:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	3363      	adds	r3, #99	; 0x63
 800b898:	2210      	movs	r2, #16
 800b89a:	2100      	movs	r1, #0
 800b89c:	4618      	mov	r0, r3
 800b89e:	f002 f95f 	bl	800db60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	2203      	movs	r2, #3
 800b8a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800b8aa:	7afb      	ldrb	r3, [r7, #11]
 800b8ac:	015b      	lsls	r3, r3, #5
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	220e      	movs	r2, #14
 800b8ca:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2202      	movs	r2, #2
 800b8e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	f103 0210 	add.w	r2, r3, #16
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b8f6:	e020      	b.n	800b93a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b8f8:	7afb      	ldrb	r3, [r7, #11]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fc07 	bl	800b110 <USBH_MSC_BOT_Process>
 800b902:	4603      	mov	r3, r0
 800b904:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800b906:	7dfb      	ldrb	r3, [r7, #23]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d115      	bne.n	800b938 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b912:	3302      	adds	r3, #2
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	f003 030f 	and.w	r3, r3, #15
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b926:	7b1a      	ldrb	r2, [r3, #12]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b932:	7b5a      	ldrb	r2, [r3, #13]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	709a      	strb	r2, [r3, #2]
      break;
 800b938:	bf00      	nop
  }

  return error;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3718      	adds	r7, #24
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	607a      	str	r2, [r7, #4]
 800b94e:	603b      	str	r3, [r7, #0]
 800b950:	460b      	mov	r3, r1
 800b952:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800b954:	2302      	movs	r3, #2
 800b956:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d002      	beq.n	800b972 <USBH_MSC_SCSI_Write+0x2e>
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d047      	beq.n	800ba00 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800b970:	e04e      	b.n	800ba10 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800b978:	461a      	mov	r2, r3
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	fb03 f202 	mul.w	r2, r3, r2
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	220a      	movs	r2, #10
 800b990:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	3363      	adds	r3, #99	; 0x63
 800b998:	2210      	movs	r2, #16
 800b99a:	2100      	movs	r1, #0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f002 f8df 	bl	800db60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	222a      	movs	r2, #42	; 0x2a
 800b9a6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b9aa:	79fa      	ldrb	r2, [r7, #7]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b9b2:	79ba      	ldrb	r2, [r7, #6]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b9ba:	797a      	ldrb	r2, [r7, #5]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b9c2:	1d3b      	adds	r3, r7, #4
 800b9c4:	781a      	ldrb	r2, [r3, #0]
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b9cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b9d6:	f107 0320 	add.w	r3, r7, #32
 800b9da:	781a      	ldrb	r2, [r3, #0]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b9fe:	e007      	b.n	800ba10 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ba00:	7afb      	ldrb	r3, [r7, #11]
 800ba02:	4619      	mov	r1, r3
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f7ff fb83 	bl	800b110 <USBH_MSC_BOT_Process>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba0e:	bf00      	nop
  }

  return error;
 800ba10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b086      	sub	sp, #24
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	60f8      	str	r0, [r7, #12]
 800ba22:	607a      	str	r2, [r7, #4]
 800ba24:	603b      	str	r3, [r7, #0]
 800ba26:	460b      	mov	r3, r1
 800ba28:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d002      	beq.n	800ba48 <USBH_MSC_SCSI_Read+0x2e>
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d047      	beq.n	800bad6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ba46:	e04e      	b.n	800bae6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ba4e:	461a      	mov	r2, r3
 800ba50:	6a3b      	ldr	r3, [r7, #32]
 800ba52:	fb03 f202 	mul.w	r2, r3, r2
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2280      	movs	r2, #128	; 0x80
 800ba5e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	220a      	movs	r2, #10
 800ba66:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	3363      	adds	r3, #99	; 0x63
 800ba6e:	2210      	movs	r2, #16
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f002 f874 	bl	800db60 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	2228      	movs	r2, #40	; 0x28
 800ba7c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ba80:	79fa      	ldrb	r2, [r7, #7]
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ba88:	79ba      	ldrb	r2, [r7, #6]
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ba90:	797a      	ldrb	r2, [r7, #5]
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ba98:	1d3b      	adds	r3, r7, #4
 800ba9a:	781a      	ldrb	r2, [r3, #0]
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800baa2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800baac:	f107 0320 	add.w	r3, r7, #32
 800bab0:	781a      	ldrb	r2, [r3, #0]
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bad0:	2301      	movs	r3, #1
 800bad2:	75fb      	strb	r3, [r7, #23]
      break;
 800bad4:	e007      	b.n	800bae6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	4619      	mov	r1, r3
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fb18 	bl	800b110 <USBH_MSC_BOT_Process>
 800bae0:	4603      	mov	r3, r0
 800bae2:	75fb      	strb	r3, [r7, #23]
      break;
 800bae4:	bf00      	nop
  }

  return error;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3718      	adds	r7, #24
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4613      	mov	r3, r2
 800bafc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d101      	bne.n	800bb08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bb04:	2302      	movs	r3, #2
 800bb06:	e029      	b.n	800bb5c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	79fa      	ldrb	r2, [r7, #7]
 800bb0c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f000 f81f 	bl	800bb64 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f001 fd89 	bl	800d66c <USBH_LL_Init>

  return USBH_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bb70:	2300      	movs	r3, #0
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	e009      	b.n	800bb8a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	33e0      	adds	r3, #224	; 0xe0
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	2200      	movs	r2, #0
 800bb82:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3301      	adds	r3, #1
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b0f      	cmp	r3, #15
 800bb8e:	d9f2      	bls.n	800bb76 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	e009      	b.n	800bbaa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bba0:	2200      	movs	r2, #0
 800bba2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3301      	adds	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbb0:	d3f1      	bcc.n	800bb96 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2240      	movs	r2, #64	; 0x40
 800bbd6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2201      	movs	r2, #1
 800bbea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3714      	adds	r7, #20
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d016      	beq.n	800bc4e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10e      	bne.n	800bc48 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bc30:	1c59      	adds	r1, r3, #1
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	33de      	adds	r3, #222	; 0xde
 800bc3c:	6839      	ldr	r1, [r7, #0]
 800bc3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]
 800bc46:	e004      	b.n	800bc52 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	73fb      	strb	r3, [r7, #15]
 800bc4c:	e001      	b.n	800bc52 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bc4e:	2302      	movs	r3, #2
 800bc50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800bc76:	78fa      	ldrb	r2, [r7, #3]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d204      	bcs.n	800bc86 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	78fa      	ldrb	r2, [r7, #3]
 800bc80:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800bc84:	e001      	b.n	800bc8a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bc86:	2302      	movs	r3, #2
 800bc88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	4608      	mov	r0, r1
 800bca2:	4611      	mov	r1, r2
 800bca4:	461a      	mov	r2, r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	70fb      	strb	r3, [r7, #3]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	70bb      	strb	r3, [r7, #2]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bcc0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bcc2:	e025      	b.n	800bd10 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	221a      	movs	r2, #26
 800bcc8:	fb02 f303 	mul.w	r3, r2, r3
 800bccc:	3308      	adds	r3, #8
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	3302      	adds	r3, #2
 800bcd4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	795b      	ldrb	r3, [r3, #5]
 800bcda:	78fa      	ldrb	r2, [r7, #3]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d002      	beq.n	800bce6 <USBH_FindInterface+0x4e>
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	2bff      	cmp	r3, #255	; 0xff
 800bce4:	d111      	bne.n	800bd0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800bcea:	78ba      	ldrb	r2, [r7, #2]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d002      	beq.n	800bcf6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bcf0:	78bb      	ldrb	r3, [r7, #2]
 800bcf2:	2bff      	cmp	r3, #255	; 0xff
 800bcf4:	d109      	bne.n	800bd0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800bcfa:	787a      	ldrb	r2, [r7, #1]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d002      	beq.n	800bd06 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bd00:	787b      	ldrb	r3, [r7, #1]
 800bd02:	2bff      	cmp	r3, #255	; 0xff
 800bd04:	d101      	bne.n	800bd0a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bd06:	7dfb      	ldrb	r3, [r7, #23]
 800bd08:	e006      	b.n	800bd18 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d9d6      	bls.n	800bcc4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bd16:	23ff      	movs	r3, #255	; 0xff
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	371c      	adds	r7, #28
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f001 fce3 	bl	800d6f8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800bd32:	2101      	movs	r1, #1
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f001 fdfc 	bl	800d932 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af04      	add	r7, sp, #16
 800bd4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d102      	bne.n	800bd66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2203      	movs	r2, #3
 800bd64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b0b      	cmp	r3, #11
 800bd6e:	f200 81be 	bhi.w	800c0ee <USBH_Process+0x3aa>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <USBH_Process+0x34>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bda9 	.word	0x0800bda9
 800bd7c:	0800bddb 	.word	0x0800bddb
 800bd80:	0800be43 	.word	0x0800be43
 800bd84:	0800c089 	.word	0x0800c089
 800bd88:	0800c0ef 	.word	0x0800c0ef
 800bd8c:	0800bee7 	.word	0x0800bee7
 800bd90:	0800c02f 	.word	0x0800c02f
 800bd94:	0800bf1d 	.word	0x0800bf1d
 800bd98:	0800bf3d 	.word	0x0800bf3d
 800bd9c:	0800bf5d 	.word	0x0800bf5d
 800bda0:	0800bfa1 	.word	0x0800bfa1
 800bda4:	0800c071 	.word	0x0800c071
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 819e 	beq.w	800c0f2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800bdbc:	20c8      	movs	r0, #200	; 0xc8
 800bdbe:	f001 fe2f 	bl	800da20 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f001 fcf5 	bl	800d7b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bdd8:	e18b      	b.n	800c0f2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d107      	bne.n	800bdf4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bdf2:	e18d      	b.n	800c110 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bdfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bdfe:	d914      	bls.n	800be2a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be06:	3301      	adds	r3, #1
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800be16:	2b03      	cmp	r3, #3
 800be18:	d903      	bls.n	800be22 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	220d      	movs	r2, #13
 800be1e:	701a      	strb	r2, [r3, #0]
      break;
 800be20:	e176      	b.n	800c110 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	701a      	strb	r2, [r3, #0]
      break;
 800be28:	e172      	b.n	800c110 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800be30:	f103 020a 	add.w	r2, r3, #10
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800be3a:	200a      	movs	r0, #10
 800be3c:	f001 fdf0 	bl	800da20 <USBH_Delay>
      break;
 800be40:	e166      	b.n	800c110 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be52:	2104      	movs	r1, #4
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800be58:	2064      	movs	r0, #100	; 0x64
 800be5a:	f001 fde1 	bl	800da20 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f001 fc80 	bl	800d764 <USBH_LL_GetSpeed>
 800be64:	4603      	mov	r3, r0
 800be66:	461a      	mov	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2205      	movs	r2, #5
 800be72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800be74:	2100      	movs	r1, #0
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f001 fa29 	bl	800d2ce <USBH_AllocPipe>
 800be7c:	4603      	mov	r3, r0
 800be7e:	461a      	mov	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800be84:	2180      	movs	r1, #128	; 0x80
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f001 fa21 	bl	800d2ce <USBH_AllocPipe>
 800be8c:	4603      	mov	r3, r0
 800be8e:	461a      	mov	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7919      	ldrb	r1, [r3, #4]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bea8:	b292      	uxth	r2, r2
 800beaa:	9202      	str	r2, [sp, #8]
 800beac:	2200      	movs	r2, #0
 800beae:	9201      	str	r2, [sp, #4]
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	4603      	mov	r3, r0
 800beb4:	2280      	movs	r2, #128	; 0x80
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f001 f9da 	bl	800d270 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	7959      	ldrb	r1, [r3, #5]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bed0:	b292      	uxth	r2, r2
 800bed2:	9202      	str	r2, [sp, #8]
 800bed4:	2200      	movs	r2, #0
 800bed6:	9201      	str	r2, [sp, #4]
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	4603      	mov	r3, r0
 800bedc:	2200      	movs	r2, #0
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f001 f9c6 	bl	800d270 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bee4:	e114      	b.n	800c110 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f918 	bl	800c11c <USBH_HandleEnum>
 800beec:	4603      	mov	r3, r0
 800beee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f040 80fe 	bne.w	800c0f6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d103      	bne.n	800bf14 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2208      	movs	r2, #8
 800bf10:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf12:	e0f0      	b.n	800c0f6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2207      	movs	r2, #7
 800bf18:	701a      	strb	r2, [r3, #0]
      break;
 800bf1a:	e0ec      	b.n	800c0f6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f000 80e9 	beq.w	800c0fa <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf2e:	2101      	movs	r1, #1
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2208      	movs	r2, #8
 800bf38:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bf3a:	e0de      	b.n	800c0fa <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fc2c 	bl	800c7a4 <USBH_SetCfg>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	f040 80d5 	bne.w	800c0fe <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2209      	movs	r2, #9
 800bf58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf5a:	e0d0      	b.n	800c0fe <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800bf62:	f003 0320 	and.w	r3, r3, #32
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d016      	beq.n	800bf98 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fc3c 	bl	800c7ea <USBH_SetFeature>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bf76:	7bbb      	ldrb	r3, [r7, #14]
 800bf78:	b2db      	uxtb	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d103      	bne.n	800bf86 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	220a      	movs	r2, #10
 800bf82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bf84:	e0bd      	b.n	800c102 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800bf86:	7bbb      	ldrb	r3, [r7, #14]
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	f040 80b9 	bne.w	800c102 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	220a      	movs	r2, #10
 800bf94:	701a      	strb	r2, [r3, #0]
      break;
 800bf96:	e0b4      	b.n	800c102 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	220a      	movs	r2, #10
 800bf9c:	701a      	strb	r2, [r3, #0]
      break;
 800bf9e:	e0b0      	b.n	800c102 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 80ad 	beq.w	800c106 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	73fb      	strb	r3, [r7, #15]
 800bfb8:	e016      	b.n	800bfe8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bfba:	7bfa      	ldrb	r2, [r7, #15]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	32de      	adds	r2, #222	; 0xde
 800bfc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc4:	791a      	ldrb	r2, [r3, #4]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d108      	bne.n	800bfe2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bfd0:	7bfa      	ldrb	r2, [r7, #15]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	32de      	adds	r2, #222	; 0xde
 800bfd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bfe0:	e005      	b.n	800bfee <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	73fb      	strb	r3, [r7, #15]
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d0e5      	beq.n	800bfba <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d016      	beq.n	800c026 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	4798      	blx	r3
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d109      	bne.n	800c01e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2206      	movs	r2, #6
 800c00e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c016:	2103      	movs	r1, #3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c01c:	e073      	b.n	800c106 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	220d      	movs	r2, #13
 800c022:	701a      	strb	r2, [r3, #0]
      break;
 800c024:	e06f      	b.n	800c106 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	220d      	movs	r2, #13
 800c02a:	701a      	strb	r2, [r3, #0]
      break;
 800c02c:	e06b      	b.n	800c106 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d017      	beq.n	800c068 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	4798      	blx	r3
 800c044:	4603      	mov	r3, r0
 800c046:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d103      	bne.n	800c058 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	220b      	movs	r2, #11
 800c054:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c056:	e058      	b.n	800c10a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d154      	bne.n	800c10a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	220d      	movs	r2, #13
 800c064:	701a      	strb	r2, [r3, #0]
      break;
 800c066:	e050      	b.n	800c10a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	220d      	movs	r2, #13
 800c06c:	701a      	strb	r2, [r3, #0]
      break;
 800c06e:	e04c      	b.n	800c10a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c076:	2b00      	cmp	r3, #0
 800c078:	d049      	beq.n	800c10e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	4798      	blx	r3
      }
      break;
 800c086:	e042      	b.n	800c10e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff fd67 	bl	800bb64 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d009      	beq.n	800c0b4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d005      	beq.n	800c0ca <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c0c4:	2105      	movs	r1, #5
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d107      	bne.n	800c0e6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f7ff fe20 	bl	800bd24 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0e4:	e014      	b.n	800c110 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 fb06 	bl	800d6f8 <USBH_LL_Start>
      break;
 800c0ec:	e010      	b.n	800c110 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800c0ee:	bf00      	nop
 800c0f0:	e00e      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c0f2:	bf00      	nop
 800c0f4:	e00c      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c0f6:	bf00      	nop
 800c0f8:	e00a      	b.n	800c110 <USBH_Process+0x3cc>
    break;
 800c0fa:	bf00      	nop
 800c0fc:	e008      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c0fe:	bf00      	nop
 800c100:	e006      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c102:	bf00      	nop
 800c104:	e004      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c106:	bf00      	nop
 800c108:	e002      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c10a:	bf00      	nop
 800c10c:	e000      	b.n	800c110 <USBH_Process+0x3cc>
      break;
 800c10e:	bf00      	nop
  }
  return USBH_OK;
 800c110:	2300      	movs	r3, #0
}
 800c112:	4618      	mov	r0, r3
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop

0800c11c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af04      	add	r7, sp, #16
 800c122:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c124:	2301      	movs	r3, #1
 800c126:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c128:	2301      	movs	r3, #1
 800c12a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	785b      	ldrb	r3, [r3, #1]
 800c130:	2b07      	cmp	r3, #7
 800c132:	f200 81c1 	bhi.w	800c4b8 <USBH_HandleEnum+0x39c>
 800c136:	a201      	add	r2, pc, #4	; (adr r2, 800c13c <USBH_HandleEnum+0x20>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c15d 	.word	0x0800c15d
 800c140:	0800c21b 	.word	0x0800c21b
 800c144:	0800c285 	.word	0x0800c285
 800c148:	0800c313 	.word	0x0800c313
 800c14c:	0800c37d 	.word	0x0800c37d
 800c150:	0800c3ed 	.word	0x0800c3ed
 800c154:	0800c433 	.word	0x0800c433
 800c158:	0800c479 	.word	0x0800c479
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c15c:	2108      	movs	r1, #8
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fa50 	bl	800c604 <USBH_Get_DevDesc>
 800c164:	4603      	mov	r3, r0
 800c166:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d130      	bne.n	800c1d0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7919      	ldrb	r1, [r3, #4]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c18e:	687a      	ldr	r2, [r7, #4]
 800c190:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c192:	b292      	uxth	r2, r2
 800c194:	9202      	str	r2, [sp, #8]
 800c196:	2200      	movs	r2, #0
 800c198:	9201      	str	r2, [sp, #4]
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	4603      	mov	r3, r0
 800c19e:	2280      	movs	r2, #128	; 0x80
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f001 f865 	bl	800d270 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	7959      	ldrb	r1, [r3, #5]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c1ba:	b292      	uxth	r2, r2
 800c1bc:	9202      	str	r2, [sp, #8]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	9201      	str	r2, [sp, #4]
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f001 f851 	bl	800d270 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c1ce:	e175      	b.n	800c4bc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	f040 8172 	bne.w	800c4bc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1de:	3301      	adds	r3, #1
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	d903      	bls.n	800c1fa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	220d      	movs	r2, #13
 800c1f6:	701a      	strb	r2, [r3, #0]
      break;
 800c1f8:	e160      	b.n	800c4bc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	795b      	ldrb	r3, [r3, #5]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f001 f885 	bl	800d310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	791b      	ldrb	r3, [r3, #4]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f001 f87f 	bl	800d310 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
      break;
 800c218:	e150      	b.n	800c4bc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c21a:	2112      	movs	r1, #18
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f9f1 	bl	800c604 <USBH_Get_DevDesc>
 800c222:	4603      	mov	r3, r0
 800c224:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d103      	bne.n	800c234 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2202      	movs	r2, #2
 800c230:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c232:	e145      	b.n	800c4c0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	2b03      	cmp	r3, #3
 800c238:	f040 8142 	bne.w	800c4c0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c242:	3301      	adds	r3, #1
 800c244:	b2da      	uxtb	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c252:	2b03      	cmp	r3, #3
 800c254:	d903      	bls.n	800c25e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	220d      	movs	r2, #13
 800c25a:	701a      	strb	r2, [r3, #0]
      break;
 800c25c:	e130      	b.n	800c4c0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	795b      	ldrb	r3, [r3, #5]
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 f853 	bl	800d310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	791b      	ldrb	r3, [r3, #4]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f001 f84d 	bl	800d310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
      break;
 800c282:	e11d      	b.n	800c4c0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c284:	2101      	movs	r1, #1
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 fa68 	bl	800c75c <USBH_SetAddress>
 800c28c:	4603      	mov	r3, r0
 800c28e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d132      	bne.n	800c2fc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c296:	2002      	movs	r0, #2
 800c298:	f001 fbc2 	bl	800da20 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2203      	movs	r2, #3
 800c2a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	7919      	ldrb	r1, [r3, #4]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c2be:	b292      	uxth	r2, r2
 800c2c0:	9202      	str	r2, [sp, #8]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	9201      	str	r2, [sp, #4]
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2280      	movs	r2, #128	; 0x80
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 ffcf 	bl	800d270 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7959      	ldrb	r1, [r3, #5]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c2e6:	b292      	uxth	r2, r2
 800c2e8:	9202      	str	r2, [sp, #8]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	9201      	str	r2, [sp, #4]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 ffbb 	bl	800d270 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c2fa:	e0e3      	b.n	800c4c4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	f040 80e0 	bne.w	800c4c4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	220d      	movs	r2, #13
 800c308:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2200      	movs	r2, #0
 800c30e:	705a      	strb	r2, [r3, #1]
      break;
 800c310:	e0d8      	b.n	800c4c4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c312:	2109      	movs	r1, #9
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 f99d 	bl	800c654 <USBH_Get_CfgDesc>
 800c31a:	4603      	mov	r3, r0
 800c31c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d103      	bne.n	800c32c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2204      	movs	r2, #4
 800c328:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c32a:	e0cd      	b.n	800c4c8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	2b03      	cmp	r3, #3
 800c330:	f040 80ca 	bne.w	800c4c8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c33a:	3301      	adds	r3, #1
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c34a:	2b03      	cmp	r3, #3
 800c34c:	d903      	bls.n	800c356 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	220d      	movs	r2, #13
 800c352:	701a      	strb	r2, [r3, #0]
      break;
 800c354:	e0b8      	b.n	800c4c8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	795b      	ldrb	r3, [r3, #5]
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 ffd7 	bl	800d310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	791b      	ldrb	r3, [r3, #4]
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 ffd1 	bl	800d310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	701a      	strb	r2, [r3, #0]
      break;
 800c37a:	e0a5      	b.n	800c4c8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f965 	bl	800c654 <USBH_Get_CfgDesc>
 800c38a:	4603      	mov	r3, r0
 800c38c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d103      	bne.n	800c39c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2205      	movs	r2, #5
 800c398:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c39a:	e097      	b.n	800c4cc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	f040 8094 	bne.w	800c4cc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	b2da      	uxtb	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d903      	bls.n	800c3c6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	220d      	movs	r2, #13
 800c3c2:	701a      	strb	r2, [r3, #0]
      break;
 800c3c4:	e082      	b.n	800c4cc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	795b      	ldrb	r3, [r3, #5]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 ff9f 	bl	800d310 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	791b      	ldrb	r3, [r3, #4]
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f000 ff99 	bl	800d310 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	701a      	strb	r2, [r3, #0]
      break;
 800c3ea:	e06f      	b.n	800c4cc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d019      	beq.n	800c42a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c402:	23ff      	movs	r3, #255	; 0xff
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f949 	bl	800c69c <USBH_Get_StringDesc>
 800c40a:	4603      	mov	r3, r0
 800c40c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d103      	bne.n	800c41c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2206      	movs	r2, #6
 800c418:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c41a:	e059      	b.n	800c4d0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c41c:	7bbb      	ldrb	r3, [r7, #14]
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d156      	bne.n	800c4d0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2206      	movs	r2, #6
 800c426:	705a      	strb	r2, [r3, #1]
      break;
 800c428:	e052      	b.n	800c4d0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2206      	movs	r2, #6
 800c42e:	705a      	strb	r2, [r3, #1]
      break;
 800c430:	e04e      	b.n	800c4d0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d019      	beq.n	800c470 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c448:	23ff      	movs	r3, #255	; 0xff
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f926 	bl	800c69c <USBH_Get_StringDesc>
 800c450:	4603      	mov	r3, r0
 800c452:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d103      	bne.n	800c462 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2207      	movs	r2, #7
 800c45e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c460:	e038      	b.n	800c4d4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c462:	7bbb      	ldrb	r3, [r7, #14]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d135      	bne.n	800c4d4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2207      	movs	r2, #7
 800c46c:	705a      	strb	r2, [r3, #1]
      break;
 800c46e:	e031      	b.n	800c4d4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2207      	movs	r2, #7
 800c474:	705a      	strb	r2, [r3, #1]
      break;
 800c476:	e02d      	b.n	800c4d4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d017      	beq.n	800c4b2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c48e:	23ff      	movs	r3, #255	; 0xff
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f903 	bl	800c69c <USBH_Get_StringDesc>
 800c496:	4603      	mov	r3, r0
 800c498:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c4a4:	e018      	b.n	800c4d8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d115      	bne.n	800c4d8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b0:	e012      	b.n	800c4d8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4b6:	e00f      	b.n	800c4d8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800c4b8:	bf00      	nop
 800c4ba:	e00e      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4bc:	bf00      	nop
 800c4be:	e00c      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4c0:	bf00      	nop
 800c4c2:	e00a      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4c4:	bf00      	nop
 800c4c6:	e008      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4c8:	bf00      	nop
 800c4ca:	e006      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4cc:	bf00      	nop
 800c4ce:	e004      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4d0:	bf00      	nop
 800c4d2:	e002      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4d4:	bf00      	nop
 800c4d6:	e000      	b.n	800c4da <USBH_HandleEnum+0x3be>
      break;
 800c4d8:	bf00      	nop
  }
  return Status;
 800c4da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3710      	adds	r7, #16
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c510:	1c5a      	adds	r2, r3, #1
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f804 	bl	800c526 <USBH_HandleSof>
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b0b      	cmp	r3, #11
 800c536:	d10a      	bne.n	800c54e <USBH_HandleSof+0x28>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d005      	beq.n	800c54e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4798      	blx	r3
  }
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}

0800c556 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c556:	b480      	push	{r7}
 800c558:	b083      	sub	sp, #12
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c566:	bf00      	nop
}
 800c568:	370c      	adds	r7, #12
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2200      	movs	r2, #0
 800c57e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c582:	bf00      	nop
}
 800c584:	370c      	adds	r7, #12
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f001 f8a6 	bl	800d72e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	791b      	ldrb	r3, [r3, #4]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fe91 	bl	800d310 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	795b      	ldrb	r3, [r3, #5]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fe8b 	bl	800d310 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af02      	add	r7, sp, #8
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c616:	78fb      	ldrb	r3, [r7, #3]
 800c618:	b29b      	uxth	r3, r3
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	4613      	mov	r3, r2
 800c61e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c622:	2100      	movs	r1, #0
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 f864 	bl	800c6f2 <USBH_GetDescriptor>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c640:	78fa      	ldrb	r2, [r7, #3]
 800c642:	b292      	uxth	r2, r2
 800c644:	4619      	mov	r1, r3
 800c646:	f000 f918 	bl	800c87a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c654:	b580      	push	{r7, lr}
 800c656:	b086      	sub	sp, #24
 800c658:	af02      	add	r7, sp, #8
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	331c      	adds	r3, #28
 800c664:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c666:	887b      	ldrh	r3, [r7, #2]
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c670:	2100      	movs	r1, #0
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f83d 	bl	800c6f2 <USBH_GetDescriptor>
 800c678:	4603      	mov	r3, r0
 800c67a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d107      	bne.n	800c692 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c682:	887b      	ldrh	r3, [r7, #2]
 800c684:	461a      	mov	r2, r3
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f987 	bl	800c99c <USBH_ParseCfgDesc>
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b088      	sub	sp, #32
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	607a      	str	r2, [r7, #4]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	72fb      	strb	r3, [r7, #11]
 800c6ac:	4613      	mov	r3, r2
 800c6ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c6b0:	7afb      	ldrb	r3, [r7, #11]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c6b8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c6c0:	893b      	ldrh	r3, [r7, #8]
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f000 f812 	bl	800c6f2 <USBH_GetDescriptor>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d107      	bne.n	800c6e8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c6de:	893a      	ldrh	r2, [r7, #8]
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 fb24 	bl	800cd30 <USBH_ParseStringDesc>
  }

  return status;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	60f8      	str	r0, [r7, #12]
 800c6fa:	607b      	str	r3, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	72fb      	strb	r3, [r7, #11]
 800c700:	4613      	mov	r3, r2
 800c702:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	789b      	ldrb	r3, [r3, #2]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d11c      	bne.n	800c746 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c70c:	7afb      	ldrb	r3, [r7, #11]
 800c70e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c712:	b2da      	uxtb	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2206      	movs	r2, #6
 800c71c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	893a      	ldrh	r2, [r7, #8]
 800c722:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c724:	893b      	ldrh	r3, [r7, #8]
 800c726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c72a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c72e:	d104      	bne.n	800c73a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f240 4209 	movw	r2, #1033	; 0x409
 800c736:	829a      	strh	r2, [r3, #20]
 800c738:	e002      	b.n	800c740 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	8b3a      	ldrh	r2, [r7, #24]
 800c744:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c746:	8b3b      	ldrh	r3, [r7, #24]
 800c748:	461a      	mov	r2, r3
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	68f8      	ldr	r0, [r7, #12]
 800c74e:	f000 fb3d 	bl	800cdcc <USBH_CtlReq>
 800c752:	4603      	mov	r3, r0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	789b      	ldrb	r3, [r3, #2]
 800c76c:	2b01      	cmp	r3, #1
 800c76e:	d10f      	bne.n	800c790 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2205      	movs	r2, #5
 800c77a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c77c:	78fb      	ldrb	r3, [r7, #3]
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c790:	2200      	movs	r2, #0
 800c792:	2100      	movs	r1, #0
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fb19 	bl	800cdcc <USBH_CtlReq>
 800c79a:	4603      	mov	r3, r0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	789b      	ldrb	r3, [r3, #2]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d10e      	bne.n	800c7d6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2209      	movs	r2, #9
 800c7c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	887a      	ldrh	r2, [r7, #2]
 800c7c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	2100      	movs	r1, #0
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 faf6 	bl	800cdcc <USBH_CtlReq>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b082      	sub	sp, #8
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	789b      	ldrb	r3, [r3, #2]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d10f      	bne.n	800c81e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2203      	movs	r2, #3
 800c808:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2200      	movs	r2, #0
 800c81c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c81e:	2200      	movs	r2, #0
 800c820:	2100      	movs	r1, #0
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fad2 	bl	800cdcc <USBH_CtlReq>
 800c828:	4603      	mov	r3, r0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b082      	sub	sp, #8
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
 800c83a:	460b      	mov	r3, r1
 800c83c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	789b      	ldrb	r3, [r3, #2]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d10f      	bne.n	800c866 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2202      	movs	r2, #2
 800c84a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c866:	2200      	movs	r2, #0
 800c868:	2100      	movs	r1, #0
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 faae 	bl	800cdcc <USBH_CtlReq>
 800c870:	4603      	mov	r3, r0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c87a:	b480      	push	{r7}
 800c87c:	b085      	sub	sp, #20
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	4613      	mov	r3, r2
 800c886:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	781a      	ldrb	r2, [r3, #0]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	785a      	ldrb	r2, [r3, #1]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	3302      	adds	r3, #2
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	3303      	adds	r3, #3
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	021b      	lsls	r3, r3, #8
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	791a      	ldrb	r2, [r3, #4]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	795a      	ldrb	r2, [r3, #5]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	799a      	ldrb	r2, [r3, #6]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	79da      	ldrb	r2, [r3, #7]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	79db      	ldrb	r3, [r3, #7]
 800c8d8:	2b20      	cmp	r3, #32
 800c8da:	dc11      	bgt.n	800c900 <USBH_ParseDevDesc+0x86>
 800c8dc:	2b08      	cmp	r3, #8
 800c8de:	db16      	blt.n	800c90e <USBH_ParseDevDesc+0x94>
 800c8e0:	3b08      	subs	r3, #8
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c8ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	bf14      	ite	ne
 800c8f4:	2301      	movne	r3, #1
 800c8f6:	2300      	moveq	r3, #0
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d102      	bne.n	800c904 <USBH_ParseDevDesc+0x8a>
 800c8fe:	e006      	b.n	800c90e <USBH_ParseDevDesc+0x94>
 800c900:	2b40      	cmp	r3, #64	; 0x40
 800c902:	d104      	bne.n	800c90e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	79da      	ldrb	r2, [r3, #7]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	71da      	strb	r2, [r3, #7]
      break;
 800c90c:	e003      	b.n	800c916 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2240      	movs	r2, #64	; 0x40
 800c912:	71da      	strb	r2, [r3, #7]
      break;
 800c914:	bf00      	nop
  }

  if (length > 8U)
 800c916:	88fb      	ldrh	r3, [r7, #6]
 800c918:	2b08      	cmp	r3, #8
 800c91a:	d939      	bls.n	800c990 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	3308      	adds	r3, #8
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	b29a      	uxth	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	3309      	adds	r3, #9
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	021b      	lsls	r3, r3, #8
 800c92e:	b29b      	uxth	r3, r3
 800c930:	4313      	orrs	r3, r2
 800c932:	b29a      	uxth	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	330a      	adds	r3, #10
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b29a      	uxth	r2, r3
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	330b      	adds	r3, #11
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	b29b      	uxth	r3, r3
 800c948:	021b      	lsls	r3, r3, #8
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	4313      	orrs	r3, r2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	330c      	adds	r3, #12
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	330d      	adds	r3, #13
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b29b      	uxth	r3, r3
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	b29b      	uxth	r3, r3
 800c968:	4313      	orrs	r3, r2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	7b9a      	ldrb	r2, [r3, #14]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	7bda      	ldrb	r2, [r3, #15]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	7c1a      	ldrb	r2, [r3, #16]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	7c5a      	ldrb	r2, [r3, #17]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	745a      	strb	r2, [r3, #17]
  }
}
 800c990:	bf00      	nop
 800c992:	3714      	adds	r7, #20
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08c      	sub	sp, #48	; 0x30
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c9b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	781a      	ldrb	r2, [r3, #0]
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	785a      	ldrb	r2, [r3, #1]
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	3302      	adds	r3, #2
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	3303      	adds	r3, #3
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	021b      	lsls	r3, r3, #8
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f8:	bf28      	it	cs
 800c9fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	791a      	ldrb	r2, [r3, #4]
 800ca08:	6a3b      	ldr	r3, [r7, #32]
 800ca0a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	795a      	ldrb	r2, [r3, #5]
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	799a      	ldrb	r2, [r3, #6]
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	79da      	ldrb	r2, [r3, #7]
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	7a1a      	ldrb	r2, [r3, #8]
 800ca28:	6a3b      	ldr	r3, [r7, #32]
 800ca2a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d002      	beq.n	800ca3a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	2209      	movs	r2, #9
 800ca38:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ca3a:	88fb      	ldrh	r3, [r7, #6]
 800ca3c:	2b09      	cmp	r3, #9
 800ca3e:	f240 809d 	bls.w	800cb7c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ca42:	2309      	movs	r3, #9
 800ca44:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ca4a:	e081      	b.n	800cb50 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca4c:	f107 0316 	add.w	r3, r7, #22
 800ca50:	4619      	mov	r1, r3
 800ca52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca54:	f000 f99f 	bl	800cd96 <USBH_GetNextDesc>
 800ca58:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	2b04      	cmp	r3, #4
 800ca60:	d176      	bne.n	800cb50 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b09      	cmp	r3, #9
 800ca68:	d002      	beq.n	800ca70 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ca6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6c:	2209      	movs	r2, #9
 800ca6e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ca70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca74:	221a      	movs	r2, #26
 800ca76:	fb02 f303 	mul.w	r3, r2, r3
 800ca7a:	3308      	adds	r3, #8
 800ca7c:	6a3a      	ldr	r2, [r7, #32]
 800ca7e:	4413      	add	r3, r2
 800ca80:	3302      	adds	r3, #2
 800ca82:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ca84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca86:	69f8      	ldr	r0, [r7, #28]
 800ca88:	f000 f87e 	bl	800cb88 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ca92:	2300      	movs	r3, #0
 800ca94:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ca96:	e043      	b.n	800cb20 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ca98:	f107 0316 	add.w	r3, r7, #22
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caa0:	f000 f979 	bl	800cd96 <USBH_GetNextDesc>
 800caa4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	785b      	ldrb	r3, [r3, #1]
 800caaa:	2b05      	cmp	r3, #5
 800caac:	d138      	bne.n	800cb20 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	795b      	ldrb	r3, [r3, #5]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d10f      	bne.n	800cad6 <USBH_ParseCfgDesc+0x13a>
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	799b      	ldrb	r3, [r3, #6]
 800caba:	2b02      	cmp	r3, #2
 800cabc:	d10b      	bne.n	800cad6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	79db      	ldrb	r3, [r3, #7]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10f      	bne.n	800cae6 <USBH_ParseCfgDesc+0x14a>
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b09      	cmp	r3, #9
 800cacc:	d00b      	beq.n	800cae6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	2209      	movs	r2, #9
 800cad2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cad4:	e007      	b.n	800cae6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800cad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	2b07      	cmp	r3, #7
 800cadc:	d004      	beq.n	800cae8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	2207      	movs	r2, #7
 800cae2:	701a      	strb	r2, [r3, #0]
 800cae4:	e000      	b.n	800cae8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800cae6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800cae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800caf0:	3201      	adds	r2, #1
 800caf2:	00d2      	lsls	r2, r2, #3
 800caf4:	211a      	movs	r1, #26
 800caf6:	fb01 f303 	mul.w	r3, r1, r3
 800cafa:	4413      	add	r3, r2
 800cafc:	3308      	adds	r3, #8
 800cafe:	6a3a      	ldr	r2, [r7, #32]
 800cb00:	4413      	add	r3, r2
 800cb02:	3304      	adds	r3, #4
 800cb04:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800cb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb08:	69b9      	ldr	r1, [r7, #24]
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f000 f86b 	bl	800cbe6 <USBH_ParseEPDesc>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800cb16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	791b      	ldrb	r3, [r3, #4]
 800cb24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d204      	bcs.n	800cb36 <USBH_ParseCfgDesc+0x19a>
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	885a      	ldrh	r2, [r3, #2]
 800cb30:	8afb      	ldrh	r3, [r7, #22]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d8b0      	bhi.n	800ca98 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	791b      	ldrb	r3, [r3, #4]
 800cb3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d201      	bcs.n	800cb46 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800cb42:	2303      	movs	r3, #3
 800cb44:	e01c      	b.n	800cb80 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800cb46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d805      	bhi.n	800cb64 <USBH_ParseCfgDesc+0x1c8>
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	885a      	ldrh	r2, [r3, #2]
 800cb5c:	8afb      	ldrh	r3, [r7, #22]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	f63f af74 	bhi.w	800ca4c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800cb64:	6a3b      	ldr	r3, [r7, #32]
 800cb66:	791b      	ldrb	r3, [r3, #4]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	bf28      	it	cs
 800cb6c:	2302      	movcs	r3, #2
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d201      	bcs.n	800cb7c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800cb78:	2303      	movs	r3, #3
 800cb7a:	e001      	b.n	800cb80 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800cb7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3730      	adds	r7, #48	; 0x30
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781a      	ldrb	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	785a      	ldrb	r2, [r3, #1]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	789a      	ldrb	r2, [r3, #2]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	78da      	ldrb	r2, [r3, #3]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	791a      	ldrb	r2, [r3, #4]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	795a      	ldrb	r2, [r3, #5]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	799a      	ldrb	r2, [r3, #6]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	79da      	ldrb	r2, [r3, #7]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	7a1a      	ldrb	r2, [r3, #8]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	721a      	strb	r2, [r3, #8]
}
 800cbda:	bf00      	nop
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800cbe6:	b480      	push	{r7}
 800cbe8:	b087      	sub	sp, #28
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	60f8      	str	r0, [r7, #12]
 800cbee:	60b9      	str	r1, [r7, #8]
 800cbf0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	781a      	ldrb	r2, [r3, #0]
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	785a      	ldrb	r2, [r3, #1]
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	789a      	ldrb	r2, [r3, #2]
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	78da      	ldrb	r2, [r3, #3]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	3304      	adds	r3, #4
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3305      	adds	r3, #5
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	b29a      	uxth	r2, r3
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	799a      	ldrb	r2, [r3, #6]
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	889b      	ldrh	r3, [r3, #4]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800cc42:	2303      	movs	r3, #3
 800cc44:	75fb      	strb	r3, [r7, #23]
 800cc46:	e033      	b.n	800ccb0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	889b      	ldrh	r3, [r3, #4]
 800cc4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800cc50:	f023 0307 	bic.w	r3, r3, #7
 800cc54:	b29a      	uxth	r2, r3
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	889b      	ldrh	r3, [r3, #4]
 800cc5e:	b21a      	sxth	r2, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3304      	adds	r3, #4
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	b299      	uxth	r1, r3
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	3305      	adds	r3, #5
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	021b      	lsls	r3, r3, #8
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	430b      	orrs	r3, r1
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d110      	bne.n	800cca2 <USBH_ParseEPDesc+0xbc>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3304      	adds	r3, #4
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	b299      	uxth	r1, r3
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3305      	adds	r3, #5
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	021b      	lsls	r3, r3, #8
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	430b      	orrs	r3, r1
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	b21b      	sxth	r3, r3
 800cc9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cc9e:	b21b      	sxth	r3, r3
 800cca0:	e001      	b.n	800cca6 <USBH_ParseEPDesc+0xc0>
 800cca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cca6:	4313      	orrs	r3, r2
 800cca8:	b21b      	sxth	r3, r3
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d116      	bne.n	800cce8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	78db      	ldrb	r3, [r3, #3]
 800ccbe:	f003 0303 	and.w	r3, r3, #3
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d005      	beq.n	800ccd2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	78db      	ldrb	r3, [r3, #3]
 800ccca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ccce:	2b03      	cmp	r3, #3
 800ccd0:	d127      	bne.n	800cd22 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	799b      	ldrb	r3, [r3, #6]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <USBH_ParseEPDesc+0xfc>
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	799b      	ldrb	r3, [r3, #6]
 800ccde:	2b10      	cmp	r3, #16
 800cce0:	d91f      	bls.n	800cd22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cce2:	2303      	movs	r3, #3
 800cce4:	75fb      	strb	r3, [r7, #23]
 800cce6:	e01c      	b.n	800cd22 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	78db      	ldrb	r3, [r3, #3]
 800ccec:	f003 0303 	and.w	r3, r3, #3
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d10a      	bne.n	800cd0a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	799b      	ldrb	r3, [r3, #6]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <USBH_ParseEPDesc+0x11e>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	799b      	ldrb	r3, [r3, #6]
 800cd00:	2b10      	cmp	r3, #16
 800cd02:	d90e      	bls.n	800cd22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd04:	2303      	movs	r3, #3
 800cd06:	75fb      	strb	r3, [r7, #23]
 800cd08:	e00b      	b.n	800cd22 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	78db      	ldrb	r3, [r3, #3]
 800cd0e:	f003 0303 	and.w	r3, r3, #3
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d105      	bne.n	800cd22 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	799b      	ldrb	r3, [r3, #6]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	371c      	adds	r7, #28
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3301      	adds	r3, #1
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d120      	bne.n	800cd8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	1e9a      	subs	r2, r3, #2
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	4293      	cmp	r3, r2
 800cd52:	bf28      	it	cs
 800cd54:	4613      	movcs	r3, r2
 800cd56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	3302      	adds	r3, #2
 800cd5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cd5e:	2300      	movs	r3, #0
 800cd60:	82fb      	strh	r3, [r7, #22]
 800cd62:	e00b      	b.n	800cd7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cd64:	8afb      	ldrh	r3, [r7, #22]
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	4413      	add	r3, r2
 800cd6a:	781a      	ldrb	r2, [r3, #0]
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	3301      	adds	r3, #1
 800cd74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cd76:	8afb      	ldrh	r3, [r7, #22]
 800cd78:	3302      	adds	r3, #2
 800cd7a:	82fb      	strh	r3, [r7, #22]
 800cd7c:	8afa      	ldrh	r2, [r7, #22]
 800cd7e:	8abb      	ldrh	r3, [r7, #20]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d3ef      	bcc.n	800cd64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2200      	movs	r2, #0
 800cd88:	701a      	strb	r2, [r3, #0]
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b085      	sub	sp, #20
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	881a      	ldrh	r2, [r3, #0]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	4413      	add	r3, r2
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4413      	add	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cdda:	2301      	movs	r3, #1
 800cddc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	789b      	ldrb	r3, [r3, #2]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d002      	beq.n	800cdec <USBH_CtlReq+0x20>
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d00f      	beq.n	800ce0a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cdea:	e027      	b.n	800ce3c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68ba      	ldr	r2, [r7, #8]
 800cdf0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	88fa      	ldrh	r2, [r7, #6]
 800cdf6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2202      	movs	r2, #2
 800ce02:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ce04:	2301      	movs	r3, #1
 800ce06:	75fb      	strb	r3, [r7, #23]
      break;
 800ce08:	e018      	b.n	800ce3c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f000 f81c 	bl	800ce48 <USBH_HandleControl>
 800ce10:	4603      	mov	r3, r0
 800ce12:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <USBH_CtlReq+0x54>
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	d106      	bne.n	800ce2e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2201      	movs	r2, #1
 800ce24:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	761a      	strb	r2, [r3, #24]
      break;
 800ce2c:	e005      	b.n	800ce3a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d102      	bne.n	800ce3a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2201      	movs	r2, #1
 800ce38:	709a      	strb	r2, [r3, #2]
      break;
 800ce3a:	bf00      	nop
  }
  return status;
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3718      	adds	r7, #24
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
	...

0800ce48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	7e1b      	ldrb	r3, [r3, #24]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	2b0a      	cmp	r3, #10
 800ce60:	f200 8156 	bhi.w	800d110 <USBH_HandleControl+0x2c8>
 800ce64:	a201      	add	r2, pc, #4	; (adr r2, 800ce6c <USBH_HandleControl+0x24>)
 800ce66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce6a:	bf00      	nop
 800ce6c:	0800ce99 	.word	0x0800ce99
 800ce70:	0800ceb3 	.word	0x0800ceb3
 800ce74:	0800cf1d 	.word	0x0800cf1d
 800ce78:	0800cf43 	.word	0x0800cf43
 800ce7c:	0800cf7b 	.word	0x0800cf7b
 800ce80:	0800cfa5 	.word	0x0800cfa5
 800ce84:	0800cff7 	.word	0x0800cff7
 800ce88:	0800d019 	.word	0x0800d019
 800ce8c:	0800d055 	.word	0x0800d055
 800ce90:	0800d07b 	.word	0x0800d07b
 800ce94:	0800d0b9 	.word	0x0800d0b9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f103 0110 	add.w	r1, r3, #16
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	795b      	ldrb	r3, [r3, #5]
 800cea2:	461a      	mov	r2, r3
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f000 f943 	bl	800d130 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2202      	movs	r2, #2
 800ceae:	761a      	strb	r2, [r3, #24]
      break;
 800ceb0:	e139      	b.n	800d126 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	795b      	ldrb	r3, [r3, #5]
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fd27 	bl	800d90c <USBH_LL_GetURBState>
 800cebe:	4603      	mov	r3, r0
 800cec0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d11e      	bne.n	800cf06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	7c1b      	ldrb	r3, [r3, #16]
 800cecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ced0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	8adb      	ldrh	r3, [r3, #22]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00a      	beq.n	800cef0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ceda:	7b7b      	ldrb	r3, [r7, #13]
 800cedc:	2b80      	cmp	r3, #128	; 0x80
 800cede:	d103      	bne.n	800cee8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2203      	movs	r2, #3
 800cee4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cee6:	e115      	b.n	800d114 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2205      	movs	r2, #5
 800ceec:	761a      	strb	r2, [r3, #24]
      break;
 800ceee:	e111      	b.n	800d114 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800cef0:	7b7b      	ldrb	r3, [r7, #13]
 800cef2:	2b80      	cmp	r3, #128	; 0x80
 800cef4:	d103      	bne.n	800cefe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2209      	movs	r2, #9
 800cefa:	761a      	strb	r2, [r3, #24]
      break;
 800cefc:	e10a      	b.n	800d114 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2207      	movs	r2, #7
 800cf02:	761a      	strb	r2, [r3, #24]
      break;
 800cf04:	e106      	b.n	800d114 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cf06:	7bbb      	ldrb	r3, [r7, #14]
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d003      	beq.n	800cf14 <USBH_HandleControl+0xcc>
 800cf0c:	7bbb      	ldrb	r3, [r7, #14]
 800cf0e:	2b02      	cmp	r3, #2
 800cf10:	f040 8100 	bne.w	800d114 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	220b      	movs	r2, #11
 800cf18:	761a      	strb	r2, [r3, #24]
      break;
 800cf1a:	e0fb      	b.n	800d114 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6899      	ldr	r1, [r3, #8]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	899a      	ldrh	r2, [r3, #12]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	791b      	ldrb	r3, [r3, #4]
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f93a 	bl	800d1ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2204      	movs	r2, #4
 800cf3e:	761a      	strb	r2, [r3, #24]
      break;
 800cf40:	e0f1      	b.n	800d126 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	791b      	ldrb	r3, [r3, #4]
 800cf46:	4619      	mov	r1, r3
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fcdf 	bl	800d90c <USBH_LL_GetURBState>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cf52:	7bbb      	ldrb	r3, [r7, #14]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d102      	bne.n	800cf5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2209      	movs	r2, #9
 800cf5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cf5e:	7bbb      	ldrb	r3, [r7, #14]
 800cf60:	2b05      	cmp	r3, #5
 800cf62:	d102      	bne.n	800cf6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cf64:	2303      	movs	r3, #3
 800cf66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cf68:	e0d6      	b.n	800d118 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cf6a:	7bbb      	ldrb	r3, [r7, #14]
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	f040 80d3 	bne.w	800d118 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	220b      	movs	r2, #11
 800cf76:	761a      	strb	r2, [r3, #24]
      break;
 800cf78:	e0ce      	b.n	800d118 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6899      	ldr	r1, [r3, #8]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	899a      	ldrh	r2, [r3, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	795b      	ldrb	r3, [r3, #5]
 800cf86:	2001      	movs	r0, #1
 800cf88:	9000      	str	r0, [sp, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f000 f8ea 	bl	800d164 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cf96:	b29a      	uxth	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2206      	movs	r2, #6
 800cfa0:	761a      	strb	r2, [r3, #24]
      break;
 800cfa2:	e0c0      	b.n	800d126 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	795b      	ldrb	r3, [r3, #5]
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f000 fcae 	bl	800d90c <USBH_LL_GetURBState>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cfb4:	7bbb      	ldrb	r3, [r7, #14]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d103      	bne.n	800cfc2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2207      	movs	r2, #7
 800cfbe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cfc0:	e0ac      	b.n	800d11c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cfc2:	7bbb      	ldrb	r3, [r7, #14]
 800cfc4:	2b05      	cmp	r3, #5
 800cfc6:	d105      	bne.n	800cfd4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	220c      	movs	r2, #12
 800cfcc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cfce:	2303      	movs	r3, #3
 800cfd0:	73fb      	strb	r3, [r7, #15]
      break;
 800cfd2:	e0a3      	b.n	800d11c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cfd4:	7bbb      	ldrb	r3, [r7, #14]
 800cfd6:	2b02      	cmp	r3, #2
 800cfd8:	d103      	bne.n	800cfe2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2205      	movs	r2, #5
 800cfde:	761a      	strb	r2, [r3, #24]
      break;
 800cfe0:	e09c      	b.n	800d11c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cfe2:	7bbb      	ldrb	r3, [r7, #14]
 800cfe4:	2b04      	cmp	r3, #4
 800cfe6:	f040 8099 	bne.w	800d11c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	220b      	movs	r2, #11
 800cfee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cff0:	2302      	movs	r3, #2
 800cff2:	73fb      	strb	r3, [r7, #15]
      break;
 800cff4:	e092      	b.n	800d11c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	791b      	ldrb	r3, [r3, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f8d5 	bl	800d1ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2208      	movs	r2, #8
 800d014:	761a      	strb	r2, [r3, #24]

      break;
 800d016:	e086      	b.n	800d126 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	791b      	ldrb	r3, [r3, #4]
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fc74 	bl	800d90c <USBH_LL_GetURBState>
 800d024:	4603      	mov	r3, r0
 800d026:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d028:	7bbb      	ldrb	r3, [r7, #14]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d105      	bne.n	800d03a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	220d      	movs	r2, #13
 800d032:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d038:	e072      	b.n	800d120 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
 800d03c:	2b04      	cmp	r3, #4
 800d03e:	d103      	bne.n	800d048 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	220b      	movs	r2, #11
 800d044:	761a      	strb	r2, [r3, #24]
      break;
 800d046:	e06b      	b.n	800d120 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	2b05      	cmp	r3, #5
 800d04c:	d168      	bne.n	800d120 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d04e:	2303      	movs	r3, #3
 800d050:	73fb      	strb	r3, [r7, #15]
      break;
 800d052:	e065      	b.n	800d120 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	795b      	ldrb	r3, [r3, #5]
 800d058:	2201      	movs	r2, #1
 800d05a:	9200      	str	r2, [sp, #0]
 800d05c:	2200      	movs	r2, #0
 800d05e:	2100      	movs	r1, #0
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f87f 	bl	800d164 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	220a      	movs	r2, #10
 800d076:	761a      	strb	r2, [r3, #24]
      break;
 800d078:	e055      	b.n	800d126 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	795b      	ldrb	r3, [r3, #5]
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fc43 	bl	800d90c <USBH_LL_GetURBState>
 800d086:	4603      	mov	r3, r0
 800d088:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d08a:	7bbb      	ldrb	r3, [r7, #14]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d105      	bne.n	800d09c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	220d      	movs	r2, #13
 800d098:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d09a:	e043      	b.n	800d124 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d09c:	7bbb      	ldrb	r3, [r7, #14]
 800d09e:	2b02      	cmp	r3, #2
 800d0a0:	d103      	bne.n	800d0aa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2209      	movs	r2, #9
 800d0a6:	761a      	strb	r2, [r3, #24]
      break;
 800d0a8:	e03c      	b.n	800d124 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	d139      	bne.n	800d124 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	220b      	movs	r2, #11
 800d0b4:	761a      	strb	r2, [r3, #24]
      break;
 800d0b6:	e035      	b.n	800d124 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	7e5b      	ldrb	r3, [r3, #25]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	765a      	strb	r2, [r3, #25]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	7e5b      	ldrb	r3, [r3, #25]
 800d0c8:	2b02      	cmp	r3, #2
 800d0ca:	d806      	bhi.n	800d0da <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2201      	movs	r2, #1
 800d0d6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d0d8:	e025      	b.n	800d126 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0e0:	2106      	movs	r1, #6
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	795b      	ldrb	r3, [r3, #5]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f90c 	bl	800d310 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	791b      	ldrb	r3, [r3, #4]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 f906 	bl	800d310 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d10a:	2302      	movs	r3, #2
 800d10c:	73fb      	strb	r3, [r7, #15]
      break;
 800d10e:	e00a      	b.n	800d126 <USBH_HandleControl+0x2de>

    default:
      break;
 800d110:	bf00      	nop
 800d112:	e008      	b.n	800d126 <USBH_HandleControl+0x2de>
      break;
 800d114:	bf00      	nop
 800d116:	e006      	b.n	800d126 <USBH_HandleControl+0x2de>
      break;
 800d118:	bf00      	nop
 800d11a:	e004      	b.n	800d126 <USBH_HandleControl+0x2de>
      break;
 800d11c:	bf00      	nop
 800d11e:	e002      	b.n	800d126 <USBH_HandleControl+0x2de>
      break;
 800d120:	bf00      	nop
 800d122:	e000      	b.n	800d126 <USBH_HandleControl+0x2de>
      break;
 800d124:	bf00      	nop
  }

  return status;
 800d126:	7bfb      	ldrb	r3, [r7, #15]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3710      	adds	r7, #16
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af04      	add	r7, sp, #16
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d13e:	79f9      	ldrb	r1, [r7, #7]
 800d140:	2300      	movs	r3, #0
 800d142:	9303      	str	r3, [sp, #12]
 800d144:	2308      	movs	r3, #8
 800d146:	9302      	str	r3, [sp, #8]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	9301      	str	r3, [sp, #4]
 800d14c:	2300      	movs	r3, #0
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	2300      	movs	r3, #0
 800d152:	2200      	movs	r2, #0
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f000 fba8 	bl	800d8aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d15a:	2300      	movs	r3, #0
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3710      	adds	r7, #16
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af04      	add	r7, sp, #16
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4611      	mov	r1, r2
 800d170:	461a      	mov	r2, r3
 800d172:	460b      	mov	r3, r1
 800d174:	80fb      	strh	r3, [r7, #6]
 800d176:	4613      	mov	r3, r2
 800d178:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d180:	2b00      	cmp	r3, #0
 800d182:	d001      	beq.n	800d188 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d188:	7979      	ldrb	r1, [r7, #5]
 800d18a:	7e3b      	ldrb	r3, [r7, #24]
 800d18c:	9303      	str	r3, [sp, #12]
 800d18e:	88fb      	ldrh	r3, [r7, #6]
 800d190:	9302      	str	r3, [sp, #8]
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	2301      	movs	r3, #1
 800d198:	9300      	str	r3, [sp, #0]
 800d19a:	2300      	movs	r3, #0
 800d19c:	2200      	movs	r2, #0
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f000 fb83 	bl	800d8aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b088      	sub	sp, #32
 800d1b2:	af04      	add	r7, sp, #16
 800d1b4:	60f8      	str	r0, [r7, #12]
 800d1b6:	60b9      	str	r1, [r7, #8]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	460b      	mov	r3, r1
 800d1be:	80fb      	strh	r3, [r7, #6]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d1c4:	7979      	ldrb	r1, [r7, #5]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9303      	str	r3, [sp, #12]
 800d1ca:	88fb      	ldrh	r3, [r7, #6]
 800d1cc:	9302      	str	r3, [sp, #8]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	9301      	str	r3, [sp, #4]
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	9300      	str	r3, [sp, #0]
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	2201      	movs	r2, #1
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 fb65 	bl	800d8aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d1e0:	2300      	movs	r3, #0

}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b088      	sub	sp, #32
 800d1ee:	af04      	add	r7, sp, #16
 800d1f0:	60f8      	str	r0, [r7, #12]
 800d1f2:	60b9      	str	r1, [r7, #8]
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	80fb      	strh	r3, [r7, #6]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d20a:	2300      	movs	r3, #0
 800d20c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d20e:	7979      	ldrb	r1, [r7, #5]
 800d210:	7e3b      	ldrb	r3, [r7, #24]
 800d212:	9303      	str	r3, [sp, #12]
 800d214:	88fb      	ldrh	r3, [r7, #6]
 800d216:	9302      	str	r3, [sp, #8]
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	9301      	str	r3, [sp, #4]
 800d21c:	2301      	movs	r3, #1
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	2302      	movs	r3, #2
 800d222:	2200      	movs	r2, #0
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f000 fb40 	bl	800d8aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b088      	sub	sp, #32
 800d238:	af04      	add	r7, sp, #16
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	4611      	mov	r1, r2
 800d240:	461a      	mov	r2, r3
 800d242:	460b      	mov	r3, r1
 800d244:	80fb      	strh	r3, [r7, #6]
 800d246:	4613      	mov	r3, r2
 800d248:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d24a:	7979      	ldrb	r1, [r7, #5]
 800d24c:	2300      	movs	r3, #0
 800d24e:	9303      	str	r3, [sp, #12]
 800d250:	88fb      	ldrh	r3, [r7, #6]
 800d252:	9302      	str	r3, [sp, #8]
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	2301      	movs	r3, #1
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	2302      	movs	r3, #2
 800d25e:	2201      	movs	r2, #1
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 fb22 	bl	800d8aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b086      	sub	sp, #24
 800d274:	af04      	add	r7, sp, #16
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	4608      	mov	r0, r1
 800d27a:	4611      	mov	r1, r2
 800d27c:	461a      	mov	r2, r3
 800d27e:	4603      	mov	r3, r0
 800d280:	70fb      	strb	r3, [r7, #3]
 800d282:	460b      	mov	r3, r1
 800d284:	70bb      	strb	r3, [r7, #2]
 800d286:	4613      	mov	r3, r2
 800d288:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d28a:	7878      	ldrb	r0, [r7, #1]
 800d28c:	78ba      	ldrb	r2, [r7, #2]
 800d28e:	78f9      	ldrb	r1, [r7, #3]
 800d290:	8b3b      	ldrh	r3, [r7, #24]
 800d292:	9302      	str	r3, [sp, #8]
 800d294:	7d3b      	ldrb	r3, [r7, #20]
 800d296:	9301      	str	r3, [sp, #4]
 800d298:	7c3b      	ldrb	r3, [r7, #16]
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	4603      	mov	r3, r0
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fab5 	bl	800d80e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d2ba:	78fb      	ldrb	r3, [r7, #3]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fad4 	bl	800d86c <USBH_LL_ClosePipe>

  return USBH_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}

0800d2ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d2ce:	b580      	push	{r7, lr}
 800d2d0:	b084      	sub	sp, #16
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f836 	bl	800d34c <USBH_GetFreePipe>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d2e4:	89fb      	ldrh	r3, [r7, #14]
 800d2e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d00a      	beq.n	800d304 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d2ee:	78fa      	ldrb	r2, [r7, #3]
 800d2f0:	89fb      	ldrh	r3, [r7, #14]
 800d2f2:	f003 030f 	and.w	r3, r3, #15
 800d2f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d2fa:	6879      	ldr	r1, [r7, #4]
 800d2fc:	33e0      	adds	r3, #224	; 0xe0
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	440b      	add	r3, r1
 800d302:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d304:	89fb      	ldrh	r3, [r7, #14]
 800d306:	b2db      	uxtb	r3, r3
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3710      	adds	r7, #16
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	460b      	mov	r3, r1
 800d31a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d31c:	78fb      	ldrb	r3, [r7, #3]
 800d31e:	2b0f      	cmp	r3, #15
 800d320:	d80d      	bhi.n	800d33e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d322:	78fb      	ldrb	r3, [r7, #3]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	33e0      	adds	r3, #224	; 0xe0
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	685a      	ldr	r2, [r3, #4]
 800d32e:	78fb      	ldrb	r3, [r7, #3]
 800d330:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d334:	6879      	ldr	r1, [r7, #4]
 800d336:	33e0      	adds	r3, #224	; 0xe0
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	440b      	add	r3, r1
 800d33c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	370c      	adds	r7, #12
 800d344:	46bd      	mov	sp, r7
 800d346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34a:	4770      	bx	lr

0800d34c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d358:	2300      	movs	r3, #0
 800d35a:	73fb      	strb	r3, [r7, #15]
 800d35c:	e00f      	b.n	800d37e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	33e0      	adds	r3, #224	; 0xe0
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	685b      	ldr	r3, [r3, #4]
 800d36a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d102      	bne.n	800d378 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d372:	7bfb      	ldrb	r3, [r7, #15]
 800d374:	b29b      	uxth	r3, r3
 800d376:	e007      	b.n	800d388 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d378:	7bfb      	ldrb	r3, [r7, #15]
 800d37a:	3301      	adds	r3, #1
 800d37c:	73fb      	strb	r3, [r7, #15]
 800d37e:	7bfb      	ldrb	r3, [r7, #15]
 800d380:	2b0f      	cmp	r3, #15
 800d382:	d9ec      	bls.n	800d35e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d384:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d394:	b480      	push	{r7}
 800d396:	b087      	sub	sp, #28
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d3aa:	4b1f      	ldr	r3, [pc, #124]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3ac:	7a5b      	ldrb	r3, [r3, #9]
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d131      	bne.n	800d418 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3b6:	7a5b      	ldrb	r3, [r3, #9]
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	4b1a      	ldr	r3, [pc, #104]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3be:	2100      	movs	r1, #0
 800d3c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d3c2:	4b19      	ldr	r3, [pc, #100]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3c4:	7a5b      	ldrb	r3, [r3, #9]
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	4a17      	ldr	r2, [pc, #92]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4413      	add	r3, r2
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d3d2:	4b15      	ldr	r3, [pc, #84]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3d4:	7a5b      	ldrb	r3, [r3, #9]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	461a      	mov	r2, r3
 800d3da:	4b13      	ldr	r3, [pc, #76]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3dc:	4413      	add	r3, r2
 800d3de:	79fa      	ldrb	r2, [r7, #7]
 800d3e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d3e2:	4b11      	ldr	r3, [pc, #68]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3e4:	7a5b      	ldrb	r3, [r3, #9]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	1c5a      	adds	r2, r3, #1
 800d3ea:	b2d1      	uxtb	r1, r2
 800d3ec:	4a0e      	ldr	r2, [pc, #56]	; (800d428 <FATFS_LinkDriverEx+0x94>)
 800d3ee:	7251      	strb	r1, [r2, #9]
 800d3f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d3f2:	7dbb      	ldrb	r3, [r7, #22]
 800d3f4:	3330      	adds	r3, #48	; 0x30
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	3301      	adds	r3, #1
 800d400:	223a      	movs	r2, #58	; 0x3a
 800d402:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	3302      	adds	r3, #2
 800d408:	222f      	movs	r2, #47	; 0x2f
 800d40a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	3303      	adds	r3, #3
 800d410:	2200      	movs	r2, #0
 800d412:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d418:	7dfb      	ldrb	r3, [r7, #23]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	371c      	adds	r7, #28
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	200033ec 	.word	0x200033ec

0800d42c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d436:	2200      	movs	r2, #0
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff ffaa 	bl	800d394 <FATFS_LinkDriverEx>
 800d440:	4603      	mov	r3, r0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
	...

0800d44c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d450:	2200      	movs	r2, #0
 800d452:	490e      	ldr	r1, [pc, #56]	; (800d48c <MX_USB_HOST_Init+0x40>)
 800d454:	480e      	ldr	r0, [pc, #56]	; (800d490 <MX_USB_HOST_Init+0x44>)
 800d456:	f7fe fb4b 	bl	800baf0 <USBH_Init>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d460:	f7f5 f9d2 	bl	8002808 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800d464:	490b      	ldr	r1, [pc, #44]	; (800d494 <MX_USB_HOST_Init+0x48>)
 800d466:	480a      	ldr	r0, [pc, #40]	; (800d490 <MX_USB_HOST_Init+0x44>)
 800d468:	f7fe fbd0 	bl	800bc0c <USBH_RegisterClass>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d472:	f7f5 f9c9 	bl	8002808 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d476:	4806      	ldr	r0, [pc, #24]	; (800d490 <MX_USB_HOST_Init+0x44>)
 800d478:	f7fe fc54 	bl	800bd24 <USBH_Start>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d482:	f7f5 f9c1 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d486:	bf00      	nop
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	0800d4ad 	.word	0x0800d4ad
 800d490:	200033f8 	.word	0x200033f8
 800d494:	200000d4 	.word	0x200000d4

0800d498 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800d49c:	4802      	ldr	r0, [pc, #8]	; (800d4a8 <MX_USB_HOST_Process+0x10>)
 800d49e:	f7fe fc51 	bl	800bd44 <USBH_Process>
}
 800d4a2:	bf00      	nop
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	200033f8 	.word	0x200033f8

0800d4ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d4b8:	78fb      	ldrb	r3, [r7, #3]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	2b04      	cmp	r3, #4
 800d4be:	d819      	bhi.n	800d4f4 <USBH_UserProcess+0x48>
 800d4c0:	a201      	add	r2, pc, #4	; (adr r2, 800d4c8 <USBH_UserProcess+0x1c>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d4f5 	.word	0x0800d4f5
 800d4cc:	0800d4e5 	.word	0x0800d4e5
 800d4d0:	0800d4f5 	.word	0x0800d4f5
 800d4d4:	0800d4ed 	.word	0x0800d4ed
 800d4d8:	0800d4dd 	.word	0x0800d4dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d4dc:	4b09      	ldr	r3, [pc, #36]	; (800d504 <USBH_UserProcess+0x58>)
 800d4de:	2203      	movs	r2, #3
 800d4e0:	701a      	strb	r2, [r3, #0]
  break;
 800d4e2:	e008      	b.n	800d4f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d4e4:	4b07      	ldr	r3, [pc, #28]	; (800d504 <USBH_UserProcess+0x58>)
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	701a      	strb	r2, [r3, #0]
  break;
 800d4ea:	e004      	b.n	800d4f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d4ec:	4b05      	ldr	r3, [pc, #20]	; (800d504 <USBH_UserProcess+0x58>)
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	701a      	strb	r2, [r3, #0]
  break;
 800d4f2:	e000      	b.n	800d4f6 <USBH_UserProcess+0x4a>

  default:
  break;
 800d4f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	200037d0 	.word	0x200037d0

0800d508 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b08a      	sub	sp, #40	; 0x28
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d510:	f107 0314 	add.w	r3, r7, #20
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	605a      	str	r2, [r3, #4]
 800d51a:	609a      	str	r2, [r3, #8]
 800d51c:	60da      	str	r2, [r3, #12]
 800d51e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a24      	ldr	r2, [pc, #144]	; (800d5b8 <HAL_HCD_MspInit+0xb0>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d141      	bne.n	800d5ae <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d52a:	2300      	movs	r3, #0
 800d52c:	613b      	str	r3, [r7, #16]
 800d52e:	4b23      	ldr	r3, [pc, #140]	; (800d5bc <HAL_HCD_MspInit+0xb4>)
 800d530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d532:	4a22      	ldr	r2, [pc, #136]	; (800d5bc <HAL_HCD_MspInit+0xb4>)
 800d534:	f043 0302 	orr.w	r3, r3, #2
 800d538:	6313      	str	r3, [r2, #48]	; 0x30
 800d53a:	4b20      	ldr	r3, [pc, #128]	; (800d5bc <HAL_HCD_MspInit+0xb4>)
 800d53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d546:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d54a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d54c:	2302      	movs	r3, #2
 800d54e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d550:	2300      	movs	r3, #0
 800d552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d554:	2300      	movs	r3, #0
 800d556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d558:	230c      	movs	r3, #12
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d55c:	f107 0314 	add.w	r3, r7, #20
 800d560:	4619      	mov	r1, r3
 800d562:	4817      	ldr	r0, [pc, #92]	; (800d5c0 <HAL_HCD_MspInit+0xb8>)
 800d564:	f7f5 ffba 	bl	80034dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d56c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d56e:	2300      	movs	r3, #0
 800d570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d572:	2300      	movs	r3, #0
 800d574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d576:	f107 0314 	add.w	r3, r7, #20
 800d57a:	4619      	mov	r1, r3
 800d57c:	4810      	ldr	r0, [pc, #64]	; (800d5c0 <HAL_HCD_MspInit+0xb8>)
 800d57e:	f7f5 ffad 	bl	80034dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d582:	2300      	movs	r3, #0
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <HAL_HCD_MspInit+0xb4>)
 800d588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58a:	4a0c      	ldr	r2, [pc, #48]	; (800d5bc <HAL_HCD_MspInit+0xb4>)
 800d58c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d590:	6313      	str	r3, [r2, #48]	; 0x30
 800d592:	4b0a      	ldr	r3, [pc, #40]	; (800d5bc <HAL_HCD_MspInit+0xb4>)
 800d594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d59a:	60fb      	str	r3, [r7, #12]
 800d59c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	204d      	movs	r0, #77	; 0x4d
 800d5a4:	f7f5 feb5 	bl	8003312 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d5a8:	204d      	movs	r0, #77	; 0x4d
 800d5aa:	f7f5 fece 	bl	800334a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d5ae:	bf00      	nop
 800d5b0:	3728      	adds	r7, #40	; 0x28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	40040000 	.word	0x40040000
 800d5bc:	40023800 	.word	0x40023800
 800d5c0:	40020400 	.word	0x40020400

0800d5c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fe ff95 	bl	800c502 <USBH_LL_IncTimer>
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fe ffcd 	bl	800c58e <USBH_LL_Connect>
}
 800d5f4:	bf00      	nop
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe ffd6 	bl	800c5bc <USBH_LL_Disconnect>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	460b      	mov	r3, r1
 800d622:	70fb      	strb	r3, [r7, #3]
 800d624:	4613      	mov	r3, r2
 800d626:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d628:	bf00      	nop
 800d62a:	370c      	adds	r7, #12
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr

0800d634 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d642:	4618      	mov	r0, r3
 800d644:	f7fe ff87 	bl	800c556 <USBH_LL_PortEnabled>
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe ff87 	bl	800c572 <USBH_LL_PortDisabled>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d132      	bne.n	800d6e4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d67e:	4a1c      	ldr	r2, [pc, #112]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a19      	ldr	r2, [pc, #100]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d68a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d68e:	4b18      	ldr	r3, [pc, #96]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d690:	4a18      	ldr	r2, [pc, #96]	; (800d6f4 <USBH_LL_Init+0x88>)
 800d692:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d694:	4b16      	ldr	r3, [pc, #88]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d696:	220c      	movs	r2, #12
 800d698:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d69a:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d69c:	2201      	movs	r2, #1
 800d69e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d6a0:	4b13      	ldr	r3, [pc, #76]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d6a6:	4b12      	ldr	r3, [pc, #72]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6a8:	2202      	movs	r2, #2
 800d6aa:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d6ac:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d6b2:	4b0f      	ldr	r3, [pc, #60]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d6b8:	4b0d      	ldr	r3, [pc, #52]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d6be:	4b0c      	ldr	r3, [pc, #48]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d6c4:	480a      	ldr	r0, [pc, #40]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6c6:	f7f6 f8ff 	bl	80038c8 <HAL_HCD_Init>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d001      	beq.n	800d6d4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d6d0:	f7f5 f89a 	bl	8002808 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d6d4:	4806      	ldr	r0, [pc, #24]	; (800d6f0 <USBH_LL_Init+0x84>)
 800d6d6:	f7f6 fce2 	bl	800409e <HAL_HCD_GetCurrentFrame>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7fe ff00 	bl	800c4e4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	200037d4 	.word	0x200037d4
 800d6f4:	40040000 	.word	0x40040000

0800d6f8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d70e:	4618      	mov	r0, r3
 800d710:	f7f6 fc4f 	bl	8003fb2 <HAL_HCD_Start>
 800d714:	4603      	mov	r3, r0
 800d716:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d718:	7bfb      	ldrb	r3, [r7, #15]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f000 f98c 	bl	800da38 <USBH_Get_USB_Status>
 800d720:	4603      	mov	r3, r0
 800d722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d724:	7bbb      	ldrb	r3, [r7, #14]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b084      	sub	sp, #16
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d736:	2300      	movs	r3, #0
 800d738:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d744:	4618      	mov	r0, r3
 800d746:	f7f6 fc57 	bl	8003ff8 <HAL_HCD_Stop>
 800d74a:	4603      	mov	r3, r0
 800d74c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d74e:	7bfb      	ldrb	r3, [r7, #15]
 800d750:	4618      	mov	r0, r3
 800d752:	f000 f971 	bl	800da38 <USBH_Get_USB_Status>
 800d756:	4603      	mov	r3, r0
 800d758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d76c:	2301      	movs	r3, #1
 800d76e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d776:	4618      	mov	r0, r3
 800d778:	f7f6 fc9f 	bl	80040ba <HAL_HCD_GetCurrentSpeed>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b02      	cmp	r3, #2
 800d780:	d00c      	beq.n	800d79c <USBH_LL_GetSpeed+0x38>
 800d782:	2b02      	cmp	r3, #2
 800d784:	d80d      	bhi.n	800d7a2 <USBH_LL_GetSpeed+0x3e>
 800d786:	2b00      	cmp	r3, #0
 800d788:	d002      	beq.n	800d790 <USBH_LL_GetSpeed+0x2c>
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d003      	beq.n	800d796 <USBH_LL_GetSpeed+0x32>
 800d78e:	e008      	b.n	800d7a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d790:	2300      	movs	r3, #0
 800d792:	73fb      	strb	r3, [r7, #15]
    break;
 800d794:	e008      	b.n	800d7a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d796:	2301      	movs	r3, #1
 800d798:	73fb      	strb	r3, [r7, #15]
    break;
 800d79a:	e005      	b.n	800d7a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d79c:	2302      	movs	r3, #2
 800d79e:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a0:	e002      	b.n	800d7a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7a6:	bf00      	nop
  }
  return  speed;
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b084      	sub	sp, #16
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7f6 fc32 	bl	8004032 <HAL_HCD_ResetPort>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f000 f92f 	bl	800da38 <USBH_Get_USB_Status>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7fa:	78fa      	ldrb	r2, [r7, #3]
 800d7fc:	4611      	mov	r1, r2
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f6 fc39 	bl	8004076 <HAL_HCD_HC_GetXferCount>
 800d804:	4603      	mov	r3, r0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d80e:	b590      	push	{r4, r7, lr}
 800d810:	b089      	sub	sp, #36	; 0x24
 800d812:	af04      	add	r7, sp, #16
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	4608      	mov	r0, r1
 800d818:	4611      	mov	r1, r2
 800d81a:	461a      	mov	r2, r3
 800d81c:	4603      	mov	r3, r0
 800d81e:	70fb      	strb	r3, [r7, #3]
 800d820:	460b      	mov	r3, r1
 800d822:	70bb      	strb	r3, [r7, #2]
 800d824:	4613      	mov	r3, r2
 800d826:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d82c:	2300      	movs	r3, #0
 800d82e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d836:	787c      	ldrb	r4, [r7, #1]
 800d838:	78ba      	ldrb	r2, [r7, #2]
 800d83a:	78f9      	ldrb	r1, [r7, #3]
 800d83c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d83e:	9302      	str	r3, [sp, #8]
 800d840:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	4623      	mov	r3, r4
 800d84e:	f7f6 f89d 	bl	800398c <HAL_HCD_HC_Init>
 800d852:	4603      	mov	r3, r0
 800d854:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d856:	7bfb      	ldrb	r3, [r7, #15]
 800d858:	4618      	mov	r0, r3
 800d85a:	f000 f8ed 	bl	800da38 <USBH_Get_USB_Status>
 800d85e:	4603      	mov	r3, r0
 800d860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d862:	7bbb      	ldrb	r3, [r7, #14]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd90      	pop	{r4, r7, pc}

0800d86c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b084      	sub	sp, #16
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	460b      	mov	r3, r1
 800d876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d886:	78fa      	ldrb	r2, [r7, #3]
 800d888:	4611      	mov	r1, r2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7f6 f90d 	bl	8003aaa <HAL_HCD_HC_Halt>
 800d890:	4603      	mov	r3, r0
 800d892:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d894:	7bfb      	ldrb	r3, [r7, #15]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f8ce 	bl	800da38 <USBH_Get_USB_Status>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d8aa:	b590      	push	{r4, r7, lr}
 800d8ac:	b089      	sub	sp, #36	; 0x24
 800d8ae:	af04      	add	r7, sp, #16
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	4608      	mov	r0, r1
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	70fb      	strb	r3, [r7, #3]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70bb      	strb	r3, [r7, #2]
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d8d2:	787c      	ldrb	r4, [r7, #1]
 800d8d4:	78ba      	ldrb	r2, [r7, #2]
 800d8d6:	78f9      	ldrb	r1, [r7, #3]
 800d8d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d8dc:	9303      	str	r3, [sp, #12]
 800d8de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8e0:	9302      	str	r3, [sp, #8]
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	f7f6 f8ff 	bl	8003af0 <HAL_HCD_HC_SubmitRequest>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d8f6:	7bfb      	ldrb	r3, [r7, #15]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 f89d 	bl	800da38 <USBH_Get_USB_Status>
 800d8fe:	4603      	mov	r3, r0
 800d900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d902:	7bbb      	ldrb	r3, [r7, #14]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd90      	pop	{r4, r7, pc}

0800d90c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d91e:	78fa      	ldrb	r2, [r7, #3]
 800d920:	4611      	mov	r1, r2
 800d922:	4618      	mov	r0, r3
 800d924:	f7f6 fb93 	bl	800404e <HAL_HCD_HC_GetURBState>
 800d928:	4603      	mov	r3, r0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
 800d93a:	460b      	mov	r3, r1
 800d93c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d944:	2b00      	cmp	r3, #0
 800d946:	d103      	bne.n	800d950 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d948:	78fb      	ldrb	r3, [r7, #3]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f000 f8a0 	bl	800da90 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d950:	20c8      	movs	r0, #200	; 0xc8
 800d952:	f7f5 fbdf 	bl	8003114 <HAL_Delay>
  return USBH_OK;
 800d956:	2300      	movs	r3, #0
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	460b      	mov	r3, r1
 800d96a:	70fb      	strb	r3, [r7, #3]
 800d96c:	4613      	mov	r3, r2
 800d96e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d976:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d978:	78fb      	ldrb	r3, [r7, #3]
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	212c      	movs	r1, #44	; 0x2c
 800d97e:	fb01 f303 	mul.w	r3, r1, r3
 800d982:	4413      	add	r3, r2
 800d984:	333b      	adds	r3, #59	; 0x3b
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d009      	beq.n	800d9a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d98c:	78fb      	ldrb	r3, [r7, #3]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	212c      	movs	r1, #44	; 0x2c
 800d992:	fb01 f303 	mul.w	r3, r1, r3
 800d996:	4413      	add	r3, r2
 800d998:	3354      	adds	r3, #84	; 0x54
 800d99a:	78ba      	ldrb	r2, [r7, #2]
 800d99c:	701a      	strb	r2, [r3, #0]
 800d99e:	e008      	b.n	800d9b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d9a0:	78fb      	ldrb	r3, [r7, #3]
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	212c      	movs	r1, #44	; 0x2c
 800d9a6:	fb01 f303 	mul.w	r3, r1, r3
 800d9aa:	4413      	add	r3, r2
 800d9ac:	3355      	adds	r3, #85	; 0x55
 800d9ae:	78ba      	ldrb	r2, [r7, #2]
 800d9b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d9d6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d9d8:	78fb      	ldrb	r3, [r7, #3]
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	212c      	movs	r1, #44	; 0x2c
 800d9de:	fb01 f303 	mul.w	r3, r1, r3
 800d9e2:	4413      	add	r3, r2
 800d9e4:	333b      	adds	r3, #59	; 0x3b
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d009      	beq.n	800da00 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d9ec:	78fb      	ldrb	r3, [r7, #3]
 800d9ee:	68ba      	ldr	r2, [r7, #8]
 800d9f0:	212c      	movs	r1, #44	; 0x2c
 800d9f2:	fb01 f303 	mul.w	r3, r1, r3
 800d9f6:	4413      	add	r3, r2
 800d9f8:	3354      	adds	r3, #84	; 0x54
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	73fb      	strb	r3, [r7, #15]
 800d9fe:	e008      	b.n	800da12 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800da00:	78fb      	ldrb	r3, [r7, #3]
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	212c      	movs	r1, #44	; 0x2c
 800da06:	fb01 f303 	mul.w	r3, r1, r3
 800da0a:	4413      	add	r3, r2
 800da0c:	3355      	adds	r3, #85	; 0x55
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800da12:	7bfb      	ldrb	r3, [r7, #15]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3714      	adds	r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7f5 fb73 	bl	8003114 <HAL_Delay>
}
 800da2e:	bf00      	nop
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
	...

0800da38 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	2b03      	cmp	r3, #3
 800da4a:	d817      	bhi.n	800da7c <USBH_Get_USB_Status+0x44>
 800da4c:	a201      	add	r2, pc, #4	; (adr r2, 800da54 <USBH_Get_USB_Status+0x1c>)
 800da4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da52:	bf00      	nop
 800da54:	0800da65 	.word	0x0800da65
 800da58:	0800da6b 	.word	0x0800da6b
 800da5c:	0800da71 	.word	0x0800da71
 800da60:	0800da77 	.word	0x0800da77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da64:	2300      	movs	r3, #0
 800da66:	73fb      	strb	r3, [r7, #15]
    break;
 800da68:	e00b      	b.n	800da82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da6a:	2302      	movs	r3, #2
 800da6c:	73fb      	strb	r3, [r7, #15]
    break;
 800da6e:	e008      	b.n	800da82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da70:	2301      	movs	r3, #1
 800da72:	73fb      	strb	r3, [r7, #15]
    break;
 800da74:	e005      	b.n	800da82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da76:	2302      	movs	r3, #2
 800da78:	73fb      	strb	r3, [r7, #15]
    break;
 800da7a:	e002      	b.n	800da82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da7c:	2302      	movs	r3, #2
 800da7e:	73fb      	strb	r3, [r7, #15]
    break;
 800da80:	bf00      	nop
  }
  return usb_status;
 800da82:	7bfb      	ldrb	r3, [r7, #15]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	4603      	mov	r3, r0
 800da98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800da9a:	79fb      	ldrb	r3, [r7, #7]
 800da9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800daa4:	2301      	movs	r3, #1
 800daa6:	73fb      	strb	r3, [r7, #15]
 800daa8:	e001      	b.n	800daae <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800daaa:	2300      	movs	r3, #0
 800daac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800daae:	7bfb      	ldrb	r3, [r7, #15]
 800dab0:	461a      	mov	r2, r3
 800dab2:	2110      	movs	r1, #16
 800dab4:	4803      	ldr	r0, [pc, #12]	; (800dac4 <MX_DriverVbusHS+0x34>)
 800dab6:	f7f5 fed5 	bl	8003864 <HAL_GPIO_WritePin>
}
 800daba:	bf00      	nop
 800dabc:	3710      	adds	r7, #16
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	40020800 	.word	0x40020800

0800dac8 <atoi>:
 800dac8:	220a      	movs	r2, #10
 800daca:	2100      	movs	r1, #0
 800dacc:	f000 bab6 	b.w	800e03c <strtol>

0800dad0 <__errno>:
 800dad0:	4b01      	ldr	r3, [pc, #4]	; (800dad8 <__errno+0x8>)
 800dad2:	6818      	ldr	r0, [r3, #0]
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	200000f4 	.word	0x200000f4

0800dadc <__libc_init_array>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	4d0d      	ldr	r5, [pc, #52]	; (800db14 <__libc_init_array+0x38>)
 800dae0:	4c0d      	ldr	r4, [pc, #52]	; (800db18 <__libc_init_array+0x3c>)
 800dae2:	1b64      	subs	r4, r4, r5
 800dae4:	10a4      	asrs	r4, r4, #2
 800dae6:	2600      	movs	r6, #0
 800dae8:	42a6      	cmp	r6, r4
 800daea:	d109      	bne.n	800db00 <__libc_init_array+0x24>
 800daec:	4d0b      	ldr	r5, [pc, #44]	; (800db1c <__libc_init_array+0x40>)
 800daee:	4c0c      	ldr	r4, [pc, #48]	; (800db20 <__libc_init_array+0x44>)
 800daf0:	f001 f97c 	bl	800edec <_init>
 800daf4:	1b64      	subs	r4, r4, r5
 800daf6:	10a4      	asrs	r4, r4, #2
 800daf8:	2600      	movs	r6, #0
 800dafa:	42a6      	cmp	r6, r4
 800dafc:	d105      	bne.n	800db0a <__libc_init_array+0x2e>
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
 800db00:	f855 3b04 	ldr.w	r3, [r5], #4
 800db04:	4798      	blx	r3
 800db06:	3601      	adds	r6, #1
 800db08:	e7ee      	b.n	800dae8 <__libc_init_array+0xc>
 800db0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db0e:	4798      	blx	r3
 800db10:	3601      	adds	r6, #1
 800db12:	e7f2      	b.n	800dafa <__libc_init_array+0x1e>
 800db14:	0800f468 	.word	0x0800f468
 800db18:	0800f468 	.word	0x0800f468
 800db1c:	0800f468 	.word	0x0800f468
 800db20:	0800f46c 	.word	0x0800f46c

0800db24 <malloc>:
 800db24:	4b02      	ldr	r3, [pc, #8]	; (800db30 <malloc+0xc>)
 800db26:	4601      	mov	r1, r0
 800db28:	6818      	ldr	r0, [r3, #0]
 800db2a:	f000 b88d 	b.w	800dc48 <_malloc_r>
 800db2e:	bf00      	nop
 800db30:	200000f4 	.word	0x200000f4

0800db34 <free>:
 800db34:	4b02      	ldr	r3, [pc, #8]	; (800db40 <free+0xc>)
 800db36:	4601      	mov	r1, r0
 800db38:	6818      	ldr	r0, [r3, #0]
 800db3a:	f000 b819 	b.w	800db70 <_free_r>
 800db3e:	bf00      	nop
 800db40:	200000f4 	.word	0x200000f4

0800db44 <memcpy>:
 800db44:	440a      	add	r2, r1
 800db46:	4291      	cmp	r1, r2
 800db48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800db4c:	d100      	bne.n	800db50 <memcpy+0xc>
 800db4e:	4770      	bx	lr
 800db50:	b510      	push	{r4, lr}
 800db52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db5a:	4291      	cmp	r1, r2
 800db5c:	d1f9      	bne.n	800db52 <memcpy+0xe>
 800db5e:	bd10      	pop	{r4, pc}

0800db60 <memset>:
 800db60:	4402      	add	r2, r0
 800db62:	4603      	mov	r3, r0
 800db64:	4293      	cmp	r3, r2
 800db66:	d100      	bne.n	800db6a <memset+0xa>
 800db68:	4770      	bx	lr
 800db6a:	f803 1b01 	strb.w	r1, [r3], #1
 800db6e:	e7f9      	b.n	800db64 <memset+0x4>

0800db70 <_free_r>:
 800db70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db72:	2900      	cmp	r1, #0
 800db74:	d044      	beq.n	800dc00 <_free_r+0x90>
 800db76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db7a:	9001      	str	r0, [sp, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f1a1 0404 	sub.w	r4, r1, #4
 800db82:	bfb8      	it	lt
 800db84:	18e4      	addlt	r4, r4, r3
 800db86:	f000 fc83 	bl	800e490 <__malloc_lock>
 800db8a:	4a1e      	ldr	r2, [pc, #120]	; (800dc04 <_free_r+0x94>)
 800db8c:	9801      	ldr	r0, [sp, #4]
 800db8e:	6813      	ldr	r3, [r2, #0]
 800db90:	b933      	cbnz	r3, 800dba0 <_free_r+0x30>
 800db92:	6063      	str	r3, [r4, #4]
 800db94:	6014      	str	r4, [r2, #0]
 800db96:	b003      	add	sp, #12
 800db98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db9c:	f000 bc7e 	b.w	800e49c <__malloc_unlock>
 800dba0:	42a3      	cmp	r3, r4
 800dba2:	d908      	bls.n	800dbb6 <_free_r+0x46>
 800dba4:	6825      	ldr	r5, [r4, #0]
 800dba6:	1961      	adds	r1, r4, r5
 800dba8:	428b      	cmp	r3, r1
 800dbaa:	bf01      	itttt	eq
 800dbac:	6819      	ldreq	r1, [r3, #0]
 800dbae:	685b      	ldreq	r3, [r3, #4]
 800dbb0:	1949      	addeq	r1, r1, r5
 800dbb2:	6021      	streq	r1, [r4, #0]
 800dbb4:	e7ed      	b.n	800db92 <_free_r+0x22>
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	b10b      	cbz	r3, 800dbc0 <_free_r+0x50>
 800dbbc:	42a3      	cmp	r3, r4
 800dbbe:	d9fa      	bls.n	800dbb6 <_free_r+0x46>
 800dbc0:	6811      	ldr	r1, [r2, #0]
 800dbc2:	1855      	adds	r5, r2, r1
 800dbc4:	42a5      	cmp	r5, r4
 800dbc6:	d10b      	bne.n	800dbe0 <_free_r+0x70>
 800dbc8:	6824      	ldr	r4, [r4, #0]
 800dbca:	4421      	add	r1, r4
 800dbcc:	1854      	adds	r4, r2, r1
 800dbce:	42a3      	cmp	r3, r4
 800dbd0:	6011      	str	r1, [r2, #0]
 800dbd2:	d1e0      	bne.n	800db96 <_free_r+0x26>
 800dbd4:	681c      	ldr	r4, [r3, #0]
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	6053      	str	r3, [r2, #4]
 800dbda:	4421      	add	r1, r4
 800dbdc:	6011      	str	r1, [r2, #0]
 800dbde:	e7da      	b.n	800db96 <_free_r+0x26>
 800dbe0:	d902      	bls.n	800dbe8 <_free_r+0x78>
 800dbe2:	230c      	movs	r3, #12
 800dbe4:	6003      	str	r3, [r0, #0]
 800dbe6:	e7d6      	b.n	800db96 <_free_r+0x26>
 800dbe8:	6825      	ldr	r5, [r4, #0]
 800dbea:	1961      	adds	r1, r4, r5
 800dbec:	428b      	cmp	r3, r1
 800dbee:	bf04      	itt	eq
 800dbf0:	6819      	ldreq	r1, [r3, #0]
 800dbf2:	685b      	ldreq	r3, [r3, #4]
 800dbf4:	6063      	str	r3, [r4, #4]
 800dbf6:	bf04      	itt	eq
 800dbf8:	1949      	addeq	r1, r1, r5
 800dbfa:	6021      	streq	r1, [r4, #0]
 800dbfc:	6054      	str	r4, [r2, #4]
 800dbfe:	e7ca      	b.n	800db96 <_free_r+0x26>
 800dc00:	b003      	add	sp, #12
 800dc02:	bd30      	pop	{r4, r5, pc}
 800dc04:	20003ad8 	.word	0x20003ad8

0800dc08 <sbrk_aligned>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	4e0e      	ldr	r6, [pc, #56]	; (800dc44 <sbrk_aligned+0x3c>)
 800dc0c:	460c      	mov	r4, r1
 800dc0e:	6831      	ldr	r1, [r6, #0]
 800dc10:	4605      	mov	r5, r0
 800dc12:	b911      	cbnz	r1, 800dc1a <sbrk_aligned+0x12>
 800dc14:	f000 f8ba 	bl	800dd8c <_sbrk_r>
 800dc18:	6030      	str	r0, [r6, #0]
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	f000 f8b5 	bl	800dd8c <_sbrk_r>
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	d00a      	beq.n	800dc3c <sbrk_aligned+0x34>
 800dc26:	1cc4      	adds	r4, r0, #3
 800dc28:	f024 0403 	bic.w	r4, r4, #3
 800dc2c:	42a0      	cmp	r0, r4
 800dc2e:	d007      	beq.n	800dc40 <sbrk_aligned+0x38>
 800dc30:	1a21      	subs	r1, r4, r0
 800dc32:	4628      	mov	r0, r5
 800dc34:	f000 f8aa 	bl	800dd8c <_sbrk_r>
 800dc38:	3001      	adds	r0, #1
 800dc3a:	d101      	bne.n	800dc40 <sbrk_aligned+0x38>
 800dc3c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dc40:	4620      	mov	r0, r4
 800dc42:	bd70      	pop	{r4, r5, r6, pc}
 800dc44:	20003adc 	.word	0x20003adc

0800dc48 <_malloc_r>:
 800dc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc4c:	1ccd      	adds	r5, r1, #3
 800dc4e:	f025 0503 	bic.w	r5, r5, #3
 800dc52:	3508      	adds	r5, #8
 800dc54:	2d0c      	cmp	r5, #12
 800dc56:	bf38      	it	cc
 800dc58:	250c      	movcc	r5, #12
 800dc5a:	2d00      	cmp	r5, #0
 800dc5c:	4607      	mov	r7, r0
 800dc5e:	db01      	blt.n	800dc64 <_malloc_r+0x1c>
 800dc60:	42a9      	cmp	r1, r5
 800dc62:	d905      	bls.n	800dc70 <_malloc_r+0x28>
 800dc64:	230c      	movs	r3, #12
 800dc66:	603b      	str	r3, [r7, #0]
 800dc68:	2600      	movs	r6, #0
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc70:	4e2e      	ldr	r6, [pc, #184]	; (800dd2c <_malloc_r+0xe4>)
 800dc72:	f000 fc0d 	bl	800e490 <__malloc_lock>
 800dc76:	6833      	ldr	r3, [r6, #0]
 800dc78:	461c      	mov	r4, r3
 800dc7a:	bb34      	cbnz	r4, 800dcca <_malloc_r+0x82>
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f7ff ffc2 	bl	800dc08 <sbrk_aligned>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	4604      	mov	r4, r0
 800dc88:	d14d      	bne.n	800dd26 <_malloc_r+0xde>
 800dc8a:	6834      	ldr	r4, [r6, #0]
 800dc8c:	4626      	mov	r6, r4
 800dc8e:	2e00      	cmp	r6, #0
 800dc90:	d140      	bne.n	800dd14 <_malloc_r+0xcc>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	4631      	mov	r1, r6
 800dc96:	4638      	mov	r0, r7
 800dc98:	eb04 0803 	add.w	r8, r4, r3
 800dc9c:	f000 f876 	bl	800dd8c <_sbrk_r>
 800dca0:	4580      	cmp	r8, r0
 800dca2:	d13a      	bne.n	800dd1a <_malloc_r+0xd2>
 800dca4:	6821      	ldr	r1, [r4, #0]
 800dca6:	3503      	adds	r5, #3
 800dca8:	1a6d      	subs	r5, r5, r1
 800dcaa:	f025 0503 	bic.w	r5, r5, #3
 800dcae:	3508      	adds	r5, #8
 800dcb0:	2d0c      	cmp	r5, #12
 800dcb2:	bf38      	it	cc
 800dcb4:	250c      	movcc	r5, #12
 800dcb6:	4629      	mov	r1, r5
 800dcb8:	4638      	mov	r0, r7
 800dcba:	f7ff ffa5 	bl	800dc08 <sbrk_aligned>
 800dcbe:	3001      	adds	r0, #1
 800dcc0:	d02b      	beq.n	800dd1a <_malloc_r+0xd2>
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	442b      	add	r3, r5
 800dcc6:	6023      	str	r3, [r4, #0]
 800dcc8:	e00e      	b.n	800dce8 <_malloc_r+0xa0>
 800dcca:	6822      	ldr	r2, [r4, #0]
 800dccc:	1b52      	subs	r2, r2, r5
 800dcce:	d41e      	bmi.n	800dd0e <_malloc_r+0xc6>
 800dcd0:	2a0b      	cmp	r2, #11
 800dcd2:	d916      	bls.n	800dd02 <_malloc_r+0xba>
 800dcd4:	1961      	adds	r1, r4, r5
 800dcd6:	42a3      	cmp	r3, r4
 800dcd8:	6025      	str	r5, [r4, #0]
 800dcda:	bf18      	it	ne
 800dcdc:	6059      	strne	r1, [r3, #4]
 800dcde:	6863      	ldr	r3, [r4, #4]
 800dce0:	bf08      	it	eq
 800dce2:	6031      	streq	r1, [r6, #0]
 800dce4:	5162      	str	r2, [r4, r5]
 800dce6:	604b      	str	r3, [r1, #4]
 800dce8:	4638      	mov	r0, r7
 800dcea:	f104 060b 	add.w	r6, r4, #11
 800dcee:	f000 fbd5 	bl	800e49c <__malloc_unlock>
 800dcf2:	f026 0607 	bic.w	r6, r6, #7
 800dcf6:	1d23      	adds	r3, r4, #4
 800dcf8:	1af2      	subs	r2, r6, r3
 800dcfa:	d0b6      	beq.n	800dc6a <_malloc_r+0x22>
 800dcfc:	1b9b      	subs	r3, r3, r6
 800dcfe:	50a3      	str	r3, [r4, r2]
 800dd00:	e7b3      	b.n	800dc6a <_malloc_r+0x22>
 800dd02:	6862      	ldr	r2, [r4, #4]
 800dd04:	42a3      	cmp	r3, r4
 800dd06:	bf0c      	ite	eq
 800dd08:	6032      	streq	r2, [r6, #0]
 800dd0a:	605a      	strne	r2, [r3, #4]
 800dd0c:	e7ec      	b.n	800dce8 <_malloc_r+0xa0>
 800dd0e:	4623      	mov	r3, r4
 800dd10:	6864      	ldr	r4, [r4, #4]
 800dd12:	e7b2      	b.n	800dc7a <_malloc_r+0x32>
 800dd14:	4634      	mov	r4, r6
 800dd16:	6876      	ldr	r6, [r6, #4]
 800dd18:	e7b9      	b.n	800dc8e <_malloc_r+0x46>
 800dd1a:	230c      	movs	r3, #12
 800dd1c:	603b      	str	r3, [r7, #0]
 800dd1e:	4638      	mov	r0, r7
 800dd20:	f000 fbbc 	bl	800e49c <__malloc_unlock>
 800dd24:	e7a1      	b.n	800dc6a <_malloc_r+0x22>
 800dd26:	6025      	str	r5, [r4, #0]
 800dd28:	e7de      	b.n	800dce8 <_malloc_r+0xa0>
 800dd2a:	bf00      	nop
 800dd2c:	20003ad8 	.word	0x20003ad8

0800dd30 <iprintf>:
 800dd30:	b40f      	push	{r0, r1, r2, r3}
 800dd32:	4b0a      	ldr	r3, [pc, #40]	; (800dd5c <iprintf+0x2c>)
 800dd34:	b513      	push	{r0, r1, r4, lr}
 800dd36:	681c      	ldr	r4, [r3, #0]
 800dd38:	b124      	cbz	r4, 800dd44 <iprintf+0x14>
 800dd3a:	69a3      	ldr	r3, [r4, #24]
 800dd3c:	b913      	cbnz	r3, 800dd44 <iprintf+0x14>
 800dd3e:	4620      	mov	r0, r4
 800dd40:	f000 faa0 	bl	800e284 <__sinit>
 800dd44:	ab05      	add	r3, sp, #20
 800dd46:	9a04      	ldr	r2, [sp, #16]
 800dd48:	68a1      	ldr	r1, [r4, #8]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 fbd5 	bl	800e4fc <_vfiprintf_r>
 800dd52:	b002      	add	sp, #8
 800dd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd58:	b004      	add	sp, #16
 800dd5a:	4770      	bx	lr
 800dd5c:	200000f4 	.word	0x200000f4

0800dd60 <putchar>:
 800dd60:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <putchar+0x28>)
 800dd62:	b513      	push	{r0, r1, r4, lr}
 800dd64:	681c      	ldr	r4, [r3, #0]
 800dd66:	4601      	mov	r1, r0
 800dd68:	b134      	cbz	r4, 800dd78 <putchar+0x18>
 800dd6a:	69a3      	ldr	r3, [r4, #24]
 800dd6c:	b923      	cbnz	r3, 800dd78 <putchar+0x18>
 800dd6e:	9001      	str	r0, [sp, #4]
 800dd70:	4620      	mov	r0, r4
 800dd72:	f000 fa87 	bl	800e284 <__sinit>
 800dd76:	9901      	ldr	r1, [sp, #4]
 800dd78:	68a2      	ldr	r2, [r4, #8]
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	b002      	add	sp, #8
 800dd7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd82:	f000 be7f 	b.w	800ea84 <_putc_r>
 800dd86:	bf00      	nop
 800dd88:	200000f4 	.word	0x200000f4

0800dd8c <_sbrk_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d06      	ldr	r5, [pc, #24]	; (800dda8 <_sbrk_r+0x1c>)
 800dd90:	2300      	movs	r3, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	4608      	mov	r0, r1
 800dd96:	602b      	str	r3, [r5, #0]
 800dd98:	f7f5 f890 	bl	8002ebc <_sbrk>
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	d102      	bne.n	800dda6 <_sbrk_r+0x1a>
 800dda0:	682b      	ldr	r3, [r5, #0]
 800dda2:	b103      	cbz	r3, 800dda6 <_sbrk_r+0x1a>
 800dda4:	6023      	str	r3, [r4, #0]
 800dda6:	bd38      	pop	{r3, r4, r5, pc}
 800dda8:	20003ae4 	.word	0x20003ae4

0800ddac <setvbuf>:
 800ddac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ddb0:	461d      	mov	r5, r3
 800ddb2:	4b5d      	ldr	r3, [pc, #372]	; (800df28 <setvbuf+0x17c>)
 800ddb4:	681f      	ldr	r7, [r3, #0]
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	460e      	mov	r6, r1
 800ddba:	4690      	mov	r8, r2
 800ddbc:	b127      	cbz	r7, 800ddc8 <setvbuf+0x1c>
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	b913      	cbnz	r3, 800ddc8 <setvbuf+0x1c>
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	f000 fa5e 	bl	800e284 <__sinit>
 800ddc8:	4b58      	ldr	r3, [pc, #352]	; (800df2c <setvbuf+0x180>)
 800ddca:	429c      	cmp	r4, r3
 800ddcc:	d167      	bne.n	800de9e <setvbuf+0xf2>
 800ddce:	687c      	ldr	r4, [r7, #4]
 800ddd0:	f1b8 0f02 	cmp.w	r8, #2
 800ddd4:	d006      	beq.n	800dde4 <setvbuf+0x38>
 800ddd6:	f1b8 0f01 	cmp.w	r8, #1
 800ddda:	f200 809f 	bhi.w	800df1c <setvbuf+0x170>
 800ddde:	2d00      	cmp	r5, #0
 800dde0:	f2c0 809c 	blt.w	800df1c <setvbuf+0x170>
 800dde4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dde6:	07db      	lsls	r3, r3, #31
 800dde8:	d405      	bmi.n	800ddf6 <setvbuf+0x4a>
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	0598      	lsls	r0, r3, #22
 800ddee:	d402      	bmi.n	800ddf6 <setvbuf+0x4a>
 800ddf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddf2:	f000 fae5 	bl	800e3c0 <__retarget_lock_acquire_recursive>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4638      	mov	r0, r7
 800ddfa:	f000 f9af 	bl	800e15c <_fflush_r>
 800ddfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de00:	b141      	cbz	r1, 800de14 <setvbuf+0x68>
 800de02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de06:	4299      	cmp	r1, r3
 800de08:	d002      	beq.n	800de10 <setvbuf+0x64>
 800de0a:	4638      	mov	r0, r7
 800de0c:	f7ff feb0 	bl	800db70 <_free_r>
 800de10:	2300      	movs	r3, #0
 800de12:	6363      	str	r3, [r4, #52]	; 0x34
 800de14:	2300      	movs	r3, #0
 800de16:	61a3      	str	r3, [r4, #24]
 800de18:	6063      	str	r3, [r4, #4]
 800de1a:	89a3      	ldrh	r3, [r4, #12]
 800de1c:	0619      	lsls	r1, r3, #24
 800de1e:	d503      	bpl.n	800de28 <setvbuf+0x7c>
 800de20:	6921      	ldr	r1, [r4, #16]
 800de22:	4638      	mov	r0, r7
 800de24:	f7ff fea4 	bl	800db70 <_free_r>
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800de2e:	f023 0303 	bic.w	r3, r3, #3
 800de32:	f1b8 0f02 	cmp.w	r8, #2
 800de36:	81a3      	strh	r3, [r4, #12]
 800de38:	d06c      	beq.n	800df14 <setvbuf+0x168>
 800de3a:	ab01      	add	r3, sp, #4
 800de3c:	466a      	mov	r2, sp
 800de3e:	4621      	mov	r1, r4
 800de40:	4638      	mov	r0, r7
 800de42:	f000 fabf 	bl	800e3c4 <__swhatbuf_r>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	4318      	orrs	r0, r3
 800de4a:	81a0      	strh	r0, [r4, #12]
 800de4c:	2d00      	cmp	r5, #0
 800de4e:	d130      	bne.n	800deb2 <setvbuf+0x106>
 800de50:	9d00      	ldr	r5, [sp, #0]
 800de52:	4628      	mov	r0, r5
 800de54:	f7ff fe66 	bl	800db24 <malloc>
 800de58:	4606      	mov	r6, r0
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d155      	bne.n	800df0a <setvbuf+0x15e>
 800de5e:	f8dd 9000 	ldr.w	r9, [sp]
 800de62:	45a9      	cmp	r9, r5
 800de64:	d14a      	bne.n	800defc <setvbuf+0x150>
 800de66:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800de6a:	2200      	movs	r2, #0
 800de6c:	60a2      	str	r2, [r4, #8]
 800de6e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800de72:	6022      	str	r2, [r4, #0]
 800de74:	6122      	str	r2, [r4, #16]
 800de76:	2201      	movs	r2, #1
 800de78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de7c:	6162      	str	r2, [r4, #20]
 800de7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de80:	f043 0302 	orr.w	r3, r3, #2
 800de84:	07d2      	lsls	r2, r2, #31
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	d405      	bmi.n	800de96 <setvbuf+0xea>
 800de8a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800de8e:	d102      	bne.n	800de96 <setvbuf+0xea>
 800de90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de92:	f000 fa96 	bl	800e3c2 <__retarget_lock_release_recursive>
 800de96:	4628      	mov	r0, r5
 800de98:	b003      	add	sp, #12
 800de9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de9e:	4b24      	ldr	r3, [pc, #144]	; (800df30 <setvbuf+0x184>)
 800dea0:	429c      	cmp	r4, r3
 800dea2:	d101      	bne.n	800dea8 <setvbuf+0xfc>
 800dea4:	68bc      	ldr	r4, [r7, #8]
 800dea6:	e793      	b.n	800ddd0 <setvbuf+0x24>
 800dea8:	4b22      	ldr	r3, [pc, #136]	; (800df34 <setvbuf+0x188>)
 800deaa:	429c      	cmp	r4, r3
 800deac:	bf08      	it	eq
 800deae:	68fc      	ldreq	r4, [r7, #12]
 800deb0:	e78e      	b.n	800ddd0 <setvbuf+0x24>
 800deb2:	2e00      	cmp	r6, #0
 800deb4:	d0cd      	beq.n	800de52 <setvbuf+0xa6>
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	b913      	cbnz	r3, 800dec0 <setvbuf+0x114>
 800deba:	4638      	mov	r0, r7
 800debc:	f000 f9e2 	bl	800e284 <__sinit>
 800dec0:	f1b8 0f01 	cmp.w	r8, #1
 800dec4:	bf08      	it	eq
 800dec6:	89a3      	ldrheq	r3, [r4, #12]
 800dec8:	6026      	str	r6, [r4, #0]
 800deca:	bf04      	itt	eq
 800decc:	f043 0301 	orreq.w	r3, r3, #1
 800ded0:	81a3      	strheq	r3, [r4, #12]
 800ded2:	89a2      	ldrh	r2, [r4, #12]
 800ded4:	f012 0308 	ands.w	r3, r2, #8
 800ded8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800dedc:	d01c      	beq.n	800df18 <setvbuf+0x16c>
 800dede:	07d3      	lsls	r3, r2, #31
 800dee0:	bf41      	itttt	mi
 800dee2:	2300      	movmi	r3, #0
 800dee4:	426d      	negmi	r5, r5
 800dee6:	60a3      	strmi	r3, [r4, #8]
 800dee8:	61a5      	strmi	r5, [r4, #24]
 800deea:	bf58      	it	pl
 800deec:	60a5      	strpl	r5, [r4, #8]
 800deee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800def0:	f015 0501 	ands.w	r5, r5, #1
 800def4:	d115      	bne.n	800df22 <setvbuf+0x176>
 800def6:	f412 7f00 	tst.w	r2, #512	; 0x200
 800defa:	e7c8      	b.n	800de8e <setvbuf+0xe2>
 800defc:	4648      	mov	r0, r9
 800defe:	f7ff fe11 	bl	800db24 <malloc>
 800df02:	4606      	mov	r6, r0
 800df04:	2800      	cmp	r0, #0
 800df06:	d0ae      	beq.n	800de66 <setvbuf+0xba>
 800df08:	464d      	mov	r5, r9
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df10:	81a3      	strh	r3, [r4, #12]
 800df12:	e7d0      	b.n	800deb6 <setvbuf+0x10a>
 800df14:	2500      	movs	r5, #0
 800df16:	e7a8      	b.n	800de6a <setvbuf+0xbe>
 800df18:	60a3      	str	r3, [r4, #8]
 800df1a:	e7e8      	b.n	800deee <setvbuf+0x142>
 800df1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800df20:	e7b9      	b.n	800de96 <setvbuf+0xea>
 800df22:	2500      	movs	r5, #0
 800df24:	e7b7      	b.n	800de96 <setvbuf+0xea>
 800df26:	bf00      	nop
 800df28:	200000f4 	.word	0x200000f4
 800df2c:	0800f3ec 	.word	0x0800f3ec
 800df30:	0800f40c 	.word	0x0800f40c
 800df34:	0800f3cc 	.word	0x0800f3cc

0800df38 <_strtol_l.constprop.0>:
 800df38:	2b01      	cmp	r3, #1
 800df3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3e:	d001      	beq.n	800df44 <_strtol_l.constprop.0+0xc>
 800df40:	2b24      	cmp	r3, #36	; 0x24
 800df42:	d906      	bls.n	800df52 <_strtol_l.constprop.0+0x1a>
 800df44:	f7ff fdc4 	bl	800dad0 <__errno>
 800df48:	2316      	movs	r3, #22
 800df4a:	6003      	str	r3, [r0, #0]
 800df4c:	2000      	movs	r0, #0
 800df4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e038 <_strtol_l.constprop.0+0x100>
 800df56:	460d      	mov	r5, r1
 800df58:	462e      	mov	r6, r5
 800df5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df5e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800df62:	f017 0708 	ands.w	r7, r7, #8
 800df66:	d1f7      	bne.n	800df58 <_strtol_l.constprop.0+0x20>
 800df68:	2c2d      	cmp	r4, #45	; 0x2d
 800df6a:	d132      	bne.n	800dfd2 <_strtol_l.constprop.0+0x9a>
 800df6c:	782c      	ldrb	r4, [r5, #0]
 800df6e:	2701      	movs	r7, #1
 800df70:	1cb5      	adds	r5, r6, #2
 800df72:	2b00      	cmp	r3, #0
 800df74:	d05b      	beq.n	800e02e <_strtol_l.constprop.0+0xf6>
 800df76:	2b10      	cmp	r3, #16
 800df78:	d109      	bne.n	800df8e <_strtol_l.constprop.0+0x56>
 800df7a:	2c30      	cmp	r4, #48	; 0x30
 800df7c:	d107      	bne.n	800df8e <_strtol_l.constprop.0+0x56>
 800df7e:	782c      	ldrb	r4, [r5, #0]
 800df80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800df84:	2c58      	cmp	r4, #88	; 0x58
 800df86:	d14d      	bne.n	800e024 <_strtol_l.constprop.0+0xec>
 800df88:	786c      	ldrb	r4, [r5, #1]
 800df8a:	2310      	movs	r3, #16
 800df8c:	3502      	adds	r5, #2
 800df8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800df92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df96:	f04f 0c00 	mov.w	ip, #0
 800df9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800df9e:	4666      	mov	r6, ip
 800dfa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800dfa4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dfa8:	f1be 0f09 	cmp.w	lr, #9
 800dfac:	d816      	bhi.n	800dfdc <_strtol_l.constprop.0+0xa4>
 800dfae:	4674      	mov	r4, lr
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	dd24      	ble.n	800dffe <_strtol_l.constprop.0+0xc6>
 800dfb4:	f1bc 0f00 	cmp.w	ip, #0
 800dfb8:	db1e      	blt.n	800dff8 <_strtol_l.constprop.0+0xc0>
 800dfba:	45b1      	cmp	r9, r6
 800dfbc:	d31c      	bcc.n	800dff8 <_strtol_l.constprop.0+0xc0>
 800dfbe:	d101      	bne.n	800dfc4 <_strtol_l.constprop.0+0x8c>
 800dfc0:	45a2      	cmp	sl, r4
 800dfc2:	db19      	blt.n	800dff8 <_strtol_l.constprop.0+0xc0>
 800dfc4:	fb06 4603 	mla	r6, r6, r3, r4
 800dfc8:	f04f 0c01 	mov.w	ip, #1
 800dfcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfd0:	e7e8      	b.n	800dfa4 <_strtol_l.constprop.0+0x6c>
 800dfd2:	2c2b      	cmp	r4, #43	; 0x2b
 800dfd4:	bf04      	itt	eq
 800dfd6:	782c      	ldrbeq	r4, [r5, #0]
 800dfd8:	1cb5      	addeq	r5, r6, #2
 800dfda:	e7ca      	b.n	800df72 <_strtol_l.constprop.0+0x3a>
 800dfdc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dfe0:	f1be 0f19 	cmp.w	lr, #25
 800dfe4:	d801      	bhi.n	800dfea <_strtol_l.constprop.0+0xb2>
 800dfe6:	3c37      	subs	r4, #55	; 0x37
 800dfe8:	e7e2      	b.n	800dfb0 <_strtol_l.constprop.0+0x78>
 800dfea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dfee:	f1be 0f19 	cmp.w	lr, #25
 800dff2:	d804      	bhi.n	800dffe <_strtol_l.constprop.0+0xc6>
 800dff4:	3c57      	subs	r4, #87	; 0x57
 800dff6:	e7db      	b.n	800dfb0 <_strtol_l.constprop.0+0x78>
 800dff8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800dffc:	e7e6      	b.n	800dfcc <_strtol_l.constprop.0+0x94>
 800dffe:	f1bc 0f00 	cmp.w	ip, #0
 800e002:	da05      	bge.n	800e010 <_strtol_l.constprop.0+0xd8>
 800e004:	2322      	movs	r3, #34	; 0x22
 800e006:	6003      	str	r3, [r0, #0]
 800e008:	4646      	mov	r6, r8
 800e00a:	b942      	cbnz	r2, 800e01e <_strtol_l.constprop.0+0xe6>
 800e00c:	4630      	mov	r0, r6
 800e00e:	e79e      	b.n	800df4e <_strtol_l.constprop.0+0x16>
 800e010:	b107      	cbz	r7, 800e014 <_strtol_l.constprop.0+0xdc>
 800e012:	4276      	negs	r6, r6
 800e014:	2a00      	cmp	r2, #0
 800e016:	d0f9      	beq.n	800e00c <_strtol_l.constprop.0+0xd4>
 800e018:	f1bc 0f00 	cmp.w	ip, #0
 800e01c:	d000      	beq.n	800e020 <_strtol_l.constprop.0+0xe8>
 800e01e:	1e69      	subs	r1, r5, #1
 800e020:	6011      	str	r1, [r2, #0]
 800e022:	e7f3      	b.n	800e00c <_strtol_l.constprop.0+0xd4>
 800e024:	2430      	movs	r4, #48	; 0x30
 800e026:	2b00      	cmp	r3, #0
 800e028:	d1b1      	bne.n	800df8e <_strtol_l.constprop.0+0x56>
 800e02a:	2308      	movs	r3, #8
 800e02c:	e7af      	b.n	800df8e <_strtol_l.constprop.0+0x56>
 800e02e:	2c30      	cmp	r4, #48	; 0x30
 800e030:	d0a5      	beq.n	800df7e <_strtol_l.constprop.0+0x46>
 800e032:	230a      	movs	r3, #10
 800e034:	e7ab      	b.n	800df8e <_strtol_l.constprop.0+0x56>
 800e036:	bf00      	nop
 800e038:	0800f2c9 	.word	0x0800f2c9

0800e03c <strtol>:
 800e03c:	4613      	mov	r3, r2
 800e03e:	460a      	mov	r2, r1
 800e040:	4601      	mov	r1, r0
 800e042:	4802      	ldr	r0, [pc, #8]	; (800e04c <strtol+0x10>)
 800e044:	6800      	ldr	r0, [r0, #0]
 800e046:	f7ff bf77 	b.w	800df38 <_strtol_l.constprop.0>
 800e04a:	bf00      	nop
 800e04c:	200000f4 	.word	0x200000f4

0800e050 <__sflush_r>:
 800e050:	898a      	ldrh	r2, [r1, #12]
 800e052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e056:	4605      	mov	r5, r0
 800e058:	0710      	lsls	r0, r2, #28
 800e05a:	460c      	mov	r4, r1
 800e05c:	d458      	bmi.n	800e110 <__sflush_r+0xc0>
 800e05e:	684b      	ldr	r3, [r1, #4]
 800e060:	2b00      	cmp	r3, #0
 800e062:	dc05      	bgt.n	800e070 <__sflush_r+0x20>
 800e064:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e066:	2b00      	cmp	r3, #0
 800e068:	dc02      	bgt.n	800e070 <__sflush_r+0x20>
 800e06a:	2000      	movs	r0, #0
 800e06c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e072:	2e00      	cmp	r6, #0
 800e074:	d0f9      	beq.n	800e06a <__sflush_r+0x1a>
 800e076:	2300      	movs	r3, #0
 800e078:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e07c:	682f      	ldr	r7, [r5, #0]
 800e07e:	602b      	str	r3, [r5, #0]
 800e080:	d032      	beq.n	800e0e8 <__sflush_r+0x98>
 800e082:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e084:	89a3      	ldrh	r3, [r4, #12]
 800e086:	075a      	lsls	r2, r3, #29
 800e088:	d505      	bpl.n	800e096 <__sflush_r+0x46>
 800e08a:	6863      	ldr	r3, [r4, #4]
 800e08c:	1ac0      	subs	r0, r0, r3
 800e08e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e090:	b10b      	cbz	r3, 800e096 <__sflush_r+0x46>
 800e092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e094:	1ac0      	subs	r0, r0, r3
 800e096:	2300      	movs	r3, #0
 800e098:	4602      	mov	r2, r0
 800e09a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e09c:	6a21      	ldr	r1, [r4, #32]
 800e09e:	4628      	mov	r0, r5
 800e0a0:	47b0      	blx	r6
 800e0a2:	1c43      	adds	r3, r0, #1
 800e0a4:	89a3      	ldrh	r3, [r4, #12]
 800e0a6:	d106      	bne.n	800e0b6 <__sflush_r+0x66>
 800e0a8:	6829      	ldr	r1, [r5, #0]
 800e0aa:	291d      	cmp	r1, #29
 800e0ac:	d82c      	bhi.n	800e108 <__sflush_r+0xb8>
 800e0ae:	4a2a      	ldr	r2, [pc, #168]	; (800e158 <__sflush_r+0x108>)
 800e0b0:	40ca      	lsrs	r2, r1
 800e0b2:	07d6      	lsls	r6, r2, #31
 800e0b4:	d528      	bpl.n	800e108 <__sflush_r+0xb8>
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	6062      	str	r2, [r4, #4]
 800e0ba:	04d9      	lsls	r1, r3, #19
 800e0bc:	6922      	ldr	r2, [r4, #16]
 800e0be:	6022      	str	r2, [r4, #0]
 800e0c0:	d504      	bpl.n	800e0cc <__sflush_r+0x7c>
 800e0c2:	1c42      	adds	r2, r0, #1
 800e0c4:	d101      	bne.n	800e0ca <__sflush_r+0x7a>
 800e0c6:	682b      	ldr	r3, [r5, #0]
 800e0c8:	b903      	cbnz	r3, 800e0cc <__sflush_r+0x7c>
 800e0ca:	6560      	str	r0, [r4, #84]	; 0x54
 800e0cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0ce:	602f      	str	r7, [r5, #0]
 800e0d0:	2900      	cmp	r1, #0
 800e0d2:	d0ca      	beq.n	800e06a <__sflush_r+0x1a>
 800e0d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0d8:	4299      	cmp	r1, r3
 800e0da:	d002      	beq.n	800e0e2 <__sflush_r+0x92>
 800e0dc:	4628      	mov	r0, r5
 800e0de:	f7ff fd47 	bl	800db70 <_free_r>
 800e0e2:	2000      	movs	r0, #0
 800e0e4:	6360      	str	r0, [r4, #52]	; 0x34
 800e0e6:	e7c1      	b.n	800e06c <__sflush_r+0x1c>
 800e0e8:	6a21      	ldr	r1, [r4, #32]
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	47b0      	blx	r6
 800e0f0:	1c41      	adds	r1, r0, #1
 800e0f2:	d1c7      	bne.n	800e084 <__sflush_r+0x34>
 800e0f4:	682b      	ldr	r3, [r5, #0]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d0c4      	beq.n	800e084 <__sflush_r+0x34>
 800e0fa:	2b1d      	cmp	r3, #29
 800e0fc:	d001      	beq.n	800e102 <__sflush_r+0xb2>
 800e0fe:	2b16      	cmp	r3, #22
 800e100:	d101      	bne.n	800e106 <__sflush_r+0xb6>
 800e102:	602f      	str	r7, [r5, #0]
 800e104:	e7b1      	b.n	800e06a <__sflush_r+0x1a>
 800e106:	89a3      	ldrh	r3, [r4, #12]
 800e108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e10c:	81a3      	strh	r3, [r4, #12]
 800e10e:	e7ad      	b.n	800e06c <__sflush_r+0x1c>
 800e110:	690f      	ldr	r7, [r1, #16]
 800e112:	2f00      	cmp	r7, #0
 800e114:	d0a9      	beq.n	800e06a <__sflush_r+0x1a>
 800e116:	0793      	lsls	r3, r2, #30
 800e118:	680e      	ldr	r6, [r1, #0]
 800e11a:	bf08      	it	eq
 800e11c:	694b      	ldreq	r3, [r1, #20]
 800e11e:	600f      	str	r7, [r1, #0]
 800e120:	bf18      	it	ne
 800e122:	2300      	movne	r3, #0
 800e124:	eba6 0807 	sub.w	r8, r6, r7
 800e128:	608b      	str	r3, [r1, #8]
 800e12a:	f1b8 0f00 	cmp.w	r8, #0
 800e12e:	dd9c      	ble.n	800e06a <__sflush_r+0x1a>
 800e130:	6a21      	ldr	r1, [r4, #32]
 800e132:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e134:	4643      	mov	r3, r8
 800e136:	463a      	mov	r2, r7
 800e138:	4628      	mov	r0, r5
 800e13a:	47b0      	blx	r6
 800e13c:	2800      	cmp	r0, #0
 800e13e:	dc06      	bgt.n	800e14e <__sflush_r+0xfe>
 800e140:	89a3      	ldrh	r3, [r4, #12]
 800e142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e146:	81a3      	strh	r3, [r4, #12]
 800e148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e14c:	e78e      	b.n	800e06c <__sflush_r+0x1c>
 800e14e:	4407      	add	r7, r0
 800e150:	eba8 0800 	sub.w	r8, r8, r0
 800e154:	e7e9      	b.n	800e12a <__sflush_r+0xda>
 800e156:	bf00      	nop
 800e158:	20400001 	.word	0x20400001

0800e15c <_fflush_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	690b      	ldr	r3, [r1, #16]
 800e160:	4605      	mov	r5, r0
 800e162:	460c      	mov	r4, r1
 800e164:	b913      	cbnz	r3, 800e16c <_fflush_r+0x10>
 800e166:	2500      	movs	r5, #0
 800e168:	4628      	mov	r0, r5
 800e16a:	bd38      	pop	{r3, r4, r5, pc}
 800e16c:	b118      	cbz	r0, 800e176 <_fflush_r+0x1a>
 800e16e:	6983      	ldr	r3, [r0, #24]
 800e170:	b90b      	cbnz	r3, 800e176 <_fflush_r+0x1a>
 800e172:	f000 f887 	bl	800e284 <__sinit>
 800e176:	4b14      	ldr	r3, [pc, #80]	; (800e1c8 <_fflush_r+0x6c>)
 800e178:	429c      	cmp	r4, r3
 800e17a:	d11b      	bne.n	800e1b4 <_fflush_r+0x58>
 800e17c:	686c      	ldr	r4, [r5, #4]
 800e17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d0ef      	beq.n	800e166 <_fflush_r+0xa>
 800e186:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e188:	07d0      	lsls	r0, r2, #31
 800e18a:	d404      	bmi.n	800e196 <_fflush_r+0x3a>
 800e18c:	0599      	lsls	r1, r3, #22
 800e18e:	d402      	bmi.n	800e196 <_fflush_r+0x3a>
 800e190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e192:	f000 f915 	bl	800e3c0 <__retarget_lock_acquire_recursive>
 800e196:	4628      	mov	r0, r5
 800e198:	4621      	mov	r1, r4
 800e19a:	f7ff ff59 	bl	800e050 <__sflush_r>
 800e19e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e1a0:	07da      	lsls	r2, r3, #31
 800e1a2:	4605      	mov	r5, r0
 800e1a4:	d4e0      	bmi.n	800e168 <_fflush_r+0xc>
 800e1a6:	89a3      	ldrh	r3, [r4, #12]
 800e1a8:	059b      	lsls	r3, r3, #22
 800e1aa:	d4dd      	bmi.n	800e168 <_fflush_r+0xc>
 800e1ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1ae:	f000 f908 	bl	800e3c2 <__retarget_lock_release_recursive>
 800e1b2:	e7d9      	b.n	800e168 <_fflush_r+0xc>
 800e1b4:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <_fflush_r+0x70>)
 800e1b6:	429c      	cmp	r4, r3
 800e1b8:	d101      	bne.n	800e1be <_fflush_r+0x62>
 800e1ba:	68ac      	ldr	r4, [r5, #8]
 800e1bc:	e7df      	b.n	800e17e <_fflush_r+0x22>
 800e1be:	4b04      	ldr	r3, [pc, #16]	; (800e1d0 <_fflush_r+0x74>)
 800e1c0:	429c      	cmp	r4, r3
 800e1c2:	bf08      	it	eq
 800e1c4:	68ec      	ldreq	r4, [r5, #12]
 800e1c6:	e7da      	b.n	800e17e <_fflush_r+0x22>
 800e1c8:	0800f3ec 	.word	0x0800f3ec
 800e1cc:	0800f40c 	.word	0x0800f40c
 800e1d0:	0800f3cc 	.word	0x0800f3cc

0800e1d4 <std>:
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	b510      	push	{r4, lr}
 800e1d8:	4604      	mov	r4, r0
 800e1da:	e9c0 3300 	strd	r3, r3, [r0]
 800e1de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1e2:	6083      	str	r3, [r0, #8]
 800e1e4:	8181      	strh	r1, [r0, #12]
 800e1e6:	6643      	str	r3, [r0, #100]	; 0x64
 800e1e8:	81c2      	strh	r2, [r0, #14]
 800e1ea:	6183      	str	r3, [r0, #24]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	2208      	movs	r2, #8
 800e1f0:	305c      	adds	r0, #92	; 0x5c
 800e1f2:	f7ff fcb5 	bl	800db60 <memset>
 800e1f6:	4b05      	ldr	r3, [pc, #20]	; (800e20c <std+0x38>)
 800e1f8:	6263      	str	r3, [r4, #36]	; 0x24
 800e1fa:	4b05      	ldr	r3, [pc, #20]	; (800e210 <std+0x3c>)
 800e1fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800e1fe:	4b05      	ldr	r3, [pc, #20]	; (800e214 <std+0x40>)
 800e200:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e202:	4b05      	ldr	r3, [pc, #20]	; (800e218 <std+0x44>)
 800e204:	6224      	str	r4, [r4, #32]
 800e206:	6323      	str	r3, [r4, #48]	; 0x30
 800e208:	bd10      	pop	{r4, pc}
 800e20a:	bf00      	nop
 800e20c:	0800eb15 	.word	0x0800eb15
 800e210:	0800eb37 	.word	0x0800eb37
 800e214:	0800eb6f 	.word	0x0800eb6f
 800e218:	0800eb93 	.word	0x0800eb93

0800e21c <_cleanup_r>:
 800e21c:	4901      	ldr	r1, [pc, #4]	; (800e224 <_cleanup_r+0x8>)
 800e21e:	f000 b8af 	b.w	800e380 <_fwalk_reent>
 800e222:	bf00      	nop
 800e224:	0800e15d 	.word	0x0800e15d

0800e228 <__sfmoreglue>:
 800e228:	b570      	push	{r4, r5, r6, lr}
 800e22a:	2268      	movs	r2, #104	; 0x68
 800e22c:	1e4d      	subs	r5, r1, #1
 800e22e:	4355      	muls	r5, r2
 800e230:	460e      	mov	r6, r1
 800e232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e236:	f7ff fd07 	bl	800dc48 <_malloc_r>
 800e23a:	4604      	mov	r4, r0
 800e23c:	b140      	cbz	r0, 800e250 <__sfmoreglue+0x28>
 800e23e:	2100      	movs	r1, #0
 800e240:	e9c0 1600 	strd	r1, r6, [r0]
 800e244:	300c      	adds	r0, #12
 800e246:	60a0      	str	r0, [r4, #8]
 800e248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e24c:	f7ff fc88 	bl	800db60 <memset>
 800e250:	4620      	mov	r0, r4
 800e252:	bd70      	pop	{r4, r5, r6, pc}

0800e254 <__sfp_lock_acquire>:
 800e254:	4801      	ldr	r0, [pc, #4]	; (800e25c <__sfp_lock_acquire+0x8>)
 800e256:	f000 b8b3 	b.w	800e3c0 <__retarget_lock_acquire_recursive>
 800e25a:	bf00      	nop
 800e25c:	20003ae1 	.word	0x20003ae1

0800e260 <__sfp_lock_release>:
 800e260:	4801      	ldr	r0, [pc, #4]	; (800e268 <__sfp_lock_release+0x8>)
 800e262:	f000 b8ae 	b.w	800e3c2 <__retarget_lock_release_recursive>
 800e266:	bf00      	nop
 800e268:	20003ae1 	.word	0x20003ae1

0800e26c <__sinit_lock_acquire>:
 800e26c:	4801      	ldr	r0, [pc, #4]	; (800e274 <__sinit_lock_acquire+0x8>)
 800e26e:	f000 b8a7 	b.w	800e3c0 <__retarget_lock_acquire_recursive>
 800e272:	bf00      	nop
 800e274:	20003ae2 	.word	0x20003ae2

0800e278 <__sinit_lock_release>:
 800e278:	4801      	ldr	r0, [pc, #4]	; (800e280 <__sinit_lock_release+0x8>)
 800e27a:	f000 b8a2 	b.w	800e3c2 <__retarget_lock_release_recursive>
 800e27e:	bf00      	nop
 800e280:	20003ae2 	.word	0x20003ae2

0800e284 <__sinit>:
 800e284:	b510      	push	{r4, lr}
 800e286:	4604      	mov	r4, r0
 800e288:	f7ff fff0 	bl	800e26c <__sinit_lock_acquire>
 800e28c:	69a3      	ldr	r3, [r4, #24]
 800e28e:	b11b      	cbz	r3, 800e298 <__sinit+0x14>
 800e290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e294:	f7ff bff0 	b.w	800e278 <__sinit_lock_release>
 800e298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e29c:	6523      	str	r3, [r4, #80]	; 0x50
 800e29e:	4b13      	ldr	r3, [pc, #76]	; (800e2ec <__sinit+0x68>)
 800e2a0:	4a13      	ldr	r2, [pc, #76]	; (800e2f0 <__sinit+0x6c>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800e2a6:	42a3      	cmp	r3, r4
 800e2a8:	bf04      	itt	eq
 800e2aa:	2301      	moveq	r3, #1
 800e2ac:	61a3      	streq	r3, [r4, #24]
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f000 f820 	bl	800e2f4 <__sfp>
 800e2b4:	6060      	str	r0, [r4, #4]
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f000 f81c 	bl	800e2f4 <__sfp>
 800e2bc:	60a0      	str	r0, [r4, #8]
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f000 f818 	bl	800e2f4 <__sfp>
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	60e0      	str	r0, [r4, #12]
 800e2c8:	2104      	movs	r1, #4
 800e2ca:	6860      	ldr	r0, [r4, #4]
 800e2cc:	f7ff ff82 	bl	800e1d4 <std>
 800e2d0:	68a0      	ldr	r0, [r4, #8]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	2109      	movs	r1, #9
 800e2d6:	f7ff ff7d 	bl	800e1d4 <std>
 800e2da:	68e0      	ldr	r0, [r4, #12]
 800e2dc:	2202      	movs	r2, #2
 800e2de:	2112      	movs	r1, #18
 800e2e0:	f7ff ff78 	bl	800e1d4 <std>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	61a3      	str	r3, [r4, #24]
 800e2e8:	e7d2      	b.n	800e290 <__sinit+0xc>
 800e2ea:	bf00      	nop
 800e2ec:	0800f2c4 	.word	0x0800f2c4
 800e2f0:	0800e21d 	.word	0x0800e21d

0800e2f4 <__sfp>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	f7ff ffac 	bl	800e254 <__sfp_lock_acquire>
 800e2fc:	4b1e      	ldr	r3, [pc, #120]	; (800e378 <__sfp+0x84>)
 800e2fe:	681e      	ldr	r6, [r3, #0]
 800e300:	69b3      	ldr	r3, [r6, #24]
 800e302:	b913      	cbnz	r3, 800e30a <__sfp+0x16>
 800e304:	4630      	mov	r0, r6
 800e306:	f7ff ffbd 	bl	800e284 <__sinit>
 800e30a:	3648      	adds	r6, #72	; 0x48
 800e30c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e310:	3b01      	subs	r3, #1
 800e312:	d503      	bpl.n	800e31c <__sfp+0x28>
 800e314:	6833      	ldr	r3, [r6, #0]
 800e316:	b30b      	cbz	r3, 800e35c <__sfp+0x68>
 800e318:	6836      	ldr	r6, [r6, #0]
 800e31a:	e7f7      	b.n	800e30c <__sfp+0x18>
 800e31c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e320:	b9d5      	cbnz	r5, 800e358 <__sfp+0x64>
 800e322:	4b16      	ldr	r3, [pc, #88]	; (800e37c <__sfp+0x88>)
 800e324:	60e3      	str	r3, [r4, #12]
 800e326:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e32a:	6665      	str	r5, [r4, #100]	; 0x64
 800e32c:	f000 f847 	bl	800e3be <__retarget_lock_init_recursive>
 800e330:	f7ff ff96 	bl	800e260 <__sfp_lock_release>
 800e334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e33c:	6025      	str	r5, [r4, #0]
 800e33e:	61a5      	str	r5, [r4, #24]
 800e340:	2208      	movs	r2, #8
 800e342:	4629      	mov	r1, r5
 800e344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e348:	f7ff fc0a 	bl	800db60 <memset>
 800e34c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e354:	4620      	mov	r0, r4
 800e356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e358:	3468      	adds	r4, #104	; 0x68
 800e35a:	e7d9      	b.n	800e310 <__sfp+0x1c>
 800e35c:	2104      	movs	r1, #4
 800e35e:	4638      	mov	r0, r7
 800e360:	f7ff ff62 	bl	800e228 <__sfmoreglue>
 800e364:	4604      	mov	r4, r0
 800e366:	6030      	str	r0, [r6, #0]
 800e368:	2800      	cmp	r0, #0
 800e36a:	d1d5      	bne.n	800e318 <__sfp+0x24>
 800e36c:	f7ff ff78 	bl	800e260 <__sfp_lock_release>
 800e370:	230c      	movs	r3, #12
 800e372:	603b      	str	r3, [r7, #0]
 800e374:	e7ee      	b.n	800e354 <__sfp+0x60>
 800e376:	bf00      	nop
 800e378:	0800f2c4 	.word	0x0800f2c4
 800e37c:	ffff0001 	.word	0xffff0001

0800e380 <_fwalk_reent>:
 800e380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e384:	4606      	mov	r6, r0
 800e386:	4688      	mov	r8, r1
 800e388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e38c:	2700      	movs	r7, #0
 800e38e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e392:	f1b9 0901 	subs.w	r9, r9, #1
 800e396:	d505      	bpl.n	800e3a4 <_fwalk_reent+0x24>
 800e398:	6824      	ldr	r4, [r4, #0]
 800e39a:	2c00      	cmp	r4, #0
 800e39c:	d1f7      	bne.n	800e38e <_fwalk_reent+0xe>
 800e39e:	4638      	mov	r0, r7
 800e3a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a4:	89ab      	ldrh	r3, [r5, #12]
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d907      	bls.n	800e3ba <_fwalk_reent+0x3a>
 800e3aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	d003      	beq.n	800e3ba <_fwalk_reent+0x3a>
 800e3b2:	4629      	mov	r1, r5
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	47c0      	blx	r8
 800e3b8:	4307      	orrs	r7, r0
 800e3ba:	3568      	adds	r5, #104	; 0x68
 800e3bc:	e7e9      	b.n	800e392 <_fwalk_reent+0x12>

0800e3be <__retarget_lock_init_recursive>:
 800e3be:	4770      	bx	lr

0800e3c0 <__retarget_lock_acquire_recursive>:
 800e3c0:	4770      	bx	lr

0800e3c2 <__retarget_lock_release_recursive>:
 800e3c2:	4770      	bx	lr

0800e3c4 <__swhatbuf_r>:
 800e3c4:	b570      	push	{r4, r5, r6, lr}
 800e3c6:	460e      	mov	r6, r1
 800e3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3cc:	2900      	cmp	r1, #0
 800e3ce:	b096      	sub	sp, #88	; 0x58
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	461d      	mov	r5, r3
 800e3d4:	da08      	bge.n	800e3e8 <__swhatbuf_r+0x24>
 800e3d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	602a      	str	r2, [r5, #0]
 800e3de:	061a      	lsls	r2, r3, #24
 800e3e0:	d410      	bmi.n	800e404 <__swhatbuf_r+0x40>
 800e3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3e6:	e00e      	b.n	800e406 <__swhatbuf_r+0x42>
 800e3e8:	466a      	mov	r2, sp
 800e3ea:	f000 fcb9 	bl	800ed60 <_fstat_r>
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	dbf1      	blt.n	800e3d6 <__swhatbuf_r+0x12>
 800e3f2:	9a01      	ldr	r2, [sp, #4]
 800e3f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e3f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e3fc:	425a      	negs	r2, r3
 800e3fe:	415a      	adcs	r2, r3
 800e400:	602a      	str	r2, [r5, #0]
 800e402:	e7ee      	b.n	800e3e2 <__swhatbuf_r+0x1e>
 800e404:	2340      	movs	r3, #64	; 0x40
 800e406:	2000      	movs	r0, #0
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	b016      	add	sp, #88	; 0x58
 800e40c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e410 <__smakebuf_r>:
 800e410:	898b      	ldrh	r3, [r1, #12]
 800e412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e414:	079d      	lsls	r5, r3, #30
 800e416:	4606      	mov	r6, r0
 800e418:	460c      	mov	r4, r1
 800e41a:	d507      	bpl.n	800e42c <__smakebuf_r+0x1c>
 800e41c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e420:	6023      	str	r3, [r4, #0]
 800e422:	6123      	str	r3, [r4, #16]
 800e424:	2301      	movs	r3, #1
 800e426:	6163      	str	r3, [r4, #20]
 800e428:	b002      	add	sp, #8
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	ab01      	add	r3, sp, #4
 800e42e:	466a      	mov	r2, sp
 800e430:	f7ff ffc8 	bl	800e3c4 <__swhatbuf_r>
 800e434:	9900      	ldr	r1, [sp, #0]
 800e436:	4605      	mov	r5, r0
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff fc05 	bl	800dc48 <_malloc_r>
 800e43e:	b948      	cbnz	r0, 800e454 <__smakebuf_r+0x44>
 800e440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e444:	059a      	lsls	r2, r3, #22
 800e446:	d4ef      	bmi.n	800e428 <__smakebuf_r+0x18>
 800e448:	f023 0303 	bic.w	r3, r3, #3
 800e44c:	f043 0302 	orr.w	r3, r3, #2
 800e450:	81a3      	strh	r3, [r4, #12]
 800e452:	e7e3      	b.n	800e41c <__smakebuf_r+0xc>
 800e454:	4b0d      	ldr	r3, [pc, #52]	; (800e48c <__smakebuf_r+0x7c>)
 800e456:	62b3      	str	r3, [r6, #40]	; 0x28
 800e458:	89a3      	ldrh	r3, [r4, #12]
 800e45a:	6020      	str	r0, [r4, #0]
 800e45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	9b00      	ldr	r3, [sp, #0]
 800e464:	6163      	str	r3, [r4, #20]
 800e466:	9b01      	ldr	r3, [sp, #4]
 800e468:	6120      	str	r0, [r4, #16]
 800e46a:	b15b      	cbz	r3, 800e484 <__smakebuf_r+0x74>
 800e46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e470:	4630      	mov	r0, r6
 800e472:	f000 fc87 	bl	800ed84 <_isatty_r>
 800e476:	b128      	cbz	r0, 800e484 <__smakebuf_r+0x74>
 800e478:	89a3      	ldrh	r3, [r4, #12]
 800e47a:	f023 0303 	bic.w	r3, r3, #3
 800e47e:	f043 0301 	orr.w	r3, r3, #1
 800e482:	81a3      	strh	r3, [r4, #12]
 800e484:	89a0      	ldrh	r0, [r4, #12]
 800e486:	4305      	orrs	r5, r0
 800e488:	81a5      	strh	r5, [r4, #12]
 800e48a:	e7cd      	b.n	800e428 <__smakebuf_r+0x18>
 800e48c:	0800e21d 	.word	0x0800e21d

0800e490 <__malloc_lock>:
 800e490:	4801      	ldr	r0, [pc, #4]	; (800e498 <__malloc_lock+0x8>)
 800e492:	f7ff bf95 	b.w	800e3c0 <__retarget_lock_acquire_recursive>
 800e496:	bf00      	nop
 800e498:	20003ae0 	.word	0x20003ae0

0800e49c <__malloc_unlock>:
 800e49c:	4801      	ldr	r0, [pc, #4]	; (800e4a4 <__malloc_unlock+0x8>)
 800e49e:	f7ff bf90 	b.w	800e3c2 <__retarget_lock_release_recursive>
 800e4a2:	bf00      	nop
 800e4a4:	20003ae0 	.word	0x20003ae0

0800e4a8 <__sfputc_r>:
 800e4a8:	6893      	ldr	r3, [r2, #8]
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	b410      	push	{r4}
 800e4b0:	6093      	str	r3, [r2, #8]
 800e4b2:	da08      	bge.n	800e4c6 <__sfputc_r+0x1e>
 800e4b4:	6994      	ldr	r4, [r2, #24]
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	db01      	blt.n	800e4be <__sfputc_r+0x16>
 800e4ba:	290a      	cmp	r1, #10
 800e4bc:	d103      	bne.n	800e4c6 <__sfputc_r+0x1e>
 800e4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c2:	f000 bb6b 	b.w	800eb9c <__swbuf_r>
 800e4c6:	6813      	ldr	r3, [r2, #0]
 800e4c8:	1c58      	adds	r0, r3, #1
 800e4ca:	6010      	str	r0, [r2, #0]
 800e4cc:	7019      	strb	r1, [r3, #0]
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <__sfputs_r>:
 800e4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d8:	4606      	mov	r6, r0
 800e4da:	460f      	mov	r7, r1
 800e4dc:	4614      	mov	r4, r2
 800e4de:	18d5      	adds	r5, r2, r3
 800e4e0:	42ac      	cmp	r4, r5
 800e4e2:	d101      	bne.n	800e4e8 <__sfputs_r+0x12>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	e007      	b.n	800e4f8 <__sfputs_r+0x22>
 800e4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ec:	463a      	mov	r2, r7
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f7ff ffda 	bl	800e4a8 <__sfputc_r>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d1f3      	bne.n	800e4e0 <__sfputs_r+0xa>
 800e4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4fc <_vfiprintf_r>:
 800e4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e500:	460d      	mov	r5, r1
 800e502:	b09d      	sub	sp, #116	; 0x74
 800e504:	4614      	mov	r4, r2
 800e506:	4698      	mov	r8, r3
 800e508:	4606      	mov	r6, r0
 800e50a:	b118      	cbz	r0, 800e514 <_vfiprintf_r+0x18>
 800e50c:	6983      	ldr	r3, [r0, #24]
 800e50e:	b90b      	cbnz	r3, 800e514 <_vfiprintf_r+0x18>
 800e510:	f7ff feb8 	bl	800e284 <__sinit>
 800e514:	4b89      	ldr	r3, [pc, #548]	; (800e73c <_vfiprintf_r+0x240>)
 800e516:	429d      	cmp	r5, r3
 800e518:	d11b      	bne.n	800e552 <_vfiprintf_r+0x56>
 800e51a:	6875      	ldr	r5, [r6, #4]
 800e51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e51e:	07d9      	lsls	r1, r3, #31
 800e520:	d405      	bmi.n	800e52e <_vfiprintf_r+0x32>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	059a      	lsls	r2, r3, #22
 800e526:	d402      	bmi.n	800e52e <_vfiprintf_r+0x32>
 800e528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e52a:	f7ff ff49 	bl	800e3c0 <__retarget_lock_acquire_recursive>
 800e52e:	89ab      	ldrh	r3, [r5, #12]
 800e530:	071b      	lsls	r3, r3, #28
 800e532:	d501      	bpl.n	800e538 <_vfiprintf_r+0x3c>
 800e534:	692b      	ldr	r3, [r5, #16]
 800e536:	b9eb      	cbnz	r3, 800e574 <_vfiprintf_r+0x78>
 800e538:	4629      	mov	r1, r5
 800e53a:	4630      	mov	r0, r6
 800e53c:	f000 fb92 	bl	800ec64 <__swsetup_r>
 800e540:	b1c0      	cbz	r0, 800e574 <_vfiprintf_r+0x78>
 800e542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e544:	07dc      	lsls	r4, r3, #31
 800e546:	d50e      	bpl.n	800e566 <_vfiprintf_r+0x6a>
 800e548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e54c:	b01d      	add	sp, #116	; 0x74
 800e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e552:	4b7b      	ldr	r3, [pc, #492]	; (800e740 <_vfiprintf_r+0x244>)
 800e554:	429d      	cmp	r5, r3
 800e556:	d101      	bne.n	800e55c <_vfiprintf_r+0x60>
 800e558:	68b5      	ldr	r5, [r6, #8]
 800e55a:	e7df      	b.n	800e51c <_vfiprintf_r+0x20>
 800e55c:	4b79      	ldr	r3, [pc, #484]	; (800e744 <_vfiprintf_r+0x248>)
 800e55e:	429d      	cmp	r5, r3
 800e560:	bf08      	it	eq
 800e562:	68f5      	ldreq	r5, [r6, #12]
 800e564:	e7da      	b.n	800e51c <_vfiprintf_r+0x20>
 800e566:	89ab      	ldrh	r3, [r5, #12]
 800e568:	0598      	lsls	r0, r3, #22
 800e56a:	d4ed      	bmi.n	800e548 <_vfiprintf_r+0x4c>
 800e56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e56e:	f7ff ff28 	bl	800e3c2 <__retarget_lock_release_recursive>
 800e572:	e7e9      	b.n	800e548 <_vfiprintf_r+0x4c>
 800e574:	2300      	movs	r3, #0
 800e576:	9309      	str	r3, [sp, #36]	; 0x24
 800e578:	2320      	movs	r3, #32
 800e57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e582:	2330      	movs	r3, #48	; 0x30
 800e584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e748 <_vfiprintf_r+0x24c>
 800e588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e58c:	f04f 0901 	mov.w	r9, #1
 800e590:	4623      	mov	r3, r4
 800e592:	469a      	mov	sl, r3
 800e594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e598:	b10a      	cbz	r2, 800e59e <_vfiprintf_r+0xa2>
 800e59a:	2a25      	cmp	r2, #37	; 0x25
 800e59c:	d1f9      	bne.n	800e592 <_vfiprintf_r+0x96>
 800e59e:	ebba 0b04 	subs.w	fp, sl, r4
 800e5a2:	d00b      	beq.n	800e5bc <_vfiprintf_r+0xc0>
 800e5a4:	465b      	mov	r3, fp
 800e5a6:	4622      	mov	r2, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7ff ff93 	bl	800e4d6 <__sfputs_r>
 800e5b0:	3001      	adds	r0, #1
 800e5b2:	f000 80aa 	beq.w	800e70a <_vfiprintf_r+0x20e>
 800e5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5b8:	445a      	add	r2, fp
 800e5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 80a2 	beq.w	800e70a <_vfiprintf_r+0x20e>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5d0:	f10a 0a01 	add.w	sl, sl, #1
 800e5d4:	9304      	str	r3, [sp, #16]
 800e5d6:	9307      	str	r3, [sp, #28]
 800e5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e5de:	4654      	mov	r4, sl
 800e5e0:	2205      	movs	r2, #5
 800e5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e6:	4858      	ldr	r0, [pc, #352]	; (800e748 <_vfiprintf_r+0x24c>)
 800e5e8:	f7f1 fe02 	bl	80001f0 <memchr>
 800e5ec:	9a04      	ldr	r2, [sp, #16]
 800e5ee:	b9d8      	cbnz	r0, 800e628 <_vfiprintf_r+0x12c>
 800e5f0:	06d1      	lsls	r1, r2, #27
 800e5f2:	bf44      	itt	mi
 800e5f4:	2320      	movmi	r3, #32
 800e5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5fa:	0713      	lsls	r3, r2, #28
 800e5fc:	bf44      	itt	mi
 800e5fe:	232b      	movmi	r3, #43	; 0x2b
 800e600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e604:	f89a 3000 	ldrb.w	r3, [sl]
 800e608:	2b2a      	cmp	r3, #42	; 0x2a
 800e60a:	d015      	beq.n	800e638 <_vfiprintf_r+0x13c>
 800e60c:	9a07      	ldr	r2, [sp, #28]
 800e60e:	4654      	mov	r4, sl
 800e610:	2000      	movs	r0, #0
 800e612:	f04f 0c0a 	mov.w	ip, #10
 800e616:	4621      	mov	r1, r4
 800e618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e61c:	3b30      	subs	r3, #48	; 0x30
 800e61e:	2b09      	cmp	r3, #9
 800e620:	d94e      	bls.n	800e6c0 <_vfiprintf_r+0x1c4>
 800e622:	b1b0      	cbz	r0, 800e652 <_vfiprintf_r+0x156>
 800e624:	9207      	str	r2, [sp, #28]
 800e626:	e014      	b.n	800e652 <_vfiprintf_r+0x156>
 800e628:	eba0 0308 	sub.w	r3, r0, r8
 800e62c:	fa09 f303 	lsl.w	r3, r9, r3
 800e630:	4313      	orrs	r3, r2
 800e632:	9304      	str	r3, [sp, #16]
 800e634:	46a2      	mov	sl, r4
 800e636:	e7d2      	b.n	800e5de <_vfiprintf_r+0xe2>
 800e638:	9b03      	ldr	r3, [sp, #12]
 800e63a:	1d19      	adds	r1, r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	9103      	str	r1, [sp, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bfbb      	ittet	lt
 800e644:	425b      	neglt	r3, r3
 800e646:	f042 0202 	orrlt.w	r2, r2, #2
 800e64a:	9307      	strge	r3, [sp, #28]
 800e64c:	9307      	strlt	r3, [sp, #28]
 800e64e:	bfb8      	it	lt
 800e650:	9204      	strlt	r2, [sp, #16]
 800e652:	7823      	ldrb	r3, [r4, #0]
 800e654:	2b2e      	cmp	r3, #46	; 0x2e
 800e656:	d10c      	bne.n	800e672 <_vfiprintf_r+0x176>
 800e658:	7863      	ldrb	r3, [r4, #1]
 800e65a:	2b2a      	cmp	r3, #42	; 0x2a
 800e65c:	d135      	bne.n	800e6ca <_vfiprintf_r+0x1ce>
 800e65e:	9b03      	ldr	r3, [sp, #12]
 800e660:	1d1a      	adds	r2, r3, #4
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	9203      	str	r2, [sp, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	bfb8      	it	lt
 800e66a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e66e:	3402      	adds	r4, #2
 800e670:	9305      	str	r3, [sp, #20]
 800e672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e758 <_vfiprintf_r+0x25c>
 800e676:	7821      	ldrb	r1, [r4, #0]
 800e678:	2203      	movs	r2, #3
 800e67a:	4650      	mov	r0, sl
 800e67c:	f7f1 fdb8 	bl	80001f0 <memchr>
 800e680:	b140      	cbz	r0, 800e694 <_vfiprintf_r+0x198>
 800e682:	2340      	movs	r3, #64	; 0x40
 800e684:	eba0 000a 	sub.w	r0, r0, sl
 800e688:	fa03 f000 	lsl.w	r0, r3, r0
 800e68c:	9b04      	ldr	r3, [sp, #16]
 800e68e:	4303      	orrs	r3, r0
 800e690:	3401      	adds	r4, #1
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e698:	482c      	ldr	r0, [pc, #176]	; (800e74c <_vfiprintf_r+0x250>)
 800e69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e69e:	2206      	movs	r2, #6
 800e6a0:	f7f1 fda6 	bl	80001f0 <memchr>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d03f      	beq.n	800e728 <_vfiprintf_r+0x22c>
 800e6a8:	4b29      	ldr	r3, [pc, #164]	; (800e750 <_vfiprintf_r+0x254>)
 800e6aa:	bb1b      	cbnz	r3, 800e6f4 <_vfiprintf_r+0x1f8>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	3307      	adds	r3, #7
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	9303      	str	r3, [sp, #12]
 800e6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ba:	443b      	add	r3, r7
 800e6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6be:	e767      	b.n	800e590 <_vfiprintf_r+0x94>
 800e6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	e7a5      	b.n	800e616 <_vfiprintf_r+0x11a>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	9305      	str	r3, [sp, #20]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	f04f 0c0a 	mov.w	ip, #10
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6dc:	3a30      	subs	r2, #48	; 0x30
 800e6de:	2a09      	cmp	r2, #9
 800e6e0:	d903      	bls.n	800e6ea <_vfiprintf_r+0x1ee>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0c5      	beq.n	800e672 <_vfiprintf_r+0x176>
 800e6e6:	9105      	str	r1, [sp, #20]
 800e6e8:	e7c3      	b.n	800e672 <_vfiprintf_r+0x176>
 800e6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e7f0      	b.n	800e6d6 <_vfiprintf_r+0x1da>
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	4b16      	ldr	r3, [pc, #88]	; (800e754 <_vfiprintf_r+0x258>)
 800e6fc:	a904      	add	r1, sp, #16
 800e6fe:	4630      	mov	r0, r6
 800e700:	f3af 8000 	nop.w
 800e704:	4607      	mov	r7, r0
 800e706:	1c78      	adds	r0, r7, #1
 800e708:	d1d6      	bne.n	800e6b8 <_vfiprintf_r+0x1bc>
 800e70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e70c:	07d9      	lsls	r1, r3, #31
 800e70e:	d405      	bmi.n	800e71c <_vfiprintf_r+0x220>
 800e710:	89ab      	ldrh	r3, [r5, #12]
 800e712:	059a      	lsls	r2, r3, #22
 800e714:	d402      	bmi.n	800e71c <_vfiprintf_r+0x220>
 800e716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e718:	f7ff fe53 	bl	800e3c2 <__retarget_lock_release_recursive>
 800e71c:	89ab      	ldrh	r3, [r5, #12]
 800e71e:	065b      	lsls	r3, r3, #25
 800e720:	f53f af12 	bmi.w	800e548 <_vfiprintf_r+0x4c>
 800e724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e726:	e711      	b.n	800e54c <_vfiprintf_r+0x50>
 800e728:	ab03      	add	r3, sp, #12
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	462a      	mov	r2, r5
 800e72e:	4b09      	ldr	r3, [pc, #36]	; (800e754 <_vfiprintf_r+0x258>)
 800e730:	a904      	add	r1, sp, #16
 800e732:	4630      	mov	r0, r6
 800e734:	f000 f880 	bl	800e838 <_printf_i>
 800e738:	e7e4      	b.n	800e704 <_vfiprintf_r+0x208>
 800e73a:	bf00      	nop
 800e73c:	0800f3ec 	.word	0x0800f3ec
 800e740:	0800f40c 	.word	0x0800f40c
 800e744:	0800f3cc 	.word	0x0800f3cc
 800e748:	0800f42c 	.word	0x0800f42c
 800e74c:	0800f436 	.word	0x0800f436
 800e750:	00000000 	.word	0x00000000
 800e754:	0800e4d7 	.word	0x0800e4d7
 800e758:	0800f432 	.word	0x0800f432

0800e75c <_printf_common>:
 800e75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e760:	4616      	mov	r6, r2
 800e762:	4699      	mov	r9, r3
 800e764:	688a      	ldr	r2, [r1, #8]
 800e766:	690b      	ldr	r3, [r1, #16]
 800e768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e76c:	4293      	cmp	r3, r2
 800e76e:	bfb8      	it	lt
 800e770:	4613      	movlt	r3, r2
 800e772:	6033      	str	r3, [r6, #0]
 800e774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e778:	4607      	mov	r7, r0
 800e77a:	460c      	mov	r4, r1
 800e77c:	b10a      	cbz	r2, 800e782 <_printf_common+0x26>
 800e77e:	3301      	adds	r3, #1
 800e780:	6033      	str	r3, [r6, #0]
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	0699      	lsls	r1, r3, #26
 800e786:	bf42      	ittt	mi
 800e788:	6833      	ldrmi	r3, [r6, #0]
 800e78a:	3302      	addmi	r3, #2
 800e78c:	6033      	strmi	r3, [r6, #0]
 800e78e:	6825      	ldr	r5, [r4, #0]
 800e790:	f015 0506 	ands.w	r5, r5, #6
 800e794:	d106      	bne.n	800e7a4 <_printf_common+0x48>
 800e796:	f104 0a19 	add.w	sl, r4, #25
 800e79a:	68e3      	ldr	r3, [r4, #12]
 800e79c:	6832      	ldr	r2, [r6, #0]
 800e79e:	1a9b      	subs	r3, r3, r2
 800e7a0:	42ab      	cmp	r3, r5
 800e7a2:	dc26      	bgt.n	800e7f2 <_printf_common+0x96>
 800e7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7a8:	1e13      	subs	r3, r2, #0
 800e7aa:	6822      	ldr	r2, [r4, #0]
 800e7ac:	bf18      	it	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	0692      	lsls	r2, r2, #26
 800e7b2:	d42b      	bmi.n	800e80c <_printf_common+0xb0>
 800e7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7b8:	4649      	mov	r1, r9
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	47c0      	blx	r8
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d01e      	beq.n	800e800 <_printf_common+0xa4>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	68e5      	ldr	r5, [r4, #12]
 800e7c6:	6832      	ldr	r2, [r6, #0]
 800e7c8:	f003 0306 	and.w	r3, r3, #6
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	bf08      	it	eq
 800e7d0:	1aad      	subeq	r5, r5, r2
 800e7d2:	68a3      	ldr	r3, [r4, #8]
 800e7d4:	6922      	ldr	r2, [r4, #16]
 800e7d6:	bf0c      	ite	eq
 800e7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7dc:	2500      	movne	r5, #0
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	bfc4      	itt	gt
 800e7e2:	1a9b      	subgt	r3, r3, r2
 800e7e4:	18ed      	addgt	r5, r5, r3
 800e7e6:	2600      	movs	r6, #0
 800e7e8:	341a      	adds	r4, #26
 800e7ea:	42b5      	cmp	r5, r6
 800e7ec:	d11a      	bne.n	800e824 <_printf_common+0xc8>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e008      	b.n	800e804 <_printf_common+0xa8>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	4652      	mov	r2, sl
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	47c0      	blx	r8
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	d103      	bne.n	800e808 <_printf_common+0xac>
 800e800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e808:	3501      	adds	r5, #1
 800e80a:	e7c6      	b.n	800e79a <_printf_common+0x3e>
 800e80c:	18e1      	adds	r1, r4, r3
 800e80e:	1c5a      	adds	r2, r3, #1
 800e810:	2030      	movs	r0, #48	; 0x30
 800e812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e816:	4422      	add	r2, r4
 800e818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e81c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e820:	3302      	adds	r3, #2
 800e822:	e7c7      	b.n	800e7b4 <_printf_common+0x58>
 800e824:	2301      	movs	r3, #1
 800e826:	4622      	mov	r2, r4
 800e828:	4649      	mov	r1, r9
 800e82a:	4638      	mov	r0, r7
 800e82c:	47c0      	blx	r8
 800e82e:	3001      	adds	r0, #1
 800e830:	d0e6      	beq.n	800e800 <_printf_common+0xa4>
 800e832:	3601      	adds	r6, #1
 800e834:	e7d9      	b.n	800e7ea <_printf_common+0x8e>
	...

0800e838 <_printf_i>:
 800e838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e83c:	7e0f      	ldrb	r7, [r1, #24]
 800e83e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e840:	2f78      	cmp	r7, #120	; 0x78
 800e842:	4691      	mov	r9, r2
 800e844:	4680      	mov	r8, r0
 800e846:	460c      	mov	r4, r1
 800e848:	469a      	mov	sl, r3
 800e84a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e84e:	d807      	bhi.n	800e860 <_printf_i+0x28>
 800e850:	2f62      	cmp	r7, #98	; 0x62
 800e852:	d80a      	bhi.n	800e86a <_printf_i+0x32>
 800e854:	2f00      	cmp	r7, #0
 800e856:	f000 80d8 	beq.w	800ea0a <_printf_i+0x1d2>
 800e85a:	2f58      	cmp	r7, #88	; 0x58
 800e85c:	f000 80a3 	beq.w	800e9a6 <_printf_i+0x16e>
 800e860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e868:	e03a      	b.n	800e8e0 <_printf_i+0xa8>
 800e86a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e86e:	2b15      	cmp	r3, #21
 800e870:	d8f6      	bhi.n	800e860 <_printf_i+0x28>
 800e872:	a101      	add	r1, pc, #4	; (adr r1, 800e878 <_printf_i+0x40>)
 800e874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e878:	0800e8d1 	.word	0x0800e8d1
 800e87c:	0800e8e5 	.word	0x0800e8e5
 800e880:	0800e861 	.word	0x0800e861
 800e884:	0800e861 	.word	0x0800e861
 800e888:	0800e861 	.word	0x0800e861
 800e88c:	0800e861 	.word	0x0800e861
 800e890:	0800e8e5 	.word	0x0800e8e5
 800e894:	0800e861 	.word	0x0800e861
 800e898:	0800e861 	.word	0x0800e861
 800e89c:	0800e861 	.word	0x0800e861
 800e8a0:	0800e861 	.word	0x0800e861
 800e8a4:	0800e9f1 	.word	0x0800e9f1
 800e8a8:	0800e915 	.word	0x0800e915
 800e8ac:	0800e9d3 	.word	0x0800e9d3
 800e8b0:	0800e861 	.word	0x0800e861
 800e8b4:	0800e861 	.word	0x0800e861
 800e8b8:	0800ea13 	.word	0x0800ea13
 800e8bc:	0800e861 	.word	0x0800e861
 800e8c0:	0800e915 	.word	0x0800e915
 800e8c4:	0800e861 	.word	0x0800e861
 800e8c8:	0800e861 	.word	0x0800e861
 800e8cc:	0800e9db 	.word	0x0800e9db
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	1d1a      	adds	r2, r3, #4
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	602a      	str	r2, [r5, #0]
 800e8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e0a3      	b.n	800ea2c <_printf_i+0x1f4>
 800e8e4:	6820      	ldr	r0, [r4, #0]
 800e8e6:	6829      	ldr	r1, [r5, #0]
 800e8e8:	0606      	lsls	r6, r0, #24
 800e8ea:	f101 0304 	add.w	r3, r1, #4
 800e8ee:	d50a      	bpl.n	800e906 <_printf_i+0xce>
 800e8f0:	680e      	ldr	r6, [r1, #0]
 800e8f2:	602b      	str	r3, [r5, #0]
 800e8f4:	2e00      	cmp	r6, #0
 800e8f6:	da03      	bge.n	800e900 <_printf_i+0xc8>
 800e8f8:	232d      	movs	r3, #45	; 0x2d
 800e8fa:	4276      	negs	r6, r6
 800e8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e900:	485e      	ldr	r0, [pc, #376]	; (800ea7c <_printf_i+0x244>)
 800e902:	230a      	movs	r3, #10
 800e904:	e019      	b.n	800e93a <_printf_i+0x102>
 800e906:	680e      	ldr	r6, [r1, #0]
 800e908:	602b      	str	r3, [r5, #0]
 800e90a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e90e:	bf18      	it	ne
 800e910:	b236      	sxthne	r6, r6
 800e912:	e7ef      	b.n	800e8f4 <_printf_i+0xbc>
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	6820      	ldr	r0, [r4, #0]
 800e918:	1d19      	adds	r1, r3, #4
 800e91a:	6029      	str	r1, [r5, #0]
 800e91c:	0601      	lsls	r1, r0, #24
 800e91e:	d501      	bpl.n	800e924 <_printf_i+0xec>
 800e920:	681e      	ldr	r6, [r3, #0]
 800e922:	e002      	b.n	800e92a <_printf_i+0xf2>
 800e924:	0646      	lsls	r6, r0, #25
 800e926:	d5fb      	bpl.n	800e920 <_printf_i+0xe8>
 800e928:	881e      	ldrh	r6, [r3, #0]
 800e92a:	4854      	ldr	r0, [pc, #336]	; (800ea7c <_printf_i+0x244>)
 800e92c:	2f6f      	cmp	r7, #111	; 0x6f
 800e92e:	bf0c      	ite	eq
 800e930:	2308      	moveq	r3, #8
 800e932:	230a      	movne	r3, #10
 800e934:	2100      	movs	r1, #0
 800e936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e93a:	6865      	ldr	r5, [r4, #4]
 800e93c:	60a5      	str	r5, [r4, #8]
 800e93e:	2d00      	cmp	r5, #0
 800e940:	bfa2      	ittt	ge
 800e942:	6821      	ldrge	r1, [r4, #0]
 800e944:	f021 0104 	bicge.w	r1, r1, #4
 800e948:	6021      	strge	r1, [r4, #0]
 800e94a:	b90e      	cbnz	r6, 800e950 <_printf_i+0x118>
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	d04d      	beq.n	800e9ec <_printf_i+0x1b4>
 800e950:	4615      	mov	r5, r2
 800e952:	fbb6 f1f3 	udiv	r1, r6, r3
 800e956:	fb03 6711 	mls	r7, r3, r1, r6
 800e95a:	5dc7      	ldrb	r7, [r0, r7]
 800e95c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e960:	4637      	mov	r7, r6
 800e962:	42bb      	cmp	r3, r7
 800e964:	460e      	mov	r6, r1
 800e966:	d9f4      	bls.n	800e952 <_printf_i+0x11a>
 800e968:	2b08      	cmp	r3, #8
 800e96a:	d10b      	bne.n	800e984 <_printf_i+0x14c>
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	07de      	lsls	r6, r3, #31
 800e970:	d508      	bpl.n	800e984 <_printf_i+0x14c>
 800e972:	6923      	ldr	r3, [r4, #16]
 800e974:	6861      	ldr	r1, [r4, #4]
 800e976:	4299      	cmp	r1, r3
 800e978:	bfde      	ittt	le
 800e97a:	2330      	movle	r3, #48	; 0x30
 800e97c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e980:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e984:	1b52      	subs	r2, r2, r5
 800e986:	6122      	str	r2, [r4, #16]
 800e988:	f8cd a000 	str.w	sl, [sp]
 800e98c:	464b      	mov	r3, r9
 800e98e:	aa03      	add	r2, sp, #12
 800e990:	4621      	mov	r1, r4
 800e992:	4640      	mov	r0, r8
 800e994:	f7ff fee2 	bl	800e75c <_printf_common>
 800e998:	3001      	adds	r0, #1
 800e99a:	d14c      	bne.n	800ea36 <_printf_i+0x1fe>
 800e99c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9a0:	b004      	add	sp, #16
 800e9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a6:	4835      	ldr	r0, [pc, #212]	; (800ea7c <_printf_i+0x244>)
 800e9a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9ac:	6829      	ldr	r1, [r5, #0]
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9b4:	6029      	str	r1, [r5, #0]
 800e9b6:	061d      	lsls	r5, r3, #24
 800e9b8:	d514      	bpl.n	800e9e4 <_printf_i+0x1ac>
 800e9ba:	07df      	lsls	r7, r3, #31
 800e9bc:	bf44      	itt	mi
 800e9be:	f043 0320 	orrmi.w	r3, r3, #32
 800e9c2:	6023      	strmi	r3, [r4, #0]
 800e9c4:	b91e      	cbnz	r6, 800e9ce <_printf_i+0x196>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f023 0320 	bic.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2310      	movs	r3, #16
 800e9d0:	e7b0      	b.n	800e934 <_printf_i+0xfc>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	f043 0320 	orr.w	r3, r3, #32
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	2378      	movs	r3, #120	; 0x78
 800e9dc:	4828      	ldr	r0, [pc, #160]	; (800ea80 <_printf_i+0x248>)
 800e9de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9e2:	e7e3      	b.n	800e9ac <_printf_i+0x174>
 800e9e4:	0659      	lsls	r1, r3, #25
 800e9e6:	bf48      	it	mi
 800e9e8:	b2b6      	uxthmi	r6, r6
 800e9ea:	e7e6      	b.n	800e9ba <_printf_i+0x182>
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	e7bb      	b.n	800e968 <_printf_i+0x130>
 800e9f0:	682b      	ldr	r3, [r5, #0]
 800e9f2:	6826      	ldr	r6, [r4, #0]
 800e9f4:	6961      	ldr	r1, [r4, #20]
 800e9f6:	1d18      	adds	r0, r3, #4
 800e9f8:	6028      	str	r0, [r5, #0]
 800e9fa:	0635      	lsls	r5, r6, #24
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	d501      	bpl.n	800ea04 <_printf_i+0x1cc>
 800ea00:	6019      	str	r1, [r3, #0]
 800ea02:	e002      	b.n	800ea0a <_printf_i+0x1d2>
 800ea04:	0670      	lsls	r0, r6, #25
 800ea06:	d5fb      	bpl.n	800ea00 <_printf_i+0x1c8>
 800ea08:	8019      	strh	r1, [r3, #0]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	6123      	str	r3, [r4, #16]
 800ea0e:	4615      	mov	r5, r2
 800ea10:	e7ba      	b.n	800e988 <_printf_i+0x150>
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	1d1a      	adds	r2, r3, #4
 800ea16:	602a      	str	r2, [r5, #0]
 800ea18:	681d      	ldr	r5, [r3, #0]
 800ea1a:	6862      	ldr	r2, [r4, #4]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f7f1 fbe6 	bl	80001f0 <memchr>
 800ea24:	b108      	cbz	r0, 800ea2a <_printf_i+0x1f2>
 800ea26:	1b40      	subs	r0, r0, r5
 800ea28:	6060      	str	r0, [r4, #4]
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	6123      	str	r3, [r4, #16]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea34:	e7a8      	b.n	800e988 <_printf_i+0x150>
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	47d0      	blx	sl
 800ea40:	3001      	adds	r0, #1
 800ea42:	d0ab      	beq.n	800e99c <_printf_i+0x164>
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	079b      	lsls	r3, r3, #30
 800ea48:	d413      	bmi.n	800ea72 <_printf_i+0x23a>
 800ea4a:	68e0      	ldr	r0, [r4, #12]
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	4298      	cmp	r0, r3
 800ea50:	bfb8      	it	lt
 800ea52:	4618      	movlt	r0, r3
 800ea54:	e7a4      	b.n	800e9a0 <_printf_i+0x168>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4632      	mov	r2, r6
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	47d0      	blx	sl
 800ea60:	3001      	adds	r0, #1
 800ea62:	d09b      	beq.n	800e99c <_printf_i+0x164>
 800ea64:	3501      	adds	r5, #1
 800ea66:	68e3      	ldr	r3, [r4, #12]
 800ea68:	9903      	ldr	r1, [sp, #12]
 800ea6a:	1a5b      	subs	r3, r3, r1
 800ea6c:	42ab      	cmp	r3, r5
 800ea6e:	dcf2      	bgt.n	800ea56 <_printf_i+0x21e>
 800ea70:	e7eb      	b.n	800ea4a <_printf_i+0x212>
 800ea72:	2500      	movs	r5, #0
 800ea74:	f104 0619 	add.w	r6, r4, #25
 800ea78:	e7f5      	b.n	800ea66 <_printf_i+0x22e>
 800ea7a:	bf00      	nop
 800ea7c:	0800f43d 	.word	0x0800f43d
 800ea80:	0800f44e 	.word	0x0800f44e

0800ea84 <_putc_r>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	460d      	mov	r5, r1
 800ea88:	4614      	mov	r4, r2
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	b118      	cbz	r0, 800ea96 <_putc_r+0x12>
 800ea8e:	6983      	ldr	r3, [r0, #24]
 800ea90:	b90b      	cbnz	r3, 800ea96 <_putc_r+0x12>
 800ea92:	f7ff fbf7 	bl	800e284 <__sinit>
 800ea96:	4b1c      	ldr	r3, [pc, #112]	; (800eb08 <_putc_r+0x84>)
 800ea98:	429c      	cmp	r4, r3
 800ea9a:	d124      	bne.n	800eae6 <_putc_r+0x62>
 800ea9c:	6874      	ldr	r4, [r6, #4]
 800ea9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaa0:	07d8      	lsls	r0, r3, #31
 800eaa2:	d405      	bmi.n	800eab0 <_putc_r+0x2c>
 800eaa4:	89a3      	ldrh	r3, [r4, #12]
 800eaa6:	0599      	lsls	r1, r3, #22
 800eaa8:	d402      	bmi.n	800eab0 <_putc_r+0x2c>
 800eaaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaac:	f7ff fc88 	bl	800e3c0 <__retarget_lock_acquire_recursive>
 800eab0:	68a3      	ldr	r3, [r4, #8]
 800eab2:	3b01      	subs	r3, #1
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	60a3      	str	r3, [r4, #8]
 800eab8:	da05      	bge.n	800eac6 <_putc_r+0x42>
 800eaba:	69a2      	ldr	r2, [r4, #24]
 800eabc:	4293      	cmp	r3, r2
 800eabe:	db1c      	blt.n	800eafa <_putc_r+0x76>
 800eac0:	b2eb      	uxtb	r3, r5
 800eac2:	2b0a      	cmp	r3, #10
 800eac4:	d019      	beq.n	800eafa <_putc_r+0x76>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	1c5a      	adds	r2, r3, #1
 800eaca:	6022      	str	r2, [r4, #0]
 800eacc:	701d      	strb	r5, [r3, #0]
 800eace:	b2ed      	uxtb	r5, r5
 800ead0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ead2:	07da      	lsls	r2, r3, #31
 800ead4:	d405      	bmi.n	800eae2 <_putc_r+0x5e>
 800ead6:	89a3      	ldrh	r3, [r4, #12]
 800ead8:	059b      	lsls	r3, r3, #22
 800eada:	d402      	bmi.n	800eae2 <_putc_r+0x5e>
 800eadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eade:	f7ff fc70 	bl	800e3c2 <__retarget_lock_release_recursive>
 800eae2:	4628      	mov	r0, r5
 800eae4:	bd70      	pop	{r4, r5, r6, pc}
 800eae6:	4b09      	ldr	r3, [pc, #36]	; (800eb0c <_putc_r+0x88>)
 800eae8:	429c      	cmp	r4, r3
 800eaea:	d101      	bne.n	800eaf0 <_putc_r+0x6c>
 800eaec:	68b4      	ldr	r4, [r6, #8]
 800eaee:	e7d6      	b.n	800ea9e <_putc_r+0x1a>
 800eaf0:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <_putc_r+0x8c>)
 800eaf2:	429c      	cmp	r4, r3
 800eaf4:	bf08      	it	eq
 800eaf6:	68f4      	ldreq	r4, [r6, #12]
 800eaf8:	e7d1      	b.n	800ea9e <_putc_r+0x1a>
 800eafa:	4629      	mov	r1, r5
 800eafc:	4622      	mov	r2, r4
 800eafe:	4630      	mov	r0, r6
 800eb00:	f000 f84c 	bl	800eb9c <__swbuf_r>
 800eb04:	4605      	mov	r5, r0
 800eb06:	e7e3      	b.n	800ead0 <_putc_r+0x4c>
 800eb08:	0800f3ec 	.word	0x0800f3ec
 800eb0c:	0800f40c 	.word	0x0800f40c
 800eb10:	0800f3cc 	.word	0x0800f3cc

0800eb14 <__sread>:
 800eb14:	b510      	push	{r4, lr}
 800eb16:	460c      	mov	r4, r1
 800eb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1c:	f000 f954 	bl	800edc8 <_read_r>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	bfab      	itete	ge
 800eb24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb26:	89a3      	ldrhlt	r3, [r4, #12]
 800eb28:	181b      	addge	r3, r3, r0
 800eb2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb2e:	bfac      	ite	ge
 800eb30:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb32:	81a3      	strhlt	r3, [r4, #12]
 800eb34:	bd10      	pop	{r4, pc}

0800eb36 <__swrite>:
 800eb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	461f      	mov	r7, r3
 800eb3c:	898b      	ldrh	r3, [r1, #12]
 800eb3e:	05db      	lsls	r3, r3, #23
 800eb40:	4605      	mov	r5, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	4616      	mov	r6, r2
 800eb46:	d505      	bpl.n	800eb54 <__swrite+0x1e>
 800eb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f000 f928 	bl	800eda4 <_lseek_r>
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb5e:	81a3      	strh	r3, [r4, #12]
 800eb60:	4632      	mov	r2, r6
 800eb62:	463b      	mov	r3, r7
 800eb64:	4628      	mov	r0, r5
 800eb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6a:	f000 b869 	b.w	800ec40 <_write_r>

0800eb6e <__sseek>:
 800eb6e:	b510      	push	{r4, lr}
 800eb70:	460c      	mov	r4, r1
 800eb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb76:	f000 f915 	bl	800eda4 <_lseek_r>
 800eb7a:	1c43      	adds	r3, r0, #1
 800eb7c:	89a3      	ldrh	r3, [r4, #12]
 800eb7e:	bf15      	itete	ne
 800eb80:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb8a:	81a3      	strheq	r3, [r4, #12]
 800eb8c:	bf18      	it	ne
 800eb8e:	81a3      	strhne	r3, [r4, #12]
 800eb90:	bd10      	pop	{r4, pc}

0800eb92 <__sclose>:
 800eb92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb96:	f000 b8d3 	b.w	800ed40 <_close_r>
	...

0800eb9c <__swbuf_r>:
 800eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9e:	460e      	mov	r6, r1
 800eba0:	4614      	mov	r4, r2
 800eba2:	4605      	mov	r5, r0
 800eba4:	b118      	cbz	r0, 800ebae <__swbuf_r+0x12>
 800eba6:	6983      	ldr	r3, [r0, #24]
 800eba8:	b90b      	cbnz	r3, 800ebae <__swbuf_r+0x12>
 800ebaa:	f7ff fb6b 	bl	800e284 <__sinit>
 800ebae:	4b21      	ldr	r3, [pc, #132]	; (800ec34 <__swbuf_r+0x98>)
 800ebb0:	429c      	cmp	r4, r3
 800ebb2:	d12b      	bne.n	800ec0c <__swbuf_r+0x70>
 800ebb4:	686c      	ldr	r4, [r5, #4]
 800ebb6:	69a3      	ldr	r3, [r4, #24]
 800ebb8:	60a3      	str	r3, [r4, #8]
 800ebba:	89a3      	ldrh	r3, [r4, #12]
 800ebbc:	071a      	lsls	r2, r3, #28
 800ebbe:	d52f      	bpl.n	800ec20 <__swbuf_r+0x84>
 800ebc0:	6923      	ldr	r3, [r4, #16]
 800ebc2:	b36b      	cbz	r3, 800ec20 <__swbuf_r+0x84>
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	6820      	ldr	r0, [r4, #0]
 800ebc8:	1ac0      	subs	r0, r0, r3
 800ebca:	6963      	ldr	r3, [r4, #20]
 800ebcc:	b2f6      	uxtb	r6, r6
 800ebce:	4283      	cmp	r3, r0
 800ebd0:	4637      	mov	r7, r6
 800ebd2:	dc04      	bgt.n	800ebde <__swbuf_r+0x42>
 800ebd4:	4621      	mov	r1, r4
 800ebd6:	4628      	mov	r0, r5
 800ebd8:	f7ff fac0 	bl	800e15c <_fflush_r>
 800ebdc:	bb30      	cbnz	r0, 800ec2c <__swbuf_r+0x90>
 800ebde:	68a3      	ldr	r3, [r4, #8]
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	60a3      	str	r3, [r4, #8]
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	1c5a      	adds	r2, r3, #1
 800ebe8:	6022      	str	r2, [r4, #0]
 800ebea:	701e      	strb	r6, [r3, #0]
 800ebec:	6963      	ldr	r3, [r4, #20]
 800ebee:	3001      	adds	r0, #1
 800ebf0:	4283      	cmp	r3, r0
 800ebf2:	d004      	beq.n	800ebfe <__swbuf_r+0x62>
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	07db      	lsls	r3, r3, #31
 800ebf8:	d506      	bpl.n	800ec08 <__swbuf_r+0x6c>
 800ebfa:	2e0a      	cmp	r6, #10
 800ebfc:	d104      	bne.n	800ec08 <__swbuf_r+0x6c>
 800ebfe:	4621      	mov	r1, r4
 800ec00:	4628      	mov	r0, r5
 800ec02:	f7ff faab 	bl	800e15c <_fflush_r>
 800ec06:	b988      	cbnz	r0, 800ec2c <__swbuf_r+0x90>
 800ec08:	4638      	mov	r0, r7
 800ec0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec0c:	4b0a      	ldr	r3, [pc, #40]	; (800ec38 <__swbuf_r+0x9c>)
 800ec0e:	429c      	cmp	r4, r3
 800ec10:	d101      	bne.n	800ec16 <__swbuf_r+0x7a>
 800ec12:	68ac      	ldr	r4, [r5, #8]
 800ec14:	e7cf      	b.n	800ebb6 <__swbuf_r+0x1a>
 800ec16:	4b09      	ldr	r3, [pc, #36]	; (800ec3c <__swbuf_r+0xa0>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	bf08      	it	eq
 800ec1c:	68ec      	ldreq	r4, [r5, #12]
 800ec1e:	e7ca      	b.n	800ebb6 <__swbuf_r+0x1a>
 800ec20:	4621      	mov	r1, r4
 800ec22:	4628      	mov	r0, r5
 800ec24:	f000 f81e 	bl	800ec64 <__swsetup_r>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d0cb      	beq.n	800ebc4 <__swbuf_r+0x28>
 800ec2c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ec30:	e7ea      	b.n	800ec08 <__swbuf_r+0x6c>
 800ec32:	bf00      	nop
 800ec34:	0800f3ec 	.word	0x0800f3ec
 800ec38:	0800f40c 	.word	0x0800f40c
 800ec3c:	0800f3cc 	.word	0x0800f3cc

0800ec40 <_write_r>:
 800ec40:	b538      	push	{r3, r4, r5, lr}
 800ec42:	4d07      	ldr	r5, [pc, #28]	; (800ec60 <_write_r+0x20>)
 800ec44:	4604      	mov	r4, r0
 800ec46:	4608      	mov	r0, r1
 800ec48:	4611      	mov	r1, r2
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	602a      	str	r2, [r5, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	f7f3 fe0e 	bl	8002870 <_write>
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	d102      	bne.n	800ec5e <_write_r+0x1e>
 800ec58:	682b      	ldr	r3, [r5, #0]
 800ec5a:	b103      	cbz	r3, 800ec5e <_write_r+0x1e>
 800ec5c:	6023      	str	r3, [r4, #0]
 800ec5e:	bd38      	pop	{r3, r4, r5, pc}
 800ec60:	20003ae4 	.word	0x20003ae4

0800ec64 <__swsetup_r>:
 800ec64:	4b32      	ldr	r3, [pc, #200]	; (800ed30 <__swsetup_r+0xcc>)
 800ec66:	b570      	push	{r4, r5, r6, lr}
 800ec68:	681d      	ldr	r5, [r3, #0]
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460c      	mov	r4, r1
 800ec6e:	b125      	cbz	r5, 800ec7a <__swsetup_r+0x16>
 800ec70:	69ab      	ldr	r3, [r5, #24]
 800ec72:	b913      	cbnz	r3, 800ec7a <__swsetup_r+0x16>
 800ec74:	4628      	mov	r0, r5
 800ec76:	f7ff fb05 	bl	800e284 <__sinit>
 800ec7a:	4b2e      	ldr	r3, [pc, #184]	; (800ed34 <__swsetup_r+0xd0>)
 800ec7c:	429c      	cmp	r4, r3
 800ec7e:	d10f      	bne.n	800eca0 <__swsetup_r+0x3c>
 800ec80:	686c      	ldr	r4, [r5, #4]
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec88:	0719      	lsls	r1, r3, #28
 800ec8a:	d42c      	bmi.n	800ece6 <__swsetup_r+0x82>
 800ec8c:	06dd      	lsls	r5, r3, #27
 800ec8e:	d411      	bmi.n	800ecb4 <__swsetup_r+0x50>
 800ec90:	2309      	movs	r3, #9
 800ec92:	6033      	str	r3, [r6, #0]
 800ec94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec98:	81a3      	strh	r3, [r4, #12]
 800ec9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec9e:	e03e      	b.n	800ed1e <__swsetup_r+0xba>
 800eca0:	4b25      	ldr	r3, [pc, #148]	; (800ed38 <__swsetup_r+0xd4>)
 800eca2:	429c      	cmp	r4, r3
 800eca4:	d101      	bne.n	800ecaa <__swsetup_r+0x46>
 800eca6:	68ac      	ldr	r4, [r5, #8]
 800eca8:	e7eb      	b.n	800ec82 <__swsetup_r+0x1e>
 800ecaa:	4b24      	ldr	r3, [pc, #144]	; (800ed3c <__swsetup_r+0xd8>)
 800ecac:	429c      	cmp	r4, r3
 800ecae:	bf08      	it	eq
 800ecb0:	68ec      	ldreq	r4, [r5, #12]
 800ecb2:	e7e6      	b.n	800ec82 <__swsetup_r+0x1e>
 800ecb4:	0758      	lsls	r0, r3, #29
 800ecb6:	d512      	bpl.n	800ecde <__swsetup_r+0x7a>
 800ecb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecba:	b141      	cbz	r1, 800ecce <__swsetup_r+0x6a>
 800ecbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecc0:	4299      	cmp	r1, r3
 800ecc2:	d002      	beq.n	800ecca <__swsetup_r+0x66>
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7fe ff53 	bl	800db70 <_free_r>
 800ecca:	2300      	movs	r3, #0
 800eccc:	6363      	str	r3, [r4, #52]	; 0x34
 800ecce:	89a3      	ldrh	r3, [r4, #12]
 800ecd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecd4:	81a3      	strh	r3, [r4, #12]
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	6063      	str	r3, [r4, #4]
 800ecda:	6923      	ldr	r3, [r4, #16]
 800ecdc:	6023      	str	r3, [r4, #0]
 800ecde:	89a3      	ldrh	r3, [r4, #12]
 800ece0:	f043 0308 	orr.w	r3, r3, #8
 800ece4:	81a3      	strh	r3, [r4, #12]
 800ece6:	6923      	ldr	r3, [r4, #16]
 800ece8:	b94b      	cbnz	r3, 800ecfe <__swsetup_r+0x9a>
 800ecea:	89a3      	ldrh	r3, [r4, #12]
 800ecec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf4:	d003      	beq.n	800ecfe <__swsetup_r+0x9a>
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f7ff fb89 	bl	800e410 <__smakebuf_r>
 800ecfe:	89a0      	ldrh	r0, [r4, #12]
 800ed00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed04:	f010 0301 	ands.w	r3, r0, #1
 800ed08:	d00a      	beq.n	800ed20 <__swsetup_r+0xbc>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	60a3      	str	r3, [r4, #8]
 800ed0e:	6963      	ldr	r3, [r4, #20]
 800ed10:	425b      	negs	r3, r3
 800ed12:	61a3      	str	r3, [r4, #24]
 800ed14:	6923      	ldr	r3, [r4, #16]
 800ed16:	b943      	cbnz	r3, 800ed2a <__swsetup_r+0xc6>
 800ed18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed1c:	d1ba      	bne.n	800ec94 <__swsetup_r+0x30>
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	0781      	lsls	r1, r0, #30
 800ed22:	bf58      	it	pl
 800ed24:	6963      	ldrpl	r3, [r4, #20]
 800ed26:	60a3      	str	r3, [r4, #8]
 800ed28:	e7f4      	b.n	800ed14 <__swsetup_r+0xb0>
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	e7f7      	b.n	800ed1e <__swsetup_r+0xba>
 800ed2e:	bf00      	nop
 800ed30:	200000f4 	.word	0x200000f4
 800ed34:	0800f3ec 	.word	0x0800f3ec
 800ed38:	0800f40c 	.word	0x0800f40c
 800ed3c:	0800f3cc 	.word	0x0800f3cc

0800ed40 <_close_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d06      	ldr	r5, [pc, #24]	; (800ed5c <_close_r+0x1c>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	f7f3 fdbc 	bl	80028c8 <_close>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d102      	bne.n	800ed5a <_close_r+0x1a>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	b103      	cbz	r3, 800ed5a <_close_r+0x1a>
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	20003ae4 	.word	0x20003ae4

0800ed60 <_fstat_r>:
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	4d07      	ldr	r5, [pc, #28]	; (800ed80 <_fstat_r+0x20>)
 800ed64:	2300      	movs	r3, #0
 800ed66:	4604      	mov	r4, r0
 800ed68:	4608      	mov	r0, r1
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	f7f3 fdfb 	bl	8002968 <_fstat>
 800ed72:	1c43      	adds	r3, r0, #1
 800ed74:	d102      	bne.n	800ed7c <_fstat_r+0x1c>
 800ed76:	682b      	ldr	r3, [r5, #0]
 800ed78:	b103      	cbz	r3, 800ed7c <_fstat_r+0x1c>
 800ed7a:	6023      	str	r3, [r4, #0]
 800ed7c:	bd38      	pop	{r3, r4, r5, pc}
 800ed7e:	bf00      	nop
 800ed80:	20003ae4 	.word	0x20003ae4

0800ed84 <_isatty_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	4d06      	ldr	r5, [pc, #24]	; (800eda0 <_isatty_r+0x1c>)
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	602b      	str	r3, [r5, #0]
 800ed90:	f7f3 fd58 	bl	8002844 <_isatty>
 800ed94:	1c43      	adds	r3, r0, #1
 800ed96:	d102      	bne.n	800ed9e <_isatty_r+0x1a>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	b103      	cbz	r3, 800ed9e <_isatty_r+0x1a>
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	20003ae4 	.word	0x20003ae4

0800eda4 <_lseek_r>:
 800eda4:	b538      	push	{r3, r4, r5, lr}
 800eda6:	4d07      	ldr	r5, [pc, #28]	; (800edc4 <_lseek_r+0x20>)
 800eda8:	4604      	mov	r4, r0
 800edaa:	4608      	mov	r0, r1
 800edac:	4611      	mov	r1, r2
 800edae:	2200      	movs	r2, #0
 800edb0:	602a      	str	r2, [r5, #0]
 800edb2:	461a      	mov	r2, r3
 800edb4:	f7f3 fd9f 	bl	80028f6 <_lseek>
 800edb8:	1c43      	adds	r3, r0, #1
 800edba:	d102      	bne.n	800edc2 <_lseek_r+0x1e>
 800edbc:	682b      	ldr	r3, [r5, #0]
 800edbe:	b103      	cbz	r3, 800edc2 <_lseek_r+0x1e>
 800edc0:	6023      	str	r3, [r4, #0]
 800edc2:	bd38      	pop	{r3, r4, r5, pc}
 800edc4:	20003ae4 	.word	0x20003ae4

0800edc8 <_read_r>:
 800edc8:	b538      	push	{r3, r4, r5, lr}
 800edca:	4d07      	ldr	r5, [pc, #28]	; (800ede8 <_read_r+0x20>)
 800edcc:	4604      	mov	r4, r0
 800edce:	4608      	mov	r0, r1
 800edd0:	4611      	mov	r1, r2
 800edd2:	2200      	movs	r2, #0
 800edd4:	602a      	str	r2, [r5, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	f7f3 fd9e 	bl	8002918 <_read>
 800eddc:	1c43      	adds	r3, r0, #1
 800edde:	d102      	bne.n	800ede6 <_read_r+0x1e>
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	b103      	cbz	r3, 800ede6 <_read_r+0x1e>
 800ede4:	6023      	str	r3, [r4, #0]
 800ede6:	bd38      	pop	{r3, r4, r5, pc}
 800ede8:	20003ae4 	.word	0x20003ae4

0800edec <_init>:
 800edec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edee:	bf00      	nop
 800edf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edf2:	bc08      	pop	{r3}
 800edf4:	469e      	mov	lr, r3
 800edf6:	4770      	bx	lr

0800edf8 <_fini>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	bf00      	nop
 800edfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edfe:	bc08      	pop	{r3}
 800ee00:	469e      	mov	lr, r3
 800ee02:	4770      	bx	lr
