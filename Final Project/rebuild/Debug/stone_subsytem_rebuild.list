
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  080130bc  080130bc  000230bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013de8  08013de8  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  08013de8  08013de8  00023de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013df0  08013df0  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013df0  08013df0  00023df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013df4  08013df4  00023df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08013df8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003017c  2**0
                  CONTENTS
 10 .bss          00003df8  2000017c  2000017c  0003017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003f74  20003f74  0003017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e2ca  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006baa  00000000  00000000  0005e476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002298  00000000  00000000  00065020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fd8  00000000  00000000  000672b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f4c3  00000000  00000000  00069290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033580  00000000  00000000  00098753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeded  00000000  00000000  000cbcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001baac0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099a8  00000000  00000000  001bab10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080130a4 	.word	0x080130a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000180 	.word	0x20000180
 80001ec:	080130a4 	.word	0x080130a4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	440b      	add	r3, r1
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d114      	bne.n	80005f4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ca:	2301      	movs	r3, #1
 80005cc:	60bb      	str	r3, [r7, #8]
		i++;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005d4:	e00e      	b.n	80005f4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	781a      	ldrb	r2, [r3, #0]
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	440b      	add	r3, r1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d001      	beq.n	80005ee <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d11a      	bne.n	8000630 <ConsoleCommandMatch+0x8c>
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b09      	cmp	r3, #9
 80005fe:	d817      	bhi.n	8000630 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	4413      	add	r3, r2
 8000606:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000608:	2b20      	cmp	r3, #32
 800060a:	d011      	beq.n	8000630 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000614:	2b0a      	cmp	r3, #10
 8000616:	d00b      	beq.n	8000630 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000618:	683a      	ldr	r2, [r7, #0]
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b0d      	cmp	r3, #13
 8000622:	d005      	beq.n	8000630 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000624:	683a      	ldr	r2, [r7, #0]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1d2      	bne.n	80005d6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000630:	68bb      	ldr	r3, [r7, #8]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800063e:	b480      	push	{r7}
 8000640:	b087      	sub	sp, #28
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000656:	e00d      	b.n	8000674 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	441a      	add	r2, r3
 800065e:	68f9      	ldr	r1, [r7, #12]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	440b      	add	r3, r1
 8000664:	7812      	ldrb	r2, [r2, #0]
 8000666:	701a      	strb	r2, [r3, #0]
		i++;
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	3301      	adds	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	429a      	cmp	r2, r3
 800067a:	d3ed      	bcc.n	8000658 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800067c:	e007      	b.n	800068e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3301      	adds	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2b3f      	cmp	r3, #63	; 0x3f
 8000692:	d9f4      	bls.n	800067e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000694:	693b      	ldr	r3, [r7, #16]
}
 8000696:	4618      	mov	r0, r3
 8000698:	371c      	adds	r7, #28
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b085      	sub	sp, #20
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006b6:	e002      	b.n	80006be <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4413      	add	r3, r2
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b0d      	cmp	r3, #13
 80006c8:	d009      	beq.n	80006de <ConsoleCommandEndline+0x3c>
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b0a      	cmp	r3, #10
 80006d4:	d003      	beq.n	80006de <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d3ec      	bcc.n	80006b8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d201      	bcs.n	80006ea <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006ea:	68bb      	ldr	r3, [r7, #8]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 fc8f 	bl	8001024 <ConsoleIoInit>
	ConsoleIoSendString("Stone subsytem CLI ");
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <ConsoleInit+0x4c>)
 8000708:	f000 fce0 	bl	80010cc <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800070c:	480e      	ldr	r0, [pc, #56]	; (8000748 <ConsoleInit+0x50>)
 800070e:	f000 fcdd 	bl	80010cc <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <ConsoleInit+0x54>)
 8000714:	f000 fcda 	bl	80010cc <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <ConsoleInit+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e007      	b.n	8000734 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000724:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <ConsoleInit+0x5c>)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	4413      	add	r3, r2
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b3f      	cmp	r3, #63	; 0x3f
 8000738:	d9f4      	bls.n	8000724 <ConsoleInit+0x2c>
	}

}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	080130bc 	.word	0x080130bc
 8000748:	080130d0 	.word	0x080130d0
 800074c:	080130d4 	.word	0x080130d4
 8000750:	200001d8 	.word	0x200001d8
 8000754:	20000198 	.word	0x20000198

08000758 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800075e:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <ConsoleProcess+0x158>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a54      	ldr	r2, [pc, #336]	; (80008b4 <ConsoleProcess+0x15c>)
 8000764:	1898      	adds	r0, r3, r2
 8000766:	4b52      	ldr	r3, [pc, #328]	; (80008b0 <ConsoleProcess+0x158>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800076e:	463a      	mov	r2, r7
 8000770:	4619      	mov	r1, r3
 8000772:	f000 fc6f 	bl	8001054 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d104      	bne.n	8000786 <ConsoleProcess+0x2e>
 800077c:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <ConsoleProcess+0x160>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	f000 8091 	beq.w	80008a8 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000786:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <ConsoleProcess+0x160>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <ConsoleProcess+0x158>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a46      	ldr	r2, [pc, #280]	; (80008b0 <ConsoleProcess+0x158>)
 8000796:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000798:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <ConsoleProcess+0x158>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4845      	ldr	r0, [pc, #276]	; (80008b4 <ConsoleProcess+0x15c>)
 80007a0:	f7ff ff7f 	bl	80006a2 <ConsoleCommandEndline>
 80007a4:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db7d      	blt.n	80008a8 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 80007ac:	f000 fb76 	bl	8000e9c <ConsoleCommandsGetTable>
 80007b0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007ba:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007bc:	e03d      	b.n	800083a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4613      	mov	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	461a      	mov	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4938      	ldr	r1, [pc, #224]	; (80008b4 <ConsoleProcess+0x15c>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fee6 	bl	80005a4 <ConsoleCommandMatch>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d02a      	beq.n	8000834 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4613      	mov	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	4413      	add	r3, r2
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	461a      	mov	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4830      	ldr	r0, [pc, #192]	; (80008b4 <ConsoleProcess+0x15c>)
 80007f2:	4798      	blx	r3
 80007f4:	4603      	mov	r3, r0
 80007f6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d017      	beq.n	800082e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007fe:	482f      	ldr	r0, [pc, #188]	; (80008bc <ConsoleProcess+0x164>)
 8000800:	f000 fc64 	bl	80010cc <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000804:	482b      	ldr	r0, [pc, #172]	; (80008b4 <ConsoleProcess+0x15c>)
 8000806:	f000 fc61 	bl	80010cc <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800080a:	482d      	ldr	r0, [pc, #180]	; (80008c0 <ConsoleProcess+0x168>)
 800080c:	f000 fc5e 	bl	80010cc <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	4613      	mov	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	461a      	mov	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	4413      	add	r3, r2
 8000820:	3308      	adds	r3, #8
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fc52 	bl	80010cc <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000828:	4826      	ldr	r0, [pc, #152]	; (80008c4 <ConsoleProcess+0x16c>)
 800082a:	f000 fc4f 	bl	80010cc <ConsoleIoSendString>

					}
					found = cmdIndex;
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	e002      	b.n	800083a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	3301      	adds	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4613      	mov	r3, r2
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4413      	add	r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	461a      	mov	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <ConsoleProcess+0x100>
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000856:	d0b2      	beq.n	80007be <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00d      	beq.n	800087a <ConsoleProcess+0x122>
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000864:	d109      	bne.n	800087a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <ConsoleProcess+0x158>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d905      	bls.n	800087a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <ConsoleProcess+0x170>)
 8000870:	f000 fc2c 	bl	80010cc <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <ConsoleProcess+0x16c>)
 8000876:	f000 fc29 	bl	80010cc <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <ConsoleProcess+0x158>)
 800087c:	6819      	ldr	r1, [r3, #0]
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3301      	adds	r3, #1
 8000882:	461a      	mov	r2, r3
 8000884:	480b      	ldr	r0, [pc, #44]	; (80008b4 <ConsoleProcess+0x15c>)
 8000886:	f7ff feda 	bl	800063e <ConsoleResetBuffer>
 800088a:	4603      	mov	r3, r0
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <ConsoleProcess+0x158>)
 800088e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <ConsoleProcess+0x158>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <ConsoleProcess+0x160>)
 80008a0:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <ConsoleProcess+0x174>)
 80008a4:	f000 fc12 	bl	80010cc <ConsoleIoSendString>
		}
	}
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001d8 	.word	0x200001d8
 80008b4:	20000198 	.word	0x20000198
 80008b8:	200001dc 	.word	0x200001dc
 80008bc:	080130d8 	.word	0x080130d8
 80008c0:	080130e0 	.word	0x080130e0
 80008c4:	080130d0 	.word	0x080130d0
 80008c8:	080130e8 	.word	0x080130e8
 80008cc:	080130d4 	.word	0x080130d4

080008d0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	460b      	mov	r3, r1
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008e6:	2300      	movs	r3, #0
 80008e8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008ea:	e00b      	b.n	8000904 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	4413      	add	r3, r2
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b20      	cmp	r3, #32
 80008f6:	d102      	bne.n	80008fe <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	3301      	adds	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3301      	adds	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000904:	7afb      	ldrb	r3, [r7, #11]
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	429a      	cmp	r2, r3
 800090a:	d002      	beq.n	8000912 <ConsoleParamFindN+0x42>
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	2b3f      	cmp	r3, #63	; 0x3f
 8000910:	d9ec      	bls.n	80008ec <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	2b40      	cmp	r3, #64	; 0x40
 8000916:	d102      	bne.n	800091e <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000918:	2310      	movs	r3, #16
 800091a:	75fb      	strb	r3, [r7, #23]
 800091c:	e002      	b.n	8000924 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69fa      	ldr	r2, [r7, #28]
 8000922:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000924:	7dfb      	ldrb	r3, [r7, #23]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	; 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b08a      	sub	sp, #40	; 0x28
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	460b      	mov	r3, r1
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000944:	f107 021c 	add.w	r2, r7, #28
 8000948:	7afb      	ldrb	r3, [r7, #11]
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ffbf 	bl	80008d0 <ConsoleParamFindN>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	4413      	add	r3, r2
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800096c:	e011      	b.n	8000992 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800096e:	f107 0214 	add.w	r2, r7, #20
 8000972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000974:	4413      	add	r3, r2
 8000976:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800097a:	701a      	strb	r2, [r3, #0]
		i++;
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	3301      	adds	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	4413      	add	r3, r2
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000992:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000996:	2b0a      	cmp	r3, #10
 8000998:	d00a      	beq.n	80009b0 <ConsoleReceiveParamInt16+0x7e>
 800099a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800099e:	2b0d      	cmp	r3, #13
 80009a0:	d006      	beq.n	80009b0 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 80009a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80009a6:	2b20      	cmp	r3, #32
 80009a8:	d002      	beq.n	80009b0 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 80009aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d9de      	bls.n	800096e <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b2:	2b08      	cmp	r3, #8
 80009b4:	d102      	bne.n	80009bc <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009b6:	2310      	movs	r3, #16
 80009b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10e      	bne.n	80009e2 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009c4:	f107 0214 	add.w	r2, r7, #20
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	4413      	add	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f010 ff8f 	bl	80118f8 <atoi>
 80009da:	4603      	mov	r3, r0
 80009dc:	b21a      	sxth	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b08a      	sub	sp, #40	; 0x28
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	460b      	mov	r3, r1
 80009f8:	607a      	str	r2, [r7, #4]
 80009fa:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a04:	f107 0218 	add.w	r2, r7, #24
 8000a08:	7afb      	ldrb	r3, [r7, #11]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff ff5f 	bl	80008d0 <ConsoleParamFindN>
 8000a12:	4603      	mov	r3, r0
 8000a14:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a16:	7ffb      	ldrb	r3, [r7, #31]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d12c      	bne.n	8000a76 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
 8000a20:	e01e      	b.n	8000a60 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a22:	7ffb      	ldrb	r3, [r7, #31]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10d      	bne.n	8000a44 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	6a3b      	ldr	r3, [r7, #32]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	f107 0217 	add.w	r2, r7, #23
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f8c5 	bl	8000bca <ConsoleUtilHexCharToInt>
 8000a40:	4603      	mov	r3, r0
 8000a42:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d107      	bne.n	8000a5a <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a4c:	011b      	lsls	r3, r3, #4
 8000a4e:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a56:	4413      	add	r3, r2
 8000a58:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
 8000a60:	6a3b      	ldr	r3, [r7, #32]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d9dd      	bls.n	8000a22 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	2b11      	cmp	r3, #17
 8000a6a:	d101      	bne.n	8000a70 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a74:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e01b      	b.n	8000acc <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a94:	7cfb      	ldrb	r3, [r7, #19]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d115      	bne.n	8000ac6 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	f1c3 0303 	rsb	r3, r3, #3
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	fa42 f303 	asr.w	r3, r2, r3
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000ab0:	f107 020c 	add.w	r2, r7, #12
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	441a      	add	r2, r3
 8000ab8:	7cbb      	ldrb	r3, [r7, #18]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f8c5 	bl	8000c4c <ConsoleUtilsIntToHexChar>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d9e0      	bls.n	8000a94 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ad2:	f107 020c 	add.w	r2, r7, #12
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	4413      	add	r3, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 faf2 	bl	80010cc <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b089      	sub	sp, #36	; 0x24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000afe:	2300      	movs	r3, #0
 8000b00:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000b02:	2301      	movs	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	da07      	bge.n	8000b1c <smallItoa+0x2a>
		isNegative = true;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	425b      	negs	r3, r3
 8000b14:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b20:	e007      	b.n	8000b32 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b32:	69ba      	ldr	r2, [r7, #24]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f1      	bne.n	8000b22 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	68ba      	ldr	r2, [r7, #8]
 8000b42:	4413      	add	r3, r2
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	fb01 f202 	mul.w	r2, r1, r2
 8000b60:	1a9b      	subs	r3, r3, r2
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	440b      	add	r3, r1
 8000b6a:	3230      	adds	r2, #48	; 0x30
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b78:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	1e5a      	subs	r2, r3, #1
 8000b7e:	617a      	str	r2, [r7, #20]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1e6      	bne.n	8000b52 <smallItoa+0x60>

	if (isNegative) {
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	222d      	movs	r2, #45	; 0x2d
 8000b8e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b90:	bf00      	nop
 8000b92:	3724      	adds	r7, #36	; 0x24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000baa:	f107 0108 	add.w	r1, r7, #8
 8000bae:	220a      	movs	r2, #10
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff9e 	bl	8000af2 <smallItoa>
	ConsoleIoSendString(out);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fa86 	bl	80010cc <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b085      	sub	sp, #20
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	6039      	str	r1, [r7, #0]
 8000bd4:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b2f      	cmp	r3, #47	; 0x2f
 8000bde:	d908      	bls.n	8000bf2 <ConsoleUtilHexCharToInt+0x28>
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b39      	cmp	r3, #57	; 0x39
 8000be4:	d805      	bhi.n	8000bf2 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3b30      	subs	r3, #48	; 0x30
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e025      	b.n	8000c3e <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b40      	cmp	r3, #64	; 0x40
 8000bf6:	d908      	bls.n	8000c0a <ConsoleUtilHexCharToInt+0x40>
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	2b46      	cmp	r3, #70	; 0x46
 8000bfc:	d805      	bhi.n	8000c0a <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	3b37      	subs	r3, #55	; 0x37
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e019      	b.n	8000c3e <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b60      	cmp	r3, #96	; 0x60
 8000c0e:	d908      	bls.n	8000c22 <ConsoleUtilHexCharToInt+0x58>
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b66      	cmp	r3, #102	; 0x66
 8000c14:	d805      	bhi.n	8000c22 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	3b57      	subs	r3, #87	; 0x57
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e00d      	b.n	8000c3e <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b0a      	cmp	r3, #10
 8000c26:	d105      	bne.n	8000c34 <ConsoleUtilHexCharToInt+0x6a>
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b0d      	cmp	r3, #13
 8000c2c:	d102      	bne.n	8000c34 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b20      	cmp	r3, #32
 8000c32:	d102      	bne.n	8000c3a <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c34:	2311      	movs	r3, #17
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e001      	b.n	8000c3e <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b09      	cmp	r3, #9
 8000c60:	d805      	bhi.n	8000c6e <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	3330      	adds	r3, #48	; 0x30
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e00d      	b.n	8000c8a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d908      	bls.n	8000c86 <ConsoleUtilsIntToHexChar+0x3a>
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b0f      	cmp	r3, #15
 8000c78:	d805      	bhi.n	8000c86 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	3337      	adds	r3, #55	; 0x37
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e001      	b.n	8000c8a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c86:	2310      	movs	r3, #16
 8000c88:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <ConsoleReceiveParamString>:
{
	ConsoleIoSendString(buffer);
	ConsoleIoSendString(STR_ENDLINE);
	return COMMAND_SUCCESS;
}
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterChar){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	72fb      	strb	r3, [r7, #11]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	77fb      	strb	r3, [r7, #31]
	uint32_t startIndex = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
	uint16_t value = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	82bb      	strh	r3, [r7, #20]
	uint32_t i =0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
	char charVal;


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000cb6:	f107 0210 	add.w	r2, r7, #16
 8000cba:	7afb      	ldrb	r3, [r7, #11]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fe06 	bl	80008d0 <ConsoleParamFindN>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	77fb      	strb	r3, [r7, #31]
	i = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
	charVal = buffer[startIndex + i];
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cda:	e00e      	b.n	8000cfa <ConsoleReceiveParamString+0x62>
				&& ( PARAMETER_SEPARATER != charVal )
			&& ( i < INT16_MAX_STR_LENGTH ) )
		{
		parameterChar[i] = charVal;					// copy the relevant part
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	7dfa      	ldrb	r2, [r7, #23]
 8000ce4:	701a      	strb	r2, [r3, #0]
			i++;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
			charVal = buffer[startIndex + i];
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	2b0a      	cmp	r3, #10
 8000cfe:	d008      	beq.n	8000d12 <ConsoleReceiveParamString+0x7a>
 8000d00:	7dfb      	ldrb	r3, [r7, #23]
 8000d02:	2b0d      	cmp	r3, #13
 8000d04:	d005      	beq.n	8000d12 <ConsoleReceiveParamString+0x7a>
				&& ( PARAMETER_SEPARATER != charVal )
 8000d06:	7dfb      	ldrb	r3, [r7, #23]
 8000d08:	2b20      	cmp	r3, #32
 8000d0a:	d002      	beq.n	8000d12 <ConsoleReceiveParamString+0x7a>
			&& ( i < INT16_MAX_STR_LENGTH ) )
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	d9e4      	bls.n	8000cdc <ConsoleReceiveParamString+0x44>
		}
		if ( i == INT16_MAX_STR_LENGTH)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	2b08      	cmp	r3, #8
 8000d16:	d101      	bne.n	8000d1c <ConsoleReceiveParamString+0x84>
		{
			result = COMMAND_PARAMETER_ERROR;
 8000d18:	2310      	movs	r3, #16
 8000d1a:	77fb      	strb	r3, [r7, #31]
		}
		if ( COMMAND_SUCCESS == result )
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d104      	bne.n	8000d2c <ConsoleReceiveParamString+0x94>
		{
			parameterChar[i] = NULL_CHAR;
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
		}
	return result;
 8000d2c:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d54:	2300      	movs	r3, #0
 8000d56:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d58:	230d      	movs	r3, #13
 8000d5a:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	e01e      	b.n	8000da0 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d62:	4914      	ldr	r1, [pc, #80]	; (8000db4 <ConsoleCommandHelp+0x68>)
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	4613      	mov	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	440b      	add	r3, r1
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f9aa 	bl	80010cc <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <ConsoleCommandHelp+0x6c>)
 8000d7a:	f000 f9a7 	bl	80010cc <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4613      	mov	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	3308      	adds	r3, #8
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <ConsoleCommandHelp+0x68>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f99c 	bl	80010cc <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <ConsoleCommandHelp+0x70>)
 8000d96:	f000 f999 	bl	80010cc <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d3db      	bcc.n	8000d62 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000daa:	7cfb      	ldrb	r3, [r7, #19]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	080137f0 	.word	0x080137f0
 8000db8:	0801316c 	.word	0x0801316c
 8000dbc:	08013170 	.word	0x08013170

08000dc0 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	461a      	mov	r2, r3
 8000dce:	2101      	movs	r1, #1
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff fdae 	bl	8000932 <ConsoleReceiveParamInt16>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d116      	bne.n	8000e0e <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <ConsoleCommandParamExampleInt16+0x58>)
 8000de2:	f000 f973 	bl	80010cc <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000de6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fed6 	bl	8000b9c <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000df0:	480a      	ldr	r0, [pc, #40]	; (8000e1c <ConsoleCommandParamExampleInt16+0x5c>)
 8000df2:	f000 f96b 	bl	80010cc <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000df6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe3f 	bl	8000a80 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <ConsoleCommandParamExampleInt16+0x60>)
 8000e04:	f000 f962 	bl	80010cc <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <ConsoleCommandParamExampleInt16+0x64>)
 8000e0a:	f000 f95f 	bl	80010cc <ConsoleIoSendString>
	}
	return result;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	08013174 	.word	0x08013174
 8000e1c:	08013184 	.word	0x08013184
 8000e20:	0801318c 	.word	0x0801318c
 8000e24:	08013170 	.word	0x08013170

08000e28 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	461a      	mov	r2, r3
 8000e36:	2101      	movs	r1, #1
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fdd8 	bl	80009ee <ConsoleReceiveParamHexUint16>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d109      	bne.n	8000e5c <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e4a:	f000 f93f 	bl	80010cc <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e4e:	89bb      	ldrh	r3, [r7, #12]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fe15 	bl	8000a80 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e58:	f000 f938 	bl	80010cc <ConsoleIoSendString>
	}
	return result;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08013190 	.word	0x08013190
 8000e6c:	08013170 	.word	0x08013170

08000e70 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <ConsoleCommandVer+0x24>)
 8000e7e:	f000 f925 	bl	80010cc <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <ConsoleCommandVer+0x28>)
 8000e84:	f000 f922 	bl	80010cc <ConsoleIoSendString>
	return result;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	080131a0 	.word	0x080131a0
 8000e98:	08013170 	.word	0x08013170

08000e9c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000ea0:	4b02      	ldr	r3, [pc, #8]	; (8000eac <ConsoleCommandsGetTable+0x10>)
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	080137f0 	.word	0x080137f0

08000eb0 <ConsoleCommandDebugPrint>:

static eCommandResult_T ConsoleCommandDebugPrint(const char buffer[])
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]
	// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
	// All though it's great input sanitisation it's okay for this.
	char command[5] ={0};
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2101      	movs	r1, #1
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fee3 	bl	8000c98 <ConsoleReceiveParamString>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
	char trigger = command[1];
 8000ed6:	7a7b      	ldrb	r3, [r7, #9]
 8000ed8:	73bb      	strb	r3, [r7, #14]
	if ('n'==trigger)
 8000eda:	7bbb      	ldrb	r3, [r7, #14]
 8000edc:	2b6e      	cmp	r3, #110	; 0x6e
 8000ede:	d103      	bne.n	8000ee8 <ConsoleCommandDebugPrint+0x38>
	{
		// trigger is on
		SetUserDebugLogging(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f002 fe11 	bl	8003b08 <SetUserDebugLogging>
 8000ee6:	e008      	b.n	8000efa <ConsoleCommandDebugPrint+0x4a>
	}
	else if('f'== trigger){
 8000ee8:	7bbb      	ldrb	r3, [r7, #14]
 8000eea:	2b66      	cmp	r3, #102	; 0x66
 8000eec:	d103      	bne.n	8000ef6 <ConsoleCommandDebugPrint+0x46>

		// trigger is off.
		SetUserDebugLogging(0);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f002 fe0a 	bl	8003b08 <SetUserDebugLogging>
 8000ef4:	e001      	b.n	8000efa <ConsoleCommandDebugPrint+0x4a>
	}
	else
	{
		//the inputs bad output guide text.
		return COMMAND_ERROR;
 8000ef6:	23ff      	movs	r3, #255	; 0xff
 8000ef8:	e000      	b.n	8000efc <ConsoleCommandDebugPrint+0x4c>
	}

	return result;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]

}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ConsoleCommandSetMode>:
static eCommandResult_T ConsoleCommandSetMode(const char buffer[]){
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

	eCommandResult_T result = COMMAND_SUCCESS;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	2300      	movs	r3, #0
 8000f16:	733b      	strb	r3, [r7, #12]
	// get the mode they want to set.
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2101      	movs	r1, #1
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff feb9 	bl	8000c98 <ConsoleReceiveParamString>
 8000f26:	4603      	mov	r3, r0
 8000f28:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <ConsoleCommandSetState>:
static eCommandResult_T ConsoleCommandSetState(const char buffer[]){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	2300      	movs	r3, #0
 8000f46:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2101      	movs	r1, #1
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fea1 	bl	8000c98 <ConsoleReceiveParamString>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]

	return result;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <ConsoleCommandSetStateTimeout>:
static eCommandResult_T ConsoleCommandSetStateTimeout(const char buffer[]){
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <ConsoleCommandSetLogging>:
static eCommandResult_T ConsoleCommandSetLogging(const char buffer[]){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
		// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
		// All though it's great input sanitisation it's okay for this.
		char command[5] ={0};
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	2300      	movs	r3, #0
 8000f92:	733b      	strb	r3, [r7, #12]
		result = ConsoleReceiveParamString(buffer, 1, command);
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fe7b 	bl	8000c98 <ConsoleReceiveParamString>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
		char trigger = command[1];
 8000fa6:	7a7b      	ldrb	r3, [r7, #9]
 8000fa8:	73bb      	strb	r3, [r7, #14]
		//if(checkUSBConnected() == NO_ERROR){
			if ('n'==trigger)
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b6e      	cmp	r3, #110	; 0x6e
 8000fae:	d103      	bne.n	8000fb8 <ConsoleCommandSetLogging+0x38>
			{
				// trigger is on
				SetMovementUSBLogging(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f002 fdb9 	bl	8003b28 <SetMovementUSBLogging>
 8000fb6:	e00b      	b.n	8000fd0 <ConsoleCommandSetLogging+0x50>
			}
			else if('f'== trigger){
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b66      	cmp	r3, #102	; 0x66
 8000fbc:	d103      	bne.n	8000fc6 <ConsoleCommandSetLogging+0x46>

				// trigger is off.
				SetMovementUSBLogging(0);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f002 fdb2 	bl	8003b28 <SetMovementUSBLogging>
 8000fc4:	e004      	b.n	8000fd0 <ConsoleCommandSetLogging+0x50>


		else
		{
			//the inputs bad output guide text.
			printf("No USB Connected\n");
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <ConsoleCommandSetLogging+0x5c>)
 8000fc8:	f010 fe66 	bl	8011c98 <puts>
			return COMMAND_ERROR;
 8000fcc:	23ff      	movs	r3, #255	; 0xff
 8000fce:	e000      	b.n	8000fd2 <ConsoleCommandSetLogging+0x52>
		}

		return result;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	080131b4 	.word	0x080131b4

08000fe0 <ConsoleCommandsetMainColour>:

static eCommandResult_T ConsoleCommandsetMainColour(const char buffer[]){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	75fb      	strb	r3, [r7, #23]
	int r,g,b;
	SetUserMainColour(r,g,b);
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	68f9      	ldr	r1, [r7, #12]
 8000ff0:	6938      	ldr	r0, [r7, #16]
 8000ff2:	f002 fd5d 	bl	8003ab0 <SetUserMainColour>
	return result;
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
	charCount = 0;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <reset+0x1c>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
	readComplete =0;
 800100a:	4b05      	ldr	r3, [pc, #20]	; (8001020 <reset+0x20>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200001e8 	.word	0x200001e8
 8001020:	200001e4 	.word	0x200001e4

08001024 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <ConsoleIoInit+0x28>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <ConsoleIoInit+0x28>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2201      	movs	r2, #1
 8001038:	4905      	ldr	r1, [pc, #20]	; (8001050 <ConsoleIoInit+0x2c>)
 800103a:	4618      	mov	r0, r3
 800103c:	f008 fc53 	bl	80098e6 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001e0 	.word	0x200001e0
 8001050:	200001f6 	.word	0x200001f6

08001054 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8001064:	4b15      	ldr	r3, [pc, #84]	; (80010bc <ConsoleIoReceive+0x68>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d11f      	bne.n	80010ac <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 800106c:	e00a      	b.n	8001084 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4413      	add	r3, r2
 8001074:	4912      	ldr	r1, [pc, #72]	; (80010c0 <ConsoleIoReceive+0x6c>)
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	440a      	add	r2, r1
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	701a      	strb	r2, [r3, #0]
			i++;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <ConsoleIoReceive+0x70>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	461a      	mov	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	4293      	cmp	r3, r2
 8001090:	d3ed      	bcc.n	800106e <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <ConsoleIoReceive+0x70>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 800109c:	4908      	ldr	r1, [pc, #32]	; (80010c0 <ConsoleIoReceive+0x6c>)
 800109e:	480a      	ldr	r0, [pc, #40]	; (80010c8 <ConsoleIoReceive+0x74>)
 80010a0:	f010 fd5e 	bl	8011b60 <iprintf>
		// reset counts
		reset();
 80010a4:	f7ff ffac 	bl	8001000 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 80010a8:	2300      	movs	r3, #0
 80010aa:	e003      	b.n	80010b4 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200001e4 	.word	0x200001e4
 80010c0:	200001ec 	.word	0x200001ec
 80010c4:	200001e8 	.word	0x200001e8
 80010c8:	080131c8 	.word	0x080131c8

080010cc <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <ConsoleIoSendString+0x1c>)
 80010d8:	f010 fd42 	bl	8011b60 <iprintf>
	return CONSOLE_SUCCESS;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	080131c8 	.word	0x080131c8

080010ec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_UART_RxCpltCallback+0x44>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_UART_RxCpltCallback+0x48>)
 80010fa:	7811      	ldrb	r1, [r2, #0]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <HAL_UART_RxCpltCallback+0x4c>)
 80010fe:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8001100:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_UART_RxCpltCallback+0x44>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	3301      	adds	r3, #1
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <HAL_UART_RxCpltCallback+0x44>)
 8001108:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_UART_RxCpltCallback+0x48>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b0a      	cmp	r3, #10
 8001110:	d102      	bne.n	8001118 <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_UART_RxCpltCallback+0x50>)
 8001114:	2201      	movs	r2, #1
 8001116:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_UART_RxCpltCallback+0x54>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2201      	movs	r2, #1
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <HAL_UART_RxCpltCallback+0x48>)
 8001120:	4618      	mov	r0, r3
 8001122:	f008 fbe0 	bl	80098e6 <HAL_UART_Receive_IT>

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001e8 	.word	0x200001e8
 8001134:	200001f6 	.word	0x200001f6
 8001138:	200001ec 	.word	0x200001ec
 800113c:	200001e4 	.word	0x200001e4
 8001140:	200001e0 	.word	0x200001e0

08001144 <FileControllerInit>:
#include "movementInputController.h"


int logMovement = 0;

stoneError_t FileControllerInit(){
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
	stoneError_t ret = NO_ERROR;
 800114a:	2304      	movs	r3, #4
 800114c:	73fb      	strb	r3, [r7, #15]
	// wait for the USB to be ready to mount.
	while (GetUSBState()!=APPLICATION_READY){
 800114e:	e001      	b.n	8001154 <FileControllerInit+0x10>
		   MX_USB_HOST_Process();
 8001150:	f010 f8ba 	bl	80112c8 <MX_USB_HOST_Process>
	while (GetUSBState()!=APPLICATION_READY){
 8001154:	f010 f886 	bl	8011264 <GetUSBState>
 8001158:	4603      	mov	r3, r0
 800115a:	2b02      	cmp	r3, #2
 800115c:	d1f8      	bne.n	8001150 <FileControllerInit+0xc>

	}
	Mount_USB();
 800115e:	f000 fd99 	bl	8001c94 <Mount_USB>
	// check to see if a dir for this user already exists.

	int userID = GetUserID();
 8001162:	f002 fc99 	bl	8003a98 <GetUserID>
 8001166:	60b8      	str	r0, [r7, #8]
	char *path = malloc(20*sizeof(char));
 8001168:	2014      	movs	r0, #20
 800116a:	f010 fbf3 	bl	8011954 <malloc>
 800116e:	4603      	mov	r3, r0
 8001170:	607b      	str	r3, [r7, #4]
	sprintf(path,"/%d/prefs.txt\n",userID);
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	491d      	ldr	r1, [pc, #116]	; (80011ec <FileControllerInit+0xa8>)
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f010 fe6c 	bl	8011e54 <siprintf>
	FRESULT res = Check_File( path );
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 fdab 	bl	8001cd8 <Check_File>
 8001182:	4603      	mov	r3, r0
 8001184:	70fb      	strb	r3, [r7, #3]
	// if there is no existing folder creat one and the files that the program uses.
	if(FR_NO_PATH == res)
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d127      	bne.n	80011dc <FileControllerInit+0x98>
	{

		sprintf(path,"/%d",userID);
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	4918      	ldr	r1, [pc, #96]	; (80011f0 <FileControllerInit+0xac>)
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f010 fe5f 	bl	8011e54 <siprintf>
		res = Create_Dir(path);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 ff28 	bl	8001fec <Create_Dir>
 800119c:	4603      	mov	r3, r0
 800119e:	70fb      	strb	r3, [r7, #3]
		sprintf(path,"/%d/prefs.txt",userID);
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4914      	ldr	r1, [pc, #80]	; (80011f4 <FileControllerInit+0xb0>)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f010 fe55 	bl	8011e54 <siprintf>
		res = Create_File(path);// User settings
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 fdaa 	bl	8001d04 <Create_File>
 80011b0:	4603      	mov	r3, r0
 80011b2:	70fb      	strb	r3, [r7, #3]
		sprintf(path,"/%d/MOVELOG.txt",userID);
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	4910      	ldr	r1, [pc, #64]	; (80011f8 <FileControllerInit+0xb4>)
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f010 fe4b 	bl	8011e54 <siprintf>
		res = Create_File(path);// Movement Log
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f000 fda0 	bl	8001d04 <Create_File>
 80011c4:	4603      	mov	r3, r0
 80011c6:	70fb      	strb	r3, [r7, #3]
		sprintf(path,"/%d/SESSION.txt",userID);
 80011c8:	68ba      	ldr	r2, [r7, #8]
 80011ca:	490c      	ldr	r1, [pc, #48]	; (80011fc <FileControllerInit+0xb8>)
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f010 fe41 	bl	8011e54 <siprintf>
		res = Create_File(path);// Movement Log
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 fd96 	bl	8001d04 <Create_File>
 80011d8:	4603      	mov	r3, r0
 80011da:	70fb      	strb	r3, [r7, #3]


	}
	free(path);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f010 fbc1 	bl	8011964 <free>


	return ret;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	080131cc 	.word	0x080131cc
 80011f0:	080131dc 	.word	0x080131dc
 80011f4:	080131e0 	.word	0x080131e0
 80011f8:	080131f0 	.word	0x080131f0
 80011fc:	08013200 	.word	0x08013200

08001200 <FileControllerProcess>:
stoneError_t FileControllerProcess(){
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af06      	add	r7, sp, #24
	MX_USB_HOST_Process();
 8001206:	f010 f85f 	bl	80112c8 <MX_USB_HOST_Process>

	if (1 == GetMovementUSBLogging())
 800120a:	f002 fc9d 	bl	8003b48 <GetMovementUSBLogging>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d141      	bne.n	8001298 <FileControllerProcess+0x98>
	{

		int userID = GetUserID();
 8001214:	f002 fc40 	bl	8003a98 <GetUserID>
 8001218:	61f8      	str	r0, [r7, #28]
		// get the movement data and barf it out to file along with Haltick. which isn't entirely accurate at this point.
		// todo: change this to using ping pong buffers.
		uint32_t tick  = HAL_GetTick();
 800121a:	f002 fdd7 	bl	8003dcc <HAL_GetTick>
 800121e:	61b8      	str	r0, [r7, #24]
		// get gyro
		movementData_t gyroData;
		GetLast( GYROSCOPE,  & gyroData);
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4619      	mov	r1, r3
 8001226:	2001      	movs	r0, #1
 8001228:	f000 f894 	bl	8001354 <GetLast>
		// get accel
		movementData_t accelData;
		GetLast( ACCELEROMETER,  & accelData);
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	2000      	movs	r0, #0
 8001232:	f000 f88f 	bl	8001354 <GetLast>
		//write it to a buffer.
		char *pathBuf = malloc(16*sizeof(char));
 8001236:	2010      	movs	r0, #16
 8001238:	f010 fb8c 	bl	8011954 <malloc>
 800123c:	4603      	mov	r3, r0
 800123e:	617b      	str	r3, [r7, #20]
		sprintf(pathBuf,"/%d/MOVELOG.txt",userID);
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	4918      	ldr	r1, [pc, #96]	; (80012a4 <FileControllerProcess+0xa4>)
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f010 fe05 	bl	8011e54 <siprintf>
		char *buf = malloc(80*sizeof(char));
 800124a:	2050      	movs	r0, #80	; 0x50
 800124c:	f010 fb82 	bl	8011954 <malloc>
 8001250:	4603      	mov	r3, r0
 8001252:	613b      	str	r3, [r7, #16]
		sprintf(buf,"%lu :%d,%d,%d,%d,%d,%d \n",tick,accelData.x,accelData.y,accelData.z,gyroData.x,gyroData.y,gyroData.z);
 8001254:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001258:	461d      	mov	r5, r3
 800125a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800125e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001262:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001266:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800126a:	f9b7 400c 	ldrsh.w	r4, [r7, #12]
 800126e:	9404      	str	r4, [sp, #16]
 8001270:	9003      	str	r0, [sp, #12]
 8001272:	9102      	str	r1, [sp, #8]
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	462b      	mov	r3, r5
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	490a      	ldr	r1, [pc, #40]	; (80012a8 <FileControllerProcess+0xa8>)
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	f010 fde8 	bl	8011e54 <siprintf>
		Update_File(pathBuf, buf);
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f000 fdd8 	bl	8001e3c <Update_File>
		free(buf);
 800128c:	6938      	ldr	r0, [r7, #16]
 800128e:	f010 fb69 	bl	8011964 <free>
		free(pathBuf);
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f010 fb66 	bl	8011964 <free>



	}

}
 8001298:	bf00      	nop
 800129a:	4618      	mov	r0, r3
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bdb0      	pop	{r4, r5, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	080131f0 	.word	0x080131f0
 80012a8:	08013210 	.word	0x08013210

080012ac <MovementControllerInit>:
orientation orient = horiz;

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fa62 	bl	8001780 <Lis3dhInit>

	I3G450D_Init(SPIxHandle);
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f000 fed5 	bl	800206c <I3G450D_Init>



}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <MovementControllerProcess>:
int MovementControllerProcess(){
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0

	// Process the Acellerometor
	 Lis3dhGetAcc();
 80012d0:	f000 faf4 	bl	80018bc <Lis3dhGetAcc>
	int16_t acelX,acelY,acelZ;
	AccelGetData(&acelX, &acelY, &acelZ);
 80012d4:	f107 020a 	add.w	r2, r7, #10
 80012d8:	f107 010c 	add.w	r1, r7, #12
 80012dc:	f107 030e 	add.w	r3, r7, #14
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 fb6d 	bl	80019c0 <AccelGetData>


	// Process the gyro.
	int16_t gX,gY,gZ;
	I3G450D_loop();
 80012e6:	f000 ff89 	bl	80021fc <I3G450D_loop>
	GyroGetData(&gX, &gY, &gZ);
 80012ea:	1d3a      	adds	r2, r7, #4
 80012ec:	1db9      	adds	r1, r7, #6
 80012ee:	f107 0308 	add.w	r3, r7, #8
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fb58 	bl	80029a8 <GyroGetData>


	HAL_Delay(100);
 80012f8:	2064      	movs	r0, #100	; 0x64
 80012fa:	f002 fd73 	bl	8003de4 <HAL_Delay>

	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <GetInterruptType>:
gesture_t GetInterruptType( sensor_t sensor ){
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]

	gesture_t interruptType;

	if(ACCELEROMETER == sensor)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d104      	bne.n	8001322 <GetInterruptType+0x1a>
	{
		AccelGetInerrrupt(&interruptType);
 8001318:	f107 030f 	add.w	r3, r7, #15
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fc6d 	bl	8001bfc <AccelGetInerrrupt>
	}
	if(GYROSCOPE == sensor)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d104      	bne.n	8001332 <GetInterruptType+0x2a>
	{
		GyroGetInerrrupt(&interruptType);
 8001328:	f107 030f 	add.w	r3, r7, #15
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fb6b 	bl	8002a08 <GyroGetInerrrupt>
	}
}
 8001332:	bf00      	nop
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <GetLastGesture>:
gesture_t GetLastGesture(){
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	return lastGesture;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <GetLastGesture+0x14>)
 8001342:	781b      	ldrb	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200001f7 	.word	0x200001f7

08001354 <GetLast>:

void GetLast( sensor_t sensor,  movementData_t * data)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
	if(ACCELEROMETER == sensor)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d114      	bne.n	8001390 <GetLast+0x3c>
	{
		int16_t acelX,acelY,acelZ;
		AccelGetData(&acelX, &acelY, &acelZ);
 8001366:	f107 0212 	add.w	r2, r7, #18
 800136a:	f107 0114 	add.w	r1, r7, #20
 800136e:	f107 0316 	add.w	r3, r7, #22
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fb24 	bl	80019c0 <AccelGetData>
		data->x = acelX;
 8001378:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	801a      	strh	r2, [r3, #0]
		data->y = acelY;
 8001380:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	805a      	strh	r2, [r3, #2]
		data->z = acelZ;
 8001388:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	809a      	strh	r2, [r3, #4]

	}
	if(GYROSCOPE == sensor)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d114      	bne.n	80013c0 <GetLast+0x6c>
		{
			int16_t gyroX,gyroY,gyroZ;
			GyroGetData(&gyroX, &gyroY, &gyroZ);
 8001396:	f107 020c 	add.w	r2, r7, #12
 800139a:	f107 010e 	add.w	r1, r7, #14
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fb00 	bl	80029a8 <GyroGetData>
			data->x = gyroX;
 80013a8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	801a      	strh	r2, [r3, #0]
			data->y = gyroY;
 80013b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	805a      	strh	r2, [r3, #2]
			data->z = gyroZ;
 80013b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	809a      	strh	r2, [r3, #4]

		}

}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <SessionControllerInit>:




void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle,UART_HandleTypeDef * HUARTxHandler)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]


	MovementControllerInit(I2Cxhandle,SPIxHandle);
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff ff68 	bl	80012ac <MovementControllerInit>
	ConsoleInit(HUARTxHandler);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff f98b 	bl	80006f8 <ConsoleInit>
	FileControllerInit();
 80013e2:	f7ff feaf 	bl	8001144 <FileControllerInit>
	currentState = START;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <SessionControllerInit+0x3c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80013ec:	f002 fcee 	bl	8003dcc <HAL_GetTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <SessionControllerInit+0x40>)
 80013f4:	6013      	str	r3, [r2, #0]
	ConsoleProcess();
 80013f6:	f7ff f9af 	bl	8000758 <ConsoleProcess>




}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001f8 	.word	0x200001f8
 8001408:	2000022c 	.word	0x2000022c

0800140c <SessionControllerProcess>:
void SessionControllerProcess()
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0



// check to see if current state has reached it time out.
	current = stateTabel[currentState];
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <SessionControllerProcess+0x9c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	4824      	ldr	r0, [pc, #144]	; (80014ac <SessionControllerProcess+0xa0>)
 800141a:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <SessionControllerProcess+0xa4>)
 800141c:	460b      	mov	r3, r1
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	1a5b      	subs	r3, r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	4604      	mov	r4, r0
 8001428:	461d      	mov	r5, r3
 800142a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800142c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <SessionControllerProcess+0xa0>)
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	617b      	str	r3, [r7, #20]
	movementData_t accel;
	movementData_t gyro;

	//
	MovementControllerProcess();
 800143c:	f7ff ff45 	bl	80012ca <MovementControllerProcess>
	// if we are logging the data.
	if(1 == GetMovementUSBLogging())
 8001440:	f002 fb82 	bl	8003b48 <GetMovementUSBLogging>
 8001444:	4603      	mov	r3, r0
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <SessionControllerProcess+0x42>
	{
		FileControllerProcess();
 800144a:	f7ff fed9 	bl	8001200 <FileControllerProcess>
	}


	// special case for timeout while in mode we pull the time out from the mode we are in.
	// users stay in mode until they explicitly exit or  meet another criteria ( like no movement ) defined by there mode.
	if(currentState == IN_MODE)
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <SessionControllerProcess+0x9c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b05      	cmp	r3, #5
 8001454:	d104      	bne.n	8001460 <SessionControllerProcess+0x54>
	{
		timeStateStarted = HAL_GetTick();// just for testing.
 8001456:	f002 fcb9 	bl	8003dcc <HAL_GetTick>
 800145a:	4603      	mov	r3, r0
 800145c:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <SessionControllerProcess+0xa8>)
 800145e:	6013      	str	r3, [r2, #0]





	if ( HAL_GetTick() - timeStateStarted > timeout )
 8001460:	f002 fcb4 	bl	8003dcc <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <SessionControllerProcess+0xa8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	429a      	cmp	r2, r3
 8001470:	d202      	bcs.n	8001478 <SessionControllerProcess+0x6c>
	{

		current.onEnd();
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <SessionControllerProcess+0xa0>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <SessionControllerProcess+0xac>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d102      	bne.n	8001486 <SessionControllerProcess+0x7a>
	{

		current.onButtonPress();
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <SessionControllerProcess+0xa0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4798      	blx	r3
	}

	if( 1 == accelerometorInterrupt)
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <SessionControllerProcess+0xb0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <SessionControllerProcess+0x8e>
	{
		// The interrupt has been triggered.
		// get what interrupted it from movementController.
		gesture_t gesture =  GetInterruptType( ACCELEROMETER );
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff ff3a 	bl	8001308 <GetInterruptType>
 8001494:	4603      	mov	r3, r0
 8001496:	74fb      	strb	r3, [r7, #19]
		// run proccess for current state.
		current.stateProcess();
	}


}
 8001498:	e002      	b.n	80014a0 <SessionControllerProcess+0x94>
		current.stateProcess();
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SessionControllerProcess+0xa0>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	4798      	blx	r3
}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bdb0      	pop	{r4, r5, r7, pc}
 80014a8:	200001f8 	.word	0x200001f8
 80014ac:	200001fc 	.word	0x200001fc
 80014b0:	20000000 	.word	0x20000000
 80014b4:	2000022c 	.word	0x2000022c
 80014b8:	20000230 	.word	0x20000230
 80014bc:	20000234 	.word	0x20000234

080014c0 <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	DebugPrint(" State = starting");
	return 0;
}
int IdleAwake(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <IdleAwake+0x28>)
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <IdleAwake+0x2c>)
 80014ca:	701a      	strb	r2, [r3, #0]
	currentState = IDLE_AWAKE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <IdleAwake+0x28>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80014d2:	f002 fc7b 	bl	8003dcc <HAL_GetTick>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <IdleAwake+0x30>)
 80014da:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = IdleAwake");
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <IdleAwake+0x34>)
 80014de:	f002 faf3 	bl	8003ac8 <DebugPrint>
	return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200001f8 	.word	0x200001f8
 80014ec:	20000218 	.word	0x20000218
 80014f0:	2000022c 	.word	0x2000022c
 80014f4:	08013240 	.word	0x08013240

080014f8 <DeepSleep>:
int DeepSleep(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <DeepSleep+0x28>)
 80014fe:	781a      	ldrb	r2, [r3, #0]
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <DeepSleep+0x2c>)
 8001502:	701a      	strb	r2, [r3, #0]
	currentState = DEEP_SLEEP;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <DeepSleep+0x28>)
 8001506:	2202      	movs	r2, #2
 8001508:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800150a:	f002 fc5f 	bl	8003dcc <HAL_GetTick>
 800150e:	4603      	mov	r3, r0
 8001510:	4a05      	ldr	r2, [pc, #20]	; (8001528 <DeepSleep+0x30>)
 8001512:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = DeepSleep");
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <DeepSleep+0x34>)
 8001516:	f002 fad7 	bl	8003ac8 <DebugPrint>
	return 0;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200001f8 	.word	0x200001f8
 8001524:	20000218 	.word	0x20000218
 8001528:	2000022c 	.word	0x2000022c
 800152c:	08013254 	.word	0x08013254

08001530 <WaitingForSelection>:
int WaitingForSelection(){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <WaitingForSelection+0x28>)
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <WaitingForSelection+0x2c>)
 800153a:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <WaitingForSelection+0x28>)
 800153e:	2203      	movs	r2, #3
 8001540:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001542:	f002 fc43 	bl	8003dcc <HAL_GetTick>
 8001546:	4603      	mov	r3, r0
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <WaitingForSelection+0x30>)
 800154a:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = WaitingForSelection");
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <WaitingForSelection+0x34>)
 800154e:	f002 fabb 	bl	8003ac8 <DebugPrint>
	return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200001f8 	.word	0x200001f8
 800155c:	20000218 	.word	0x20000218
 8001560:	2000022c 	.word	0x2000022c
 8001564:	08013268 	.word	0x08013268

08001568 <LoadMode>:
int LoadMode(){
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	previouseState = currentState;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <LoadMode+0x28>)
 800156e:	781a      	ldrb	r2, [r3, #0]
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <LoadMode+0x2c>)
 8001572:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <LoadMode+0x28>)
 8001576:	2203      	movs	r2, #3
 8001578:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800157a:	f002 fc27 	bl	8003dcc <HAL_GetTick>
 800157e:	4603      	mov	r3, r0
 8001580:	4a05      	ldr	r2, [pc, #20]	; (8001598 <LoadMode+0x30>)
 8001582:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = LoadMode");
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <LoadMode+0x34>)
 8001586:	f002 fa9f 	bl	8003ac8 <DebugPrint>
	return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200001f8 	.word	0x200001f8
 8001594:	20000218 	.word	0x20000218
 8001598:	2000022c 	.word	0x2000022c
 800159c:	08013288 	.word	0x08013288

080015a0 <CliMode>:
int CliMode(){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0

	previouseState = currentState;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <CliMode+0x38>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <CliMode+0x3c>)
 80015aa:	701a      	strb	r2, [r3, #0]
	currentState = CLI_MODE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <CliMode+0x38>)
 80015ae:	2206      	movs	r2, #6
 80015b0:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <CliMode+0x40>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
	// in climode we want the debug output off while we are waiting for input.
	PauseDebugLogging();
 80015b8:	f002 fad2 	bl	8003b60 <PauseDebugLogging>
	printf("CLI MODE - waiting command\n");
 80015bc:	4809      	ldr	r0, [pc, #36]	; (80015e4 <CliMode+0x44>)
 80015be:	f010 fb6b 	bl	8011c98 <puts>
	timeStateStarted = HAL_GetTick();
 80015c2:	f002 fc03 	bl	8003dcc <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <CliMode+0x48>)
 80015ca:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = CliMode");
 80015cc:	4807      	ldr	r0, [pc, #28]	; (80015ec <CliMode+0x4c>)
 80015ce:	f002 fa7b 	bl	8003ac8 <DebugPrint>

	return 0;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200001f8 	.word	0x200001f8
 80015dc:	20000218 	.word	0x20000218
 80015e0:	20000230 	.word	0x20000230
 80015e4:	0801329c 	.word	0x0801329c
 80015e8:	2000022c 	.word	0x2000022c
 80015ec:	080132b8 	.word	0x080132b8

080015f0 <StartPreviouseMode>:
int StartPreviouseMode(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	currentState = previouseState;
 80015f4:	4b09      	ldr	r3, [pc, #36]	; (800161c <StartPreviouseMode+0x2c>)
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <StartPreviouseMode+0x30>)
 80015fa:	701a      	strb	r2, [r3, #0]
	previouseState = CLI_MODE;
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <StartPreviouseMode+0x2c>)
 80015fe:	2206      	movs	r2, #6
 8001600:	701a      	strb	r2, [r3, #0]
	// we also reset to our currentDebugMode
	ResumeDebugLogging();
 8001602:	f002 fab9 	bl	8003b78 <ResumeDebugLogging>

	timeStateStarted = HAL_GetTick();
 8001606:	f002 fbe1 	bl	8003dcc <HAL_GetTick>
 800160a:	4603      	mov	r3, r0
 800160c:	4a05      	ldr	r2, [pc, #20]	; (8001624 <StartPreviouseMode+0x34>)
 800160e:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = StartPreviouseMode");
 8001610:	4805      	ldr	r0, [pc, #20]	; (8001628 <StartPreviouseMode+0x38>)
 8001612:	f002 fa59 	bl	8003ac8 <DebugPrint>
	return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000218 	.word	0x20000218
 8001620:	200001f8 	.word	0x200001f8
 8001624:	2000022c 	.word	0x2000022c
 8001628:	080132cc 	.word	0x080132cc

0800162c <InMode>:
int InMode()
{
 800162c:	b598      	push	{r3, r4, r7, lr}
 800162e:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <InMode+0x34>)
 8001632:	2205      	movs	r2, #5
 8001634:	701a      	strb	r2, [r3, #0]
	selectedMode = modeTable[currentMode];
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <InMode+0x38>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	490b      	ldr	r1, [pc, #44]	; (8001668 <InMode+0x3c>)
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <InMode+0x40>)
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	460c      	mov	r4, r1
 8001644:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001646:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	timeStateStarted = HAL_GetTick();
 800164a:	f002 fbbf 	bl	8003dcc <HAL_GetTick>
 800164e:	4603      	mov	r3, r0
 8001650:	4a07      	ldr	r2, [pc, #28]	; (8001670 <InMode+0x44>)
 8001652:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = InMode");
 8001654:	4807      	ldr	r0, [pc, #28]	; (8001674 <InMode+0x48>)
 8001656:	f002 fa37 	bl	8003ac8 <DebugPrint>
	return 0;
 800165a:	2300      	movs	r3, #0

}
 800165c:	4618      	mov	r0, r3
 800165e:	bd98      	pop	{r3, r4, r7, pc}
 8001660:	200001f8 	.word	0x200001f8
 8001664:	20000219 	.word	0x20000219
 8001668:	2000021c 	.word	0x2000021c
 800166c:	200000c4 	.word	0x200000c4
 8001670:	2000022c 	.word	0x2000022c
 8001674:	080132e8 	.word	0x080132e8

08001678 <StartProcess>:
int SleepOutput(){return 0;}
int WaitingForInputOutput(){return 0;}
int CliModeOutput(){return 0;}
int ModeLoading(){return 0;}

int StartProcess(){return 0;}
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
 800167c:	2300      	movs	r3, #0
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <IdleAwakeProcess>:

int IdleAwakeProcess(){return 0;}
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
 800168c:	2300      	movs	r3, #0
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DeepSleepProcess>:

int DeepSleepProcess(){return 0;}
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
 800169c:	2300      	movs	r3, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <WaitingForSelectionProcess>:

int WaitingForSelectionProcess(){
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
	// check to see if we had any control gestures.
		gesture_t lastGesture  = GetLastGesture();
 80016ae:	f7ff fe45 	bl	800133c <GetLastGesture>
 80016b2:	4603      	mov	r3, r0
 80016b4:	77fb      	strb	r3, [r7, #31]

		if( NO_GESTURE != lastGesture ){
 80016b6:	7ffb      	ldrb	r3, [r7, #31]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d01e      	beq.n	80016fa <WaitingForSelectionProcess+0x52>
			// gesture recognized response.

			if(TWIST_Y == lastGesture )
 80016bc:	7ffb      	ldrb	r3, [r7, #31]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d102      	bne.n	80016c8 <WaitingForSelectionProcess+0x20>
			{ currentMode = COLOUR_CHANGE; }
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <WaitingForSelectionProcess+0x5c>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
			if(SUDDEN_UP == lastGesture)
 80016c8:	7ffb      	ldrb	r3, [r7, #31]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <WaitingForSelectionProcess+0x2c>
			{currentMode = BREATHING_TRAINER;}
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <WaitingForSelectionProcess+0x5c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
			stateTableEntry_t current = stateTabel[currentState];
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <WaitingForSelectionProcess+0x60>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4a0c      	ldr	r2, [pc, #48]	; (800170c <WaitingForSelectionProcess+0x64>)
 80016dc:	460b      	mov	r3, r1
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a5b      	subs	r3, r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	463c      	mov	r4, r7
 80016e8:	461d      	mov	r5, r3
 80016ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			current.onGestureRecognize();
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4798      	blx	r3

		}



	return 0;}
 80016fa:	2300      	movs	r3, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	20000219 	.word	0x20000219
 8001708:	200001f8 	.word	0x200001f8
 800170c:	20000000 	.word	0x20000000

08001710 <LoadModeProcess>:

int LoadModeProcess(){return 0;}
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
 8001714:	2300      	movs	r3, #0
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <CliModeProcess>:

int CliModeProcess(){
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	ConsoleProcess();
 8001724:	f7ff f818 	bl	8000758 <ConsoleProcess>

	return 0;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}

int InModeProcess(){
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	selectedMode.modeProcess();
 8001734:	4b02      	ldr	r3, [pc, #8]	; (8001740 <InModeProcess+0x10>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4798      	blx	r3
	return 0;}
 800173a:	2300      	movs	r3, #0
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000021c 	.word	0x2000021c

08001744 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 800174e:	2301      	movs	r3, #1
 8001750:	81fb      	strh	r3, [r7, #14]
	uint16_t accelInterruptPin = GPIO_PIN_8;
 8001752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001756:	81bb      	strh	r3, [r7, #12]

	// make sure we are  using the right pin for the user button.



	if( GPIO_Pin == userButtonPin){
 8001758:	88fa      	ldrh	r2, [r7, #6]
 800175a:	89fb      	ldrh	r3, [r7, #14]
 800175c:	429a      	cmp	r2, r3
 800175e:	d102      	bne.n	8001766 <HAL_GPIO_EXTI_Callback+0x22>

		buttonPressed = 1;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_GPIO_EXTI_Callback+0x38>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
	}
	if( GPIO_Pin == accelInterruptPin)
 8001766:	88fa      	ldrh	r2, [r7, #6]
 8001768:	89bb      	ldrh	r3, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d102      	bne.n	8001774 <HAL_GPIO_EXTI_Callback+0x30>
	{
		GetInterruptType( ACCELEROMETER );
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fdca 	bl	8001308 <GetInterruptType>
	}

}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000230 	.word	0x20000230

08001780 <Lis3dhInit>:

}



HAL_StatusTypeDef Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af02      	add	r7, sp, #8
 8001786:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <Lis3dhInit+0x138>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 800178e:	238f      	movs	r3, #143	; 0x8f
 8001790:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <Lis3dhInit+0x138>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	2130      	movs	r1, #48	; 0x30
 8001798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179c:	2201      	movs	r2, #1
 800179e:	f005 fa3f 	bl	8006c20 <HAL_I2C_IsDeviceReady>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80017a6:	4b44      	ldr	r3, [pc, #272]	; (80018b8 <Lis3dhInit+0x138>)
 80017a8:	6818      	ldr	r0, [r3, #0]
 80017aa:	2130      	movs	r1, #48	; 0x30
 80017ac:	f107 0214 	add.w	r2, r7, #20
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	f004 ff0e 	bl	80065d8 <HAL_I2C_Master_Transmit>
 80017bc:	4603      	mov	r3, r0
 80017be:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 80017c6:	f000 fa4f 	bl	8001c68 <errorHandler>
 80017ca:	e070      	b.n	80018ae <Lis3dhInit+0x12e>

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80017cc:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <Lis3dhInit+0x138>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	2130      	movs	r1, #48	; 0x30
 80017d2:	f107 0208 	add.w	r2, r7, #8
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2302      	movs	r3, #2
 80017de:	f004 fff9 	bl	80067d4 <HAL_I2C_Master_Receive>
 80017e2:	4603      	mov	r3, r0
 80017e4:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <Lis3dhInit+0x72>

	        	//Handle error.
	        	errorHandler();
 80017ec:	f000 fa3c 	bl	8001c68 <errorHandler>
 80017f0:	e05d      	b.n	80018ae <Lis3dhInit+0x12e>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 400HZ so that we can use tap interrupts
	        	// and that we will read all three axis
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80017f2:	23a0      	movs	r3, #160	; 0xa0
 80017f4:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80017f6:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <Lis3dhInit+0x138>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	2130      	movs	r1, #48	; 0x30
 80017fc:	f107 0214 	add.w	r2, r7, #20
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	f004 fee6 	bl	80065d8 <HAL_I2C_Master_Transmit>
 800180c:	4603      	mov	r3, r0
 800180e:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <Lis3dhInit+0x138>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	2130      	movs	r1, #48	; 0x30
 8001816:	f107 0208 	add.w	r2, r7, #8
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2302      	movs	r3, #2
 8001822:	f004 ffd7 	bl	80067d4 <HAL_I2C_Master_Receive>
 8001826:	4603      	mov	r3, r0
 8001828:	75fb      	strb	r3, [r7, #23]

				sendBuff[0] = LIS3DH_REG_CTRL1|LIS3DH_WRITE;
 800182a:	2320      	movs	r3, #32
 800182c:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_400HZ;
 800182e:	2377      	movs	r3, #119	; 0x77
 8001830:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <Lis3dhInit+0x138>)
 8001834:	6818      	ldr	r0, [r3, #0]
 8001836:	2130      	movs	r1, #48	; 0x30
 8001838:	f107 0214 	add.w	r2, r7, #20
 800183c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2302      	movs	r3, #2
 8001844:	f004 fec8 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001848:	4603      	mov	r3, r0
 800184a:	75fb      	strb	r3, [r7, #23]

				// set high resolution output
				sendBuff[0] = LIS3DH_REG_CTRL4|LIS3DH_WRITE;
 800184c:	2323      	movs	r3, #35	; 0x23
 800184e:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_400HZ;
 8001850:	2377      	movs	r3, #119	; 0x77
 8001852:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <Lis3dhInit+0x138>)
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	2130      	movs	r1, #48	; 0x30
 800185a:	f107 0214 	add.w	r2, r7, #20
 800185e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2302      	movs	r3, #2
 8001866:	f004 feb7 	bl	80065d8 <HAL_I2C_Master_Transmit>
 800186a:	4603      	mov	r3, r0
 800186c:	75fb      	strb	r3, [r7, #23]


				//Read to make sure the write worked.
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 800186e:	23a0      	movs	r3, #160	; 0xa0
 8001870:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <Lis3dhInit+0x138>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	2130      	movs	r1, #48	; 0x30
 8001878:	f107 0214 	add.w	r2, r7, #20
 800187c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	f004 fea8 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001888:	4603      	mov	r3, r0
 800188a:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800188c:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <Lis3dhInit+0x138>)
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	2130      	movs	r1, #48	; 0x30
 8001892:	f107 0208 	add.w	r2, r7, #8
 8001896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2302      	movs	r3, #2
 800189e:	f004 ff99 	bl	80067d4 <HAL_I2C_Master_Receive>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]

				ret = Lis3dhInteruptSetup();
 80018a6:	f000 f8ad 	bl	8001a04 <Lis3dhInteruptSetup>
 80018aa:	4603      	mov	r3, r0
 80018ac:	75fb      	strb	r3, [r7, #23]
	        }

	    }


return ret;
 80018ae:	7dfb      	ldrb	r3, [r7, #23]




}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000238 	.word	0x20000238

080018bc <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 80018c2:	23a7      	movs	r3, #167	; 0xa7
 80018c4:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80018c6:	4b3a      	ldr	r3, [pc, #232]	; (80019b0 <Lis3dhGetAcc+0xf4>)
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	2130      	movs	r1, #48	; 0x30
 80018cc:	f107 0214 	add.w	r2, r7, #20
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	f004 fe7e 	bl	80065d8 <HAL_I2C_Master_Transmit>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80018e0:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <Lis3dhGetAcc+0xf4>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	2130      	movs	r1, #48	; 0x30
 80018e6:	f107 0208 	add.w	r2, r7, #8
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2302      	movs	r3, #2
 80018f2:	f004 ff6f 	bl	80067d4 <HAL_I2C_Master_Receive>
 80018f6:	4603      	mov	r3, r0
 80018f8:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 80018fa:	23a8      	movs	r3, #168	; 0xa8
 80018fc:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80018fe:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <Lis3dhGetAcc+0xf4>)
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	2130      	movs	r1, #48	; 0x30
 8001904:	f107 0214 	add.w	r2, r7, #20
 8001908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	f004 fe62 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001914:	4603      	mov	r3, r0
 8001916:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <Lis3dhGetAcc+0xf4>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	2130      	movs	r1, #48	; 0x30
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2306      	movs	r3, #6
 800192a:	f004 ff53 	bl	80067d4 <HAL_I2C_Master_Receive>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 8001932:	7a7b      	ldrb	r3, [r7, #9]
 8001934:	b21b      	sxth	r3, r3
 8001936:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 8001938:	f9b7 3000 	ldrsh.w	r3, [r7]
 800193c:	b29b      	uxth	r3, r3
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b29a      	uxth	r2, r3
 8001942:	7a3b      	ldrb	r3, [r7, #8]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	b29b      	uxth	r3, r3
 800194a:	b21b      	sxth	r3, r3
 800194c:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	b21b      	sxth	r3, r3
 8001952:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 8001954:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001958:	b29b      	uxth	r3, r3
 800195a:	021b      	lsls	r3, r3, #8
 800195c:	b29a      	uxth	r2, r3
 800195e:	7abb      	ldrb	r3, [r7, #10]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 800196a:	7b7b      	ldrb	r3, [r7, #13]
 800196c:	b21b      	sxth	r3, r3
 800196e:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8001970:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001974:	b29b      	uxth	r3, r3
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b29a      	uxth	r2, r3
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	b21b      	sxth	r3, r3
 8001984:	80bb      	strh	r3, [r7, #4]

	  LastXAcel = val[0];
 8001986:	f9b7 3000 	ldrsh.w	r3, [r7]
 800198a:	b29a      	uxth	r2, r3
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <Lis3dhGetAcc+0xf8>)
 800198e:	801a      	strh	r2, [r3, #0]
	  LastYAcel = val[1];
 8001990:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <Lis3dhGetAcc+0xfc>)
 8001998:	801a      	strh	r2, [r3, #0]
	  LastZAcel = val[2];
 800199a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <Lis3dhGetAcc+0x100>)
 80019a2:	801a      	strh	r2, [r3, #0]

	return ret;
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000238 	.word	0x20000238
 80019b4:	2000023c 	.word	0x2000023c
 80019b8:	2000023e 	.word	0x2000023e
 80019bc:	20000240 	.word	0x20000240

080019c0 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	*acelX = LastXAcel;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <AccelGetData+0x38>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	801a      	strh	r2, [r3, #0]
	*acelY = LastYAcel;
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <AccelGetData+0x3c>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	b21a      	sxth	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	801a      	strh	r2, [r3, #0]
	*acelZ = LastZAcel;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <AccelGetData+0x40>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b21a      	sxth	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	801a      	strh	r2, [r3, #0]

}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000023c 	.word	0x2000023c
 80019fc:	2000023e 	.word	0x2000023e
 8001a00:	20000240 	.word	0x20000240

08001a04 <Lis3dhInteruptSetup>:
HAL_StatusTypeDef Lis3dhInteruptSetup()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af02      	add	r7, sp, #8
	// default to  unlatched.
	HAL_StatusTypeDef ret = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	// set the double tap interrupt

	// turn the click interrupt on.
	sendBuff[0] = LIS3DH_REG_CTRL3 | LIS3DH_WRITE;
 8001a0e:	2322      	movs	r3, #34	; 0x22
 8001a10:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x80;//il_click
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a16:	4b78      	ldr	r3, [pc, #480]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	2130      	movs	r1, #48	; 0x30
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2302      	movs	r3, #2
 8001a28:	f004 fdd6 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <Lis3dhInteruptSetup+0x36>

		        	//Handle error.
		errorHandler();
 8001a36:	f000 f917 	bl	8001c68 <errorHandler>

	}
	sendBuff[0]  = LIS3DH_REG_CTRL3  |LIS3DH_READ;
 8001a3a:	23a2      	movs	r3, #162	; 0xa2
 8001a3c:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001a3e:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	2130      	movs	r1, #48	; 0x30
 8001a44:	f107 020c 	add.w	r2, r7, #12
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f004 fdc2 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001a58:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	2130      	movs	r1, #48	; 0x30
 8001a5e:	463a      	mov	r2, r7
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2302      	movs	r3, #2
 8001a68:	f004 feb4 	bl	80067d4 <HAL_I2C_Master_Receive>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <Lis3dhInteruptSetup+0x76>

			        	//Handle error.
			errorHandler();
 8001a76:	f000 f8f7 	bl	8001c68 <errorHandler>

		}
	//turn the latch on.
	sendBuff[0] = LIS3DH_REG_CTRL5 | LIS3DH_WRITE;
 8001a7a:	2324      	movs	r3, #36	; 0x24
 8001a7c:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x8;//latch on
 8001a7e:	2308      	movs	r3, #8
 8001a80:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	2130      	movs	r1, #48	; 0x30
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	f004 fda0 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <Lis3dhInteruptSetup+0xa2>

			        	//Handle error.
			errorHandler();
 8001aa2:	f000 f8e1 	bl	8001c68 <errorHandler>

		}

	// turn double click on for all axis
	sendBuff[0] = LIS3DH_CLICK_CFG | LIS3DH_WRITE;
 8001aa6:	2338      	movs	r3, #56	; 0x38
 8001aa8:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x15;//single click 0x2a == double tap
 8001aaa:	2315      	movs	r3, #21
 8001aac:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001aae:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	2130      	movs	r1, #48	; 0x30
 8001ab4:	f107 020c 	add.w	r2, r7, #12
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f004 fd8a 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <Lis3dhInteruptSetup+0xce>

			        	//Handle error.
			errorHandler();
 8001ace:	f000 f8cb 	bl	8001c68 <errorHandler>

		}
	// configure threshold.
	sendBuff[0] = LIS3DH_CLICK_THS | LIS3DH_WRITE;
 8001ad2:	233a      	movs	r3, #58	; 0x3a
 8001ad4:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 100;// recomended from adafruit.
 8001ad6:	2364      	movs	r3, #100	; 0x64
 8001ad8:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	2130      	movs	r1, #48	; 0x30
 8001ae0:	f107 020c 	add.w	r2, r7, #12
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2302      	movs	r3, #2
 8001aec:	f004 fd74 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <Lis3dhInteruptSetup+0xfa>

			        	//Handle error.
			errorHandler();
 8001afa:	f000 f8b5 	bl	8001c68 <errorHandler>

		}
	// set Time Limit
	sendBuff[0] = LIS3DH_TIMELIMIT | LIS3DH_WRITE;
 8001afe:	233b      	movs	r3, #59	; 0x3b
 8001b00:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 10;// recomended from adafruit.
 8001b02:	230a      	movs	r3, #10
 8001b04:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001b06:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2130      	movs	r1, #48	; 0x30
 8001b0c:	f107 020c 	add.w	r2, r7, #12
 8001b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2302      	movs	r3, #2
 8001b18:	f004 fd5e 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <Lis3dhInteruptSetup+0x126>

			        	//Handle error.
			errorHandler();
 8001b26:	f000 f89f 	bl	8001c68 <errorHandler>

		}

	// set time latency
	sendBuff[0] = LIS3DH_TIME_LATENCY | LIS3DH_WRITE;
 8001b2a:	233c      	movs	r3, #60	; 0x3c
 8001b2c:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 20;// recomended from adafruit.
 8001b2e:	2314      	movs	r3, #20
 8001b30:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	2130      	movs	r1, #48	; 0x30
 8001b38:	f107 020c 	add.w	r2, r7, #12
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2302      	movs	r3, #2
 8001b44:	f004 fd48 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <Lis3dhInteruptSetup+0x152>

			        	//Handle error.
			errorHandler();
 8001b52:	f000 f889 	bl	8001c68 <errorHandler>

		}
	// set time window
	sendBuff[0] = LIS3DH_TIME_WINDOW | LIS3DH_WRITE;
 8001b56:	233d      	movs	r3, #61	; 0x3d
 8001b58:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 255;// recomended from adafruit.
 8001b5a:	23ff      	movs	r3, #255	; 0xff
 8001b5c:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	2130      	movs	r1, #48	; 0x30
 8001b64:	f107 020c 	add.w	r2, r7, #12
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2302      	movs	r3, #2
 8001b70:	f004 fd32 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <Lis3dhInteruptSetup+0x17e>

			        	//Handle error.
			errorHandler();
 8001b7e:	f000 f873 	bl	8001c68 <errorHandler>

		}

	// set interrupt 1 duration
	sendBuff[0] = LIS3DH_INT1_DURATION | LIS3DH_WRITE;
 8001b82:	2333      	movs	r3, #51	; 0x33
 8001b84:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 9;// recomended from adafruit.
 8001b86:	2309      	movs	r3, #9
 8001b88:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	2130      	movs	r1, #48	; 0x30
 8001b90:	f107 020c 	add.w	r2, r7, #12
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	f004 fd1c 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <Lis3dhInteruptSetup+0x1aa>

			        	//Handle error.
			errorHandler();
 8001baa:	f000 f85d 	bl	8001c68 <errorHandler>
		}



	// read last set to make sure it worked?
	sendBuff[0]  = LIS3DH_CLICK_SRC  |LIS3DH_READ;
 8001bae:	23b9      	movs	r3, #185	; 0xb9
 8001bb0:	733b      	strb	r3, [r7, #12]

	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	2130      	movs	r1, #48	; 0x30
 8001bb8:	f107 020c 	add.w	r2, r7, #12
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f004 fd08 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <Lis3dhInteruptSetup+0x1f4>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	2130      	movs	r1, #48	; 0x30
 8001bd2:	463a      	mov	r2, r7
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f004 fdfa 	bl	80067d4 <HAL_I2C_Master_Receive>
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK) {
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <Lis3dhInteruptSetup+0x1ea>

			        	//Handle error.
			errorHandler();
 8001bea:	f000 f83d 	bl	8001c68 <errorHandler>

		}
	return ret;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]

}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000238 	.word	0x20000238

08001bfc <AccelGetInerrrupt>:
int AccelGetInerrrupt()
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	75fb      	strb	r3, [r7, #23]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	uint8_t regValues=0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75bb      	strb	r3, [r7, #22]
	 lis2dh12_click_src_t interruptSource;
	sendBuff[0]  = LIS3DH_CLICK_SRC  |LIS3DH_READ;
 8001c0a:	23b9      	movs	r3, #185	; 0xb9
 8001c0c:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001c0e:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <AccelGetInerrrupt+0x68>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	2130      	movs	r1, #48	; 0x30
 8001c14:	f107 0214 	add.w	r2, r7, #20
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f004 fcda 	bl	80065d8 <HAL_I2C_Master_Transmit>
 8001c24:	4603      	mov	r3, r0
 8001c26:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <AccelGetInerrrupt+0x68>)
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	2130      	movs	r1, #48	; 0x30
 8001c2e:	f107 0208 	add.w	r2, r7, #8
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	f004 fdcb 	bl	80067d4 <HAL_I2C_Master_Receive>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK) {
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <AccelGetInerrrupt+0x50>

			        	//Handle error.
			errorHandler();
 8001c48:	f000 f80e 	bl	8001c68 <errorHandler>

		}
	regValues = reciveBuff[0];
 8001c4c:	7a3b      	ldrb	r3, [r7, #8]
 8001c4e:	75bb      	strb	r3, [r7, #22]
	if( regValues > 0 )
 8001c50:	7dbb      	ldrb	r3, [r7, #22]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <AccelGetInerrrupt+0x5e>
	{
		// there was an interrupt.
		return 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <AccelGetInerrrupt+0x60>

	}
	else return 0;
 8001c5a:	2300      	movs	r3, #0

}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000238 	.word	0x20000238

08001c68 <errorHandler>:
void errorHandler()
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
	// something shitty has happened.
	int i = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <Send_USB_Console_Message>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_USB_Console_Message (char *string)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
	DebugPrint(string);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f001 ff1e 	bl	8003ac8 <DebugPrint>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <Mount_USB>:



void Mount_USB (void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0

	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <Mount_USB+0x30>)
 8001c9c:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <Mount_USB+0x34>)
 8001c9e:	f00e fd23 	bl	80106e8 <f_mount>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <Mount_USB+0x38>)
 8001ca8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_USB_Console_Message ("ERROR!!! in mounting USB ...\n\n");
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <Mount_USB+0x38>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <Mount_USB+0x26>
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <Mount_USB+0x3c>)
 8001cb4:	f7ff ffe3 	bl	8001c7e <Send_USB_Console_Message>
	else Send_USB_Console_Message("USB mounted successfully...\n");
}
 8001cb8:	e002      	b.n	8001cc0 <Mount_USB+0x2c>
	else Send_USB_Console_Message("USB mounted successfully...\n");
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <Mount_USB+0x40>)
 8001cbc:	f7ff ffdf 	bl	8001c7e <Send_USB_Console_Message>
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200033ec 	.word	0x200033ec
 8001cc8:	200033f0 	.word	0x200033f0
 8001ccc:	2000025c 	.word	0x2000025c
 8001cd0:	080132f8 	.word	0x080132f8
 8001cd4:	08013318 	.word	0x08013318

08001cd8 <Check_File>:
    free(path);
    return fresult;
}

FRESULT Check_File(char *name )
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001ce0:	4906      	ldr	r1, [pc, #24]	; (8001cfc <Check_File+0x24>)
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f00f f921 	bl	8010f2a <f_stat>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <Check_File+0x28>)
 8001cee:	701a      	strb	r2, [r3, #0]
	return fresult;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <Check_File+0x28>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000244 	.word	0x20000244
 8001d00:	2000025c 	.word	0x2000025c

08001d04 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001d0c:	4943      	ldr	r1, [pc, #268]	; (8001e1c <Create_File+0x118>)
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f00f f90b 	bl	8010f2a <f_stat>
 8001d14:	4603      	mov	r3, r0
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <Create_File+0x11c>)
 8001d1a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001d1c:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <Create_File+0x11c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d112      	bne.n	8001d4a <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001d24:	2064      	movs	r0, #100	; 0x64
 8001d26:	f00f fe15 	bl	8011954 <malloc>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	493c      	ldr	r1, [pc, #240]	; (8001e24 <Create_File+0x120>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f010 f88e 	bl	8011e54 <siprintf>
		Send_USB_Console_Message(buf);
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff ffa0 	bl	8001c7e <Send_USB_Console_Message>
		free(buf);
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f00f fe10 	bl	8011964 <free>
	    return fresult;
 8001d44:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <Create_File+0x11c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	e063      	b.n	8001e12 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001d4a:	220b      	movs	r2, #11
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4836      	ldr	r0, [pc, #216]	; (8001e28 <Create_File+0x124>)
 8001d50:	f00e fd10 	bl	8010774 <f_open>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <Create_File+0x11c>)
 8001d5a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <Create_File+0x11c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d015      	beq.n	8001d90 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8001d64:	2064      	movs	r0, #100	; 0x64
 8001d66:	f00f fdf5 	bl	8011954 <malloc>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <Create_File+0x11c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	492d      	ldr	r1, [pc, #180]	; (8001e2c <Create_File+0x128>)
 8001d78:	6938      	ldr	r0, [r7, #16]
 8001d7a:	f010 f86b 	bl	8011e54 <siprintf>
			Send_USB_Console_Message(buf);
 8001d7e:	6938      	ldr	r0, [r7, #16]
 8001d80:	f7ff ff7d 	bl	8001c7e <Send_USB_Console_Message>
			free(buf);
 8001d84:	6938      	ldr	r0, [r7, #16]
 8001d86:	f00f fded 	bl	8011964 <free>
		    return fresult;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <Create_File+0x11c>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	e040      	b.n	8001e12 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001d90:	2064      	movs	r0, #100	; 0x64
 8001d92:	f00f fddf 	bl	8011954 <malloc>
 8001d96:	4603      	mov	r3, r0
 8001d98:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4924      	ldr	r1, [pc, #144]	; (8001e30 <Create_File+0x12c>)
 8001d9e:	69f8      	ldr	r0, [r7, #28]
 8001da0:	f010 f858 	bl	8011e54 <siprintf>
			Send_USB_Console_Message(buf);
 8001da4:	69f8      	ldr	r0, [r7, #28]
 8001da6:	f7ff ff6a 	bl	8001c7e <Send_USB_Console_Message>
			free(buf);
 8001daa:	69f8      	ldr	r0, [r7, #28]
 8001dac:	f00f fdda 	bl	8011964 <free>
		}

		fresult = f_close(&USBHFile);
 8001db0:	481d      	ldr	r0, [pc, #116]	; (8001e28 <Create_File+0x124>)
 8001db2:	f00f f890 	bl	8010ed6 <f_close>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <Create_File+0x11c>)
 8001dbc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <Create_File+0x11c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d013      	beq.n	8001dee <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001dc6:	2064      	movs	r0, #100	; 0x64
 8001dc8:	f00f fdc4 	bl	8011954 <malloc>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001dd0:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <Create_File+0x11c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <Create_File+0x130>)
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f010 f83a 	bl	8011e54 <siprintf>
			Send_USB_Console_Message(buf);
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7ff ff4c 	bl	8001c7e <Send_USB_Console_Message>
			free(buf);
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f00f fdbc 	bl	8011964 <free>
 8001dec:	e00f      	b.n	8001e0e <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001dee:	2064      	movs	r0, #100	; 0x64
 8001df0:	f00f fdb0 	bl	8011954 <malloc>
 8001df4:	4603      	mov	r3, r0
 8001df6:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	490f      	ldr	r1, [pc, #60]	; (8001e38 <Create_File+0x134>)
 8001dfc:	69b8      	ldr	r0, [r7, #24]
 8001dfe:	f010 f829 	bl	8011e54 <siprintf>
			Send_USB_Console_Message(buf);
 8001e02:	69b8      	ldr	r0, [r7, #24]
 8001e04:	f7ff ff3b 	bl	8001c7e <Send_USB_Console_Message>
			free(buf);
 8001e08:	69b8      	ldr	r0, [r7, #24]
 8001e0a:	f00f fdab 	bl	8011964 <free>
		}
	}
    return fresult;
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <Create_File+0x11c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000244 	.word	0x20000244
 8001e20:	2000025c 	.word	0x2000025c
 8001e24:	080135a0 	.word	0x080135a0
 8001e28:	20003620 	.word	0x20003620
 8001e2c:	080135d8 	.word	0x080135d8
 8001e30:	08013600 	.word	0x08013600
 8001e34:	08013640 	.word	0x08013640
 8001e38:	08013580 	.word	0x08013580

08001e3c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8001e46:	495e      	ldr	r1, [pc, #376]	; (8001fc0 <Update_File+0x184>)
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f00f f86e 	bl	8010f2a <f_stat>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <Update_File+0x188>)
 8001e54:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <Update_File+0x188>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f00f fd78 	bl	8011954 <malloc>
 8001e64:	4603      	mov	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4957      	ldr	r1, [pc, #348]	; (8001fc8 <Update_File+0x18c>)
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f00f fff1 	bl	8011e54 <siprintf>
		Send_USB_Console_Message (buf);
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ff03 	bl	8001c7e <Send_USB_Console_Message>
		free(buf);
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f00f fd73 	bl	8011964 <free>
	    return fresult;
 8001e7e:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <Update_File+0x188>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	e098      	b.n	8001fb6 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8001e84:	2232      	movs	r2, #50	; 0x32
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4850      	ldr	r0, [pc, #320]	; (8001fcc <Update_File+0x190>)
 8001e8a:	f00e fc73 	bl	8010774 <f_open>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <Update_File+0x188>)
 8001e94:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <Update_File+0x188>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d015      	beq.n	8001eca <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001e9e:	2064      	movs	r0, #100	; 0x64
 8001ea0:	f00f fd58 	bl	8011954 <malloc>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <Update_File+0x188>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4947      	ldr	r1, [pc, #284]	; (8001fd0 <Update_File+0x194>)
 8001eb2:	6938      	ldr	r0, [r7, #16]
 8001eb4:	f00f ffce 	bl	8011e54 <siprintf>
	    	Send_USB_Console_Message(buf);
 8001eb8:	6938      	ldr	r0, [r7, #16]
 8001eba:	f7ff fee0 	bl	8001c7e <Send_USB_Console_Message>
	        free(buf);
 8001ebe:	6938      	ldr	r0, [r7, #16]
 8001ec0:	f00f fd50 	bl	8011964 <free>
	        return fresult;
 8001ec4:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <Update_File+0x188>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	e075      	b.n	8001fb6 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8001eca:	2064      	movs	r0, #100	; 0x64
 8001ecc:	f00f fd42 	bl	8011954 <malloc>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	493f      	ldr	r1, [pc, #252]	; (8001fd4 <Update_File+0x198>)
 8001ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eda:	f00f ffbb 	bl	8011e54 <siprintf>
    	Send_USB_Console_Message(buf);
 8001ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee0:	f7ff fecd 	bl	8001c7e <Send_USB_Console_Message>
        free(buf);
 8001ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee6:	f00f fd3d 	bl	8011964 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8001eea:	6838      	ldr	r0, [r7, #0]
 8001eec:	f7fe f980 	bl	80001f0 <strlen>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <Update_File+0x19c>)
 8001ef4:	6839      	ldr	r1, [r7, #0]
 8001ef6:	4835      	ldr	r0, [pc, #212]	; (8001fcc <Update_File+0x190>)
 8001ef8:	f00e fdfa 	bl	8010af0 <f_write>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <Update_File+0x188>)
 8001f02:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f04:	4b2f      	ldr	r3, [pc, #188]	; (8001fc4 <Update_File+0x188>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001f0c:	2064      	movs	r0, #100	; 0x64
 8001f0e:	f00f fd21 	bl	8011954 <malloc>
 8001f12:	4603      	mov	r3, r0
 8001f14:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <Update_File+0x188>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	492f      	ldr	r1, [pc, #188]	; (8001fdc <Update_File+0x1a0>)
 8001f20:	69f8      	ldr	r0, [r7, #28]
 8001f22:	f00f ff97 	bl	8011e54 <siprintf>
	    	Send_USB_Console_Message(buf);
 8001f26:	69f8      	ldr	r0, [r7, #28]
 8001f28:	f7ff fea9 	bl	8001c7e <Send_USB_Console_Message>
	    	free(buf);
 8001f2c:	69f8      	ldr	r0, [r7, #28]
 8001f2e:	f00f fd19 	bl	8011964 <free>
 8001f32:	e00f      	b.n	8001f54 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f00f fd0d 	bl	8011954 <malloc>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4927      	ldr	r1, [pc, #156]	; (8001fe0 <Update_File+0x1a4>)
 8001f42:	6a38      	ldr	r0, [r7, #32]
 8001f44:	f00f ff86 	bl	8011e54 <siprintf>
	    	Send_USB_Console_Message(buf);
 8001f48:	6a38      	ldr	r0, [r7, #32]
 8001f4a:	f7ff fe98 	bl	8001c7e <Send_USB_Console_Message>
	    	free(buf);
 8001f4e:	6a38      	ldr	r0, [r7, #32]
 8001f50:	f00f fd08 	bl	8011964 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001f54:	481d      	ldr	r0, [pc, #116]	; (8001fcc <Update_File+0x190>)
 8001f56:	f00e ffbe 	bl	8010ed6 <f_close>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <Update_File+0x188>)
 8001f60:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <Update_File+0x188>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d013      	beq.n	8001f92 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001f6a:	2064      	movs	r0, #100	; 0x64
 8001f6c:	f00f fcf2 	bl	8011954 <malloc>
 8001f70:	4603      	mov	r3, r0
 8001f72:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <Update_File+0x188>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4919      	ldr	r1, [pc, #100]	; (8001fe4 <Update_File+0x1a8>)
 8001f7e:	6978      	ldr	r0, [r7, #20]
 8001f80:	f00f ff68 	bl	8011e54 <siprintf>
	    	Send_USB_Console_Message(buf);
 8001f84:	6978      	ldr	r0, [r7, #20]
 8001f86:	f7ff fe7a 	bl	8001c7e <Send_USB_Console_Message>
	    	free(buf);
 8001f8a:	6978      	ldr	r0, [r7, #20]
 8001f8c:	f00f fcea 	bl	8011964 <free>
 8001f90:	e00f      	b.n	8001fb2 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001f92:	2064      	movs	r0, #100	; 0x64
 8001f94:	f00f fcde 	bl	8011954 <malloc>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4912      	ldr	r1, [pc, #72]	; (8001fe8 <Update_File+0x1ac>)
 8001fa0:	69b8      	ldr	r0, [r7, #24]
 8001fa2:	f00f ff57 	bl	8011e54 <siprintf>
	    	Send_USB_Console_Message(buf);
 8001fa6:	69b8      	ldr	r0, [r7, #24]
 8001fa8:	f7ff fe69 	bl	8001c7e <Send_USB_Console_Message>
	    	free(buf);
 8001fac:	69b8      	ldr	r0, [r7, #24]
 8001fae:	f00f fcd9 	bl	8011964 <free>
	     }
	}
    return fresult;
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <Update_File+0x188>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000244 	.word	0x20000244
 8001fc4:	2000025c 	.word	0x2000025c
 8001fc8:	080133cc 	.word	0x080133cc
 8001fcc:	20003620 	.word	0x20003620
 8001fd0:	080133ec 	.word	0x080133ec
 8001fd4:	08013664 	.word	0x08013664
 8001fd8:	20000260 	.word	0x20000260
 8001fdc:	08013694 	.word	0x08013694
 8001fe0:	080136bc 	.word	0x080136bc
 8001fe4:	08013558 	.word	0x08013558
 8001fe8:	08013580 	.word	0x08013580

08001fec <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f00e ffd1 	bl	8010f9c <f_mkdir>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <Create_Dir+0x74>)
 8002000:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <Create_Dir+0x74>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d110      	bne.n	800202c <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 800200a:	2064      	movs	r0, #100	; 0x64
 800200c:	f00f fca2 	bl	8011954 <malloc>
 8002010:	4603      	mov	r3, r0
 8002012:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4913      	ldr	r1, [pc, #76]	; (8002064 <Create_Dir+0x78>)
 8002018:	68b8      	ldr	r0, [r7, #8]
 800201a:	f00f ff1b 	bl	8011e54 <siprintf>
    	Send_USB_Console_Message (buf);
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f7ff fe2d 	bl	8001c7e <Send_USB_Console_Message>
    	free(buf);
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f00f fc9d 	bl	8011964 <free>
 800202a:	e012      	b.n	8002052 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 800202c:	2064      	movs	r0, #100	; 0x64
 800202e:	f00f fc91 	bl	8011954 <malloc>
 8002032:	4603      	mov	r3, r0
 8002034:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <Create_Dir+0x74>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <Create_Dir+0x7c>)
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f00f ff07 	bl	8011e54 <siprintf>
    	Send_USB_Console_Message(buf);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff fe19 	bl	8001c7e <Send_USB_Console_Message>
    	free(buf);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f00f fc89 	bl	8011964 <free>
    }
    return fresult;
 8002052:	4b03      	ldr	r3, [pc, #12]	; (8002060 <Create_Dir+0x74>)
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000025c 	.word	0x2000025c
 8002064:	08013720 	.word	0x08013720
 8002068:	08013748 	.word	0x08013748

0800206c <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 8002074:	4a5d      	ldr	r2, [pc, #372]	; (80021ec <I3G450D_Init+0x180>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2102      	movs	r1, #2
 800207e:	485c      	ldr	r0, [pc, #368]	; (80021f0 <I3G450D_Init+0x184>)
 8002080:	f002 fd2a 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002084:	2014      	movs	r0, #20
 8002086:	f001 fead 	bl	8003de4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2102      	movs	r1, #2
 800208e:	4858      	ldr	r0, [pc, #352]	; (80021f0 <I3G450D_Init+0x184>)
 8002090:	f002 fd22 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002094:	2014      	movs	r0, #20
 8002096:	f001 fea5 	bl	8003de4 <HAL_Delay>
	spiTxBuf[0]=0x20;
 800209a:	4b56      	ldr	r3, [pc, #344]	; (80021f4 <I3G450D_Init+0x188>)
 800209c:	2220      	movs	r2, #32
 800209e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80020a0:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <I3G450D_Init+0x188>)
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <I3G450D_Init+0x180>)
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	2332      	movs	r3, #50	; 0x32
 80020ac:	2202      	movs	r2, #2
 80020ae:	4951      	ldr	r1, [pc, #324]	; (80021f4 <I3G450D_Init+0x188>)
 80020b0:	f005 ffe1 	bl	8008076 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80020b4:	2201      	movs	r2, #1
 80020b6:	2102      	movs	r1, #2
 80020b8:	484d      	ldr	r0, [pc, #308]	; (80021f0 <I3G450D_Init+0x184>)
 80020ba:	f002 fd0d 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80020be:	2014      	movs	r0, #20
 80020c0:	f001 fe90 	bl	8003de4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80020c4:	2200      	movs	r2, #0
 80020c6:	2102      	movs	r1, #2
 80020c8:	4849      	ldr	r0, [pc, #292]	; (80021f0 <I3G450D_Init+0x184>)
 80020ca:	f002 fd05 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80020ce:	2014      	movs	r0, #20
 80020d0:	f001 fe88 	bl	8003de4 <HAL_Delay>
	spiTxBuf[0]=0x21;
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <I3G450D_Init+0x188>)
 80020d6:	2221      	movs	r2, #33	; 0x21
 80020d8:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <I3G450D_Init+0x188>)
 80020dc:	2200      	movs	r2, #0
 80020de:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <I3G450D_Init+0x180>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	2332      	movs	r3, #50	; 0x32
 80020e6:	2202      	movs	r2, #2
 80020e8:	4942      	ldr	r1, [pc, #264]	; (80021f4 <I3G450D_Init+0x188>)
 80020ea:	f005 ffc4 	bl	8008076 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2102      	movs	r1, #2
 80020f2:	483f      	ldr	r0, [pc, #252]	; (80021f0 <I3G450D_Init+0x184>)
 80020f4:	f002 fcf0 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80020f8:	2014      	movs	r0, #20
 80020fa:	f001 fe73 	bl	8003de4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	2102      	movs	r1, #2
 8002102:	483b      	ldr	r0, [pc, #236]	; (80021f0 <I3G450D_Init+0x184>)
 8002104:	f002 fce8 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002108:	2014      	movs	r0, #20
 800210a:	f001 fe6b 	bl	8003de4 <HAL_Delay>
	spiTxBuf[0]=0x22;
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <I3G450D_Init+0x188>)
 8002110:	2222      	movs	r2, #34	; 0x22
 8002112:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8002114:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <I3G450D_Init+0x188>)
 8002116:	2200      	movs	r2, #0
 8002118:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800211a:	4b34      	ldr	r3, [pc, #208]	; (80021ec <I3G450D_Init+0x180>)
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	2332      	movs	r3, #50	; 0x32
 8002120:	2202      	movs	r2, #2
 8002122:	4934      	ldr	r1, [pc, #208]	; (80021f4 <I3G450D_Init+0x188>)
 8002124:	f005 ffa7 	bl	8008076 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	2102      	movs	r1, #2
 800212c:	4830      	ldr	r0, [pc, #192]	; (80021f0 <I3G450D_Init+0x184>)
 800212e:	f002 fcd3 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002132:	2014      	movs	r0, #20
 8002134:	f001 fe56 	bl	8003de4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	2102      	movs	r1, #2
 800213c:	482c      	ldr	r0, [pc, #176]	; (80021f0 <I3G450D_Init+0x184>)
 800213e:	f002 fccb 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002142:	2014      	movs	r0, #20
 8002144:	f001 fe4e 	bl	8003de4 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <I3G450D_Init+0x188>)
 800214a:	2223      	movs	r2, #35	; 0x23
 800214c:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <I3G450D_Init+0x188>)
 8002150:	2220      	movs	r2, #32
 8002152:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <I3G450D_Init+0x180>)
 8002156:	6818      	ldr	r0, [r3, #0]
 8002158:	2332      	movs	r3, #50	; 0x32
 800215a:	2202      	movs	r2, #2
 800215c:	4925      	ldr	r1, [pc, #148]	; (80021f4 <I3G450D_Init+0x188>)
 800215e:	f005 ff8a 	bl	8008076 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	2102      	movs	r1, #2
 8002166:	4822      	ldr	r0, [pc, #136]	; (80021f0 <I3G450D_Init+0x184>)
 8002168:	f002 fcb6 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800216c:	2014      	movs	r0, #20
 800216e:	f001 fe39 	bl	8003de4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2102      	movs	r1, #2
 8002176:	481e      	ldr	r0, [pc, #120]	; (80021f0 <I3G450D_Init+0x184>)
 8002178:	f002 fcae 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f001 fe31 	bl	8003de4 <HAL_Delay>
	spiTxBuf[0]=0x24;
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <I3G450D_Init+0x188>)
 8002184:	2224      	movs	r2, #36	; 0x24
 8002186:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8002188:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <I3G450D_Init+0x188>)
 800218a:	2210      	movs	r2, #16
 800218c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800218e:	4b17      	ldr	r3, [pc, #92]	; (80021ec <I3G450D_Init+0x180>)
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	2332      	movs	r3, #50	; 0x32
 8002194:	2202      	movs	r2, #2
 8002196:	4917      	ldr	r1, [pc, #92]	; (80021f4 <I3G450D_Init+0x188>)
 8002198:	f005 ff6d 	bl	8008076 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	2102      	movs	r1, #2
 80021a0:	4813      	ldr	r0, [pc, #76]	; (80021f0 <I3G450D_Init+0x184>)
 80021a2:	f002 fc99 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80021a6:	2014      	movs	r0, #20
 80021a8:	f001 fe1c 	bl	8003de4 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2102      	movs	r1, #2
 80021b0:	480f      	ldr	r0, [pc, #60]	; (80021f0 <I3G450D_Init+0x184>)
 80021b2:	f002 fc91 	bl	8004ad8 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <I3G450D_Init+0x188>)
 80021b8:	228f      	movs	r2, #143	; 0x8f
 80021ba:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <I3G450D_Init+0x180>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	2332      	movs	r3, #50	; 0x32
 80021c2:	2201      	movs	r2, #1
 80021c4:	490b      	ldr	r1, [pc, #44]	; (80021f4 <I3G450D_Init+0x188>)
 80021c6:	f005 ff56 	bl	8008076 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <I3G450D_Init+0x180>)
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	2332      	movs	r3, #50	; 0x32
 80021d0:	2201      	movs	r2, #1
 80021d2:	4909      	ldr	r1, [pc, #36]	; (80021f8 <I3G450D_Init+0x18c>)
 80021d4:	f006 f88b 	bl	80082ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	2102      	movs	r1, #2
 80021dc:	4804      	ldr	r0, [pc, #16]	; (80021f0 <I3G450D_Init+0x184>)
 80021de:	f002 fc7b 	bl	8004ad8 <HAL_GPIO_WritePin>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200031a8 	.word	0x200031a8
 80021f0:	40020800 	.word	0x40020800
 80021f4:	2000319c 	.word	0x2000319c
 80021f8:	200031a1 	.word	0x200031a1

080021fc <I3G450D_loop>:

void I3G450D_loop(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b098      	sub	sp, #96	; 0x60
 8002200:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8002202:	2300      	movs	r3, #0
 8002204:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8002208:	2300      	movs	r3, #0
 800220a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 800220e:	2300      	movs	r3, #0
 8002210:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8002218:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8002238:	463b      	mov	r3, r7
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <I3G450D_loop+0x1c8>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <I3G450D_loop+0x6a>
 800225e:	2b01      	cmp	r3, #1
 8002260:	f000 80c6 	beq.w	80023f0 <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8002264:	e379      	b.n	800295a <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8002266:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <I3G450D_loop+0x1cc>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 8374 	bne.w	8002958 <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	2102      	movs	r1, #2
 8002274:	4855      	ldr	r0, [pc, #340]	; (80023cc <I3G450D_loop+0x1d0>)
 8002276:	f002 fc2f 	bl	8004ad8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 800227a:	4b55      	ldr	r3, [pc, #340]	; (80023d0 <I3G450D_loop+0x1d4>)
 800227c:	22a8      	movs	r2, #168	; 0xa8
 800227e:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8002280:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <I3G450D_loop+0x1d8>)
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	2332      	movs	r3, #50	; 0x32
 8002286:	2201      	movs	r2, #1
 8002288:	4951      	ldr	r1, [pc, #324]	; (80023d0 <I3G450D_loop+0x1d4>)
 800228a:	f005 fef4 	bl	8008076 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 800228e:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <I3G450D_loop+0x1d8>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	2332      	movs	r3, #50	; 0x32
 8002294:	2201      	movs	r2, #1
 8002296:	4950      	ldr	r1, [pc, #320]	; (80023d8 <I3G450D_loop+0x1dc>)
 8002298:	f006 f829 	bl	80082ee <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2102      	movs	r1, #2
 80022a0:	484a      	ldr	r0, [pc, #296]	; (80023cc <I3G450D_loop+0x1d0>)
 80022a2:	f002 fc19 	bl	8004ad8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2102      	movs	r1, #2
 80022aa:	4848      	ldr	r0, [pc, #288]	; (80023cc <I3G450D_loop+0x1d0>)
 80022ac:	f002 fc14 	bl	8004ad8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 80022b0:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <I3G450D_loop+0x1d4>)
 80022b2:	22a9      	movs	r2, #169	; 0xa9
 80022b4:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <I3G450D_loop+0x1d8>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	2332      	movs	r3, #50	; 0x32
 80022bc:	2201      	movs	r2, #1
 80022be:	4944      	ldr	r1, [pc, #272]	; (80023d0 <I3G450D_loop+0x1d4>)
 80022c0:	f005 fed9 	bl	8008076 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 80022c4:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <I3G450D_loop+0x1d8>)
 80022c6:	6818      	ldr	r0, [r3, #0]
 80022c8:	2332      	movs	r3, #50	; 0x32
 80022ca:	2201      	movs	r2, #1
 80022cc:	4943      	ldr	r1, [pc, #268]	; (80023dc <I3G450D_loop+0x1e0>)
 80022ce:	f006 f80e 	bl	80082ee <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	2102      	movs	r1, #2
 80022d6:	483d      	ldr	r0, [pc, #244]	; (80023cc <I3G450D_loop+0x1d0>)
 80022d8:	f002 fbfe 	bl	8004ad8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	2102      	movs	r1, #2
 80022e0:	483a      	ldr	r0, [pc, #232]	; (80023cc <I3G450D_loop+0x1d0>)
 80022e2:	f002 fbf9 	bl	8004ad8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 80022e6:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <I3G450D_loop+0x1d4>)
 80022e8:	22aa      	movs	r2, #170	; 0xaa
 80022ea:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <I3G450D_loop+0x1d8>)
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	2332      	movs	r3, #50	; 0x32
 80022f2:	2201      	movs	r2, #1
 80022f4:	4936      	ldr	r1, [pc, #216]	; (80023d0 <I3G450D_loop+0x1d4>)
 80022f6:	f005 febe 	bl	8008076 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 80022fa:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <I3G450D_loop+0x1d8>)
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	2332      	movs	r3, #50	; 0x32
 8002300:	2201      	movs	r2, #1
 8002302:	4937      	ldr	r1, [pc, #220]	; (80023e0 <I3G450D_loop+0x1e4>)
 8002304:	f005 fff3 	bl	80082ee <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002308:	2201      	movs	r2, #1
 800230a:	2102      	movs	r1, #2
 800230c:	482f      	ldr	r0, [pc, #188]	; (80023cc <I3G450D_loop+0x1d0>)
 800230e:	f002 fbe3 	bl	8004ad8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	2102      	movs	r1, #2
 8002316:	482d      	ldr	r0, [pc, #180]	; (80023cc <I3G450D_loop+0x1d0>)
 8002318:	f002 fbde 	bl	8004ad8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 800231c:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <I3G450D_loop+0x1d4>)
 800231e:	22ab      	movs	r2, #171	; 0xab
 8002320:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <I3G450D_loop+0x1d8>)
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	2332      	movs	r3, #50	; 0x32
 8002328:	2201      	movs	r2, #1
 800232a:	4929      	ldr	r1, [pc, #164]	; (80023d0 <I3G450D_loop+0x1d4>)
 800232c:	f005 fea3 	bl	8008076 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 8002330:	4b28      	ldr	r3, [pc, #160]	; (80023d4 <I3G450D_loop+0x1d8>)
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	2332      	movs	r3, #50	; 0x32
 8002336:	2201      	movs	r2, #1
 8002338:	492a      	ldr	r1, [pc, #168]	; (80023e4 <I3G450D_loop+0x1e8>)
 800233a:	f005 ffd8 	bl	80082ee <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	2102      	movs	r1, #2
 8002342:	4822      	ldr	r0, [pc, #136]	; (80023cc <I3G450D_loop+0x1d0>)
 8002344:	f002 fbc8 	bl	8004ad8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2102      	movs	r1, #2
 800234c:	481f      	ldr	r0, [pc, #124]	; (80023cc <I3G450D_loop+0x1d0>)
 800234e:	f002 fbc3 	bl	8004ad8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8002352:	4b1f      	ldr	r3, [pc, #124]	; (80023d0 <I3G450D_loop+0x1d4>)
 8002354:	22ac      	movs	r2, #172	; 0xac
 8002356:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <I3G450D_loop+0x1d8>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	2332      	movs	r3, #50	; 0x32
 800235e:	2201      	movs	r2, #1
 8002360:	491b      	ldr	r1, [pc, #108]	; (80023d0 <I3G450D_loop+0x1d4>)
 8002362:	f005 fe88 	bl	8008076 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <I3G450D_loop+0x1d8>)
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	2332      	movs	r3, #50	; 0x32
 800236c:	2201      	movs	r2, #1
 800236e:	491e      	ldr	r1, [pc, #120]	; (80023e8 <I3G450D_loop+0x1ec>)
 8002370:	f005 ffbd 	bl	80082ee <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	2102      	movs	r1, #2
 8002378:	4814      	ldr	r0, [pc, #80]	; (80023cc <I3G450D_loop+0x1d0>)
 800237a:	f002 fbad 	bl	8004ad8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	2102      	movs	r1, #2
 8002382:	4812      	ldr	r0, [pc, #72]	; (80023cc <I3G450D_loop+0x1d0>)
 8002384:	f002 fba8 	bl	8004ad8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <I3G450D_loop+0x1d4>)
 800238a:	22ad      	movs	r2, #173	; 0xad
 800238c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <I3G450D_loop+0x1d8>)
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	2332      	movs	r3, #50	; 0x32
 8002394:	2201      	movs	r2, #1
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <I3G450D_loop+0x1d4>)
 8002398:	f005 fe6d 	bl	8008076 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <I3G450D_loop+0x1d8>)
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	2332      	movs	r3, #50	; 0x32
 80023a2:	2201      	movs	r2, #1
 80023a4:	4911      	ldr	r1, [pc, #68]	; (80023ec <I3G450D_loop+0x1f0>)
 80023a6:	f005 ffa2 	bl	80082ee <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80023aa:	2201      	movs	r2, #1
 80023ac:	2102      	movs	r1, #2
 80023ae:	4807      	ldr	r0, [pc, #28]	; (80023cc <I3G450D_loop+0x1d0>)
 80023b0:	f002 fb92 	bl	8004ad8 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 80023b4:	4b03      	ldr	r3, [pc, #12]	; (80023c4 <I3G450D_loop+0x1c8>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 80023ba:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <I3G450D_loop+0x1cc>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
				break;
 80023c0:	e2ca      	b.n	8002958 <I3G450D_loop+0x75c>
 80023c2:	bf00      	nop
 80023c4:	20000265 	.word	0x20000265
 80023c8:	200000e4 	.word	0x200000e4
 80023cc:	40020800 	.word	0x40020800
 80023d0:	2000319c 	.word	0x2000319c
 80023d4:	200031a8 	.word	0x200031a8
 80023d8:	200031a1 	.word	0x200031a1
 80023dc:	200031a2 	.word	0x200031a2
 80023e0:	200031a3 	.word	0x200031a3
 80023e4:	200031a4 	.word	0x200031a4
 80023e8:	200031a5 	.word	0x200031a5
 80023ec:	200031a6 	.word	0x200031a6
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 80023f0:	4ba0      	ldr	r3, [pc, #640]	; (8002674 <I3G450D_loop+0x478>)
 80023f2:	789b      	ldrb	r3, [r3, #2]
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	4b9e      	ldr	r3, [pc, #632]	; (8002674 <I3G450D_loop+0x478>)
 80023fa:	785b      	ldrb	r3, [r3, #1]
 80023fc:	b21b      	sxth	r3, r3
 80023fe:	4313      	orrs	r3, r2
 8002400:	b21b      	sxth	r3, r3
 8002402:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8002406:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <I3G450D_loop+0x478>)
 8002408:	791b      	ldrb	r3, [r3, #4]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	b21a      	sxth	r2, r3
 800240e:	4b99      	ldr	r3, [pc, #612]	; (8002674 <I3G450D_loop+0x478>)
 8002410:	78db      	ldrb	r3, [r3, #3]
 8002412:	b21b      	sxth	r3, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	b21b      	sxth	r3, r3
 8002418:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 800241c:	4b95      	ldr	r3, [pc, #596]	; (8002674 <I3G450D_loop+0x478>)
 800241e:	799b      	ldrb	r3, [r3, #6]
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	b21a      	sxth	r2, r3
 8002424:	4b93      	ldr	r3, [pc, #588]	; (8002674 <I3G450D_loop+0x478>)
 8002426:	795b      	ldrb	r3, [r3, #5]
 8002428:	b21b      	sxth	r3, r3
 800242a:	4313      	orrs	r3, r2
 800242c:	b21b      	sxth	r3, r3
 800242e:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8002430:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002434:	b21a      	sxth	r2, r3
 8002436:	4b90      	ldr	r3, [pc, #576]	; (8002678 <I3G450D_loop+0x47c>)
 8002438:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 800243a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800243e:	b21a      	sxth	r2, r3
 8002440:	4b8e      	ldr	r3, [pc, #568]	; (800267c <I3G450D_loop+0x480>)
 8002442:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8002444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002446:	b21a      	sxth	r2, r3
 8002448:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <I3G450D_loop+0x484>)
 800244a:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 800244c:	4b8d      	ldr	r3, [pc, #564]	; (8002684 <I3G450D_loop+0x488>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b02      	cmp	r3, #2
 8002452:	f040 80d5 	bne.w	8002600 <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8002456:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800245a:	b21b      	sxth	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	4b8a      	ldr	r3, [pc, #552]	; (8002688 <I3G450D_loop+0x48c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800268c <I3G450D_loop+0x490>
 8002470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002474:	4b86      	ldr	r3, [pc, #536]	; (8002690 <I3G450D_loop+0x494>)
 8002476:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 800247a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800247e:	b21b      	sxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	4b84      	ldr	r3, [pc, #528]	; (8002694 <I3G450D_loop+0x498>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800268c <I3G450D_loop+0x490>
 8002494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002498:	4b7f      	ldr	r3, [pc, #508]	; (8002698 <I3G450D_loop+0x49c>)
 800249a:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 800249e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	4b7d      	ldr	r3, [pc, #500]	; (800269c <I3G450D_loop+0x4a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024b2:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800268c <I3G450D_loop+0x490>
 80024b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ba:	4b79      	ldr	r3, [pc, #484]	; (80026a0 <I3G450D_loop+0x4a4>)
 80024bc:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <I3G450D_loop+0x4a8>)
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 80024c4:	4b72      	ldr	r3, [pc, #456]	; (8002690 <I3G450D_loop+0x494>)
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	4b77      	ldr	r3, [pc, #476]	; (80026a8 <I3G450D_loop+0x4ac>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	dc0c      	bgt.n	80024f4 <I3G450D_loop+0x2f8>
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <I3G450D_loop+0x4ac>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eeb1 7a67 	vneg.f32	s14, s15
 80024e4:	4b6a      	ldr	r3, [pc, #424]	; (8002690 <I3G450D_loop+0x494>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	dd1b      	ble.n	800252c <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 80024f4:	4b66      	ldr	r3, [pc, #408]	; (8002690 <I3G450D_loop+0x494>)
 80024f6:	ed93 7a00 	vldr	s14, [r3]
 80024fa:	4b6c      	ldr	r3, [pc, #432]	; (80026ac <I3G450D_loop+0x4b0>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002504:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002514:	4b66      	ldr	r3, [pc, #408]	; (80026b0 <I3G450D_loop+0x4b4>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251e:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <I3G450D_loop+0x4b4>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <I3G450D_loop+0x494>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a60      	ldr	r2, [pc, #384]	; (80026ac <I3G450D_loop+0x4b0>)
 800252a:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 800252c:	4b5a      	ldr	r3, [pc, #360]	; (8002698 <I3G450D_loop+0x49c>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b60      	ldr	r3, [pc, #384]	; (80026b4 <I3G450D_loop+0x4b8>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	dc0c      	bgt.n	800255c <I3G450D_loop+0x360>
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <I3G450D_loop+0x4b8>)
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	eeb1 7a67 	vneg.f32	s14, s15
 800254c:	4b52      	ldr	r3, [pc, #328]	; (8002698 <I3G450D_loop+0x49c>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd1b      	ble.n	8002594 <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 800255c:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <I3G450D_loop+0x49c>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <I3G450D_loop+0x4bc>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800256c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002574:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002578:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800257c:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <I3G450D_loop+0x4c0>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <I3G450D_loop+0x4c0>)
 8002588:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 800258c:	4b42      	ldr	r3, [pc, #264]	; (8002698 <I3G450D_loop+0x49c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a49      	ldr	r2, [pc, #292]	; (80026b8 <I3G450D_loop+0x4bc>)
 8002592:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <I3G450D_loop+0x4a4>)
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <I3G450D_loop+0x4c4>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dc0d      	bgt.n	80025c6 <I3G450D_loop+0x3ca>
 80025aa:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <I3G450D_loop+0x4c4>)
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	eeb1 7a67 	vneg.f32	s14, s15
 80025b4:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <I3G450D_loop+0x4a4>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	f340 81c2 	ble.w	800294a <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <I3G450D_loop+0x4a4>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <I3G450D_loop+0x4c8>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <I3G450D_loop+0x4cc>)
 80025e8:	edd3 7a00 	vldr	s15, [r3]
 80025ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f0:	4b35      	ldr	r3, [pc, #212]	; (80026c8 <I3G450D_loop+0x4cc>)
 80025f2:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <I3G450D_loop+0x4a4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a32      	ldr	r2, [pc, #200]	; (80026c4 <I3G450D_loop+0x4c8>)
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e1a4      	b.n	800294a <I3G450D_loop+0x74e>
				switch(currentcalistate)
 8002600:	4b20      	ldr	r3, [pc, #128]	; (8002684 <I3G450D_loop+0x488>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	f000 819b 	beq.w	8002940 <I3G450D_loop+0x744>
 800260a:	2b02      	cmp	r3, #2
 800260c:	f300 819a 	bgt.w	8002944 <I3G450D_loop+0x748>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <I3G450D_loop+0x41e>
 8002614:	2b01      	cmp	r3, #1
 8002616:	d029      	beq.n	800266c <I3G450D_loop+0x470>
						break;
 8002618:	e194      	b.n	8002944 <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 800261a:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <I3G450D_loop+0x4d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002622:	b211      	sxth	r1, r2
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <I3G450D_loop+0x4d4>)
 8002626:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <I3G450D_loop+0x4d0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002632:	b211      	sxth	r1, r2
 8002634:	4a27      	ldr	r2, [pc, #156]	; (80026d4 <I3G450D_loop+0x4d8>)
 8002636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <I3G450D_loop+0x4d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002640:	b211      	sxth	r1, r2
 8002642:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <I3G450D_loop+0x4dc>)
 8002644:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <I3G450D_loop+0x4d0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <I3G450D_loop+0x4d0>)
 8002650:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <I3G450D_loop+0x4d0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800265a:	f0c0 8175 	bcc.w	8002948 <I3G450D_loop+0x74c>
							caliCounter=0;
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <I3G450D_loop+0x4d0>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <I3G450D_loop+0x488>)
 8002666:	2201      	movs	r2, #1
 8002668:	701a      	strb	r2, [r3, #0]
						break;
 800266a:	e16d      	b.n	8002948 <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 800266c:	2300      	movs	r3, #0
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002670:	e0a5      	b.n	80027be <I3G450D_loop+0x5c2>
 8002672:	bf00      	nop
 8002674:	200031a0 	.word	0x200031a0
 8002678:	200002b0 	.word	0x200002b0
 800267c:	200002b2 	.word	0x200002b2
 8002680:	200002b4 	.word	0x200002b4
 8002684:	20000264 	.word	0x20000264
 8002688:	20000274 	.word	0x20000274
 800268c:	3d8f5c29 	.word	0x3d8f5c29
 8002690:	20000268 	.word	0x20000268
 8002694:	20000278 	.word	0x20000278
 8002698:	2000026c 	.word	0x2000026c
 800269c:	2000027c 	.word	0x2000027c
 80026a0:	20000270 	.word	0x20000270
 80026a4:	3b449ba6 	.word	0x3b449ba6
 80026a8:	20000280 	.word	0x20000280
 80026ac:	20000298 	.word	0x20000298
 80026b0:	2000028c 	.word	0x2000028c
 80026b4:	20000284 	.word	0x20000284
 80026b8:	2000029c 	.word	0x2000029c
 80026bc:	20000290 	.word	0x20000290
 80026c0:	20000288 	.word	0x20000288
 80026c4:	200002a0 	.word	0x200002a0
 80026c8:	20000294 	.word	0x20000294
 80026cc:	200002b8 	.word	0x200002b8
 80026d0:	200002bc 	.word	0x200002bc
 80026d4:	2000125c 	.word	0x2000125c
 80026d8:	200021fc 	.word	0x200021fc
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 80026dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3360      	adds	r3, #96	; 0x60
 80026e2:	443b      	add	r3, r7
 80026e4:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 80026e8:	461a      	mov	r2, r3
 80026ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	499d      	ldr	r1, [pc, #628]	; (8002964 <I3G450D_loop+0x768>)
 80026f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80026f6:	4413      	add	r3, r2
 80026f8:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 80026fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	3360      	adds	r3, #96	; 0x60
 8002700:	443b      	add	r3, r7
 8002702:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8002706:	461a      	mov	r2, r3
 8002708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	4996      	ldr	r1, [pc, #600]	; (8002968 <I3G450D_loop+0x76c>)
 800270e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002710:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002714:	4413      	add	r3, r2
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8002718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	3360      	adds	r3, #96	; 0x60
 800271e:	443b      	add	r3, r7
 8002720:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8002724:	461a      	mov	r2, r3
 8002726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	4990      	ldr	r1, [pc, #576]	; (800296c <I3G450D_loop+0x770>)
 800272c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800272e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002732:	4413      	add	r3, r2
 8002734:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8002736:	4a8b      	ldr	r2, [pc, #556]	; (8002964 <I3G450D_loop+0x768>)
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800273e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	3360      	adds	r3, #96	; 0x60
 8002744:	443b      	add	r3, r7
 8002746:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 800274a:	4a87      	ldr	r2, [pc, #540]	; (8002968 <I3G450D_loop+0x76c>)
 800274c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800274e:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	3360      	adds	r3, #96	; 0x60
 8002758:	443b      	add	r3, r7
 800275a:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 800275e:	4a83      	ldr	r2, [pc, #524]	; (800296c <I3G450D_loop+0x770>)
 8002760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002762:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	3360      	adds	r3, #96	; 0x60
 800276c:	443b      	add	r3, r7
 800276e:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8002772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002774:	4a7e      	ldr	r2, [pc, #504]	; (8002970 <I3G450D_loop+0x774>)
 8002776:	fb82 1203 	smull	r1, r2, r2, r3
 800277a:	1092      	asrs	r2, r2, #2
 800277c:	17db      	asrs	r3, r3, #31
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	4a7c      	ldr	r2, [pc, #496]	; (8002974 <I3G450D_loop+0x778>)
 8002782:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	4a7a      	ldr	r2, [pc, #488]	; (8002970 <I3G450D_loop+0x774>)
 8002788:	fb82 1203 	smull	r1, r2, r2, r3
 800278c:	1092      	asrs	r2, r2, #2
 800278e:	17db      	asrs	r3, r3, #31
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	4a79      	ldr	r2, [pc, #484]	; (8002978 <I3G450D_loop+0x77c>)
 8002794:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8002796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002798:	4a75      	ldr	r2, [pc, #468]	; (8002970 <I3G450D_loop+0x774>)
 800279a:	fb82 1203 	smull	r1, r2, r2, r3
 800279e:	1092      	asrs	r2, r2, #2
 80027a0:	17db      	asrs	r3, r3, #31
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	4a75      	ldr	r2, [pc, #468]	; (800297c <I3G450D_loop+0x780>)
 80027a6:	6013      	str	r3, [r2, #0]
								windowPosition++;
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	3301      	adds	r3, #1
 80027ac:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 80027ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b0:	2b09      	cmp	r3, #9
 80027b2:	d901      	bls.n	80027b8 <I3G450D_loop+0x5bc>
									windowPosition=0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	3301      	adds	r3, #1
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027c4:	d38a      	bcc.n	80026dc <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ca:	e089      	b.n	80028e0 <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 80027cc:	4a65      	ldr	r2, [pc, #404]	; (8002964 <I3G450D_loop+0x768>)
 80027ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b67      	ldr	r3, [pc, #412]	; (8002974 <I3G450D_loop+0x778>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1ad2      	subs	r2, r2, r3
 80027dc:	4b68      	ldr	r3, [pc, #416]	; (8002980 <I3G450D_loop+0x784>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	dd0a      	ble.n	80027fa <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 80027e4:	4a5f      	ldr	r2, [pc, #380]	; (8002964 <I3G450D_loop+0x768>)
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b61      	ldr	r3, [pc, #388]	; (8002974 <I3G450D_loop+0x778>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	4a62      	ldr	r2, [pc, #392]	; (8002980 <I3G450D_loop+0x784>)
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e015      	b.n	8002826 <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 80027fa:	4a5a      	ldr	r2, [pc, #360]	; (8002964 <I3G450D_loop+0x768>)
 80027fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002802:	461a      	mov	r2, r3
 8002804:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <I3G450D_loop+0x778>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1ad2      	subs	r2, r2, r3
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <I3G450D_loop+0x784>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	425b      	negs	r3, r3
 8002810:	429a      	cmp	r2, r3
 8002812:	da08      	bge.n	8002826 <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8002814:	4b57      	ldr	r3, [pc, #348]	; (8002974 <I3G450D_loop+0x778>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4952      	ldr	r1, [pc, #328]	; (8002964 <I3G450D_loop+0x768>)
 800281a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800281c:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	4a57      	ldr	r2, [pc, #348]	; (8002980 <I3G450D_loop+0x784>)
 8002824:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8002826:	4a50      	ldr	r2, [pc, #320]	; (8002968 <I3G450D_loop+0x76c>)
 8002828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800282e:	461a      	mov	r2, r3
 8002830:	4b51      	ldr	r3, [pc, #324]	; (8002978 <I3G450D_loop+0x77c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	4b53      	ldr	r3, [pc, #332]	; (8002984 <I3G450D_loop+0x788>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	dd0a      	ble.n	8002854 <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 800283e:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <I3G450D_loop+0x76c>)
 8002840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002842:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002846:	461a      	mov	r2, r3
 8002848:	4b4b      	ldr	r3, [pc, #300]	; (8002978 <I3G450D_loop+0x77c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <I3G450D_loop+0x788>)
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e015      	b.n	8002880 <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8002854:	4a44      	ldr	r2, [pc, #272]	; (8002968 <I3G450D_loop+0x76c>)
 8002856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002858:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800285c:	461a      	mov	r2, r3
 800285e:	4b46      	ldr	r3, [pc, #280]	; (8002978 <I3G450D_loop+0x77c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	4b47      	ldr	r3, [pc, #284]	; (8002984 <I3G450D_loop+0x788>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	425b      	negs	r3, r3
 800286a:	429a      	cmp	r2, r3
 800286c:	da08      	bge.n	8002880 <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 800286e:	4b42      	ldr	r3, [pc, #264]	; (8002978 <I3G450D_loop+0x77c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	493d      	ldr	r1, [pc, #244]	; (8002968 <I3G450D_loop+0x76c>)
 8002874:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002876:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	4a41      	ldr	r2, [pc, #260]	; (8002984 <I3G450D_loop+0x788>)
 800287e:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8002880:	4a3a      	ldr	r2, [pc, #232]	; (800296c <I3G450D_loop+0x770>)
 8002882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002884:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002888:	461a      	mov	r2, r3
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <I3G450D_loop+0x780>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <I3G450D_loop+0x78c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	dd0a      	ble.n	80028ae <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8002898:	4a34      	ldr	r2, [pc, #208]	; (800296c <I3G450D_loop+0x770>)
 800289a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800289c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <I3G450D_loop+0x780>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	4a37      	ldr	r2, [pc, #220]	; (8002988 <I3G450D_loop+0x78c>)
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	e015      	b.n	80028da <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 80028ae:	4a2f      	ldr	r2, [pc, #188]	; (800296c <I3G450D_loop+0x770>)
 80028b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <I3G450D_loop+0x780>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	1ad2      	subs	r2, r2, r3
 80028be:	4b32      	ldr	r3, [pc, #200]	; (8002988 <I3G450D_loop+0x78c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	425b      	negs	r3, r3
 80028c4:	429a      	cmp	r2, r3
 80028c6:	da08      	bge.n	80028da <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <I3G450D_loop+0x780>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4927      	ldr	r1, [pc, #156]	; (800296c <I3G450D_loop+0x770>)
 80028ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028d0:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	4a2c      	ldr	r2, [pc, #176]	; (8002988 <I3G450D_loop+0x78c>)
 80028d8:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80028da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028dc:	3301      	adds	r3, #1
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
 80028e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028e6:	f4ff af71 	bcc.w	80027cc <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 80028ea:	4b25      	ldr	r3, [pc, #148]	; (8002980 <I3G450D_loop+0x784>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800298c <I3G450D_loop+0x790>
 80028fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <I3G450D_loop+0x794>)
 8002900:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <I3G450D_loop+0x788>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002910:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800298c <I3G450D_loop+0x790>
 8002914:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <I3G450D_loop+0x798>)
 800291a:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <I3G450D_loop+0x78c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800298c <I3G450D_loop+0x790>
 800292e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <I3G450D_loop+0x79c>)
 8002934:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8002938:	4b18      	ldr	r3, [pc, #96]	; (800299c <I3G450D_loop+0x7a0>)
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
							break;
 800293e:	e004      	b.n	800294a <I3G450D_loop+0x74e>
						break;
 8002940:	bf00      	nop
 8002942:	e002      	b.n	800294a <I3G450D_loop+0x74e>
						break;
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <I3G450D_loop+0x74e>
						break;
 8002948:	bf00      	nop
			currentState=L3GD20_fisrt;
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <I3G450D_loop+0x7a4>)
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <I3G450D_loop+0x7a8>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
			break;
 8002956:	e000      	b.n	800295a <I3G450D_loop+0x75e>
				break;
 8002958:	bf00      	nop

		}
}
 800295a:	bf00      	nop
 800295c:	3760      	adds	r7, #96	; 0x60
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200002bc 	.word	0x200002bc
 8002968:	2000125c 	.word	0x2000125c
 800296c:	200021fc 	.word	0x200021fc
 8002970:	66666667 	.word	0x66666667
 8002974:	20000274 	.word	0x20000274
 8002978:	20000278 	.word	0x20000278
 800297c:	2000027c 	.word	0x2000027c
 8002980:	200002a4 	.word	0x200002a4
 8002984:	200002a8 	.word	0x200002a8
 8002988:	200002ac 	.word	0x200002ac
 800298c:	3d8f5c29 	.word	0x3d8f5c29
 8002990:	20000280 	.word	0x20000280
 8002994:	20000284 	.word	0x20000284
 8002998:	20000288 	.word	0x20000288
 800299c:	20000264 	.word	0x20000264
 80029a0:	20000265 	.word	0x20000265
 80029a4:	200000e4 	.word	0x200000e4

080029a8 <GyroGetData>:
void GyroGetData(int16_t *x, int16_t*y, int16_t*z)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
	*x = Angle_X;
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <GyroGetData+0x54>)
 80029b6:	edd3 7a00 	vldr	s15, [r3]
 80029ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029be:	ee17 3a90 	vmov	r3, s15
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	801a      	strh	r2, [r3, #0]
	*y = Angle_Y;
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <GyroGetData+0x58>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029d2:	ee17 3a90 	vmov	r3, s15
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	801a      	strh	r2, [r3, #0]
	*z = Angle_Z;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <GyroGetData+0x5c>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e6:	ee17 3a90 	vmov	r3, s15
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	801a      	strh	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	2000028c 	.word	0x2000028c
 8002a00:	20000290 	.word	0x20000290
 8002a04:	20000294 	.word	0x20000294

08002a08 <GyroGetInerrrupt>:
int GyroGetInerrrupt()
{// no interrupt gestures currently.
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
	return 0;}
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a1c:	f001 f970 	bl	8003d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a20:	f000 f82a 	bl	8002a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a24:	f000 fa7c 	bl	8002f20 <MX_GPIO_Init>
  MX_CRC_Init();
 8002a28:	f000 f890 	bl	8002b4c <MX_CRC_Init>
  MX_FMC_Init();
 8002a2c:	f000 fa28 	bl	8002e80 <MX_FMC_Init>
  MX_SPI5_Init();
 8002a30:	f000 f8e0 	bl	8002bf4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8002a34:	f000 f914 	bl	8002c60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002a38:	f000 f9d8 	bl	8002dec <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8002a3c:	f00e fc1e 	bl	801127c <MX_USB_HOST_Init>
  MX_DMA_Init();
 8002a40:	f000 f9fe 	bl	8002e40 <MX_DMA_Init>
  MX_I2C3_Init();
 8002a44:	f000 f896 	bl	8002b74 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002a48:	f000 f95a 	bl	8002d00 <MX_TIM2_Init>
  MX_FATFS_Init();
 8002a4c:	f008 ff90 	bl	800b970 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8002a50:	4806      	ldr	r0, [pc, #24]	; (8002a6c <main+0x54>)
 8002a52:	f000 fc31 	bl	80032b8 <RetargetInit>
  SessionControllerInit(&hi2c3,&hspi5,&huart1);
 8002a56:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <main+0x54>)
 8002a58:	4905      	ldr	r1, [pc, #20]	; (8002a70 <main+0x58>)
 8002a5a:	4806      	ldr	r0, [pc, #24]	; (8002a74 <main+0x5c>)
 8002a5c:	f7fe fcb4 	bl	80013c8 <SessionControllerInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002a60:	f00e fc32 	bl	80112c8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    SessionControllerProcess();
 8002a64:	f7fe fcd2 	bl	800140c <SessionControllerProcess>
    MX_USB_HOST_Process();
 8002a68:	e7fa      	b.n	8002a60 <main+0x48>
 8002a6a:	bf00      	nop
 8002a6c:	20003350 	.word	0x20003350
 8002a70:	20003208 	.word	0x20003208
 8002a74:	200031b4 	.word	0x200031b4

08002a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b094      	sub	sp, #80	; 0x50
 8002a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	2230      	movs	r2, #48	; 0x30
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f00e ff82 	bl	8011990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <SystemClock_Config+0xcc>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <SystemClock_Config+0xcc>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <SystemClock_Config+0xcc>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <SystemClock_Config+0xd0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002ac4:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <SystemClock_Config+0xd0>)
 8002ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <SystemClock_Config+0xd0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002adc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002aec:	2304      	movs	r3, #4
 8002aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002af0:	2348      	movs	r3, #72	; 0x48
 8002af2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002af4:	2302      	movs	r3, #2
 8002af6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002af8:	2303      	movs	r3, #3
 8002afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 fd63 	bl	80075cc <HAL_RCC_OscConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b0c:	f000 fbce 	bl	80032ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b10:	230f      	movs	r3, #15
 8002b12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b14:	2302      	movs	r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b26:	f107 030c 	add.w	r3, r7, #12
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f004 ffc5 	bl	8007abc <HAL_RCC_ClockConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b38:	f000 fbb8 	bl	80032ac <Error_Handler>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	3750      	adds	r7, #80	; 0x50
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000

08002b4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MX_CRC_Init+0x20>)
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <MX_CRC_Init+0x24>)
 8002b54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002b56:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_CRC_Init+0x20>)
 8002b58:	f001 fa79 	bl	800404e <HAL_CRC_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002b62:	f000 fba3 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	200031ac 	.word	0x200031ac
 8002b70:	40023000 	.word	0x40023000

08002b74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002b7a:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <MX_I2C3_Init+0x78>)
 8002b7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <MX_I2C3_Init+0x7c>)
 8002b82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b90:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b96:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b98:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002bb2:	f003 fbcd 	bl	8006350 <HAL_I2C_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002bbc:	f000 fb76 	bl	80032ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002bc4:	f004 fc87 	bl	80074d6 <HAL_I2CEx_ConfigAnalogFilter>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002bce:	f000 fb6d 	bl	80032ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4804      	ldr	r0, [pc, #16]	; (8002be8 <MX_I2C3_Init+0x74>)
 8002bd6:	f004 fcba 	bl	800754e <HAL_I2CEx_ConfigDigitalFilter>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002be0:	f000 fb64 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200031b4 	.word	0x200031b4
 8002bec:	40005c00 	.word	0x40005c00
 8002bf0:	000186a0 	.word	0x000186a0

08002bf4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002bfa:	4a18      	ldr	r2, [pc, #96]	; (8002c5c <MX_SPI5_Init+0x68>)
 8002bfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002bfe:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c12:	4b11      	ldr	r3, [pc, #68]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c26:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c28:	2218      	movs	r2, #24
 8002c2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c40:	220a      	movs	r2, #10
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002c44:	4804      	ldr	r0, [pc, #16]	; (8002c58 <MX_SPI5_Init+0x64>)
 8002c46:	f005 f98d 	bl	8007f64 <HAL_SPI_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002c50:	f000 fb2c 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002c54:	bf00      	nop
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	20003208 	.word	0x20003208
 8002c5c:	40015000 	.word	0x40015000

08002c60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c66:	f107 0308 	add.w	r3, r7, #8
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	609a      	str	r2, [r3, #8]
 8002c72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c74:	463b      	mov	r3, r7
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002c7e:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <MX_TIM1_Init+0x9c>)
 8002c80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c96:	4b18      	ldr	r3, [pc, #96]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ca8:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002caa:	f005 ff03 	bl	8008ab4 <HAL_TIM_Base_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002cb4:	f000 fafa 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	480c      	ldr	r0, [pc, #48]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002cc6:	f006 f85f 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002cd0:	f000 faec 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cdc:	463b      	mov	r3, r7
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_TIM1_Init+0x98>)
 8002ce2:	f006 fc03 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002cec:	f000 fade 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20003260 	.word	0x20003260
 8002cfc:	40010000 	.word	0x40010000

08002d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	615a      	str	r2, [r3, #20]
 8002d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002d38:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d3a:	2259      	movs	r2, #89	; 0x59
 8002d3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d44:	4b28      	ldr	r3, [pc, #160]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d4c:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d52:	4b25      	ldr	r3, [pc, #148]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d58:	4823      	ldr	r0, [pc, #140]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d5a:	f005 feab 	bl	8008ab4 <HAL_TIM_Base_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002d64:	f000 faa2 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d72:	4619      	mov	r1, r3
 8002d74:	481c      	ldr	r0, [pc, #112]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d76:	f006 f807 	bl	8008d88 <HAL_TIM_ConfigClockSource>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002d80:	f000 fa94 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d84:	4818      	ldr	r0, [pc, #96]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002d86:	f005 fee4 	bl	8008b52 <HAL_TIM_PWM_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002d90:	f000 fa8c 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d9c:	f107 0320 	add.w	r3, r7, #32
 8002da0:	4619      	mov	r1, r3
 8002da2:	4811      	ldr	r0, [pc, #68]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002da4:	f006 fba2 	bl	80094ec <HAL_TIMEx_MasterConfigSynchronization>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002dae:	f000 fa7d 	bl	80032ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002db2:	2360      	movs	r3, #96	; 0x60
 8002db4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc2:	1d3b      	adds	r3, r7, #4
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4807      	ldr	r0, [pc, #28]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002dca:	f005 ff1b 	bl	8008c04 <HAL_TIM_PWM_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002dd4:	f000 fa6a 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002dd8:	4803      	ldr	r0, [pc, #12]	; (8002de8 <MX_TIM2_Init+0xe8>)
 8002dda:	f000 fc97 	bl	800370c <HAL_TIM_MspPostInit>

}
 8002dde:	bf00      	nop
 8002de0:	3738      	adds	r7, #56	; 0x38
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200032a8 	.word	0x200032a8

08002dec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002df0:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002df2:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <MX_USART1_UART_Init+0x50>)
 8002df4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002dfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e12:	220c      	movs	r2, #12
 8002e14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_USART1_UART_Init+0x4c>)
 8002e24:	f006 fbde 	bl	80095e4 <HAL_UART_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e2e:	f000 fa3d 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20003350 	.word	0x20003350
 8002e3c:	40011000 	.word	0x40011000

08002e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_DMA_Init+0x3c>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <MX_DMA_Init+0x3c>)
 8002e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e54:	6313      	str	r3, [r2, #48]	; 0x30
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <MX_DMA_Init+0x3c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	2010      	movs	r0, #16
 8002e68:	f001 f8bb 	bl	8003fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002e6c:	2010      	movs	r0, #16
 8002e6e:	f001 f8d4 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
 8002e94:	615a      	str	r2, [r3, #20]
 8002e96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002e98:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <MX_FMC_Init+0x98>)
 8002e9a:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <MX_FMC_Init+0x9c>)
 8002e9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002e9e:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <MX_FMC_Init+0x98>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <MX_FMC_Init+0x98>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <MX_FMC_Init+0x98>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <MX_FMC_Init+0x98>)
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002eb6:	4b18      	ldr	r3, [pc, #96]	; (8002f18 <MX_FMC_Init+0x98>)
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002ebc:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <MX_FMC_Init+0x98>)
 8002ebe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002ec2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <MX_FMC_Init+0x98>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <MX_FMC_Init+0x98>)
 8002ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_FMC_Init+0x98>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <MX_FMC_Init+0x98>)
 8002eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002ee8:	2304      	movs	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002eec:	2307      	movs	r3, #7
 8002eee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_FMC_Init+0x98>)
 8002f02:	f004 fffb 	bl	8007efc <HAL_SDRAM_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002f0c:	f000 f9ce 	bl	80032ac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002f10:	bf00      	nop
 8002f12:	3720      	adds	r7, #32
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20003394 	.word	0x20003394
 8002f1c:	a0000140 	.word	0xa0000140

08002f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08e      	sub	sp, #56	; 0x38
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	4bb2      	ldr	r3, [pc, #712]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4ab1      	ldr	r2, [pc, #708]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4baf      	ldr	r3, [pc, #700]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	4bab      	ldr	r3, [pc, #684]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	4aaa      	ldr	r2, [pc, #680]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f5c:	f043 0320 	orr.w	r3, r3, #32
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4ba8      	ldr	r3, [pc, #672]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	61fb      	str	r3, [r7, #28]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	4ba4      	ldr	r3, [pc, #656]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4aa3      	ldr	r2, [pc, #652]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4ba1      	ldr	r3, [pc, #644]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	61bb      	str	r3, [r7, #24]
 8002f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	4b9d      	ldr	r3, [pc, #628]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a9c      	ldr	r2, [pc, #624]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b9a      	ldr	r3, [pc, #616]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b96      	ldr	r3, [pc, #600]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a95      	ldr	r2, [pc, #596]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b93      	ldr	r3, [pc, #588]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a8e      	ldr	r2, [pc, #568]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b8c      	ldr	r3, [pc, #560]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a87      	ldr	r2, [pc, #540]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b85      	ldr	r3, [pc, #532]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	4b81      	ldr	r3, [pc, #516]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a80      	ldr	r2, [pc, #512]	; (8003204 <MX_GPIO_Init+0x2e4>)
 8003004:	f043 0308 	orr.w	r3, r3, #8
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <MX_GPIO_Init+0x2e4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8003016:	2200      	movs	r2, #0
 8003018:	2116      	movs	r1, #22
 800301a:	487b      	ldr	r0, [pc, #492]	; (8003208 <MX_GPIO_Init+0x2e8>)
 800301c:	f001 fd5c 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8003020:	2200      	movs	r2, #0
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	4879      	ldr	r0, [pc, #484]	; (800320c <MX_GPIO_Init+0x2ec>)
 8003026:	f001 fd57 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003030:	4877      	ldr	r0, [pc, #476]	; (8003210 <MX_GPIO_Init+0x2f0>)
 8003032:	f001 fd51 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800303c:	4875      	ldr	r0, [pc, #468]	; (8003214 <MX_GPIO_Init+0x2f4>)
 800303e:	f001 fd4b 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8003042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2302      	movs	r3, #2
 800304a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003054:	230e      	movs	r3, #14
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305c:	4619      	mov	r1, r3
 800305e:	486e      	ldr	r0, [pc, #440]	; (8003218 <MX_GPIO_Init+0x2f8>)
 8003060:	f001 fb8e 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8003064:	2316      	movs	r3, #22
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003068:	2301      	movs	r3, #1
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003070:	2300      	movs	r3, #0
 8003072:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003078:	4619      	mov	r1, r3
 800307a:	4863      	ldr	r0, [pc, #396]	; (8003208 <MX_GPIO_Init+0x2e8>)
 800307c:	f001 fb80 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003080:	2301      	movs	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003084:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	4619      	mov	r1, r3
 8003094:	485d      	ldr	r0, [pc, #372]	; (800320c <MX_GPIO_Init+0x2ec>)
 8003096:	f001 fb73 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800309a:	f248 0306 	movw	r3, #32774	; 0x8006
 800309e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030a0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ae:	4619      	mov	r1, r3
 80030b0:	4856      	ldr	r0, [pc, #344]	; (800320c <MX_GPIO_Init+0x2ec>)
 80030b2:	f001 fb65 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 80030b6:	2358      	movs	r3, #88	; 0x58
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ba:	2302      	movs	r3, #2
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c2:	2300      	movs	r3, #0
 80030c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030c6:	230e      	movs	r3, #14
 80030c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ce:	4619      	mov	r1, r3
 80030d0:	484e      	ldr	r0, [pc, #312]	; (800320c <MX_GPIO_Init+0x2ec>)
 80030d2:	f001 fb55 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030da:	2301      	movs	r3, #1
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80030e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030ea:	4619      	mov	r1, r3
 80030ec:	4847      	ldr	r0, [pc, #284]	; (800320c <MX_GPIO_Init+0x2ec>)
 80030ee:	f001 fb47 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80030f2:	2320      	movs	r3, #32
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80030f6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8003100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003104:	4619      	mov	r1, r3
 8003106:	4840      	ldr	r0, [pc, #256]	; (8003208 <MX_GPIO_Init+0x2e8>)
 8003108:	f001 fb3a 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800310c:	2303      	movs	r3, #3
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800311c:	2309      	movs	r3, #9
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003124:	4619      	mov	r1, r3
 8003126:	483d      	ldr	r0, [pc, #244]	; (800321c <MX_GPIO_Init+0x2fc>)
 8003128:	f001 fb2a 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800312c:	2304      	movs	r3, #4
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800313c:	4619      	mov	r1, r3
 800313e:	4837      	ldr	r0, [pc, #220]	; (800321c <MX_GPIO_Init+0x2fc>)
 8003140:	f001 fb1e 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8003144:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314a:	2302      	movs	r3, #2
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	2300      	movs	r3, #0
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003156:	230e      	movs	r3, #14
 8003158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315e:	4619      	mov	r1, r3
 8003160:	482e      	ldr	r0, [pc, #184]	; (800321c <MX_GPIO_Init+0x2fc>)
 8003162:	f001 fb0d 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8003166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8003174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003178:	4619      	mov	r1, r3
 800317a:	4825      	ldr	r0, [pc, #148]	; (8003210 <MX_GPIO_Init+0x2f0>)
 800317c:	f001 fb00 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8003180:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003186:	2301      	movs	r3, #1
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003196:	4619      	mov	r1, r3
 8003198:	481d      	ldr	r0, [pc, #116]	; (8003210 <MX_GPIO_Init+0x2f0>)
 800319a:	f001 faf1 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031ae:	230e      	movs	r3, #14
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b6:	4619      	mov	r1, r3
 80031b8:	4816      	ldr	r0, [pc, #88]	; (8003214 <MX_GPIO_Init+0x2f4>)
 80031ba:	f001 fae1 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80031be:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	2302      	movs	r3, #2
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80031d0:	230e      	movs	r3, #14
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	4619      	mov	r1, r3
 80031da:	480b      	ldr	r0, [pc, #44]	; (8003208 <MX_GPIO_Init+0x2e8>)
 80031dc:	f001 fad0 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : Accel_interrupt_Pin */
  GPIO_InitStruct.Pin = Accel_interrupt_Pin;
 80031e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80031e6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ec:	2301      	movs	r3, #1
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Accel_interrupt_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f4:	4619      	mov	r1, r3
 80031f6:	4804      	ldr	r0, [pc, #16]	; (8003208 <MX_GPIO_Init+0x2e8>)
 80031f8:	f001 fac2 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80031fc:	2348      	movs	r3, #72	; 0x48
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	e00d      	b.n	8003220 <MX_GPIO_Init+0x300>
 8003204:	40023800 	.word	0x40023800
 8003208:	40020800 	.word	0x40020800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021800 	.word	0x40021800
 8003218:	40021400 	.word	0x40021400
 800321c:	40020400 	.word	0x40020400
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003222:	2300      	movs	r3, #0
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2300      	movs	r3, #0
 8003228:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800322a:	230e      	movs	r3, #14
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800322e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003232:	4619      	mov	r1, r3
 8003234:	481b      	ldr	r0, [pc, #108]	; (80032a4 <MX_GPIO_Init+0x384>)
 8003236:	f001 faa3 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 800323a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003240:	2302      	movs	r3, #2
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003248:	2300      	movs	r3, #0
 800324a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800324c:	2309      	movs	r3, #9
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8003250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003254:	4619      	mov	r1, r3
 8003256:	4814      	ldr	r0, [pc, #80]	; (80032a8 <MX_GPIO_Init+0x388>)
 8003258:	f001 fa92 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800325c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003262:	2301      	movs	r3, #1
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800326e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003272:	4619      	mov	r1, r3
 8003274:	480c      	ldr	r0, [pc, #48]	; (80032a8 <MX_GPIO_Init+0x388>)
 8003276:	f001 fa83 	bl	8004780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2100      	movs	r1, #0
 800327e:	2006      	movs	r0, #6
 8003280:	f000 feaf 	bl	8003fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003284:	2006      	movs	r0, #6
 8003286:	f000 fec8 	bl	800401a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2100      	movs	r1, #0
 800328e:	2017      	movs	r0, #23
 8003290:	f000 fea7 	bl	8003fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003294:	2017      	movs	r0, #23
 8003296:	f000 fec0 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 800329a:	bf00      	nop
 800329c:	3738      	adds	r7, #56	; 0x38
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021800 	.word	0x40021800

080032ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b0:	b672      	cpsid	i
}
 80032b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b4:	e7fe      	b.n	80032b4 <Error_Handler+0x8>
	...

080032b8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <RetargetInit+0x28>)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <RetargetInit+0x2c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6898      	ldr	r0, [r3, #8]
 80032cc:	2300      	movs	r3, #0
 80032ce:	2202      	movs	r2, #2
 80032d0:	2100      	movs	r1, #0
 80032d2:	f00e fcf9 	bl	8011cc8 <setvbuf>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200033c8 	.word	0x200033c8
 80032e4:	20000118 	.word	0x20000118

080032e8 <_isatty>:

int _isatty(int fd) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db04      	blt.n	8003300 <_isatty+0x18>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	dc01      	bgt.n	8003300 <_isatty+0x18>
    return 1;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e005      	b.n	800330c <_isatty+0x24>

  errno = EBADF;
 8003300:	f00e fafe 	bl	8011900 <__errno>
 8003304:	4603      	mov	r3, r0
 8003306:	2209      	movs	r2, #9
 8003308:	601a      	str	r2, [r3, #0]
  return 0;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_write>:

int _write(int fd, char* ptr, int len) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d002      	beq.n	800332c <_write+0x18>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d111      	bne.n	8003350 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <_write+0x54>)
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	b29a      	uxth	r2, r3
 8003334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	f006 f9a0 	bl	800967e <HAL_UART_Transmit>
 800333e:	4603      	mov	r3, r0
 8003340:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <_write+0x38>
      return len;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	e008      	b.n	800335e <_write+0x4a>
    else
      return EIO;
 800334c:	2305      	movs	r3, #5
 800334e:	e006      	b.n	800335e <_write+0x4a>
  }
  errno = EBADF;
 8003350:	f00e fad6 	bl	8011900 <__errno>
 8003354:	4603      	mov	r3, r0
 8003356:	2209      	movs	r2, #9
 8003358:	601a      	str	r2, [r3, #0]
  return -1;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200033c8 	.word	0x200033c8

0800336c <_close>:

int _close(int fd) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db04      	blt.n	8003384 <_close+0x18>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b02      	cmp	r3, #2
 800337e:	dc01      	bgt.n	8003384 <_close+0x18>
    return 0;
 8003380:	2300      	movs	r3, #0
 8003382:	e006      	b.n	8003392 <_close+0x26>

  errno = EBADF;
 8003384:	f00e fabc 	bl	8011900 <__errno>
 8003388:	4603      	mov	r3, r0
 800338a:	2209      	movs	r2, #9
 800338c:	601a      	str	r2, [r3, #0]
  return -1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80033a6:	f00e faab 	bl	8011900 <__errno>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2209      	movs	r2, #9
 80033ae:	601a      	str	r2, [r3, #0]
  return -1;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <_read>:

int _read(int fd, char* ptr, int len) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d110      	bne.n	80033f0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <_read+0x4c>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033d6:	2201      	movs	r2, #1
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	f006 f9e2 	bl	80097a2 <HAL_UART_Receive>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <_read+0x30>
      return 1;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e008      	b.n	80033fe <_read+0x42>
    else
      return EIO;
 80033ec:	2305      	movs	r3, #5
 80033ee:	e006      	b.n	80033fe <_read+0x42>
  }
  errno = EBADF;
 80033f0:	f00e fa86 	bl	8011900 <__errno>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2209      	movs	r2, #9
 80033f8:	601a      	str	r2, [r3, #0]
  return -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200033c8 	.word	0x200033c8

0800340c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db08      	blt.n	800342e <_fstat+0x22>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	dc05      	bgt.n	800342e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003428:	605a      	str	r2, [r3, #4]
    return 0;
 800342a:	2300      	movs	r3, #0
 800342c:	e005      	b.n	800343a <_fstat+0x2e>
  }

  errno = EBADF;
 800342e:	f00e fa67 	bl	8011900 <__errno>
 8003432:	4603      	mov	r3, r0
 8003434:	2209      	movs	r2, #9
 8003436:	601a      	str	r2, [r3, #0]
  return 0;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_MspInit+0x4c>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	4a0f      	ldr	r2, [pc, #60]	; (8003490 <HAL_MspInit+0x4c>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003458:	6453      	str	r3, [r2, #68]	; 0x44
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_MspInit+0x4c>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	603b      	str	r3, [r7, #0]
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_MspInit+0x4c>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	4a08      	ldr	r2, [pc, #32]	; (8003490 <HAL_MspInit+0x4c>)
 8003470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003474:	6413      	str	r3, [r2, #64]	; 0x40
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_MspInit+0x4c>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_CRC_MspInit+0x3c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_CRC_MspInit+0x40>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a09      	ldr	r2, [pc, #36]	; (80034d4 <HAL_CRC_MspInit+0x40>)
 80034b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b07      	ldr	r3, [pc, #28]	; (80034d4 <HAL_CRC_MspInit+0x40>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40023000 	.word	0x40023000
 80034d4:	40023800 	.word	0x40023800

080034d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a29      	ldr	r2, [pc, #164]	; (800359c <HAL_I2C_MspInit+0xc4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d14b      	bne.n	8003592 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a20      	ldr	r2, [pc, #128]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003538:	2312      	movs	r3, #18
 800353a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800353c:	2301      	movs	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003540:	2300      	movs	r3, #0
 8003542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003544:	2304      	movs	r3, #4
 8003546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4619      	mov	r1, r3
 800354e:	4815      	ldr	r0, [pc, #84]	; (80035a4 <HAL_I2C_MspInit+0xcc>)
 8003550:	f001 f916 	bl	8004780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800355a:	2312      	movs	r3, #18
 800355c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003566:	2304      	movs	r3, #4
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	f107 0314 	add.w	r3, r7, #20
 800356e:	4619      	mov	r1, r3
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <HAL_I2C_MspInit+0xd0>)
 8003572:	f001 f905 	bl	8004780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 8003580:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003584:	6413      	str	r3, [r2, #64]	; 0x40
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_I2C_MspInit+0xc8>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003592:	bf00      	nop
 8003594:	3728      	adds	r7, #40	; 0x28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40005c00 	.word	0x40005c00
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40020800 	.word	0x40020800
 80035a8:	40020000 	.word	0x40020000

080035ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <HAL_SPI_MspInit+0x84>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d12c      	bne.n	8003628 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <HAL_SPI_MspInit+0x88>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	4a17      	ldr	r2, [pc, #92]	; (8003634 <HAL_SPI_MspInit+0x88>)
 80035d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035dc:	6453      	str	r3, [r2, #68]	; 0x44
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <HAL_SPI_MspInit+0x88>)
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <HAL_SPI_MspInit+0x88>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_SPI_MspInit+0x88>)
 80035f4:	f043 0320 	orr.w	r3, r3, #32
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_SPI_MspInit+0x88>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003606:	f44f 7360 	mov.w	r3, #896	; 0x380
 800360a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003614:	2300      	movs	r3, #0
 8003616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003618:	2305      	movs	r3, #5
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4619      	mov	r1, r3
 8003622:	4805      	ldr	r0, [pc, #20]	; (8003638 <HAL_SPI_MspInit+0x8c>)
 8003624:	f001 f8ac 	bl	8004780 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003628:	bf00      	nop
 800362a:	3728      	adds	r7, #40	; 0x28
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40015000 	.word	0x40015000
 8003634:	40023800 	.word	0x40023800
 8003638:	40021400 	.word	0x40021400

0800363c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <HAL_TIM_Base_MspInit+0xc0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10e      	bne.n	800366c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_TIM_Base_MspInit+0xc4>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <HAL_TIM_Base_MspInit+0xc4>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_TIM_Base_MspInit+0xc4>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800366a:	e042      	b.n	80036f2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d13d      	bne.n	80036f2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_TIM_Base_MspInit+0xc4>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a20      	ldr	r2, [pc, #128]	; (8003700 <HAL_TIM_Base_MspInit+0xc4>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_TIM_Base_MspInit+0xc4>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_TIM_Base_MspInit+0xcc>)
 8003696:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 800369a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800369e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036a0:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a6:	4b17      	ldr	r3, [pc, #92]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ba:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80036c4:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80036ca:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80036d6:	480b      	ldr	r0, [pc, #44]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036d8:	f000 fcd6 	bl	8004088 <HAL_DMA_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 80036e2:	f7ff fde3 	bl	80032ac <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
 80036ec:	4a05      	ldr	r2, [pc, #20]	; (8003704 <HAL_TIM_Base_MspInit+0xc8>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40023800 	.word	0x40023800
 8003704:	200032f0 	.word	0x200032f0
 8003708:	40026088 	.word	0x40026088

0800370c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d11d      	bne.n	800376a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_TIM_MspPostInit+0x68>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <HAL_TIM_MspPostInit+0x68>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <HAL_TIM_MspPostInit+0x68>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800374a:	2320      	movs	r3, #32
 800374c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800375a:	2301      	movs	r3, #1
 800375c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4619      	mov	r1, r3
 8003764:	4804      	ldr	r0, [pc, #16]	; (8003778 <HAL_TIM_MspPostInit+0x6c>)
 8003766:	f001 f80b 	bl	8004780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800376a:	bf00      	nop
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	40020000 	.word	0x40020000

0800377c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_UART_MspInit+0x94>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d134      	bne.n	8003808 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_UART_MspInit+0x98>)
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_UART_MspInit+0x98>)
 80037a8:	f043 0310 	orr.w	r3, r3, #16
 80037ac:	6453      	str	r3, [r2, #68]	; 0x44
 80037ae:	4b19      	ldr	r3, [pc, #100]	; (8003814 <HAL_UART_MspInit+0x98>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_UART_MspInit+0x98>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a14      	ldr	r2, [pc, #80]	; (8003814 <HAL_UART_MspInit+0x98>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_UART_MspInit+0x98>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80037d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037dc:	2302      	movs	r3, #2
 80037de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e4:	2303      	movs	r3, #3
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037e8:	2307      	movs	r3, #7
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <HAL_UART_MspInit+0x9c>)
 80037f4:	f000 ffc4 	bl	8004780 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	2025      	movs	r0, #37	; 0x25
 80037fe:	f000 fbf0 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003802:	2025      	movs	r0, #37	; 0x25
 8003804:	f000 fc09 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003808:	bf00      	nop
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40011000 	.word	0x40011000
 8003814:	40023800 	.word	0x40023800
 8003818:	40020000 	.word	0x40020000

0800381c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003830:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_FMC_MspInit+0x104>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d16f      	bne.n	8003918 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <HAL_FMC_MspInit+0x104>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4b38      	ldr	r3, [pc, #224]	; (8003924 <HAL_FMC_MspInit+0x108>)
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	4a37      	ldr	r2, [pc, #220]	; (8003924 <HAL_FMC_MspInit+0x108>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6393      	str	r3, [r2, #56]	; 0x38
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <HAL_FMC_MspInit+0x108>)
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800385a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800385e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003868:	2303      	movs	r3, #3
 800386a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800386c:	230c      	movs	r3, #12
 800386e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	4619      	mov	r1, r3
 8003874:	482c      	ldr	r0, [pc, #176]	; (8003928 <HAL_FMC_MspInit+0x10c>)
 8003876:	f000 ff83 	bl	8004780 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800387a:	2301      	movs	r3, #1
 800387c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	2303      	movs	r3, #3
 8003888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800388a:	230c      	movs	r3, #12
 800388c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4826      	ldr	r0, [pc, #152]	; (800392c <HAL_FMC_MspInit+0x110>)
 8003894:	f000 ff74 	bl	8004780 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8003898:	f248 1333 	movw	r3, #33075	; 0x8133
 800389c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a6:	2303      	movs	r3, #3
 80038a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038aa:	230c      	movs	r3, #12
 80038ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	481f      	ldr	r0, [pc, #124]	; (8003930 <HAL_FMC_MspInit+0x114>)
 80038b4:	f000 ff64 	bl	8004780 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80038b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80038bc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038be:	2302      	movs	r3, #2
 80038c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c6:	2303      	movs	r3, #3
 80038c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ca:	230c      	movs	r3, #12
 80038cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	4619      	mov	r1, r3
 80038d2:	4818      	ldr	r0, [pc, #96]	; (8003934 <HAL_FMC_MspInit+0x118>)
 80038d4:	f000 ff54 	bl	8004780 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80038d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038dc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038de:	2302      	movs	r3, #2
 80038e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e6:	2303      	movs	r3, #3
 80038e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038ea:	230c      	movs	r3, #12
 80038ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4811      	ldr	r0, [pc, #68]	; (8003938 <HAL_FMC_MspInit+0x11c>)
 80038f4:	f000 ff44 	bl	8004780 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80038f8:	2360      	movs	r3, #96	; 0x60
 80038fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003908:	230c      	movs	r3, #12
 800390a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	4619      	mov	r1, r3
 8003910:	480a      	ldr	r0, [pc, #40]	; (800393c <HAL_FMC_MspInit+0x120>)
 8003912:	f000 ff35 	bl	8004780 <HAL_GPIO_Init>
 8003916:	e000      	b.n	800391a <HAL_FMC_MspInit+0xfe>
    return;
 8003918:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	200033cc 	.word	0x200033cc
 8003924:	40023800 	.word	0x40023800
 8003928:	40021400 	.word	0x40021400
 800392c:	40020800 	.word	0x40020800
 8003930:	40021800 	.word	0x40021800
 8003934:	40021000 	.word	0x40021000
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40020400 	.word	0x40020400

08003940 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003948:	f7ff ff68 	bl	800381c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <NMI_Handler+0x4>

0800395a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	StoneErrorHandling(HARD_FAULT);
 800395e:	2006      	movs	r0, #6
 8003960:	f000 f916 	bl	8003b90 <StoneErrorHandling>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003964:	e7fe      	b.n	8003964 <HardFault_Handler+0xa>

08003966 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800396a:	e7fe      	b.n	800396a <MemManage_Handler+0x4>

0800396c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <BusFault_Handler+0x4>

08003972 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <UsageFault_Handler+0x4>

08003978 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a6:	f000 f9fd 	bl	8003da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}

080039ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f001 f8aa 	bl	8004b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}

080039bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <DMA1_Stream5_IRQHandler+0x10>)
 80039c2:	f000 fca1 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200032f0 	.word	0x200032f0

080039d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Accel_interrupt_Pin);
 80039d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039d8:	f001 f898 	bl	8004b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}

080039e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <USART1_IRQHandler+0x10>)
 80039e6:	f005 ffaf 	bl	8009948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20003350 	.word	0x20003350

080039f4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <OTG_HS_IRQHandler+0x10>)
 80039fa:	f001 fb09 	bl	8005010 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20003c60 	.word	0x20003c60

08003a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <_sbrk+0x5c>)
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <_sbrk+0x60>)
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <_sbrk+0x64>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d102      	bne.n	8003a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <_sbrk+0x64>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <_sbrk+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <_sbrk+0x64>)
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4413      	add	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d207      	bcs.n	8003a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a38:	f00d ff62 	bl	8011900 <__errno>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a46:	e009      	b.n	8003a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <_sbrk+0x64>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <_sbrk+0x64>)
 8003a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20030000 	.word	0x20030000
 8003a68:	00000400 	.word	0x00000400
 8003a6c:	200033d0 	.word	0x200033d0
 8003a70:	20003f78 	.word	0x20003f78

08003a74 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <SystemInit+0x20>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <SystemInit+0x20>)
 8003a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <GetUserID>:
// change which userID is used in saving activity & usage data.
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}
int GetUserID()
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
	return userID;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <GetUserID+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	200000ec 	.word	0x200000ec

08003ab0 <SetUserMainColour>:
void SetUserMainColour(int Red, int Green, int Blue)
{}
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <DebugPrint>:
int debugLogging = 0;
int paused = 0;
int logMovementData = 0;
// system and user debugging need to be on to actually print.
void DebugPrint(char * buffer)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	if(debugLogging&!paused)
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <DebugPrint+0x38>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf0c      	ite	eq
 8003ad8:	2301      	moveq	r3, #1
 8003ada:	2300      	movne	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <DebugPrint+0x3c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <DebugPrint+0x2e>
	{
		printf(buffer);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f00e f838 	bl	8011b60 <iprintf>
		printf("\n");
 8003af0:	200a      	movs	r0, #10
 8003af2:	f00e f84d 	bl	8011b90 <putchar>
	}
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200033d8 	.word	0x200033d8
 8003b04:	200033d4 	.word	0x200033d4

08003b08 <SetUserDebugLogging>:
// user debugging
void SetUserDebugLogging ( int set )
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	debugLogging = set;
 8003b10:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <SetUserDebugLogging+0x1c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	200033d4 	.word	0x200033d4

08003b28 <SetMovementUSBLogging>:
int GetDebugLogging( )
{
	return debugLogging;
}
stoneError_t SetMovementUSBLogging(int flag){
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	logMovementData = flag;
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <SetMovementUSBLogging+0x1c>)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6013      	str	r3, [r2, #0]
}
 8003b36:	bf00      	nop
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	200033dc 	.word	0x200033dc

08003b48 <GetMovementUSBLogging>:
int GetMovementUSBLogging(){
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	return logMovementData;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <GetMovementUSBLogging+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	200033dc 	.word	0x200033dc

08003b60 <PauseDebugLogging>:
//  system debugging.
void PauseDebugLogging(){paused = 1;}
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <PauseDebugLogging+0x14>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	200033d8 	.word	0x200033d8

08003b78 <ResumeDebugLogging>:
void ResumeDebugLogging(){paused = 0;}
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4b03      	ldr	r3, [pc, #12]	; (8003b8c <ResumeDebugLogging+0x14>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	bf00      	nop
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	200033d8 	.word	0x200033d8

08003b90 <StoneErrorHandling>:

void StoneErrorHandling(stoneError_t error ){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
// Uses Red pin with different flashing rates for errors.
//SENSOR_INIT_ERROR, CONSOLE_BASED_ERROR, HAL_BASED_ERROR
	int delay = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
	switch(error)
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b06      	cmp	r3, #6
 8003ba2:	d823      	bhi.n	8003bec <StoneErrorHandling+0x5c>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <StoneErrorHandling+0x1c>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bcf 	.word	0x08003bcf
 8003bb4:	08003bd7 	.word	0x08003bd7
 8003bb8:	08003bdf 	.word	0x08003bdf
 8003bbc:	08003bed 	.word	0x08003bed
 8003bc0:	08003bed 	.word	0x08003bed
 8003bc4:	08003be7 	.word	0x08003be7
	{
	case(SENSOR_INIT_ERROR):
		delay = 100;
 8003bc8:	2364      	movs	r3, #100	; 0x64
 8003bca:	60fb      	str	r3, [r7, #12]
		 break;
 8003bcc:	e011      	b.n	8003bf2 <StoneErrorHandling+0x62>
	case (SENSOR_READ_ERROR):
			delay = 500;
 8003bce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003bd2:	60fb      	str	r3, [r7, #12]
	break;
 8003bd4:	e00d      	b.n	8003bf2 <StoneErrorHandling+0x62>
	case(CONSOLE_BASED_ERROR):
			delay = 1000;
 8003bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bda:	60fb      	str	r3, [r7, #12]
			 break;
 8003bdc:	e009      	b.n	8003bf2 <StoneErrorHandling+0x62>
	case(HAL_BASED_ERROR):
			delay = 10000;
 8003bde:	f242 7310 	movw	r3, #10000	; 0x2710
 8003be2:	60fb      	str	r3, [r7, #12]
			 break;
 8003be4:	e005      	b.n	8003bf2 <StoneErrorHandling+0x62>
	case(HARD_FAULT):
			delay = 10;
 8003be6:	230a      	movs	r3, #10
 8003be8:	60fb      	str	r3, [r7, #12]
			 break;
 8003bea:	e002      	b.n	8003bf2 <StoneErrorHandling+0x62>
	default:
			 delay = 1;
 8003bec:	2301      	movs	r3, #1
 8003bee:	60fb      	str	r3, [r7, #12]
			 break;
 8003bf0:	bf00      	nop

	}
	while(1){
			HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14, GPIO_PIN_SET);
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf8:	4808      	ldr	r0, [pc, #32]	; (8003c1c <StoneErrorHandling+0x8c>)
 8003bfa:	f000 ff6d 	bl	8004ad8 <HAL_GPIO_WritePin>
			HAL_Delay(delay);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f8ef 	bl	8003de4 <HAL_Delay>
			// rest to turn it off.
			HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c0c:	4803      	ldr	r0, [pc, #12]	; (8003c1c <StoneErrorHandling+0x8c>)
 8003c0e:	f000 ff63 	bl	8004ad8 <HAL_GPIO_WritePin>
			HAL_Delay(delay);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f8e5 	bl	8003de4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14, GPIO_PIN_SET);
 8003c1a:	e7ea      	b.n	8003bf2 <StoneErrorHandling+0x62>
 8003c1c:	40021800 	.word	0x40021800

08003c20 <colourChangeInit>:
void breathHoldOutput();
void breaingOutOutput();

// internal state table
//static stateTableEntry_t  stateTabel[]={};
int colourChangeInit(){
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0

	return 0;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <colourChangeProcess>:
int colourChangeProcess(){
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
	return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <colourChangeOnEnd>:
int colourChangeOnEnd(){
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
	return 0;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <colourChangeGetTimeOut>:

int colourChangeGetTimeOut(){
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	return 0;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <meditationBreathingInit>:
// state tabel for the mode.
modeState_t currentModeState;
int timeOut = 8000;


int meditationBreathingInit(){
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	currentModeState = BREATHING_START;
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <meditationBreathingInit+0x18>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	701a      	strb	r2, [r3, #0]
	return 0;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	200033e0 	.word	0x200033e0

08003c7c <meditationBreathingProcess>:
int meditationBreathingProcess(){
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0


}
 8003c80:	bf00      	nop
 8003c82:	4618      	mov	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <meditationBreathingOnEnd>:
int meditationBreathingOnEnd(){
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0

}
 8003c90:	bf00      	nop
 8003c92:	4618      	mov	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <meditationGetTimeOut>:
int meditationGetTimeOut()
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0

}
 8003ca0:	bf00      	nop
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cb0:	480d      	ldr	r0, [pc, #52]	; (8003ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cb2:	490e      	ldr	r1, [pc, #56]	; (8003cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cb4:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb8:	e002      	b.n	8003cc0 <LoopCopyDataInit>

08003cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cbe:	3304      	adds	r3, #4

08003cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc4:	d3f9      	bcc.n	8003cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc6:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003cc8:	4c0b      	ldr	r4, [pc, #44]	; (8003cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ccc:	e001      	b.n	8003cd2 <LoopFillZerobss>

08003cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd0:	3204      	adds	r2, #4

08003cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd4:	d3fb      	bcc.n	8003cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003cd6:	f7ff fecd 	bl	8003a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cda:	f00d fe17 	bl	801190c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cde:	f7fe fe9b 	bl	8002a18 <main>
  bx  lr    
 8003ce2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003ce4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cec:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003cf0:	08013df8 	.word	0x08013df8
  ldr r2, =_sbss
 8003cf4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8003cf8:	20003f74 	.word	0x20003f74

08003cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cfc:	e7fe      	b.n	8003cfc <ADC_IRQHandler>
	...

08003d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_Init+0x40>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <HAL_Init+0x40>)
 8003d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_Init+0x40>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <HAL_Init+0x40>)
 8003d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <HAL_Init+0x40>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_Init+0x40>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d28:	2003      	movs	r0, #3
 8003d2a:	f000 f94f 	bl	8003fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d2e:	200f      	movs	r0, #15
 8003d30:	f000 f808 	bl	8003d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d34:	f7ff fb86 	bl	8003444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00

08003d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d4c:	4b12      	ldr	r3, [pc, #72]	; (8003d98 <HAL_InitTick+0x54>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_InitTick+0x58>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	4619      	mov	r1, r3
 8003d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f967 	bl	8004036 <HAL_SYSTICK_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00e      	b.n	8003d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d80a      	bhi.n	8003d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d80:	f000 f92f 	bl	8003fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d84:	4a06      	ldr	r2, [pc, #24]	; (8003da0 <HAL_InitTick+0x5c>)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	200000e8 	.word	0x200000e8
 8003d9c:	200000f4 	.word	0x200000f4
 8003da0:	200000f0 	.word	0x200000f0

08003da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_IncTick+0x20>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_IncTick+0x24>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4413      	add	r3, r2
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_IncTick+0x24>)
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200000f4 	.word	0x200000f4
 8003dc8:	200033e4 	.word	0x200033e4

08003dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return uwTick;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_GetTick+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	200033e4 	.word	0x200033e4

08003de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff ffee 	bl	8003dcc <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfc:	d005      	beq.n	8003e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_Delay+0x44>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e0a:	bf00      	nop
 8003e0c:	f7ff ffde 	bl	8003dcc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d8f7      	bhi.n	8003e0c <HAL_Delay+0x28>
  {
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	200000f4 	.word	0x200000f4

08003e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e5e:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <__NVIC_SetPriorityGrouping+0x44>)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	60d3      	str	r3, [r2, #12]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <__NVIC_GetPriorityGrouping+0x18>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	f003 0307 	and.w	r3, r3, #7
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	db0b      	blt.n	8003eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	f003 021f 	and.w	r2, r3, #31
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <__NVIC_EnableIRQ+0x38>)
 8003eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f98:	d301      	bcc.n	8003f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e00f      	b.n	8003fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9e:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <SysTick_Config+0x40>)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa6:	210f      	movs	r1, #15
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fac:	f7ff ff8e 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <SysTick_Config+0x40>)
 8003fb8:	2207      	movs	r2, #7
 8003fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	e000e010 	.word	0xe000e010

08003fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff29 	bl	8003e2c <__NVIC_SetPriorityGrouping>
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	4603      	mov	r3, r0
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff4:	f7ff ff3e 	bl	8003e74 <__NVIC_GetPriorityGrouping>
 8003ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff ff8e 	bl	8003f20 <NVIC_EncodePriority>
 8004004:	4602      	mov	r2, r0
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff5d 	bl	8003ecc <__NVIC_SetPriority>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff31 	bl	8003e90 <__NVIC_EnableIRQ>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffa2 	bl	8003f88 <SysTick_Config>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b082      	sub	sp, #8
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e00e      	b.n	800407e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fa0f 	bl	8003494 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7ff fe9a 	bl	8003dcc <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e099      	b.n	80041d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c4:	e00f      	b.n	80040e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040c6:	f7ff fe81 	bl	8003dcc <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d908      	bls.n	80040e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2203      	movs	r2, #3
 80040de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e078      	b.n	80041d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e8      	bne.n	80040c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_DMA_Init+0x158>)
 8004100:	4013      	ands	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004112:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b04      	cmp	r3, #4
 800413e:	d107      	bne.n	8004150 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	4313      	orrs	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0307 	bic.w	r3, r3, #7
 8004166:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	2b04      	cmp	r3, #4
 8004178:	d117      	bne.n	80041aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00e      	beq.n	80041aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fa7b 	bl	8004688 <DMA_CheckFifoParam>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2240      	movs	r2, #64	; 0x40
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041a6:	2301      	movs	r3, #1
 80041a8:	e016      	b.n	80041d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fa32 	bl	800461c <DMA_CalcBaseAndBitshift>
 80041b8:	4603      	mov	r3, r0
 80041ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	223f      	movs	r2, #63	; 0x3f
 80041c2:	409a      	lsls	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	f010803f 	.word	0xf010803f

080041e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041f2:	f7ff fdeb 	bl	8003dcc <HAL_GetTick>
 80041f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d008      	beq.n	8004216 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e052      	b.n	80042bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0216 	bic.w	r2, r2, #22
 8004224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004234:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_DMA_Abort+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0208 	bic.w	r2, r2, #8
 8004254:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004266:	e013      	b.n	8004290 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004268:	f7ff fdb0 	bl	8003dcc <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b05      	cmp	r3, #5
 8004274:	d90c      	bls.n	8004290 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2203      	movs	r2, #3
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e015      	b.n	80042bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e4      	bne.n	8004268 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	223f      	movs	r2, #63	; 0x3f
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e00c      	b.n	80042fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2205      	movs	r2, #5
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004314:	4b8e      	ldr	r3, [pc, #568]	; (8004550 <HAL_DMA_IRQHandler+0x248>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a8e      	ldr	r2, [pc, #568]	; (8004554 <HAL_DMA_IRQHandler+0x24c>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2208      	movs	r2, #8
 8004334:	409a      	lsls	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01a      	beq.n	8004374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0204 	bic.w	r2, r2, #4
 800435a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2208      	movs	r2, #8
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2201      	movs	r2, #1
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	2201      	movs	r2, #1
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	2204      	movs	r2, #4
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d012      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2210      	movs	r2, #16
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d043      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2210      	movs	r2, #16
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d024      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
 8004436:	e01f      	b.n	8004478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e016      	b.n	8004478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0208 	bic.w	r2, r2, #8
 8004466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	2220      	movs	r2, #32
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 808f 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8087 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	2220      	movs	r2, #32
 80044a0:	409a      	lsls	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d136      	bne.n	8004520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0216 	bic.w	r2, r2, #22
 80044c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x1da>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0208 	bic.w	r2, r2, #8
 80044f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	223f      	movs	r2, #63	; 0x3f
 80044f8:	409a      	lsls	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	2b00      	cmp	r3, #0
 8004514:	d07e      	beq.n	8004614 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
        }
        return;
 800451e:	e079      	b.n	8004614 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01d      	beq.n	800456a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	2b00      	cmp	r3, #0
 8004542:	d031      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
 800454c:	e02c      	b.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
 800454e:	bf00      	nop
 8004550:	200000e8 	.word	0x200000e8
 8004554:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d023      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
 8004568:	e01e      	b.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10f      	bne.n	8004598 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0210 	bic.w	r2, r2, #16
 8004586:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d032      	beq.n	8004616 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2205      	movs	r2, #5
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d307      	bcc.n	80045f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f2      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x2cc>
 80045ee:	e000      	b.n	80045f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
 8004612:	e000      	b.n	8004616 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004614:	bf00      	nop
    }
  }
}
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	3b10      	subs	r3, #16
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <DMA_CalcBaseAndBitshift+0x64>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <DMA_CalcBaseAndBitshift+0x68>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d909      	bls.n	800465e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	659a      	str	r2, [r3, #88]	; 0x58
 800465c:	e007      	b.n	800466e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	aaaaaaab 	.word	0xaaaaaaab
 8004684:	08013bb0 	.word	0x08013bb0

08004688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11f      	bne.n	80046e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d856      	bhi.n	8004756 <DMA_CheckFifoParam+0xce>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <DMA_CheckFifoParam+0x28>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d3 	.word	0x080046d3
 80046b8:	080046c1 	.word	0x080046c1
 80046bc:	08004757 	.word	0x08004757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d046      	beq.n	800475a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d0:	e043      	b.n	800475a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046da:	d140      	bne.n	800475e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e0:	e03d      	b.n	800475e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ea:	d121      	bne.n	8004730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d837      	bhi.n	8004762 <DMA_CheckFifoParam+0xda>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <DMA_CheckFifoParam+0x70>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004709 	.word	0x08004709
 80046fc:	0800470f 	.word	0x0800470f
 8004700:	08004709 	.word	0x08004709
 8004704:	08004721 	.word	0x08004721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e030      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d025      	beq.n	8004766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471e:	e022      	b.n	8004766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004728:	d11f      	bne.n	800476a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800472e:	e01c      	b.n	800476a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d903      	bls.n	800473e <DMA_CheckFifoParam+0xb6>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d003      	beq.n	8004744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800473c:	e018      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      break;
 8004742:	e015      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e00b      	b.n	800476e <DMA_CheckFifoParam+0xe6>
      break;
 8004756:	bf00      	nop
 8004758:	e00a      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
 800475c:	e008      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
 8004760:	e006      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;   
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800476e:	bf00      	nop
    }
  } 
  
  return status; 
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	; 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e177      	b.n	8004a8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800479c:	2201      	movs	r2, #1
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f040 8166 	bne.w	8004a86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d005      	beq.n	80047d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d130      	bne.n	8004834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004808:	2201      	movs	r2, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 0201 	and.w	r2, r3, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d017      	beq.n	8004870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2203      	movs	r2, #3
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d123      	bne.n	80048c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	08da      	lsrs	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3208      	adds	r2, #8
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	220f      	movs	r2, #15
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3208      	adds	r2, #8
 80048be:	69b9      	ldr	r1, [r7, #24]
 80048c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0203 	and.w	r2, r3, #3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80c0 	beq.w	8004a86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b66      	ldr	r3, [pc, #408]	; (8004aa4 <HAL_GPIO_Init+0x324>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	4a65      	ldr	r2, [pc, #404]	; (8004aa4 <HAL_GPIO_Init+0x324>)
 8004910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004914:	6453      	str	r3, [r2, #68]	; 0x44
 8004916:	4b63      	ldr	r3, [pc, #396]	; (8004aa4 <HAL_GPIO_Init+0x324>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004922:	4a61      	ldr	r2, [pc, #388]	; (8004aa8 <HAL_GPIO_Init+0x328>)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	3302      	adds	r3, #2
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a58      	ldr	r2, [pc, #352]	; (8004aac <HAL_GPIO_Init+0x32c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d037      	beq.n	80049be <HAL_GPIO_Init+0x23e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a57      	ldr	r2, [pc, #348]	; (8004ab0 <HAL_GPIO_Init+0x330>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d031      	beq.n	80049ba <HAL_GPIO_Init+0x23a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a56      	ldr	r2, [pc, #344]	; (8004ab4 <HAL_GPIO_Init+0x334>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d02b      	beq.n	80049b6 <HAL_GPIO_Init+0x236>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a55      	ldr	r2, [pc, #340]	; (8004ab8 <HAL_GPIO_Init+0x338>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d025      	beq.n	80049b2 <HAL_GPIO_Init+0x232>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a54      	ldr	r2, [pc, #336]	; (8004abc <HAL_GPIO_Init+0x33c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01f      	beq.n	80049ae <HAL_GPIO_Init+0x22e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a53      	ldr	r2, [pc, #332]	; (8004ac0 <HAL_GPIO_Init+0x340>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d019      	beq.n	80049aa <HAL_GPIO_Init+0x22a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a52      	ldr	r2, [pc, #328]	; (8004ac4 <HAL_GPIO_Init+0x344>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_GPIO_Init+0x226>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a51      	ldr	r2, [pc, #324]	; (8004ac8 <HAL_GPIO_Init+0x348>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00d      	beq.n	80049a2 <HAL_GPIO_Init+0x222>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a50      	ldr	r2, [pc, #320]	; (8004acc <HAL_GPIO_Init+0x34c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <HAL_GPIO_Init+0x21e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a4f      	ldr	r2, [pc, #316]	; (8004ad0 <HAL_GPIO_Init+0x350>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d101      	bne.n	800499a <HAL_GPIO_Init+0x21a>
 8004996:	2309      	movs	r3, #9
 8004998:	e012      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 800499a:	230a      	movs	r3, #10
 800499c:	e010      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 800499e:	2308      	movs	r3, #8
 80049a0:	e00e      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049a2:	2307      	movs	r3, #7
 80049a4:	e00c      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049a6:	2306      	movs	r3, #6
 80049a8:	e00a      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049aa:	2305      	movs	r3, #5
 80049ac:	e008      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049ae:	2304      	movs	r3, #4
 80049b0:	e006      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049b2:	2303      	movs	r3, #3
 80049b4:	e004      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e002      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <HAL_GPIO_Init+0x240>
 80049be:	2300      	movs	r3, #0
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	f002 0203 	and.w	r2, r2, #3
 80049c6:	0092      	lsls	r2, r2, #2
 80049c8:	4093      	lsls	r3, r2
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049d0:	4935      	ldr	r1, [pc, #212]	; (8004aa8 <HAL_GPIO_Init+0x328>)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	3302      	adds	r3, #2
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a02:	4a34      	ldr	r2, [pc, #208]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a08:	4b32      	ldr	r3, [pc, #200]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a2c:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a32:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	43db      	mvns	r3, r3
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a56:	4a1f      	ldr	r2, [pc, #124]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	43db      	mvns	r3, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a80:	4a14      	ldr	r2, [pc, #80]	; (8004ad4 <HAL_GPIO_Init+0x354>)
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b0f      	cmp	r3, #15
 8004a90:	f67f ae84 	bls.w	800479c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3724      	adds	r7, #36	; 0x24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40013800 	.word	0x40013800
 8004aac:	40020000 	.word	0x40020000
 8004ab0:	40020400 	.word	0x40020400
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	40020c00 	.word	0x40020c00
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	40021400 	.word	0x40021400
 8004ac4:	40021800 	.word	0x40021800
 8004ac8:	40021c00 	.word	0x40021c00
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40022400 	.word	0x40022400
 8004ad4:	40013c00 	.word	0x40013c00

08004ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae8:	787b      	ldrb	r3, [r7, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004af4:	e003      	b.n	8004afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004af6:	887b      	ldrh	r3, [r7, #2]
 8004af8:	041a      	lsls	r2, r3, #16
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	619a      	str	r2, [r3, #24]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b22:	4a05      	ldr	r2, [pc, #20]	; (8004b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fc fe0a 	bl	8001744 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40013c00 	.word	0x40013c00

08004b3c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b3e:	b08f      	sub	sp, #60	; 0x3c
 8004b40:	af0a      	add	r7, sp, #40	; 0x28
 8004b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e054      	b.n	8004bf8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f00c fbe5 	bl	8011338 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2203      	movs	r2, #3
 8004b72:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f005 ff7b 	bl	800aa88 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	687e      	ldr	r6, [r7, #4]
 8004b9a:	466d      	mov	r5, sp
 8004b9c:	f106 0410 	add.w	r4, r6, #16
 8004ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bac:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb0:	1d33      	adds	r3, r6, #4
 8004bb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bb4:	6838      	ldr	r0, [r7, #0]
 8004bb6:	f005 fef5 	bl	800a9a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f005 ff72 	bl	800aaaa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	603b      	str	r3, [r7, #0]
 8004bcc:	687e      	ldr	r6, [r7, #4]
 8004bce:	466d      	mov	r5, sp
 8004bd0:	f106 0410 	add.w	r4, r6, #16
 8004bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004be0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004be4:	1d33      	adds	r3, r6, #4
 8004be6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be8:	6838      	ldr	r0, [r7, #0]
 8004bea:	f006 f8fb 	bl	800ade4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c00 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b089      	sub	sp, #36	; 0x24
 8004c04:	af04      	add	r7, sp, #16
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	70fb      	strb	r3, [r7, #3]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70bb      	strb	r3, [r7, #2]
 8004c16:	4613      	mov	r3, r2
 8004c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_HCD_HC_Init+0x28>
 8004c24:	2302      	movs	r3, #2
 8004c26:	e076      	b.n	8004d16 <HAL_HCD_HC_Init+0x116>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	212c      	movs	r1, #44	; 0x2c
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	333d      	adds	r3, #61	; 0x3d
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	212c      	movs	r1, #44	; 0x2c
 8004c48:	fb01 f303 	mul.w	r3, r1, r3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	3338      	adds	r3, #56	; 0x38
 8004c50:	787a      	ldrb	r2, [r7, #1]
 8004c52:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	212c      	movs	r1, #44	; 0x2c
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	4413      	add	r3, r2
 8004c60:	3340      	adds	r3, #64	; 0x40
 8004c62:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004c64:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	212c      	movs	r1, #44	; 0x2c
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	4413      	add	r3, r2
 8004c72:	3339      	adds	r3, #57	; 0x39
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004c78:	78fb      	ldrb	r3, [r7, #3]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	212c      	movs	r1, #44	; 0x2c
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	333f      	adds	r3, #63	; 0x3f
 8004c86:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004c8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	78ba      	ldrb	r2, [r7, #2]
 8004c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c94:	b2d0      	uxtb	r0, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	212c      	movs	r1, #44	; 0x2c
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	333a      	adds	r3, #58	; 0x3a
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004ca6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da09      	bge.n	8004cc2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	212c      	movs	r1, #44	; 0x2c
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	4413      	add	r3, r2
 8004cba:	333b      	adds	r3, #59	; 0x3b
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	e008      	b.n	8004cd4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	212c      	movs	r1, #44	; 0x2c
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	333b      	adds	r3, #59	; 0x3b
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	212c      	movs	r1, #44	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	333c      	adds	r3, #60	; 0x3c
 8004ce2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ce6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	787c      	ldrb	r4, [r7, #1]
 8004cee:	78ba      	ldrb	r2, [r7, #2]
 8004cf0:	78f9      	ldrb	r1, [r7, #3]
 8004cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cf4:	9302      	str	r3, [sp, #8]
 8004cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4623      	mov	r3, r4
 8004d04:	f006 f9f4 	bl	800b0f0 <USB_HC_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd90      	pop	{r4, r7, pc}

08004d1e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_HCD_HC_Halt+0x1e>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e00f      	b.n	8004d5c <HAL_HCD_HC_Halt+0x3e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f006 fc44 	bl	800b5da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	461a      	mov	r2, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	70fb      	strb	r3, [r7, #3]
 8004d76:	460b      	mov	r3, r1
 8004d78:	70bb      	strb	r3, [r7, #2]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	212c      	movs	r1, #44	; 0x2c
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	4413      	add	r3, r2
 8004d8a:	333b      	adds	r3, #59	; 0x3b
 8004d8c:	78ba      	ldrb	r2, [r7, #2]
 8004d8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	212c      	movs	r1, #44	; 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	333f      	adds	r3, #63	; 0x3f
 8004d9e:	787a      	ldrb	r2, [r7, #1]
 8004da0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004da2:	7c3b      	ldrb	r3, [r7, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d112      	bne.n	8004dce <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004da8:	78fb      	ldrb	r3, [r7, #3]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	212c      	movs	r1, #44	; 0x2c
 8004dae:	fb01 f303 	mul.w	r3, r1, r3
 8004db2:	4413      	add	r3, r2
 8004db4:	3342      	adds	r3, #66	; 0x42
 8004db6:	2203      	movs	r2, #3
 8004db8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	333d      	adds	r3, #61	; 0x3d
 8004dc8:	7f3a      	ldrb	r2, [r7, #28]
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	e008      	b.n	8004de0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	212c      	movs	r1, #44	; 0x2c
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	3342      	adds	r3, #66	; 0x42
 8004ddc:	2202      	movs	r2, #2
 8004dde:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	f200 80c6 	bhi.w	8004f74 <HAL_HCD_HC_SubmitRequest+0x210>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004f61 	.word	0x08004f61
 8004df8:	08004e65 	.word	0x08004e65
 8004dfc:	08004ee3 	.word	0x08004ee3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004e00:	7c3b      	ldrb	r3, [r7, #16]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	f040 80b8 	bne.w	8004f78 <HAL_HCD_HC_SubmitRequest+0x214>
 8004e08:	78bb      	ldrb	r3, [r7, #2]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f040 80b4 	bne.w	8004f78 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004e10:	8b3b      	ldrh	r3, [r7, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d108      	bne.n	8004e28 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	212c      	movs	r1, #44	; 0x2c
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	4413      	add	r3, r2
 8004e22:	3355      	adds	r3, #85	; 0x55
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	212c      	movs	r1, #44	; 0x2c
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	4413      	add	r3, r2
 8004e34:	3355      	adds	r3, #85	; 0x55
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d109      	bne.n	8004e50 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	212c      	movs	r1, #44	; 0x2c
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	3342      	adds	r3, #66	; 0x42
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e4e:	e093      	b.n	8004f78 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	212c      	movs	r1, #44	; 0x2c
 8004e56:	fb01 f303 	mul.w	r3, r1, r3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3342      	adds	r3, #66	; 0x42
 8004e5e:	2202      	movs	r2, #2
 8004e60:	701a      	strb	r2, [r3, #0]
      break;
 8004e62:	e089      	b.n	8004f78 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004e64:	78bb      	ldrb	r3, [r7, #2]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d11d      	bne.n	8004ea6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	3355      	adds	r3, #85	; 0x55
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e7e:	78fb      	ldrb	r3, [r7, #3]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	3342      	adds	r3, #66	; 0x42
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004e90:	e073      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	212c      	movs	r1, #44	; 0x2c
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3342      	adds	r3, #66	; 0x42
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	701a      	strb	r2, [r3, #0]
      break;
 8004ea4:	e069      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	212c      	movs	r1, #44	; 0x2c
 8004eac:	fb01 f303 	mul.w	r3, r1, r3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3354      	adds	r3, #84	; 0x54
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	212c      	movs	r1, #44	; 0x2c
 8004ec0:	fb01 f303 	mul.w	r3, r1, r3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	3342      	adds	r3, #66	; 0x42
 8004ec8:	2200      	movs	r2, #0
 8004eca:	701a      	strb	r2, [r3, #0]
      break;
 8004ecc:	e055      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	212c      	movs	r1, #44	; 0x2c
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	4413      	add	r3, r2
 8004eda:	3342      	adds	r3, #66	; 0x42
 8004edc:	2202      	movs	r2, #2
 8004ede:	701a      	strb	r2, [r3, #0]
      break;
 8004ee0:	e04b      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004ee2:	78bb      	ldrb	r3, [r7, #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11d      	bne.n	8004f24 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	212c      	movs	r1, #44	; 0x2c
 8004eee:	fb01 f303 	mul.w	r3, r1, r3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	3355      	adds	r3, #85	; 0x55
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d109      	bne.n	8004f10 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	212c      	movs	r1, #44	; 0x2c
 8004f02:	fb01 f303 	mul.w	r3, r1, r3
 8004f06:	4413      	add	r3, r2
 8004f08:	3342      	adds	r3, #66	; 0x42
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f0e:	e034      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3342      	adds	r3, #66	; 0x42
 8004f1e:	2202      	movs	r2, #2
 8004f20:	701a      	strb	r2, [r3, #0]
      break;
 8004f22:	e02a      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	3354      	adds	r3, #84	; 0x54
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	212c      	movs	r1, #44	; 0x2c
 8004f3e:	fb01 f303 	mul.w	r3, r1, r3
 8004f42:	4413      	add	r3, r2
 8004f44:	3342      	adds	r3, #66	; 0x42
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	e016      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	212c      	movs	r1, #44	; 0x2c
 8004f52:	fb01 f303 	mul.w	r3, r1, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3342      	adds	r3, #66	; 0x42
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	701a      	strb	r2, [r3, #0]
      break;
 8004f5e:	e00c      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	212c      	movs	r1, #44	; 0x2c
 8004f66:	fb01 f303 	mul.w	r3, r1, r3
 8004f6a:	4413      	add	r3, r2
 8004f6c:	3342      	adds	r3, #66	; 0x42
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004f78:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	212c      	movs	r1, #44	; 0x2c
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	4413      	add	r3, r2
 8004f86:	3344      	adds	r3, #68	; 0x44
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	8b3a      	ldrh	r2, [r7, #24]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	202c      	movs	r0, #44	; 0x2c
 8004f94:	fb00 f303 	mul.w	r3, r0, r3
 8004f98:	440b      	add	r3, r1
 8004f9a:	334c      	adds	r3, #76	; 0x4c
 8004f9c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	212c      	movs	r1, #44	; 0x2c
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	3360      	adds	r3, #96	; 0x60
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3350      	adds	r3, #80	; 0x50
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	212c      	movs	r1, #44	; 0x2c
 8004fc8:	fb01 f303 	mul.w	r3, r1, r3
 8004fcc:	4413      	add	r3, r2
 8004fce:	3339      	adds	r3, #57	; 0x39
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	212c      	movs	r1, #44	; 0x2c
 8004fda:	fb01 f303 	mul.w	r3, r1, r3
 8004fde:	4413      	add	r3, r2
 8004fe0:	3361      	adds	r3, #97	; 0x61
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	222c      	movs	r2, #44	; 0x2c
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	3338      	adds	r3, #56	; 0x38
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	18d1      	adds	r1, r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	461a      	mov	r2, r3
 8005000:	f006 f998 	bl	800b334 <USB_HC_StartXfer>
 8005004:	4603      	mov	r3, r0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop

08005010 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f005 fe99 	bl	800ad5e <USB_GetMode>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	f040 80f6 	bne.w	8005220 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f005 fe7d 	bl	800ad38 <USB_ReadInterrupts>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80ec 	beq.w	800521e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f005 fe74 	bl	800ad38 <USB_ReadInterrupts>
 8005050:	4603      	mov	r3, r0
 8005052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800505a:	d104      	bne.n	8005066 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005064:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f005 fe64 	bl	800ad38 <USB_ReadInterrupts>
 8005070:	4603      	mov	r3, r0
 8005072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800507a:	d104      	bne.n	8005086 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005084:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f005 fe54 	bl	800ad38 <USB_ReadInterrupts>
 8005090:	4603      	mov	r3, r0
 8005092:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800509a:	d104      	bne.n	80050a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80050a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f005 fe44 	bl	800ad38 <USB_ReadInterrupts>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d103      	bne.n	80050c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f005 fe36 	bl	800ad38 <USB_ReadInterrupts>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d6:	d11c      	bne.n	8005112 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80050e0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10f      	bne.n	8005112 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80050f2:	2110      	movs	r1, #16
 80050f4:	6938      	ldr	r0, [r7, #16]
 80050f6:	f005 fd25 	bl	800ab44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f005 fd56 	bl	800abac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2101      	movs	r1, #1
 8005106:	4618      	mov	r0, r3
 8005108:	f005 ff2c 	bl	800af64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f00c f98d 	bl	801142c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f005 fe0e 	bl	800ad38 <USB_ReadInterrupts>
 800511c:	4603      	mov	r3, r0
 800511e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005122:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005126:	d102      	bne.n	800512e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f001 f89e 	bl	800626a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f005 fe00 	bl	800ad38 <USB_ReadInterrupts>
 8005138:	4603      	mov	r3, r0
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b08      	cmp	r3, #8
 8005140:	d106      	bne.n	8005150 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f00c f956 	bl	80113f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2208      	movs	r2, #8
 800514e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f005 fdef 	bl	800ad38 <USB_ReadInterrupts>
 800515a:	4603      	mov	r3, r0
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b10      	cmp	r3, #16
 8005162:	d101      	bne.n	8005168 <HAL_HCD_IRQHandler+0x158>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <HAL_HCD_IRQHandler+0x15a>
 8005168:	2300      	movs	r3, #0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d012      	beq.n	8005194 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 0210 	bic.w	r2, r2, #16
 800517c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 ffa1 	bl	80060c6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0210 	orr.w	r2, r2, #16
 8005192:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f005 fdcd 	bl	800ad38 <USB_ReadInterrupts>
 800519e:	4603      	mov	r3, r0
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051a8:	d13a      	bne.n	8005220 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f006 fa02 	bl	800b5b8 <USB_HC_ReadInterrupt>
 80051b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051b6:	2300      	movs	r3, #0
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e025      	b.n	8005208 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d018      	beq.n	8005202 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e6:	d106      	bne.n	80051f6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	4619      	mov	r1, r3
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8ab 	bl	800534a <HCD_HC_IN_IRQHandler>
 80051f4:	e005      	b.n	8005202 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	4619      	mov	r1, r3
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fbf9 	bl	80059f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	3301      	adds	r3, #1
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3d4      	bcc.n	80051bc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800521a:	615a      	str	r2, [r3, #20]
 800521c:	e000      	b.n	8005220 <HAL_HCD_IRQHandler+0x210>
      return;
 800521e:	bf00      	nop
    }
  }
}
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005234:	2b01      	cmp	r3, #1
 8005236:	d101      	bne.n	800523c <HAL_HCD_Start+0x16>
 8005238:	2302      	movs	r3, #2
 800523a:	e013      	b.n	8005264 <HAL_HCD_Start+0x3e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2101      	movs	r1, #1
 800524a:	4618      	mov	r0, r3
 800524c:	f005 feee 	bl	800b02c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f005 fc06 	bl	800aa66 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_HCD_Stop+0x16>
 800527e:	2302      	movs	r3, #2
 8005280:	e00d      	b.n	800529e <HAL_HCD_Stop+0x32>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f006 fadc 	bl	800b84c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f005 fe90 	bl	800afd8 <USB_ResetPort>
 80052b8:	4603      	mov	r3, r0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	212c      	movs	r1, #44	; 0x2c
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	3360      	adds	r3, #96	; 0x60
 80052dc:	781b      	ldrb	r3, [r3, #0]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	212c      	movs	r1, #44	; 0x2c
 80052fc:	fb01 f303 	mul.w	r3, r1, r3
 8005300:	4413      	add	r3, r2
 8005302:	3350      	adds	r3, #80	; 0x50
 8005304:	681b      	ldr	r3, [r3, #0]
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f005 fed4 	bl	800b0cc <USB_GetCurrentFrame>
 8005324:	4603      	mov	r3, r0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f005 feaf 	bl	800b09e <USB_GetHostSpeed>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b086      	sub	sp, #24
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b04      	cmp	r3, #4
 8005378:	d11a      	bne.n	80053b0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	461a      	mov	r2, r3
 8005388:	2304      	movs	r3, #4
 800538a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	212c      	movs	r1, #44	; 0x2c
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	4413      	add	r3, r2
 8005398:	3361      	adds	r3, #97	; 0x61
 800539a:	2206      	movs	r2, #6
 800539c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f006 f916 	bl	800b5da <USB_HC_Halt>
 80053ae:	e0af      	b.n	8005510 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c6:	d11b      	bne.n	8005400 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d4:	461a      	mov	r2, r3
 80053d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	212c      	movs	r1, #44	; 0x2c
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	3361      	adds	r3, #97	; 0x61
 80053ea:	2207      	movs	r2, #7
 80053ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	4611      	mov	r1, r2
 80053f8:	4618      	mov	r0, r3
 80053fa:	f006 f8ee 	bl	800b5da <USB_HC_Halt>
 80053fe:	e087      	b.n	8005510 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b20      	cmp	r3, #32
 8005414:	d109      	bne.n	800542a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005422:	461a      	mov	r2, r3
 8005424:	2320      	movs	r3, #32
 8005426:	6093      	str	r3, [r2, #8]
 8005428:	e072      	b.n	8005510 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b08      	cmp	r3, #8
 800543e:	d11a      	bne.n	8005476 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544c:	461a      	mov	r2, r3
 800544e:	2308      	movs	r3, #8
 8005450:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	212c      	movs	r1, #44	; 0x2c
 8005458:	fb01 f303 	mul.w	r3, r1, r3
 800545c:	4413      	add	r3, r2
 800545e:	3361      	adds	r3, #97	; 0x61
 8005460:	2205      	movs	r2, #5
 8005462:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f006 f8b3 	bl	800b5da <USB_HC_Halt>
 8005474:	e04c      	b.n	8005510 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548c:	d11b      	bne.n	80054c6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	4413      	add	r3, r2
 8005496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549a:	461a      	mov	r2, r3
 800549c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	212c      	movs	r1, #44	; 0x2c
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	3361      	adds	r3, #97	; 0x61
 80054b0:	2208      	movs	r2, #8
 80054b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	4611      	mov	r1, r2
 80054be:	4618      	mov	r0, r3
 80054c0:	f006 f88b 	bl	800b5da <USB_HC_Halt>
 80054c4:	e024      	b.n	8005510 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b80      	cmp	r3, #128	; 0x80
 80054da:	d119      	bne.n	8005510 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	461a      	mov	r2, r3
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	212c      	movs	r1, #44	; 0x2c
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	4413      	add	r3, r2
 80054fa:	3361      	adds	r3, #97	; 0x61
 80054fc:	2206      	movs	r2, #6
 80054fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	4611      	mov	r1, r2
 800550a:	4618      	mov	r0, r3
 800550c:	f006 f865 	bl	800b5da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005526:	d112      	bne.n	800554e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	4611      	mov	r1, r2
 8005532:	4618      	mov	r0, r3
 8005534:	f006 f851 	bl	800b5da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	015a      	lsls	r2, r3, #5
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	4413      	add	r3, r2
 8005540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005544:	461a      	mov	r2, r3
 8005546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800554a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800554c:	e24e      	b.n	80059ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b01      	cmp	r3, #1
 8005562:	f040 80df 	bne.w	8005724 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	212c      	movs	r1, #44	; 0x2c
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	3348      	adds	r3, #72	; 0x48
 800557c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	0159      	lsls	r1, r3, #5
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	440b      	add	r3, r1
 8005586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005590:	1ad2      	subs	r2, r2, r3
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	202c      	movs	r0, #44	; 0x2c
 8005598:	fb00 f303 	mul.w	r3, r0, r3
 800559c:	440b      	add	r3, r1
 800559e:	3350      	adds	r3, #80	; 0x50
 80055a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	212c      	movs	r1, #44	; 0x2c
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	3361      	adds	r3, #97	; 0x61
 80055b0:	2201      	movs	r2, #1
 80055b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	212c      	movs	r1, #44	; 0x2c
 80055ba:	fb01 f303 	mul.w	r3, r1, r3
 80055be:	4413      	add	r3, r2
 80055c0:	335c      	adds	r3, #92	; 0x5c
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d2:	461a      	mov	r2, r3
 80055d4:	2301      	movs	r3, #1
 80055d6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	212c      	movs	r1, #44	; 0x2c
 80055de:	fb01 f303 	mul.w	r3, r1, r3
 80055e2:	4413      	add	r3, r2
 80055e4:	333f      	adds	r3, #63	; 0x3f
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	212c      	movs	r1, #44	; 0x2c
 80055f2:	fb01 f303 	mul.w	r3, r1, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	333f      	adds	r3, #63	; 0x3f
 80055fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d111      	bne.n	8005624 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f005 ffe5 	bl	800b5da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561c:	461a      	mov	r2, r3
 800561e:	2310      	movs	r3, #16
 8005620:	6093      	str	r3, [r2, #8]
 8005622:	e03a      	b.n	800569a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	212c      	movs	r1, #44	; 0x2c
 800562a:	fb01 f303 	mul.w	r3, r1, r3
 800562e:	4413      	add	r3, r2
 8005630:	333f      	adds	r3, #63	; 0x3f
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d009      	beq.n	800564c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	212c      	movs	r1, #44	; 0x2c
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	333f      	adds	r3, #63	; 0x3f
 8005646:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005648:	2b01      	cmp	r3, #1
 800564a:	d126      	bne.n	800569a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	0151      	lsls	r1, r2, #5
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	440a      	add	r2, r1
 8005662:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800566a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	212c      	movs	r1, #44	; 0x2c
 8005672:	fb01 f303 	mul.w	r3, r1, r3
 8005676:	4413      	add	r3, r2
 8005678:	3360      	adds	r3, #96	; 0x60
 800567a:	2201      	movs	r2, #1
 800567c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	b2d9      	uxtb	r1, r3
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	202c      	movs	r0, #44	; 0x2c
 8005688:	fb00 f303 	mul.w	r3, r0, r3
 800568c:	4413      	add	r3, r2
 800568e:	3360      	adds	r3, #96	; 0x60
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f00b fed7 	bl	8011448 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d12b      	bne.n	80056fa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	212c      	movs	r1, #44	; 0x2c
 80056a8:	fb01 f303 	mul.w	r3, r1, r3
 80056ac:	4413      	add	r3, r2
 80056ae:	3348      	adds	r3, #72	; 0x48
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	202c      	movs	r0, #44	; 0x2c
 80056b8:	fb00 f202 	mul.w	r2, r0, r2
 80056bc:	440a      	add	r2, r1
 80056be:	3240      	adds	r2, #64	; 0x40
 80056c0:	8812      	ldrh	r2, [r2, #0]
 80056c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 818e 	beq.w	80059ec <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	212c      	movs	r1, #44	; 0x2c
 80056d6:	fb01 f303 	mul.w	r3, r1, r3
 80056da:	4413      	add	r3, r2
 80056dc:	3354      	adds	r3, #84	; 0x54
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f083 0301 	eor.w	r3, r3, #1
 80056e4:	b2d8      	uxtb	r0, r3
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	212c      	movs	r1, #44	; 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	3354      	adds	r3, #84	; 0x54
 80056f4:	4602      	mov	r2, r0
 80056f6:	701a      	strb	r2, [r3, #0]
}
 80056f8:	e178      	b.n	80059ec <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	212c      	movs	r1, #44	; 0x2c
 8005700:	fb01 f303 	mul.w	r3, r1, r3
 8005704:	4413      	add	r3, r2
 8005706:	3354      	adds	r3, #84	; 0x54
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f083 0301 	eor.w	r3, r3, #1
 800570e:	b2d8      	uxtb	r0, r3
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	212c      	movs	r1, #44	; 0x2c
 8005716:	fb01 f303 	mul.w	r3, r1, r3
 800571a:	4413      	add	r3, r2
 800571c:	3354      	adds	r3, #84	; 0x54
 800571e:	4602      	mov	r2, r0
 8005720:	701a      	strb	r2, [r3, #0]
}
 8005722:	e163      	b.n	80059ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	f040 80f6 	bne.w	8005928 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	212c      	movs	r1, #44	; 0x2c
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	4413      	add	r3, r2
 8005748:	3361      	adds	r3, #97	; 0x61
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d109      	bne.n	8005764 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	212c      	movs	r1, #44	; 0x2c
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	4413      	add	r3, r2
 800575c:	3360      	adds	r3, #96	; 0x60
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e0c9      	b.n	80058f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	212c      	movs	r1, #44	; 0x2c
 800576a:	fb01 f303 	mul.w	r3, r1, r3
 800576e:	4413      	add	r3, r2
 8005770:	3361      	adds	r3, #97	; 0x61
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b05      	cmp	r3, #5
 8005776:	d109      	bne.n	800578c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	212c      	movs	r1, #44	; 0x2c
 800577e:	fb01 f303 	mul.w	r3, r1, r3
 8005782:	4413      	add	r3, r2
 8005784:	3360      	adds	r3, #96	; 0x60
 8005786:	2205      	movs	r2, #5
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e0b5      	b.n	80058f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	212c      	movs	r1, #44	; 0x2c
 8005792:	fb01 f303 	mul.w	r3, r1, r3
 8005796:	4413      	add	r3, r2
 8005798:	3361      	adds	r3, #97	; 0x61
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b06      	cmp	r3, #6
 800579e:	d009      	beq.n	80057b4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	212c      	movs	r1, #44	; 0x2c
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	3361      	adds	r3, #97	; 0x61
 80057ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d150      	bne.n	8005856 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	212c      	movs	r1, #44	; 0x2c
 80057ba:	fb01 f303 	mul.w	r3, r1, r3
 80057be:	4413      	add	r3, r2
 80057c0:	335c      	adds	r3, #92	; 0x5c
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	202c      	movs	r0, #44	; 0x2c
 80057cc:	fb00 f303 	mul.w	r3, r0, r3
 80057d0:	440b      	add	r3, r1
 80057d2:	335c      	adds	r3, #92	; 0x5c
 80057d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	212c      	movs	r1, #44	; 0x2c
 80057dc:	fb01 f303 	mul.w	r3, r1, r3
 80057e0:	4413      	add	r3, r2
 80057e2:	335c      	adds	r3, #92	; 0x5c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d912      	bls.n	8005810 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	212c      	movs	r1, #44	; 0x2c
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	4413      	add	r3, r2
 80057f6:	335c      	adds	r3, #92	; 0x5c
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	212c      	movs	r1, #44	; 0x2c
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	3360      	adds	r3, #96	; 0x60
 800580a:	2204      	movs	r2, #4
 800580c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800580e:	e073      	b.n	80058f8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	212c      	movs	r1, #44	; 0x2c
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	4413      	add	r3, r2
 800581c:	3360      	adds	r3, #96	; 0x60
 800581e:	2202      	movs	r2, #2
 8005820:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005838:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005840:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800584e:	461a      	mov	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005854:	e050      	b.n	80058f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	212c      	movs	r1, #44	; 0x2c
 800585c:	fb01 f303 	mul.w	r3, r1, r3
 8005860:	4413      	add	r3, r2
 8005862:	3361      	adds	r3, #97	; 0x61
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d122      	bne.n	80058b0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	212c      	movs	r1, #44	; 0x2c
 8005870:	fb01 f303 	mul.w	r3, r1, r3
 8005874:	4413      	add	r3, r2
 8005876:	3360      	adds	r3, #96	; 0x60
 8005878:	2202      	movs	r2, #2
 800587a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005892:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800589a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a8:	461a      	mov	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	e023      	b.n	80058f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	212c      	movs	r1, #44	; 0x2c
 80058b6:	fb01 f303 	mul.w	r3, r1, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	3361      	adds	r3, #97	; 0x61
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b07      	cmp	r3, #7
 80058c2:	d119      	bne.n	80058f8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	212c      	movs	r1, #44	; 0x2c
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	335c      	adds	r3, #92	; 0x5c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	202c      	movs	r0, #44	; 0x2c
 80058dc:	fb00 f303 	mul.w	r3, r0, r3
 80058e0:	440b      	add	r3, r1
 80058e2:	335c      	adds	r3, #92	; 0x5c
 80058e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	212c      	movs	r1, #44	; 0x2c
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	3360      	adds	r3, #96	; 0x60
 80058f4:	2204      	movs	r2, #4
 80058f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	461a      	mov	r2, r3
 8005906:	2302      	movs	r3, #2
 8005908:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	b2d9      	uxtb	r1, r3
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	202c      	movs	r0, #44	; 0x2c
 8005914:	fb00 f303 	mul.w	r3, r0, r3
 8005918:	4413      	add	r3, r2
 800591a:	3360      	adds	r3, #96	; 0x60
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f00b fd91 	bl	8011448 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005926:	e061      	b.n	80059ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b10      	cmp	r3, #16
 800593c:	d156      	bne.n	80059ec <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	212c      	movs	r1, #44	; 0x2c
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	4413      	add	r3, r2
 800594a:	333f      	adds	r3, #63	; 0x3f
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b03      	cmp	r3, #3
 8005950:	d111      	bne.n	8005976 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	212c      	movs	r1, #44	; 0x2c
 8005958:	fb01 f303 	mul.w	r3, r1, r3
 800595c:	4413      	add	r3, r2
 800595e:	335c      	adds	r3, #92	; 0x5c
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	4611      	mov	r1, r2
 800596e:	4618      	mov	r0, r3
 8005970:	f005 fe33 	bl	800b5da <USB_HC_Halt>
 8005974:	e031      	b.n	80059da <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	212c      	movs	r1, #44	; 0x2c
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	333f      	adds	r3, #63	; 0x3f
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d009      	beq.n	800599e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	212c      	movs	r1, #44	; 0x2c
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	4413      	add	r3, r2
 8005996:	333f      	adds	r3, #63	; 0x3f
 8005998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800599a:	2b02      	cmp	r3, #2
 800599c:	d11d      	bne.n	80059da <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	212c      	movs	r1, #44	; 0x2c
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	335c      	adds	r3, #92	; 0x5c
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d110      	bne.n	80059da <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	212c      	movs	r1, #44	; 0x2c
 80059be:	fb01 f303 	mul.w	r3, r1, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	3361      	adds	r3, #97	; 0x61
 80059c6:	2203      	movs	r2, #3
 80059c8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	4611      	mov	r1, r2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f005 fe00 	bl	800b5da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e6:	461a      	mov	r2, r3
 80059e8:	2310      	movs	r3, #16
 80059ea:	6093      	str	r3, [r2, #8]
}
 80059ec:	bf00      	nop
 80059ee:	3718      	adds	r7, #24
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	460b      	mov	r3, r1
 80059fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005a0a:	78fb      	ldrb	r3, [r7, #3]
 8005a0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d11a      	bne.n	8005a5a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a30:	461a      	mov	r2, r3
 8005a32:	2304      	movs	r3, #4
 8005a34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	212c      	movs	r1, #44	; 0x2c
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	3361      	adds	r3, #97	; 0x61
 8005a44:	2206      	movs	r2, #6
 8005a46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f005 fdc1 	bl	800b5da <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005a58:	e331      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d12e      	bne.n	8005ace <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2320      	movs	r3, #32
 8005a80:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	212c      	movs	r1, #44	; 0x2c
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	333d      	adds	r3, #61	; 0x3d
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	f040 8313 	bne.w	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	212c      	movs	r1, #44	; 0x2c
 8005a9e:	fb01 f303 	mul.w	r3, r1, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	333d      	adds	r3, #61	; 0x3d
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	212c      	movs	r1, #44	; 0x2c
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3360      	adds	r3, #96	; 0x60
 8005ab8:	2202      	movs	r2, #2
 8005aba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f005 fd87 	bl	800b5da <USB_HC_Halt>
}
 8005acc:	e2f7      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d112      	bne.n	8005b0c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af2:	461a      	mov	r2, r3
 8005af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005af8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	b2d2      	uxtb	r2, r2
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f005 fd68 	bl	800b5da <USB_HC_Halt>
}
 8005b0a:	e2d8      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d140      	bne.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	212c      	movs	r1, #44	; 0x2c
 8005b28:	fb01 f303 	mul.w	r3, r1, r3
 8005b2c:	4413      	add	r3, r2
 8005b2e:	335c      	adds	r3, #92	; 0x5c
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d111      	bne.n	8005b6e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	212c      	movs	r1, #44	; 0x2c
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	333d      	adds	r3, #61	; 0x3d
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2340      	movs	r3, #64	; 0x40
 8005b6c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	212c      	movs	r1, #44	; 0x2c
 8005b86:	fb01 f303 	mul.w	r3, r1, r3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3361      	adds	r3, #97	; 0x61
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f005 fd1c 	bl	800b5da <USB_HC_Halt>
}
 8005ba2:	e28c      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d12c      	bne.n	8005c14 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	212c      	movs	r1, #44	; 0x2c
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3361      	adds	r3, #97	; 0x61
 8005bc8:	2204      	movs	r2, #4
 8005bca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	212c      	movs	r1, #44	; 0x2c
 8005bd2:	fb01 f303 	mul.w	r3, r1, r3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	333d      	adds	r3, #61	; 0x3d
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	212c      	movs	r1, #44	; 0x2c
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	335c      	adds	r3, #92	; 0x5c
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f005 fced 	bl	800b5da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2340      	movs	r3, #64	; 0x40
 8005c10:	6093      	str	r3, [r2, #8]
}
 8005c12:	e254      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d11a      	bne.n	8005c60 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	461a      	mov	r2, r3
 8005c38:	2308      	movs	r3, #8
 8005c3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	212c      	movs	r1, #44	; 0x2c
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	3361      	adds	r3, #97	; 0x61
 8005c4a:	2205      	movs	r2, #5
 8005c4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f005 fcbe 	bl	800b5da <USB_HC_Halt>
}
 8005c5e:	e22e      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 0310 	and.w	r3, r3, #16
 8005c72:	2b10      	cmp	r3, #16
 8005c74:	d140      	bne.n	8005cf8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	212c      	movs	r1, #44	; 0x2c
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	335c      	adds	r3, #92	; 0x5c
 8005c84:	2200      	movs	r2, #0
 8005c86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	212c      	movs	r1, #44	; 0x2c
 8005c8e:	fb01 f303 	mul.w	r3, r1, r3
 8005c92:	4413      	add	r3, r2
 8005c94:	3361      	adds	r3, #97	; 0x61
 8005c96:	2203      	movs	r2, #3
 8005c98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	212c      	movs	r1, #44	; 0x2c
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	333d      	adds	r3, #61	; 0x3d
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d112      	bne.n	8005cd4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	212c      	movs	r1, #44	; 0x2c
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	333c      	adds	r3, #60	; 0x3c
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d108      	bne.n	8005cd4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	212c      	movs	r1, #44	; 0x2c
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	333d      	adds	r3, #61	; 0x3d
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f005 fc7b 	bl	800b5da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2310      	movs	r3, #16
 8005cf4:	6093      	str	r3, [r2, #8]
}
 8005cf6:	e1e2      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	d164      	bne.n	8005dd8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d111      	bne.n	8005d3a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	212c      	movs	r1, #44	; 0x2c
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	4413      	add	r3, r2
 8005d22:	3361      	adds	r3, #97	; 0x61
 8005d24:	2206      	movs	r2, #6
 8005d26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f005 fc51 	bl	800b5da <USB_HC_Halt>
 8005d38:	e044      	b.n	8005dc4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	212c      	movs	r1, #44	; 0x2c
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	4413      	add	r3, r2
 8005d46:	335c      	adds	r3, #92	; 0x5c
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	202c      	movs	r0, #44	; 0x2c
 8005d52:	fb00 f303 	mul.w	r3, r0, r3
 8005d56:	440b      	add	r3, r1
 8005d58:	335c      	adds	r3, #92	; 0x5c
 8005d5a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	212c      	movs	r1, #44	; 0x2c
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	335c      	adds	r3, #92	; 0x5c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d920      	bls.n	8005db2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	212c      	movs	r1, #44	; 0x2c
 8005d76:	fb01 f303 	mul.w	r3, r1, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	335c      	adds	r3, #92	; 0x5c
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	212c      	movs	r1, #44	; 0x2c
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3360      	adds	r3, #96	; 0x60
 8005d90:	2204      	movs	r2, #4
 8005d92:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	b2d9      	uxtb	r1, r3
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	202c      	movs	r0, #44	; 0x2c
 8005d9e:	fb00 f303 	mul.w	r3, r0, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	3360      	adds	r3, #96	; 0x60
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f00b fb4c 	bl	8011448 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005db0:	e008      	b.n	8005dc4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	212c      	movs	r1, #44	; 0x2c
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3360      	adds	r3, #96	; 0x60
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2380      	movs	r3, #128	; 0x80
 8005dd4:	6093      	str	r3, [r2, #8]
}
 8005dd6:	e172      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dee:	d11b      	bne.n	8005e28 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	212c      	movs	r1, #44	; 0x2c
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3361      	adds	r3, #97	; 0x61
 8005dfe:	2208      	movs	r2, #8
 8005e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f005 fbe4 	bl	800b5da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e24:	6093      	str	r3, [r2, #8]
}
 8005e26:	e14a      	b.n	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	f040 813f 	bne.w	80060be <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	212c      	movs	r1, #44	; 0x2c
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3361      	adds	r3, #97	; 0x61
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d17d      	bne.n	8005f50 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	212c      	movs	r1, #44	; 0x2c
 8005e5a:	fb01 f303 	mul.w	r3, r1, r3
 8005e5e:	4413      	add	r3, r2
 8005e60:	3360      	adds	r3, #96	; 0x60
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	212c      	movs	r1, #44	; 0x2c
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	4413      	add	r3, r2
 8005e72:	333f      	adds	r3, #63	; 0x3f
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d00a      	beq.n	8005e90 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	212c      	movs	r1, #44	; 0x2c
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	333f      	adds	r3, #63	; 0x3f
 8005e88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	f040 8100 	bne.w	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d113      	bne.n	8005ec0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	212c      	movs	r1, #44	; 0x2c
 8005e9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	3355      	adds	r3, #85	; 0x55
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f083 0301 	eor.w	r3, r3, #1
 8005eac:	b2d8      	uxtb	r0, r3
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	212c      	movs	r1, #44	; 0x2c
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	3355      	adds	r3, #85	; 0x55
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	f040 80e3 	bne.w	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	212c      	movs	r1, #44	; 0x2c
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	4413      	add	r3, r2
 8005ed6:	334c      	adds	r3, #76	; 0x4c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 80d8 	beq.w	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	212c      	movs	r1, #44	; 0x2c
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	334c      	adds	r3, #76	; 0x4c
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	202c      	movs	r0, #44	; 0x2c
 8005ef6:	fb00 f202 	mul.w	r2, r0, r2
 8005efa:	440a      	add	r2, r1
 8005efc:	3240      	adds	r2, #64	; 0x40
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	3b01      	subs	r3, #1
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	697a      	ldr	r2, [r7, #20]
 8005f08:	202c      	movs	r0, #44	; 0x2c
 8005f0a:	fb00 f202 	mul.w	r2, r0, r2
 8005f0e:	440a      	add	r2, r1
 8005f10:	3240      	adds	r2, #64	; 0x40
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 80b5 	beq.w	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	212c      	movs	r1, #44	; 0x2c
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	4413      	add	r3, r2
 8005f32:	3355      	adds	r3, #85	; 0x55
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	f083 0301 	eor.w	r3, r3, #1
 8005f3a:	b2d8      	uxtb	r0, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	212c      	movs	r1, #44	; 0x2c
 8005f42:	fb01 f303 	mul.w	r3, r1, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	3355      	adds	r3, #85	; 0x55
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	e09f      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	212c      	movs	r1, #44	; 0x2c
 8005f56:	fb01 f303 	mul.w	r3, r1, r3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	3361      	adds	r3, #97	; 0x61
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b03      	cmp	r3, #3
 8005f62:	d109      	bne.n	8005f78 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	212c      	movs	r1, #44	; 0x2c
 8005f6a:	fb01 f303 	mul.w	r3, r1, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	3360      	adds	r3, #96	; 0x60
 8005f72:	2202      	movs	r2, #2
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e08b      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	212c      	movs	r1, #44	; 0x2c
 8005f7e:	fb01 f303 	mul.w	r3, r1, r3
 8005f82:	4413      	add	r3, r2
 8005f84:	3361      	adds	r3, #97	; 0x61
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d109      	bne.n	8005fa0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	212c      	movs	r1, #44	; 0x2c
 8005f92:	fb01 f303 	mul.w	r3, r1, r3
 8005f96:	4413      	add	r3, r2
 8005f98:	3360      	adds	r3, #96	; 0x60
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e077      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	212c      	movs	r1, #44	; 0x2c
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	3361      	adds	r3, #97	; 0x61
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b05      	cmp	r3, #5
 8005fb2:	d109      	bne.n	8005fc8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	212c      	movs	r1, #44	; 0x2c
 8005fba:	fb01 f303 	mul.w	r3, r1, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3360      	adds	r3, #96	; 0x60
 8005fc2:	2205      	movs	r2, #5
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e063      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	212c      	movs	r1, #44	; 0x2c
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3361      	adds	r3, #97	; 0x61
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b06      	cmp	r3, #6
 8005fda:	d009      	beq.n	8005ff0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	212c      	movs	r1, #44	; 0x2c
 8005fe2:	fb01 f303 	mul.w	r3, r1, r3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3361      	adds	r3, #97	; 0x61
 8005fea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d14f      	bne.n	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	212c      	movs	r1, #44	; 0x2c
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	335c      	adds	r3, #92	; 0x5c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	202c      	movs	r0, #44	; 0x2c
 8006008:	fb00 f303 	mul.w	r3, r0, r3
 800600c:	440b      	add	r3, r1
 800600e:	335c      	adds	r3, #92	; 0x5c
 8006010:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	212c      	movs	r1, #44	; 0x2c
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	4413      	add	r3, r2
 800601e:	335c      	adds	r3, #92	; 0x5c
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d912      	bls.n	800604c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	212c      	movs	r1, #44	; 0x2c
 800602c:	fb01 f303 	mul.w	r3, r1, r3
 8006030:	4413      	add	r3, r2
 8006032:	335c      	adds	r3, #92	; 0x5c
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	212c      	movs	r1, #44	; 0x2c
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3360      	adds	r3, #96	; 0x60
 8006046:	2204      	movs	r2, #4
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e021      	b.n	8006090 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	212c      	movs	r1, #44	; 0x2c
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	3360      	adds	r3, #96	; 0x60
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006074:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608a:	461a      	mov	r2, r3
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	461a      	mov	r2, r3
 800609e:	2302      	movs	r3, #2
 80060a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	b2d9      	uxtb	r1, r3
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	202c      	movs	r0, #44	; 0x2c
 80060ac:	fb00 f303 	mul.w	r3, r0, r3
 80060b0:	4413      	add	r3, r2
 80060b2:	3360      	adds	r3, #96	; 0x60
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f00b f9c5 	bl	8011448 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80060be:	bf00      	nop
 80060c0:	3720      	adds	r7, #32
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08a      	sub	sp, #40	; 0x28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	0c5b      	lsrs	r3, r3, #17
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060fa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d004      	beq.n	800610c <HCD_RXQLVL_IRQHandler+0x46>
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	2b05      	cmp	r3, #5
 8006106:	f000 80a9 	beq.w	800625c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800610a:	e0aa      	b.n	8006262 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 80a6 	beq.w	8006260 <HCD_RXQLVL_IRQHandler+0x19a>
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	212c      	movs	r1, #44	; 0x2c
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	3344      	adds	r3, #68	; 0x44
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 809b 	beq.w	8006260 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	212c      	movs	r1, #44	; 0x2c
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	3350      	adds	r3, #80	; 0x50
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	441a      	add	r2, r3
 800613e:	6879      	ldr	r1, [r7, #4]
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	202c      	movs	r0, #44	; 0x2c
 8006144:	fb00 f303 	mul.w	r3, r0, r3
 8006148:	440b      	add	r3, r1
 800614a:	334c      	adds	r3, #76	; 0x4c
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d87a      	bhi.n	8006248 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	212c      	movs	r1, #44	; 0x2c
 800615c:	fb01 f303 	mul.w	r3, r1, r3
 8006160:	4413      	add	r3, r2
 8006162:	3344      	adds	r3, #68	; 0x44
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	b292      	uxth	r2, r2
 800616a:	4619      	mov	r1, r3
 800616c:	f004 fd8c 	bl	800ac88 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	212c      	movs	r1, #44	; 0x2c
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	3344      	adds	r3, #68	; 0x44
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	441a      	add	r2, r3
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	202c      	movs	r0, #44	; 0x2c
 800618a:	fb00 f303 	mul.w	r3, r0, r3
 800618e:	440b      	add	r3, r1
 8006190:	3344      	adds	r3, #68	; 0x44
 8006192:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	212c      	movs	r1, #44	; 0x2c
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	3350      	adds	r3, #80	; 0x50
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	441a      	add	r2, r3
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	202c      	movs	r0, #44	; 0x2c
 80061ae:	fb00 f303 	mul.w	r3, r0, r3
 80061b2:	440b      	add	r3, r1
 80061b4:	3350      	adds	r3, #80	; 0x50
 80061b6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	0cdb      	lsrs	r3, r3, #19
 80061c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061cc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	212c      	movs	r1, #44	; 0x2c
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3340      	adds	r3, #64	; 0x40
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d13c      	bne.n	8006260 <HCD_RXQLVL_IRQHandler+0x19a>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d039      	beq.n	8006260 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006202:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800620a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	4413      	add	r3, r2
 8006214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006218:	461a      	mov	r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	212c      	movs	r1, #44	; 0x2c
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	4413      	add	r3, r2
 800622a:	3354      	adds	r3, #84	; 0x54
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	f083 0301 	eor.w	r3, r3, #1
 8006232:	b2d8      	uxtb	r0, r3
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	212c      	movs	r1, #44	; 0x2c
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3354      	adds	r3, #84	; 0x54
 8006242:	4602      	mov	r2, r0
 8006244:	701a      	strb	r2, [r3, #0]
      break;
 8006246:	e00b      	b.n	8006260 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	212c      	movs	r1, #44	; 0x2c
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	3360      	adds	r3, #96	; 0x60
 8006256:	2204      	movs	r2, #4
 8006258:	701a      	strb	r2, [r3, #0]
      break;
 800625a:	e001      	b.n	8006260 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800625c:	bf00      	nop
 800625e:	e000      	b.n	8006262 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006260:	bf00      	nop
  }
}
 8006262:	bf00      	nop
 8006264:	3728      	adds	r7, #40	; 0x28
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b086      	sub	sp, #24
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006296:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d10b      	bne.n	80062ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d102      	bne.n	80062b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f00b f8af 	bl	8011410 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f043 0302 	orr.w	r3, r3, #2
 80062b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b08      	cmp	r3, #8
 80062c2:	d132      	bne.n	800632a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f043 0308 	orr.w	r3, r3, #8
 80062ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d126      	bne.n	8006324 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d113      	bne.n	8006306 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80062e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062e8:	d106      	bne.n	80062f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f004 fe37 	bl	800af64 <USB_InitFSLSPClkSel>
 80062f6:	e011      	b.n	800631c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2101      	movs	r1, #1
 80062fe:	4618      	mov	r0, r3
 8006300:	f004 fe30 	bl	800af64 <USB_InitFSLSPClkSel>
 8006304:	e00a      	b.n	800631c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d106      	bne.n	800631c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006314:	461a      	mov	r2, r3
 8006316:	f64e 2360 	movw	r3, #60000	; 0xea60
 800631a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f00b f8a1 	bl	8011464 <HAL_HCD_PortEnabled_Callback>
 8006322:	e002      	b.n	800632a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f00b f8ab 	bl	8011480 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b20      	cmp	r3, #32
 8006332:	d103      	bne.n	800633c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f043 0320 	orr.w	r3, r3, #32
 800633a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006342:	461a      	mov	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	6013      	str	r3, [r2, #0]
}
 8006348:	bf00      	nop
 800634a:	3718      	adds	r7, #24
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e12b      	b.n	80065ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fd f8ae 	bl	80034d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2224      	movs	r2, #36	; 0x24
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063b4:	f001 fd7a 	bl	8007eac <HAL_RCC_GetPCLK1Freq>
 80063b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	4a81      	ldr	r2, [pc, #516]	; (80065c4 <HAL_I2C_Init+0x274>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d807      	bhi.n	80063d4 <HAL_I2C_Init+0x84>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4a80      	ldr	r2, [pc, #512]	; (80065c8 <HAL_I2C_Init+0x278>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	bf94      	ite	ls
 80063cc:	2301      	movls	r3, #1
 80063ce:	2300      	movhi	r3, #0
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	e006      	b.n	80063e2 <HAL_I2C_Init+0x92>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a7d      	ldr	r2, [pc, #500]	; (80065cc <HAL_I2C_Init+0x27c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	bf94      	ite	ls
 80063dc:	2301      	movls	r3, #1
 80063de:	2300      	movhi	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0e7      	b.n	80065ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a78      	ldr	r2, [pc, #480]	; (80065d0 <HAL_I2C_Init+0x280>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	0c9b      	lsrs	r3, r3, #18
 80063f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a6a      	ldr	r2, [pc, #424]	; (80065c4 <HAL_I2C_Init+0x274>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d802      	bhi.n	8006424 <HAL_I2C_Init+0xd4>
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	3301      	adds	r3, #1
 8006422:	e009      	b.n	8006438 <HAL_I2C_Init+0xe8>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800642a:	fb02 f303 	mul.w	r3, r2, r3
 800642e:	4a69      	ldr	r2, [pc, #420]	; (80065d4 <HAL_I2C_Init+0x284>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	099b      	lsrs	r3, r3, #6
 8006436:	3301      	adds	r3, #1
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6812      	ldr	r2, [r2, #0]
 800643c:	430b      	orrs	r3, r1
 800643e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800644a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	495c      	ldr	r1, [pc, #368]	; (80065c4 <HAL_I2C_Init+0x274>)
 8006454:	428b      	cmp	r3, r1
 8006456:	d819      	bhi.n	800648c <HAL_I2C_Init+0x13c>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	1e59      	subs	r1, r3, #1
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	fbb1 f3f3 	udiv	r3, r1, r3
 8006466:	1c59      	adds	r1, r3, #1
 8006468:	f640 73fc 	movw	r3, #4092	; 0xffc
 800646c:	400b      	ands	r3, r1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00a      	beq.n	8006488 <HAL_I2C_Init+0x138>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1e59      	subs	r1, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006480:	3301      	adds	r3, #1
 8006482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006486:	e051      	b.n	800652c <HAL_I2C_Init+0x1dc>
 8006488:	2304      	movs	r3, #4
 800648a:	e04f      	b.n	800652c <HAL_I2C_Init+0x1dc>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d111      	bne.n	80064b8 <HAL_I2C_Init+0x168>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1e58      	subs	r0, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	440b      	add	r3, r1
 80064a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064a6:	3301      	adds	r3, #1
 80064a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf0c      	ite	eq
 80064b0:	2301      	moveq	r3, #1
 80064b2:	2300      	movne	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e012      	b.n	80064de <HAL_I2C_Init+0x18e>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1e58      	subs	r0, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	440b      	add	r3, r1
 80064c6:	0099      	lsls	r1, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80064ce:	3301      	adds	r3, #1
 80064d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_I2C_Init+0x196>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e022      	b.n	800652c <HAL_I2C_Init+0x1dc>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10e      	bne.n	800650c <HAL_I2C_Init+0x1bc>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1e58      	subs	r0, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6859      	ldr	r1, [r3, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	440b      	add	r3, r1
 80064fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006500:	3301      	adds	r3, #1
 8006502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650a:	e00f      	b.n	800652c <HAL_I2C_Init+0x1dc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1e58      	subs	r0, r3, #1
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	0099      	lsls	r1, r3, #2
 800651c:	440b      	add	r3, r1
 800651e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006522:	3301      	adds	r3, #1
 8006524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800652c:	6879      	ldr	r1, [r7, #4]
 800652e:	6809      	ldr	r1, [r1, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69da      	ldr	r2, [r3, #28]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800655a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6911      	ldr	r1, [r2, #16]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	4311      	orrs	r1, r2
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6812      	ldr	r2, [r2, #0]
 800656c:	430b      	orrs	r3, r1
 800656e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	000186a0 	.word	0x000186a0
 80065c8:	001e847f 	.word	0x001e847f
 80065cc:	003d08ff 	.word	0x003d08ff
 80065d0:	431bde83 	.word	0x431bde83
 80065d4:	10624dd3 	.word	0x10624dd3

080065d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	607a      	str	r2, [r7, #4]
 80065e2:	461a      	mov	r2, r3
 80065e4:	460b      	mov	r3, r1
 80065e6:	817b      	strh	r3, [r7, #10]
 80065e8:	4613      	mov	r3, r2
 80065ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ec:	f7fd fbee 	bl	8003dcc <HAL_GetTick>
 80065f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	f040 80e0 	bne.w	80067c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	2319      	movs	r3, #25
 8006606:	2201      	movs	r2, #1
 8006608:	4970      	ldr	r1, [pc, #448]	; (80067cc <HAL_I2C_Master_Transmit+0x1f4>)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 fd86 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006616:	2302      	movs	r3, #2
 8006618:	e0d3      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_I2C_Master_Transmit+0x50>
 8006624:	2302      	movs	r3, #2
 8006626:	e0cc      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b01      	cmp	r3, #1
 800663c:	d007      	beq.n	800664e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0201 	orr.w	r2, r2, #1
 800664c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2221      	movs	r2, #33	; 0x21
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2210      	movs	r2, #16
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	893a      	ldrh	r2, [r7, #8]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4a50      	ldr	r2, [pc, #320]	; (80067d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800668e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006690:	8979      	ldrh	r1, [r7, #10]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6a3a      	ldr	r2, [r7, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fbf0 	bl	8006e7c <I2C_MasterRequestWrite>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e08d      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066bc:	e066      	b.n	800678c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fe00 	bl	80072c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d107      	bne.n	80066e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e06b      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11b      	bne.n	8006760 <HAL_I2C_Master_Transmit+0x188>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	6a39      	ldr	r1, [r7, #32]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fdf0 	bl	800734a <I2C_WaitOnBTFFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	2b04      	cmp	r3, #4
 8006776:	d107      	bne.n	8006788 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006786:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e01a      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d194      	bne.n	80066be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	00100002 	.word	0x00100002
 80067d0:	ffff0000 	.word	0xffff0000

080067d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	; 0x30
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	461a      	mov	r2, r3
 80067e0:	460b      	mov	r3, r1
 80067e2:	817b      	strh	r3, [r7, #10]
 80067e4:	4613      	mov	r3, r2
 80067e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067e8:	f7fd faf0 	bl	8003dcc <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	f040 820b 	bne.w	8006c12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2319      	movs	r3, #25
 8006802:	2201      	movs	r2, #1
 8006804:	497c      	ldr	r1, [pc, #496]	; (80069f8 <HAL_I2C_Master_Receive+0x224>)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fc88 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006812:	2302      	movs	r3, #2
 8006814:	e1fe      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_I2C_Master_Receive+0x50>
 8006820:	2302      	movs	r3, #2
 8006822:	e1f7      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d007      	beq.n	800684a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006858:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2222      	movs	r2, #34	; 0x22
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2210      	movs	r2, #16
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	893a      	ldrh	r2, [r7, #8]
 800687a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a5c      	ldr	r2, [pc, #368]	; (80069fc <HAL_I2C_Master_Receive+0x228>)
 800688a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800688c:	8979      	ldrh	r1, [r7, #10]
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fb74 	bl	8006f80 <I2C_MasterRequestRead>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e1b8      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d113      	bne.n	80068d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068aa:	2300      	movs	r3, #0
 80068ac:	623b      	str	r3, [r7, #32]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	623b      	str	r3, [r7, #32]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	e18c      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d11b      	bne.n	8006912 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	61fb      	str	r3, [r7, #28]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e16c      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	2b02      	cmp	r3, #2
 8006918:	d11b      	bne.n	8006952 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006928:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800693a:	2300      	movs	r3, #0
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	61bb      	str	r3, [r7, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	e14c      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006978:	e138      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697e:	2b03      	cmp	r3, #3
 8006980:	f200 80f1 	bhi.w	8006b66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006988:	2b01      	cmp	r3, #1
 800698a:	d123      	bne.n	80069d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fd1b 	bl	80073cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e139      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069d2:	e10b      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d14e      	bne.n	8006a7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2200      	movs	r2, #0
 80069e4:	4906      	ldr	r1, [pc, #24]	; (8006a00 <HAL_I2C_Master_Receive+0x22c>)
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fb98 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e10e      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
 80069f6:	bf00      	nop
 80069f8:	00100002 	.word	0x00100002
 80069fc:	ffff0000 	.word	0xffff0000
 8006a00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a78:	e0b8      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2200      	movs	r2, #0
 8006a82:	4966      	ldr	r1, [pc, #408]	; (8006c1c <HAL_I2C_Master_Receive+0x448>)
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fb49 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0bf      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2200      	movs	r2, #0
 8006ade:	494f      	ldr	r1, [pc, #316]	; (8006c1c <HAL_I2C_Master_Receive+0x448>)
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fb1b 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e091      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b64:	e042      	b.n	8006bec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fc2e 	bl	80073cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e04c      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d118      	bne.n	8006bec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f47f aec2 	bne.w	800697a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e000      	b.n	8006c14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006c12:	2302      	movs	r3, #2
  }
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3728      	adds	r7, #40	; 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	00010004 	.word	0x00010004

08006c20 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006c30:	f7fd f8cc 	bl	8003dcc <HAL_GetTick>
 8006c34:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	f040 8111 	bne.w	8006e6a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	2319      	movs	r3, #25
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4988      	ldr	r1, [pc, #544]	; (8006e74 <HAL_I2C_IsDeviceReady+0x254>)
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fa62 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e104      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2C_IsDeviceReady+0x50>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e0fd      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d007      	beq.n	8006c96 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 0201 	orr.w	r2, r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2224      	movs	r2, #36	; 0x24
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a70      	ldr	r2, [pc, #448]	; (8006e78 <HAL_I2C_IsDeviceReady+0x258>)
 8006cb8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cc8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fa20 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00d      	beq.n	8006cfe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf0:	d103      	bne.n	8006cfa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e0b6      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cfe:	897b      	ldrh	r3, [r7, #10]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	461a      	mov	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006d0e:	f7fd f85d 	bl	8003dcc <HAL_GetTick>
 8006d12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	bf0c      	ite	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	2300      	movne	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d38:	bf0c      	ite	eq
 8006d3a:	2301      	moveq	r3, #1
 8006d3c:	2300      	movne	r3, #0
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006d42:	e025      	b.n	8006d90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d44:	f7fd f842 	bl	8003dcc <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d302      	bcc.n	8006d5a <HAL_I2C_IsDeviceReady+0x13a>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d103      	bne.n	8006d62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	22a0      	movs	r2, #160	; 0xa0
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d86:	bf0c      	ite	eq
 8006d88:	2301      	moveq	r3, #1
 8006d8a:	2300      	movne	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2ba0      	cmp	r3, #160	; 0xa0
 8006d9a:	d005      	beq.n	8006da8 <HAL_I2C_IsDeviceReady+0x188>
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <HAL_I2C_IsDeviceReady+0x188>
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0cd      	beq.n	8006d44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d129      	bne.n	8006e12 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dcc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2319      	movs	r3, #25
 8006dea:	2201      	movs	r2, #1
 8006dec:	4921      	ldr	r1, [pc, #132]	; (8006e74 <HAL_I2C_IsDeviceReady+0x254>)
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 f994 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e036      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e02c      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	9300      	str	r3, [sp, #0]
 8006e30:	2319      	movs	r3, #25
 8006e32:	2201      	movs	r2, #1
 8006e34:	490f      	ldr	r1, [pc, #60]	; (8006e74 <HAL_I2C_IsDeviceReady+0x254>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f970 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e012      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	f4ff af32 	bcc.w	8006cba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006e6a:	2302      	movs	r3, #2
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	00100002 	.word	0x00100002
 8006e78:	ffff0000 	.word	0xffff0000

08006e7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	607a      	str	r2, [r7, #4]
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d006      	beq.n	8006ea6 <I2C_MasterRequestWrite+0x2a>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d003      	beq.n	8006ea6 <I2C_MasterRequestWrite+0x2a>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ea4:	d108      	bne.n	8006eb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	e00b      	b.n	8006ed0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	2b12      	cmp	r3, #18
 8006ebe:	d107      	bne.n	8006ed0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ece:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 f91d 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef6:	d103      	bne.n	8006f00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e035      	b.n	8006f70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f0c:	d108      	bne.n	8006f20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f0e:	897b      	ldrh	r3, [r7, #10]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	461a      	mov	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f1c:	611a      	str	r2, [r3, #16]
 8006f1e:	e01b      	b.n	8006f58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f20:	897b      	ldrh	r3, [r7, #10]
 8006f22:	11db      	asrs	r3, r3, #7
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f003 0306 	and.w	r3, r3, #6
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	f063 030f 	orn	r3, r3, #15
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	490e      	ldr	r1, [pc, #56]	; (8006f78 <I2C_MasterRequestWrite+0xfc>)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f943 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e010      	b.n	8006f70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f4e:	897b      	ldrh	r3, [r7, #10]
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	4907      	ldr	r1, [pc, #28]	; (8006f7c <I2C_MasterRequestWrite+0x100>)
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f000 f933 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e000      	b.n	8006f70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3718      	adds	r7, #24
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	00010008 	.word	0x00010008
 8006f7c:	00010002 	.word	0x00010002

08006f80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b088      	sub	sp, #32
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fa4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b08      	cmp	r3, #8
 8006faa:	d006      	beq.n	8006fba <I2C_MasterRequestRead+0x3a>
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d003      	beq.n	8006fba <I2C_MasterRequestRead+0x3a>
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fb8:	d108      	bne.n	8006fcc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e00b      	b.n	8006fe4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	2b11      	cmp	r3, #17
 8006fd2:	d107      	bne.n	8006fe4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	9300      	str	r3, [sp, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f893 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00d      	beq.n	8007018 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700a:	d103      	bne.n	8007014 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e079      	b.n	800710c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007020:	d108      	bne.n	8007034 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	b2da      	uxtb	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	611a      	str	r2, [r3, #16]
 8007032:	e05f      	b.n	80070f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007034:	897b      	ldrh	r3, [r7, #10]
 8007036:	11db      	asrs	r3, r3, #7
 8007038:	b2db      	uxtb	r3, r3
 800703a:	f003 0306 	and.w	r3, r3, #6
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f063 030f 	orn	r3, r3, #15
 8007044:	b2da      	uxtb	r2, r3
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	4930      	ldr	r1, [pc, #192]	; (8007114 <I2C_MasterRequestRead+0x194>)
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f8b9 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e054      	b.n	800710c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007062:	897b      	ldrh	r3, [r7, #10]
 8007064:	b2da      	uxtb	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4929      	ldr	r1, [pc, #164]	; (8007118 <I2C_MasterRequestRead+0x198>)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 f8a9 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e044      	b.n	800710c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f831 	bl	800711c <I2C_WaitOnFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ce:	d103      	bne.n	80070d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e017      	b.n	800710c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070dc:	897b      	ldrh	r3, [r7, #10]
 80070de:	11db      	asrs	r3, r3, #7
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	f003 0306 	and.w	r3, r3, #6
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	f063 030e 	orn	r3, r3, #14
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	4907      	ldr	r1, [pc, #28]	; (8007118 <I2C_MasterRequestRead+0x198>)
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f865 	bl	80071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	00010008 	.word	0x00010008
 8007118:	00010002 	.word	0x00010002

0800711c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800712c:	e025      	b.n	800717a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007134:	d021      	beq.n	800717a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007136:	f7fc fe49 	bl	8003dcc <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d302      	bcc.n	800714c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d116      	bne.n	800717a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f043 0220 	orr.w	r2, r3, #32
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e023      	b.n	80071c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	0c1b      	lsrs	r3, r3, #16
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10d      	bne.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	43da      	mvns	r2, r3
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	4013      	ands	r3, r2
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf0c      	ite	eq
 8007196:	2301      	moveq	r3, #1
 8007198:	2300      	movne	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	e00c      	b.n	80071ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	43da      	mvns	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4013      	ands	r3, r2
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bf0c      	ite	eq
 80071b2:	2301      	moveq	r3, #1
 80071b4:	2300      	movne	r3, #0
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	461a      	mov	r2, r3
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d0b6      	beq.n	800712e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071d8:	e051      	b.n	800727e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e8:	d123      	bne.n	8007232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007202:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f043 0204 	orr.w	r2, r3, #4
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e046      	b.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007238:	d021      	beq.n	800727e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723a:	f7fc fdc7 	bl	8003dcc <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	429a      	cmp	r2, r3
 8007248:	d302      	bcc.n	8007250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d116      	bne.n	800727e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f043 0220 	orr.w	r2, r3, #32
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e020      	b.n	80072c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b01      	cmp	r3, #1
 8007286:	d10c      	bne.n	80072a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	43da      	mvns	r2, r3
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4013      	ands	r3, r2
 8007294:	b29b      	uxth	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	bf14      	ite	ne
 800729a:	2301      	movne	r3, #1
 800729c:	2300      	moveq	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	e00b      	b.n	80072ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	43da      	mvns	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	4013      	ands	r3, r2
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d18d      	bne.n	80071da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072d4:	e02d      	b.n	8007332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f8ce 	bl	8007478 <I2C_IsAcknowledgeFailed>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e02d      	b.n	8007342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ec:	d021      	beq.n	8007332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ee:	f7fc fd6d 	bl	8003dcc <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d116      	bne.n	8007332 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e007      	b.n	8007342 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d1ca      	bne.n	80072d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b084      	sub	sp, #16
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007356:	e02d      	b.n	80073b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f88d 	bl	8007478 <I2C_IsAcknowledgeFailed>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e02d      	b.n	80073c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800736e:	d021      	beq.n	80073b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007370:	f7fc fd2c 	bl	8003dcc <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d302      	bcc.n	8007386 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d116      	bne.n	80073b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	f043 0220 	orr.w	r2, r3, #32
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e007      	b.n	80073c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b04      	cmp	r3, #4
 80073c0:	d1ca      	bne.n	8007358 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80073d8:	e042      	b.n	8007460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d119      	bne.n	800741c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0210 	mvn.w	r2, #16
 80073f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2220      	movs	r2, #32
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e029      	b.n	8007470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741c:	f7fc fcd6 	bl	8003dcc <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	429a      	cmp	r2, r3
 800742a:	d302      	bcc.n	8007432 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d116      	bne.n	8007460 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	f043 0220 	orr.w	r2, r3, #32
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e007      	b.n	8007470 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b40      	cmp	r3, #64	; 0x40
 800746c:	d1b5      	bne.n	80073da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748e:	d11b      	bne.n	80074c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007498:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f043 0204 	orr.w	r2, r3, #4
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d129      	bne.n	8007540 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2224      	movs	r2, #36	; 0x24
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0201 	bic.w	r2, r2, #1
 8007502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0210 	bic.w	r2, r2, #16
 8007512:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007558:	2300      	movs	r3, #0
 800755a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b20      	cmp	r3, #32
 8007566:	d12a      	bne.n	80075be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2224      	movs	r2, #36	; 0x24
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 0201 	bic.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	f023 030f 	bic.w	r3, r3, #15
 800758e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	b29a      	uxth	r2, r3
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	4313      	orrs	r3, r2
 8007598:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	89fa      	ldrh	r2, [r7, #14]
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2220      	movs	r2, #32
 80075b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80075be:	2302      	movs	r3, #2
  }
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e267      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d075      	beq.n	80076d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075ea:	4b88      	ldr	r3, [pc, #544]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 030c 	and.w	r3, r3, #12
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d00c      	beq.n	8007610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075f6:	4b85      	ldr	r3, [pc, #532]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d112      	bne.n	8007628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007602:	4b82      	ldr	r3, [pc, #520]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800760a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800760e:	d10b      	bne.n	8007628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007610:	4b7e      	ldr	r3, [pc, #504]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d05b      	beq.n	80076d4 <HAL_RCC_OscConfig+0x108>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d157      	bne.n	80076d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e242      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007630:	d106      	bne.n	8007640 <HAL_RCC_OscConfig+0x74>
 8007632:	4b76      	ldr	r3, [pc, #472]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a75      	ldr	r2, [pc, #468]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e01d      	b.n	800767c <HAL_RCC_OscConfig+0xb0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x98>
 800764a:	4b70      	ldr	r3, [pc, #448]	; (800780c <HAL_RCC_OscConfig+0x240>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a6f      	ldr	r2, [pc, #444]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	4b6d      	ldr	r3, [pc, #436]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a6c      	ldr	r2, [pc, #432]	; (800780c <HAL_RCC_OscConfig+0x240>)
 800765c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e00b      	b.n	800767c <HAL_RCC_OscConfig+0xb0>
 8007664:	4b69      	ldr	r3, [pc, #420]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a68      	ldr	r2, [pc, #416]	; (800780c <HAL_RCC_OscConfig+0x240>)
 800766a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	4b66      	ldr	r3, [pc, #408]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a65      	ldr	r2, [pc, #404]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800767a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007684:	f7fc fba2 	bl	8003dcc <HAL_GetTick>
 8007688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768a:	e008      	b.n	800769e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800768c:	f7fc fb9e 	bl	8003dcc <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b64      	cmp	r3, #100	; 0x64
 8007698:	d901      	bls.n	800769e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e207      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769e:	4b5b      	ldr	r3, [pc, #364]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <HAL_RCC_OscConfig+0xc0>
 80076aa:	e014      	b.n	80076d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ac:	f7fc fb8e 	bl	8003dcc <HAL_GetTick>
 80076b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076b2:	e008      	b.n	80076c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076b4:	f7fc fb8a 	bl	8003dcc <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b64      	cmp	r3, #100	; 0x64
 80076c0:	d901      	bls.n	80076c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e1f3      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076c6:	4b51      	ldr	r3, [pc, #324]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1f0      	bne.n	80076b4 <HAL_RCC_OscConfig+0xe8>
 80076d2:	e000      	b.n	80076d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d063      	beq.n	80077aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076e2:	4b4a      	ldr	r3, [pc, #296]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00b      	beq.n	8007706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ee:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d11c      	bne.n	8007734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076fa:	4b44      	ldr	r3, [pc, #272]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d116      	bne.n	8007734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007706:	4b41      	ldr	r3, [pc, #260]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <HAL_RCC_OscConfig+0x152>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d001      	beq.n	800771e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e1c7      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771e:	4b3b      	ldr	r3, [pc, #236]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4937      	ldr	r1, [pc, #220]	; (800780c <HAL_RCC_OscConfig+0x240>)
 800772e:	4313      	orrs	r3, r2
 8007730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007732:	e03a      	b.n	80077aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d020      	beq.n	800777e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800773c:	4b34      	ldr	r3, [pc, #208]	; (8007810 <HAL_RCC_OscConfig+0x244>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007742:	f7fc fb43 	bl	8003dcc <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800774a:	f7fc fb3f 	bl	8003dcc <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e1a8      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800775c:	4b2b      	ldr	r3, [pc, #172]	; (800780c <HAL_RCC_OscConfig+0x240>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007768:	4b28      	ldr	r3, [pc, #160]	; (800780c <HAL_RCC_OscConfig+0x240>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4925      	ldr	r1, [pc, #148]	; (800780c <HAL_RCC_OscConfig+0x240>)
 8007778:	4313      	orrs	r3, r2
 800777a:	600b      	str	r3, [r1, #0]
 800777c:	e015      	b.n	80077aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800777e:	4b24      	ldr	r3, [pc, #144]	; (8007810 <HAL_RCC_OscConfig+0x244>)
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007784:	f7fc fb22 	bl	8003dcc <HAL_GetTick>
 8007788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800778a:	e008      	b.n	800779e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800778c:	f7fc fb1e 	bl	8003dcc <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	2b02      	cmp	r3, #2
 8007798:	d901      	bls.n	800779e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e187      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800779e:	4b1b      	ldr	r3, [pc, #108]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1f0      	bne.n	800778c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d036      	beq.n	8007824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d016      	beq.n	80077ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077be:	4b15      	ldr	r3, [pc, #84]	; (8007814 <HAL_RCC_OscConfig+0x248>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c4:	f7fc fb02 	bl	8003dcc <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077cc:	f7fc fafe 	bl	8003dcc <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e167      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077de:	4b0b      	ldr	r3, [pc, #44]	; (800780c <HAL_RCC_OscConfig+0x240>)
 80077e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0f0      	beq.n	80077cc <HAL_RCC_OscConfig+0x200>
 80077ea:	e01b      	b.n	8007824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ec:	4b09      	ldr	r3, [pc, #36]	; (8007814 <HAL_RCC_OscConfig+0x248>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077f2:	f7fc faeb 	bl	8003dcc <HAL_GetTick>
 80077f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f8:	e00e      	b.n	8007818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077fa:	f7fc fae7 	bl	8003dcc <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d907      	bls.n	8007818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e150      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
 800780c:	40023800 	.word	0x40023800
 8007810:	42470000 	.word	0x42470000
 8007814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007818:	4b88      	ldr	r3, [pc, #544]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 800781a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ea      	bne.n	80077fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8097 	beq.w	8007960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007836:	4b81      	ldr	r3, [pc, #516]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10f      	bne.n	8007862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007842:	2300      	movs	r3, #0
 8007844:	60bb      	str	r3, [r7, #8]
 8007846:	4b7d      	ldr	r3, [pc, #500]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 800784c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007850:	6413      	str	r3, [r2, #64]	; 0x40
 8007852:	4b7a      	ldr	r3, [pc, #488]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800785a:	60bb      	str	r3, [r7, #8]
 800785c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007862:	4b77      	ldr	r3, [pc, #476]	; (8007a40 <HAL_RCC_OscConfig+0x474>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786a:	2b00      	cmp	r3, #0
 800786c:	d118      	bne.n	80078a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800786e:	4b74      	ldr	r3, [pc, #464]	; (8007a40 <HAL_RCC_OscConfig+0x474>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a73      	ldr	r2, [pc, #460]	; (8007a40 <HAL_RCC_OscConfig+0x474>)
 8007874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800787a:	f7fc faa7 	bl	8003dcc <HAL_GetTick>
 800787e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007882:	f7fc faa3 	bl	8003dcc <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e10c      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007894:	4b6a      	ldr	r3, [pc, #424]	; (8007a40 <HAL_RCC_OscConfig+0x474>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0f0      	beq.n	8007882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d106      	bne.n	80078b6 <HAL_RCC_OscConfig+0x2ea>
 80078a8:	4b64      	ldr	r3, [pc, #400]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	4a63      	ldr	r2, [pc, #396]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078ae:	f043 0301 	orr.w	r3, r3, #1
 80078b2:	6713      	str	r3, [r2, #112]	; 0x70
 80078b4:	e01c      	b.n	80078f0 <HAL_RCC_OscConfig+0x324>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x30c>
 80078be:	4b5f      	ldr	r3, [pc, #380]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c2:	4a5e      	ldr	r2, [pc, #376]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078c4:	f043 0304 	orr.w	r3, r3, #4
 80078c8:	6713      	str	r3, [r2, #112]	; 0x70
 80078ca:	4b5c      	ldr	r3, [pc, #368]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	4a5b      	ldr	r2, [pc, #364]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078d0:	f043 0301 	orr.w	r3, r3, #1
 80078d4:	6713      	str	r3, [r2, #112]	; 0x70
 80078d6:	e00b      	b.n	80078f0 <HAL_RCC_OscConfig+0x324>
 80078d8:	4b58      	ldr	r3, [pc, #352]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078dc:	4a57      	ldr	r2, [pc, #348]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078de:	f023 0301 	bic.w	r3, r3, #1
 80078e2:	6713      	str	r3, [r2, #112]	; 0x70
 80078e4:	4b55      	ldr	r3, [pc, #340]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e8:	4a54      	ldr	r2, [pc, #336]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80078ea:	f023 0304 	bic.w	r3, r3, #4
 80078ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d015      	beq.n	8007924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f8:	f7fc fa68 	bl	8003dcc <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078fe:	e00a      	b.n	8007916 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007900:	f7fc fa64 	bl	8003dcc <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f241 3288 	movw	r2, #5000	; 0x1388
 800790e:	4293      	cmp	r3, r2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e0cb      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007916:	4b49      	ldr	r3, [pc, #292]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ee      	beq.n	8007900 <HAL_RCC_OscConfig+0x334>
 8007922:	e014      	b.n	800794e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007924:	f7fc fa52 	bl	8003dcc <HAL_GetTick>
 8007928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800792a:	e00a      	b.n	8007942 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800792c:	f7fc fa4e 	bl	8003dcc <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	f241 3288 	movw	r2, #5000	; 0x1388
 800793a:	4293      	cmp	r3, r2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e0b5      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007942:	4b3e      	ldr	r3, [pc, #248]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1ee      	bne.n	800792c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d105      	bne.n	8007960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007954:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007958:	4a38      	ldr	r2, [pc, #224]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 800795a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80a1 	beq.w	8007aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800796a:	4b34      	ldr	r3, [pc, #208]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f003 030c 	and.w	r3, r3, #12
 8007972:	2b08      	cmp	r3, #8
 8007974:	d05c      	beq.n	8007a30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d141      	bne.n	8007a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <HAL_RCC_OscConfig+0x478>)
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007984:	f7fc fa22 	bl	8003dcc <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800798a:	e008      	b.n	800799e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800798c:	f7fc fa1e 	bl	8003dcc <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d901      	bls.n	800799e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e087      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800799e:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f0      	bne.n	800798c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69da      	ldr	r2, [r3, #28]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	019b      	lsls	r3, r3, #6
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	3b01      	subs	r3, #1
 80079c4:	041b      	lsls	r3, r3, #16
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	061b      	lsls	r3, r3, #24
 80079ce:	491b      	ldr	r1, [pc, #108]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079d4:	4b1b      	ldr	r3, [pc, #108]	; (8007a44 <HAL_RCC_OscConfig+0x478>)
 80079d6:	2201      	movs	r2, #1
 80079d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079da:	f7fc f9f7 	bl	8003dcc <HAL_GetTick>
 80079de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079e0:	e008      	b.n	80079f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e2:	f7fc f9f3 	bl	8003dcc <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e05c      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f4:	4b11      	ldr	r3, [pc, #68]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0f0      	beq.n	80079e2 <HAL_RCC_OscConfig+0x416>
 8007a00:	e054      	b.n	8007aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <HAL_RCC_OscConfig+0x478>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a08:	f7fc f9e0 	bl	8003dcc <HAL_GetTick>
 8007a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a0e:	e008      	b.n	8007a22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a10:	f7fc f9dc 	bl	8003dcc <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d901      	bls.n	8007a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e045      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <HAL_RCC_OscConfig+0x470>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f0      	bne.n	8007a10 <HAL_RCC_OscConfig+0x444>
 8007a2e:	e03d      	b.n	8007aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d107      	bne.n	8007a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e038      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	40007000 	.word	0x40007000
 8007a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a48:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <HAL_RCC_OscConfig+0x4ec>)
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d028      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d121      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d11a      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a78:	4013      	ands	r3, r2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d111      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	3b01      	subs	r3, #1
 8007a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d107      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d001      	beq.n	8007aac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e000      	b.n	8007aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40023800 	.word	0x40023800

08007abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e0cc      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad0:	4b68      	ldr	r3, [pc, #416]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	683a      	ldr	r2, [r7, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d90c      	bls.n	8007af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ade:	4b65      	ldr	r3, [pc, #404]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae6:	4b63      	ldr	r3, [pc, #396]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 030f 	and.w	r3, r3, #15
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d001      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e0b8      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d020      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b10:	4b59      	ldr	r3, [pc, #356]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	4a58      	ldr	r2, [pc, #352]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0308 	and.w	r3, r3, #8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b28:	4b53      	ldr	r3, [pc, #332]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4a52      	ldr	r2, [pc, #328]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b34:	4b50      	ldr	r3, [pc, #320]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	494d      	ldr	r1, [pc, #308]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d044      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d107      	bne.n	8007b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5a:	4b47      	ldr	r3, [pc, #284]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d119      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e07f      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d003      	beq.n	8007b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d107      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b7a:	4b3f      	ldr	r3, [pc, #252]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e06f      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b8a:	4b3b      	ldr	r3, [pc, #236]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e067      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b9a:	4b37      	ldr	r3, [pc, #220]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f023 0203 	bic.w	r2, r3, #3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	4934      	ldr	r1, [pc, #208]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bac:	f7fc f90e 	bl	8003dcc <HAL_GetTick>
 8007bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb2:	e00a      	b.n	8007bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb4:	f7fc f90a 	bl	8003dcc <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d901      	bls.n	8007bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e04f      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bca:	4b2b      	ldr	r3, [pc, #172]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 020c 	and.w	r2, r3, #12
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d1eb      	bne.n	8007bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bdc:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	683a      	ldr	r2, [r7, #0]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d20c      	bcs.n	8007c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bea:	4b22      	ldr	r3, [pc, #136]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bf2:	4b20      	ldr	r3, [pc, #128]	; (8007c74 <HAL_RCC_ClockConfig+0x1b8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 030f 	and.w	r3, r3, #15
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d001      	beq.n	8007c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e032      	b.n	8007c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d008      	beq.n	8007c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c10:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	4916      	ldr	r1, [pc, #88]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d009      	beq.n	8007c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c2e:	4b12      	ldr	r3, [pc, #72]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	490e      	ldr	r1, [pc, #56]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c42:	f000 f821 	bl	8007c88 <HAL_RCC_GetSysClockFreq>
 8007c46:	4602      	mov	r2, r0
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	091b      	lsrs	r3, r3, #4
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	490a      	ldr	r1, [pc, #40]	; (8007c7c <HAL_RCC_ClockConfig+0x1c0>)
 8007c54:	5ccb      	ldrb	r3, [r1, r3]
 8007c56:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5a:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <HAL_RCC_ClockConfig+0x1c8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc f86e 	bl	8003d44 <HAL_InitTick>

  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	40023c00 	.word	0x40023c00
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	08013b98 	.word	0x08013b98
 8007c80:	200000e8 	.word	0x200000e8
 8007c84:	200000f0 	.word	0x200000f0

08007c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c8c:	b094      	sub	sp, #80	; 0x50
 8007c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	647b      	str	r3, [r7, #68]	; 0x44
 8007c94:	2300      	movs	r3, #0
 8007c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c98:	2300      	movs	r3, #0
 8007c9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ca0:	4b79      	ldr	r3, [pc, #484]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d00d      	beq.n	8007cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	f200 80e1 	bhi.w	8007e74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_RCC_GetSysClockFreq+0x34>
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d003      	beq.n	8007cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007cba:	e0db      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cbc:	4b73      	ldr	r3, [pc, #460]	; (8007e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8007cbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007cc0:	e0db      	b.n	8007e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cc2:	4b73      	ldr	r3, [pc, #460]	; (8007e90 <HAL_RCC_GetSysClockFreq+0x208>)
 8007cc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007cc6:	e0d8      	b.n	8007e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cc8:	4b6f      	ldr	r3, [pc, #444]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cd2:	4b6d      	ldr	r3, [pc, #436]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d063      	beq.n	8007da6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cde:	4b6a      	ldr	r3, [pc, #424]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	099b      	lsrs	r3, r3, #6
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007cfa:	4622      	mov	r2, r4
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	f04f 0000 	mov.w	r0, #0
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	0159      	lsls	r1, r3, #5
 8007d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d0c:	0150      	lsls	r0, r2, #5
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4621      	mov	r1, r4
 8007d14:	1a51      	subs	r1, r2, r1
 8007d16:	6139      	str	r1, [r7, #16]
 8007d18:	4629      	mov	r1, r5
 8007d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8007d1e:	617b      	str	r3, [r7, #20]
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	018b      	lsls	r3, r1, #6
 8007d30:	4651      	mov	r1, sl
 8007d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d36:	4651      	mov	r1, sl
 8007d38:	018a      	lsls	r2, r1, #6
 8007d3a:	4651      	mov	r1, sl
 8007d3c:	ebb2 0801 	subs.w	r8, r2, r1
 8007d40:	4659      	mov	r1, fp
 8007d42:	eb63 0901 	sbc.w	r9, r3, r1
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d5a:	4690      	mov	r8, r2
 8007d5c:	4699      	mov	r9, r3
 8007d5e:	4623      	mov	r3, r4
 8007d60:	eb18 0303 	adds.w	r3, r8, r3
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	462b      	mov	r3, r5
 8007d68:	eb49 0303 	adc.w	r3, r9, r3
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	f04f 0200 	mov.w	r2, #0
 8007d72:	f04f 0300 	mov.w	r3, #0
 8007d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	024b      	lsls	r3, r1, #9
 8007d7e:	4621      	mov	r1, r4
 8007d80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d84:	4621      	mov	r1, r4
 8007d86:	024a      	lsls	r2, r1, #9
 8007d88:	4610      	mov	r0, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d8e:	2200      	movs	r2, #0
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d98:	f7f8 fa82 	bl	80002a0 <__aeabi_uldivmod>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4613      	mov	r3, r2
 8007da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da4:	e058      	b.n	8007e58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007da6:	4b38      	ldr	r3, [pc, #224]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	099b      	lsrs	r3, r3, #6
 8007dac:	2200      	movs	r2, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	4611      	mov	r1, r2
 8007db2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007db6:	623b      	str	r3, [r7, #32]
 8007db8:	2300      	movs	r3, #0
 8007dba:	627b      	str	r3, [r7, #36]	; 0x24
 8007dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	f04f 0000 	mov.w	r0, #0
 8007dc8:	f04f 0100 	mov.w	r1, #0
 8007dcc:	0159      	lsls	r1, r3, #5
 8007dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dd2:	0150      	lsls	r0, r2, #5
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4641      	mov	r1, r8
 8007dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8007dde:	4649      	mov	r1, r9
 8007de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007df8:	ebb2 040a 	subs.w	r4, r2, sl
 8007dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8007e00:	f04f 0200 	mov.w	r2, #0
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	00eb      	lsls	r3, r5, #3
 8007e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e0e:	00e2      	lsls	r2, r4, #3
 8007e10:	4614      	mov	r4, r2
 8007e12:	461d      	mov	r5, r3
 8007e14:	4643      	mov	r3, r8
 8007e16:	18e3      	adds	r3, r4, r3
 8007e18:	603b      	str	r3, [r7, #0]
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	eb45 0303 	adc.w	r3, r5, r3
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e2e:	4629      	mov	r1, r5
 8007e30:	028b      	lsls	r3, r1, #10
 8007e32:	4621      	mov	r1, r4
 8007e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e38:	4621      	mov	r1, r4
 8007e3a:	028a      	lsls	r2, r1, #10
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e42:	2200      	movs	r2, #0
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	61fa      	str	r2, [r7, #28]
 8007e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e4c:	f7f8 fa28 	bl	80002a0 <__aeabi_uldivmod>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4613      	mov	r3, r2
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	0c1b      	lsrs	r3, r3, #16
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	3301      	adds	r3, #1
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007e68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e72:	e002      	b.n	8007e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8007e76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3750      	adds	r7, #80	; 0x50
 8007e80:	46bd      	mov	sp, r7
 8007e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e86:	bf00      	nop
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	00f42400 	.word	0x00f42400
 8007e90:	007a1200 	.word	0x007a1200

08007e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	200000e8 	.word	0x200000e8

08007eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007eb0:	f7ff fff0 	bl	8007e94 <HAL_RCC_GetHCLKFreq>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	0a9b      	lsrs	r3, r3, #10
 8007ebc:	f003 0307 	and.w	r3, r3, #7
 8007ec0:	4903      	ldr	r1, [pc, #12]	; (8007ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ec2:	5ccb      	ldrb	r3, [r1, r3]
 8007ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	08013ba8 	.word	0x08013ba8

08007ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ed8:	f7ff ffdc 	bl	8007e94 <HAL_RCC_GetHCLKFreq>
 8007edc:	4602      	mov	r2, r0
 8007ede:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	0b5b      	lsrs	r3, r3, #13
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	4903      	ldr	r1, [pc, #12]	; (8007ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eea:	5ccb      	ldrb	r3, [r1, r3]
 8007eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	08013ba8 	.word	0x08013ba8

08007efc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e025      	b.n	8007f5c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d106      	bne.n	8007f2a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7fb fd0b 	bl	8003940 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f002 fc6b 	bl	800a818 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	f002 fcc0 	bl	800a8d2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e07b      	b.n	800806e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f86:	d009      	beq.n	8007f9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	61da      	str	r2, [r3, #28]
 8007f8e:	e005      	b.n	8007f9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fb faf8 	bl	80035ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800800c:	431a      	orrs	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008020:	ea42 0103 	orr.w	r1, r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	430a      	orrs	r2, r1
 8008032:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	0c1b      	lsrs	r3, r3, #16
 800803a:	f003 0104 	and.w	r1, r3, #4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	f003 0210 	and.w	r2, r3, #16
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69da      	ldr	r2, [r3, #28]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800805c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b088      	sub	sp, #32
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	4613      	mov	r3, r2
 8008084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_SPI_Transmit+0x22>
 8008094:	2302      	movs	r3, #2
 8008096:	e126      	b.n	80082e6 <HAL_SPI_Transmit+0x270>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080a0:	f7fb fe94 	bl	8003dcc <HAL_GetTick>
 80080a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80080a6:	88fb      	ldrh	r3, [r7, #6]
 80080a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d002      	beq.n	80080bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80080b6:	2302      	movs	r3, #2
 80080b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080ba:	e10b      	b.n	80082d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_SPI_Transmit+0x52>
 80080c2:	88fb      	ldrh	r3, [r7, #6]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80080cc:	e102      	b.n	80082d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2203      	movs	r2, #3
 80080d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	88fa      	ldrh	r2, [r7, #6]
 80080ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008114:	d10f      	bne.n	8008136 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008124:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008134:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008140:	2b40      	cmp	r3, #64	; 0x40
 8008142:	d007      	beq.n	8008154 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008152:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800815c:	d14b      	bne.n	80081f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <HAL_SPI_Transmit+0xf6>
 8008166:	8afb      	ldrh	r3, [r7, #22]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d13e      	bne.n	80081ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	881a      	ldrh	r2, [r3, #0]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817c:	1c9a      	adds	r2, r3, #2
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008186:	b29b      	uxth	r3, r3
 8008188:	3b01      	subs	r3, #1
 800818a:	b29a      	uxth	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008190:	e02b      	b.n	80081ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b02      	cmp	r3, #2
 800819e:	d112      	bne.n	80081c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a4:	881a      	ldrh	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b0:	1c9a      	adds	r2, r3, #2
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80081c4:	e011      	b.n	80081ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c6:	f7fb fe01 	bl	8003dcc <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d803      	bhi.n	80081de <HAL_SPI_Transmit+0x168>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081dc:	d102      	bne.n	80081e4 <HAL_SPI_Transmit+0x16e>
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081e8:	e074      	b.n	80082d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1ce      	bne.n	8008192 <HAL_SPI_Transmit+0x11c>
 80081f4:	e04c      	b.n	8008290 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_SPI_Transmit+0x18e>
 80081fe:	8afb      	ldrh	r3, [r7, #22]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d140      	bne.n	8008286 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	330c      	adds	r3, #12
 800820e:	7812      	ldrb	r2, [r2, #0]
 8008210:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b01      	subs	r3, #1
 8008224:	b29a      	uxth	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800822a:	e02c      	b.n	8008286 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b02      	cmp	r3, #2
 8008238:	d113      	bne.n	8008262 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	330c      	adds	r3, #12
 8008244:	7812      	ldrb	r2, [r2, #0]
 8008246:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824c:	1c5a      	adds	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008260:	e011      	b.n	8008286 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008262:	f7fb fdb3 	bl	8003dcc <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	429a      	cmp	r2, r3
 8008270:	d803      	bhi.n	800827a <HAL_SPI_Transmit+0x204>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008278:	d102      	bne.n	8008280 <HAL_SPI_Transmit+0x20a>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008284:	e026      	b.n	80082d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800828a:	b29b      	uxth	r3, r3
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1cd      	bne.n	800822c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 fbcb 	bl	8008a30 <SPI_EndRxTxTransaction>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082ae:	2300      	movs	r3, #0
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	613b      	str	r3, [r7, #16]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	613b      	str	r3, [r7, #16]
 80082c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e000      	b.n	80082d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80082d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3720      	adds	r7, #32
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b088      	sub	sp, #32
 80082f2:	af02      	add	r7, sp, #8
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	60b9      	str	r1, [r7, #8]
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	4613      	mov	r3, r2
 80082fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800830a:	d112      	bne.n	8008332 <HAL_SPI_Receive+0x44>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10e      	bne.n	8008332 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2204      	movs	r2, #4
 8008318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800831c:	88fa      	ldrh	r2, [r7, #6]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	4613      	mov	r3, r2
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	68b9      	ldr	r1, [r7, #8]
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f8f1 	bl	8008510 <HAL_SPI_TransmitReceive>
 800832e:	4603      	mov	r3, r0
 8008330:	e0ea      	b.n	8008508 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_SPI_Receive+0x52>
 800833c:	2302      	movs	r3, #2
 800833e:	e0e3      	b.n	8008508 <HAL_SPI_Receive+0x21a>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008348:	f7fb fd40 	bl	8003dcc <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d002      	beq.n	8008360 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800835a:	2302      	movs	r3, #2
 800835c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800835e:	e0ca      	b.n	80084f6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <HAL_SPI_Receive+0x7e>
 8008366:	88fb      	ldrh	r3, [r7, #6]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008370:	e0c1      	b.n	80084f6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2204      	movs	r2, #4
 8008376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	88fa      	ldrh	r2, [r7, #6]
 800838a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	88fa      	ldrh	r2, [r7, #6]
 8008390:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2200      	movs	r2, #0
 8008396:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2200      	movs	r2, #0
 80083ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b8:	d10f      	bne.n	80083da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b40      	cmp	r3, #64	; 0x40
 80083e6:	d007      	beq.n	80083f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d162      	bne.n	80084c6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008400:	e02e      	b.n	8008460 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b01      	cmp	r3, #1
 800840e:	d115      	bne.n	800843c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f103 020c 	add.w	r2, r3, #12
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	b2d2      	uxtb	r2, r2
 8008420:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008430:	b29b      	uxth	r3, r3
 8008432:	3b01      	subs	r3, #1
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	87da      	strh	r2, [r3, #62]	; 0x3e
 800843a:	e011      	b.n	8008460 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800843c:	f7fb fcc6 	bl	8003dcc <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d803      	bhi.n	8008454 <HAL_SPI_Receive+0x166>
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008452:	d102      	bne.n	800845a <HAL_SPI_Receive+0x16c>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800845e:	e04a      	b.n	80084f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1cb      	bne.n	8008402 <HAL_SPI_Receive+0x114>
 800846a:	e031      	b.n	80084d0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b01      	cmp	r3, #1
 8008478:	d113      	bne.n	80084a2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008484:	b292      	uxth	r2, r2
 8008486:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	1c9a      	adds	r2, r3, #2
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008496:	b29b      	uxth	r3, r3
 8008498:	3b01      	subs	r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084a0:	e011      	b.n	80084c6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084a2:	f7fb fc93 	bl	8003dcc <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d803      	bhi.n	80084ba <HAL_SPI_Receive+0x1cc>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b8:	d102      	bne.n	80084c0 <HAL_SPI_Receive+0x1d2>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084c4:	e017      	b.n	80084f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1cd      	bne.n	800846c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 fa45 	bl	8008964 <SPI_EndRxTransaction>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	75fb      	strb	r3, [r7, #23]
 80084f2:	e000      	b.n	80084f6 <HAL_SPI_Receive+0x208>
  }

error :
 80084f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008506:	7dfb      	ldrb	r3, [r7, #23]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08c      	sub	sp, #48	; 0x30
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800851e:	2301      	movs	r3, #1
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x26>
 8008532:	2302      	movs	r3, #2
 8008534:	e18a      	b.n	800884c <HAL_SPI_TransmitReceive+0x33c>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800853e:	f7fb fc45 	bl	8003dcc <HAL_GetTick>
 8008542:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800854a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008554:	887b      	ldrh	r3, [r7, #2]
 8008556:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008558:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800855c:	2b01      	cmp	r3, #1
 800855e:	d00f      	beq.n	8008580 <HAL_SPI_TransmitReceive+0x70>
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008566:	d107      	bne.n	8008578 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d103      	bne.n	8008578 <HAL_SPI_TransmitReceive+0x68>
 8008570:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008574:	2b04      	cmp	r3, #4
 8008576:	d003      	beq.n	8008580 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008578:	2302      	movs	r3, #2
 800857a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800857e:	e15b      	b.n	8008838 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d005      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x82>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <HAL_SPI_TransmitReceive+0x82>
 800858c:	887b      	ldrh	r3, [r7, #2]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d103      	bne.n	800859a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008598:	e14e      	b.n	8008838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d003      	beq.n	80085ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2205      	movs	r2, #5
 80085aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	887a      	ldrh	r2, [r7, #2]
 80085be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	887a      	ldrh	r2, [r7, #2]
 80085c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	887a      	ldrh	r2, [r7, #2]
 80085d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	887a      	ldrh	r2, [r7, #2]
 80085d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d007      	beq.n	8008602 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800860a:	d178      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <HAL_SPI_TransmitReceive+0x10a>
 8008614:	8b7b      	ldrh	r3, [r7, #26]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d166      	bne.n	80086e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	881a      	ldrh	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	1c9a      	adds	r2, r3, #2
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800863e:	e053      	b.n	80086e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 0302 	and.w	r3, r3, #2
 800864a:	2b02      	cmp	r3, #2
 800864c:	d11b      	bne.n	8008686 <HAL_SPI_TransmitReceive+0x176>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008652:	b29b      	uxth	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	d016      	beq.n	8008686 <HAL_SPI_TransmitReceive+0x176>
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	2b01      	cmp	r3, #1
 800865c:	d113      	bne.n	8008686 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	881a      	ldrh	r2, [r3, #0]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	1c9a      	adds	r2, r3, #2
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b01      	cmp	r3, #1
 8008692:	d119      	bne.n	80086c8 <HAL_SPI_TransmitReceive+0x1b8>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d014      	beq.n	80086c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68da      	ldr	r2, [r3, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	b292      	uxth	r2, r2
 80086aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	1c9a      	adds	r2, r3, #2
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086c4:	2301      	movs	r3, #1
 80086c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086c8:	f7fb fb80 	bl	8003dcc <HAL_GetTick>
 80086cc:	4602      	mov	r2, r0
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d807      	bhi.n	80086e8 <HAL_SPI_TransmitReceive+0x1d8>
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086de:	d003      	beq.n	80086e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086e6:	e0a7      	b.n	8008838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1a6      	bne.n	8008640 <HAL_SPI_TransmitReceive+0x130>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1a1      	bne.n	8008640 <HAL_SPI_TransmitReceive+0x130>
 80086fc:	e07c      	b.n	80087f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_SPI_TransmitReceive+0x1fc>
 8008706:	8b7b      	ldrh	r3, [r7, #26]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d16b      	bne.n	80087e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	330c      	adds	r3, #12
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008732:	e057      	b.n	80087e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b02      	cmp	r3, #2
 8008740:	d11c      	bne.n	800877c <HAL_SPI_TransmitReceive+0x26c>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008746:	b29b      	uxth	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	d017      	beq.n	800877c <HAL_SPI_TransmitReceive+0x26c>
 800874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874e:	2b01      	cmp	r3, #1
 8008750:	d114      	bne.n	800877c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	7812      	ldrb	r2, [r2, #0]
 800875e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876e:	b29b      	uxth	r3, r3
 8008770:	3b01      	subs	r3, #1
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b01      	cmp	r3, #1
 8008788:	d119      	bne.n	80087be <HAL_SPI_TransmitReceive+0x2ae>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800878e:	b29b      	uxth	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d014      	beq.n	80087be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68da      	ldr	r2, [r3, #12]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	3b01      	subs	r3, #1
 80087b4:	b29a      	uxth	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087ba:	2301      	movs	r3, #1
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80087be:	f7fb fb05 	bl	8003dcc <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d803      	bhi.n	80087d6 <HAL_SPI_TransmitReceive+0x2c6>
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d4:	d102      	bne.n	80087dc <HAL_SPI_TransmitReceive+0x2cc>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d103      	bne.n	80087e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80087e2:	e029      	b.n	8008838 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1a2      	bne.n	8008734 <HAL_SPI_TransmitReceive+0x224>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d19d      	bne.n	8008734 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 f917 	bl	8008a30 <SPI_EndRxTxTransaction>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d006      	beq.n	8008816 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2220      	movs	r2, #32
 8008812:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008814:	e010      	b.n	8008838 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800881e:	2300      	movs	r3, #0
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	e000      	b.n	8008838 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008836:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800884c:	4618      	mov	r0, r3
 800884e:	3730      	adds	r7, #48	; 0x30
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b088      	sub	sp, #32
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	603b      	str	r3, [r7, #0]
 8008860:	4613      	mov	r3, r2
 8008862:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008864:	f7fb fab2 	bl	8003dcc <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	1a9b      	subs	r3, r3, r2
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	4413      	add	r3, r2
 8008872:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008874:	f7fb faaa 	bl	8003dcc <HAL_GetTick>
 8008878:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800887a:	4b39      	ldr	r3, [pc, #228]	; (8008960 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	015b      	lsls	r3, r3, #5
 8008880:	0d1b      	lsrs	r3, r3, #20
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	fb02 f303 	mul.w	r3, r2, r3
 8008888:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800888a:	e054      	b.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008892:	d050      	beq.n	8008936 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008894:	f7fb fa9a 	bl	8003dcc <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d902      	bls.n	80088aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d13d      	bne.n	8008926 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80088b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088c2:	d111      	bne.n	80088e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088cc:	d004      	beq.n	80088d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088d6:	d107      	bne.n	80088e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f0:	d10f      	bne.n	8008912 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008910:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e017      	b.n	8008956 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3b01      	subs	r3, #1
 8008934:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4013      	ands	r3, r2
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	429a      	cmp	r2, r3
 8008944:	bf0c      	ite	eq
 8008946:	2301      	moveq	r3, #1
 8008948:	2300      	movne	r3, #0
 800894a:	b2db      	uxtb	r3, r3
 800894c:	461a      	mov	r2, r3
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	429a      	cmp	r2, r3
 8008952:	d19b      	bne.n	800888c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	200000e8 	.word	0x200000e8

08008964 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b086      	sub	sp, #24
 8008968:	af02      	add	r7, sp, #8
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008978:	d111      	bne.n	800899e <SPI_EndRxTransaction+0x3a>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008982:	d004      	beq.n	800898e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800898c:	d107      	bne.n	800899e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089a6:	d12a      	bne.n	80089fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089b0:	d012      	beq.n	80089d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2200      	movs	r2, #0
 80089ba:	2180      	movs	r1, #128	; 0x80
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f7ff ff49 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d02d      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089cc:	f043 0220 	orr.w	r2, r3, #32
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e026      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	2101      	movs	r1, #1
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff ff36 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01a      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f2:	f043 0220 	orr.w	r2, r3, #32
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e013      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2101      	movs	r1, #1
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff ff23 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e000      	b.n	8008a26 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b088      	sub	sp, #32
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a3c:	4b1b      	ldr	r3, [pc, #108]	; (8008aac <SPI_EndRxTxTransaction+0x7c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a1b      	ldr	r2, [pc, #108]	; (8008ab0 <SPI_EndRxTxTransaction+0x80>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	0d5b      	lsrs	r3, r3, #21
 8008a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a4c:	fb02 f303 	mul.w	r3, r2, r3
 8008a50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a5a:	d112      	bne.n	8008a82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	2180      	movs	r1, #128	; 0x80
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fef4 	bl	8008854 <SPI_WaitFlagStateUntilTimeout>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d016      	beq.n	8008aa0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a76:	f043 0220 	orr.w	r2, r3, #32
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e00f      	b.n	8008aa2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00a      	beq.n	8008a9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a98:	2b80      	cmp	r3, #128	; 0x80
 8008a9a:	d0f2      	beq.n	8008a82 <SPI_EndRxTxTransaction+0x52>
 8008a9c:	e000      	b.n	8008aa0 <SPI_EndRxTxTransaction+0x70>
        break;
 8008a9e:	bf00      	nop
  }

  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3718      	adds	r7, #24
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200000e8 	.word	0x200000e8
 8008ab0:	165e9f81 	.word	0x165e9f81

08008ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e041      	b.n	8008b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fa fdae 	bl	800363c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4610      	mov	r0, r2
 8008af4:	f000 fa10 	bl	8008f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b082      	sub	sp, #8
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e041      	b.n	8008be8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d106      	bne.n	8008b7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f839 	bl	8008bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2202      	movs	r2, #2
 8008b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4610      	mov	r0, r2
 8008b92:	f000 f9c1 	bl	8008f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d101      	bne.n	8008c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e0ae      	b.n	8008d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b0c      	cmp	r3, #12
 8008c2e:	f200 809f 	bhi.w	8008d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008c32:	a201      	add	r2, pc, #4	; (adr r2, 8008c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c38:	08008c6d 	.word	0x08008c6d
 8008c3c:	08008d71 	.word	0x08008d71
 8008c40:	08008d71 	.word	0x08008d71
 8008c44:	08008d71 	.word	0x08008d71
 8008c48:	08008cad 	.word	0x08008cad
 8008c4c:	08008d71 	.word	0x08008d71
 8008c50:	08008d71 	.word	0x08008d71
 8008c54:	08008d71 	.word	0x08008d71
 8008c58:	08008cef 	.word	0x08008cef
 8008c5c:	08008d71 	.word	0x08008d71
 8008c60:	08008d71 	.word	0x08008d71
 8008c64:	08008d71 	.word	0x08008d71
 8008c68:	08008d2f 	.word	0x08008d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68b9      	ldr	r1, [r7, #8]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f9f0 	bl	8009058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0208 	orr.w	r2, r2, #8
 8008c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0204 	bic.w	r2, r2, #4
 8008c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6999      	ldr	r1, [r3, #24]
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	691a      	ldr	r2, [r3, #16]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	619a      	str	r2, [r3, #24]
      break;
 8008caa:	e064      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68b9      	ldr	r1, [r7, #8]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 fa40 	bl	8009138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699a      	ldr	r2, [r3, #24]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6999      	ldr	r1, [r3, #24]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	021a      	lsls	r2, r3, #8
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	619a      	str	r2, [r3, #24]
      break;
 8008cec:	e043      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 fa95 	bl	8009224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f042 0208 	orr.w	r2, r2, #8
 8008d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69da      	ldr	r2, [r3, #28]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0204 	bic.w	r2, r2, #4
 8008d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69d9      	ldr	r1, [r3, #28]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	61da      	str	r2, [r3, #28]
      break;
 8008d2c:	e023      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fae9 	bl	800930c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69da      	ldr	r2, [r3, #28]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69d9      	ldr	r1, [r3, #28]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	021a      	lsls	r2, r3, #8
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	61da      	str	r2, [r3, #28]
      break;
 8008d6e:	e002      	b.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	75fb      	strb	r3, [r7, #23]
      break;
 8008d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_TIM_ConfigClockSource+0x1c>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0b4      	b.n	8008f0e <HAL_TIM_ConfigClockSource+0x186>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ddc:	d03e      	beq.n	8008e5c <HAL_TIM_ConfigClockSource+0xd4>
 8008dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de2:	f200 8087 	bhi.w	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dea:	f000 8086 	beq.w	8008efa <HAL_TIM_ConfigClockSource+0x172>
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df2:	d87f      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008df4:	2b70      	cmp	r3, #112	; 0x70
 8008df6:	d01a      	beq.n	8008e2e <HAL_TIM_ConfigClockSource+0xa6>
 8008df8:	2b70      	cmp	r3, #112	; 0x70
 8008dfa:	d87b      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008dfc:	2b60      	cmp	r3, #96	; 0x60
 8008dfe:	d050      	beq.n	8008ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8008e00:	2b60      	cmp	r3, #96	; 0x60
 8008e02:	d877      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008e04:	2b50      	cmp	r3, #80	; 0x50
 8008e06:	d03c      	beq.n	8008e82 <HAL_TIM_ConfigClockSource+0xfa>
 8008e08:	2b50      	cmp	r3, #80	; 0x50
 8008e0a:	d873      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008e0c:	2b40      	cmp	r3, #64	; 0x40
 8008e0e:	d058      	beq.n	8008ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d86f      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008e14:	2b30      	cmp	r3, #48	; 0x30
 8008e16:	d064      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8008e18:	2b30      	cmp	r3, #48	; 0x30
 8008e1a:	d86b      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d060      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d867      	bhi.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d05c      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	d05a      	beq.n	8008ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8008e2c:	e062      	b.n	8008ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6818      	ldr	r0, [r3, #0]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	6899      	ldr	r1, [r3, #8]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f000 fb35 	bl	80094ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68ba      	ldr	r2, [r7, #8]
 8008e58:	609a      	str	r2, [r3, #8]
      break;
 8008e5a:	e04f      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	6899      	ldr	r1, [r3, #8]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	f000 fb1e 	bl	80094ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e7e:	609a      	str	r2, [r3, #8]
      break;
 8008e80:	e03c      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	6859      	ldr	r1, [r3, #4]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	f000 fa92 	bl	80093b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2150      	movs	r1, #80	; 0x50
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 faeb 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 8008ea0:	e02c      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6818      	ldr	r0, [r3, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6859      	ldr	r1, [r3, #4]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f000 fab1 	bl	8009416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2160      	movs	r1, #96	; 0x60
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 fadb 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 8008ec0:	e01c      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6818      	ldr	r0, [r3, #0]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6859      	ldr	r1, [r3, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f000 fa72 	bl	80093b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2140      	movs	r1, #64	; 0x40
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 facb 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 8008ee0:	e00c      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f000 fac2 	bl	8009476 <TIM_ITRx_SetConfig>
      break;
 8008ef2:	e003      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef8:	e000      	b.n	8008efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a40      	ldr	r2, [pc, #256]	; (800902c <TIM_Base_SetConfig+0x114>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d013      	beq.n	8008f58 <TIM_Base_SetConfig+0x40>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f36:	d00f      	beq.n	8008f58 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a3d      	ldr	r2, [pc, #244]	; (8009030 <TIM_Base_SetConfig+0x118>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00b      	beq.n	8008f58 <TIM_Base_SetConfig+0x40>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a3c      	ldr	r2, [pc, #240]	; (8009034 <TIM_Base_SetConfig+0x11c>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d007      	beq.n	8008f58 <TIM_Base_SetConfig+0x40>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a3b      	ldr	r2, [pc, #236]	; (8009038 <TIM_Base_SetConfig+0x120>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_Base_SetConfig+0x40>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a3a      	ldr	r2, [pc, #232]	; (800903c <TIM_Base_SetConfig+0x124>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d108      	bne.n	8008f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a2f      	ldr	r2, [pc, #188]	; (800902c <TIM_Base_SetConfig+0x114>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d02b      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f78:	d027      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a2c      	ldr	r2, [pc, #176]	; (8009030 <TIM_Base_SetConfig+0x118>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d023      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a2b      	ldr	r2, [pc, #172]	; (8009034 <TIM_Base_SetConfig+0x11c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d01f      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a2a      	ldr	r2, [pc, #168]	; (8009038 <TIM_Base_SetConfig+0x120>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d01b      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a29      	ldr	r2, [pc, #164]	; (800903c <TIM_Base_SetConfig+0x124>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d017      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a28      	ldr	r2, [pc, #160]	; (8009040 <TIM_Base_SetConfig+0x128>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d013      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a27      	ldr	r2, [pc, #156]	; (8009044 <TIM_Base_SetConfig+0x12c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00f      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a26      	ldr	r2, [pc, #152]	; (8009048 <TIM_Base_SetConfig+0x130>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00b      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a25      	ldr	r2, [pc, #148]	; (800904c <TIM_Base_SetConfig+0x134>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d007      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a24      	ldr	r2, [pc, #144]	; (8009050 <TIM_Base_SetConfig+0x138>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d003      	beq.n	8008fca <TIM_Base_SetConfig+0xb2>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a23      	ldr	r2, [pc, #140]	; (8009054 <TIM_Base_SetConfig+0x13c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d108      	bne.n	8008fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a0a      	ldr	r2, [pc, #40]	; (800902c <TIM_Base_SetConfig+0x114>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d003      	beq.n	8009010 <TIM_Base_SetConfig+0xf8>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a0c      	ldr	r2, [pc, #48]	; (800903c <TIM_Base_SetConfig+0x124>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d103      	bne.n	8009018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	691a      	ldr	r2, [r3, #16]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	615a      	str	r2, [r3, #20]
}
 800901e:	bf00      	nop
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	40010000 	.word	0x40010000
 8009030:	40000400 	.word	0x40000400
 8009034:	40000800 	.word	0x40000800
 8009038:	40000c00 	.word	0x40000c00
 800903c:	40010400 	.word	0x40010400
 8009040:	40014000 	.word	0x40014000
 8009044:	40014400 	.word	0x40014400
 8009048:	40014800 	.word	0x40014800
 800904c:	40001800 	.word	0x40001800
 8009050:	40001c00 	.word	0x40001c00
 8009054:	40002000 	.word	0x40002000

08009058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	f023 0201 	bic.w	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 0303 	bic.w	r3, r3, #3
 800908e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	4313      	orrs	r3, r2
 8009098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f023 0302 	bic.w	r3, r3, #2
 80090a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a20      	ldr	r2, [pc, #128]	; (8009130 <TIM_OC1_SetConfig+0xd8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d003      	beq.n	80090bc <TIM_OC1_SetConfig+0x64>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a1f      	ldr	r2, [pc, #124]	; (8009134 <TIM_OC1_SetConfig+0xdc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d10c      	bne.n	80090d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f023 0308 	bic.w	r3, r3, #8
 80090c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f023 0304 	bic.w	r3, r3, #4
 80090d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a15      	ldr	r2, [pc, #84]	; (8009130 <TIM_OC1_SetConfig+0xd8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d003      	beq.n	80090e6 <TIM_OC1_SetConfig+0x8e>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a14      	ldr	r2, [pc, #80]	; (8009134 <TIM_OC1_SetConfig+0xdc>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d111      	bne.n	800910a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	621a      	str	r2, [r3, #32]
}
 8009124:	bf00      	nop
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr
 8009130:	40010000 	.word	0x40010000
 8009134:	40010400 	.word	0x40010400

08009138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a1b      	ldr	r3, [r3, #32]
 8009146:	f023 0210 	bic.w	r2, r3, #16
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800916e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	021b      	lsls	r3, r3, #8
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	4313      	orrs	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f023 0320 	bic.w	r3, r3, #32
 8009182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a22      	ldr	r2, [pc, #136]	; (800921c <TIM_OC2_SetConfig+0xe4>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d003      	beq.n	80091a0 <TIM_OC2_SetConfig+0x68>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a21      	ldr	r2, [pc, #132]	; (8009220 <TIM_OC2_SetConfig+0xe8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d10d      	bne.n	80091bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a17      	ldr	r2, [pc, #92]	; (800921c <TIM_OC2_SetConfig+0xe4>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d003      	beq.n	80091cc <TIM_OC2_SetConfig+0x94>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a16      	ldr	r2, [pc, #88]	; (8009220 <TIM_OC2_SetConfig+0xe8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d113      	bne.n	80091f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	40010000 	.word	0x40010000
 8009220:	40010400 	.word	0x40010400

08009224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 0303 	bic.w	r3, r3, #3
 800925a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	4313      	orrs	r3, r2
 8009264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800926c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	4313      	orrs	r3, r2
 8009278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a21      	ldr	r2, [pc, #132]	; (8009304 <TIM_OC3_SetConfig+0xe0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d003      	beq.n	800928a <TIM_OC3_SetConfig+0x66>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a20      	ldr	r2, [pc, #128]	; (8009308 <TIM_OC3_SetConfig+0xe4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d10d      	bne.n	80092a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	021b      	lsls	r3, r3, #8
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a16      	ldr	r2, [pc, #88]	; (8009304 <TIM_OC3_SetConfig+0xe0>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d003      	beq.n	80092b6 <TIM_OC3_SetConfig+0x92>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a15      	ldr	r2, [pc, #84]	; (8009308 <TIM_OC3_SetConfig+0xe4>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d113      	bne.n	80092de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	621a      	str	r2, [r3, #32]
}
 80092f8:	bf00      	nop
 80092fa:	371c      	adds	r7, #28
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	40010000 	.word	0x40010000
 8009308:	40010400 	.word	0x40010400

0800930c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800930c:	b480      	push	{r7}
 800930e:	b087      	sub	sp, #28
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800933a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	021b      	lsls	r3, r3, #8
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	4313      	orrs	r3, r2
 800934e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	031b      	lsls	r3, r3, #12
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a12      	ldr	r2, [pc, #72]	; (80093b0 <TIM_OC4_SetConfig+0xa4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d003      	beq.n	8009374 <TIM_OC4_SetConfig+0x68>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a11      	ldr	r2, [pc, #68]	; (80093b4 <TIM_OC4_SetConfig+0xa8>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d109      	bne.n	8009388 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800937a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	019b      	lsls	r3, r3, #6
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	4313      	orrs	r3, r2
 8009386:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	621a      	str	r2, [r3, #32]
}
 80093a2:	bf00      	nop
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	40010000 	.word	0x40010000
 80093b4:	40010400 	.word	0x40010400

080093b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b087      	sub	sp, #28
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f023 0201 	bic.w	r2, r3, #1
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	011b      	lsls	r3, r3, #4
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	f023 030a 	bic.w	r3, r3, #10
 80093f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093f6:	697a      	ldr	r2, [r7, #20]
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	621a      	str	r2, [r3, #32]
}
 800940a:	bf00      	nop
 800940c:	371c      	adds	r7, #28
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009416:	b480      	push	{r7}
 8009418:	b087      	sub	sp, #28
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f023 0210 	bic.w	r2, r3, #16
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6a1b      	ldr	r3, [r3, #32]
 8009438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	031b      	lsls	r3, r3, #12
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	4313      	orrs	r3, r2
 800944a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	011b      	lsls	r3, r3, #4
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	621a      	str	r2, [r3, #32]
}
 800946a:	bf00      	nop
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009476:	b480      	push	{r7}
 8009478:	b085      	sub	sp, #20
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800948c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	f043 0307 	orr.w	r3, r3, #7
 8009498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	609a      	str	r2, [r3, #8]
}
 80094a0:	bf00      	nop
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	021a      	lsls	r2, r3, #8
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	609a      	str	r2, [r3, #8]
}
 80094e0:	bf00      	nop
 80094e2:	371c      	adds	r7, #28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d101      	bne.n	8009504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009500:	2302      	movs	r3, #2
 8009502:	e05a      	b.n	80095ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2202      	movs	r2, #2
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a21      	ldr	r2, [pc, #132]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d022      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009550:	d01d      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1d      	ldr	r2, [pc, #116]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d018      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1b      	ldr	r2, [pc, #108]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d013      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a1a      	ldr	r2, [pc, #104]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00e      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a18      	ldr	r2, [pc, #96]	; (80095d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d009      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a17      	ldr	r2, [pc, #92]	; (80095dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d004      	beq.n	800958e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a15      	ldr	r2, [pc, #84]	; (80095e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d10c      	bne.n	80095a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4313      	orrs	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	40010400 	.word	0x40010400
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40001800 	.word	0x40001800

080095e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e03f      	b.n	8009676 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fa f8b6 	bl	800377c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	; 0x24
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fe81 	bl	800a330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691a      	ldr	r2, [r3, #16]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800963c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	695a      	ldr	r2, [r3, #20]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800964c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68da      	ldr	r2, [r3, #12]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800965c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2220      	movs	r2, #32
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2220      	movs	r2, #32
 8009670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b08a      	sub	sp, #40	; 0x28
 8009682:	af02      	add	r7, sp, #8
 8009684:	60f8      	str	r0, [r7, #12]
 8009686:	60b9      	str	r1, [r7, #8]
 8009688:	603b      	str	r3, [r7, #0]
 800968a:	4613      	mov	r3, r2
 800968c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b20      	cmp	r3, #32
 800969c:	d17c      	bne.n	8009798 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <HAL_UART_Transmit+0x2c>
 80096a4:	88fb      	ldrh	r3, [r7, #6]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e075      	b.n	800979a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_UART_Transmit+0x3e>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e06e      	b.n	800979a <HAL_UART_Transmit+0x11c>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2221      	movs	r2, #33	; 0x21
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80096d2:	f7fa fb7b 	bl	8003dcc <HAL_GetTick>
 80096d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	88fa      	ldrh	r2, [r7, #6]
 80096dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	88fa      	ldrh	r2, [r7, #6]
 80096e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ec:	d108      	bne.n	8009700 <HAL_UART_Transmit+0x82>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d104      	bne.n	8009700 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80096f6:	2300      	movs	r3, #0
 80096f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	e003      	b.n	8009708 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009710:	e02a      	b.n	8009768 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	9300      	str	r3, [sp, #0]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2200      	movs	r2, #0
 800971a:	2180      	movs	r1, #128	; 0x80
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 fbc1 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e036      	b.n	800979a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009740:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	3302      	adds	r3, #2
 8009746:	61bb      	str	r3, [r7, #24]
 8009748:	e007      	b.n	800975a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	781a      	ldrb	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	3301      	adds	r3, #1
 8009758:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800975e:	b29b      	uxth	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800976c:	b29b      	uxth	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1cf      	bne.n	8009712 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2200      	movs	r2, #0
 800977a:	2140      	movs	r1, #64	; 0x40
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fb91 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d001      	beq.n	800978c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e006      	b.n	800979a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	e000      	b.n	800979a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009798:	2302      	movs	r3, #2
  }
}
 800979a:	4618      	mov	r0, r3
 800979c:	3720      	adds	r7, #32
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b08a      	sub	sp, #40	; 0x28
 80097a6:	af02      	add	r7, sp, #8
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	60b9      	str	r1, [r7, #8]
 80097ac:	603b      	str	r3, [r7, #0]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b20      	cmp	r3, #32
 80097c0:	f040 808c 	bne.w	80098dc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <HAL_UART_Receive+0x2e>
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e084      	b.n	80098de <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_UART_Receive+0x40>
 80097de:	2302      	movs	r3, #2
 80097e0:	e07d      	b.n	80098de <HAL_UART_Receive+0x13c>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2222      	movs	r2, #34	; 0x22
 80097f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097fe:	f7fa fae5 	bl	8003dcc <HAL_GetTick>
 8009802:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	88fa      	ldrh	r2, [r7, #6]
 8009808:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	88fa      	ldrh	r2, [r7, #6]
 800980e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009818:	d108      	bne.n	800982c <HAL_UART_Receive+0x8a>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	e003      	b.n	8009834 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800983c:	e043      	b.n	80098c6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	9300      	str	r3, [sp, #0]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2200      	movs	r2, #0
 8009846:	2120      	movs	r1, #32
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 fb2b 	bl	8009ea4 <UART_WaitOnFlagUntilTimeout>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e042      	b.n	80098de <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10c      	bne.n	8009878 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986a:	b29a      	uxth	r2, r3
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	3302      	adds	r3, #2
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	e01f      	b.n	80098b8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009880:	d007      	beq.n	8009892 <HAL_UART_Receive+0xf0>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <HAL_UART_Receive+0xfe>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	b2da      	uxtb	r2, r3
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	701a      	strb	r2, [r3, #0]
 800989e:	e008      	b.n	80098b2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	3301      	adds	r3, #1
 80098b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	3b01      	subs	r3, #1
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1b6      	bne.n	800983e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	e000      	b.n	80098de <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80098dc:	2302      	movs	r3, #2
  }
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3720      	adds	r7, #32
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	4613      	mov	r3, r2
 80098f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b20      	cmp	r3, #32
 80098fe:	d11d      	bne.n	800993c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d002      	beq.n	800990c <HAL_UART_Receive_IT+0x26>
 8009906:	88fb      	ldrh	r3, [r7, #6]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e016      	b.n	800993e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_UART_Receive_IT+0x38>
 800991a:	2302      	movs	r3, #2
 800991c:	e00f      	b.n	800993e <HAL_UART_Receive_IT+0x58>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800992c:	88fb      	ldrh	r3, [r7, #6]
 800992e:	461a      	mov	r2, r3
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 fb24 	bl	8009f80 <UART_Start_Receive_IT>
 8009938:	4603      	mov	r3, r0
 800993a:	e000      	b.n	800993e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b0ba      	sub	sp, #232	; 0xe8
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800996e:	2300      	movs	r3, #0
 8009970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009974:	2300      	movs	r3, #0
 8009976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800997a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997e:	f003 030f 	and.w	r3, r3, #15
 8009982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10f      	bne.n	80099ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800998e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009992:	f003 0320 	and.w	r3, r3, #32
 8009996:	2b00      	cmp	r3, #0
 8009998:	d009      	beq.n	80099ae <HAL_UART_IRQHandler+0x66>
 800999a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800999e:	f003 0320 	and.w	r3, r3, #32
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 fc07 	bl	800a1ba <UART_Receive_IT>
      return;
 80099ac:	e256      	b.n	8009e5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80099ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f000 80de 	beq.w	8009b74 <HAL_UART_IRQHandler+0x22c>
 80099b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80099c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 80d1 	beq.w	8009b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <HAL_UART_IRQHandler+0xae>
 80099de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d005      	beq.n	80099f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	f043 0201 	orr.w	r2, r3, #1
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099fa:	f003 0304 	and.w	r3, r3, #4
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00b      	beq.n	8009a1a <HAL_UART_IRQHandler+0xd2>
 8009a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d005      	beq.n	8009a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	f043 0202 	orr.w	r2, r3, #2
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <HAL_UART_IRQHandler+0xf6>
 8009a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d005      	beq.n	8009a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	f043 0204 	orr.w	r2, r3, #4
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a42:	f003 0308 	and.w	r3, r3, #8
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d011      	beq.n	8009a6e <HAL_UART_IRQHandler+0x126>
 8009a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d105      	bne.n	8009a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a66:	f043 0208 	orr.w	r2, r3, #8
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 81ed 	beq.w	8009e52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7c:	f003 0320 	and.w	r3, r3, #32
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d008      	beq.n	8009a96 <HAL_UART_IRQHandler+0x14e>
 8009a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fb92 	bl	800a1ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa0:	2b40      	cmp	r3, #64	; 0x40
 8009aa2:	bf0c      	ite	eq
 8009aa4:	2301      	moveq	r3, #1
 8009aa6:	2300      	movne	r3, #0
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab2:	f003 0308 	and.w	r3, r3, #8
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d103      	bne.n	8009ac2 <HAL_UART_IRQHandler+0x17a>
 8009aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d04f      	beq.n	8009b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa9a 	bl	8009ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad2:	2b40      	cmp	r3, #64	; 0x40
 8009ad4:	d141      	bne.n	8009b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3314      	adds	r3, #20
 8009adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ae4:	e853 3f00 	ldrex	r3, [r3]
 8009ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	3314      	adds	r3, #20
 8009afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1d9      	bne.n	8009ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d013      	beq.n	8009b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	4a7d      	ldr	r2, [pc, #500]	; (8009d24 <HAL_UART_IRQHandler+0x3dc>)
 8009b30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fa fbc4 	bl	80042c4 <HAL_DMA_Abort_IT>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d016      	beq.n	8009b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b50:	e00e      	b.n	8009b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f990 	bl	8009e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b58:	e00a      	b.n	8009b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f98c 	bl	8009e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b60:	e006      	b.n	8009b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f988 	bl	8009e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009b6e:	e170      	b.n	8009e52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b70:	bf00      	nop
    return;
 8009b72:	e16e      	b.n	8009e52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	f040 814a 	bne.w	8009e12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b82:	f003 0310 	and.w	r3, r3, #16
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 8143 	beq.w	8009e12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b90:	f003 0310 	and.w	r3, r3, #16
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f000 813c 	beq.w	8009e12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60bb      	str	r3, [r7, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	60bb      	str	r3, [r7, #8]
 8009bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	f040 80b4 	bne.w	8009d28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 8140 	beq.w	8009e56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bde:	429a      	cmp	r2, r3
 8009be0:	f080 8139 	bcs.w	8009e56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	69db      	ldr	r3, [r3, #28]
 8009bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf6:	f000 8088 	beq.w	8009d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	330c      	adds	r3, #12
 8009c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	330c      	adds	r3, #12
 8009c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1d9      	bne.n	8009bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	3314      	adds	r3, #20
 8009c4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c50:	e853 3f00 	ldrex	r3, [r3]
 8009c54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c58:	f023 0301 	bic.w	r3, r3, #1
 8009c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e1      	bne.n	8009c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3314      	adds	r3, #20
 8009c88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3314      	adds	r3, #20
 8009ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ca6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ca8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009caa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cae:	e841 2300 	strex	r3, r2, [r1]
 8009cb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1e3      	bne.n	8009c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	330c      	adds	r3, #12
 8009cce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd2:	e853 3f00 	ldrex	r3, [r3]
 8009cd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cda:	f023 0310 	bic.w	r3, r3, #16
 8009cde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	330c      	adds	r3, #12
 8009ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009cec:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cf4:	e841 2300 	strex	r3, r2, [r1]
 8009cf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d1e3      	bne.n	8009cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fa fa6d 	bl	80041e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	1ad3      	subs	r3, r2, r3
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f8b6 	bl	8009e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d20:	e099      	b.n	8009e56 <HAL_UART_IRQHandler+0x50e>
 8009d22:	bf00      	nop
 8009d24:	0800a0c3 	.word	0x0800a0c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 808b 	beq.w	8009e5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 8086 	beq.w	8009e5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	330c      	adds	r3, #12
 8009d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d58:	e853 3f00 	ldrex	r3, [r3]
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	330c      	adds	r3, #12
 8009d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d72:	647a      	str	r2, [r7, #68]	; 0x44
 8009d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d7a:	e841 2300 	strex	r3, r2, [r1]
 8009d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1e3      	bne.n	8009d4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3314      	adds	r3, #20
 8009d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	623b      	str	r3, [r7, #32]
   return(result);
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	f023 0301 	bic.w	r3, r3, #1
 8009d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3314      	adds	r3, #20
 8009da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009daa:	633a      	str	r2, [r7, #48]	; 0x30
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009db2:	e841 2300 	strex	r3, r2, [r1]
 8009db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1e3      	bne.n	8009d86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	330c      	adds	r3, #12
 8009dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0310 	bic.w	r3, r3, #16
 8009de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	330c      	adds	r3, #12
 8009dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009df0:	61fa      	str	r2, [r7, #28]
 8009df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	69b9      	ldr	r1, [r7, #24]
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e3      	bne.n	8009dcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f83e 	bl	8009e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009e10:	e023      	b.n	8009e5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d009      	beq.n	8009e32 <HAL_UART_IRQHandler+0x4ea>
 8009e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f95d 	bl	800a0ea <UART_Transmit_IT>
    return;
 8009e30:	e014      	b.n	8009e5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00e      	beq.n	8009e5c <HAL_UART_IRQHandler+0x514>
 8009e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d008      	beq.n	8009e5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 f99d 	bl	800a18a <UART_EndTransmit_IT>
    return;
 8009e50:	e004      	b.n	8009e5c <HAL_UART_IRQHandler+0x514>
    return;
 8009e52:	bf00      	nop
 8009e54:	e002      	b.n	8009e5c <HAL_UART_IRQHandler+0x514>
      return;
 8009e56:	bf00      	nop
 8009e58:	e000      	b.n	8009e5c <HAL_UART_IRQHandler+0x514>
      return;
 8009e5a:	bf00      	nop
  }
}
 8009e5c:	37e8      	adds	r7, #232	; 0xe8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop

08009e64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b090      	sub	sp, #64	; 0x40
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	603b      	str	r3, [r7, #0]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eb4:	e050      	b.n	8009f58 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ebc:	d04c      	beq.n	8009f58 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d007      	beq.n	8009ed4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ec4:	f7f9 ff82 	bl	8003dcc <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d241      	bcs.n	8009f58 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	e853 3f00 	ldrex	r3, [r3]
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	330c      	adds	r3, #12
 8009ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ef4:	637a      	str	r2, [r7, #52]	; 0x34
 8009ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e5      	bne.n	8009ed4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3314      	adds	r3, #20
 8009f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	613b      	str	r3, [r7, #16]
   return(result);
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3314      	adds	r3, #20
 8009f26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f28:	623a      	str	r2, [r7, #32]
 8009f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2c:	69f9      	ldr	r1, [r7, #28]
 8009f2e:	6a3a      	ldr	r2, [r7, #32]
 8009f30:	e841 2300 	strex	r3, r2, [r1]
 8009f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1e5      	bne.n	8009f08 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2220      	movs	r2, #32
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e00f      	b.n	8009f78 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	4013      	ands	r3, r2
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	bf0c      	ite	eq
 8009f68:	2301      	moveq	r3, #1
 8009f6a:	2300      	movne	r3, #0
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	461a      	mov	r2, r3
 8009f70:	79fb      	ldrb	r3, [r7, #7]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d09f      	beq.n	8009eb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3740      	adds	r7, #64	; 0x40
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	88fa      	ldrh	r2, [r7, #6]
 8009f98:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	88fa      	ldrh	r2, [r7, #6]
 8009f9e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2222      	movs	r2, #34	; 0x22
 8009faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d007      	beq.n	8009fce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fcc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695a      	ldr	r2, [r3, #20]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0220 	orr.w	r2, r2, #32
 8009fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b095      	sub	sp, #84	; 0x54
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	330c      	adds	r3, #12
 800a00a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a00e:	e853 3f00 	ldrex	r3, [r3]
 800a012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a01a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	330c      	adds	r3, #12
 800a022:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a024:	643a      	str	r2, [r7, #64]	; 0x40
 800a026:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a02a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a02c:	e841 2300 	strex	r3, r2, [r1]
 800a030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1e5      	bne.n	800a004 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3314      	adds	r3, #20
 800a03e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	61fb      	str	r3, [r7, #28]
   return(result);
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	f023 0301 	bic.w	r3, r3, #1
 800a04e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3314      	adds	r3, #20
 800a056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a05a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a05e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e5      	bne.n	800a038 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a070:	2b01      	cmp	r3, #1
 800a072:	d119      	bne.n	800a0a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	330c      	adds	r3, #12
 800a07a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	e853 3f00 	ldrex	r3, [r3]
 800a082:	60bb      	str	r3, [r7, #8]
   return(result);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f023 0310 	bic.w	r3, r3, #16
 800a08a:	647b      	str	r3, [r7, #68]	; 0x44
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	330c      	adds	r3, #12
 800a092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a094:	61ba      	str	r2, [r7, #24]
 800a096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a098:	6979      	ldr	r1, [r7, #20]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	e841 2300 	strex	r3, r2, [r1]
 800a0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1e5      	bne.n	800a074 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2220      	movs	r2, #32
 800a0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a0b6:	bf00      	nop
 800a0b8:	3754      	adds	r7, #84	; 0x54
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff fecb 	bl	8009e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0e2:	bf00      	nop
 800a0e4:	3710      	adds	r7, #16
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b085      	sub	sp, #20
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	2b21      	cmp	r3, #33	; 0x21
 800a0fc:	d13e      	bne.n	800a17c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a106:	d114      	bne.n	800a132 <UART_Transmit_IT+0x48>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d110      	bne.n	800a132 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	461a      	mov	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a124:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	1c9a      	adds	r2, r3, #2
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	621a      	str	r2, [r3, #32]
 800a130:	e008      	b.n	800a144 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	1c59      	adds	r1, r3, #1
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6211      	str	r1, [r2, #32]
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a148:	b29b      	uxth	r3, r3
 800a14a:	3b01      	subs	r3, #1
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	4619      	mov	r1, r3
 800a152:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10f      	bne.n	800a178 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a166:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a176:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a17c:	2302      	movs	r3, #2
  }
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7ff fe5a 	bl	8009e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b08c      	sub	sp, #48	; 0x30
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b22      	cmp	r3, #34	; 0x22
 800a1cc:	f040 80ab 	bne.w	800a326 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1d8:	d117      	bne.n	800a20a <UART_Receive_IT+0x50>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d113      	bne.n	800a20a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a202:	1c9a      	adds	r2, r3, #2
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	629a      	str	r2, [r3, #40]	; 0x28
 800a208:	e026      	b.n	800a258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a21c:	d007      	beq.n	800a22e <UART_Receive_IT+0x74>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <UART_Receive_IT+0x82>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d106      	bne.n	800a23c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	b2da      	uxtb	r2, r3
 800a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a238:	701a      	strb	r2, [r3, #0]
 800a23a:	e008      	b.n	800a24e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	3b01      	subs	r3, #1
 800a260:	b29b      	uxth	r3, r3
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	4619      	mov	r1, r3
 800a266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d15a      	bne.n	800a322 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68da      	ldr	r2, [r3, #12]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f022 0220 	bic.w	r2, r2, #32
 800a27a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a28a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	695a      	ldr	r2, [r3, #20]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f022 0201 	bic.w	r2, r2, #1
 800a29a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2220      	movs	r2, #32
 800a2a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d135      	bne.n	800a318 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	330c      	adds	r3, #12
 800a2b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	f023 0310 	bic.w	r3, r3, #16
 800a2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	330c      	adds	r3, #12
 800a2d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d2:	623a      	str	r2, [r7, #32]
 800a2d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	69f9      	ldr	r1, [r7, #28]
 800a2d8:	6a3a      	ldr	r2, [r7, #32]
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e5      	bne.n	800a2b2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0310 	and.w	r3, r3, #16
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d10a      	bne.n	800a30a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60fb      	str	r3, [r7, #12]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	60fb      	str	r3, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff fdbb 	bl	8009e8c <HAL_UARTEx_RxEventCallback>
 800a316:	e002      	b.n	800a31e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f7f6 fee7 	bl	80010ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	e002      	b.n	800a328 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a322:	2300      	movs	r3, #0
 800a324:	e000      	b.n	800a328 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a326:	2302      	movs	r3, #2
  }
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3730      	adds	r7, #48	; 0x30
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a334:	b0c0      	sub	sp, #256	; 0x100
 800a336:	af00      	add	r7, sp, #0
 800a338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a33c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34c:	68d9      	ldr	r1, [r3, #12]
 800a34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	ea40 0301 	orr.w	r3, r0, r1
 800a358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	431a      	orrs	r2, r3
 800a368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	431a      	orrs	r2, r3
 800a370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	4313      	orrs	r3, r2
 800a378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a37c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a388:	f021 010c 	bic.w	r1, r1, #12
 800a38c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a396:	430b      	orrs	r3, r1
 800a398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a39a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3aa:	6999      	ldr	r1, [r3, #24]
 800a3ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	ea40 0301 	orr.w	r3, r0, r1
 800a3b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a3b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b8f      	ldr	r3, [pc, #572]	; (800a5fc <UART_SetConfig+0x2cc>)
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d005      	beq.n	800a3d0 <UART_SetConfig+0xa0>
 800a3c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	4b8d      	ldr	r3, [pc, #564]	; (800a600 <UART_SetConfig+0x2d0>)
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d104      	bne.n	800a3da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a3d0:	f7fd fd80 	bl	8007ed4 <HAL_RCC_GetPCLK2Freq>
 800a3d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a3d8:	e003      	b.n	800a3e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a3da:	f7fd fd67 	bl	8007eac <HAL_RCC_GetPCLK1Freq>
 800a3de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ec:	f040 810c 	bne.w	800a608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a3f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a3fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a3fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	1891      	adds	r1, r2, r2
 800a408:	65b9      	str	r1, [r7, #88]	; 0x58
 800a40a:	415b      	adcs	r3, r3
 800a40c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a40e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a412:	4621      	mov	r1, r4
 800a414:	eb12 0801 	adds.w	r8, r2, r1
 800a418:	4629      	mov	r1, r5
 800a41a:	eb43 0901 	adc.w	r9, r3, r1
 800a41e:	f04f 0200 	mov.w	r2, #0
 800a422:	f04f 0300 	mov.w	r3, #0
 800a426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a42a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a42e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a432:	4690      	mov	r8, r2
 800a434:	4699      	mov	r9, r3
 800a436:	4623      	mov	r3, r4
 800a438:	eb18 0303 	adds.w	r3, r8, r3
 800a43c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a440:	462b      	mov	r3, r5
 800a442:	eb49 0303 	adc.w	r3, r9, r3
 800a446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a45a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a45e:	460b      	mov	r3, r1
 800a460:	18db      	adds	r3, r3, r3
 800a462:	653b      	str	r3, [r7, #80]	; 0x50
 800a464:	4613      	mov	r3, r2
 800a466:	eb42 0303 	adc.w	r3, r2, r3
 800a46a:	657b      	str	r3, [r7, #84]	; 0x54
 800a46c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a474:	f7f5 ff14 	bl	80002a0 <__aeabi_uldivmod>
 800a478:	4602      	mov	r2, r0
 800a47a:	460b      	mov	r3, r1
 800a47c:	4b61      	ldr	r3, [pc, #388]	; (800a604 <UART_SetConfig+0x2d4>)
 800a47e:	fba3 2302 	umull	r2, r3, r3, r2
 800a482:	095b      	lsrs	r3, r3, #5
 800a484:	011c      	lsls	r4, r3, #4
 800a486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a498:	4642      	mov	r2, r8
 800a49a:	464b      	mov	r3, r9
 800a49c:	1891      	adds	r1, r2, r2
 800a49e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4a0:	415b      	adcs	r3, r3
 800a4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4a8:	4641      	mov	r1, r8
 800a4aa:	eb12 0a01 	adds.w	sl, r2, r1
 800a4ae:	4649      	mov	r1, r9
 800a4b0:	eb43 0b01 	adc.w	fp, r3, r1
 800a4b4:	f04f 0200 	mov.w	r2, #0
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a4c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a4c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4c8:	4692      	mov	sl, r2
 800a4ca:	469b      	mov	fp, r3
 800a4cc:	4643      	mov	r3, r8
 800a4ce:	eb1a 0303 	adds.w	r3, sl, r3
 800a4d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	eb4b 0303 	adc.w	r3, fp, r3
 800a4dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a4e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a4ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a4f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	18db      	adds	r3, r3, r3
 800a4f8:	643b      	str	r3, [r7, #64]	; 0x40
 800a4fa:	4613      	mov	r3, r2
 800a4fc:	eb42 0303 	adc.w	r3, r2, r3
 800a500:	647b      	str	r3, [r7, #68]	; 0x44
 800a502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a50a:	f7f5 fec9 	bl	80002a0 <__aeabi_uldivmod>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4611      	mov	r1, r2
 800a514:	4b3b      	ldr	r3, [pc, #236]	; (800a604 <UART_SetConfig+0x2d4>)
 800a516:	fba3 2301 	umull	r2, r3, r3, r1
 800a51a:	095b      	lsrs	r3, r3, #5
 800a51c:	2264      	movs	r2, #100	; 0x64
 800a51e:	fb02 f303 	mul.w	r3, r2, r3
 800a522:	1acb      	subs	r3, r1, r3
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a52a:	4b36      	ldr	r3, [pc, #216]	; (800a604 <UART_SetConfig+0x2d4>)
 800a52c:	fba3 2302 	umull	r2, r3, r3, r2
 800a530:	095b      	lsrs	r3, r3, #5
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a538:	441c      	add	r4, r3
 800a53a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a54c:	4642      	mov	r2, r8
 800a54e:	464b      	mov	r3, r9
 800a550:	1891      	adds	r1, r2, r2
 800a552:	63b9      	str	r1, [r7, #56]	; 0x38
 800a554:	415b      	adcs	r3, r3
 800a556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a55c:	4641      	mov	r1, r8
 800a55e:	1851      	adds	r1, r2, r1
 800a560:	6339      	str	r1, [r7, #48]	; 0x30
 800a562:	4649      	mov	r1, r9
 800a564:	414b      	adcs	r3, r1
 800a566:	637b      	str	r3, [r7, #52]	; 0x34
 800a568:	f04f 0200 	mov.w	r2, #0
 800a56c:	f04f 0300 	mov.w	r3, #0
 800a570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a574:	4659      	mov	r1, fp
 800a576:	00cb      	lsls	r3, r1, #3
 800a578:	4651      	mov	r1, sl
 800a57a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a57e:	4651      	mov	r1, sl
 800a580:	00ca      	lsls	r2, r1, #3
 800a582:	4610      	mov	r0, r2
 800a584:	4619      	mov	r1, r3
 800a586:	4603      	mov	r3, r0
 800a588:	4642      	mov	r2, r8
 800a58a:	189b      	adds	r3, r3, r2
 800a58c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a590:	464b      	mov	r3, r9
 800a592:	460a      	mov	r2, r1
 800a594:	eb42 0303 	adc.w	r3, r2, r3
 800a598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a5a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a5ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	18db      	adds	r3, r3, r3
 800a5b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	eb42 0303 	adc.w	r3, r2, r3
 800a5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a5c6:	f7f5 fe6b 	bl	80002a0 <__aeabi_uldivmod>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	4b0d      	ldr	r3, [pc, #52]	; (800a604 <UART_SetConfig+0x2d4>)
 800a5d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a5d4:	095b      	lsrs	r3, r3, #5
 800a5d6:	2164      	movs	r1, #100	; 0x64
 800a5d8:	fb01 f303 	mul.w	r3, r1, r3
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	00db      	lsls	r3, r3, #3
 800a5e0:	3332      	adds	r3, #50	; 0x32
 800a5e2:	4a08      	ldr	r2, [pc, #32]	; (800a604 <UART_SetConfig+0x2d4>)
 800a5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e8:	095b      	lsrs	r3, r3, #5
 800a5ea:	f003 0207 	and.w	r2, r3, #7
 800a5ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4422      	add	r2, r4
 800a5f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a5f8:	e105      	b.n	800a806 <UART_SetConfig+0x4d6>
 800a5fa:	bf00      	nop
 800a5fc:	40011000 	.word	0x40011000
 800a600:	40011400 	.word	0x40011400
 800a604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a61a:	4642      	mov	r2, r8
 800a61c:	464b      	mov	r3, r9
 800a61e:	1891      	adds	r1, r2, r2
 800a620:	6239      	str	r1, [r7, #32]
 800a622:	415b      	adcs	r3, r3
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
 800a626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a62a:	4641      	mov	r1, r8
 800a62c:	1854      	adds	r4, r2, r1
 800a62e:	4649      	mov	r1, r9
 800a630:	eb43 0501 	adc.w	r5, r3, r1
 800a634:	f04f 0200 	mov.w	r2, #0
 800a638:	f04f 0300 	mov.w	r3, #0
 800a63c:	00eb      	lsls	r3, r5, #3
 800a63e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a642:	00e2      	lsls	r2, r4, #3
 800a644:	4614      	mov	r4, r2
 800a646:	461d      	mov	r5, r3
 800a648:	4643      	mov	r3, r8
 800a64a:	18e3      	adds	r3, r4, r3
 800a64c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a650:	464b      	mov	r3, r9
 800a652:	eb45 0303 	adc.w	r3, r5, r3
 800a656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a66a:	f04f 0200 	mov.w	r2, #0
 800a66e:	f04f 0300 	mov.w	r3, #0
 800a672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a676:	4629      	mov	r1, r5
 800a678:	008b      	lsls	r3, r1, #2
 800a67a:	4621      	mov	r1, r4
 800a67c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a680:	4621      	mov	r1, r4
 800a682:	008a      	lsls	r2, r1, #2
 800a684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a688:	f7f5 fe0a 	bl	80002a0 <__aeabi_uldivmod>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4b60      	ldr	r3, [pc, #384]	; (800a814 <UART_SetConfig+0x4e4>)
 800a692:	fba3 2302 	umull	r2, r3, r3, r2
 800a696:	095b      	lsrs	r3, r3, #5
 800a698:	011c      	lsls	r4, r3, #4
 800a69a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a6a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	1891      	adds	r1, r2, r2
 800a6b2:	61b9      	str	r1, [r7, #24]
 800a6b4:	415b      	adcs	r3, r3
 800a6b6:	61fb      	str	r3, [r7, #28]
 800a6b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6bc:	4641      	mov	r1, r8
 800a6be:	1851      	adds	r1, r2, r1
 800a6c0:	6139      	str	r1, [r7, #16]
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	414b      	adcs	r3, r1
 800a6c6:	617b      	str	r3, [r7, #20]
 800a6c8:	f04f 0200 	mov.w	r2, #0
 800a6cc:	f04f 0300 	mov.w	r3, #0
 800a6d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a6d4:	4659      	mov	r1, fp
 800a6d6:	00cb      	lsls	r3, r1, #3
 800a6d8:	4651      	mov	r1, sl
 800a6da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6de:	4651      	mov	r1, sl
 800a6e0:	00ca      	lsls	r2, r1, #3
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	189b      	adds	r3, r3, r2
 800a6ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	460a      	mov	r2, r1
 800a6f4:	eb42 0303 	adc.w	r3, r2, r3
 800a6f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	67bb      	str	r3, [r7, #120]	; 0x78
 800a706:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	f04f 0300 	mov.w	r3, #0
 800a710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a714:	4649      	mov	r1, r9
 800a716:	008b      	lsls	r3, r1, #2
 800a718:	4641      	mov	r1, r8
 800a71a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a71e:	4641      	mov	r1, r8
 800a720:	008a      	lsls	r2, r1, #2
 800a722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a726:	f7f5 fdbb 	bl	80002a0 <__aeabi_uldivmod>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4b39      	ldr	r3, [pc, #228]	; (800a814 <UART_SetConfig+0x4e4>)
 800a730:	fba3 1302 	umull	r1, r3, r3, r2
 800a734:	095b      	lsrs	r3, r3, #5
 800a736:	2164      	movs	r1, #100	; 0x64
 800a738:	fb01 f303 	mul.w	r3, r1, r3
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	011b      	lsls	r3, r3, #4
 800a740:	3332      	adds	r3, #50	; 0x32
 800a742:	4a34      	ldr	r2, [pc, #208]	; (800a814 <UART_SetConfig+0x4e4>)
 800a744:	fba2 2303 	umull	r2, r3, r2, r3
 800a748:	095b      	lsrs	r3, r3, #5
 800a74a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a74e:	441c      	add	r4, r3
 800a750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a754:	2200      	movs	r2, #0
 800a756:	673b      	str	r3, [r7, #112]	; 0x70
 800a758:	677a      	str	r2, [r7, #116]	; 0x74
 800a75a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a75e:	4642      	mov	r2, r8
 800a760:	464b      	mov	r3, r9
 800a762:	1891      	adds	r1, r2, r2
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	415b      	adcs	r3, r3
 800a768:	60fb      	str	r3, [r7, #12]
 800a76a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a76e:	4641      	mov	r1, r8
 800a770:	1851      	adds	r1, r2, r1
 800a772:	6039      	str	r1, [r7, #0]
 800a774:	4649      	mov	r1, r9
 800a776:	414b      	adcs	r3, r1
 800a778:	607b      	str	r3, [r7, #4]
 800a77a:	f04f 0200 	mov.w	r2, #0
 800a77e:	f04f 0300 	mov.w	r3, #0
 800a782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a786:	4659      	mov	r1, fp
 800a788:	00cb      	lsls	r3, r1, #3
 800a78a:	4651      	mov	r1, sl
 800a78c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a790:	4651      	mov	r1, sl
 800a792:	00ca      	lsls	r2, r1, #3
 800a794:	4610      	mov	r0, r2
 800a796:	4619      	mov	r1, r3
 800a798:	4603      	mov	r3, r0
 800a79a:	4642      	mov	r2, r8
 800a79c:	189b      	adds	r3, r3, r2
 800a79e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7a0:	464b      	mov	r3, r9
 800a7a2:	460a      	mov	r2, r1
 800a7a4:	eb42 0303 	adc.w	r3, r2, r3
 800a7a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	663b      	str	r3, [r7, #96]	; 0x60
 800a7b4:	667a      	str	r2, [r7, #100]	; 0x64
 800a7b6:	f04f 0200 	mov.w	r2, #0
 800a7ba:	f04f 0300 	mov.w	r3, #0
 800a7be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	008b      	lsls	r3, r1, #2
 800a7c6:	4641      	mov	r1, r8
 800a7c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a7cc:	4641      	mov	r1, r8
 800a7ce:	008a      	lsls	r2, r1, #2
 800a7d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a7d4:	f7f5 fd64 	bl	80002a0 <__aeabi_uldivmod>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <UART_SetConfig+0x4e4>)
 800a7de:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e2:	095b      	lsrs	r3, r3, #5
 800a7e4:	2164      	movs	r1, #100	; 0x64
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	3332      	adds	r3, #50	; 0x32
 800a7f0:	4a08      	ldr	r2, [pc, #32]	; (800a814 <UART_SetConfig+0x4e4>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	095b      	lsrs	r3, r3, #5
 800a7f8:	f003 020f 	and.w	r2, r3, #15
 800a7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4422      	add	r2, r4
 800a804:	609a      	str	r2, [r3, #8]
}
 800a806:	bf00      	nop
 800a808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a80c:	46bd      	mov	sp, r7
 800a80e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a812:	bf00      	nop
 800a814:	51eb851f 	.word	0x51eb851f

0800a818 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d123      	bne.n	800a872 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a832:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	6851      	ldr	r1, [r2, #4]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	6892      	ldr	r2, [r2, #8]
 800a83e:	4311      	orrs	r1, r2
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	68d2      	ldr	r2, [r2, #12]
 800a844:	4311      	orrs	r1, r2
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	6912      	ldr	r2, [r2, #16]
 800a84a:	4311      	orrs	r1, r2
 800a84c:	683a      	ldr	r2, [r7, #0]
 800a84e:	6952      	ldr	r2, [r2, #20]
 800a850:	4311      	orrs	r1, r2
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	6992      	ldr	r2, [r2, #24]
 800a856:	4311      	orrs	r1, r2
 800a858:	683a      	ldr	r2, [r7, #0]
 800a85a:	69d2      	ldr	r2, [r2, #28]
 800a85c:	4311      	orrs	r1, r2
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	6a12      	ldr	r2, [r2, #32]
 800a862:	4311      	orrs	r1, r2
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a868:	430a      	orrs	r2, r1
 800a86a:	431a      	orrs	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	e028      	b.n	800a8c4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	69d9      	ldr	r1, [r3, #28]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	4319      	orrs	r1, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a888:	430b      	orrs	r3, r1
 800a88a:	431a      	orrs	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a898:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	6851      	ldr	r1, [r2, #4]
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	6892      	ldr	r2, [r2, #8]
 800a8a4:	4311      	orrs	r1, r2
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	68d2      	ldr	r2, [r2, #12]
 800a8aa:	4311      	orrs	r1, r2
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	6912      	ldr	r2, [r2, #16]
 800a8b0:	4311      	orrs	r1, r2
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	6952      	ldr	r2, [r2, #20]
 800a8b6:	4311      	orrs	r1, r2
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	6992      	ldr	r2, [r2, #24]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	431a      	orrs	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr

0800a8d2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b085      	sub	sp, #20
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d128      	bne.n	800a936 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	1e59      	subs	r1, r3, #1
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	011b      	lsls	r3, r3, #4
 800a8fa:	4319      	orrs	r1, r3
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	3b01      	subs	r3, #1
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	4319      	orrs	r1, r3
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	031b      	lsls	r3, r3, #12
 800a90e:	4319      	orrs	r1, r3
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	691b      	ldr	r3, [r3, #16]
 800a914:	3b01      	subs	r3, #1
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	4319      	orrs	r1, r3
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	3b01      	subs	r3, #1
 800a920:	051b      	lsls	r3, r3, #20
 800a922:	4319      	orrs	r1, r3
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	699b      	ldr	r3, [r3, #24]
 800a928:	3b01      	subs	r3, #1
 800a92a:	061b      	lsls	r3, r3, #24
 800a92c:	430b      	orrs	r3, r1
 800a92e:	431a      	orrs	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	609a      	str	r2, [r3, #8]
 800a934:	e02f      	b.n	800a996 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a93e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	68d2      	ldr	r2, [r2, #12]
 800a946:	3a01      	subs	r2, #1
 800a948:	0311      	lsls	r1, r2, #12
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	6952      	ldr	r2, [r2, #20]
 800a94e:	3a01      	subs	r2, #1
 800a950:	0512      	lsls	r2, r2, #20
 800a952:	430a      	orrs	r2, r1
 800a954:	431a      	orrs	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	1e59      	subs	r1, r3, #1
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	011b      	lsls	r3, r3, #4
 800a970:	4319      	orrs	r1, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	3b01      	subs	r3, #1
 800a978:	021b      	lsls	r3, r3, #8
 800a97a:	4319      	orrs	r1, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	3b01      	subs	r3, #1
 800a982:	041b      	lsls	r3, r3, #16
 800a984:	4319      	orrs	r1, r3
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	3b01      	subs	r3, #1
 800a98c:	061b      	lsls	r3, r3, #24
 800a98e:	430b      	orrs	r3, r1
 800a990:	431a      	orrs	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	f107 001c 	add.w	r0, r7, #28
 800a9b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d122      	bne.n	800aa02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a9d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d105      	bne.n	800a9f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f9c0 	bl	800ad7c <USB_CoreReset>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]
 800aa00:	e01a      	b.n	800aa38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f9b4 	bl	800ad7c <USB_CoreReset>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	639a      	str	r2, [r3, #56]	; 0x38
 800aa2a:	e005      	b.n	800aa38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d10b      	bne.n	800aa56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f043 0206 	orr.w	r2, r3, #6
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f043 0220 	orr.w	r2, r3, #32
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa62:	b004      	add	sp, #16
 800aa64:	4770      	bx	lr

0800aa66 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f043 0201 	orr.w	r2, r3, #1
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f023 0201 	bic.w	r2, r3, #1
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	460b      	mov	r3, r1
 800aab4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d115      	bne.n	800aaf8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aad8:	2001      	movs	r0, #1
 800aada:	f7f9 f983 	bl	8003de4 <HAL_Delay>
      ms++;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3301      	adds	r3, #1
 800aae2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 f93a 	bl	800ad5e <USB_GetMode>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d01e      	beq.n	800ab2e <USB_SetCurrentMode+0x84>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b31      	cmp	r3, #49	; 0x31
 800aaf4:	d9f0      	bls.n	800aad8 <USB_SetCurrentMode+0x2e>
 800aaf6:	e01a      	b.n	800ab2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d115      	bne.n	800ab2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	f7f9 f96a 	bl	8003de4 <HAL_Delay>
      ms++;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	3301      	adds	r3, #1
 800ab14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f921 	bl	800ad5e <USB_GetMode>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d005      	beq.n	800ab2e <USB_SetCurrentMode+0x84>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b31      	cmp	r3, #49	; 0x31
 800ab26:	d9f0      	bls.n	800ab0a <USB_SetCurrentMode+0x60>
 800ab28:	e001      	b.n	800ab2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e005      	b.n	800ab3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2b32      	cmp	r3, #50	; 0x32
 800ab32:	d101      	bne.n	800ab38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	e000      	b.n	800ab3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <USB_FlushTxFifo+0x64>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d901      	bls.n	800ab64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab60:	2303      	movs	r3, #3
 800ab62:	e01b      	b.n	800ab9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	daf2      	bge.n	800ab52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	019b      	lsls	r3, r3, #6
 800ab74:	f043 0220 	orr.w	r2, r3, #32
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4a08      	ldr	r2, [pc, #32]	; (800aba8 <USB_FlushTxFifo+0x64>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d901      	bls.n	800ab8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	e006      	b.n	800ab9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	f003 0320 	and.w	r3, r3, #32
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d0f0      	beq.n	800ab7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	00030d40 	.word	0x00030d40

0800abac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abb4:	2300      	movs	r3, #0
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3301      	adds	r3, #1
 800abbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	4a11      	ldr	r2, [pc, #68]	; (800ac08 <USB_FlushRxFifo+0x5c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d901      	bls.n	800abca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e018      	b.n	800abfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	daf2      	bge.n	800abb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2210      	movs	r2, #16
 800abda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3301      	adds	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4a08      	ldr	r2, [pc, #32]	; (800ac08 <USB_FlushRxFifo+0x5c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d901      	bls.n	800abee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	e006      	b.n	800abfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f003 0310 	and.w	r3, r3, #16
 800abf6:	2b10      	cmp	r3, #16
 800abf8:	d0f0      	beq.n	800abdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	00030d40 	.word	0x00030d40

0800ac0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b089      	sub	sp, #36	; 0x24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	4611      	mov	r1, r2
 800ac18:	461a      	mov	r2, r3
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	71fb      	strb	r3, [r7, #7]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ac2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d123      	bne.n	800ac7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac32:	88bb      	ldrh	r3, [r7, #4]
 800ac34:	3303      	adds	r3, #3
 800ac36:	089b      	lsrs	r3, r3, #2
 800ac38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	e018      	b.n	800ac72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	031a      	lsls	r2, r3, #12
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac54:	69fb      	ldr	r3, [r7, #28]
 800ac56:	3301      	adds	r3, #1
 800ac58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac60:	69fb      	ldr	r3, [r7, #28]
 800ac62:	3301      	adds	r3, #1
 800ac64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	61bb      	str	r3, [r7, #24]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d3e2      	bcc.n	800ac40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3724      	adds	r7, #36	; 0x24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b08b      	sub	sp, #44	; 0x2c
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	089b      	lsrs	r3, r3, #2
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aca6:	88fb      	ldrh	r3, [r7, #6]
 800aca8:	f003 0303 	and.w	r3, r3, #3
 800acac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800acae:	2300      	movs	r3, #0
 800acb0:	623b      	str	r3, [r7, #32]
 800acb2:	e014      	b.n	800acde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	601a      	str	r2, [r3, #0]
    pDest++;
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc2:	3301      	adds	r3, #1
 800acc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	3301      	adds	r3, #1
 800acca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acce:	3301      	adds	r3, #1
 800acd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	3301      	adds	r3, #1
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	3301      	adds	r3, #1
 800acdc:	623b      	str	r3, [r7, #32]
 800acde:	6a3a      	ldr	r2, [r7, #32]
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d3e6      	bcc.n	800acb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ace6:	8bfb      	ldrh	r3, [r7, #30]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d01e      	beq.n	800ad2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acf6:	461a      	mov	r2, r3
 800acf8:	f107 0310 	add.w	r3, r7, #16
 800acfc:	6812      	ldr	r2, [r2, #0]
 800acfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	00db      	lsls	r3, r3, #3
 800ad08:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	701a      	strb	r2, [r3, #0]
      i++;
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	3301      	adds	r3, #1
 800ad16:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ad1e:	8bfb      	ldrh	r3, [r7, #30]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad24:	8bfb      	ldrh	r3, [r7, #30]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1ea      	bne.n	800ad00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	372c      	adds	r7, #44	; 0x2c
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	699b      	ldr	r3, [r3, #24]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad50:	68fb      	ldr	r3, [r7, #12]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3714      	adds	r7, #20
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr

0800ad5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad5e:	b480      	push	{r7}
 800ad60:	b083      	sub	sp, #12
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	695b      	ldr	r3, [r3, #20]
 800ad6a:	f003 0301 	and.w	r3, r3, #1
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr
	...

0800ad7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad84:	2300      	movs	r3, #0
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <USB_CoreReset+0x64>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d901      	bls.n	800ad9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e01b      	b.n	800add2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	daf2      	bge.n	800ad88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	f043 0201 	orr.w	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3301      	adds	r3, #1
 800adb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4a09      	ldr	r2, [pc, #36]	; (800ade0 <USB_CoreReset+0x64>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d901      	bls.n	800adc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e006      	b.n	800add2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f003 0301 	and.w	r3, r3, #1
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d0f0      	beq.n	800adb2 <USB_CoreReset+0x36>

  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	00030d40 	.word	0x00030d40

0800ade4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ade4:	b084      	sub	sp, #16
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b086      	sub	sp, #24
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
 800adee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800adf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae04:	461a      	mov	r2, r3
 800ae06:	2300      	movs	r3, #0
 800ae08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d018      	beq.n	800ae6c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d10a      	bne.n	800ae56 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae4e:	f043 0304 	orr.w	r3, r3, #4
 800ae52:	6013      	str	r3, [r2, #0]
 800ae54:	e014      	b.n	800ae80 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae64:	f023 0304 	bic.w	r3, r3, #4
 800ae68:	6013      	str	r3, [r2, #0]
 800ae6a:	e009      	b.n	800ae80 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ae7a:	f023 0304 	bic.w	r3, r3, #4
 800ae7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae80:	2110      	movs	r1, #16
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fe5e 	bl	800ab44 <USB_FlushTxFifo>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fe8a 	bl	800abac <USB_FlushRxFifo>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d001      	beq.n	800aea2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
 800aea6:	e015      	b.n	800aed4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aec8:	461a      	mov	r2, r3
 800aeca:	2300      	movs	r3, #0
 800aecc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	3301      	adds	r3, #1
 800aed2:	613b      	str	r3, [r7, #16]
 800aed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d3e5      	bcc.n	800aea8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aee8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00b      	beq.n	800af0e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aefc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a13      	ldr	r2, [pc, #76]	; (800af50 <USB_HostInit+0x16c>)
 800af02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a13      	ldr	r2, [pc, #76]	; (800af54 <USB_HostInit+0x170>)
 800af08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800af0c:	e009      	b.n	800af22 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2280      	movs	r2, #128	; 0x80
 800af12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a10      	ldr	r2, [pc, #64]	; (800af58 <USB_HostInit+0x174>)
 800af18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a0f      	ldr	r2, [pc, #60]	; (800af5c <USB_HostInit+0x178>)
 800af1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	2b00      	cmp	r3, #0
 800af26:	d105      	bne.n	800af34 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	699b      	ldr	r3, [r3, #24]
 800af2c:	f043 0210 	orr.w	r2, r3, #16
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	699a      	ldr	r2, [r3, #24]
 800af38:	4b09      	ldr	r3, [pc, #36]	; (800af60 <USB_HostInit+0x17c>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af4c:	b004      	add	sp, #16
 800af4e:	4770      	bx	lr
 800af50:	01000200 	.word	0x01000200
 800af54:	00e00300 	.word	0x00e00300
 800af58:	00600080 	.word	0x00600080
 800af5c:	004000e0 	.word	0x004000e0
 800af60:	a3200008 	.word	0xa3200008

0800af64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	f003 0303 	and.w	r3, r3, #3
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800af9c:	4313      	orrs	r3, r2
 800af9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d107      	bne.n	800afb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afac:	461a      	mov	r2, r3
 800afae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800afb2:	6053      	str	r3, [r2, #4]
 800afb4:	e009      	b.n	800afca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800afb6:	78fb      	ldrb	r3, [r7, #3]
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d106      	bne.n	800afca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afc2:	461a      	mov	r2, r3
 800afc4:	f241 7370 	movw	r3, #6000	; 0x1770
 800afc8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aff8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b006:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b008:	2064      	movs	r0, #100	; 0x64
 800b00a:	f7f8 feeb 	bl	8003de4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b01a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b01c:	200a      	movs	r0, #10
 800b01e:	f7f8 fee1 	bl	8003de4 <HAL_Delay>

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3710      	adds	r7, #16
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b085      	sub	sp, #20
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800b050:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d109      	bne.n	800b070 <USB_DriveVbus+0x44>
 800b05c:	78fb      	ldrb	r3, [r7, #3]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d106      	bne.n	800b070 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b06a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b06e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b07a:	d109      	bne.n	800b090 <USB_DriveVbus+0x64>
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800b08a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b08e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b085      	sub	sp, #20
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	0c5b      	lsrs	r3, r3, #17
 800b0bc:	f003 0303 	and.w	r3, r3, #3
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3714      	adds	r7, #20
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0de:	689b      	ldr	r3, [r3, #8]
 800b0e0:	b29b      	uxth	r3, r3
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4603      	mov	r3, r0
 800b100:	70fb      	strb	r3, [r7, #3]
 800b102:	460b      	mov	r3, r1
 800b104:	70bb      	strb	r3, [r7, #2]
 800b106:	4613      	mov	r3, r2
 800b108:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b10a:	2300      	movs	r3, #0
 800b10c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800b112:	78fb      	ldrb	r3, [r7, #3]
 800b114:	015a      	lsls	r2, r3, #5
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	4413      	add	r3, r2
 800b11a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b11e:	461a      	mov	r2, r3
 800b120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b124:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b126:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d87e      	bhi.n	800b22c <USB_HC_Init+0x13c>
 800b12e:	a201      	add	r2, pc, #4	; (adr r2, 800b134 <USB_HC_Init+0x44>)
 800b130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b134:	0800b145 	.word	0x0800b145
 800b138:	0800b1ef 	.word	0x0800b1ef
 800b13c:	0800b145 	.word	0x0800b145
 800b140:	0800b1b1 	.word	0x0800b1b1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b144:	78fb      	ldrb	r3, [r7, #3]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b150:	461a      	mov	r2, r3
 800b152:	f240 439d 	movw	r3, #1181	; 0x49d
 800b156:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b158:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	da10      	bge.n	800b182 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	4413      	add	r3, r2
 800b168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	0151      	lsls	r1, r2, #5
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	440a      	add	r2, r1
 800b176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b17a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b17e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800b180:	e057      	b.n	800b232 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d051      	beq.n	800b232 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b18e:	78fb      	ldrb	r3, [r7, #3]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	4413      	add	r3, r2
 800b196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	78fa      	ldrb	r2, [r7, #3]
 800b19e:	0151      	lsls	r1, r2, #5
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	440a      	add	r2, r1
 800b1a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b1ac:	60d3      	str	r3, [r2, #12]
      break;
 800b1ae:	e040      	b.n	800b232 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	015a      	lsls	r2, r3, #5
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1bc:	461a      	mov	r2, r3
 800b1be:	f240 639d 	movw	r3, #1693	; 0x69d
 800b1c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b1c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	da34      	bge.n	800b236 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	78fa      	ldrb	r2, [r7, #3]
 800b1dc:	0151      	lsls	r1, r2, #5
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	440a      	add	r2, r1
 800b1e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1ea:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b1ec:	e023      	b.n	800b236 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b1ee:	78fb      	ldrb	r3, [r7, #3]
 800b1f0:	015a      	lsls	r2, r3, #5
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f240 2325 	movw	r3, #549	; 0x225
 800b200:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b202:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b206:	2b00      	cmp	r3, #0
 800b208:	da17      	bge.n	800b23a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b20a:	78fb      	ldrb	r3, [r7, #3]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	4413      	add	r3, r2
 800b212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	78fa      	ldrb	r2, [r7, #3]
 800b21a:	0151      	lsls	r1, r2, #5
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	440a      	add	r2, r1
 800b220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b224:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800b228:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b22a:	e006      	b.n	800b23a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	77fb      	strb	r3, [r7, #31]
      break;
 800b230:	e004      	b.n	800b23c <USB_HC_Init+0x14c>
      break;
 800b232:	bf00      	nop
 800b234:	e002      	b.n	800b23c <USB_HC_Init+0x14c>
      break;
 800b236:	bf00      	nop
 800b238:	e000      	b.n	800b23c <USB_HC_Init+0x14c>
      break;
 800b23a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b23c:	78fb      	ldrb	r3, [r7, #3]
 800b23e:	015a      	lsls	r2, r3, #5
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	4413      	add	r3, r2
 800b244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	78fa      	ldrb	r2, [r7, #3]
 800b24c:	0151      	lsls	r1, r2, #5
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	440a      	add	r2, r1
 800b252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b256:	f043 0302 	orr.w	r3, r3, #2
 800b25a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b262:	699a      	ldr	r2, [r3, #24]
 800b264:	78fb      	ldrb	r3, [r7, #3]
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	2101      	movs	r1, #1
 800b26c:	fa01 f303 	lsl.w	r3, r1, r3
 800b270:	6939      	ldr	r1, [r7, #16]
 800b272:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b276:	4313      	orrs	r3, r2
 800b278:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b286:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	da03      	bge.n	800b296 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b28e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b292:	61bb      	str	r3, [r7, #24]
 800b294:	e001      	b.n	800b29a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800b296:	2300      	movs	r3, #0
 800b298:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7ff feff 	bl	800b09e <USB_GetHostSpeed>
 800b2a0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b2a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d106      	bne.n	800b2b8 <USB_HC_Init+0x1c8>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d003      	beq.n	800b2b8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b2b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2b4:	617b      	str	r3, [r7, #20]
 800b2b6:	e001      	b.n	800b2bc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2bc:	787b      	ldrb	r3, [r7, #1]
 800b2be:	059b      	lsls	r3, r3, #22
 800b2c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b2c4:	78bb      	ldrb	r3, [r7, #2]
 800b2c6:	02db      	lsls	r3, r3, #11
 800b2c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2cc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b2ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b2d2:	049b      	lsls	r3, r3, #18
 800b2d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b2d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b2da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b2dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b2e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2e6:	78fb      	ldrb	r3, [r7, #3]
 800b2e8:	0159      	lsls	r1, r3, #5
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	440b      	add	r3, r1
 800b2ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b2f8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b2fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d003      	beq.n	800b30a <USB_HC_Init+0x21a>
 800b302:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b306:	2b01      	cmp	r3, #1
 800b308:	d10f      	bne.n	800b32a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b30a:	78fb      	ldrb	r3, [r7, #3]
 800b30c:	015a      	lsls	r2, r3, #5
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	4413      	add	r3, r2
 800b312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	78fa      	ldrb	r2, [r7, #3]
 800b31a:	0151      	lsls	r1, r2, #5
 800b31c:	693a      	ldr	r2, [r7, #16]
 800b31e:	440a      	add	r2, r1
 800b320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b324:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b328:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b32a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08c      	sub	sp, #48	; 0x30
 800b338:	af02      	add	r7, sp, #8
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4613      	mov	r3, r2
 800b340:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	785b      	ldrb	r3, [r3, #1]
 800b34a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b34c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b350:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d02d      	beq.n	800b3ba <USB_HC_StartXfer+0x86>
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	791b      	ldrb	r3, [r3, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d129      	bne.n	800b3ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d117      	bne.n	800b39c <USB_HC_StartXfer+0x68>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	79db      	ldrb	r3, [r3, #7]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d003      	beq.n	800b37c <USB_HC_StartXfer+0x48>
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	79db      	ldrb	r3, [r3, #7]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d10f      	bne.n	800b39c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	015a      	lsls	r2, r3, #5
 800b380:	6a3b      	ldr	r3, [r7, #32]
 800b382:	4413      	add	r3, r2
 800b384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	69fa      	ldr	r2, [r7, #28]
 800b38c:	0151      	lsls	r1, r2, #5
 800b38e:	6a3a      	ldr	r2, [r7, #32]
 800b390:	440a      	add	r2, r1
 800b392:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b39a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800b39c:	79fb      	ldrb	r3, [r7, #7]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10b      	bne.n	800b3ba <USB_HC_StartXfer+0x86>
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	795b      	ldrb	r3, [r3, #5]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d107      	bne.n	800b3ba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	785b      	ldrb	r3, [r3, #1]
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f000 fa0f 	bl	800b7d4 <USB_DoPing>
      return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	e0f8      	b.n	800b5ac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	695b      	ldr	r3, [r3, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d018      	beq.n	800b3f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	695b      	ldr	r3, [r3, #20]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	8912      	ldrh	r2, [r2, #8]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	8912      	ldrh	r2, [r2, #8]
 800b3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3d6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b3d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3da:	8b7b      	ldrh	r3, [r7, #26]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d90b      	bls.n	800b3f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800b3e0:	8b7b      	ldrh	r3, [r7, #26]
 800b3e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b3e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	8912      	ldrh	r2, [r2, #8]
 800b3ea:	fb03 f202 	mul.w	r2, r3, r2
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	611a      	str	r2, [r3, #16]
 800b3f2:	e001      	b.n	800b3f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	78db      	ldrb	r3, [r3, #3]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d007      	beq.n	800b410 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	8912      	ldrh	r2, [r2, #8]
 800b406:	fb03 f202 	mul.w	r2, r3, r2
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	611a      	str	r2, [r3, #16]
 800b40e:	e003      	b.n	800b418 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	695a      	ldr	r2, [r3, #20]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b420:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b422:	04d9      	lsls	r1, r3, #19
 800b424:	4b63      	ldr	r3, [pc, #396]	; (800b5b4 <USB_HC_StartXfer+0x280>)
 800b426:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b428:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	7a9b      	ldrb	r3, [r3, #10]
 800b42e:	075b      	lsls	r3, r3, #29
 800b430:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b434:	69f9      	ldr	r1, [r7, #28]
 800b436:	0148      	lsls	r0, r1, #5
 800b438:	6a39      	ldr	r1, [r7, #32]
 800b43a:	4401      	add	r1, r0
 800b43c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b440:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b442:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b444:	79fb      	ldrb	r3, [r7, #7]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d009      	beq.n	800b45e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	68d9      	ldr	r1, [r3, #12]
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	4413      	add	r3, r2
 800b456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b45a:	460a      	mov	r2, r1
 800b45c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bf0c      	ite	eq
 800b46e:	2301      	moveq	r3, #1
 800b470:	2300      	movne	r3, #0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	015a      	lsls	r2, r3, #5
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	4413      	add	r3, r2
 800b47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	0151      	lsls	r1, r2, #5
 800b488:	6a3a      	ldr	r2, [r7, #32]
 800b48a:	440a      	add	r2, r1
 800b48c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b490:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b494:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b496:	69fb      	ldr	r3, [r7, #28]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	7e7b      	ldrb	r3, [r7, #25]
 800b4a6:	075b      	lsls	r3, r3, #29
 800b4a8:	69f9      	ldr	r1, [r7, #28]
 800b4aa:	0148      	lsls	r0, r1, #5
 800b4ac:	6a39      	ldr	r1, [r7, #32]
 800b4ae:	4401      	add	r1, r0
 800b4b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4ce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	78db      	ldrb	r3, [r3, #3]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d004      	beq.n	800b4e2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4de:	613b      	str	r3, [r7, #16]
 800b4e0:	e003      	b.n	800b4ea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4e8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4f0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4fe:	461a      	mov	r2, r3
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e04e      	b.n	800b5ac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	78db      	ldrb	r3, [r3, #3]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d149      	bne.n	800b5aa <USB_HC_StartXfer+0x276>
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d045      	beq.n	800b5aa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	79db      	ldrb	r3, [r3, #7]
 800b522:	2b03      	cmp	r3, #3
 800b524:	d830      	bhi.n	800b588 <USB_HC_StartXfer+0x254>
 800b526:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <USB_HC_StartXfer+0x1f8>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b53d 	.word	0x0800b53d
 800b530:	0800b561 	.word	0x0800b561
 800b534:	0800b53d 	.word	0x0800b53d
 800b538:	0800b561 	.word	0x0800b561
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	3303      	adds	r3, #3
 800b542:	089b      	lsrs	r3, r3, #2
 800b544:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b546:	8afa      	ldrh	r2, [r7, #22]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	b29b      	uxth	r3, r3
 800b54e:	429a      	cmp	r2, r3
 800b550:	d91c      	bls.n	800b58c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	f043 0220 	orr.w	r2, r3, #32
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b55e:	e015      	b.n	800b58c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	695b      	ldr	r3, [r3, #20]
 800b564:	3303      	adds	r3, #3
 800b566:	089b      	lsrs	r3, r3, #2
 800b568:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b56a:	8afa      	ldrh	r2, [r7, #22]
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	b29b      	uxth	r3, r3
 800b576:	429a      	cmp	r2, r3
 800b578:	d90a      	bls.n	800b590 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	699b      	ldr	r3, [r3, #24]
 800b57e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	619a      	str	r2, [r3, #24]
        }
        break;
 800b586:	e003      	b.n	800b590 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b588:	bf00      	nop
 800b58a:	e002      	b.n	800b592 <USB_HC_StartXfer+0x25e>
        break;
 800b58c:	bf00      	nop
 800b58e:	e000      	b.n	800b592 <USB_HC_StartXfer+0x25e>
        break;
 800b590:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	68d9      	ldr	r1, [r3, #12]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	785a      	ldrb	r2, [r3, #1]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	695b      	ldr	r3, [r3, #20]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	9000      	str	r0, [sp, #0]
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fb31 	bl	800ac0c <USB_WritePacket>
  }

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3728      	adds	r7, #40	; 0x28
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	1ff80000 	.word	0x1ff80000

0800b5b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5ca:	695b      	ldr	r3, [r3, #20]
 800b5cc:	b29b      	uxth	r3, r3
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	b089      	sub	sp, #36	; 0x24
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	6078      	str	r0, [r7, #4]
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b5ea:	78fb      	ldrb	r3, [r7, #3]
 800b5ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	0c9b      	lsrs	r3, r3, #18
 800b602:	f003 0303 	and.w	r3, r3, #3
 800b606:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	015a      	lsls	r2, r3, #5
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	4413      	add	r3, r2
 800b610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	0fdb      	lsrs	r3, r3, #31
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 0320 	and.w	r3, r3, #32
 800b626:	2b20      	cmp	r3, #32
 800b628:	d104      	bne.n	800b634 <USB_HC_Halt+0x5a>
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	e0c8      	b.n	800b7c6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d002      	beq.n	800b640 <USB_HC_Halt+0x66>
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d163      	bne.n	800b708 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	015a      	lsls	r2, r3, #5
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	4413      	add	r3, r2
 800b648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69ba      	ldr	r2, [r7, #24]
 800b650:	0151      	lsls	r1, r2, #5
 800b652:	69fa      	ldr	r2, [r7, #28]
 800b654:	440a      	add	r2, r1
 800b656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b65a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b65e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f003 0320 	and.w	r3, r3, #32
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f040 80ab 	bne.w	800b7c4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b672:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d133      	bne.n	800b6e2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	0151      	lsls	r1, r2, #5
 800b68c:	69fa      	ldr	r2, [r7, #28]
 800b68e:	440a      	add	r2, r1
 800b690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b698:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b6b8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6c6:	d81d      	bhi.n	800b704 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6de:	d0ec      	beq.n	800b6ba <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b6e0:	e070      	b.n	800b7c4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	0151      	lsls	r1, r2, #5
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	440a      	add	r2, r1
 800b6f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b6fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b700:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b702:	e05f      	b.n	800b7c4 <USB_HC_Halt+0x1ea>
            break;
 800b704:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b706:	e05d      	b.n	800b7c4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	015a      	lsls	r2, r3, #5
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	4413      	add	r3, r2
 800b710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	0151      	lsls	r1, r2, #5
 800b71a:	69fa      	ldr	r2, [r7, #28]
 800b71c:	440a      	add	r2, r1
 800b71e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b726:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d133      	bne.n	800b7a0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	0151      	lsls	r1, r2, #5
 800b74a:	69fa      	ldr	r2, [r7, #28]
 800b74c:	440a      	add	r2, r1
 800b74e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b752:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b756:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	0151      	lsls	r1, r2, #5
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	440a      	add	r2, r1
 800b76e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b776:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b784:	d81d      	bhi.n	800b7c2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b79c:	d0ec      	beq.n	800b778 <USB_HC_Halt+0x19e>
 800b79e:	e011      	b.n	800b7c4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	015a      	lsls	r2, r3, #5
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	0151      	lsls	r1, r2, #5
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	440a      	add	r2, r1
 800b7b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b7ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	e000      	b.n	800b7c4 <USB_HC_Halt+0x1ea>
          break;
 800b7c2:	bf00      	nop
    }
  }

  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3724      	adds	r7, #36	; 0x24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
	...

0800b7d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b7e4:	78fb      	ldrb	r3, [r7, #3]
 800b7e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	04da      	lsls	r2, r3, #19
 800b7f0:	4b15      	ldr	r3, [pc, #84]	; (800b848 <USB_DoPing+0x74>)
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	0151      	lsls	r1, r2, #5
 800b7f8:	697a      	ldr	r2, [r7, #20]
 800b7fa:	440a      	add	r2, r1
 800b7fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b804:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b81c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b824:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b832:	461a      	mov	r2, r3
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	1ff80000 	.word	0x1ff80000

0800b84c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b088      	sub	sp, #32
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7ff f911 	bl	800aa88 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b866:	2110      	movs	r1, #16
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff f96b 	bl	800ab44 <USB_FlushTxFifo>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff f997 	bl	800abac <USB_FlushRxFifo>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b888:	2300      	movs	r3, #0
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	e01f      	b.n	800b8ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	4413      	add	r3, r2
 800b896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b8b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	61bb      	str	r3, [r7, #24]
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b0f      	cmp	r3, #15
 800b8d2:	d9dc      	bls.n	800b88e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	e034      	b.n	800b944 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	015a      	lsls	r2, r3, #5
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b8f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b900:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b90e:	461a      	mov	r2, r3
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3301      	adds	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b920:	d80c      	bhi.n	800b93c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b938:	d0ec      	beq.n	800b914 <USB_StopHost+0xc8>
 800b93a:	e000      	b.n	800b93e <USB_StopHost+0xf2>
        break;
 800b93c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	3301      	adds	r3, #1
 800b942:	61bb      	str	r3, [r7, #24]
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	2b0f      	cmp	r3, #15
 800b948:	d9c7      	bls.n	800b8da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b950:	461a      	mov	r2, r3
 800b952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b956:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b95e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff f880 	bl	800aa66 <USB_EnableGlobalInt>

  return ret;
 800b966:	7ffb      	ldrb	r3, [r7, #31]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3720      	adds	r7, #32
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b974:	4904      	ldr	r1, [pc, #16]	; (800b988 <MX_FATFS_Init+0x18>)
 800b976:	4805      	ldr	r0, [pc, #20]	; (800b98c <MX_FATFS_Init+0x1c>)
 800b978:	f005 fc64 	bl	8011244 <FATFS_LinkDriver>
 800b97c:	4603      	mov	r3, r0
 800b97e:	461a      	mov	r2, r3
 800b980:	4b03      	ldr	r3, [pc, #12]	; (800b990 <MX_FATFS_Init+0x20>)
 800b982:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b984:	bf00      	nop
 800b986:	bd80      	pop	{r7, pc}
 800b988:	200033ec 	.word	0x200033ec
 800b98c:	08013bb8 	.word	0x08013bb8
 800b990:	200033e8 	.word	0x200033e8

0800b994 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b994:	b480      	push	{r7}
 800b996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b998:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b083      	sub	sp, #12
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b9ca:	79fb      	ldrb	r3, [r7, #7]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	4808      	ldr	r0, [pc, #32]	; (800b9f0 <USBH_status+0x34>)
 800b9d0:	f000 fe32 	bl	800c638 <USBH_MSC_UnitIsReady>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <USBH_status+0x24>
  {
    res = RES_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73fb      	strb	r3, [r7, #15]
 800b9de:	e001      	b.n	800b9e4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	20003884 	.word	0x20003884

0800b9f4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b094      	sub	sp, #80	; 0x50
 800b9f8:	af02      	add	r7, sp, #8
 800b9fa:	60b9      	str	r1, [r7, #8]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	603b      	str	r3, [r7, #0]
 800ba00:	4603      	mov	r3, r0
 800ba02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800ba0a:	7bf9      	ldrb	r1, [r7, #15]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	4813      	ldr	r0, [pc, #76]	; (800ba64 <USBH_read+0x70>)
 800ba16:	f000 fe59 	bl	800c6cc <USBH_MSC_Read>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d103      	bne.n	800ba28 <USBH_read+0x34>
  {
    res = RES_OK;
 800ba20:	2300      	movs	r3, #0
 800ba22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ba26:	e017      	b.n	800ba58 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ba28:	f107 0210 	add.w	r2, r7, #16
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	480c      	ldr	r0, [pc, #48]	; (800ba64 <USBH_read+0x70>)
 800ba32:	f000 fe27 	bl	800c684 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800ba36:	7f7b      	ldrb	r3, [r7, #29]
 800ba38:	2b3a      	cmp	r3, #58	; 0x3a
 800ba3a:	d005      	beq.n	800ba48 <USBH_read+0x54>
 800ba3c:	2b3a      	cmp	r3, #58	; 0x3a
 800ba3e:	dc07      	bgt.n	800ba50 <USBH_read+0x5c>
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d001      	beq.n	800ba48 <USBH_read+0x54>
 800ba44:	2b28      	cmp	r3, #40	; 0x28
 800ba46:	d103      	bne.n	800ba50 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ba4e:	e003      	b.n	800ba58 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800ba56:	bf00      	nop
    }
  }

  return res;
 800ba58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3748      	adds	r7, #72	; 0x48
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20003884 	.word	0x20003884

0800ba68 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b094      	sub	sp, #80	; 0x50
 800ba6c:	af02      	add	r7, sp, #8
 800ba6e:	60b9      	str	r1, [r7, #8]
 800ba70:	607a      	str	r2, [r7, #4]
 800ba72:	603b      	str	r3, [r7, #0]
 800ba74:	4603      	mov	r3, r0
 800ba76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800ba7e:	7bf9      	ldrb	r1, [r7, #15]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	4817      	ldr	r0, [pc, #92]	; (800bae8 <USBH_write+0x80>)
 800ba8a:	f000 fe88 	bl	800c79e <USBH_MSC_Write>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d103      	bne.n	800ba9c <USBH_write+0x34>
  {
    res = RES_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ba9a:	e01f      	b.n	800badc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800ba9c:	f107 0210 	add.w	r2, r7, #16
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4619      	mov	r1, r3
 800baa4:	4810      	ldr	r0, [pc, #64]	; (800bae8 <USBH_write+0x80>)
 800baa6:	f000 fded 	bl	800c684 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800baaa:	7f7b      	ldrb	r3, [r7, #29]
 800baac:	2b3a      	cmp	r3, #58	; 0x3a
 800baae:	d00d      	beq.n	800bacc <USBH_write+0x64>
 800bab0:	2b3a      	cmp	r3, #58	; 0x3a
 800bab2:	dc0f      	bgt.n	800bad4 <USBH_write+0x6c>
 800bab4:	2b28      	cmp	r3, #40	; 0x28
 800bab6:	d009      	beq.n	800bacc <USBH_write+0x64>
 800bab8:	2b28      	cmp	r3, #40	; 0x28
 800baba:	dc0b      	bgt.n	800bad4 <USBH_write+0x6c>
 800babc:	2b04      	cmp	r3, #4
 800babe:	d005      	beq.n	800bacc <USBH_write+0x64>
 800bac0:	2b27      	cmp	r3, #39	; 0x27
 800bac2:	d107      	bne.n	800bad4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800bac4:	2302      	movs	r3, #2
 800bac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800baca:	e007      	b.n	800badc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800bacc:	2303      	movs	r3, #3
 800bace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800bad2:	e003      	b.n	800badc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800bada:	bf00      	nop
    }
  }

  return res;
 800badc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3748      	adds	r7, #72	; 0x48
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20003884 	.word	0x20003884

0800baec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b090      	sub	sp, #64	; 0x40
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	4603      	mov	r3, r0
 800baf4:	603a      	str	r2, [r7, #0]
 800baf6:	71fb      	strb	r3, [r7, #7]
 800baf8:	460b      	mov	r3, r1
 800bafa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800bb02:	79bb      	ldrb	r3, [r7, #6]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d852      	bhi.n	800bbae <USBH_ioctl+0xc2>
 800bb08:	a201      	add	r2, pc, #4	; (adr r2, 800bb10 <USBH_ioctl+0x24>)
 800bb0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0e:	bf00      	nop
 800bb10:	0800bb21 	.word	0x0800bb21
 800bb14:	0800bb29 	.word	0x0800bb29
 800bb18:	0800bb53 	.word	0x0800bb53
 800bb1c:	0800bb7f 	.word	0x0800bb7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800bb26:	e045      	b.n	800bbb4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800bb28:	f107 0208 	add.w	r2, r7, #8
 800bb2c:	79fb      	ldrb	r3, [r7, #7]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4823      	ldr	r0, [pc, #140]	; (800bbc0 <USBH_ioctl+0xd4>)
 800bb32:	f000 fda7 	bl	800c684 <USBH_MSC_GetLUNInfo>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800bb42:	2300      	movs	r3, #0
 800bb44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800bb48:	e034      	b.n	800bbb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800bb50:	e030      	b.n	800bbb4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800bb52:	f107 0208 	add.w	r2, r7, #8
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4819      	ldr	r0, [pc, #100]	; (800bbc0 <USBH_ioctl+0xd4>)
 800bb5c:	f000 fd92 	bl	800c684 <USBH_MSC_GetLUNInfo>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d107      	bne.n	800bb76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800bb66:	8a3b      	ldrh	r3, [r7, #16]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800bb74:	e01e      	b.n	800bbb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800bb7c:	e01a      	b.n	800bbb4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800bb7e:	f107 0208 	add.w	r2, r7, #8
 800bb82:	79fb      	ldrb	r3, [r7, #7]
 800bb84:	4619      	mov	r1, r3
 800bb86:	480e      	ldr	r0, [pc, #56]	; (800bbc0 <USBH_ioctl+0xd4>)
 800bb88:	f000 fd7c 	bl	800c684 <USBH_MSC_GetLUNInfo>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d109      	bne.n	800bba6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800bb92:	8a3b      	ldrh	r3, [r7, #16]
 800bb94:	0a5b      	lsrs	r3, r3, #9
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	461a      	mov	r2, r3
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800bba4:	e006      	b.n	800bbb4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800bbac:	e002      	b.n	800bbb4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800bbae:	2304      	movs	r3, #4
 800bbb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800bbb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3740      	adds	r7, #64	; 0x40
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	20003884 	.word	0x20003884

0800bbc4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bbc4:	b590      	push	{r4, r7, lr}
 800bbc6:	b089      	sub	sp, #36	; 0x24
 800bbc8:	af04      	add	r7, sp, #16
 800bbca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbd2:	7919      	ldrb	r1, [r3, #4]
 800bbd4:	2350      	movs	r3, #80	; 0x50
 800bbd6:	2206      	movs	r2, #6
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f001 fc6b 	bl	800d4b4 <USBH_FindInterface>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	2bff      	cmp	r3, #255	; 0xff
 800bbe6:	d002      	beq.n	800bbee <USBH_MSC_InterfaceInit+0x2a>
 800bbe8:	7bfb      	ldrb	r3, [r7, #15]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d901      	bls.n	800bbf2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e106      	b.n	800be00 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f001 fc40 	bl	800d47c <USBH_SelectInterface>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bc00:	7bbb      	ldrb	r3, [r7, #14]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800bc06:	2302      	movs	r3, #2
 800bc08:	e0fa      	b.n	800be00 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800bc10:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bc14:	f005 fe9e 	bl	8011954 <malloc>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800bc2c:	2302      	movs	r3, #2
 800bc2e:	e0e7      	b.n	800be00 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800bc30:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc34:	2100      	movs	r1, #0
 800bc36:	68b8      	ldr	r0, [r7, #8]
 800bc38:	f005 feaa 	bl	8011990 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	211a      	movs	r1, #26
 800bc42:	fb01 f303 	mul.w	r3, r1, r3
 800bc46:	4413      	add	r3, r2
 800bc48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	b25b      	sxtb	r3, r3
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	da16      	bge.n	800bc82 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	211a      	movs	r1, #26
 800bc5a:	fb01 f303 	mul.w	r3, r1, r3
 800bc5e:	4413      	add	r3, r2
 800bc60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc64:	781a      	ldrb	r2, [r3, #0]
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	211a      	movs	r1, #26
 800bc70:	fb01 f303 	mul.w	r3, r1, r3
 800bc74:	4413      	add	r3, r2
 800bc76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bc7a:	881a      	ldrh	r2, [r3, #0]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	815a      	strh	r2, [r3, #10]
 800bc80:	e015      	b.n	800bcae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	211a      	movs	r1, #26
 800bc88:	fb01 f303 	mul.w	r3, r1, r3
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800bc92:	781a      	ldrb	r2, [r3, #0]
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	211a      	movs	r1, #26
 800bc9e:	fb01 f303 	mul.w	r3, r1, r3
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800bca8:	881a      	ldrh	r2, [r3, #0]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	211a      	movs	r1, #26
 800bcb4:	fb01 f303 	mul.w	r3, r1, r3
 800bcb8:	4413      	add	r3, r2
 800bcba:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	b25b      	sxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da16      	bge.n	800bcf4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800bcc6:	7bfb      	ldrb	r3, [r7, #15]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	211a      	movs	r1, #26
 800bccc:	fb01 f303 	mul.w	r3, r1, r3
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	211a      	movs	r1, #26
 800bce2:	fb01 f303 	mul.w	r3, r1, r3
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bcec:	881a      	ldrh	r2, [r3, #0]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	815a      	strh	r2, [r3, #10]
 800bcf2:	e015      	b.n	800bd20 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800bcf4:	7bfb      	ldrb	r3, [r7, #15]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	211a      	movs	r1, #26
 800bcfa:	fb01 f303 	mul.w	r3, r1, r3
 800bcfe:	4413      	add	r3, r2
 800bd00:	f203 3356 	addw	r3, r3, #854	; 0x356
 800bd04:	781a      	ldrb	r2, [r3, #0]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	211a      	movs	r1, #26
 800bd10:	fb01 f303 	mul.w	r3, r1, r3
 800bd14:	4413      	add	r3, r2
 800bd16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800bd1a:	881a      	ldrh	r2, [r3, #0]
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2200      	movs	r2, #0
 800bd24:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	799b      	ldrb	r3, [r3, #6]
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f002 fed6 	bl	800eaea <USBH_AllocPipe>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	461a      	mov	r2, r3
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	79db      	ldrb	r3, [r3, #7]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f002 fecc 	bl	800eaea <USBH_AllocPipe>
 800bd52:	4603      	mov	r3, r0
 800bd54:	461a      	mov	r2, r3
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fdc4 	bl	800c8e8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	799b      	ldrb	r3, [r3, #6]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01e      	beq.n	800bda6 <USBH_MSC_InterfaceInit+0x1e2>
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	891b      	ldrh	r3, [r3, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d01a      	beq.n	800bda6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	7959      	ldrb	r1, [r3, #5]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	7998      	ldrb	r0, [r3, #6]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	8912      	ldrh	r2, [r2, #8]
 800bd88:	9202      	str	r2, [sp, #8]
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	9201      	str	r2, [sp, #4]
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	4623      	mov	r3, r4
 800bd92:	4602      	mov	r2, r0
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f002 fe79 	bl	800ea8c <USBH_OpenPipe>
 800bd9a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	79db      	ldrb	r3, [r3, #7]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d02c      	beq.n	800bdfe <USBH_MSC_InterfaceInit+0x23a>
 800bda4:	e001      	b.n	800bdaa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800bda6:	2303      	movs	r3, #3
 800bda8:	e02a      	b.n	800be00 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	895b      	ldrh	r3, [r3, #10]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d025      	beq.n	800bdfe <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	7919      	ldrb	r1, [r3, #4]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	79d8      	ldrb	r0, [r3, #7]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	8952      	ldrh	r2, [r2, #10]
 800bdca:	9202      	str	r2, [sp, #8]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	9201      	str	r2, [sp, #4]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	4623      	mov	r3, r4
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f002 fe58 	bl	800ea8c <USBH_OpenPipe>
 800bddc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	791b      	ldrb	r3, [r3, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f005 fcd2 	bl	8011790 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	795b      	ldrb	r3, [r3, #5]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f005 fccb 	bl	8011790 <USBH_LL_SetToggle>

  return USBH_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e000      	b.n	800be00 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800bdfe:	2303      	movs	r3, #3
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	bd90      	pop	{r4, r7, pc}

0800be08 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	795b      	ldrb	r3, [r3, #5]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00e      	beq.n	800be40 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	795b      	ldrb	r3, [r3, #5]
 800be26:	4619      	mov	r1, r3
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f002 fe4e 	bl	800eaca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	795b      	ldrb	r3, [r3, #5]
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f002 fe79 	bl	800eb2c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	791b      	ldrb	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00e      	beq.n	800be66 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	791b      	ldrb	r3, [r3, #4]
 800be4c:	4619      	mov	r1, r3
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f002 fe3b 	bl	800eaca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	791b      	ldrb	r3, [r3, #4]
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f002 fe66 	bl	800eb2c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00b      	beq.n	800be8a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be78:	69db      	ldr	r3, [r3, #28]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f005 fd72 	bl	8011964 <free>
    phost->pActiveClass->pData = 0U;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be86:	2200      	movs	r2, #0
 800be88:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bea2:	69db      	ldr	r3, [r3, #28]
 800bea4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800bea6:	2301      	movs	r3, #1
 800bea8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	7b9b      	ldrb	r3, [r3, #14]
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d041      	beq.n	800bf36 <USBH_MSC_ClassRequest+0xa2>
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	dc4b      	bgt.n	800bf4e <USBH_MSC_ClassRequest+0xba>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d001      	beq.n	800bebe <USBH_MSC_ClassRequest+0x2a>
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d147      	bne.n	800bf4e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fcf1 	bl	800c8aa <USBH_MSC_BOT_REQ_GetMaxLUN>
 800bec8:	4603      	mov	r3, r0
 800beca:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800becc:	7bfb      	ldrb	r3, [r7, #15]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d104      	bne.n	800bedc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800bedc:	7bfb      	ldrb	r3, [r7, #15]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d137      	bne.n	800bf52 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	d804      	bhi.n	800bef4 <USBH_MSC_ClassRequest+0x60>
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	3301      	adds	r3, #1
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	e000      	b.n	800bef6 <USBH_MSC_ClassRequest+0x62>
 800bef4:	2202      	movs	r2, #2
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800befa:	2300      	movs	r3, #0
 800befc:	73bb      	strb	r3, [r7, #14]
 800befe:	e014      	b.n	800bf2a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800bf00:	7bbb      	ldrb	r3, [r7, #14]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	2134      	movs	r1, #52	; 0x34
 800bf06:	fb01 f303 	mul.w	r3, r1, r3
 800bf0a:	4413      	add	r3, r2
 800bf0c:	3392      	adds	r3, #146	; 0x92
 800bf0e:	2202      	movs	r2, #2
 800bf10:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800bf12:	7bbb      	ldrb	r3, [r7, #14]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	2134      	movs	r1, #52	; 0x34
 800bf18:	fb01 f303 	mul.w	r3, r1, r3
 800bf1c:	4413      	add	r3, r2
 800bf1e:	33c1      	adds	r3, #193	; 0xc1
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	3301      	adds	r3, #1
 800bf28:	73bb      	strb	r3, [r7, #14]
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	7bba      	ldrb	r2, [r7, #14]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d3e5      	bcc.n	800bf00 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800bf34:	e00d      	b.n	800bf52 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800bf36:	2100      	movs	r1, #0
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f002 f888 	bl	800e04e <USBH_ClrFeature>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d108      	bne.n	800bf56 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	7bda      	ldrb	r2, [r3, #15]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800bf4c:	e003      	b.n	800bf56 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800bf4e:	bf00      	nop
 800bf50:	e002      	b.n	800bf58 <USBH_MSC_ClassRequest+0xc4>
      break;
 800bf52:	bf00      	nop
 800bf54:	e000      	b.n	800bf58 <USBH_MSC_ClassRequest+0xc4>
      break;
 800bf56:	bf00      	nop
  }

  return status;
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b086      	sub	sp, #24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf72:	69db      	ldr	r3, [r3, #28]
 800bf74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800bf76:	2301      	movs	r3, #1
 800bf78:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	7b1b      	ldrb	r3, [r3, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d003      	beq.n	800bf92 <USBH_MSC_Process+0x2e>
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	f000 8271 	beq.w	800c472 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800bf90:	e272      	b.n	800c478 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	f080 824f 	bcs.w	800c442 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfaa:	4619      	mov	r1, r3
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	2334      	movs	r3, #52	; 0x34
 800bfb0:	fb01 f303 	mul.w	r3, r1, r3
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3391      	adds	r3, #145	; 0x91
 800bfb8:	2201      	movs	r2, #1
 800bfba:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	2334      	movs	r3, #52	; 0x34
 800bfc8:	fb01 f303 	mul.w	r3, r1, r3
 800bfcc:	4413      	add	r3, r2
 800bfce:	3390      	adds	r3, #144	; 0x90
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	2b08      	cmp	r3, #8
 800bfd4:	f200 8243 	bhi.w	800c45e <USBH_MSC_Process+0x4fa>
 800bfd8:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <USBH_MSC_Process+0x7c>)
 800bfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfde:	bf00      	nop
 800bfe0:	0800c005 	.word	0x0800c005
 800bfe4:	0800c45f 	.word	0x0800c45f
 800bfe8:	0800c0cd 	.word	0x0800c0cd
 800bfec:	0800c251 	.word	0x0800c251
 800bff0:	0800c02b 	.word	0x0800c02b
 800bff4:	0800c31d 	.word	0x0800c31d
 800bff8:	0800c45f 	.word	0x0800c45f
 800bffc:	0800c45f 	.word	0x0800c45f
 800c000:	0800c431 	.word	0x0800c431
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c00a:	4619      	mov	r1, r3
 800c00c:	693a      	ldr	r2, [r7, #16]
 800c00e:	2334      	movs	r3, #52	; 0x34
 800c010:	fb01 f303 	mul.w	r3, r1, r3
 800c014:	4413      	add	r3, r2
 800c016:	3390      	adds	r3, #144	; 0x90
 800c018:	2204      	movs	r2, #4
 800c01a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800c028:	e222      	b.n	800c470 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c030:	b2d9      	uxtb	r1, r3
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c038:	461a      	mov	r2, r3
 800c03a:	2334      	movs	r3, #52	; 0x34
 800c03c:	fb02 f303 	mul.w	r3, r2, r3
 800c040:	3398      	adds	r3, #152	; 0x98
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	4413      	add	r3, r2
 800c046:	3307      	adds	r3, #7
 800c048:	461a      	mov	r2, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 ff6a 	bl	800cf24 <USBH_MSC_SCSI_Inquiry>
 800c050:	4603      	mov	r3, r0
 800c052:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c054:	7bfb      	ldrb	r3, [r7, #15]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c060:	4619      	mov	r1, r3
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	2334      	movs	r3, #52	; 0x34
 800c066:	fb01 f303 	mul.w	r3, r1, r3
 800c06a:	4413      	add	r3, r2
 800c06c:	3390      	adds	r3, #144	; 0x90
 800c06e:	2202      	movs	r2, #2
 800c070:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d10c      	bne.n	800c092 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c07e:	4619      	mov	r1, r3
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	2334      	movs	r3, #52	; 0x34
 800c084:	fb01 f303 	mul.w	r3, r1, r3
 800c088:	4413      	add	r3, r2
 800c08a:	3390      	adds	r3, #144	; 0x90
 800c08c:	2205      	movs	r2, #5
 800c08e:	701a      	strb	r2, [r3, #0]
            break;
 800c090:	e1e7      	b.n	800c462 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	2b04      	cmp	r3, #4
 800c096:	f040 81e4 	bne.w	800c462 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	2334      	movs	r3, #52	; 0x34
 800c0a6:	fb01 f303 	mul.w	r3, r1, r3
 800c0aa:	4413      	add	r3, r2
 800c0ac:	3390      	adds	r3, #144	; 0x90
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	693a      	ldr	r2, [r7, #16]
 800c0bc:	2334      	movs	r3, #52	; 0x34
 800c0be:	fb01 f303 	mul.w	r3, r1, r3
 800c0c2:	4413      	add	r3, r2
 800c0c4:	3391      	adds	r3, #145	; 0x91
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	701a      	strb	r2, [r3, #0]
            break;
 800c0ca:	e1ca      	b.n	800c462 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 fe66 	bl	800cda8 <USBH_MSC_SCSI_TestUnitReady>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d149      	bne.n	800c17a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	2334      	movs	r3, #52	; 0x34
 800c0f2:	fb01 f303 	mul.w	r3, r1, r3
 800c0f6:	4413      	add	r3, r2
 800c0f8:	3392      	adds	r3, #146	; 0x92
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00c      	beq.n	800c11a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c106:	4619      	mov	r1, r3
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	2334      	movs	r3, #52	; 0x34
 800c10c:	fb01 f303 	mul.w	r3, r1, r3
 800c110:	4413      	add	r3, r2
 800c112:	33c1      	adds	r3, #193	; 0xc1
 800c114:	2201      	movs	r2, #1
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e00b      	b.n	800c132 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c120:	4619      	mov	r1, r3
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	2334      	movs	r3, #52	; 0x34
 800c126:	fb01 f303 	mul.w	r3, r1, r3
 800c12a:	4413      	add	r3, r2
 800c12c:	33c1      	adds	r3, #193	; 0xc1
 800c12e:	2200      	movs	r2, #0
 800c130:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c138:	4619      	mov	r1, r3
 800c13a:	693a      	ldr	r2, [r7, #16]
 800c13c:	2334      	movs	r3, #52	; 0x34
 800c13e:	fb01 f303 	mul.w	r3, r1, r3
 800c142:	4413      	add	r3, r2
 800c144:	3390      	adds	r3, #144	; 0x90
 800c146:	2203      	movs	r2, #3
 800c148:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c150:	4619      	mov	r1, r3
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	2334      	movs	r3, #52	; 0x34
 800c156:	fb01 f303 	mul.w	r3, r1, r3
 800c15a:	4413      	add	r3, r2
 800c15c:	3391      	adds	r3, #145	; 0x91
 800c15e:	2200      	movs	r2, #0
 800c160:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c168:	4619      	mov	r1, r3
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	2334      	movs	r3, #52	; 0x34
 800c16e:	fb01 f303 	mul.w	r3, r1, r3
 800c172:	4413      	add	r3, r2
 800c174:	3392      	adds	r3, #146	; 0x92
 800c176:	2200      	movs	r2, #0
 800c178:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d14a      	bne.n	800c216 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c186:	4619      	mov	r1, r3
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	2334      	movs	r3, #52	; 0x34
 800c18c:	fb01 f303 	mul.w	r3, r1, r3
 800c190:	4413      	add	r3, r2
 800c192:	3392      	adds	r3, #146	; 0x92
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	2b02      	cmp	r3, #2
 800c198:	d00c      	beq.n	800c1b4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	2334      	movs	r3, #52	; 0x34
 800c1a6:	fb01 f303 	mul.w	r3, r1, r3
 800c1aa:	4413      	add	r3, r2
 800c1ac:	33c1      	adds	r3, #193	; 0xc1
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	701a      	strb	r2, [r3, #0]
 800c1b2:	e00b      	b.n	800c1cc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	2334      	movs	r3, #52	; 0x34
 800c1c0:	fb01 f303 	mul.w	r3, r1, r3
 800c1c4:	4413      	add	r3, r2
 800c1c6:	33c1      	adds	r3, #193	; 0xc1
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	2334      	movs	r3, #52	; 0x34
 800c1d8:	fb01 f303 	mul.w	r3, r1, r3
 800c1dc:	4413      	add	r3, r2
 800c1de:	3390      	adds	r3, #144	; 0x90
 800c1e0:	2205      	movs	r2, #5
 800c1e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	2334      	movs	r3, #52	; 0x34
 800c1f0:	fb01 f303 	mul.w	r3, r1, r3
 800c1f4:	4413      	add	r3, r2
 800c1f6:	3391      	adds	r3, #145	; 0x91
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c202:	4619      	mov	r1, r3
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	2334      	movs	r3, #52	; 0x34
 800c208:	fb01 f303 	mul.w	r3, r1, r3
 800c20c:	4413      	add	r3, r2
 800c20e:	3392      	adds	r3, #146	; 0x92
 800c210:	2202      	movs	r2, #2
 800c212:	701a      	strb	r2, [r3, #0]
            break;
 800c214:	e127      	b.n	800c466 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800c216:	7bbb      	ldrb	r3, [r7, #14]
 800c218:	2b04      	cmp	r3, #4
 800c21a:	f040 8124 	bne.w	800c466 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c224:	4619      	mov	r1, r3
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	2334      	movs	r3, #52	; 0x34
 800c22a:	fb01 f303 	mul.w	r3, r1, r3
 800c22e:	4413      	add	r3, r2
 800c230:	3390      	adds	r3, #144	; 0x90
 800c232:	2201      	movs	r2, #1
 800c234:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c23c:	4619      	mov	r1, r3
 800c23e:	693a      	ldr	r2, [r7, #16]
 800c240:	2334      	movs	r3, #52	; 0x34
 800c242:	fb01 f303 	mul.w	r3, r1, r3
 800c246:	4413      	add	r3, r2
 800c248:	3391      	adds	r3, #145	; 0x91
 800c24a:	2202      	movs	r2, #2
 800c24c:	701a      	strb	r2, [r3, #0]
            break;
 800c24e:	e10a      	b.n	800c466 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c256:	b2d9      	uxtb	r1, r3
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c25e:	461a      	mov	r2, r3
 800c260:	2334      	movs	r3, #52	; 0x34
 800c262:	fb02 f303 	mul.w	r3, r2, r3
 800c266:	3390      	adds	r3, #144	; 0x90
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	4413      	add	r3, r2
 800c26c:	3304      	adds	r3, #4
 800c26e:	461a      	mov	r2, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fddc 	bl	800ce2e <USBH_MSC_SCSI_ReadCapacity>
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d120      	bne.n	800c2c2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c286:	4619      	mov	r1, r3
 800c288:	693a      	ldr	r2, [r7, #16]
 800c28a:	2334      	movs	r3, #52	; 0x34
 800c28c:	fb01 f303 	mul.w	r3, r1, r3
 800c290:	4413      	add	r3, r2
 800c292:	3390      	adds	r3, #144	; 0x90
 800c294:	2201      	movs	r2, #1
 800c296:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c29e:	4619      	mov	r1, r3
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	2334      	movs	r3, #52	; 0x34
 800c2a4:	fb01 f303 	mul.w	r3, r1, r3
 800c2a8:	4413      	add	r3, r2
 800c2aa:	3391      	adds	r3, #145	; 0x91
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800c2c0:	e0d3      	b.n	800c46a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d10c      	bne.n	800c2e2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	2334      	movs	r3, #52	; 0x34
 800c2d4:	fb01 f303 	mul.w	r3, r1, r3
 800c2d8:	4413      	add	r3, r2
 800c2da:	3390      	adds	r3, #144	; 0x90
 800c2dc:	2205      	movs	r2, #5
 800c2de:	701a      	strb	r2, [r3, #0]
            break;
 800c2e0:	e0c3      	b.n	800c46a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	f040 80c0 	bne.w	800c46a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	2334      	movs	r3, #52	; 0x34
 800c2f6:	fb01 f303 	mul.w	r3, r1, r3
 800c2fa:	4413      	add	r3, r2
 800c2fc:	3390      	adds	r3, #144	; 0x90
 800c2fe:	2201      	movs	r2, #1
 800c300:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c308:	4619      	mov	r1, r3
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	2334      	movs	r3, #52	; 0x34
 800c30e:	fb01 f303 	mul.w	r3, r1, r3
 800c312:	4413      	add	r3, r2
 800c314:	3391      	adds	r3, #145	; 0x91
 800c316:	2202      	movs	r2, #2
 800c318:	701a      	strb	r2, [r3, #0]
            break;
 800c31a:	e0a6      	b.n	800c46a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c322:	b2d9      	uxtb	r1, r3
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c32a:	461a      	mov	r2, r3
 800c32c:	2334      	movs	r3, #52	; 0x34
 800c32e:	fb02 f303 	mul.w	r3, r2, r3
 800c332:	3398      	adds	r3, #152	; 0x98
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	4413      	add	r3, r2
 800c338:	3304      	adds	r3, #4
 800c33a:	461a      	mov	r2, r3
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f000 fe96 	bl	800d06e <USBH_MSC_SCSI_RequestSense>
 800c342:	4603      	mov	r3, r0
 800c344:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d145      	bne.n	800c3d8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c352:	4619      	mov	r1, r3
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	2334      	movs	r3, #52	; 0x34
 800c358:	fb01 f303 	mul.w	r3, r1, r3
 800c35c:	4413      	add	r3, r2
 800c35e:	339c      	adds	r3, #156	; 0x9c
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b06      	cmp	r3, #6
 800c364:	d00c      	beq.n	800c380 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c36c:	4619      	mov	r1, r3
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	2334      	movs	r3, #52	; 0x34
 800c372:	fb01 f303 	mul.w	r3, r1, r3
 800c376:	4413      	add	r3, r2
 800c378:	339c      	adds	r3, #156	; 0x9c
 800c37a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d117      	bne.n	800c3b0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	f242 720f 	movw	r2, #9999	; 0x270f
 800c392:	4293      	cmp	r3, r2
 800c394:	d80c      	bhi.n	800c3b0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c39c:	4619      	mov	r1, r3
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	2334      	movs	r3, #52	; 0x34
 800c3a2:	fb01 f303 	mul.w	r3, r1, r3
 800c3a6:	4413      	add	r3, r2
 800c3a8:	3390      	adds	r3, #144	; 0x90
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	701a      	strb	r2, [r3, #0]
                  break;
 800c3ae:	e05f      	b.n	800c470 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	2334      	movs	r3, #52	; 0x34
 800c3bc:	fb01 f303 	mul.w	r3, r1, r3
 800c3c0:	4413      	add	r3, r2
 800c3c2:	3390      	adds	r3, #144	; 0x90
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	b29a      	uxth	r2, r3
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800c3d8:	7bfb      	ldrb	r3, [r7, #15]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d10c      	bne.n	800c3f8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	2334      	movs	r3, #52	; 0x34
 800c3ea:	fb01 f303 	mul.w	r3, r1, r3
 800c3ee:	4413      	add	r3, r2
 800c3f0:	3390      	adds	r3, #144	; 0x90
 800c3f2:	2208      	movs	r2, #8
 800c3f4:	701a      	strb	r2, [r3, #0]
            break;
 800c3f6:	e03a      	b.n	800c46e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	2b04      	cmp	r3, #4
 800c3fc:	d137      	bne.n	800c46e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c404:	4619      	mov	r1, r3
 800c406:	693a      	ldr	r2, [r7, #16]
 800c408:	2334      	movs	r3, #52	; 0x34
 800c40a:	fb01 f303 	mul.w	r3, r1, r3
 800c40e:	4413      	add	r3, r2
 800c410:	3390      	adds	r3, #144	; 0x90
 800c412:	2201      	movs	r2, #1
 800c414:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c41c:	4619      	mov	r1, r3
 800c41e:	693a      	ldr	r2, [r7, #16]
 800c420:	2334      	movs	r3, #52	; 0x34
 800c422:	fb01 f303 	mul.w	r3, r1, r3
 800c426:	4413      	add	r3, r2
 800c428:	3391      	adds	r3, #145	; 0x91
 800c42a:	2202      	movs	r2, #2
 800c42c:	701a      	strb	r2, [r3, #0]
            break;
 800c42e:	e01e      	b.n	800c46e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800c436:	3301      	adds	r3, #1
 800c438:	b29a      	uxth	r2, r3
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800c440:	e016      	b.n	800c470 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	2200      	movs	r2, #0
 800c446:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2201      	movs	r2, #1
 800c44e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c456:	2102      	movs	r1, #2
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	4798      	blx	r3
      break;
 800c45c:	e00c      	b.n	800c478 <USBH_MSC_Process+0x514>
            break;
 800c45e:	bf00      	nop
 800c460:	e00a      	b.n	800c478 <USBH_MSC_Process+0x514>
            break;
 800c462:	bf00      	nop
 800c464:	e008      	b.n	800c478 <USBH_MSC_Process+0x514>
            break;
 800c466:	bf00      	nop
 800c468:	e006      	b.n	800c478 <USBH_MSC_Process+0x514>
            break;
 800c46a:	bf00      	nop
 800c46c:	e004      	b.n	800c478 <USBH_MSC_Process+0x514>
            break;
 800c46e:	bf00      	nop
      break;
 800c470:	e002      	b.n	800c478 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800c472:	2300      	movs	r3, #0
 800c474:	75fb      	strb	r3, [r7, #23]
      break;
 800c476:	bf00      	nop
  }
  return error;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop

0800c484 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c484:	b480      	push	{r7}
 800c486:	b083      	sub	sp, #12
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b088      	sub	sp, #32
 800c49e:	af02      	add	r7, sp, #8
 800c4a0:	6078      	str	r0, [r7, #4]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4ac:	69db      	ldr	r3, [r3, #28]
 800c4ae:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	2134      	movs	r1, #52	; 0x34
 800c4be:	fb01 f303 	mul.w	r3, r1, r3
 800c4c2:	4413      	add	r3, r2
 800c4c4:	3390      	adds	r3, #144	; 0x90
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b07      	cmp	r3, #7
 800c4ca:	d03c      	beq.n	800c546 <USBH_MSC_RdWrProcess+0xac>
 800c4cc:	2b07      	cmp	r3, #7
 800c4ce:	f300 80a7 	bgt.w	800c620 <USBH_MSC_RdWrProcess+0x186>
 800c4d2:	2b05      	cmp	r3, #5
 800c4d4:	d06c      	beq.n	800c5b0 <USBH_MSC_RdWrProcess+0x116>
 800c4d6:	2b06      	cmp	r3, #6
 800c4d8:	f040 80a2 	bne.w	800c620 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800c4dc:	78f9      	ldrb	r1, [r7, #3]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	9300      	str	r3, [sp, #0]
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 fea5 	bl	800d236 <USBH_MSC_SCSI_Read>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10b      	bne.n	800c50e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c4f6:	78fb      	ldrb	r3, [r7, #3]
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	2134      	movs	r1, #52	; 0x34
 800c4fc:	fb01 f303 	mul.w	r3, r1, r3
 800c500:	4413      	add	r3, r2
 800c502:	3390      	adds	r3, #144	; 0x90
 800c504:	2201      	movs	r2, #1
 800c506:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c50c:	e08a      	b.n	800c624 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
 800c510:	2b02      	cmp	r3, #2
 800c512:	d109      	bne.n	800c528 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c514:	78fb      	ldrb	r3, [r7, #3]
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	2134      	movs	r1, #52	; 0x34
 800c51a:	fb01 f303 	mul.w	r3, r1, r3
 800c51e:	4413      	add	r3, r2
 800c520:	3390      	adds	r3, #144	; 0x90
 800c522:	2205      	movs	r2, #5
 800c524:	701a      	strb	r2, [r3, #0]
      break;
 800c526:	e07d      	b.n	800c624 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	2b04      	cmp	r3, #4
 800c52c:	d17a      	bne.n	800c624 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c52e:	78fb      	ldrb	r3, [r7, #3]
 800c530:	693a      	ldr	r2, [r7, #16]
 800c532:	2134      	movs	r1, #52	; 0x34
 800c534:	fb01 f303 	mul.w	r3, r1, r3
 800c538:	4413      	add	r3, r2
 800c53a:	3390      	adds	r3, #144	; 0x90
 800c53c:	2208      	movs	r2, #8
 800c53e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c540:	2302      	movs	r3, #2
 800c542:	75fb      	strb	r3, [r7, #23]
      break;
 800c544:	e06e      	b.n	800c624 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800c546:	78f9      	ldrb	r1, [r7, #3]
 800c548:	2300      	movs	r3, #0
 800c54a:	9300      	str	r3, [sp, #0]
 800c54c:	2300      	movs	r3, #0
 800c54e:	2200      	movs	r2, #0
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fe05 	bl	800d160 <USBH_MSC_SCSI_Write>
 800c556:	4603      	mov	r3, r0
 800c558:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10b      	bne.n	800c578 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	2134      	movs	r1, #52	; 0x34
 800c566:	fb01 f303 	mul.w	r3, r1, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	3390      	adds	r3, #144	; 0x90
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c576:	e057      	b.n	800c628 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800c578:	7bfb      	ldrb	r3, [r7, #15]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d109      	bne.n	800c592 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c57e:	78fb      	ldrb	r3, [r7, #3]
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	2134      	movs	r1, #52	; 0x34
 800c584:	fb01 f303 	mul.w	r3, r1, r3
 800c588:	4413      	add	r3, r2
 800c58a:	3390      	adds	r3, #144	; 0x90
 800c58c:	2205      	movs	r2, #5
 800c58e:	701a      	strb	r2, [r3, #0]
      break;
 800c590:	e04a      	b.n	800c628 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	2b04      	cmp	r3, #4
 800c596:	d147      	bne.n	800c628 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c598:	78fb      	ldrb	r3, [r7, #3]
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	2134      	movs	r1, #52	; 0x34
 800c59e:	fb01 f303 	mul.w	r3, r1, r3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	3390      	adds	r3, #144	; 0x90
 800c5a6:	2208      	movs	r2, #8
 800c5a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	75fb      	strb	r3, [r7, #23]
      break;
 800c5ae:	e03b      	b.n	800c628 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	2234      	movs	r2, #52	; 0x34
 800c5b4:	fb02 f303 	mul.w	r3, r2, r3
 800c5b8:	3398      	adds	r3, #152	; 0x98
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	4413      	add	r3, r2
 800c5be:	1d1a      	adds	r2, r3, #4
 800c5c0:	78fb      	ldrb	r3, [r7, #3]
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fd52 	bl	800d06e <USBH_MSC_SCSI_RequestSense>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d113      	bne.n	800c5fc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c5d4:	78fb      	ldrb	r3, [r7, #3]
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	2134      	movs	r1, #52	; 0x34
 800c5da:	fb01 f303 	mul.w	r3, r1, r3
 800c5de:	4413      	add	r3, r2
 800c5e0:	3390      	adds	r3, #144	; 0x90
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800c5e6:	78fb      	ldrb	r3, [r7, #3]
 800c5e8:	693a      	ldr	r2, [r7, #16]
 800c5ea:	2134      	movs	r1, #52	; 0x34
 800c5ec:	fb01 f303 	mul.w	r3, r1, r3
 800c5f0:	4413      	add	r3, r2
 800c5f2:	3391      	adds	r3, #145	; 0x91
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d014      	beq.n	800c62c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b04      	cmp	r3, #4
 800c606:	d111      	bne.n	800c62c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c608:	78fb      	ldrb	r3, [r7, #3]
 800c60a:	693a      	ldr	r2, [r7, #16]
 800c60c:	2134      	movs	r1, #52	; 0x34
 800c60e:	fb01 f303 	mul.w	r3, r1, r3
 800c612:	4413      	add	r3, r2
 800c614:	3390      	adds	r3, #144	; 0x90
 800c616:	2208      	movs	r2, #8
 800c618:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c61a:	2302      	movs	r3, #2
 800c61c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c61e:	e005      	b.n	800c62c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800c620:	bf00      	nop
 800c622:	e004      	b.n	800c62e <USBH_MSC_RdWrProcess+0x194>
      break;
 800c624:	bf00      	nop
 800c626:	e002      	b.n	800c62e <USBH_MSC_RdWrProcess+0x194>
      break;
 800c628:	bf00      	nop
 800c62a:	e000      	b.n	800c62e <USBH_MSC_RdWrProcess+0x194>
      break;
 800c62c:	bf00      	nop

  }
  return error;
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	460b      	mov	r3, r1
 800c642:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b0b      	cmp	r3, #11
 800c656:	d10c      	bne.n	800c672 <USBH_MSC_UnitIsReady+0x3a>
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	2134      	movs	r1, #52	; 0x34
 800c65e:	fb01 f303 	mul.w	r3, r1, r3
 800c662:	4413      	add	r3, r2
 800c664:	3391      	adds	r3, #145	; 0x91
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d102      	bne.n	800c672 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c66c:	2301      	movs	r3, #1
 800c66e:	73fb      	strb	r3, [r7, #15]
 800c670:	e001      	b.n	800c676 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	460b      	mov	r3, r1
 800c68e:	607a      	str	r2, [r7, #4]
 800c690:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b0b      	cmp	r3, #11
 800c6a4:	d10d      	bne.n	800c6c2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c6a6:	7afb      	ldrb	r3, [r7, #11]
 800c6a8:	2234      	movs	r2, #52	; 0x34
 800c6aa:	fb02 f303 	mul.w	r3, r2, r3
 800c6ae:	3390      	adds	r3, #144	; 0x90
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	2234      	movs	r2, #52	; 0x34
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f005 f95b 	bl	8011974 <memcpy>
    return USBH_OK;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	e000      	b.n	800c6c4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c6c2:	2302      	movs	r3, #2
  }
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af02      	add	r7, sp, #8
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	607a      	str	r2, [r7, #4]
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	460b      	mov	r3, r1
 800c6da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6e2:	69db      	ldr	r3, [r3, #28]
 800c6e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00e      	beq.n	800c710 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c6f8:	2b0b      	cmp	r3, #11
 800c6fa:	d109      	bne.n	800c710 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c6fc:	7afb      	ldrb	r3, [r7, #11]
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	2134      	movs	r1, #52	; 0x34
 800c702:	fb01 f303 	mul.w	r3, r1, r3
 800c706:	4413      	add	r3, r2
 800c708:	3390      	adds	r3, #144	; 0x90
 800c70a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d001      	beq.n	800c714 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c710:	2302      	movs	r3, #2
 800c712:	e040      	b.n	800c796 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	2206      	movs	r2, #6
 800c718:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c71a:	7afb      	ldrb	r3, [r7, #11]
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	2134      	movs	r1, #52	; 0x34
 800c720:	fb01 f303 	mul.w	r3, r1, r3
 800c724:	4413      	add	r3, r2
 800c726:	3390      	adds	r3, #144	; 0x90
 800c728:	2206      	movs	r2, #6
 800c72a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c72c:	7afb      	ldrb	r3, [r7, #11]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c736:	7af9      	ldrb	r1, [r7, #11]
 800c738:	6a3b      	ldr	r3, [r7, #32]
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	68f8      	ldr	r0, [r7, #12]
 800c742:	f000 fd78 	bl	800d236 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c74c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c74e:	e016      	b.n	800c77e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	1ad2      	subs	r2, r2, r3
 800c75a:	6a3b      	ldr	r3, [r7, #32]
 800c75c:	f242 7110 	movw	r1, #10000	; 0x2710
 800c760:	fb01 f303 	mul.w	r3, r1, r3
 800c764:	429a      	cmp	r2, r3
 800c766:	d805      	bhi.n	800c774 <USBH_MSC_Read+0xa8>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b00      	cmp	r3, #0
 800c772:	d104      	bne.n	800c77e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2201      	movs	r2, #1
 800c778:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c77a:	2302      	movs	r3, #2
 800c77c:	e00b      	b.n	800c796 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c77e:	7afb      	ldrb	r3, [r7, #11]
 800c780:	4619      	mov	r1, r3
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	f7ff fe89 	bl	800c49a <USBH_MSC_RdWrProcess>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d0e0      	beq.n	800c750 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2201      	movs	r2, #1
 800c792:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c794:	2300      	movs	r3, #0
}
 800c796:	4618      	mov	r0, r3
 800c798:	3718      	adds	r7, #24
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b088      	sub	sp, #32
 800c7a2:	af02      	add	r7, sp, #8
 800c7a4:	60f8      	str	r0, [r7, #12]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00e      	beq.n	800c7e2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c7ca:	2b0b      	cmp	r3, #11
 800c7cc:	d109      	bne.n	800c7e2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c7ce:	7afb      	ldrb	r3, [r7, #11]
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	2134      	movs	r1, #52	; 0x34
 800c7d4:	fb01 f303 	mul.w	r3, r1, r3
 800c7d8:	4413      	add	r3, r2
 800c7da:	3390      	adds	r3, #144	; 0x90
 800c7dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d001      	beq.n	800c7e6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	e040      	b.n	800c868 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	2207      	movs	r2, #7
 800c7ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c7ec:	7afb      	ldrb	r3, [r7, #11]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	2134      	movs	r1, #52	; 0x34
 800c7f2:	fb01 f303 	mul.w	r3, r1, r3
 800c7f6:	4413      	add	r3, r2
 800c7f8:	3390      	adds	r3, #144	; 0x90
 800c7fa:	2207      	movs	r2, #7
 800c7fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c7fe:	7afb      	ldrb	r3, [r7, #11]
 800c800:	b29a      	uxth	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c808:	7af9      	ldrb	r1, [r7, #11]
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	9300      	str	r3, [sp, #0]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	687a      	ldr	r2, [r7, #4]
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 fca4 	bl	800d160 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c81e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c820:	e016      	b.n	800c850 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	1ad2      	subs	r2, r2, r3
 800c82c:	6a3b      	ldr	r3, [r7, #32]
 800c82e:	f242 7110 	movw	r1, #10000	; 0x2710
 800c832:	fb01 f303 	mul.w	r3, r1, r3
 800c836:	429a      	cmp	r2, r3
 800c838:	d805      	bhi.n	800c846 <USBH_MSC_Write+0xa8>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c840:	b2db      	uxtb	r3, r3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d104      	bne.n	800c850 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2201      	movs	r2, #1
 800c84a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c84c:	2302      	movs	r3, #2
 800c84e:	e00b      	b.n	800c868 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c850:	7afb      	ldrb	r3, [r7, #11]
 800c852:	4619      	mov	r1, r3
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7ff fe20 	bl	800c49a <USBH_MSC_RdWrProcess>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d0e0      	beq.n	800c822 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2201      	movs	r2, #1
 800c864:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2221      	movs	r2, #33	; 0x21
 800c87c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	22ff      	movs	r2, #255	; 0xff
 800c882:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2200      	movs	r2, #0
 800c894:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f001 fea4 	bl	800e5e8 <USBH_CtlReq>
 800c8a0:	4603      	mov	r3, r0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3708      	adds	r7, #8
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b082      	sub	sp, #8
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	22a1      	movs	r2, #161	; 0xa1
 800c8b8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	22fe      	movs	r2, #254	; 0xfe
 800c8be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f001 fe86 	bl	800e5e8 <USBH_CtlReq>
 800c8dc:	4603      	mov	r3, r0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
	...

0800c8e8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8f6:	69db      	ldr	r3, [r3, #28]
 800c8f8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	4a09      	ldr	r2, [pc, #36]	; (800c924 <USBH_MSC_BOT_Init+0x3c>)
 800c8fe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4a09      	ldr	r2, [pc, #36]	; (800c928 <USBH_MSC_BOT_Init+0x40>)
 800c904:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	43425355 	.word	0x43425355
 800c928:	20304050 	.word	0x20304050

0800c92c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b088      	sub	sp, #32
 800c930:	af02      	add	r7, sp, #8
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	460b      	mov	r3, r1
 800c936:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c938:	2301      	movs	r3, #1
 800c93a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c93c:	2301      	movs	r3, #1
 800c93e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c940:	2301      	movs	r3, #1
 800c942:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c944:	2300      	movs	r3, #0
 800c946:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c94e:	69db      	ldr	r3, [r3, #28]
 800c950:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c952:	2300      	movs	r3, #0
 800c954:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c95c:	3b01      	subs	r3, #1
 800c95e:	2b0a      	cmp	r3, #10
 800c960:	f200 819e 	bhi.w	800cca0 <USBH_MSC_BOT_Process+0x374>
 800c964:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <USBH_MSC_BOT_Process+0x40>)
 800c966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96a:	bf00      	nop
 800c96c:	0800c999 	.word	0x0800c999
 800c970:	0800c9c1 	.word	0x0800c9c1
 800c974:	0800ca2b 	.word	0x0800ca2b
 800c978:	0800ca49 	.word	0x0800ca49
 800c97c:	0800cacd 	.word	0x0800cacd
 800c980:	0800caef 	.word	0x0800caef
 800c984:	0800cb87 	.word	0x0800cb87
 800c988:	0800cba3 	.word	0x0800cba3
 800c98c:	0800cbf5 	.word	0x0800cbf5
 800c990:	0800cc25 	.word	0x0800cc25
 800c994:	0800cc87 	.word	0x0800cc87
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	78fa      	ldrb	r2, [r7, #3]
 800c99c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c9ae:	693b      	ldr	r3, [r7, #16]
 800c9b0:	795b      	ldrb	r3, [r3, #5]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	9200      	str	r2, [sp, #0]
 800c9b6:	221f      	movs	r2, #31
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f002 f824 	bl	800ea06 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c9be:	e17e      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	795b      	ldrb	r3, [r3, #5]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f004 feb8 	bl	801173c <USBH_LL_GetURBState>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c9d0:	7d3b      	ldrb	r3, [r7, #20]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d118      	bne.n	800ca08 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00f      	beq.n	800c9fe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c9e4:	b25b      	sxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	da04      	bge.n	800c9f4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	2203      	movs	r2, #3
 800c9ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c9f2:	e157      	b.n	800cca4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c9fc:	e152      	b.n	800cca4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	2207      	movs	r2, #7
 800ca02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ca06:	e14d      	b.n	800cca4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ca08:	7d3b      	ldrb	r3, [r7, #20]
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d104      	bne.n	800ca18 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2201      	movs	r2, #1
 800ca12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ca16:	e145      	b.n	800cca4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800ca18:	7d3b      	ldrb	r3, [r7, #20]
 800ca1a:	2b05      	cmp	r3, #5
 800ca1c:	f040 8142 	bne.w	800cca4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	220a      	movs	r2, #10
 800ca24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ca28:	e13c      	b.n	800cca4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	895a      	ldrh	r2, [r3, #10]
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	791b      	ldrb	r3, [r3, #4]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f002 f809 	bl	800ea50 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2204      	movs	r2, #4
 800ca42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800ca46:	e13a      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	791b      	ldrb	r3, [r3, #4]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f004 fe74 	bl	801173c <USBH_LL_GetURBState>
 800ca54:	4603      	mov	r3, r0
 800ca56:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800ca58:	7d3b      	ldrb	r3, [r7, #20]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d12d      	bne.n	800caba <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	8952      	ldrh	r2, [r2, #10]
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d910      	bls.n	800ca8c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca70:	693a      	ldr	r2, [r7, #16]
 800ca72:	8952      	ldrh	r2, [r2, #10]
 800ca74:	441a      	add	r2, r3
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	8952      	ldrh	r2, [r2, #10]
 800ca84:	1a9a      	subs	r2, r3, r2
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca8a:	e002      	b.n	800ca92 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00a      	beq.n	800cab0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	895a      	ldrh	r2, [r3, #10]
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	791b      	ldrb	r3, [r3, #4]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 ffd1 	bl	800ea50 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800caae:	e0fb      	b.n	800cca8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	2207      	movs	r2, #7
 800cab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cab8:	e0f6      	b.n	800cca8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800caba:	7d3b      	ldrb	r3, [r7, #20]
 800cabc:	2b05      	cmp	r3, #5
 800cabe:	f040 80f3 	bne.w	800cca8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2209      	movs	r2, #9
 800cac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800caca:	e0ed      	b.n	800cca8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	891a      	ldrh	r2, [r3, #8]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	795b      	ldrb	r3, [r3, #5]
 800cada:	2001      	movs	r0, #1
 800cadc:	9000      	str	r0, [sp, #0]
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 ff91 	bl	800ea06 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	2206      	movs	r2, #6
 800cae8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800caec:	e0e7      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	795b      	ldrb	r3, [r3, #5]
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f004 fe21 	bl	801173c <USBH_LL_GetURBState>
 800cafa:	4603      	mov	r3, r0
 800cafc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800cafe:	7d3b      	ldrb	r3, [r7, #20]
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d12f      	bne.n	800cb64 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	8912      	ldrh	r2, [r2, #8]
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d910      	bls.n	800cb32 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	8912      	ldrh	r2, [r2, #8]
 800cb1a:	441a      	add	r2, r3
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	8912      	ldrh	r2, [r2, #8]
 800cb2a:	1a9a      	subs	r2, r3, r2
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb30:	e002      	b.n	800cb38 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	2200      	movs	r2, #0
 800cb36:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00c      	beq.n	800cb5a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	891a      	ldrh	r2, [r3, #8]
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	795b      	ldrb	r3, [r3, #5]
 800cb4e:	2001      	movs	r0, #1
 800cb50:	9000      	str	r0, [sp, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f001 ff57 	bl	800ea06 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800cb58:	e0a8      	b.n	800ccac <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	2207      	movs	r2, #7
 800cb5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cb62:	e0a3      	b.n	800ccac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cb64:	7d3b      	ldrb	r3, [r7, #20]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d104      	bne.n	800cb74 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cb72:	e09b      	b.n	800ccac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800cb74:	7d3b      	ldrb	r3, [r7, #20]
 800cb76:	2b05      	cmp	r3, #5
 800cb78:	f040 8098 	bne.w	800ccac <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	220a      	movs	r2, #10
 800cb80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cb84:	e092      	b.n	800ccac <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	791b      	ldrb	r3, [r3, #4]
 800cb90:	220d      	movs	r2, #13
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 ff5c 	bl	800ea50 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	2208      	movs	r2, #8
 800cb9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cba0:	e08d      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	791b      	ldrb	r3, [r3, #4]
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f004 fdc7 	bl	801173c <USBH_LL_GetURBState>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800cbb2:	7d3b      	ldrb	r3, [r7, #20]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d115      	bne.n	800cbe4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 f8a9 	bl	800cd20 <USBH_MSC_DecodeCSW>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800cbd2:	7d7b      	ldrb	r3, [r7, #21]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d102      	bne.n	800cbde <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800cbdc:	e068      	b.n	800ccb0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800cbde:	2302      	movs	r3, #2
 800cbe0:	75fb      	strb	r3, [r7, #23]
      break;
 800cbe2:	e065      	b.n	800ccb0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800cbe4:	7d3b      	ldrb	r3, [r7, #20]
 800cbe6:	2b05      	cmp	r3, #5
 800cbe8:	d162      	bne.n	800ccb0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2209      	movs	r2, #9
 800cbee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cbf2:	e05d      	b.n	800ccb0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800cbf4:	78fb      	ldrb	r3, [r7, #3]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f864 	bl	800ccc8 <USBH_MSC_BOT_Abort>
 800cc00:	4603      	mov	r3, r0
 800cc02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800cc04:	7dbb      	ldrb	r3, [r7, #22]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d104      	bne.n	800cc14 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	2207      	movs	r2, #7
 800cc0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800cc12:	e04f      	b.n	800ccb4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800cc14:	7dbb      	ldrb	r3, [r7, #22]
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d14c      	bne.n	800ccb4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	220b      	movs	r2, #11
 800cc1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cc22:	e047      	b.n	800ccb4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800cc24:	78fb      	ldrb	r3, [r7, #3]
 800cc26:	2201      	movs	r2, #1
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 f84c 	bl	800ccc8 <USBH_MSC_BOT_Abort>
 800cc30:	4603      	mov	r3, r0
 800cc32:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800cc34:	7dbb      	ldrb	r3, [r7, #22]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d11d      	bne.n	800cc76 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	795b      	ldrb	r3, [r3, #5]
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f004 fdd5 	bl	80117f0 <USBH_LL_GetToggle>
 800cc46:	4603      	mov	r3, r0
 800cc48:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	7959      	ldrb	r1, [r3, #5]
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
 800cc50:	f1c3 0301 	rsb	r3, r3, #1
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	461a      	mov	r2, r3
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f004 fd99 	bl	8011790 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	791b      	ldrb	r3, [r3, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	4619      	mov	r1, r3
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f004 fd92 	bl	8011790 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	2209      	movs	r2, #9
 800cc70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800cc74:	e020      	b.n	800ccb8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800cc76:	7dbb      	ldrb	r3, [r7, #22]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d11d      	bne.n	800ccb8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	220b      	movs	r2, #11
 800cc80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800cc84:	e018      	b.n	800ccb8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f7ff fdf2 	bl	800c870 <USBH_MSC_BOT_REQ_Reset>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d112      	bne.n	800ccbc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800cc9e:	e00d      	b.n	800ccbc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800cca0:	bf00      	nop
 800cca2:	e00c      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800cca4:	bf00      	nop
 800cca6:	e00a      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800cca8:	bf00      	nop
 800ccaa:	e008      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800ccac:	bf00      	nop
 800ccae:	e006      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800ccb0:	bf00      	nop
 800ccb2:	e004      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800ccb4:	bf00      	nop
 800ccb6:	e002      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800ccb8:	bf00      	nop
 800ccba:	e000      	b.n	800ccbe <USBH_MSC_BOT_Process+0x392>
      break;
 800ccbc:	bf00      	nop
  }
  return status;
 800ccbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3718      	adds	r7, #24
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
 800ccd4:	4613      	mov	r3, r2
 800ccd6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800ccd8:	2302      	movs	r3, #2
 800ccda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cce2:	69db      	ldr	r3, [r3, #28]
 800cce4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800cce6:	78bb      	ldrb	r3, [r7, #2]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <USBH_MSC_BOT_Abort+0x2a>
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d009      	beq.n	800cd04 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800ccf0:	e011      	b.n	800cd16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	79db      	ldrb	r3, [r3, #7]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f001 f9a8 	bl	800e04e <USBH_ClrFeature>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	73fb      	strb	r3, [r7, #15]
      break;
 800cd02:	e008      	b.n	800cd16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	799b      	ldrb	r3, [r3, #6]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f001 f99f 	bl	800e04e <USBH_ClrFeature>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
      break;
 800cd14:	bf00      	nop
  }
  return status;
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}

0800cd20 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800cd32:	2301      	movs	r3, #1
 800cd34:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	791b      	ldrb	r3, [r3, #4]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f004 fc6b 	bl	8011618 <USBH_LL_GetLastXferSize>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b0d      	cmp	r3, #13
 800cd46:	d002      	beq.n	800cd4e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800cd48:	2302      	movs	r3, #2
 800cd4a:	73fb      	strb	r3, [r7, #15]
 800cd4c:	e024      	b.n	800cd98 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd52:	4a14      	ldr	r2, [pc, #80]	; (800cda4 <USBH_MSC_DecodeCSW+0x84>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d11d      	bne.n	800cd94 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d119      	bne.n	800cd98 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d102      	bne.n	800cd74 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	73fb      	strb	r3, [r7, #15]
 800cd72:	e011      	b.n	800cd98 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d102      	bne.n	800cd84 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	73fb      	strb	r3, [r7, #15]
 800cd82:	e009      	b.n	800cd98 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd8a:	2b02      	cmp	r3, #2
 800cd8c:	d104      	bne.n	800cd98 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800cd8e:	2302      	movs	r3, #2
 800cd90:	73fb      	strb	r3, [r7, #15]
 800cd92:	e001      	b.n	800cd98 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800cd94:	2302      	movs	r3, #2
 800cd96:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	53425355 	.word	0x53425355

0800cda8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdbe:	69db      	ldr	r3, [r3, #28]
 800cdc0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d002      	beq.n	800cdd2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d021      	beq.n	800ce14 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cdd0:	e028      	b.n	800ce24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	220a      	movs	r2, #10
 800cde4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	3363      	adds	r3, #99	; 0x63
 800cdec:	2210      	movs	r2, #16
 800cdee:	2100      	movs	r1, #0
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f004 fdcd 	bl	8011990 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	73fb      	strb	r3, [r7, #15]
      break;
 800ce12:	e007      	b.n	800ce24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	4619      	mov	r1, r3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fd87 	bl	800c92c <USBH_MSC_BOT_Process>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	73fb      	strb	r3, [r7, #15]
      break;
 800ce22:	bf00      	nop
  }

  return error;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b086      	sub	sp, #24
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	460b      	mov	r3, r1
 800ce38:	607a      	str	r2, [r7, #4]
 800ce3a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce46:	69db      	ldr	r3, [r3, #28]
 800ce48:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d002      	beq.n	800ce5a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d027      	beq.n	800cea8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ce58:	e05f      	b.n	800cf1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	2208      	movs	r2, #8
 800ce5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	2280      	movs	r2, #128	; 0x80
 800ce64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	220a      	movs	r2, #10
 800ce6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	3363      	adds	r3, #99	; 0x63
 800ce74:	2210      	movs	r2, #16
 800ce76:	2100      	movs	r1, #0
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f004 fd89 	bl	8011990 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	2225      	movs	r2, #37	; 0x25
 800ce82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	2202      	movs	r2, #2
 800ce92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	f103 0210 	add.w	r2, r3, #16
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cea2:	2301      	movs	r3, #1
 800cea4:	75fb      	strb	r3, [r7, #23]
      break;
 800cea6:	e038      	b.n	800cf1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cea8:	7afb      	ldrb	r3, [r7, #11]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f7ff fd3d 	bl	800c92c <USBH_MSC_BOT_Process>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d12d      	bne.n	800cf18 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec2:	3303      	adds	r3, #3
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	461a      	mov	r2, r3
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cece:	3302      	adds	r3, #2
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	021b      	lsls	r3, r3, #8
 800ced4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cedc:	3301      	adds	r3, #1
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800cee2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	061b      	lsls	r3, r3, #24
 800ceee:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cefa:	3307      	adds	r3, #7
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf06:	3306      	adds	r3, #6
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	021b      	lsls	r3, r3, #8
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4313      	orrs	r3, r2
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	809a      	strh	r2, [r3, #4]
      break;
 800cf18:	bf00      	nop
  }

  return error;
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b086      	sub	sp, #24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800cf32:	2302      	movs	r3, #2
 800cf34:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d002      	beq.n	800cf50 <USBH_MSC_SCSI_Inquiry+0x2c>
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	d03d      	beq.n	800cfca <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800cf4e:	e089      	b.n	800d064 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	2224      	movs	r2, #36	; 0x24
 800cf54:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	2280      	movs	r2, #128	; 0x80
 800cf5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	220a      	movs	r2, #10
 800cf62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3363      	adds	r3, #99	; 0x63
 800cf6a:	220a      	movs	r2, #10
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f004 fd0e 	bl	8011990 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	2212      	movs	r2, #18
 800cf78:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	015b      	lsls	r3, r3, #5
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	2200      	movs	r2, #0
 800cf94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	2224      	movs	r2, #36	; 0x24
 800cf9c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	f103 0210 	add.w	r2, r3, #16
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	75fb      	strb	r3, [r7, #23]
      break;
 800cfc8:	e04c      	b.n	800d064 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cfca:	7afb      	ldrb	r3, [r7, #11]
 800cfcc:	4619      	mov	r1, r3
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7ff fcac 	bl	800c92c <USBH_MSC_BOT_Process>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d141      	bne.n	800d062 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800cfde:	2222      	movs	r2, #34	; 0x22
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f004 fcd4 	bl	8011990 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	f003 031f 	and.w	r3, r3, #31
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	095b      	lsrs	r3, r3, #5
 800d004:	b2da      	uxtb	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d010:	3301      	adds	r3, #1
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	b25b      	sxtb	r3, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	da03      	bge.n	800d022 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	709a      	strb	r2, [r3, #2]
 800d020:	e002      	b.n	800d028 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	1cd8      	adds	r0, r3, #3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d032:	3308      	adds	r3, #8
 800d034:	2208      	movs	r2, #8
 800d036:	4619      	mov	r1, r3
 800d038:	f004 fc9c 	bl	8011974 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f103 000c 	add.w	r0, r3, #12
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d048:	3310      	adds	r3, #16
 800d04a:	2210      	movs	r2, #16
 800d04c:	4619      	mov	r1, r3
 800d04e:	f004 fc91 	bl	8011974 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	331d      	adds	r3, #29
 800d056:	693a      	ldr	r2, [r7, #16]
 800d058:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800d05c:	3220      	adds	r2, #32
 800d05e:	6812      	ldr	r2, [r2, #0]
 800d060:	601a      	str	r2, [r3, #0]
      break;
 800d062:	bf00      	nop
  }

  return error;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b086      	sub	sp, #24
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	460b      	mov	r3, r1
 800d078:	607a      	str	r2, [r7, #4]
 800d07a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d07c:	2302      	movs	r3, #2
 800d07e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d086:	69db      	ldr	r3, [r3, #28]
 800d088:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d090:	2b01      	cmp	r3, #1
 800d092:	d002      	beq.n	800d09a <USBH_MSC_SCSI_RequestSense+0x2c>
 800d094:	2b02      	cmp	r3, #2
 800d096:	d03d      	beq.n	800d114 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800d098:	e05d      	b.n	800d156 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	220e      	movs	r2, #14
 800d09e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	2280      	movs	r2, #128	; 0x80
 800d0a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	220a      	movs	r2, #10
 800d0ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	3363      	adds	r3, #99	; 0x63
 800d0b4:	2210      	movs	r2, #16
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f004 fc69 	bl	8011990 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800d0c6:	7afb      	ldrb	r3, [r7, #11]
 800d0c8:	015b      	lsls	r3, r3, #5
 800d0ca:	b2da      	uxtb	r2, r3
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	220e      	movs	r2, #14
 800d0e6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	2202      	movs	r2, #2
 800d0fe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	f103 0210 	add.w	r2, r3, #16
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d10e:	2301      	movs	r3, #1
 800d110:	75fb      	strb	r3, [r7, #23]
      break;
 800d112:	e020      	b.n	800d156 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d114:	7afb      	ldrb	r3, [r7, #11]
 800d116:	4619      	mov	r1, r3
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7ff fc07 	bl	800c92c <USBH_MSC_BOT_Process>
 800d11e:	4603      	mov	r3, r0
 800d120:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d115      	bne.n	800d154 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d12e:	3302      	adds	r3, #2
 800d130:	781b      	ldrb	r3, [r3, #0]
 800d132:	f003 030f 	and.w	r3, r3, #15
 800d136:	b2da      	uxtb	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d142:	7b1a      	ldrb	r2, [r3, #12]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d14e:	7b5a      	ldrb	r2, [r3, #13]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	709a      	strb	r2, [r3, #2]
      break;
 800d154:	bf00      	nop
  }

  return error;
 800d156:	7dfb      	ldrb	r3, [r7, #23]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3718      	adds	r7, #24
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	607a      	str	r2, [r7, #4]
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	460b      	mov	r3, r1
 800d16e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d170:	2302      	movs	r3, #2
 800d172:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d184:	2b01      	cmp	r3, #1
 800d186:	d002      	beq.n	800d18e <USBH_MSC_SCSI_Write+0x2e>
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d047      	beq.n	800d21c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d18c:	e04e      	b.n	800d22c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800d194:	461a      	mov	r2, r3
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	fb03 f202 	mul.w	r2, r3, r2
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	220a      	movs	r2, #10
 800d1ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	3363      	adds	r3, #99	; 0x63
 800d1b4:	2210      	movs	r2, #16
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f004 fbe9 	bl	8011990 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	222a      	movs	r2, #42	; 0x2a
 800d1c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800d1c6:	79fa      	ldrb	r2, [r7, #7]
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800d1ce:	79ba      	ldrb	r2, [r7, #6]
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800d1d6:	797a      	ldrb	r2, [r7, #5]
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800d1de:	1d3b      	adds	r3, r7, #4
 800d1e0:	781a      	ldrb	r2, [r3, #0]
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800d1e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800d1f2:	f107 0320 	add.w	r3, r7, #32
 800d1f6:	781a      	ldrb	r2, [r3, #0]
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	2202      	movs	r2, #2
 800d20a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d216:	2301      	movs	r3, #1
 800d218:	75fb      	strb	r3, [r7, #23]
      break;
 800d21a:	e007      	b.n	800d22c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d21c:	7afb      	ldrb	r3, [r7, #11]
 800d21e:	4619      	mov	r1, r3
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f7ff fb83 	bl	800c92c <USBH_MSC_BOT_Process>
 800d226:	4603      	mov	r3, r0
 800d228:	75fb      	strb	r3, [r7, #23]
      break;
 800d22a:	bf00      	nop
  }

  return error;
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b086      	sub	sp, #24
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	60f8      	str	r0, [r7, #12]
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	603b      	str	r3, [r7, #0]
 800d242:	460b      	mov	r3, r1
 800d244:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800d246:	2302      	movs	r3, #2
 800d248:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d002      	beq.n	800d264 <USBH_MSC_SCSI_Read+0x2e>
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d047      	beq.n	800d2f2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800d262:	e04e      	b.n	800d302 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800d26a:	461a      	mov	r2, r3
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	fb03 f202 	mul.w	r2, r3, r2
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	2280      	movs	r2, #128	; 0x80
 800d27a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	220a      	movs	r2, #10
 800d282:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	3363      	adds	r3, #99	; 0x63
 800d28a:	2210      	movs	r2, #16
 800d28c:	2100      	movs	r1, #0
 800d28e:	4618      	mov	r0, r3
 800d290:	f004 fb7e 	bl	8011990 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	2228      	movs	r2, #40	; 0x28
 800d298:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800d29c:	79fa      	ldrb	r2, [r7, #7]
 800d29e:	693b      	ldr	r3, [r7, #16]
 800d2a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800d2a4:	79ba      	ldrb	r2, [r7, #6]
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800d2ac:	797a      	ldrb	r2, [r7, #5]
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800d2b4:	1d3b      	adds	r3, r7, #4
 800d2b6:	781a      	ldrb	r2, [r3, #0]
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800d2be:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800d2c8:	f107 0320 	add.w	r3, r7, #32
 800d2cc:	781a      	ldrb	r2, [r3, #0]
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800d2f0:	e007      	b.n	800d302 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800d2f2:	7afb      	ldrb	r3, [r7, #11]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7ff fb18 	bl	800c92c <USBH_MSC_BOT_Process>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800d300:	bf00      	nop
  }

  return error;
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	4613      	mov	r3, r2
 800d318:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d320:	2302      	movs	r3, #2
 800d322:	e029      	b.n	800d378 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	79fa      	ldrb	r2, [r7, #7]
 800d328:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 f81f 	bl	800d380 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2200      	movs	r2, #0
 800d35e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	68ba      	ldr	r2, [r7, #8]
 800d36c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f004 f893 	bl	801149c <USBH_LL_Init>

  return USBH_OK;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d38c:	2300      	movs	r3, #0
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	e009      	b.n	800d3a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	33e0      	adds	r3, #224	; 0xe0
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	2200      	movs	r2, #0
 800d39e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60fb      	str	r3, [r7, #12]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b0f      	cmp	r3, #15
 800d3aa:	d9f2      	bls.n	800d392 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	e009      	b.n	800d3c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d3bc:	2200      	movs	r2, #0
 800d3be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3cc:	d3f1      	bcc.n	800d3b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2240      	movs	r2, #64	; 0x40
 800d3f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d41a:	2300      	movs	r3, #0
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3714      	adds	r7, #20
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d016      	beq.n	800d46a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10e      	bne.n	800d464 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d44c:	1c59      	adds	r1, r3, #1
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	33de      	adds	r3, #222	; 0xde
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	73fb      	strb	r3, [r7, #15]
 800d462:	e004      	b.n	800d46e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d464:	2302      	movs	r3, #2
 800d466:	73fb      	strb	r3, [r7, #15]
 800d468:	e001      	b.n	800d46e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d46a:	2302      	movs	r3, #2
 800d46c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	429a      	cmp	r2, r3
 800d496:	d204      	bcs.n	800d4a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	78fa      	ldrb	r2, [r7, #3]
 800d49c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d4a0:	e001      	b.n	800d4a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3714      	adds	r7, #20
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b087      	sub	sp, #28
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	4608      	mov	r0, r1
 800d4be:	4611      	mov	r1, r2
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	70fb      	strb	r3, [r7, #3]
 800d4c6:	460b      	mov	r3, r1
 800d4c8:	70bb      	strb	r3, [r7, #2]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d4dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d4de:	e025      	b.n	800d52c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	221a      	movs	r2, #26
 800d4e4:	fb02 f303 	mul.w	r3, r2, r3
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	4413      	add	r3, r2
 800d4ee:	3302      	adds	r3, #2
 800d4f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	795b      	ldrb	r3, [r3, #5]
 800d4f6:	78fa      	ldrb	r2, [r7, #3]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d002      	beq.n	800d502 <USBH_FindInterface+0x4e>
 800d4fc:	78fb      	ldrb	r3, [r7, #3]
 800d4fe:	2bff      	cmp	r3, #255	; 0xff
 800d500:	d111      	bne.n	800d526 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d506:	78ba      	ldrb	r2, [r7, #2]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d002      	beq.n	800d512 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d50c:	78bb      	ldrb	r3, [r7, #2]
 800d50e:	2bff      	cmp	r3, #255	; 0xff
 800d510:	d109      	bne.n	800d526 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d516:	787a      	ldrb	r2, [r7, #1]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d002      	beq.n	800d522 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d51c:	787b      	ldrb	r3, [r7, #1]
 800d51e:	2bff      	cmp	r3, #255	; 0xff
 800d520:	d101      	bne.n	800d526 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d522:	7dfb      	ldrb	r3, [r7, #23]
 800d524:	e006      	b.n	800d534 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d526:	7dfb      	ldrb	r3, [r7, #23]
 800d528:	3301      	adds	r3, #1
 800d52a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d9d6      	bls.n	800d4e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d532:	23ff      	movs	r3, #255	; 0xff
}
 800d534:	4618      	mov	r0, r3
 800d536:	371c      	adds	r7, #28
 800d538:	46bd      	mov	sp, r7
 800d53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53e:	4770      	bx	lr

0800d540 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f003 ffed 	bl	8011528 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d54e:	2101      	movs	r1, #1
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f004 f906 	bl	8011762 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3708      	adds	r7, #8
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af04      	add	r7, sp, #16
 800d566:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d568:	2302      	movs	r3, #2
 800d56a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d56c:	2300      	movs	r3, #0
 800d56e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d576:	b2db      	uxtb	r3, r3
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d102      	bne.n	800d582 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2203      	movs	r2, #3
 800d580:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b0b      	cmp	r3, #11
 800d58a:	f200 81be 	bhi.w	800d90a <USBH_Process+0x3aa>
 800d58e:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <USBH_Process+0x34>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d5c5 	.word	0x0800d5c5
 800d598:	0800d5f7 	.word	0x0800d5f7
 800d59c:	0800d65f 	.word	0x0800d65f
 800d5a0:	0800d8a5 	.word	0x0800d8a5
 800d5a4:	0800d90b 	.word	0x0800d90b
 800d5a8:	0800d703 	.word	0x0800d703
 800d5ac:	0800d84b 	.word	0x0800d84b
 800d5b0:	0800d739 	.word	0x0800d739
 800d5b4:	0800d759 	.word	0x0800d759
 800d5b8:	0800d779 	.word	0x0800d779
 800d5bc:	0800d7bd 	.word	0x0800d7bd
 800d5c0:	0800d88d 	.word	0x0800d88d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 819e 	beq.w	800d90e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d5d8:	20c8      	movs	r0, #200	; 0xc8
 800d5da:	f004 f939 	bl	8011850 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f003 ffff 	bl	80115e2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d5f4:	e18b      	b.n	800d90e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d107      	bne.n	800d610 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2202      	movs	r2, #2
 800d60c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d60e:	e18d      	b.n	800d92c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d61a:	d914      	bls.n	800d646 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d622:	3301      	adds	r3, #1
 800d624:	b2da      	uxtb	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d632:	2b03      	cmp	r3, #3
 800d634:	d903      	bls.n	800d63e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	220d      	movs	r2, #13
 800d63a:	701a      	strb	r2, [r3, #0]
      break;
 800d63c:	e176      	b.n	800d92c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	701a      	strb	r2, [r3, #0]
      break;
 800d644:	e172      	b.n	800d92c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d64c:	f103 020a 	add.w	r2, r3, #10
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d656:	200a      	movs	r0, #10
 800d658:	f004 f8fa 	bl	8011850 <USBH_Delay>
      break;
 800d65c:	e166      	b.n	800d92c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d664:	2b00      	cmp	r3, #0
 800d666:	d005      	beq.n	800d674 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d66e:	2104      	movs	r1, #4
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d674:	2064      	movs	r0, #100	; 0x64
 800d676:	f004 f8eb 	bl	8011850 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f003 ff8a 	bl	8011594 <USBH_LL_GetSpeed>
 800d680:	4603      	mov	r3, r0
 800d682:	461a      	mov	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2205      	movs	r2, #5
 800d68e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d690:	2100      	movs	r1, #0
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f001 fa29 	bl	800eaea <USBH_AllocPipe>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d6a0:	2180      	movs	r1, #128	; 0x80
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f001 fa21 	bl	800eaea <USBH_AllocPipe>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	7919      	ldrb	r1, [r3, #4]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d6c4:	b292      	uxth	r2, r2
 800d6c6:	9202      	str	r2, [sp, #8]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	9201      	str	r2, [sp, #4]
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2280      	movs	r2, #128	; 0x80
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f001 f9da 	bl	800ea8c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	7959      	ldrb	r1, [r3, #5]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d6ec:	b292      	uxth	r2, r2
 800d6ee:	9202      	str	r2, [sp, #8]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	9201      	str	r2, [sp, #4]
 800d6f4:	9300      	str	r3, [sp, #0]
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f001 f9c6 	bl	800ea8c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d700:	e114      	b.n	800d92c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f918 	bl	800d938 <USBH_HandleEnum>
 800d708:	4603      	mov	r3, r0
 800d70a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d70c:	7bbb      	ldrb	r3, [r7, #14]
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 80fe 	bne.w	800d912 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d724:	2b01      	cmp	r3, #1
 800d726:	d103      	bne.n	800d730 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2208      	movs	r2, #8
 800d72c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d72e:	e0f0      	b.n	800d912 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2207      	movs	r2, #7
 800d734:	701a      	strb	r2, [r3, #0]
      break;
 800d736:	e0ec      	b.n	800d912 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f000 80e9 	beq.w	800d916 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d74a:	2101      	movs	r1, #1
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2208      	movs	r2, #8
 800d754:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d756:	e0de      	b.n	800d916 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d75e:	b29b      	uxth	r3, r3
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fc2c 	bl	800dfc0 <USBH_SetCfg>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f040 80d5 	bne.w	800d91a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2209      	movs	r2, #9
 800d774:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d776:	e0d0      	b.n	800d91a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d77e:	f003 0320 	and.w	r3, r3, #32
 800d782:	2b00      	cmp	r3, #0
 800d784:	d016      	beq.n	800d7b4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d786:	2101      	movs	r1, #1
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fc3c 	bl	800e006 <USBH_SetFeature>
 800d78e:	4603      	mov	r3, r0
 800d790:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d792:	7bbb      	ldrb	r3, [r7, #14]
 800d794:	b2db      	uxtb	r3, r3
 800d796:	2b00      	cmp	r3, #0
 800d798:	d103      	bne.n	800d7a2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	220a      	movs	r2, #10
 800d79e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d7a0:	e0bd      	b.n	800d91e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	f040 80b9 	bne.w	800d91e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	220a      	movs	r2, #10
 800d7b0:	701a      	strb	r2, [r3, #0]
      break;
 800d7b2:	e0b4      	b.n	800d91e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	220a      	movs	r2, #10
 800d7b8:	701a      	strb	r2, [r3, #0]
      break;
 800d7ba:	e0b0      	b.n	800d91e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f000 80ad 	beq.w	800d922 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	73fb      	strb	r3, [r7, #15]
 800d7d4:	e016      	b.n	800d804 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d7d6:	7bfa      	ldrb	r2, [r7, #15]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	32de      	adds	r2, #222	; 0xde
 800d7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e0:	791a      	ldrb	r2, [r3, #4]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d108      	bne.n	800d7fe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d7ec:	7bfa      	ldrb	r2, [r7, #15]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	32de      	adds	r2, #222	; 0xde
 800d7f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d7fc:	e005      	b.n	800d80a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	3301      	adds	r3, #1
 800d802:	73fb      	strb	r3, [r7, #15]
 800d804:	7bfb      	ldrb	r3, [r7, #15]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0e5      	beq.n	800d7d6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d016      	beq.n	800d842 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	4798      	blx	r3
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d109      	bne.n	800d83a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2206      	movs	r2, #6
 800d82a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d832:	2103      	movs	r1, #3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d838:	e073      	b.n	800d922 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	220d      	movs	r2, #13
 800d83e:	701a      	strb	r2, [r3, #0]
      break;
 800d840:	e06f      	b.n	800d922 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	220d      	movs	r2, #13
 800d846:	701a      	strb	r2, [r3, #0]
      break;
 800d848:	e06b      	b.n	800d922 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d850:	2b00      	cmp	r3, #0
 800d852:	d017      	beq.n	800d884 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	4798      	blx	r3
 800d860:	4603      	mov	r3, r0
 800d862:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d864:	7bbb      	ldrb	r3, [r7, #14]
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d103      	bne.n	800d874 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	220b      	movs	r2, #11
 800d870:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d872:	e058      	b.n	800d926 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d874:	7bbb      	ldrb	r3, [r7, #14]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d154      	bne.n	800d926 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	220d      	movs	r2, #13
 800d880:	701a      	strb	r2, [r3, #0]
      break;
 800d882:	e050      	b.n	800d926 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	220d      	movs	r2, #13
 800d888:	701a      	strb	r2, [r3, #0]
      break;
 800d88a:	e04c      	b.n	800d926 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d892:	2b00      	cmp	r3, #0
 800d894:	d049      	beq.n	800d92a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	4798      	blx	r3
      }
      break;
 800d8a2:	e042      	b.n	800d92a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff fd67 	bl	800d380 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d009      	beq.n	800d8d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d005      	beq.n	800d8e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8e0:	2105      	movs	r1, #5
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d107      	bne.n	800d902 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f7ff fe20 	bl	800d540 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d900:	e014      	b.n	800d92c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f003 fe10 	bl	8011528 <USBH_LL_Start>
      break;
 800d908:	e010      	b.n	800d92c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d90a:	bf00      	nop
 800d90c:	e00e      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d90e:	bf00      	nop
 800d910:	e00c      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d912:	bf00      	nop
 800d914:	e00a      	b.n	800d92c <USBH_Process+0x3cc>
    break;
 800d916:	bf00      	nop
 800d918:	e008      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d91a:	bf00      	nop
 800d91c:	e006      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d91e:	bf00      	nop
 800d920:	e004      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d922:	bf00      	nop
 800d924:	e002      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d926:	bf00      	nop
 800d928:	e000      	b.n	800d92c <USBH_Process+0x3cc>
      break;
 800d92a:	bf00      	nop
  }
  return USBH_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop

0800d938 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af04      	add	r7, sp, #16
 800d93e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d940:	2301      	movs	r3, #1
 800d942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d944:	2301      	movs	r3, #1
 800d946:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	785b      	ldrb	r3, [r3, #1]
 800d94c:	2b07      	cmp	r3, #7
 800d94e:	f200 81c1 	bhi.w	800dcd4 <USBH_HandleEnum+0x39c>
 800d952:	a201      	add	r2, pc, #4	; (adr r2, 800d958 <USBH_HandleEnum+0x20>)
 800d954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d958:	0800d979 	.word	0x0800d979
 800d95c:	0800da37 	.word	0x0800da37
 800d960:	0800daa1 	.word	0x0800daa1
 800d964:	0800db2f 	.word	0x0800db2f
 800d968:	0800db99 	.word	0x0800db99
 800d96c:	0800dc09 	.word	0x0800dc09
 800d970:	0800dc4f 	.word	0x0800dc4f
 800d974:	0800dc95 	.word	0x0800dc95
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d978:	2108      	movs	r1, #8
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 fa50 	bl	800de20 <USBH_Get_DevDesc>
 800d980:	4603      	mov	r3, r0
 800d982:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d984:	7bbb      	ldrb	r3, [r7, #14]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d130      	bne.n	800d9ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7919      	ldrb	r1, [r3, #4]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d9ae:	b292      	uxth	r2, r2
 800d9b0:	9202      	str	r2, [sp, #8]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	9201      	str	r2, [sp, #4]
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2280      	movs	r2, #128	; 0x80
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f001 f865 	bl	800ea8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7959      	ldrb	r1, [r3, #5]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d9d6:	b292      	uxth	r2, r2
 800d9d8:	9202      	str	r2, [sp, #8]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	9201      	str	r2, [sp, #4]
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f001 f851 	bl	800ea8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d9ea:	e175      	b.n	800dcd8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9ec:	7bbb      	ldrb	r3, [r7, #14]
 800d9ee:	2b03      	cmp	r3, #3
 800d9f0:	f040 8172 	bne.w	800dcd8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da0a:	2b03      	cmp	r3, #3
 800da0c:	d903      	bls.n	800da16 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	220d      	movs	r2, #13
 800da12:	701a      	strb	r2, [r3, #0]
      break;
 800da14:	e160      	b.n	800dcd8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	795b      	ldrb	r3, [r3, #5]
 800da1a:	4619      	mov	r1, r3
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f001 f885 	bl	800eb2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	791b      	ldrb	r3, [r3, #4]
 800da26:	4619      	mov	r1, r3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f001 f87f 	bl	800eb2c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	701a      	strb	r2, [r3, #0]
      break;
 800da34:	e150      	b.n	800dcd8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800da36:	2112      	movs	r1, #18
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f9f1 	bl	800de20 <USBH_Get_DevDesc>
 800da3e:	4603      	mov	r3, r0
 800da40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d103      	bne.n	800da50 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2202      	movs	r2, #2
 800da4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800da4e:	e145      	b.n	800dcdc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	2b03      	cmp	r3, #3
 800da54:	f040 8142 	bne.w	800dcdc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da5e:	3301      	adds	r3, #1
 800da60:	b2da      	uxtb	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d903      	bls.n	800da7a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	220d      	movs	r2, #13
 800da76:	701a      	strb	r2, [r3, #0]
      break;
 800da78:	e130      	b.n	800dcdc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	795b      	ldrb	r3, [r3, #5]
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f001 f853 	bl	800eb2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	791b      	ldrb	r3, [r3, #4]
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f001 f84d 	bl	800eb2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	701a      	strb	r2, [r3, #0]
      break;
 800da9e:	e11d      	b.n	800dcdc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800daa0:	2101      	movs	r1, #1
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 fa68 	bl	800df78 <USBH_SetAddress>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800daac:	7bbb      	ldrb	r3, [r7, #14]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d132      	bne.n	800db18 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800dab2:	2002      	movs	r0, #2
 800dab4:	f003 fecc 	bl	8011850 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2203      	movs	r2, #3
 800dac4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	7919      	ldrb	r1, [r3, #4]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dada:	b292      	uxth	r2, r2
 800dadc:	9202      	str	r2, [sp, #8]
 800dade:	2200      	movs	r2, #0
 800dae0:	9201      	str	r2, [sp, #4]
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	4603      	mov	r3, r0
 800dae6:	2280      	movs	r2, #128	; 0x80
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 ffcf 	bl	800ea8c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	7959      	ldrb	r1, [r3, #5]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800db02:	b292      	uxth	r2, r2
 800db04:	9202      	str	r2, [sp, #8]
 800db06:	2200      	movs	r2, #0
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	4603      	mov	r3, r0
 800db0e:	2200      	movs	r2, #0
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 ffbb 	bl	800ea8c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800db16:	e0e3      	b.n	800dce0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db18:	7bbb      	ldrb	r3, [r7, #14]
 800db1a:	2b03      	cmp	r3, #3
 800db1c:	f040 80e0 	bne.w	800dce0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	220d      	movs	r2, #13
 800db24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	705a      	strb	r2, [r3, #1]
      break;
 800db2c:	e0d8      	b.n	800dce0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800db2e:	2109      	movs	r1, #9
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f99d 	bl	800de70 <USBH_Get_CfgDesc>
 800db36:	4603      	mov	r3, r0
 800db38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d103      	bne.n	800db48 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2204      	movs	r2, #4
 800db44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800db46:	e0cd      	b.n	800dce4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db48:	7bbb      	ldrb	r3, [r7, #14]
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	f040 80ca 	bne.w	800dce4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800db56:	3301      	adds	r3, #1
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800db66:	2b03      	cmp	r3, #3
 800db68:	d903      	bls.n	800db72 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	220d      	movs	r2, #13
 800db6e:	701a      	strb	r2, [r3, #0]
      break;
 800db70:	e0b8      	b.n	800dce4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	795b      	ldrb	r3, [r3, #5]
 800db76:	4619      	mov	r1, r3
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 ffd7 	bl	800eb2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	791b      	ldrb	r3, [r3, #4]
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 ffd1 	bl	800eb2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	701a      	strb	r2, [r3, #0]
      break;
 800db96:	e0a5      	b.n	800dce4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800db9e:	4619      	mov	r1, r3
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 f965 	bl	800de70 <USBH_Get_CfgDesc>
 800dba6:	4603      	mov	r3, r0
 800dba8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dbaa:	7bbb      	ldrb	r3, [r7, #14]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d103      	bne.n	800dbb8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2205      	movs	r2, #5
 800dbb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dbb6:	e097      	b.n	800dce8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
 800dbba:	2b03      	cmp	r3, #3
 800dbbc:	f040 8094 	bne.w	800dce8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dbd6:	2b03      	cmp	r3, #3
 800dbd8:	d903      	bls.n	800dbe2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	220d      	movs	r2, #13
 800dbde:	701a      	strb	r2, [r3, #0]
      break;
 800dbe0:	e082      	b.n	800dce8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	795b      	ldrb	r3, [r3, #5]
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 ff9f 	bl	800eb2c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	791b      	ldrb	r3, [r3, #4]
 800dbf2:	4619      	mov	r1, r3
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f000 ff99 	bl	800eb2c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	701a      	strb	r2, [r3, #0]
      break;
 800dc06:	e06f      	b.n	800dce8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d019      	beq.n	800dc46 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dc1e:	23ff      	movs	r3, #255	; 0xff
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 f949 	bl	800deb8 <USBH_Get_StringDesc>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dc2a:	7bbb      	ldrb	r3, [r7, #14]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d103      	bne.n	800dc38 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2206      	movs	r2, #6
 800dc34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dc36:	e059      	b.n	800dcec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc38:	7bbb      	ldrb	r3, [r7, #14]
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	d156      	bne.n	800dcec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2206      	movs	r2, #6
 800dc42:	705a      	strb	r2, [r3, #1]
      break;
 800dc44:	e052      	b.n	800dcec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2206      	movs	r2, #6
 800dc4a:	705a      	strb	r2, [r3, #1]
      break;
 800dc4c:	e04e      	b.n	800dcec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d019      	beq.n	800dc8c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dc64:	23ff      	movs	r3, #255	; 0xff
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f926 	bl	800deb8 <USBH_Get_StringDesc>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dc70:	7bbb      	ldrb	r3, [r7, #14]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d103      	bne.n	800dc7e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2207      	movs	r2, #7
 800dc7a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dc7c:	e038      	b.n	800dcf0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc7e:	7bbb      	ldrb	r3, [r7, #14]
 800dc80:	2b03      	cmp	r3, #3
 800dc82:	d135      	bne.n	800dcf0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2207      	movs	r2, #7
 800dc88:	705a      	strb	r2, [r3, #1]
      break;
 800dc8a:	e031      	b.n	800dcf0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2207      	movs	r2, #7
 800dc90:	705a      	strb	r2, [r3, #1]
      break;
 800dc92:	e02d      	b.n	800dcf0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d017      	beq.n	800dcce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dcaa:	23ff      	movs	r3, #255	; 0xff
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f903 	bl	800deb8 <USBH_Get_StringDesc>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dcb6:	7bbb      	ldrb	r3, [r7, #14]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d102      	bne.n	800dcc2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dcc0:	e018      	b.n	800dcf4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d115      	bne.n	800dcf4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73fb      	strb	r3, [r7, #15]
      break;
 800dccc:	e012      	b.n	800dcf4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	73fb      	strb	r3, [r7, #15]
      break;
 800dcd2:	e00f      	b.n	800dcf4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800dcd4:	bf00      	nop
 800dcd6:	e00e      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dcd8:	bf00      	nop
 800dcda:	e00c      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dcdc:	bf00      	nop
 800dcde:	e00a      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dce0:	bf00      	nop
 800dce2:	e008      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dce4:	bf00      	nop
 800dce6:	e006      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dce8:	bf00      	nop
 800dcea:	e004      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dcec:	bf00      	nop
 800dcee:	e002      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dcf0:	bf00      	nop
 800dcf2:	e000      	b.n	800dcf6 <USBH_HandleEnum+0x3be>
      break;
 800dcf4:	bf00      	nop
  }
  return Status;
 800dcf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800dd00:	b480      	push	{r7}
 800dd02:	b083      	sub	sp, #12
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800dd12:	bf00      	nop
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800dd1e:	b580      	push	{r7, lr}
 800dd20:	b082      	sub	sp, #8
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 f804 	bl	800dd42 <USBH_HandleSof>
}
 800dd3a:	bf00      	nop
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b0b      	cmp	r3, #11
 800dd52:	d10a      	bne.n	800dd6a <USBH_HandleSof+0x28>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd64:	699b      	ldr	r3, [r3, #24]
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	4798      	blx	r3
  }
}
 800dd6a:	bf00      	nop
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b083      	sub	sp, #12
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800dd82:	bf00      	nop
}
 800dd84:	370c      	adds	r7, #12
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b083      	sub	sp, #12
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dd9e:	bf00      	nop
}
 800dda0:	370c      	adds	r7, #12
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ddaa:	b480      	push	{r7}
 800ddac:	b083      	sub	sp, #12
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ddca:	2300      	movs	r3, #0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr

0800ddd8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f003 fbb0 	bl	801155e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	791b      	ldrb	r3, [r3, #4]
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fe91 	bl	800eb2c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	795b      	ldrb	r3, [r3, #5]
 800de0e:	4619      	mov	r1, r3
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fe8b 	bl	800eb2c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800de16:	2300      	movs	r3, #0
}
 800de18:	4618      	mov	r0, r3
 800de1a:	3708      	adds	r7, #8
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af02      	add	r7, sp, #8
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	460b      	mov	r3, r1
 800de2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800de32:	78fb      	ldrb	r3, [r7, #3]
 800de34:	b29b      	uxth	r3, r3
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4613      	mov	r3, r2
 800de3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de3e:	2100      	movs	r1, #0
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 f864 	bl	800df0e <USBH_GetDescriptor>
 800de46:	4603      	mov	r3, r0
 800de48:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d10a      	bne.n	800de66 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f203 3026 	addw	r0, r3, #806	; 0x326
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800de5c:	78fa      	ldrb	r2, [r7, #3]
 800de5e:	b292      	uxth	r2, r2
 800de60:	4619      	mov	r1, r3
 800de62:	f000 f918 	bl	800e096 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800de66:	7bfb      	ldrb	r3, [r7, #15]
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3710      	adds	r7, #16
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800de70:	b580      	push	{r7, lr}
 800de72:	b086      	sub	sp, #24
 800de74:	af02      	add	r7, sp, #8
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	331c      	adds	r3, #28
 800de80:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800de82:	887b      	ldrh	r3, [r7, #2]
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de8c:	2100      	movs	r1, #0
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f83d 	bl	800df0e <USBH_GetDescriptor>
 800de94:	4603      	mov	r3, r0
 800de96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800de98:	7bfb      	ldrb	r3, [r7, #15]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d107      	bne.n	800deae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800de9e:	887b      	ldrh	r3, [r7, #2]
 800dea0:	461a      	mov	r2, r3
 800dea2:	68b9      	ldr	r1, [r7, #8]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 f987 	bl	800e1b8 <USBH_ParseCfgDesc>
 800deaa:	4603      	mov	r3, r0
 800deac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800deae:	7bfb      	ldrb	r3, [r7, #15]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b088      	sub	sp, #32
 800debc:	af02      	add	r7, sp, #8
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	607a      	str	r2, [r7, #4]
 800dec2:	461a      	mov	r2, r3
 800dec4:	460b      	mov	r3, r1
 800dec6:	72fb      	strb	r3, [r7, #11]
 800dec8:	4613      	mov	r3, r2
 800deca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800decc:	7afb      	ldrb	r3, [r7, #11]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ded4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800dedc:	893b      	ldrh	r3, [r7, #8]
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	460b      	mov	r3, r1
 800dee2:	2100      	movs	r1, #0
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 f812 	bl	800df0e <USBH_GetDescriptor>
 800deea:	4603      	mov	r3, r0
 800deec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800deee:	7dfb      	ldrb	r3, [r7, #23]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d107      	bne.n	800df04 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800defa:	893a      	ldrh	r2, [r7, #8]
 800defc:	6879      	ldr	r1, [r7, #4]
 800defe:	4618      	mov	r0, r3
 800df00:	f000 fb24 	bl	800e54c <USBH_ParseStringDesc>
  }

  return status;
 800df04:	7dfb      	ldrb	r3, [r7, #23]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b084      	sub	sp, #16
 800df12:	af00      	add	r7, sp, #0
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	607b      	str	r3, [r7, #4]
 800df18:	460b      	mov	r3, r1
 800df1a:	72fb      	strb	r3, [r7, #11]
 800df1c:	4613      	mov	r3, r2
 800df1e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	789b      	ldrb	r3, [r3, #2]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d11c      	bne.n	800df62 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800df28:	7afb      	ldrb	r3, [r7, #11]
 800df2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2206      	movs	r2, #6
 800df38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	893a      	ldrh	r2, [r7, #8]
 800df3e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800df40:	893b      	ldrh	r3, [r7, #8]
 800df42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800df46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df4a:	d104      	bne.n	800df56 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f240 4209 	movw	r2, #1033	; 0x409
 800df52:	829a      	strh	r2, [r3, #20]
 800df54:	e002      	b.n	800df5c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2200      	movs	r2, #0
 800df5a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	8b3a      	ldrh	r2, [r7, #24]
 800df60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800df62:	8b3b      	ldrh	r3, [r7, #24]
 800df64:	461a      	mov	r2, r3
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f000 fb3d 	bl	800e5e8 <USBH_CtlReq>
 800df6e:	4603      	mov	r3, r0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	460b      	mov	r3, r1
 800df82:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	789b      	ldrb	r3, [r3, #2]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d10f      	bne.n	800dfac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2205      	movs	r2, #5
 800df96:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800df98:	78fb      	ldrb	r3, [r7, #3]
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dfac:	2200      	movs	r2, #0
 800dfae:	2100      	movs	r1, #0
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fb19 	bl	800e5e8 <USBH_CtlReq>
 800dfb6:	4603      	mov	r3, r0
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	789b      	ldrb	r3, [r3, #2]
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d10e      	bne.n	800dff2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2209      	movs	r2, #9
 800dfde:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	887a      	ldrh	r2, [r7, #2]
 800dfe4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dff2:	2200      	movs	r2, #0
 800dff4:	2100      	movs	r1, #0
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 faf6 	bl	800e5e8 <USBH_CtlReq>
 800dffc:	4603      	mov	r3, r0
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
 800e00e:	460b      	mov	r3, r1
 800e010:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	789b      	ldrb	r3, [r3, #2]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d10f      	bne.n	800e03a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2203      	movs	r2, #3
 800e024:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e026:	78fb      	ldrb	r3, [r7, #3]
 800e028:	b29a      	uxth	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2200      	movs	r2, #0
 800e032:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e03a:	2200      	movs	r2, #0
 800e03c:	2100      	movs	r1, #0
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 fad2 	bl	800e5e8 <USBH_CtlReq>
 800e044:	4603      	mov	r3, r0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
 800e056:	460b      	mov	r3, r1
 800e058:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	789b      	ldrb	r3, [r3, #2]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d10f      	bne.n	800e082 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2202      	movs	r2, #2
 800e066:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e074:	78fb      	ldrb	r3, [r7, #3]
 800e076:	b29a      	uxth	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800e082:	2200      	movs	r2, #0
 800e084:	2100      	movs	r1, #0
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 faae 	bl	800e5e8 <USBH_CtlReq>
 800e08c:	4603      	mov	r3, r0
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800e096:	b480      	push	{r7}
 800e098:	b085      	sub	sp, #20
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	781a      	ldrb	r2, [r3, #0]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	785a      	ldrb	r2, [r3, #1]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	3302      	adds	r3, #2
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	b29a      	uxth	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	3303      	adds	r3, #3
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	021b      	lsls	r3, r3, #8
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	791a      	ldrb	r2, [r3, #4]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	795a      	ldrb	r2, [r3, #5]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	799a      	ldrb	r2, [r3, #6]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	79da      	ldrb	r2, [r3, #7]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	79db      	ldrb	r3, [r3, #7]
 800e0f4:	2b20      	cmp	r3, #32
 800e0f6:	dc11      	bgt.n	800e11c <USBH_ParseDevDesc+0x86>
 800e0f8:	2b08      	cmp	r3, #8
 800e0fa:	db16      	blt.n	800e12a <USBH_ParseDevDesc+0x94>
 800e0fc:	3b08      	subs	r3, #8
 800e0fe:	2201      	movs	r2, #1
 800e100:	fa02 f303 	lsl.w	r3, r2, r3
 800e104:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	bf14      	ite	ne
 800e110:	2301      	movne	r3, #1
 800e112:	2300      	moveq	r3, #0
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <USBH_ParseDevDesc+0x8a>
 800e11a:	e006      	b.n	800e12a <USBH_ParseDevDesc+0x94>
 800e11c:	2b40      	cmp	r3, #64	; 0x40
 800e11e:	d104      	bne.n	800e12a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	79da      	ldrb	r2, [r3, #7]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	71da      	strb	r2, [r3, #7]
      break;
 800e128:	e003      	b.n	800e132 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2240      	movs	r2, #64	; 0x40
 800e12e:	71da      	strb	r2, [r3, #7]
      break;
 800e130:	bf00      	nop
  }

  if (length > 8U)
 800e132:	88fb      	ldrh	r3, [r7, #6]
 800e134:	2b08      	cmp	r3, #8
 800e136:	d939      	bls.n	800e1ac <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	3308      	adds	r3, #8
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	b29a      	uxth	r2, r3
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	3309      	adds	r3, #9
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	b29b      	uxth	r3, r3
 800e148:	021b      	lsls	r3, r3, #8
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	4313      	orrs	r3, r2
 800e14e:	b29a      	uxth	r2, r3
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	330a      	adds	r3, #10
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	330b      	adds	r3, #11
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	b29b      	uxth	r3, r3
 800e164:	021b      	lsls	r3, r3, #8
 800e166:	b29b      	uxth	r3, r3
 800e168:	4313      	orrs	r3, r2
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	330c      	adds	r3, #12
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	b29a      	uxth	r2, r3
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	330d      	adds	r3, #13
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	021b      	lsls	r3, r3, #8
 800e182:	b29b      	uxth	r3, r3
 800e184:	4313      	orrs	r3, r2
 800e186:	b29a      	uxth	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	7b9a      	ldrb	r2, [r3, #14]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	7bda      	ldrb	r2, [r3, #15]
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e19c:	68bb      	ldr	r3, [r7, #8]
 800e19e:	7c1a      	ldrb	r2, [r3, #16]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	7c5a      	ldrb	r2, [r3, #17]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	745a      	strb	r2, [r3, #17]
  }
}
 800e1ac:	bf00      	nop
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08c      	sub	sp, #48	; 0x30
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e1cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	781a      	ldrb	r2, [r3, #0]
 800e1ec:	6a3b      	ldr	r3, [r7, #32]
 800e1ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	785a      	ldrb	r2, [r3, #1]
 800e1f4:	6a3b      	ldr	r3, [r7, #32]
 800e1f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	3302      	adds	r3, #2
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	3303      	adds	r3, #3
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	b29b      	uxth	r3, r3
 800e208:	021b      	lsls	r3, r3, #8
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4313      	orrs	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e214:	bf28      	it	cs
 800e216:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	6a3b      	ldr	r3, [r7, #32]
 800e21e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	791a      	ldrb	r2, [r3, #4]
 800e224:	6a3b      	ldr	r3, [r7, #32]
 800e226:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	795a      	ldrb	r2, [r3, #5]
 800e22c:	6a3b      	ldr	r3, [r7, #32]
 800e22e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	799a      	ldrb	r2, [r3, #6]
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	79da      	ldrb	r2, [r3, #7]
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	7a1a      	ldrb	r2, [r3, #8]
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800e248:	6a3b      	ldr	r3, [r7, #32]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b09      	cmp	r3, #9
 800e24e:	d002      	beq.n	800e256 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e250:	6a3b      	ldr	r3, [r7, #32]
 800e252:	2209      	movs	r2, #9
 800e254:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e256:	88fb      	ldrh	r3, [r7, #6]
 800e258:	2b09      	cmp	r3, #9
 800e25a:	f240 809d 	bls.w	800e398 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800e25e:	2309      	movs	r3, #9
 800e260:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e262:	2300      	movs	r3, #0
 800e264:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e266:	e081      	b.n	800e36c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e268:	f107 0316 	add.w	r3, r7, #22
 800e26c:	4619      	mov	r1, r3
 800e26e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e270:	f000 f99f 	bl	800e5b2 <USBH_GetNextDesc>
 800e274:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	785b      	ldrb	r3, [r3, #1]
 800e27a:	2b04      	cmp	r3, #4
 800e27c:	d176      	bne.n	800e36c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	2b09      	cmp	r3, #9
 800e284:	d002      	beq.n	800e28c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	2209      	movs	r2, #9
 800e28a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e290:	221a      	movs	r2, #26
 800e292:	fb02 f303 	mul.w	r3, r2, r3
 800e296:	3308      	adds	r3, #8
 800e298:	6a3a      	ldr	r2, [r7, #32]
 800e29a:	4413      	add	r3, r2
 800e29c:	3302      	adds	r3, #2
 800e29e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2a2:	69f8      	ldr	r0, [r7, #28]
 800e2a4:	f000 f87e 	bl	800e3a4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e2b2:	e043      	b.n	800e33c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e2b4:	f107 0316 	add.w	r3, r7, #22
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2bc:	f000 f979 	bl	800e5b2 <USBH_GetNextDesc>
 800e2c0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c4:	785b      	ldrb	r3, [r3, #1]
 800e2c6:	2b05      	cmp	r3, #5
 800e2c8:	d138      	bne.n	800e33c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	795b      	ldrb	r3, [r3, #5]
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d10f      	bne.n	800e2f2 <USBH_ParseCfgDesc+0x13a>
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	799b      	ldrb	r3, [r3, #6]
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	d10b      	bne.n	800e2f2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	79db      	ldrb	r3, [r3, #7]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10f      	bne.n	800e302 <USBH_ParseCfgDesc+0x14a>
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	2b09      	cmp	r3, #9
 800e2e8:	d00b      	beq.n	800e302 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800e2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ec:	2209      	movs	r2, #9
 800e2ee:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e2f0:	e007      	b.n	800e302 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800e2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	2b07      	cmp	r3, #7
 800e2f8:	d004      	beq.n	800e304 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fc:	2207      	movs	r2, #7
 800e2fe:	701a      	strb	r2, [r3, #0]
 800e300:	e000      	b.n	800e304 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e302:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e308:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e30c:	3201      	adds	r2, #1
 800e30e:	00d2      	lsls	r2, r2, #3
 800e310:	211a      	movs	r1, #26
 800e312:	fb01 f303 	mul.w	r3, r1, r3
 800e316:	4413      	add	r3, r2
 800e318:	3308      	adds	r3, #8
 800e31a:	6a3a      	ldr	r2, [r7, #32]
 800e31c:	4413      	add	r3, r2
 800e31e:	3304      	adds	r3, #4
 800e320:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e324:	69b9      	ldr	r1, [r7, #24]
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f000 f86b 	bl	800e402 <USBH_ParseEPDesc>
 800e32c:	4603      	mov	r3, r0
 800e32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800e332:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e336:	3301      	adds	r3, #1
 800e338:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	791b      	ldrb	r3, [r3, #4]
 800e340:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e344:	429a      	cmp	r2, r3
 800e346:	d204      	bcs.n	800e352 <USBH_ParseCfgDesc+0x19a>
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	885a      	ldrh	r2, [r3, #2]
 800e34c:	8afb      	ldrh	r3, [r7, #22]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d8b0      	bhi.n	800e2b4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	791b      	ldrb	r3, [r3, #4]
 800e356:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d201      	bcs.n	800e362 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e35e:	2303      	movs	r3, #3
 800e360:	e01c      	b.n	800e39c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e366:	3301      	adds	r3, #1
 800e368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e370:	2b01      	cmp	r3, #1
 800e372:	d805      	bhi.n	800e380 <USBH_ParseCfgDesc+0x1c8>
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	885a      	ldrh	r2, [r3, #2]
 800e378:	8afb      	ldrh	r3, [r7, #22]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	f63f af74 	bhi.w	800e268 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	791b      	ldrb	r3, [r3, #4]
 800e384:	2b02      	cmp	r3, #2
 800e386:	bf28      	it	cs
 800e388:	2302      	movcs	r3, #2
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e390:	429a      	cmp	r2, r3
 800e392:	d201      	bcs.n	800e398 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e394:	2303      	movs	r3, #3
 800e396:	e001      	b.n	800e39c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3730      	adds	r7, #48	; 0x30
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	781a      	ldrb	r2, [r3, #0]
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	785a      	ldrb	r2, [r3, #1]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	789a      	ldrb	r2, [r3, #2]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	78da      	ldrb	r2, [r3, #3]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	791a      	ldrb	r2, [r3, #4]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	795a      	ldrb	r2, [r3, #5]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	799a      	ldrb	r2, [r3, #6]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	79da      	ldrb	r2, [r3, #7]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	7a1a      	ldrb	r2, [r3, #8]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	721a      	strb	r2, [r3, #8]
}
 800e3f6:	bf00      	nop
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e402:	b480      	push	{r7}
 800e404:	b087      	sub	sp, #28
 800e406:	af00      	add	r7, sp, #0
 800e408:	60f8      	str	r0, [r7, #12]
 800e40a:	60b9      	str	r1, [r7, #8]
 800e40c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e40e:	2300      	movs	r3, #0
 800e410:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	781a      	ldrb	r2, [r3, #0]
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	785a      	ldrb	r2, [r3, #1]
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	789a      	ldrb	r2, [r3, #2]
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	78da      	ldrb	r2, [r3, #3]
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	3304      	adds	r3, #4
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	b29a      	uxth	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	3305      	adds	r3, #5
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	b29b      	uxth	r3, r3
 800e442:	021b      	lsls	r3, r3, #8
 800e444:	b29b      	uxth	r3, r3
 800e446:	4313      	orrs	r3, r2
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	799a      	ldrb	r2, [r3, #6]
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	889b      	ldrh	r3, [r3, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d102      	bne.n	800e464 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e45e:	2303      	movs	r3, #3
 800e460:	75fb      	strb	r3, [r7, #23]
 800e462:	e033      	b.n	800e4cc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	889b      	ldrh	r3, [r3, #4]
 800e468:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e46c:	f023 0307 	bic.w	r3, r3, #7
 800e470:	b29a      	uxth	r2, r3
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	889b      	ldrh	r3, [r3, #4]
 800e47a:	b21a      	sxth	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3304      	adds	r3, #4
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	b299      	uxth	r1, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3305      	adds	r3, #5
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	021b      	lsls	r3, r3, #8
 800e48e:	b29b      	uxth	r3, r3
 800e490:	430b      	orrs	r3, r1
 800e492:	b29b      	uxth	r3, r3
 800e494:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d110      	bne.n	800e4be <USBH_ParseEPDesc+0xbc>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	3304      	adds	r3, #4
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	b299      	uxth	r1, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3305      	adds	r3, #5
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	021b      	lsls	r3, r3, #8
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	430b      	orrs	r3, r1
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	b21b      	sxth	r3, r3
 800e4b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4ba:	b21b      	sxth	r3, r3
 800e4bc:	e001      	b.n	800e4c2 <USBH_ParseEPDesc+0xc0>
 800e4be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	b21b      	sxth	r3, r3
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d116      	bne.n	800e504 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	78db      	ldrb	r3, [r3, #3]
 800e4da:	f003 0303 	and.w	r3, r3, #3
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d005      	beq.n	800e4ee <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	78db      	ldrb	r3, [r3, #3]
 800e4e6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e4ea:	2b03      	cmp	r3, #3
 800e4ec:	d127      	bne.n	800e53e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	799b      	ldrb	r3, [r3, #6]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d003      	beq.n	800e4fe <USBH_ParseEPDesc+0xfc>
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	799b      	ldrb	r3, [r3, #6]
 800e4fa:	2b10      	cmp	r3, #16
 800e4fc:	d91f      	bls.n	800e53e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e4fe:	2303      	movs	r3, #3
 800e500:	75fb      	strb	r3, [r7, #23]
 800e502:	e01c      	b.n	800e53e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	78db      	ldrb	r3, [r3, #3]
 800e508:	f003 0303 	and.w	r3, r3, #3
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d10a      	bne.n	800e526 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	799b      	ldrb	r3, [r3, #6]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d003      	beq.n	800e520 <USBH_ParseEPDesc+0x11e>
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	799b      	ldrb	r3, [r3, #6]
 800e51c:	2b10      	cmp	r3, #16
 800e51e:	d90e      	bls.n	800e53e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e520:	2303      	movs	r3, #3
 800e522:	75fb      	strb	r3, [r7, #23]
 800e524:	e00b      	b.n	800e53e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	78db      	ldrb	r3, [r3, #3]
 800e52a:	f003 0303 	and.w	r3, r3, #3
 800e52e:	2b03      	cmp	r3, #3
 800e530:	d105      	bne.n	800e53e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	799b      	ldrb	r3, [r3, #6]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d101      	bne.n	800e53e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e53a:	2303      	movs	r3, #3
 800e53c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e540:	4618      	mov	r0, r3
 800e542:	371c      	adds	r7, #28
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b087      	sub	sp, #28
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	4613      	mov	r3, r2
 800e558:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	3301      	adds	r3, #1
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	2b03      	cmp	r3, #3
 800e562:	d120      	bne.n	800e5a6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	781b      	ldrb	r3, [r3, #0]
 800e568:	1e9a      	subs	r2, r3, #2
 800e56a:	88fb      	ldrh	r3, [r7, #6]
 800e56c:	4293      	cmp	r3, r2
 800e56e:	bf28      	it	cs
 800e570:	4613      	movcs	r3, r2
 800e572:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3302      	adds	r3, #2
 800e578:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e57a:	2300      	movs	r3, #0
 800e57c:	82fb      	strh	r3, [r7, #22]
 800e57e:	e00b      	b.n	800e598 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e580:	8afb      	ldrh	r3, [r7, #22]
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	4413      	add	r3, r2
 800e586:	781a      	ldrb	r2, [r3, #0]
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	3301      	adds	r3, #1
 800e590:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e592:	8afb      	ldrh	r3, [r7, #22]
 800e594:	3302      	adds	r3, #2
 800e596:	82fb      	strh	r3, [r7, #22]
 800e598:	8afa      	ldrh	r2, [r7, #22]
 800e59a:	8abb      	ldrh	r3, [r7, #20]
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d3ef      	bcc.n	800e580 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	701a      	strb	r2, [r3, #0]
  }
}
 800e5a6:	bf00      	nop
 800e5a8:	371c      	adds	r7, #28
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e5b2:	b480      	push	{r7}
 800e5b4:	b085      	sub	sp, #20
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	881a      	ldrh	r2, [r3, #0]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	b29b      	uxth	r3, r3
 800e5c6:	4413      	add	r3, r2
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e5da:	68fb      	ldr	r3, [r7, #12]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	60b9      	str	r1, [r7, #8]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	789b      	ldrb	r3, [r3, #2]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d002      	beq.n	800e608 <USBH_CtlReq+0x20>
 800e602:	2b02      	cmp	r3, #2
 800e604:	d00f      	beq.n	800e626 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e606:	e027      	b.n	800e658 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	88fa      	ldrh	r2, [r7, #6]
 800e612:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2201      	movs	r2, #1
 800e618:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2202      	movs	r2, #2
 800e61e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e620:	2301      	movs	r3, #1
 800e622:	75fb      	strb	r3, [r7, #23]
      break;
 800e624:	e018      	b.n	800e658 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f81c 	bl	800e664 <USBH_HandleControl>
 800e62c:	4603      	mov	r3, r0
 800e62e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e630:	7dfb      	ldrb	r3, [r7, #23]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d002      	beq.n	800e63c <USBH_CtlReq+0x54>
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d106      	bne.n	800e64a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2201      	movs	r2, #1
 800e640:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2200      	movs	r2, #0
 800e646:	761a      	strb	r2, [r3, #24]
      break;
 800e648:	e005      	b.n	800e656 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e64a:	7dfb      	ldrb	r3, [r7, #23]
 800e64c:	2b02      	cmp	r3, #2
 800e64e:	d102      	bne.n	800e656 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2201      	movs	r2, #1
 800e654:	709a      	strb	r2, [r3, #2]
      break;
 800e656:	bf00      	nop
  }
  return status;
 800e658:	7dfb      	ldrb	r3, [r7, #23]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3718      	adds	r7, #24
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
	...

0800e664 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b086      	sub	sp, #24
 800e668:	af02      	add	r7, sp, #8
 800e66a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e66c:	2301      	movs	r3, #1
 800e66e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e670:	2300      	movs	r3, #0
 800e672:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	7e1b      	ldrb	r3, [r3, #24]
 800e678:	3b01      	subs	r3, #1
 800e67a:	2b0a      	cmp	r3, #10
 800e67c:	f200 8156 	bhi.w	800e92c <USBH_HandleControl+0x2c8>
 800e680:	a201      	add	r2, pc, #4	; (adr r2, 800e688 <USBH_HandleControl+0x24>)
 800e682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e686:	bf00      	nop
 800e688:	0800e6b5 	.word	0x0800e6b5
 800e68c:	0800e6cf 	.word	0x0800e6cf
 800e690:	0800e739 	.word	0x0800e739
 800e694:	0800e75f 	.word	0x0800e75f
 800e698:	0800e797 	.word	0x0800e797
 800e69c:	0800e7c1 	.word	0x0800e7c1
 800e6a0:	0800e813 	.word	0x0800e813
 800e6a4:	0800e835 	.word	0x0800e835
 800e6a8:	0800e871 	.word	0x0800e871
 800e6ac:	0800e897 	.word	0x0800e897
 800e6b0:	0800e8d5 	.word	0x0800e8d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f103 0110 	add.w	r1, r3, #16
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	795b      	ldrb	r3, [r3, #5]
 800e6be:	461a      	mov	r2, r3
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 f943 	bl	800e94c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	761a      	strb	r2, [r3, #24]
      break;
 800e6cc:	e139      	b.n	800e942 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	795b      	ldrb	r3, [r3, #5]
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f003 f831 	bl	801173c <USBH_LL_GetURBState>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e6de:	7bbb      	ldrb	r3, [r7, #14]
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	d11e      	bne.n	800e722 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	7c1b      	ldrb	r3, [r3, #16]
 800e6e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e6ec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	8adb      	ldrh	r3, [r3, #22]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00a      	beq.n	800e70c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e6f6:	7b7b      	ldrb	r3, [r7, #13]
 800e6f8:	2b80      	cmp	r3, #128	; 0x80
 800e6fa:	d103      	bne.n	800e704 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2203      	movs	r2, #3
 800e700:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e702:	e115      	b.n	800e930 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2205      	movs	r2, #5
 800e708:	761a      	strb	r2, [r3, #24]
      break;
 800e70a:	e111      	b.n	800e930 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e70c:	7b7b      	ldrb	r3, [r7, #13]
 800e70e:	2b80      	cmp	r3, #128	; 0x80
 800e710:	d103      	bne.n	800e71a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2209      	movs	r2, #9
 800e716:	761a      	strb	r2, [r3, #24]
      break;
 800e718:	e10a      	b.n	800e930 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2207      	movs	r2, #7
 800e71e:	761a      	strb	r2, [r3, #24]
      break;
 800e720:	e106      	b.n	800e930 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e722:	7bbb      	ldrb	r3, [r7, #14]
 800e724:	2b04      	cmp	r3, #4
 800e726:	d003      	beq.n	800e730 <USBH_HandleControl+0xcc>
 800e728:	7bbb      	ldrb	r3, [r7, #14]
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	f040 8100 	bne.w	800e930 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	220b      	movs	r2, #11
 800e734:	761a      	strb	r2, [r3, #24]
      break;
 800e736:	e0fb      	b.n	800e930 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e73e:	b29a      	uxth	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6899      	ldr	r1, [r3, #8]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	899a      	ldrh	r2, [r3, #12]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	791b      	ldrb	r3, [r3, #4]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 f93a 	bl	800e9ca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2204      	movs	r2, #4
 800e75a:	761a      	strb	r2, [r3, #24]
      break;
 800e75c:	e0f1      	b.n	800e942 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	791b      	ldrb	r3, [r3, #4]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f002 ffe9 	bl	801173c <USBH_LL_GetURBState>
 800e76a:	4603      	mov	r3, r0
 800e76c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e76e:	7bbb      	ldrb	r3, [r7, #14]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d102      	bne.n	800e77a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2209      	movs	r2, #9
 800e778:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e77a:	7bbb      	ldrb	r3, [r7, #14]
 800e77c:	2b05      	cmp	r3, #5
 800e77e:	d102      	bne.n	800e786 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e780:	2303      	movs	r3, #3
 800e782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e784:	e0d6      	b.n	800e934 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e786:	7bbb      	ldrb	r3, [r7, #14]
 800e788:	2b04      	cmp	r3, #4
 800e78a:	f040 80d3 	bne.w	800e934 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	220b      	movs	r2, #11
 800e792:	761a      	strb	r2, [r3, #24]
      break;
 800e794:	e0ce      	b.n	800e934 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6899      	ldr	r1, [r3, #8]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	899a      	ldrh	r2, [r3, #12]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	795b      	ldrb	r3, [r3, #5]
 800e7a2:	2001      	movs	r0, #1
 800e7a4:	9000      	str	r0, [sp, #0]
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f8ea 	bl	800e980 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e7b2:	b29a      	uxth	r2, r3
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2206      	movs	r2, #6
 800e7bc:	761a      	strb	r2, [r3, #24]
      break;
 800e7be:	e0c0      	b.n	800e942 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	795b      	ldrb	r3, [r3, #5]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f002 ffb8 	bl	801173c <USBH_LL_GetURBState>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e7d0:	7bbb      	ldrb	r3, [r7, #14]
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d103      	bne.n	800e7de <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2207      	movs	r2, #7
 800e7da:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e7dc:	e0ac      	b.n	800e938 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e7de:	7bbb      	ldrb	r3, [r7, #14]
 800e7e0:	2b05      	cmp	r3, #5
 800e7e2:	d105      	bne.n	800e7f0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	220c      	movs	r2, #12
 800e7e8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800e7ee:	e0a3      	b.n	800e938 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e7f0:	7bbb      	ldrb	r3, [r7, #14]
 800e7f2:	2b02      	cmp	r3, #2
 800e7f4:	d103      	bne.n	800e7fe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2205      	movs	r2, #5
 800e7fa:	761a      	strb	r2, [r3, #24]
      break;
 800e7fc:	e09c      	b.n	800e938 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
 800e800:	2b04      	cmp	r3, #4
 800e802:	f040 8099 	bne.w	800e938 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	220b      	movs	r2, #11
 800e80a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e80c:	2302      	movs	r3, #2
 800e80e:	73fb      	strb	r3, [r7, #15]
      break;
 800e810:	e092      	b.n	800e938 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	791b      	ldrb	r3, [r3, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	2100      	movs	r1, #0
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f8d5 	bl	800e9ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e826:	b29a      	uxth	r2, r3
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2208      	movs	r2, #8
 800e830:	761a      	strb	r2, [r3, #24]

      break;
 800e832:	e086      	b.n	800e942 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	791b      	ldrb	r3, [r3, #4]
 800e838:	4619      	mov	r1, r3
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f002 ff7e 	bl	801173c <USBH_LL_GetURBState>
 800e840:	4603      	mov	r3, r0
 800e842:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e844:	7bbb      	ldrb	r3, [r7, #14]
 800e846:	2b01      	cmp	r3, #1
 800e848:	d105      	bne.n	800e856 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	220d      	movs	r2, #13
 800e84e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e854:	e072      	b.n	800e93c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e856:	7bbb      	ldrb	r3, [r7, #14]
 800e858:	2b04      	cmp	r3, #4
 800e85a:	d103      	bne.n	800e864 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	220b      	movs	r2, #11
 800e860:	761a      	strb	r2, [r3, #24]
      break;
 800e862:	e06b      	b.n	800e93c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e864:	7bbb      	ldrb	r3, [r7, #14]
 800e866:	2b05      	cmp	r3, #5
 800e868:	d168      	bne.n	800e93c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e86a:	2303      	movs	r3, #3
 800e86c:	73fb      	strb	r3, [r7, #15]
      break;
 800e86e:	e065      	b.n	800e93c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	795b      	ldrb	r3, [r3, #5]
 800e874:	2201      	movs	r2, #1
 800e876:	9200      	str	r2, [sp, #0]
 800e878:	2200      	movs	r2, #0
 800e87a:	2100      	movs	r1, #0
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f87f 	bl	800e980 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e888:	b29a      	uxth	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	220a      	movs	r2, #10
 800e892:	761a      	strb	r2, [r3, #24]
      break;
 800e894:	e055      	b.n	800e942 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	795b      	ldrb	r3, [r3, #5]
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f002 ff4d 	bl	801173c <USBH_LL_GetURBState>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e8a6:	7bbb      	ldrb	r3, [r7, #14]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d105      	bne.n	800e8b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	220d      	movs	r2, #13
 800e8b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e8b6:	e043      	b.n	800e940 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	2b02      	cmp	r3, #2
 800e8bc:	d103      	bne.n	800e8c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2209      	movs	r2, #9
 800e8c2:	761a      	strb	r2, [r3, #24]
      break;
 800e8c4:	e03c      	b.n	800e940 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e8c6:	7bbb      	ldrb	r3, [r7, #14]
 800e8c8:	2b04      	cmp	r3, #4
 800e8ca:	d139      	bne.n	800e940 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	220b      	movs	r2, #11
 800e8d0:	761a      	strb	r2, [r3, #24]
      break;
 800e8d2:	e035      	b.n	800e940 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	7e5b      	ldrb	r3, [r3, #25]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	765a      	strb	r2, [r3, #25]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	7e5b      	ldrb	r3, [r3, #25]
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	d806      	bhi.n	800e8f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e8f4:	e025      	b.n	800e942 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8fc:	2106      	movs	r1, #6
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	795b      	ldrb	r3, [r3, #5]
 800e90c:	4619      	mov	r1, r3
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f90c 	bl	800eb2c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	791b      	ldrb	r3, [r3, #4]
 800e918:	4619      	mov	r1, r3
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 f906 	bl	800eb2c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2200      	movs	r2, #0
 800e924:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e926:	2302      	movs	r3, #2
 800e928:	73fb      	strb	r3, [r7, #15]
      break;
 800e92a:	e00a      	b.n	800e942 <USBH_HandleControl+0x2de>

    default:
      break;
 800e92c:	bf00      	nop
 800e92e:	e008      	b.n	800e942 <USBH_HandleControl+0x2de>
      break;
 800e930:	bf00      	nop
 800e932:	e006      	b.n	800e942 <USBH_HandleControl+0x2de>
      break;
 800e934:	bf00      	nop
 800e936:	e004      	b.n	800e942 <USBH_HandleControl+0x2de>
      break;
 800e938:	bf00      	nop
 800e93a:	e002      	b.n	800e942 <USBH_HandleControl+0x2de>
      break;
 800e93c:	bf00      	nop
 800e93e:	e000      	b.n	800e942 <USBH_HandleControl+0x2de>
      break;
 800e940:	bf00      	nop
  }

  return status;
 800e942:	7bfb      	ldrb	r3, [r7, #15]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b088      	sub	sp, #32
 800e950:	af04      	add	r7, sp, #16
 800e952:	60f8      	str	r0, [r7, #12]
 800e954:	60b9      	str	r1, [r7, #8]
 800e956:	4613      	mov	r3, r2
 800e958:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e95a:	79f9      	ldrb	r1, [r7, #7]
 800e95c:	2300      	movs	r3, #0
 800e95e:	9303      	str	r3, [sp, #12]
 800e960:	2308      	movs	r3, #8
 800e962:	9302      	str	r3, [sp, #8]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	9301      	str	r3, [sp, #4]
 800e968:	2300      	movs	r3, #0
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	2300      	movs	r3, #0
 800e96e:	2200      	movs	r2, #0
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f002 feb2 	bl	80116da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}

0800e980 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af04      	add	r7, sp, #16
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	4611      	mov	r1, r2
 800e98c:	461a      	mov	r2, r3
 800e98e:	460b      	mov	r3, r1
 800e990:	80fb      	strh	r3, [r7, #6]
 800e992:	4613      	mov	r3, r2
 800e994:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e9a4:	7979      	ldrb	r1, [r7, #5]
 800e9a6:	7e3b      	ldrb	r3, [r7, #24]
 800e9a8:	9303      	str	r3, [sp, #12]
 800e9aa:	88fb      	ldrh	r3, [r7, #6]
 800e9ac:	9302      	str	r3, [sp, #8]
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	9301      	str	r3, [sp, #4]
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	9300      	str	r3, [sp, #0]
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	f002 fe8d 	bl	80116da <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b088      	sub	sp, #32
 800e9ce:	af04      	add	r7, sp, #16
 800e9d0:	60f8      	str	r0, [r7, #12]
 800e9d2:	60b9      	str	r1, [r7, #8]
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	460b      	mov	r3, r1
 800e9da:	80fb      	strh	r3, [r7, #6]
 800e9dc:	4613      	mov	r3, r2
 800e9de:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e9e0:	7979      	ldrb	r1, [r7, #5]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	9303      	str	r3, [sp, #12]
 800e9e6:	88fb      	ldrh	r3, [r7, #6]
 800e9e8:	9302      	str	r3, [sp, #8]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f002 fe6f 	bl	80116da <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e9fc:	2300      	movs	r3, #0

}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b088      	sub	sp, #32
 800ea0a:	af04      	add	r7, sp, #16
 800ea0c:	60f8      	str	r0, [r7, #12]
 800ea0e:	60b9      	str	r1, [r7, #8]
 800ea10:	4611      	mov	r1, r2
 800ea12:	461a      	mov	r2, r3
 800ea14:	460b      	mov	r3, r1
 800ea16:	80fb      	strh	r3, [r7, #6]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ea26:	2300      	movs	r3, #0
 800ea28:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ea2a:	7979      	ldrb	r1, [r7, #5]
 800ea2c:	7e3b      	ldrb	r3, [r7, #24]
 800ea2e:	9303      	str	r3, [sp, #12]
 800ea30:	88fb      	ldrh	r3, [r7, #6]
 800ea32:	9302      	str	r3, [sp, #8]
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	2301      	movs	r3, #1
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	2302      	movs	r3, #2
 800ea3e:	2200      	movs	r2, #0
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f002 fe4a 	bl	80116da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3710      	adds	r7, #16
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b088      	sub	sp, #32
 800ea54:	af04      	add	r7, sp, #16
 800ea56:	60f8      	str	r0, [r7, #12]
 800ea58:	60b9      	str	r1, [r7, #8]
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	460b      	mov	r3, r1
 800ea60:	80fb      	strh	r3, [r7, #6]
 800ea62:	4613      	mov	r3, r2
 800ea64:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ea66:	7979      	ldrb	r1, [r7, #5]
 800ea68:	2300      	movs	r3, #0
 800ea6a:	9303      	str	r3, [sp, #12]
 800ea6c:	88fb      	ldrh	r3, [r7, #6]
 800ea6e:	9302      	str	r3, [sp, #8]
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	9301      	str	r3, [sp, #4]
 800ea74:	2301      	movs	r3, #1
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	2302      	movs	r3, #2
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f002 fe2c 	bl	80116da <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ea82:	2300      	movs	r3, #0
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af04      	add	r7, sp, #16
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	4608      	mov	r0, r1
 800ea96:	4611      	mov	r1, r2
 800ea98:	461a      	mov	r2, r3
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	70fb      	strb	r3, [r7, #3]
 800ea9e:	460b      	mov	r3, r1
 800eaa0:	70bb      	strb	r3, [r7, #2]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800eaa6:	7878      	ldrb	r0, [r7, #1]
 800eaa8:	78ba      	ldrb	r2, [r7, #2]
 800eaaa:	78f9      	ldrb	r1, [r7, #3]
 800eaac:	8b3b      	ldrh	r3, [r7, #24]
 800eaae:	9302      	str	r3, [sp, #8]
 800eab0:	7d3b      	ldrb	r3, [r7, #20]
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	7c3b      	ldrb	r3, [r7, #16]
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	4603      	mov	r3, r0
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f002 fdbf 	bl	801163e <USBH_LL_OpenPipe>

  return USBH_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b082      	sub	sp, #8
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	460b      	mov	r3, r1
 800ead4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ead6:	78fb      	ldrb	r3, [r7, #3]
 800ead8:	4619      	mov	r1, r3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f002 fdde 	bl	801169c <USBH_LL_ClosePipe>

  return USBH_OK;
 800eae0:	2300      	movs	r3, #0
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b084      	sub	sp, #16
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f836 	bl	800eb68 <USBH_GetFreePipe>
 800eafc:	4603      	mov	r3, r0
 800eafe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800eb00:	89fb      	ldrh	r3, [r7, #14]
 800eb02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d00a      	beq.n	800eb20 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800eb0a:	78fa      	ldrb	r2, [r7, #3]
 800eb0c:	89fb      	ldrh	r3, [r7, #14]
 800eb0e:	f003 030f 	and.w	r3, r3, #15
 800eb12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eb16:	6879      	ldr	r1, [r7, #4]
 800eb18:	33e0      	adds	r3, #224	; 0xe0
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	440b      	add	r3, r1
 800eb1e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800eb20:	89fb      	ldrh	r3, [r7, #14]
 800eb22:	b2db      	uxtb	r3, r3
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800eb38:	78fb      	ldrb	r3, [r7, #3]
 800eb3a:	2b0f      	cmp	r3, #15
 800eb3c:	d80d      	bhi.n	800eb5a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800eb3e:	78fb      	ldrb	r3, [r7, #3]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	33e0      	adds	r3, #224	; 0xe0
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	78fb      	ldrb	r3, [r7, #3]
 800eb4c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	33e0      	adds	r3, #224	; 0xe0
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	440b      	add	r3, r1
 800eb58:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800eb5a:	2300      	movs	r3, #0
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800eb70:	2300      	movs	r3, #0
 800eb72:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800eb74:	2300      	movs	r3, #0
 800eb76:	73fb      	strb	r3, [r7, #15]
 800eb78:	e00f      	b.n	800eb9a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800eb7a:	7bfb      	ldrb	r3, [r7, #15]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	33e0      	adds	r3, #224	; 0xe0
 800eb80:	009b      	lsls	r3, r3, #2
 800eb82:	4413      	add	r3, r2
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d102      	bne.n	800eb94 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800eb8e:	7bfb      	ldrb	r3, [r7, #15]
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	e007      	b.n	800eba4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800eb94:	7bfb      	ldrb	r3, [r7, #15]
 800eb96:	3301      	adds	r3, #1
 800eb98:	73fb      	strb	r3, [r7, #15]
 800eb9a:	7bfb      	ldrb	r3, [r7, #15]
 800eb9c:	2b0f      	cmp	r3, #15
 800eb9e:	d9ec      	bls.n	800eb7a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800eba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ebba:	79fb      	ldrb	r3, [r7, #7]
 800ebbc:	4a08      	ldr	r2, [pc, #32]	; (800ebe0 <disk_status+0x30>)
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	685b      	ldr	r3, [r3, #4]
 800ebc6:	79fa      	ldrb	r2, [r7, #7]
 800ebc8:	4905      	ldr	r1, [pc, #20]	; (800ebe0 <disk_status+0x30>)
 800ebca:	440a      	add	r2, r1
 800ebcc:	7a12      	ldrb	r2, [r2, #8]
 800ebce:	4610      	mov	r0, r2
 800ebd0:	4798      	blx	r3
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ebd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3710      	adds	r7, #16
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	20003878 	.word	0x20003878

0800ebe4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b084      	sub	sp, #16
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	4a0d      	ldr	r2, [pc, #52]	; (800ec2c <disk_initialize+0x48>)
 800ebf6:	5cd3      	ldrb	r3, [r2, r3]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d111      	bne.n	800ec20 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ebfc:	79fb      	ldrb	r3, [r7, #7]
 800ebfe:	4a0b      	ldr	r2, [pc, #44]	; (800ec2c <disk_initialize+0x48>)
 800ec00:	2101      	movs	r1, #1
 800ec02:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ec04:	79fb      	ldrb	r3, [r7, #7]
 800ec06:	4a09      	ldr	r2, [pc, #36]	; (800ec2c <disk_initialize+0x48>)
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	4413      	add	r3, r2
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	79fa      	ldrb	r2, [r7, #7]
 800ec12:	4906      	ldr	r1, [pc, #24]	; (800ec2c <disk_initialize+0x48>)
 800ec14:	440a      	add	r2, r1
 800ec16:	7a12      	ldrb	r2, [r2, #8]
 800ec18:	4610      	mov	r0, r2
 800ec1a:	4798      	blx	r3
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	20003878 	.word	0x20003878

0800ec30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ec30:	b590      	push	{r4, r7, lr}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	607a      	str	r2, [r7, #4]
 800ec3a:	603b      	str	r3, [r7, #0]
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ec40:	7bfb      	ldrb	r3, [r7, #15]
 800ec42:	4a0a      	ldr	r2, [pc, #40]	; (800ec6c <disk_read+0x3c>)
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4413      	add	r3, r2
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	689c      	ldr	r4, [r3, #8]
 800ec4c:	7bfb      	ldrb	r3, [r7, #15]
 800ec4e:	4a07      	ldr	r2, [pc, #28]	; (800ec6c <disk_read+0x3c>)
 800ec50:	4413      	add	r3, r2
 800ec52:	7a18      	ldrb	r0, [r3, #8]
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	68b9      	ldr	r1, [r7, #8]
 800ec5a:	47a0      	blx	r4
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd90      	pop	{r4, r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20003878 	.word	0x20003878

0800ec70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ec70:	b590      	push	{r4, r7, lr}
 800ec72:	b087      	sub	sp, #28
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60b9      	str	r1, [r7, #8]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	603b      	str	r3, [r7, #0]
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ec80:	7bfb      	ldrb	r3, [r7, #15]
 800ec82:	4a0a      	ldr	r2, [pc, #40]	; (800ecac <disk_write+0x3c>)
 800ec84:	009b      	lsls	r3, r3, #2
 800ec86:	4413      	add	r3, r2
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	68dc      	ldr	r4, [r3, #12]
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	4a07      	ldr	r2, [pc, #28]	; (800ecac <disk_write+0x3c>)
 800ec90:	4413      	add	r3, r2
 800ec92:	7a18      	ldrb	r0, [r3, #8]
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	68b9      	ldr	r1, [r7, #8]
 800ec9a:	47a0      	blx	r4
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	75fb      	strb	r3, [r7, #23]
  return res;
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	371c      	adds	r7, #28
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd90      	pop	{r4, r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	20003878 	.word	0x20003878

0800ecb0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	603a      	str	r2, [r7, #0]
 800ecba:	71fb      	strb	r3, [r7, #7]
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ecc0:	79fb      	ldrb	r3, [r7, #7]
 800ecc2:	4a09      	ldr	r2, [pc, #36]	; (800ece8 <disk_ioctl+0x38>)
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	4413      	add	r3, r2
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	691b      	ldr	r3, [r3, #16]
 800eccc:	79fa      	ldrb	r2, [r7, #7]
 800ecce:	4906      	ldr	r1, [pc, #24]	; (800ece8 <disk_ioctl+0x38>)
 800ecd0:	440a      	add	r2, r1
 800ecd2:	7a10      	ldrb	r0, [r2, #8]
 800ecd4:	79b9      	ldrb	r1, [r7, #6]
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	4798      	blx	r3
 800ecda:	4603      	mov	r3, r0
 800ecdc:	73fb      	strb	r3, [r7, #15]
  return res;
 800ecde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	20003878 	.word	0x20003878

0800ecec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ecec:	b480      	push	{r7}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ecfc:	89fb      	ldrh	r3, [r7, #14]
 800ecfe:	021b      	lsls	r3, r3, #8
 800ed00:	b21a      	sxth	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	b21b      	sxth	r3, r3
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	b21b      	sxth	r3, r3
 800ed0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ed0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3714      	adds	r7, #20
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	3303      	adds	r3, #3
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	021b      	lsls	r3, r3, #8
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	3202      	adds	r2, #2
 800ed34:	7812      	ldrb	r2, [r2, #0]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	3201      	adds	r2, #1
 800ed42:	7812      	ldrb	r2, [r2, #0]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	021b      	lsls	r3, r3, #8
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	7812      	ldrb	r2, [r2, #0]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	60fb      	str	r3, [r7, #12]
	return rv;
 800ed54:	68fb      	ldr	r3, [r7, #12]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3714      	adds	r7, #20
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed60:	4770      	bx	lr

0800ed62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ed62:	b480      	push	{r7}
 800ed64:	b083      	sub	sp, #12
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	1c5a      	adds	r2, r3, #1
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	887a      	ldrh	r2, [r7, #2]
 800ed76:	b2d2      	uxtb	r2, r2
 800ed78:	701a      	strb	r2, [r3, #0]
 800ed7a:	887b      	ldrh	r3, [r7, #2]
 800ed7c:	0a1b      	lsrs	r3, r3, #8
 800ed7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	1c5a      	adds	r2, r3, #1
 800ed84:	607a      	str	r2, [r7, #4]
 800ed86:	887a      	ldrh	r2, [r7, #2]
 800ed88:	b2d2      	uxtb	r2, r2
 800ed8a:	701a      	strb	r2, [r3, #0]
}
 800ed8c:	bf00      	nop
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	1c5a      	adds	r2, r3, #1
 800eda6:	607a      	str	r2, [r7, #4]
 800eda8:	683a      	ldr	r2, [r7, #0]
 800edaa:	b2d2      	uxtb	r2, r2
 800edac:	701a      	strb	r2, [r3, #0]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	0a1b      	lsrs	r3, r3, #8
 800edb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	1c5a      	adds	r2, r3, #1
 800edb8:	607a      	str	r2, [r7, #4]
 800edba:	683a      	ldr	r2, [r7, #0]
 800edbc:	b2d2      	uxtb	r2, r2
 800edbe:	701a      	strb	r2, [r3, #0]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	0a1b      	lsrs	r3, r3, #8
 800edc4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	607a      	str	r2, [r7, #4]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	b2d2      	uxtb	r2, r2
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	0a1b      	lsrs	r3, r3, #8
 800edd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	1c5a      	adds	r2, r3, #1
 800eddc:	607a      	str	r2, [r7, #4]
 800edde:	683a      	ldr	r2, [r7, #0]
 800ede0:	b2d2      	uxtb	r2, r2
 800ede2:	701a      	strb	r2, [r3, #0]
}
 800ede4:	bf00      	nop
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00d      	beq.n	800ee26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ee0a:	693a      	ldr	r2, [r7, #16]
 800ee0c:	1c53      	adds	r3, r2, #1
 800ee0e:	613b      	str	r3, [r7, #16]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	1c59      	adds	r1, r3, #1
 800ee14:	6179      	str	r1, [r7, #20]
 800ee16:	7812      	ldrb	r2, [r2, #0]
 800ee18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3b01      	subs	r3, #1
 800ee1e:	607b      	str	r3, [r7, #4]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d1f1      	bne.n	800ee0a <mem_cpy+0x1a>
	}
}
 800ee26:	bf00      	nop
 800ee28:	371c      	adds	r7, #28
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ee32:	b480      	push	{r7}
 800ee34:	b087      	sub	sp, #28
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	60f8      	str	r0, [r7, #12]
 800ee3a:	60b9      	str	r1, [r7, #8]
 800ee3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	1c5a      	adds	r2, r3, #1
 800ee46:	617a      	str	r2, [r7, #20]
 800ee48:	68ba      	ldr	r2, [r7, #8]
 800ee4a:	b2d2      	uxtb	r2, r2
 800ee4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	3b01      	subs	r3, #1
 800ee52:	607b      	str	r3, [r7, #4]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1f3      	bne.n	800ee42 <mem_set+0x10>
}
 800ee5a:	bf00      	nop
 800ee5c:	bf00      	nop
 800ee5e:	371c      	adds	r7, #28
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ee68:	b480      	push	{r7}
 800ee6a:	b089      	sub	sp, #36	; 0x24
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	61fb      	str	r3, [r7, #28]
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	61fa      	str	r2, [r7, #28]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	61ba      	str	r2, [r7, #24]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	1acb      	subs	r3, r1, r3
 800ee94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	3b01      	subs	r3, #1
 800ee9a:	607b      	str	r3, [r7, #4]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d002      	beq.n	800eea8 <mem_cmp+0x40>
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d0eb      	beq.n	800ee80 <mem_cmp+0x18>

	return r;
 800eea8:	697b      	ldr	r3, [r7, #20]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3724      	adds	r7, #36	; 0x24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr

0800eeb6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800eeb6:	b480      	push	{r7}
 800eeb8:	b083      	sub	sp, #12
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800eec0:	e002      	b.n	800eec8 <chk_chr+0x12>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3301      	adds	r3, #1
 800eec6:	607b      	str	r3, [r7, #4]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d005      	beq.n	800eedc <chk_chr+0x26>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d1f2      	bne.n	800eec2 <chk_chr+0xc>
	return *str;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	781b      	ldrb	r3, [r3, #0]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b085      	sub	sp, #20
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eef6:	2300      	movs	r3, #0
 800eef8:	60bb      	str	r3, [r7, #8]
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	60fb      	str	r3, [r7, #12]
 800eefe:	e029      	b.n	800ef54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ef00:	4a27      	ldr	r2, [pc, #156]	; (800efa0 <chk_lock+0xb4>)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	011b      	lsls	r3, r3, #4
 800ef06:	4413      	add	r3, r2
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d01d      	beq.n	800ef4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef0e:	4a24      	ldr	r2, [pc, #144]	; (800efa0 <chk_lock+0xb4>)
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	011b      	lsls	r3, r3, #4
 800ef14:	4413      	add	r3, r2
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d116      	bne.n	800ef4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ef20:	4a1f      	ldr	r2, [pc, #124]	; (800efa0 <chk_lock+0xb4>)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	011b      	lsls	r3, r3, #4
 800ef26:	4413      	add	r3, r2
 800ef28:	3304      	adds	r3, #4
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d10c      	bne.n	800ef4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ef34:	4a1a      	ldr	r2, [pc, #104]	; (800efa0 <chk_lock+0xb4>)
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	011b      	lsls	r3, r3, #4
 800ef3a:	4413      	add	r3, r2
 800ef3c:	3308      	adds	r3, #8
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d102      	bne.n	800ef4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ef48:	e007      	b.n	800ef5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3301      	adds	r3, #1
 800ef52:	60fb      	str	r3, [r7, #12]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d9d2      	bls.n	800ef00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d109      	bne.n	800ef74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d102      	bne.n	800ef6c <chk_lock+0x80>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d101      	bne.n	800ef70 <chk_lock+0x84>
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	e010      	b.n	800ef92 <chk_lock+0xa6>
 800ef70:	2312      	movs	r3, #18
 800ef72:	e00e      	b.n	800ef92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d108      	bne.n	800ef8c <chk_lock+0xa0>
 800ef7a:	4a09      	ldr	r2, [pc, #36]	; (800efa0 <chk_lock+0xb4>)
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	011b      	lsls	r3, r3, #4
 800ef80:	4413      	add	r3, r2
 800ef82:	330c      	adds	r3, #12
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef8a:	d101      	bne.n	800ef90 <chk_lock+0xa4>
 800ef8c:	2310      	movs	r3, #16
 800ef8e:	e000      	b.n	800ef92 <chk_lock+0xa6>
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	20003858 	.word	0x20003858

0800efa4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800efaa:	2300      	movs	r3, #0
 800efac:	607b      	str	r3, [r7, #4]
 800efae:	e002      	b.n	800efb6 <enq_lock+0x12>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3301      	adds	r3, #1
 800efb4:	607b      	str	r3, [r7, #4]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d806      	bhi.n	800efca <enq_lock+0x26>
 800efbc:	4a09      	ldr	r2, [pc, #36]	; (800efe4 <enq_lock+0x40>)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	011b      	lsls	r3, r3, #4
 800efc2:	4413      	add	r3, r2
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1f2      	bne.n	800efb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b02      	cmp	r3, #2
 800efce:	bf14      	ite	ne
 800efd0:	2301      	movne	r3, #1
 800efd2:	2300      	moveq	r3, #0
 800efd4:	b2db      	uxtb	r3, r3
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	20003858 	.word	0x20003858

0800efe8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
 800eff6:	e01f      	b.n	800f038 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eff8:	4a41      	ldr	r2, [pc, #260]	; (800f100 <inc_lock+0x118>)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	011b      	lsls	r3, r3, #4
 800effe:	4413      	add	r3, r2
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	429a      	cmp	r2, r3
 800f008:	d113      	bne.n	800f032 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f00a:	4a3d      	ldr	r2, [pc, #244]	; (800f100 <inc_lock+0x118>)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	011b      	lsls	r3, r3, #4
 800f010:	4413      	add	r3, r2
 800f012:	3304      	adds	r3, #4
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d109      	bne.n	800f032 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f01e:	4a38      	ldr	r2, [pc, #224]	; (800f100 <inc_lock+0x118>)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	011b      	lsls	r3, r3, #4
 800f024:	4413      	add	r3, r2
 800f026:	3308      	adds	r3, #8
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f02e:	429a      	cmp	r2, r3
 800f030:	d006      	beq.n	800f040 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3301      	adds	r3, #1
 800f036:	60fb      	str	r3, [r7, #12]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d9dc      	bls.n	800eff8 <inc_lock+0x10>
 800f03e:	e000      	b.n	800f042 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f040:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b02      	cmp	r3, #2
 800f046:	d132      	bne.n	800f0ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f048:	2300      	movs	r3, #0
 800f04a:	60fb      	str	r3, [r7, #12]
 800f04c:	e002      	b.n	800f054 <inc_lock+0x6c>
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	3301      	adds	r3, #1
 800f052:	60fb      	str	r3, [r7, #12]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b01      	cmp	r3, #1
 800f058:	d806      	bhi.n	800f068 <inc_lock+0x80>
 800f05a:	4a29      	ldr	r2, [pc, #164]	; (800f100 <inc_lock+0x118>)
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	011b      	lsls	r3, r3, #4
 800f060:	4413      	add	r3, r2
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d1f2      	bne.n	800f04e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	d101      	bne.n	800f072 <inc_lock+0x8a>
 800f06e:	2300      	movs	r3, #0
 800f070:	e040      	b.n	800f0f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	4922      	ldr	r1, [pc, #136]	; (800f100 <inc_lock+0x118>)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	011b      	lsls	r3, r3, #4
 800f07c:	440b      	add	r3, r1
 800f07e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	689a      	ldr	r2, [r3, #8]
 800f084:	491e      	ldr	r1, [pc, #120]	; (800f100 <inc_lock+0x118>)
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	011b      	lsls	r3, r3, #4
 800f08a:	440b      	add	r3, r1
 800f08c:	3304      	adds	r3, #4
 800f08e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	695a      	ldr	r2, [r3, #20]
 800f094:	491a      	ldr	r1, [pc, #104]	; (800f100 <inc_lock+0x118>)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	011b      	lsls	r3, r3, #4
 800f09a:	440b      	add	r3, r1
 800f09c:	3308      	adds	r3, #8
 800f09e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f0a0:	4a17      	ldr	r2, [pc, #92]	; (800f100 <inc_lock+0x118>)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	011b      	lsls	r3, r3, #4
 800f0a6:	4413      	add	r3, r2
 800f0a8:	330c      	adds	r3, #12
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d009      	beq.n	800f0c8 <inc_lock+0xe0>
 800f0b4:	4a12      	ldr	r2, [pc, #72]	; (800f100 <inc_lock+0x118>)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	011b      	lsls	r3, r3, #4
 800f0ba:	4413      	add	r3, r2
 800f0bc:	330c      	adds	r3, #12
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <inc_lock+0xe0>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	e015      	b.n	800f0f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d108      	bne.n	800f0e0 <inc_lock+0xf8>
 800f0ce:	4a0c      	ldr	r2, [pc, #48]	; (800f100 <inc_lock+0x118>)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	011b      	lsls	r3, r3, #4
 800f0d4:	4413      	add	r3, r2
 800f0d6:	330c      	adds	r3, #12
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	3301      	adds	r3, #1
 800f0dc:	b29a      	uxth	r2, r3
 800f0de:	e001      	b.n	800f0e4 <inc_lock+0xfc>
 800f0e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0e4:	4906      	ldr	r1, [pc, #24]	; (800f100 <inc_lock+0x118>)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	011b      	lsls	r3, r3, #4
 800f0ea:	440b      	add	r3, r1
 800f0ec:	330c      	adds	r3, #12
 800f0ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	3301      	adds	r3, #1
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	20003858 	.word	0x20003858

0800f104 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3b01      	subs	r3, #1
 800f110:	607b      	str	r3, [r7, #4]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2b01      	cmp	r3, #1
 800f116:	d825      	bhi.n	800f164 <dec_lock+0x60>
		n = Files[i].ctr;
 800f118:	4a17      	ldr	r2, [pc, #92]	; (800f178 <dec_lock+0x74>)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	011b      	lsls	r3, r3, #4
 800f11e:	4413      	add	r3, r2
 800f120:	330c      	adds	r3, #12
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f126:	89fb      	ldrh	r3, [r7, #14]
 800f128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f12c:	d101      	bne.n	800f132 <dec_lock+0x2e>
 800f12e:	2300      	movs	r3, #0
 800f130:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f132:	89fb      	ldrh	r3, [r7, #14]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d002      	beq.n	800f13e <dec_lock+0x3a>
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f13e:	4a0e      	ldr	r2, [pc, #56]	; (800f178 <dec_lock+0x74>)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	4413      	add	r3, r2
 800f146:	330c      	adds	r3, #12
 800f148:	89fa      	ldrh	r2, [r7, #14]
 800f14a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f14c:	89fb      	ldrh	r3, [r7, #14]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d105      	bne.n	800f15e <dec_lock+0x5a>
 800f152:	4a09      	ldr	r2, [pc, #36]	; (800f178 <dec_lock+0x74>)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	011b      	lsls	r3, r3, #4
 800f158:	4413      	add	r3, r2
 800f15a:	2200      	movs	r2, #0
 800f15c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	737b      	strb	r3, [r7, #13]
 800f162:	e001      	b.n	800f168 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f164:	2302      	movs	r3, #2
 800f166:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f168:	7b7b      	ldrb	r3, [r7, #13]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3714      	adds	r7, #20
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	20003858 	.word	0x20003858

0800f17c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f184:	2300      	movs	r3, #0
 800f186:	60fb      	str	r3, [r7, #12]
 800f188:	e010      	b.n	800f1ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f18a:	4a0d      	ldr	r2, [pc, #52]	; (800f1c0 <clear_lock+0x44>)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	011b      	lsls	r3, r3, #4
 800f190:	4413      	add	r3, r2
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	429a      	cmp	r2, r3
 800f198:	d105      	bne.n	800f1a6 <clear_lock+0x2a>
 800f19a:	4a09      	ldr	r2, [pc, #36]	; (800f1c0 <clear_lock+0x44>)
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	011b      	lsls	r3, r3, #4
 800f1a0:	4413      	add	r3, r2
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	60fb      	str	r3, [r7, #12]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d9eb      	bls.n	800f18a <clear_lock+0xe>
	}
}
 800f1b2:	bf00      	nop
 800f1b4:	bf00      	nop
 800f1b6:	3714      	adds	r7, #20
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1be:	4770      	bx	lr
 800f1c0:	20003858 	.word	0x20003858

0800f1c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	78db      	ldrb	r3, [r3, #3]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d034      	beq.n	800f242 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	7858      	ldrb	r0, [r3, #1]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	f7ff fd40 	bl	800ec70 <disk_write>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	73fb      	strb	r3, [r7, #15]
 800f1fa:	e022      	b.n	800f242 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	697a      	ldr	r2, [r7, #20]
 800f208:	1ad2      	subs	r2, r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d217      	bcs.n	800f242 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	789b      	ldrb	r3, [r3, #2]
 800f216:	613b      	str	r3, [r7, #16]
 800f218:	e010      	b.n	800f23c <sync_window+0x78>
					wsect += fs->fsize;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	4413      	add	r3, r2
 800f222:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	7858      	ldrb	r0, [r3, #1]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f22e:	2301      	movs	r3, #1
 800f230:	697a      	ldr	r2, [r7, #20]
 800f232:	f7ff fd1d 	bl	800ec70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	3b01      	subs	r3, #1
 800f23a:	613b      	str	r3, [r7, #16]
 800f23c:	693b      	ldr	r3, [r7, #16]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d8eb      	bhi.n	800f21a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f242:	7bfb      	ldrb	r3, [r7, #15]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3718      	adds	r7, #24
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f256:	2300      	movs	r3, #0
 800f258:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	429a      	cmp	r2, r3
 800f262:	d01b      	beq.n	800f29c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7ff ffad 	bl	800f1c4 <sync_window>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d113      	bne.n	800f29c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	7858      	ldrb	r0, [r3, #1]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f27e:	2301      	movs	r3, #1
 800f280:	683a      	ldr	r2, [r7, #0]
 800f282:	f7ff fcd5 	bl	800ec30 <disk_read>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d004      	beq.n	800f296 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f290:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f292:	2301      	movs	r3, #1
 800f294:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	683a      	ldr	r2, [r7, #0]
 800f29a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
	...

0800f2a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7ff ff87 	bl	800f1c4 <sync_window>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f2ba:	7bfb      	ldrb	r3, [r7, #15]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d158      	bne.n	800f372 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d148      	bne.n	800f35a <sync_fs+0xb2>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	791b      	ldrb	r3, [r3, #4]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d144      	bne.n	800f35a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	3330      	adds	r3, #48	; 0x30
 800f2d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2d8:	2100      	movs	r1, #0
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff fda9 	bl	800ee32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	3330      	adds	r3, #48	; 0x30
 800f2e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f2e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff fd38 	bl	800ed62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3330      	adds	r3, #48	; 0x30
 800f2f6:	4921      	ldr	r1, [pc, #132]	; (800f37c <sync_fs+0xd4>)
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff fd4d 	bl	800ed98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	3330      	adds	r3, #48	; 0x30
 800f302:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f306:	491e      	ldr	r1, [pc, #120]	; (800f380 <sync_fs+0xd8>)
 800f308:	4618      	mov	r0, r3
 800f30a:	f7ff fd45 	bl	800ed98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3330      	adds	r3, #48	; 0x30
 800f312:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	691b      	ldr	r3, [r3, #16]
 800f31a:	4619      	mov	r1, r3
 800f31c:	4610      	mov	r0, r2
 800f31e:	f7ff fd3b 	bl	800ed98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3330      	adds	r3, #48	; 0x30
 800f326:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f7ff fd31 	bl	800ed98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	69db      	ldr	r3, [r3, #28]
 800f33a:	1c5a      	adds	r2, r3, #1
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	7858      	ldrb	r0, [r3, #1]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f34e:	2301      	movs	r3, #1
 800f350:	f7ff fc8e 	bl	800ec70 <disk_write>
			fs->fsi_flag = 0;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	785b      	ldrb	r3, [r3, #1]
 800f35e:	2200      	movs	r2, #0
 800f360:	2100      	movs	r1, #0
 800f362:	4618      	mov	r0, r3
 800f364:	f7ff fca4 	bl	800ecb0 <disk_ioctl>
 800f368:	4603      	mov	r3, r0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <sync_fs+0xca>
 800f36e:	2301      	movs	r3, #1
 800f370:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f372:	7bfb      	ldrb	r3, [r7, #15]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	41615252 	.word	0x41615252
 800f380:	61417272 	.word	0x61417272

0800f384 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	3b02      	subs	r3, #2
 800f392:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	695b      	ldr	r3, [r3, #20]
 800f398:	3b02      	subs	r3, #2
 800f39a:	683a      	ldr	r2, [r7, #0]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d301      	bcc.n	800f3a4 <clust2sect+0x20>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	e008      	b.n	800f3b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	895b      	ldrh	r3, [r3, #10]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	fb03 f202 	mul.w	r2, r3, r2
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3b4:	4413      	add	r3, r2
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	370c      	adds	r7, #12
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b086      	sub	sp, #24
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d904      	bls.n	800f3e2 <get_fat+0x20>
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	695b      	ldr	r3, [r3, #20]
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	d302      	bcc.n	800f3e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	e08f      	b.n	800f508 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f3e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	2b03      	cmp	r3, #3
 800f3f4:	d062      	beq.n	800f4bc <get_fat+0xfa>
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	dc7c      	bgt.n	800f4f4 <get_fat+0x132>
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d002      	beq.n	800f404 <get_fat+0x42>
 800f3fe:	2b02      	cmp	r3, #2
 800f400:	d042      	beq.n	800f488 <get_fat+0xc6>
 800f402:	e077      	b.n	800f4f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	60fb      	str	r3, [r7, #12]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	085b      	lsrs	r3, r3, #1
 800f40c:	68fa      	ldr	r2, [r7, #12]
 800f40e:	4413      	add	r3, r2
 800f410:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	6a1a      	ldr	r2, [r3, #32]
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	0a5b      	lsrs	r3, r3, #9
 800f41a:	4413      	add	r3, r2
 800f41c:	4619      	mov	r1, r3
 800f41e:	6938      	ldr	r0, [r7, #16]
 800f420:	f7ff ff14 	bl	800f24c <move_window>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d167      	bne.n	800f4fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	60fa      	str	r2, [r7, #12]
 800f430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	4413      	add	r3, r2
 800f438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f43c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f43e:	693b      	ldr	r3, [r7, #16]
 800f440:	6a1a      	ldr	r2, [r3, #32]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	0a5b      	lsrs	r3, r3, #9
 800f446:	4413      	add	r3, r2
 800f448:	4619      	mov	r1, r3
 800f44a:	6938      	ldr	r0, [r7, #16]
 800f44c:	f7ff fefe 	bl	800f24c <move_window>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d153      	bne.n	800f4fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45c:	693a      	ldr	r2, [r7, #16]
 800f45e:	4413      	add	r3, r2
 800f460:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f464:	021b      	lsls	r3, r3, #8
 800f466:	461a      	mov	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	f003 0301 	and.w	r3, r3, #1
 800f474:	2b00      	cmp	r3, #0
 800f476:	d002      	beq.n	800f47e <get_fat+0xbc>
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	091b      	lsrs	r3, r3, #4
 800f47c:	e002      	b.n	800f484 <get_fat+0xc2>
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f484:	617b      	str	r3, [r7, #20]
			break;
 800f486:	e03f      	b.n	800f508 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	6a1a      	ldr	r2, [r3, #32]
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	0a1b      	lsrs	r3, r3, #8
 800f490:	4413      	add	r3, r2
 800f492:	4619      	mov	r1, r3
 800f494:	6938      	ldr	r0, [r7, #16]
 800f496:	f7ff fed9 	bl	800f24c <move_window>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d130      	bne.n	800f502 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	005b      	lsls	r3, r3, #1
 800f4aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f4ae:	4413      	add	r3, r2
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7ff fc1b 	bl	800ecec <ld_word>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	617b      	str	r3, [r7, #20]
			break;
 800f4ba:	e025      	b.n	800f508 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	6a1a      	ldr	r2, [r3, #32]
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	09db      	lsrs	r3, r3, #7
 800f4c4:	4413      	add	r3, r2
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	6938      	ldr	r0, [r7, #16]
 800f4ca:	f7ff febf 	bl	800f24c <move_window>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d118      	bne.n	800f506 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	009b      	lsls	r3, r3, #2
 800f4de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f4e2:	4413      	add	r3, r2
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7ff fc19 	bl	800ed1c <ld_dword>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f4f0:	617b      	str	r3, [r7, #20]
			break;
 800f4f2:	e009      	b.n	800f508 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	617b      	str	r3, [r7, #20]
 800f4f8:	e006      	b.n	800f508 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f4fa:	bf00      	nop
 800f4fc:	e004      	b.n	800f508 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f4fe:	bf00      	nop
 800f500:	e002      	b.n	800f508 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f502:	bf00      	nop
 800f504:	e000      	b.n	800f508 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f506:	bf00      	nop
		}
	}

	return val;
 800f508:	697b      	ldr	r3, [r7, #20]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3718      	adds	r7, #24
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f512:	b590      	push	{r4, r7, lr}
 800f514:	b089      	sub	sp, #36	; 0x24
 800f516:	af00      	add	r7, sp, #0
 800f518:	60f8      	str	r0, [r7, #12]
 800f51a:	60b9      	str	r1, [r7, #8]
 800f51c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f51e:	2302      	movs	r3, #2
 800f520:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	2b01      	cmp	r3, #1
 800f526:	f240 80d2 	bls.w	800f6ce <put_fat+0x1bc>
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	695b      	ldr	r3, [r3, #20]
 800f52e:	68ba      	ldr	r2, [r7, #8]
 800f530:	429a      	cmp	r2, r3
 800f532:	f080 80cc 	bcs.w	800f6ce <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	2b03      	cmp	r3, #3
 800f53c:	f000 8096 	beq.w	800f66c <put_fat+0x15a>
 800f540:	2b03      	cmp	r3, #3
 800f542:	f300 80cd 	bgt.w	800f6e0 <put_fat+0x1ce>
 800f546:	2b01      	cmp	r3, #1
 800f548:	d002      	beq.n	800f550 <put_fat+0x3e>
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d06e      	beq.n	800f62c <put_fat+0x11a>
 800f54e:	e0c7      	b.n	800f6e0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	61bb      	str	r3, [r7, #24]
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	085b      	lsrs	r3, r3, #1
 800f558:	69ba      	ldr	r2, [r7, #24]
 800f55a:	4413      	add	r3, r2
 800f55c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	6a1a      	ldr	r2, [r3, #32]
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	0a5b      	lsrs	r3, r3, #9
 800f566:	4413      	add	r3, r2
 800f568:	4619      	mov	r1, r3
 800f56a:	68f8      	ldr	r0, [r7, #12]
 800f56c:	f7ff fe6e 	bl	800f24c <move_window>
 800f570:	4603      	mov	r3, r0
 800f572:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f574:	7ffb      	ldrb	r3, [r7, #31]
 800f576:	2b00      	cmp	r3, #0
 800f578:	f040 80ab 	bne.w	800f6d2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	1c59      	adds	r1, r3, #1
 800f586:	61b9      	str	r1, [r7, #24]
 800f588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f58c:	4413      	add	r3, r2
 800f58e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	f003 0301 	and.w	r3, r3, #1
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00d      	beq.n	800f5b6 <put_fat+0xa4>
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	b25b      	sxtb	r3, r3
 800f5a0:	f003 030f 	and.w	r3, r3, #15
 800f5a4:	b25a      	sxtb	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	b2db      	uxtb	r3, r3
 800f5aa:	011b      	lsls	r3, r3, #4
 800f5ac:	b25b      	sxtb	r3, r3
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	b25b      	sxtb	r3, r3
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	e001      	b.n	800f5ba <put_fat+0xa8>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	b2db      	uxtb	r3, r3
 800f5ba:	697a      	ldr	r2, [r7, #20]
 800f5bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6a1a      	ldr	r2, [r3, #32]
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	0a5b      	lsrs	r3, r3, #9
 800f5cc:	4413      	add	r3, r2
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f7ff fe3b 	bl	800f24c <move_window>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5da:	7ffb      	ldrb	r3, [r7, #31]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d17a      	bne.n	800f6d6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ec:	4413      	add	r3, r2
 800f5ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	f003 0301 	and.w	r3, r3, #1
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <put_fat+0xf0>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	091b      	lsrs	r3, r3, #4
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	e00e      	b.n	800f620 <put_fat+0x10e>
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	b25b      	sxtb	r3, r3
 800f608:	f023 030f 	bic.w	r3, r3, #15
 800f60c:	b25a      	sxtb	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	0a1b      	lsrs	r3, r3, #8
 800f612:	b25b      	sxtb	r3, r3
 800f614:	f003 030f 	and.w	r3, r3, #15
 800f618:	b25b      	sxtb	r3, r3
 800f61a:	4313      	orrs	r3, r2
 800f61c:	b25b      	sxtb	r3, r3
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	697a      	ldr	r2, [r7, #20]
 800f622:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2201      	movs	r2, #1
 800f628:	70da      	strb	r2, [r3, #3]
			break;
 800f62a:	e059      	b.n	800f6e0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6a1a      	ldr	r2, [r3, #32]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	0a1b      	lsrs	r3, r3, #8
 800f634:	4413      	add	r3, r2
 800f636:	4619      	mov	r1, r3
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f7ff fe07 	bl	800f24c <move_window>
 800f63e:	4603      	mov	r3, r0
 800f640:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f642:	7ffb      	ldrb	r3, [r7, #31]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d148      	bne.n	800f6da <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	005b      	lsls	r3, r3, #1
 800f652:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f656:	4413      	add	r3, r2
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	b292      	uxth	r2, r2
 800f65c:	4611      	mov	r1, r2
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff fb7f 	bl	800ed62 <st_word>
			fs->wflag = 1;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2201      	movs	r2, #1
 800f668:	70da      	strb	r2, [r3, #3]
			break;
 800f66a:	e039      	b.n	800f6e0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6a1a      	ldr	r2, [r3, #32]
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	09db      	lsrs	r3, r3, #7
 800f674:	4413      	add	r3, r2
 800f676:	4619      	mov	r1, r3
 800f678:	68f8      	ldr	r0, [r7, #12]
 800f67a:	f7ff fde7 	bl	800f24c <move_window>
 800f67e:	4603      	mov	r3, r0
 800f680:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f682:	7ffb      	ldrb	r3, [r7, #31]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d12a      	bne.n	800f6de <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f69c:	4413      	add	r3, r2
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff fb3c 	bl	800ed1c <ld_dword>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f6aa:	4323      	orrs	r3, r4
 800f6ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f6bc:	4413      	add	r3, r2
 800f6be:	6879      	ldr	r1, [r7, #4]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff fb69 	bl	800ed98 <st_dword>
			fs->wflag = 1;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	70da      	strb	r2, [r3, #3]
			break;
 800f6cc:	e008      	b.n	800f6e0 <put_fat+0x1ce>
		}
	}
 800f6ce:	bf00      	nop
 800f6d0:	e006      	b.n	800f6e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f6d2:	bf00      	nop
 800f6d4:	e004      	b.n	800f6e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f6d6:	bf00      	nop
 800f6d8:	e002      	b.n	800f6e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f6da:	bf00      	nop
 800f6dc:	e000      	b.n	800f6e0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f6de:	bf00      	nop
	return res;
 800f6e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3724      	adds	r7, #36	; 0x24
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd90      	pop	{r4, r7, pc}

0800f6ea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b088      	sub	sp, #32
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	60f8      	str	r0, [r7, #12]
 800f6f2:	60b9      	str	r1, [r7, #8]
 800f6f4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d904      	bls.n	800f710 <remove_chain+0x26>
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d301      	bcc.n	800f714 <remove_chain+0x2a>
 800f710:	2302      	movs	r3, #2
 800f712:	e04b      	b.n	800f7ac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00c      	beq.n	800f734 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f71a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f71e:	6879      	ldr	r1, [r7, #4]
 800f720:	69b8      	ldr	r0, [r7, #24]
 800f722:	f7ff fef6 	bl	800f512 <put_fat>
 800f726:	4603      	mov	r3, r0
 800f728:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f72a:	7ffb      	ldrb	r3, [r7, #31]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d001      	beq.n	800f734 <remove_chain+0x4a>
 800f730:	7ffb      	ldrb	r3, [r7, #31]
 800f732:	e03b      	b.n	800f7ac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f734:	68b9      	ldr	r1, [r7, #8]
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f7ff fe43 	bl	800f3c2 <get_fat>
 800f73c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d031      	beq.n	800f7a8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	2b01      	cmp	r3, #1
 800f748:	d101      	bne.n	800f74e <remove_chain+0x64>
 800f74a:	2302      	movs	r3, #2
 800f74c:	e02e      	b.n	800f7ac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f754:	d101      	bne.n	800f75a <remove_chain+0x70>
 800f756:	2301      	movs	r3, #1
 800f758:	e028      	b.n	800f7ac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f75a:	2200      	movs	r2, #0
 800f75c:	68b9      	ldr	r1, [r7, #8]
 800f75e:	69b8      	ldr	r0, [r7, #24]
 800f760:	f7ff fed7 	bl	800f512 <put_fat>
 800f764:	4603      	mov	r3, r0
 800f766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f768:	7ffb      	ldrb	r3, [r7, #31]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d001      	beq.n	800f772 <remove_chain+0x88>
 800f76e:	7ffb      	ldrb	r3, [r7, #31]
 800f770:	e01c      	b.n	800f7ac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f772:	69bb      	ldr	r3, [r7, #24]
 800f774:	691a      	ldr	r2, [r3, #16]
 800f776:	69bb      	ldr	r3, [r7, #24]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	3b02      	subs	r3, #2
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d20b      	bcs.n	800f798 <remove_chain+0xae>
			fs->free_clst++;
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	691b      	ldr	r3, [r3, #16]
 800f784:	1c5a      	adds	r2, r3, #1
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	791b      	ldrb	r3, [r3, #4]
 800f78e:	f043 0301 	orr.w	r3, r3, #1
 800f792:	b2da      	uxtb	r2, r3
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f79c:	69bb      	ldr	r3, [r7, #24]
 800f79e:	695b      	ldr	r3, [r3, #20]
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d3c6      	bcc.n	800f734 <remove_chain+0x4a>
 800f7a6:	e000      	b.n	800f7aa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f7a8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f7aa:	2300      	movs	r3, #0
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3720      	adds	r7, #32
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d10d      	bne.n	800f7e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f7ca:	693b      	ldr	r3, [r7, #16]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f7d0:	69bb      	ldr	r3, [r7, #24]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d004      	beq.n	800f7e0 <create_chain+0x2c>
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	695b      	ldr	r3, [r3, #20]
 800f7da:	69ba      	ldr	r2, [r7, #24]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d31b      	bcc.n	800f818 <create_chain+0x64>
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	61bb      	str	r3, [r7, #24]
 800f7e4:	e018      	b.n	800f818 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7ff fdea 	bl	800f3c2 <get_fat>
 800f7ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d801      	bhi.n	800f7fa <create_chain+0x46>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e070      	b.n	800f8dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f800:	d101      	bne.n	800f806 <create_chain+0x52>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	e06a      	b.n	800f8dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	695b      	ldr	r3, [r3, #20]
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d201      	bcs.n	800f814 <create_chain+0x60>
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	e063      	b.n	800f8dc <create_chain+0x128>
		scl = clst;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	3301      	adds	r3, #1
 800f820:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	695b      	ldr	r3, [r3, #20]
 800f826:	69fa      	ldr	r2, [r7, #28]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d307      	bcc.n	800f83c <create_chain+0x88>
				ncl = 2;
 800f82c:	2302      	movs	r3, #2
 800f82e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f830:	69fa      	ldr	r2, [r7, #28]
 800f832:	69bb      	ldr	r3, [r7, #24]
 800f834:	429a      	cmp	r2, r3
 800f836:	d901      	bls.n	800f83c <create_chain+0x88>
 800f838:	2300      	movs	r3, #0
 800f83a:	e04f      	b.n	800f8dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f83c:	69f9      	ldr	r1, [r7, #28]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff fdbf 	bl	800f3c2 <get_fat>
 800f844:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00e      	beq.n	800f86a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2b01      	cmp	r3, #1
 800f850:	d003      	beq.n	800f85a <create_chain+0xa6>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f858:	d101      	bne.n	800f85e <create_chain+0xaa>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	e03e      	b.n	800f8dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f85e:	69fa      	ldr	r2, [r7, #28]
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	429a      	cmp	r2, r3
 800f864:	d1da      	bne.n	800f81c <create_chain+0x68>
 800f866:	2300      	movs	r3, #0
 800f868:	e038      	b.n	800f8dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f86a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f86c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f870:	69f9      	ldr	r1, [r7, #28]
 800f872:	6938      	ldr	r0, [r7, #16]
 800f874:	f7ff fe4d 	bl	800f512 <put_fat>
 800f878:	4603      	mov	r3, r0
 800f87a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d109      	bne.n	800f896 <create_chain+0xe2>
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d006      	beq.n	800f896 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f888:	69fa      	ldr	r2, [r7, #28]
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6938      	ldr	r0, [r7, #16]
 800f88e:	f7ff fe40 	bl	800f512 <put_fat>
 800f892:	4603      	mov	r3, r0
 800f894:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d116      	bne.n	800f8ca <create_chain+0x116>
		fs->last_clst = ncl;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	69fa      	ldr	r2, [r7, #28]
 800f8a0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	691a      	ldr	r2, [r3, #16]
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	695b      	ldr	r3, [r3, #20]
 800f8aa:	3b02      	subs	r3, #2
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d804      	bhi.n	800f8ba <create_chain+0x106>
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	691b      	ldr	r3, [r3, #16]
 800f8b4:	1e5a      	subs	r2, r3, #1
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	791b      	ldrb	r3, [r3, #4]
 800f8be:	f043 0301 	orr.w	r3, r3, #1
 800f8c2:	b2da      	uxtb	r2, r3
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	711a      	strb	r2, [r3, #4]
 800f8c8:	e007      	b.n	800f8da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f8ca:	7dfb      	ldrb	r3, [r7, #23]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d102      	bne.n	800f8d6 <create_chain+0x122>
 800f8d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f8d4:	e000      	b.n	800f8d8 <create_chain+0x124>
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f8da:	69fb      	ldr	r3, [r7, #28]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3720      	adds	r7, #32
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b087      	sub	sp, #28
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	0a5b      	lsrs	r3, r3, #9
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	8952      	ldrh	r2, [r2, #10]
 800f904:	fbb3 f3f2 	udiv	r3, r3, r2
 800f908:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	1d1a      	adds	r2, r3, #4
 800f90e:	613a      	str	r2, [r7, #16]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <clmt_clust+0x3a>
 800f91a:	2300      	movs	r3, #0
 800f91c:	e010      	b.n	800f940 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	429a      	cmp	r2, r3
 800f924:	d307      	bcc.n	800f936 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f926:	697a      	ldr	r2, [r7, #20]
 800f928:	68bb      	ldr	r3, [r7, #8]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	617b      	str	r3, [r7, #20]
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	3304      	adds	r3, #4
 800f932:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f934:	e7e9      	b.n	800f90a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f936:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	4413      	add	r3, r2
}
 800f940:	4618      	mov	r0, r3
 800f942:	371c      	adds	r7, #28
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr

0800f94c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b086      	sub	sp, #24
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]
 800f954:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f962:	d204      	bcs.n	800f96e <dir_sdi+0x22>
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	f003 031f 	and.w	r3, r3, #31
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f96e:	2302      	movs	r3, #2
 800f970:	e063      	b.n	800fa3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	683a      	ldr	r2, [r7, #0]
 800f976:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d106      	bne.n	800f992 <dir_sdi+0x46>
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	2b02      	cmp	r3, #2
 800f98a:	d902      	bls.n	800f992 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f990:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10c      	bne.n	800f9b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	095b      	lsrs	r3, r3, #5
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	8912      	ldrh	r2, [r2, #8]
 800f9a0:	4293      	cmp	r3, r2
 800f9a2:	d301      	bcc.n	800f9a8 <dir_sdi+0x5c>
 800f9a4:	2302      	movs	r3, #2
 800f9a6:	e048      	b.n	800fa3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	61da      	str	r2, [r3, #28]
 800f9b0:	e029      	b.n	800fa06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	895b      	ldrh	r3, [r3, #10]
 800f9b6:	025b      	lsls	r3, r3, #9
 800f9b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f9ba:	e019      	b.n	800f9f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6979      	ldr	r1, [r7, #20]
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7ff fcfe 	bl	800f3c2 <get_fat>
 800f9c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f9ce:	d101      	bne.n	800f9d4 <dir_sdi+0x88>
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	e032      	b.n	800fa3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d904      	bls.n	800f9e4 <dir_sdi+0x98>
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	695b      	ldr	r3, [r3, #20]
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d301      	bcc.n	800f9e8 <dir_sdi+0x9c>
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	e028      	b.n	800fa3a <dir_sdi+0xee>
			ofs -= csz;
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f9f0:	683a      	ldr	r2, [r7, #0]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	d2e1      	bcs.n	800f9bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f9f8:	6979      	ldr	r1, [r7, #20]
 800f9fa:	6938      	ldr	r0, [r7, #16]
 800f9fc:	f7ff fcc2 	bl	800f384 <clust2sect>
 800fa00:	4602      	mov	r2, r0
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	69db      	ldr	r3, [r3, #28]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d101      	bne.n	800fa18 <dir_sdi+0xcc>
 800fa14:	2302      	movs	r3, #2
 800fa16:	e010      	b.n	800fa3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	69da      	ldr	r2, [r3, #28]
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	0a5b      	lsrs	r3, r3, #9
 800fa20:	441a      	add	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa32:	441a      	add	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3718      	adds	r7, #24
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b086      	sub	sp, #24
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	6078      	str	r0, [r7, #4]
 800fa4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	695b      	ldr	r3, [r3, #20]
 800fa56:	3320      	adds	r3, #32
 800fa58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	69db      	ldr	r3, [r3, #28]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <dir_next+0x28>
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa68:	d301      	bcc.n	800fa6e <dir_next+0x2c>
 800fa6a:	2304      	movs	r3, #4
 800fa6c:	e0aa      	b.n	800fbc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f040 8098 	bne.w	800fbaa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	69db      	ldr	r3, [r3, #28]
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	699b      	ldr	r3, [r3, #24]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10b      	bne.n	800faa4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	095b      	lsrs	r3, r3, #5
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	8912      	ldrh	r2, [r2, #8]
 800fa94:	4293      	cmp	r3, r2
 800fa96:	f0c0 8088 	bcc.w	800fbaa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	61da      	str	r2, [r3, #28]
 800faa0:	2304      	movs	r3, #4
 800faa2:	e08f      	b.n	800fbc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	0a5b      	lsrs	r3, r3, #9
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	8952      	ldrh	r2, [r2, #10]
 800faac:	3a01      	subs	r2, #1
 800faae:	4013      	ands	r3, r2
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d17a      	bne.n	800fbaa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	699b      	ldr	r3, [r3, #24]
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f7ff fc80 	bl	800f3c2 <get_fat>
 800fac2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d801      	bhi.n	800face <dir_next+0x8c>
 800faca:	2302      	movs	r3, #2
 800facc:	e07a      	b.n	800fbc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fad4:	d101      	bne.n	800fada <dir_next+0x98>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e074      	b.n	800fbc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	695b      	ldr	r3, [r3, #20]
 800fade:	697a      	ldr	r2, [r7, #20]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d358      	bcc.n	800fb96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d104      	bne.n	800faf4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	61da      	str	r2, [r3, #28]
 800faf0:	2304      	movs	r3, #4
 800faf2:	e067      	b.n	800fbc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	699b      	ldr	r3, [r3, #24]
 800fafa:	4619      	mov	r1, r3
 800fafc:	4610      	mov	r0, r2
 800fafe:	f7ff fe59 	bl	800f7b4 <create_chain>
 800fb02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <dir_next+0xcc>
 800fb0a:	2307      	movs	r3, #7
 800fb0c:	e05a      	b.n	800fbc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d101      	bne.n	800fb18 <dir_next+0xd6>
 800fb14:	2302      	movs	r3, #2
 800fb16:	e055      	b.n	800fbc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb1e:	d101      	bne.n	800fb24 <dir_next+0xe2>
 800fb20:	2301      	movs	r3, #1
 800fb22:	e04f      	b.n	800fbc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fb24:	68f8      	ldr	r0, [r7, #12]
 800fb26:	f7ff fb4d 	bl	800f1c4 <sync_window>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d001      	beq.n	800fb34 <dir_next+0xf2>
 800fb30:	2301      	movs	r3, #1
 800fb32:	e047      	b.n	800fbc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3330      	adds	r3, #48	; 0x30
 800fb38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7ff f977 	bl	800ee32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb44:	2300      	movs	r3, #0
 800fb46:	613b      	str	r3, [r7, #16]
 800fb48:	6979      	ldr	r1, [r7, #20]
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f7ff fc1a 	bl	800f384 <clust2sect>
 800fb50:	4602      	mov	r2, r0
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb56:	e012      	b.n	800fb7e <dir_next+0x13c>
						fs->wflag = 1;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f7ff fb30 	bl	800f1c4 <sync_window>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <dir_next+0x12c>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	e02a      	b.n	800fbc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fb6e:	693b      	ldr	r3, [r7, #16]
 800fb70:	3301      	adds	r3, #1
 800fb72:	613b      	str	r3, [r7, #16]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb78:	1c5a      	adds	r2, r3, #1
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	62da      	str	r2, [r3, #44]	; 0x2c
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	895b      	ldrh	r3, [r3, #10]
 800fb82:	461a      	mov	r2, r3
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d3e6      	bcc.n	800fb58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	1ad2      	subs	r2, r2, r3
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fb9c:	6979      	ldr	r1, [r7, #20]
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f7ff fbf0 	bl	800f384 <clust2sect>
 800fba4:	4602      	mov	r2, r0
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbbc:	441a      	add	r2, r3
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fbdc:	2100      	movs	r1, #0
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f7ff feb4 	bl	800f94c <dir_sdi>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fbe8:	7dfb      	ldrb	r3, [r7, #23]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d12b      	bne.n	800fc46 <dir_alloc+0x7a>
		n = 0;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	69db      	ldr	r3, [r3, #28]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	68f8      	ldr	r0, [r7, #12]
 800fbfa:	f7ff fb27 	bl	800f24c <move_window>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d11d      	bne.n	800fc44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a1b      	ldr	r3, [r3, #32]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	2be5      	cmp	r3, #229	; 0xe5
 800fc10:	d004      	beq.n	800fc1c <dir_alloc+0x50>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d107      	bne.n	800fc2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	613b      	str	r3, [r7, #16]
 800fc22:	693a      	ldr	r2, [r7, #16]
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d102      	bne.n	800fc30 <dir_alloc+0x64>
 800fc2a:	e00c      	b.n	800fc46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fc30:	2101      	movs	r1, #1
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f7ff ff05 	bl	800fa42 <dir_next>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fc3c:	7dfb      	ldrb	r3, [r7, #23]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d0d7      	beq.n	800fbf2 <dir_alloc+0x26>
 800fc42:	e000      	b.n	800fc46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fc44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	2b04      	cmp	r3, #4
 800fc4a:	d101      	bne.n	800fc50 <dir_alloc+0x84>
 800fc4c:	2307      	movs	r3, #7
 800fc4e:	75fb      	strb	r3, [r7, #23]
	return res;
 800fc50:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3718      	adds	r7, #24
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	331a      	adds	r3, #26
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff f83f 	bl	800ecec <ld_word>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d109      	bne.n	800fc8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	3314      	adds	r3, #20
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7ff f834 	bl	800ecec <ld_word>
 800fc84:	4603      	mov	r3, r0
 800fc86:	041b      	lsls	r3, r3, #16
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	331a      	adds	r3, #26
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	b292      	uxth	r2, r2
 800fcac:	4611      	mov	r1, r2
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff f857 	bl	800ed62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	2b03      	cmp	r3, #3
 800fcba:	d109      	bne.n	800fcd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	f103 0214 	add.w	r2, r3, #20
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	0c1b      	lsrs	r3, r3, #16
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4619      	mov	r1, r3
 800fcca:	4610      	mov	r0, r2
 800fccc:	f7ff f849 	bl	800ed62 <st_word>
	}
}
 800fcd0:	bf00      	nop
 800fcd2:	3710      	adds	r7, #16
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fce6:	2100      	movs	r1, #0
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff fe2f 	bl	800f94c <dir_sdi>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <dir_find+0x24>
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	e03e      	b.n	800fd7a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	69db      	ldr	r3, [r3, #28]
 800fd00:	4619      	mov	r1, r3
 800fd02:	6938      	ldr	r0, [r7, #16]
 800fd04:	f7ff faa2 	bl	800f24c <move_window>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fd0c:	7dfb      	ldrb	r3, [r7, #23]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d12f      	bne.n	800fd72 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a1b      	ldr	r3, [r3, #32]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fd1a:	7bfb      	ldrb	r3, [r7, #15]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d102      	bne.n	800fd26 <dir_find+0x4e>
 800fd20:	2304      	movs	r3, #4
 800fd22:	75fb      	strb	r3, [r7, #23]
 800fd24:	e028      	b.n	800fd78 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a1b      	ldr	r3, [r3, #32]
 800fd2a:	330b      	adds	r3, #11
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd32:	b2da      	uxtb	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6a1b      	ldr	r3, [r3, #32]
 800fd3c:	330b      	adds	r3, #11
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	f003 0308 	and.w	r3, r3, #8
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10a      	bne.n	800fd5e <dir_find+0x86>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6a18      	ldr	r0, [r3, #32]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	3324      	adds	r3, #36	; 0x24
 800fd50:	220b      	movs	r2, #11
 800fd52:	4619      	mov	r1, r3
 800fd54:	f7ff f888 	bl	800ee68 <mem_cmp>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00b      	beq.n	800fd76 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fd5e:	2100      	movs	r1, #0
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7ff fe6e 	bl	800fa42 <dir_next>
 800fd66:	4603      	mov	r3, r0
 800fd68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d0c5      	beq.n	800fcfc <dir_find+0x24>
 800fd70:	e002      	b.n	800fd78 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fd72:	bf00      	nop
 800fd74:	e000      	b.n	800fd78 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fd76:	bf00      	nop

	return res;
 800fd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b084      	sub	sp, #16
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fd90:	2101      	movs	r1, #1
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f7ff ff1a 	bl	800fbcc <dir_alloc>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d11c      	bne.n	800fddc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	69db      	ldr	r3, [r3, #28]
 800fda6:	4619      	mov	r1, r3
 800fda8:	68b8      	ldr	r0, [r7, #8]
 800fdaa:	f7ff fa4f 	bl	800f24c <move_window>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdb2:	7bfb      	ldrb	r3, [r7, #15]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d111      	bne.n	800fddc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6a1b      	ldr	r3, [r3, #32]
 800fdbc:	2220      	movs	r2, #32
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7ff f836 	bl	800ee32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a18      	ldr	r0, [r3, #32]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	3324      	adds	r3, #36	; 0x24
 800fdce:	220b      	movs	r2, #11
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	f7ff f80d 	bl	800edf0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b086      	sub	sp, #24
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	69db      	ldr	r3, [r3, #28]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d04e      	beq.n	800fe9c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	613b      	str	r3, [r7, #16]
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800fe06:	e021      	b.n	800fe4c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6a1a      	ldr	r2, [r3, #32]
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	1c59      	adds	r1, r3, #1
 800fe10:	6179      	str	r1, [r7, #20]
 800fe12:	4413      	add	r3, r2
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
 800fe1a:	2b20      	cmp	r3, #32
 800fe1c:	d100      	bne.n	800fe20 <get_fileinfo+0x3a>
 800fe1e:	e015      	b.n	800fe4c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fe20:	7bfb      	ldrb	r3, [r7, #15]
 800fe22:	2b05      	cmp	r3, #5
 800fe24:	d101      	bne.n	800fe2a <get_fileinfo+0x44>
 800fe26:	23e5      	movs	r3, #229	; 0xe5
 800fe28:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	2b09      	cmp	r3, #9
 800fe2e:	d106      	bne.n	800fe3e <get_fileinfo+0x58>
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	1c5a      	adds	r2, r3, #1
 800fe34:	613a      	str	r2, [r7, #16]
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	4413      	add	r3, r2
 800fe3a:	222e      	movs	r2, #46	; 0x2e
 800fe3c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	1c5a      	adds	r2, r3, #1
 800fe42:	613a      	str	r2, [r7, #16]
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	4413      	add	r3, r2
 800fe48:	7bfa      	ldrb	r2, [r7, #15]
 800fe4a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	2b0a      	cmp	r3, #10
 800fe50:	d9da      	bls.n	800fe08 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800fe52:	683a      	ldr	r2, [r7, #0]
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	4413      	add	r3, r2
 800fe58:	3309      	adds	r3, #9
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	7ada      	ldrb	r2, [r3, #11]
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a1b      	ldr	r3, [r3, #32]
 800fe6c:	331c      	adds	r3, #28
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe ff54 	bl	800ed1c <ld_dword>
 800fe74:	4602      	mov	r2, r0
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	3316      	adds	r3, #22
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fe ff4b 	bl	800ed1c <ld_dword>
 800fe86:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	b29a      	uxth	r2, r3
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	80da      	strh	r2, [r3, #6]
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	0c1b      	lsrs	r3, r3, #16
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	809a      	strh	r2, [r3, #4]
 800fe9a:	e000      	b.n	800fe9e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fe9c:	bf00      	nop
}
 800fe9e:	3718      	adds	r7, #24
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b088      	sub	sp, #32
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	60fb      	str	r3, [r7, #12]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	3324      	adds	r3, #36	; 0x24
 800feb8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800feba:	220b      	movs	r2, #11
 800febc:	2120      	movs	r1, #32
 800febe:	68b8      	ldr	r0, [r7, #8]
 800fec0:	f7fe ffb7 	bl	800ee32 <mem_set>
	si = i = 0; ni = 8;
 800fec4:	2300      	movs	r3, #0
 800fec6:	613b      	str	r3, [r7, #16]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	61fb      	str	r3, [r7, #28]
 800fecc:	2308      	movs	r3, #8
 800fece:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	61fa      	str	r2, [r7, #28]
 800fed6:	68fa      	ldr	r2, [r7, #12]
 800fed8:	4413      	add	r3, r2
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fede:	7efb      	ldrb	r3, [r7, #27]
 800fee0:	2b20      	cmp	r3, #32
 800fee2:	d94e      	bls.n	800ff82 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fee4:	7efb      	ldrb	r3, [r7, #27]
 800fee6:	2b2f      	cmp	r3, #47	; 0x2f
 800fee8:	d006      	beq.n	800fef8 <create_name+0x54>
 800feea:	7efb      	ldrb	r3, [r7, #27]
 800feec:	2b5c      	cmp	r3, #92	; 0x5c
 800feee:	d110      	bne.n	800ff12 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fef0:	e002      	b.n	800fef8 <create_name+0x54>
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	3301      	adds	r3, #1
 800fef6:	61fb      	str	r3, [r7, #28]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	69fb      	ldr	r3, [r7, #28]
 800fefc:	4413      	add	r3, r2
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	2b2f      	cmp	r3, #47	; 0x2f
 800ff02:	d0f6      	beq.n	800fef2 <create_name+0x4e>
 800ff04:	68fa      	ldr	r2, [r7, #12]
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	4413      	add	r3, r2
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	2b5c      	cmp	r3, #92	; 0x5c
 800ff0e:	d0f0      	beq.n	800fef2 <create_name+0x4e>
			break;
 800ff10:	e038      	b.n	800ff84 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ff12:	7efb      	ldrb	r3, [r7, #27]
 800ff14:	2b2e      	cmp	r3, #46	; 0x2e
 800ff16:	d003      	beq.n	800ff20 <create_name+0x7c>
 800ff18:	693a      	ldr	r2, [r7, #16]
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d30c      	bcc.n	800ff3a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	2b0b      	cmp	r3, #11
 800ff24:	d002      	beq.n	800ff2c <create_name+0x88>
 800ff26:	7efb      	ldrb	r3, [r7, #27]
 800ff28:	2b2e      	cmp	r3, #46	; 0x2e
 800ff2a:	d001      	beq.n	800ff30 <create_name+0x8c>
 800ff2c:	2306      	movs	r3, #6
 800ff2e:	e044      	b.n	800ffba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ff30:	2308      	movs	r3, #8
 800ff32:	613b      	str	r3, [r7, #16]
 800ff34:	230b      	movs	r3, #11
 800ff36:	617b      	str	r3, [r7, #20]
			continue;
 800ff38:	e022      	b.n	800ff80 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ff3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	da04      	bge.n	800ff4c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ff42:	7efb      	ldrb	r3, [r7, #27]
 800ff44:	3b80      	subs	r3, #128	; 0x80
 800ff46:	4a1f      	ldr	r2, [pc, #124]	; (800ffc4 <create_name+0x120>)
 800ff48:	5cd3      	ldrb	r3, [r2, r3]
 800ff4a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ff4c:	7efb      	ldrb	r3, [r7, #27]
 800ff4e:	4619      	mov	r1, r3
 800ff50:	481d      	ldr	r0, [pc, #116]	; (800ffc8 <create_name+0x124>)
 800ff52:	f7fe ffb0 	bl	800eeb6 <chk_chr>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <create_name+0xbc>
 800ff5c:	2306      	movs	r3, #6
 800ff5e:	e02c      	b.n	800ffba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ff60:	7efb      	ldrb	r3, [r7, #27]
 800ff62:	2b60      	cmp	r3, #96	; 0x60
 800ff64:	d905      	bls.n	800ff72 <create_name+0xce>
 800ff66:	7efb      	ldrb	r3, [r7, #27]
 800ff68:	2b7a      	cmp	r3, #122	; 0x7a
 800ff6a:	d802      	bhi.n	800ff72 <create_name+0xce>
 800ff6c:	7efb      	ldrb	r3, [r7, #27]
 800ff6e:	3b20      	subs	r3, #32
 800ff70:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	1c5a      	adds	r2, r3, #1
 800ff76:	613a      	str	r2, [r7, #16]
 800ff78:	68ba      	ldr	r2, [r7, #8]
 800ff7a:	4413      	add	r3, r2
 800ff7c:	7efa      	ldrb	r2, [r7, #27]
 800ff7e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ff80:	e7a6      	b.n	800fed0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ff82:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	441a      	add	r2, r3
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d101      	bne.n	800ff98 <create_name+0xf4>
 800ff94:	2306      	movs	r3, #6
 800ff96:	e010      	b.n	800ffba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	2be5      	cmp	r3, #229	; 0xe5
 800ff9e:	d102      	bne.n	800ffa6 <create_name+0x102>
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2205      	movs	r2, #5
 800ffa4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ffa6:	7efb      	ldrb	r3, [r7, #27]
 800ffa8:	2b20      	cmp	r3, #32
 800ffaa:	d801      	bhi.n	800ffb0 <create_name+0x10c>
 800ffac:	2204      	movs	r2, #4
 800ffae:	e000      	b.n	800ffb2 <create_name+0x10e>
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	330b      	adds	r3, #11
 800ffb6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ffb8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3720      	adds	r7, #32
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	08013bcc 	.word	0x08013bcc
 800ffc8:	080137ac 	.word	0x080137ac

0800ffcc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b086      	sub	sp, #24
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
 800ffd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ffe0:	e002      	b.n	800ffe8 <follow_path+0x1c>
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	603b      	str	r3, [r7, #0]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	2b2f      	cmp	r3, #47	; 0x2f
 800ffee:	d0f8      	beq.n	800ffe2 <follow_path+0x16>
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	2b5c      	cmp	r3, #92	; 0x5c
 800fff6:	d0f4      	beq.n	800ffe2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	2200      	movs	r2, #0
 800fffc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	2b1f      	cmp	r3, #31
 8010004:	d80a      	bhi.n	801001c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2280      	movs	r2, #128	; 0x80
 801000a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801000e:	2100      	movs	r1, #0
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f7ff fc9b 	bl	800f94c <dir_sdi>
 8010016:	4603      	mov	r3, r0
 8010018:	75fb      	strb	r3, [r7, #23]
 801001a:	e043      	b.n	80100a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801001c:	463b      	mov	r3, r7
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7ff ff3f 	bl	800fea4 <create_name>
 8010026:	4603      	mov	r3, r0
 8010028:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d134      	bne.n	801009a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f7ff fe51 	bl	800fcd8 <dir_find>
 8010036:	4603      	mov	r3, r0
 8010038:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010040:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010042:	7dfb      	ldrb	r3, [r7, #23]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00a      	beq.n	801005e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010048:	7dfb      	ldrb	r3, [r7, #23]
 801004a:	2b04      	cmp	r3, #4
 801004c:	d127      	bne.n	801009e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801004e:	7afb      	ldrb	r3, [r7, #11]
 8010050:	f003 0304 	and.w	r3, r3, #4
 8010054:	2b00      	cmp	r3, #0
 8010056:	d122      	bne.n	801009e <follow_path+0xd2>
 8010058:	2305      	movs	r3, #5
 801005a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801005c:	e01f      	b.n	801009e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801005e:	7afb      	ldrb	r3, [r7, #11]
 8010060:	f003 0304 	and.w	r3, r3, #4
 8010064:	2b00      	cmp	r3, #0
 8010066:	d11c      	bne.n	80100a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	799b      	ldrb	r3, [r3, #6]
 801006c:	f003 0310 	and.w	r3, r3, #16
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010074:	2305      	movs	r3, #5
 8010076:	75fb      	strb	r3, [r7, #23]
 8010078:	e014      	b.n	80100a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	695b      	ldr	r3, [r3, #20]
 8010084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010088:	4413      	add	r3, r2
 801008a:	4619      	mov	r1, r3
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	f7ff fde4 	bl	800fc5a <ld_clust>
 8010092:	4602      	mov	r2, r0
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010098:	e7c0      	b.n	801001c <follow_path+0x50>
			if (res != FR_OK) break;
 801009a:	bf00      	nop
 801009c:	e002      	b.n	80100a4 <follow_path+0xd8>
				break;
 801009e:	bf00      	nop
 80100a0:	e000      	b.n	80100a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100a2:	bf00      	nop
			}
		}
	}

	return res;
 80100a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a6:	4618      	mov	r0, r3
 80100a8:	3718      	adds	r7, #24
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}

080100ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80100ae:	b480      	push	{r7}
 80100b0:	b087      	sub	sp, #28
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80100b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d031      	beq.n	8010128 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	617b      	str	r3, [r7, #20]
 80100ca:	e002      	b.n	80100d2 <get_ldnumber+0x24>
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	3301      	adds	r3, #1
 80100d0:	617b      	str	r3, [r7, #20]
 80100d2:	697b      	ldr	r3, [r7, #20]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	2b20      	cmp	r3, #32
 80100d8:	d903      	bls.n	80100e2 <get_ldnumber+0x34>
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	2b3a      	cmp	r3, #58	; 0x3a
 80100e0:	d1f4      	bne.n	80100cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	2b3a      	cmp	r3, #58	; 0x3a
 80100e8:	d11c      	bne.n	8010124 <get_ldnumber+0x76>
			tp = *path;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	1c5a      	adds	r2, r3, #1
 80100f4:	60fa      	str	r2, [r7, #12]
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	3b30      	subs	r3, #48	; 0x30
 80100fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	2b09      	cmp	r3, #9
 8010100:	d80e      	bhi.n	8010120 <get_ldnumber+0x72>
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	429a      	cmp	r2, r3
 8010108:	d10a      	bne.n	8010120 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d107      	bne.n	8010120 <get_ldnumber+0x72>
					vol = (int)i;
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	3301      	adds	r3, #1
 8010118:	617b      	str	r3, [r7, #20]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	697a      	ldr	r2, [r7, #20]
 801011e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	e002      	b.n	801012a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010124:	2300      	movs	r3, #0
 8010126:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010128:	693b      	ldr	r3, [r7, #16]
}
 801012a:	4618      	mov	r0, r3
 801012c:	371c      	adds	r7, #28
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr
	...

08010138 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	70da      	strb	r2, [r3, #3]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801014e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010150:	6839      	ldr	r1, [r7, #0]
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff f87a 	bl	800f24c <move_window>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <check_fs+0x2a>
 801015e:	2304      	movs	r3, #4
 8010160:	e038      	b.n	80101d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	3330      	adds	r3, #48	; 0x30
 8010166:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801016a:	4618      	mov	r0, r3
 801016c:	f7fe fdbe 	bl	800ecec <ld_word>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010178:	429a      	cmp	r2, r3
 801017a:	d001      	beq.n	8010180 <check_fs+0x48>
 801017c:	2303      	movs	r3, #3
 801017e:	e029      	b.n	80101d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010186:	2be9      	cmp	r3, #233	; 0xe9
 8010188:	d009      	beq.n	801019e <check_fs+0x66>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010190:	2beb      	cmp	r3, #235	; 0xeb
 8010192:	d11e      	bne.n	80101d2 <check_fs+0x9a>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801019a:	2b90      	cmp	r3, #144	; 0x90
 801019c:	d119      	bne.n	80101d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	3330      	adds	r3, #48	; 0x30
 80101a2:	3336      	adds	r3, #54	; 0x36
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fe fdb9 	bl	800ed1c <ld_dword>
 80101aa:	4603      	mov	r3, r0
 80101ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80101b0:	4a0a      	ldr	r2, [pc, #40]	; (80101dc <check_fs+0xa4>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d101      	bne.n	80101ba <check_fs+0x82>
 80101b6:	2300      	movs	r3, #0
 80101b8:	e00c      	b.n	80101d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	3330      	adds	r3, #48	; 0x30
 80101be:	3352      	adds	r3, #82	; 0x52
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe fdab 	bl	800ed1c <ld_dword>
 80101c6:	4603      	mov	r3, r0
 80101c8:	4a05      	ldr	r2, [pc, #20]	; (80101e0 <check_fs+0xa8>)
 80101ca:	4293      	cmp	r3, r2
 80101cc:	d101      	bne.n	80101d2 <check_fs+0x9a>
 80101ce:	2300      	movs	r3, #0
 80101d0:	e000      	b.n	80101d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80101d2:	2302      	movs	r3, #2
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	00544146 	.word	0x00544146
 80101e0:	33544146 	.word	0x33544146

080101e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b096      	sub	sp, #88	; 0x58
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	4613      	mov	r3, r2
 80101f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	2200      	movs	r2, #0
 80101f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f7ff ff58 	bl	80100ae <get_ldnumber>
 80101fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010202:	2b00      	cmp	r3, #0
 8010204:	da01      	bge.n	801020a <find_volume+0x26>
 8010206:	230b      	movs	r3, #11
 8010208:	e22d      	b.n	8010666 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801020a:	4aa1      	ldr	r2, [pc, #644]	; (8010490 <find_volume+0x2ac>)
 801020c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801020e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010212:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010216:	2b00      	cmp	r3, #0
 8010218:	d101      	bne.n	801021e <find_volume+0x3a>
 801021a:	230c      	movs	r3, #12
 801021c:	e223      	b.n	8010666 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010222:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010224:	79fb      	ldrb	r3, [r7, #7]
 8010226:	f023 0301 	bic.w	r3, r3, #1
 801022a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d01a      	beq.n	801026a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010236:	785b      	ldrb	r3, [r3, #1]
 8010238:	4618      	mov	r0, r3
 801023a:	f7fe fcb9 	bl	800ebb0 <disk_status>
 801023e:	4603      	mov	r3, r0
 8010240:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010248:	f003 0301 	and.w	r3, r3, #1
 801024c:	2b00      	cmp	r3, #0
 801024e:	d10c      	bne.n	801026a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d007      	beq.n	8010266 <find_volume+0x82>
 8010256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801025a:	f003 0304 	and.w	r3, r3, #4
 801025e:	2b00      	cmp	r3, #0
 8010260:	d001      	beq.n	8010266 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010262:	230a      	movs	r3, #10
 8010264:	e1ff      	b.n	8010666 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8010266:	2300      	movs	r3, #0
 8010268:	e1fd      	b.n	8010666 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	2200      	movs	r2, #0
 801026e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010272:	b2da      	uxtb	r2, r3
 8010274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010276:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027a:	785b      	ldrb	r3, [r3, #1]
 801027c:	4618      	mov	r0, r3
 801027e:	f7fe fcb1 	bl	800ebe4 <disk_initialize>
 8010282:	4603      	mov	r3, r0
 8010284:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010288:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801028c:	f003 0301 	and.w	r3, r3, #1
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010294:	2303      	movs	r3, #3
 8010296:	e1e6      	b.n	8010666 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d007      	beq.n	80102ae <find_volume+0xca>
 801029e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102a2:	f003 0304 	and.w	r3, r3, #4
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80102aa:	230a      	movs	r3, #10
 80102ac:	e1db      	b.n	8010666 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80102ae:	2300      	movs	r3, #0
 80102b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80102b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102b6:	f7ff ff3f 	bl	8010138 <check_fs>
 80102ba:	4603      	mov	r3, r0
 80102bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80102c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d149      	bne.n	801035c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80102c8:	2300      	movs	r3, #0
 80102ca:	643b      	str	r3, [r7, #64]	; 0x40
 80102cc:	e01e      	b.n	801030c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80102ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102d6:	011b      	lsls	r3, r3, #4
 80102d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80102dc:	4413      	add	r3, r2
 80102de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80102e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e2:	3304      	adds	r3, #4
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d006      	beq.n	80102f8 <find_volume+0x114>
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	3308      	adds	r3, #8
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7fe fd14 	bl	800ed1c <ld_dword>
 80102f4:	4602      	mov	r2, r0
 80102f6:	e000      	b.n	80102fa <find_volume+0x116>
 80102f8:	2200      	movs	r2, #0
 80102fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	3358      	adds	r3, #88	; 0x58
 8010300:	443b      	add	r3, r7
 8010302:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010308:	3301      	adds	r3, #1
 801030a:	643b      	str	r3, [r7, #64]	; 0x40
 801030c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801030e:	2b03      	cmp	r3, #3
 8010310:	d9dd      	bls.n	80102ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010312:	2300      	movs	r3, #0
 8010314:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <find_volume+0x13e>
 801031c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801031e:	3b01      	subs	r3, #1
 8010320:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	3358      	adds	r3, #88	; 0x58
 8010328:	443b      	add	r3, r7
 801032a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801032e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010332:	2b00      	cmp	r3, #0
 8010334:	d005      	beq.n	8010342 <find_volume+0x15e>
 8010336:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801033a:	f7ff fefd 	bl	8010138 <check_fs>
 801033e:	4603      	mov	r3, r0
 8010340:	e000      	b.n	8010344 <find_volume+0x160>
 8010342:	2303      	movs	r3, #3
 8010344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801034c:	2b01      	cmp	r3, #1
 801034e:	d905      	bls.n	801035c <find_volume+0x178>
 8010350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010352:	3301      	adds	r3, #1
 8010354:	643b      	str	r3, [r7, #64]	; 0x40
 8010356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010358:	2b03      	cmp	r3, #3
 801035a:	d9e2      	bls.n	8010322 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801035c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010360:	2b04      	cmp	r3, #4
 8010362:	d101      	bne.n	8010368 <find_volume+0x184>
 8010364:	2301      	movs	r3, #1
 8010366:	e17e      	b.n	8010666 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801036c:	2b01      	cmp	r3, #1
 801036e:	d901      	bls.n	8010374 <find_volume+0x190>
 8010370:	230d      	movs	r3, #13
 8010372:	e178      	b.n	8010666 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010376:	3330      	adds	r3, #48	; 0x30
 8010378:	330b      	adds	r3, #11
 801037a:	4618      	mov	r0, r3
 801037c:	f7fe fcb6 	bl	800ecec <ld_word>
 8010380:	4603      	mov	r3, r0
 8010382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010386:	d001      	beq.n	801038c <find_volume+0x1a8>
 8010388:	230d      	movs	r3, #13
 801038a:	e16c      	b.n	8010666 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038e:	3330      	adds	r3, #48	; 0x30
 8010390:	3316      	adds	r3, #22
 8010392:	4618      	mov	r0, r3
 8010394:	f7fe fcaa 	bl	800ecec <ld_word>
 8010398:	4603      	mov	r3, r0
 801039a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801039c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d106      	bne.n	80103b0 <find_volume+0x1cc>
 80103a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a4:	3330      	adds	r3, #48	; 0x30
 80103a6:	3324      	adds	r3, #36	; 0x24
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe fcb7 	bl	800ed1c <ld_dword>
 80103ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80103b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103b4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80103b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80103bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80103c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c2:	789b      	ldrb	r3, [r3, #2]
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	d005      	beq.n	80103d4 <find_volume+0x1f0>
 80103c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ca:	789b      	ldrb	r3, [r3, #2]
 80103cc:	2b02      	cmp	r3, #2
 80103ce:	d001      	beq.n	80103d4 <find_volume+0x1f0>
 80103d0:	230d      	movs	r3, #13
 80103d2:	e148      	b.n	8010666 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80103d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d6:	789b      	ldrb	r3, [r3, #2]
 80103d8:	461a      	mov	r2, r3
 80103da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103dc:	fb02 f303 	mul.w	r3, r2, r3
 80103e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80103e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103e8:	b29a      	uxth	r2, r3
 80103ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80103ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f0:	895b      	ldrh	r3, [r3, #10]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d008      	beq.n	8010408 <find_volume+0x224>
 80103f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f8:	895b      	ldrh	r3, [r3, #10]
 80103fa:	461a      	mov	r2, r3
 80103fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103fe:	895b      	ldrh	r3, [r3, #10]
 8010400:	3b01      	subs	r3, #1
 8010402:	4013      	ands	r3, r2
 8010404:	2b00      	cmp	r3, #0
 8010406:	d001      	beq.n	801040c <find_volume+0x228>
 8010408:	230d      	movs	r3, #13
 801040a:	e12c      	b.n	8010666 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	3330      	adds	r3, #48	; 0x30
 8010410:	3311      	adds	r3, #17
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe fc6a 	bl	800ecec <ld_word>
 8010418:	4603      	mov	r3, r0
 801041a:	461a      	mov	r2, r3
 801041c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801041e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010422:	891b      	ldrh	r3, [r3, #8]
 8010424:	f003 030f 	and.w	r3, r3, #15
 8010428:	b29b      	uxth	r3, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	d001      	beq.n	8010432 <find_volume+0x24e>
 801042e:	230d      	movs	r3, #13
 8010430:	e119      	b.n	8010666 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010434:	3330      	adds	r3, #48	; 0x30
 8010436:	3313      	adds	r3, #19
 8010438:	4618      	mov	r0, r3
 801043a:	f7fe fc57 	bl	800ecec <ld_word>
 801043e:	4603      	mov	r3, r0
 8010440:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010444:	2b00      	cmp	r3, #0
 8010446:	d106      	bne.n	8010456 <find_volume+0x272>
 8010448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044a:	3330      	adds	r3, #48	; 0x30
 801044c:	3320      	adds	r3, #32
 801044e:	4618      	mov	r0, r3
 8010450:	f7fe fc64 	bl	800ed1c <ld_dword>
 8010454:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010458:	3330      	adds	r3, #48	; 0x30
 801045a:	330e      	adds	r3, #14
 801045c:	4618      	mov	r0, r3
 801045e:	f7fe fc45 	bl	800ecec <ld_word>
 8010462:	4603      	mov	r3, r0
 8010464:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010466:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010468:	2b00      	cmp	r3, #0
 801046a:	d101      	bne.n	8010470 <find_volume+0x28c>
 801046c:	230d      	movs	r3, #13
 801046e:	e0fa      	b.n	8010666 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010470:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010474:	4413      	add	r3, r2
 8010476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010478:	8912      	ldrh	r2, [r2, #8]
 801047a:	0912      	lsrs	r2, r2, #4
 801047c:	b292      	uxth	r2, r2
 801047e:	4413      	add	r3, r2
 8010480:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010486:	429a      	cmp	r2, r3
 8010488:	d204      	bcs.n	8010494 <find_volume+0x2b0>
 801048a:	230d      	movs	r3, #13
 801048c:	e0eb      	b.n	8010666 <find_volume+0x482>
 801048e:	bf00      	nop
 8010490:	20003850 	.word	0x20003850
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801049c:	8952      	ldrh	r2, [r2, #10]
 801049e:	fbb3 f3f2 	udiv	r3, r3, r2
 80104a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80104a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d101      	bne.n	80104ae <find_volume+0x2ca>
 80104aa:	230d      	movs	r3, #13
 80104ac:	e0db      	b.n	8010666 <find_volume+0x482>
		fmt = FS_FAT32;
 80104ae:	2303      	movs	r3, #3
 80104b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80104b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d802      	bhi.n	80104c4 <find_volume+0x2e0>
 80104be:	2302      	movs	r3, #2
 80104c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80104c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d802      	bhi.n	80104d4 <find_volume+0x2f0>
 80104ce:	2301      	movs	r3, #1
 80104d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80104d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d6:	1c9a      	adds	r2, r3, #2
 80104d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104da:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80104dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104e0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80104e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80104e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104e6:	441a      	add	r2, r3
 80104e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80104ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f0:	441a      	add	r2, r3
 80104f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80104f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80104fa:	2b03      	cmp	r3, #3
 80104fc:	d11e      	bne.n	801053c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80104fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010500:	3330      	adds	r3, #48	; 0x30
 8010502:	332a      	adds	r3, #42	; 0x2a
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe fbf1 	bl	800ecec <ld_word>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d001      	beq.n	8010514 <find_volume+0x330>
 8010510:	230d      	movs	r3, #13
 8010512:	e0a8      	b.n	8010666 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010516:	891b      	ldrh	r3, [r3, #8]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d001      	beq.n	8010520 <find_volume+0x33c>
 801051c:	230d      	movs	r3, #13
 801051e:	e0a2      	b.n	8010666 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010522:	3330      	adds	r3, #48	; 0x30
 8010524:	332c      	adds	r3, #44	; 0x2c
 8010526:	4618      	mov	r0, r3
 8010528:	f7fe fbf8 	bl	800ed1c <ld_dword>
 801052c:	4602      	mov	r2, r0
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010534:	695b      	ldr	r3, [r3, #20]
 8010536:	009b      	lsls	r3, r3, #2
 8010538:	647b      	str	r3, [r7, #68]	; 0x44
 801053a:	e01f      	b.n	801057c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801053c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053e:	891b      	ldrh	r3, [r3, #8]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d101      	bne.n	8010548 <find_volume+0x364>
 8010544:	230d      	movs	r3, #13
 8010546:	e08e      	b.n	8010666 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054a:	6a1a      	ldr	r2, [r3, #32]
 801054c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801054e:	441a      	add	r2, r3
 8010550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010552:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010554:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010558:	2b02      	cmp	r3, #2
 801055a:	d103      	bne.n	8010564 <find_volume+0x380>
 801055c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055e:	695b      	ldr	r3, [r3, #20]
 8010560:	005b      	lsls	r3, r3, #1
 8010562:	e00a      	b.n	801057a <find_volume+0x396>
 8010564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010566:	695a      	ldr	r2, [r3, #20]
 8010568:	4613      	mov	r3, r2
 801056a:	005b      	lsls	r3, r3, #1
 801056c:	4413      	add	r3, r2
 801056e:	085a      	lsrs	r2, r3, #1
 8010570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010572:	695b      	ldr	r3, [r3, #20]
 8010574:	f003 0301 	and.w	r3, r3, #1
 8010578:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801057a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057e:	699a      	ldr	r2, [r3, #24]
 8010580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010582:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010586:	0a5b      	lsrs	r3, r3, #9
 8010588:	429a      	cmp	r2, r3
 801058a:	d201      	bcs.n	8010590 <find_volume+0x3ac>
 801058c:	230d      	movs	r3, #13
 801058e:	e06a      	b.n	8010666 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010596:	611a      	str	r2, [r3, #16]
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	691a      	ldr	r2, [r3, #16]
 801059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80105a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a2:	2280      	movs	r2, #128	; 0x80
 80105a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80105a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105aa:	2b03      	cmp	r3, #3
 80105ac:	d149      	bne.n	8010642 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b0:	3330      	adds	r3, #48	; 0x30
 80105b2:	3330      	adds	r3, #48	; 0x30
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fe fb99 	bl	800ecec <ld_word>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d140      	bne.n	8010642 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80105c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c2:	3301      	adds	r3, #1
 80105c4:	4619      	mov	r1, r3
 80105c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105c8:	f7fe fe40 	bl	800f24c <move_window>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d137      	bne.n	8010642 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80105d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d4:	2200      	movs	r2, #0
 80105d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	3330      	adds	r3, #48	; 0x30
 80105dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fe fb83 	bl	800ecec <ld_word>
 80105e6:	4603      	mov	r3, r0
 80105e8:	461a      	mov	r2, r3
 80105ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d127      	bne.n	8010642 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80105f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f4:	3330      	adds	r3, #48	; 0x30
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fe fb90 	bl	800ed1c <ld_dword>
 80105fc:	4603      	mov	r3, r0
 80105fe:	4a1c      	ldr	r2, [pc, #112]	; (8010670 <find_volume+0x48c>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d11e      	bne.n	8010642 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	3330      	adds	r3, #48	; 0x30
 8010608:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe fb85 	bl	800ed1c <ld_dword>
 8010612:	4603      	mov	r3, r0
 8010614:	4a17      	ldr	r2, [pc, #92]	; (8010674 <find_volume+0x490>)
 8010616:	4293      	cmp	r3, r2
 8010618:	d113      	bne.n	8010642 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	3330      	adds	r3, #48	; 0x30
 801061e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010622:	4618      	mov	r0, r3
 8010624:	f7fe fb7a 	bl	800ed1c <ld_dword>
 8010628:	4602      	mov	r2, r0
 801062a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801062e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010630:	3330      	adds	r3, #48	; 0x30
 8010632:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010636:	4618      	mov	r0, r3
 8010638:	f7fe fb70 	bl	800ed1c <ld_dword>
 801063c:	4602      	mov	r2, r0
 801063e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010640:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010644:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010648:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801064a:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <find_volume+0x494>)
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	3301      	adds	r3, #1
 8010650:	b29a      	uxth	r2, r3
 8010652:	4b09      	ldr	r3, [pc, #36]	; (8010678 <find_volume+0x494>)
 8010654:	801a      	strh	r2, [r3, #0]
 8010656:	4b08      	ldr	r3, [pc, #32]	; (8010678 <find_volume+0x494>)
 8010658:	881a      	ldrh	r2, [r3, #0]
 801065a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801065e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010660:	f7fe fd8c 	bl	800f17c <clear_lock>
#endif
	return FR_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	3758      	adds	r7, #88	; 0x58
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	41615252 	.word	0x41615252
 8010674:	61417272 	.word	0x61417272
 8010678:	20003854 	.word	0x20003854

0801067c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010686:	2309      	movs	r3, #9
 8010688:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d01c      	beq.n	80106ca <validate+0x4e>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d018      	beq.n	80106ca <validate+0x4e>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d013      	beq.n	80106ca <validate+0x4e>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	889a      	ldrh	r2, [r3, #4]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	88db      	ldrh	r3, [r3, #6]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d10c      	bne.n	80106ca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	785b      	ldrb	r3, [r3, #1]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe fa7a 	bl	800ebb0 <disk_status>
 80106bc:	4603      	mov	r3, r0
 80106be:	f003 0301 	and.w	r3, r3, #1
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d101      	bne.n	80106ca <validate+0x4e>
			res = FR_OK;
 80106c6:	2300      	movs	r3, #0
 80106c8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d102      	bne.n	80106d6 <validate+0x5a>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	e000      	b.n	80106d8 <validate+0x5c>
 80106d6:	2300      	movs	r3, #0
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	6013      	str	r3, [r2, #0]
	return res;
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b088      	sub	sp, #32
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	4613      	mov	r3, r2
 80106f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80106fa:	f107 0310 	add.w	r3, r7, #16
 80106fe:	4618      	mov	r0, r3
 8010700:	f7ff fcd5 	bl	80100ae <get_ldnumber>
 8010704:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	2b00      	cmp	r3, #0
 801070a:	da01      	bge.n	8010710 <f_mount+0x28>
 801070c:	230b      	movs	r3, #11
 801070e:	e02b      	b.n	8010768 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010710:	4a17      	ldr	r2, [pc, #92]	; (8010770 <f_mount+0x88>)
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010718:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d005      	beq.n	801072c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010720:	69b8      	ldr	r0, [r7, #24]
 8010722:	f7fe fd2b 	bl	800f17c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	2200      	movs	r2, #0
 801072a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2200      	movs	r2, #0
 8010736:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010738:	68fa      	ldr	r2, [r7, #12]
 801073a:	490d      	ldr	r1, [pc, #52]	; (8010770 <f_mount+0x88>)
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d002      	beq.n	801074e <f_mount+0x66>
 8010748:	79fb      	ldrb	r3, [r7, #7]
 801074a:	2b01      	cmp	r3, #1
 801074c:	d001      	beq.n	8010752 <f_mount+0x6a>
 801074e:	2300      	movs	r3, #0
 8010750:	e00a      	b.n	8010768 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010752:	f107 010c 	add.w	r1, r7, #12
 8010756:	f107 0308 	add.w	r3, r7, #8
 801075a:	2200      	movs	r2, #0
 801075c:	4618      	mov	r0, r3
 801075e:	f7ff fd41 	bl	80101e4 <find_volume>
 8010762:	4603      	mov	r3, r0
 8010764:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010766:	7dfb      	ldrb	r3, [r7, #23]
}
 8010768:	4618      	mov	r0, r3
 801076a:	3720      	adds	r7, #32
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	20003850 	.word	0x20003850

08010774 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b098      	sub	sp, #96	; 0x60
 8010778:	af00      	add	r7, sp, #0
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	60b9      	str	r1, [r7, #8]
 801077e:	4613      	mov	r3, r2
 8010780:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <f_open+0x18>
 8010788:	2309      	movs	r3, #9
 801078a:	e1ad      	b.n	8010ae8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010792:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010794:	79fa      	ldrb	r2, [r7, #7]
 8010796:	f107 0110 	add.w	r1, r7, #16
 801079a:	f107 0308 	add.w	r3, r7, #8
 801079e:	4618      	mov	r0, r3
 80107a0:	f7ff fd20 	bl	80101e4 <find_volume>
 80107a4:	4603      	mov	r3, r0
 80107a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80107aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f040 8191 	bne.w	8010ad6 <f_open+0x362>
		dj.obj.fs = fs;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80107b8:	68ba      	ldr	r2, [r7, #8]
 80107ba:	f107 0314 	add.w	r3, r7, #20
 80107be:	4611      	mov	r1, r2
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ff fc03 	bl	800ffcc <follow_path>
 80107c6:	4603      	mov	r3, r0
 80107c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80107cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d11a      	bne.n	801080a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80107d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80107d8:	b25b      	sxtb	r3, r3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	da03      	bge.n	80107e6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80107de:	2306      	movs	r3, #6
 80107e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80107e4:	e011      	b.n	801080a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	f023 0301 	bic.w	r3, r3, #1
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	bf14      	ite	ne
 80107f0:	2301      	movne	r3, #1
 80107f2:	2300      	moveq	r3, #0
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	461a      	mov	r2, r3
 80107f8:	f107 0314 	add.w	r3, r7, #20
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fe fb74 	bl	800eeec <chk_lock>
 8010804:	4603      	mov	r3, r0
 8010806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801080a:	79fb      	ldrb	r3, [r7, #7]
 801080c:	f003 031c 	and.w	r3, r3, #28
 8010810:	2b00      	cmp	r3, #0
 8010812:	d07f      	beq.n	8010914 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010814:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010818:	2b00      	cmp	r3, #0
 801081a:	d017      	beq.n	801084c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801081c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010820:	2b04      	cmp	r3, #4
 8010822:	d10e      	bne.n	8010842 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010824:	f7fe fbbe 	bl	800efa4 <enq_lock>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	d006      	beq.n	801083c <f_open+0xc8>
 801082e:	f107 0314 	add.w	r3, r7, #20
 8010832:	4618      	mov	r0, r3
 8010834:	f7ff faa5 	bl	800fd82 <dir_register>
 8010838:	4603      	mov	r3, r0
 801083a:	e000      	b.n	801083e <f_open+0xca>
 801083c:	2312      	movs	r3, #18
 801083e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	f043 0308 	orr.w	r3, r3, #8
 8010848:	71fb      	strb	r3, [r7, #7]
 801084a:	e010      	b.n	801086e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801084c:	7ebb      	ldrb	r3, [r7, #26]
 801084e:	f003 0311 	and.w	r3, r3, #17
 8010852:	2b00      	cmp	r3, #0
 8010854:	d003      	beq.n	801085e <f_open+0xea>
					res = FR_DENIED;
 8010856:	2307      	movs	r3, #7
 8010858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801085c:	e007      	b.n	801086e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801085e:	79fb      	ldrb	r3, [r7, #7]
 8010860:	f003 0304 	and.w	r3, r3, #4
 8010864:	2b00      	cmp	r3, #0
 8010866:	d002      	beq.n	801086e <f_open+0xfa>
 8010868:	2308      	movs	r3, #8
 801086a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801086e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010872:	2b00      	cmp	r3, #0
 8010874:	d168      	bne.n	8010948 <f_open+0x1d4>
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	f003 0308 	and.w	r3, r3, #8
 801087c:	2b00      	cmp	r3, #0
 801087e:	d063      	beq.n	8010948 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010880:	f7fb f888 	bl	800b994 <get_fattime>
 8010884:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010888:	330e      	adds	r3, #14
 801088a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801088c:	4618      	mov	r0, r3
 801088e:	f7fe fa83 	bl	800ed98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	3316      	adds	r3, #22
 8010896:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010898:	4618      	mov	r0, r3
 801089a:	f7fe fa7d 	bl	800ed98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a0:	330b      	adds	r3, #11
 80108a2:	2220      	movs	r2, #32
 80108a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108aa:	4611      	mov	r1, r2
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7ff f9d4 	bl	800fc5a <ld_clust>
 80108b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80108b8:	2200      	movs	r2, #0
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7ff f9ec 	bl	800fc98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80108c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c2:	331c      	adds	r3, #28
 80108c4:	2100      	movs	r1, #0
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7fe fa66 	bl	800ed98 <st_dword>
					fs->wflag = 1;
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	2201      	movs	r2, #1
 80108d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80108d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d037      	beq.n	8010948 <f_open+0x1d4>
						dw = fs->winsect;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80108de:	f107 0314 	add.w	r3, r7, #20
 80108e2:	2200      	movs	r2, #0
 80108e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80108e6:	4618      	mov	r0, r3
 80108e8:	f7fe feff 	bl	800f6ea <remove_chain>
 80108ec:	4603      	mov	r3, r0
 80108ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80108f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d126      	bne.n	8010948 <f_open+0x1d4>
							res = move_window(fs, dw);
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fe fca4 	bl	800f24c <move_window>
 8010904:	4603      	mov	r3, r0
 8010906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801090e:	3a01      	subs	r2, #1
 8010910:	60da      	str	r2, [r3, #12]
 8010912:	e019      	b.n	8010948 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010918:	2b00      	cmp	r3, #0
 801091a:	d115      	bne.n	8010948 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801091c:	7ebb      	ldrb	r3, [r7, #26]
 801091e:	f003 0310 	and.w	r3, r3, #16
 8010922:	2b00      	cmp	r3, #0
 8010924:	d003      	beq.n	801092e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010926:	2304      	movs	r3, #4
 8010928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801092c:	e00c      	b.n	8010948 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	f003 0302 	and.w	r3, r3, #2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d007      	beq.n	8010948 <f_open+0x1d4>
 8010938:	7ebb      	ldrb	r3, [r7, #26]
 801093a:	f003 0301 	and.w	r3, r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <f_open+0x1d4>
						res = FR_DENIED;
 8010942:	2307      	movs	r3, #7
 8010944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801094c:	2b00      	cmp	r3, #0
 801094e:	d128      	bne.n	80109a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010950:	79fb      	ldrb	r3, [r7, #7]
 8010952:	f003 0308 	and.w	r3, r3, #8
 8010956:	2b00      	cmp	r3, #0
 8010958:	d003      	beq.n	8010962 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010960:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801096a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010970:	79fb      	ldrb	r3, [r7, #7]
 8010972:	f023 0301 	bic.w	r3, r3, #1
 8010976:	2b00      	cmp	r3, #0
 8010978:	bf14      	ite	ne
 801097a:	2301      	movne	r3, #1
 801097c:	2300      	moveq	r3, #0
 801097e:	b2db      	uxtb	r3, r3
 8010980:	461a      	mov	r2, r3
 8010982:	f107 0314 	add.w	r3, r7, #20
 8010986:	4611      	mov	r1, r2
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe fb2d 	bl	800efe8 <inc_lock>
 801098e:	4602      	mov	r2, r0
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	691b      	ldr	r3, [r3, #16]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d102      	bne.n	80109a2 <f_open+0x22e>
 801099c:	2302      	movs	r3, #2
 801099e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80109a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f040 8095 	bne.w	8010ad6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109b0:	4611      	mov	r1, r2
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7ff f951 	bl	800fc5a <ld_clust>
 80109b8:	4602      	mov	r2, r0
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80109be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c0:	331c      	adds	r3, #28
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fe f9aa 	bl	800ed1c <ld_dword>
 80109c8:	4602      	mov	r2, r0
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80109d4:	693a      	ldr	r2, [r7, #16]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	88da      	ldrh	r2, [r3, #6]
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	79fa      	ldrb	r2, [r7, #7]
 80109e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2200      	movs	r2, #0
 80109ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2200      	movs	r2, #0
 80109f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	2200      	movs	r2, #0
 80109f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	3330      	adds	r3, #48	; 0x30
 80109fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a02:	2100      	movs	r1, #0
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7fe fa14 	bl	800ee32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	f003 0320 	and.w	r3, r3, #32
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d060      	beq.n	8010ad6 <f_open+0x362>
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	68db      	ldr	r3, [r3, #12]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d05c      	beq.n	8010ad6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	68da      	ldr	r2, [r3, #12]
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010a24:	693b      	ldr	r3, [r7, #16]
 8010a26:	895b      	ldrh	r3, [r3, #10]
 8010a28:	025b      	lsls	r3, r3, #9
 8010a2a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	657b      	str	r3, [r7, #84]	; 0x54
 8010a38:	e016      	b.n	8010a68 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fe fcbf 	bl	800f3c2 <get_fat>
 8010a44:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d802      	bhi.n	8010a52 <f_open+0x2de>
 8010a4c:	2302      	movs	r3, #2
 8010a4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a58:	d102      	bne.n	8010a60 <f_open+0x2ec>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010a60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a64:	1ad3      	subs	r3, r2, r3
 8010a66:	657b      	str	r3, [r7, #84]	; 0x54
 8010a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <f_open+0x304>
 8010a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d8e0      	bhi.n	8010a3a <f_open+0x2c6>
				}
				fp->clust = clst;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010a7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010a7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d127      	bne.n	8010ad6 <f_open+0x362>
 8010a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d022      	beq.n	8010ad6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7fe fc75 	bl	800f384 <clust2sect>
 8010a9a:	6478      	str	r0, [r7, #68]	; 0x44
 8010a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d103      	bne.n	8010aaa <f_open+0x336>
						res = FR_INT_ERR;
 8010aa2:	2302      	movs	r3, #2
 8010aa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010aa8:	e015      	b.n	8010ad6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aac:	0a5a      	lsrs	r2, r3, #9
 8010aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ab0:	441a      	add	r2, r3
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	7858      	ldrb	r0, [r3, #1]
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	6a1a      	ldr	r2, [r3, #32]
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	f7fe f8b3 	bl	800ec30 <disk_read>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d002      	beq.n	8010ad6 <f_open+0x362>
 8010ad0:	2301      	movs	r3, #1
 8010ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d002      	beq.n	8010ae4 <f_open+0x370>
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3760      	adds	r7, #96	; 0x60
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}

08010af0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b08c      	sub	sp, #48	; 0x30
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
 8010afc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	2200      	movs	r2, #0
 8010b06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f107 0210 	add.w	r2, r7, #16
 8010b0e:	4611      	mov	r1, r2
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fdb3 	bl	801067c <validate>
 8010b16:	4603      	mov	r3, r0
 8010b18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010b1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d107      	bne.n	8010b34 <f_write+0x44>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	7d5b      	ldrb	r3, [r3, #21]
 8010b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d002      	beq.n	8010b3a <f_write+0x4a>
 8010b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b38:	e14b      	b.n	8010dd2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	7d1b      	ldrb	r3, [r3, #20]
 8010b3e:	f003 0302 	and.w	r3, r3, #2
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <f_write+0x5a>
 8010b46:	2307      	movs	r3, #7
 8010b48:	e143      	b.n	8010dd2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	699a      	ldr	r2, [r3, #24]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	441a      	add	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	699b      	ldr	r3, [r3, #24]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	f080 812d 	bcs.w	8010db6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	43db      	mvns	r3, r3
 8010b62:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010b64:	e127      	b.n	8010db6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	f040 80e3 	bne.w	8010d3a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	699b      	ldr	r3, [r3, #24]
 8010b78:	0a5b      	lsrs	r3, r3, #9
 8010b7a:	693a      	ldr	r2, [r7, #16]
 8010b7c:	8952      	ldrh	r2, [r2, #10]
 8010b7e:	3a01      	subs	r2, #1
 8010b80:	4013      	ands	r3, r2
 8010b82:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d143      	bne.n	8010c12 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d10c      	bne.n	8010bac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d11a      	bne.n	8010bd4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fe fe06 	bl	800f7b4 <create_chain>
 8010ba8:	62b8      	str	r0, [r7, #40]	; 0x28
 8010baa:	e013      	b.n	8010bd4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d007      	beq.n	8010bc4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	699b      	ldr	r3, [r3, #24]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	68f8      	ldr	r0, [r7, #12]
 8010bbc:	f7fe fe92 	bl	800f8e4 <clmt_clust>
 8010bc0:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bc2:	e007      	b.n	8010bd4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010bc4:	68fa      	ldr	r2, [r7, #12]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	69db      	ldr	r3, [r3, #28]
 8010bca:	4619      	mov	r1, r3
 8010bcc:	4610      	mov	r0, r2
 8010bce:	f7fe fdf1 	bl	800f7b4 <create_chain>
 8010bd2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f000 80f2 	beq.w	8010dc0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d104      	bne.n	8010bec <f_write+0xfc>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2202      	movs	r2, #2
 8010be6:	755a      	strb	r2, [r3, #21]
 8010be8:	2302      	movs	r3, #2
 8010bea:	e0f2      	b.n	8010dd2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010bf2:	d104      	bne.n	8010bfe <f_write+0x10e>
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	755a      	strb	r2, [r3, #21]
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e0e9      	b.n	8010dd2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c02:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d102      	bne.n	8010c12 <f_write+0x122>
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c10:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	7d1b      	ldrb	r3, [r3, #20]
 8010c16:	b25b      	sxtb	r3, r3
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	da18      	bge.n	8010c4e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	7858      	ldrb	r0, [r3, #1]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6a1a      	ldr	r2, [r3, #32]
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	f7fe f820 	bl	800ec70 <disk_write>
 8010c30:	4603      	mov	r3, r0
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d004      	beq.n	8010c40 <f_write+0x150>
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	755a      	strb	r2, [r3, #21]
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e0c8      	b.n	8010dd2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	7d1b      	ldrb	r3, [r3, #20]
 8010c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c48:	b2da      	uxtb	r2, r3
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c4e:	693a      	ldr	r2, [r7, #16]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	69db      	ldr	r3, [r3, #28]
 8010c54:	4619      	mov	r1, r3
 8010c56:	4610      	mov	r0, r2
 8010c58:	f7fe fb94 	bl	800f384 <clust2sect>
 8010c5c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d104      	bne.n	8010c6e <f_write+0x17e>
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2202      	movs	r2, #2
 8010c68:	755a      	strb	r2, [r3, #21]
 8010c6a:	2302      	movs	r3, #2
 8010c6c:	e0b1      	b.n	8010dd2 <f_write+0x2e2>
			sect += csect;
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	4413      	add	r3, r2
 8010c74:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	0a5b      	lsrs	r3, r3, #9
 8010c7a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c7c:	6a3b      	ldr	r3, [r7, #32]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d03c      	beq.n	8010cfc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c82:	69ba      	ldr	r2, [r7, #24]
 8010c84:	6a3b      	ldr	r3, [r7, #32]
 8010c86:	4413      	add	r3, r2
 8010c88:	693a      	ldr	r2, [r7, #16]
 8010c8a:	8952      	ldrh	r2, [r2, #10]
 8010c8c:	4293      	cmp	r3, r2
 8010c8e:	d905      	bls.n	8010c9c <f_write+0x1ac>
					cc = fs->csize - csect;
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	895b      	ldrh	r3, [r3, #10]
 8010c94:	461a      	mov	r2, r3
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	7858      	ldrb	r0, [r3, #1]
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	697a      	ldr	r2, [r7, #20]
 8010ca4:	69f9      	ldr	r1, [r7, #28]
 8010ca6:	f7fd ffe3 	bl	800ec70 <disk_write>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d004      	beq.n	8010cba <f_write+0x1ca>
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	755a      	strb	r2, [r3, #21]
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	e08b      	b.n	8010dd2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	6a1a      	ldr	r2, [r3, #32]
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	6a3a      	ldr	r2, [r7, #32]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d915      	bls.n	8010cf4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6a1a      	ldr	r2, [r3, #32]
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	025b      	lsls	r3, r3, #9
 8010cd8:	69fa      	ldr	r2, [r7, #28]
 8010cda:	4413      	add	r3, r2
 8010cdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	f7fe f885 	bl	800edf0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	7d1b      	ldrb	r3, [r3, #20]
 8010cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	025b      	lsls	r3, r3, #9
 8010cf8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010cfa:	e03f      	b.n	8010d7c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	6a1b      	ldr	r3, [r3, #32]
 8010d00:	697a      	ldr	r2, [r7, #20]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d016      	beq.n	8010d34 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	699a      	ldr	r2, [r3, #24]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d210      	bcs.n	8010d34 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	7858      	ldrb	r0, [r3, #1]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	697a      	ldr	r2, [r7, #20]
 8010d20:	f7fd ff86 	bl	800ec30 <disk_read>
 8010d24:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d004      	beq.n	8010d34 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	755a      	strb	r2, [r3, #21]
 8010d30:	2301      	movs	r3, #1
 8010d32:	e04e      	b.n	8010dd2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	697a      	ldr	r2, [r7, #20]
 8010d38:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	699b      	ldr	r3, [r3, #24]
 8010d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d42:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010d46:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d901      	bls.n	8010d54 <f_write+0x264>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	699b      	ldr	r3, [r3, #24]
 8010d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d62:	4413      	add	r3, r2
 8010d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d66:	69f9      	ldr	r1, [r7, #28]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fe f841 	bl	800edf0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	7d1b      	ldrb	r3, [r3, #20]
 8010d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010d7c:	69fa      	ldr	r2, [r7, #28]
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d80:	4413      	add	r3, r2
 8010d82:	61fb      	str	r3, [r7, #28]
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	699a      	ldr	r2, [r3, #24]
 8010d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8a:	441a      	add	r2, r3
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	619a      	str	r2, [r3, #24]
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	68da      	ldr	r2, [r3, #12]
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	699b      	ldr	r3, [r3, #24]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	bf38      	it	cc
 8010d9c:	461a      	movcc	r2, r3
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	60da      	str	r2, [r3, #12]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da8:	441a      	add	r2, r3
 8010daa:	683b      	ldr	r3, [r7, #0]
 8010dac:	601a      	str	r2, [r3, #0]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	1ad3      	subs	r3, r2, r3
 8010db4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	f47f aed4 	bne.w	8010b66 <f_write+0x76>
 8010dbe:	e000      	b.n	8010dc2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010dc0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	7d1b      	ldrb	r3, [r3, #20]
 8010dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dca:	b2da      	uxtb	r2, r3
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3730      	adds	r7, #48	; 0x30
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}

08010dda <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010dda:	b580      	push	{r7, lr}
 8010ddc:	b086      	sub	sp, #24
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f107 0208 	add.w	r2, r7, #8
 8010de8:	4611      	mov	r1, r2
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7ff fc46 	bl	801067c <validate>
 8010df0:	4603      	mov	r3, r0
 8010df2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d168      	bne.n	8010ecc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	7d1b      	ldrb	r3, [r3, #20]
 8010dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d062      	beq.n	8010ecc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	7d1b      	ldrb	r3, [r3, #20]
 8010e0a:	b25b      	sxtb	r3, r3
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	da15      	bge.n	8010e3c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	7858      	ldrb	r0, [r3, #1]
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6a1a      	ldr	r2, [r3, #32]
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f7fd ff26 	bl	800ec70 <disk_write>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <f_sync+0x54>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	e04f      	b.n	8010ece <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	7d1b      	ldrb	r3, [r3, #20]
 8010e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e36:	b2da      	uxtb	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e3c:	f7fa fdaa 	bl	800b994 <get_fattime>
 8010e40:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010e42:	68ba      	ldr	r2, [r7, #8]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e48:	4619      	mov	r1, r3
 8010e4a:	4610      	mov	r0, r2
 8010e4c:	f7fe f9fe 	bl	800f24c <move_window>
 8010e50:	4603      	mov	r3, r0
 8010e52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e54:	7dfb      	ldrb	r3, [r7, #23]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d138      	bne.n	8010ecc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	330b      	adds	r3, #11
 8010e64:	781a      	ldrb	r2, [r3, #0]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	330b      	adds	r3, #11
 8010e6a:	f042 0220 	orr.w	r2, r2, #32
 8010e6e:	b2d2      	uxtb	r2, r2
 8010e70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6818      	ldr	r0, [r3, #0]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	689b      	ldr	r3, [r3, #8]
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	68f9      	ldr	r1, [r7, #12]
 8010e7e:	f7fe ff0b 	bl	800fc98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f103 021c 	add.w	r2, r3, #28
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	4610      	mov	r0, r2
 8010e90:	f7fd ff82 	bl	800ed98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	3316      	adds	r3, #22
 8010e98:	6939      	ldr	r1, [r7, #16]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fd ff7c 	bl	800ed98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	3312      	adds	r3, #18
 8010ea4:	2100      	movs	r1, #0
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fd ff5b 	bl	800ed62 <st_word>
					fs->wflag = 1;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7fe f9f7 	bl	800f2a8 <sync_fs>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	7d1b      	ldrb	r3, [r3, #20]
 8010ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ec6:	b2da      	uxtb	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3718      	adds	r7, #24
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}

08010ed6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010ed6:	b580      	push	{r7, lr}
 8010ed8:	b084      	sub	sp, #16
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ff ff7b 	bl	8010dda <f_sync>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010ee8:	7bfb      	ldrb	r3, [r7, #15]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d118      	bne.n	8010f20 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f107 0208 	add.w	r2, r7, #8
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7ff fbc0 	bl	801067c <validate>
 8010efc:	4603      	mov	r3, r0
 8010efe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f00:	7bfb      	ldrb	r3, [r7, #15]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d10c      	bne.n	8010f20 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f7fe f8fa 	bl	800f104 <dec_lock>
 8010f10:	4603      	mov	r3, r0
 8010f12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010f14:	7bfb      	ldrb	r3, [r7, #15]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d102      	bne.n	8010f20 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3710      	adds	r7, #16
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010f2a:	b580      	push	{r7, lr}
 8010f2c:	b090      	sub	sp, #64	; 0x40
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
 8010f32:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8010f34:	f107 010c 	add.w	r1, r7, #12
 8010f38:	1d3b      	adds	r3, r7, #4
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7ff f951 	bl	80101e4 <find_volume>
 8010f42:	4603      	mov	r3, r0
 8010f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010f48:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d11f      	bne.n	8010f90 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	f107 030c 	add.w	r3, r7, #12
 8010f56:	4611      	mov	r1, r2
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7ff f837 	bl	800ffcc <follow_path>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8010f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d111      	bne.n	8010f90 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010f6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010f70:	b25b      	sxtb	r3, r3
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	da03      	bge.n	8010f7e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8010f76:	2306      	movs	r3, #6
 8010f78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010f7c:	e008      	b.n	8010f90 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d005      	beq.n	8010f90 <f_stat+0x66>
 8010f84:	f107 030c 	add.w	r3, r7, #12
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe ff2b 	bl	800fde6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010f90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3740      	adds	r7, #64	; 0x40
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b096      	sub	sp, #88	; 0x58
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010fa4:	f107 0108 	add.w	r1, r7, #8
 8010fa8:	1d3b      	adds	r3, r7, #4
 8010faa:	2202      	movs	r2, #2
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7ff f919 	bl	80101e4 <find_volume>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8010fbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f040 80ec 	bne.w	801119e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	f107 030c 	add.w	r3, r7, #12
 8010fcc:	4611      	mov	r1, r2
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe fffc 	bl	800ffcc <follow_path>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d102      	bne.n	8010fe8 <f_mkdir+0x4c>
 8010fe2:	2308      	movs	r3, #8
 8010fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fec:	2b04      	cmp	r3, #4
 8010fee:	f040 80d6 	bne.w	801119e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010ff2:	f107 030c 	add.w	r3, r7, #12
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f7fe fbdb 	bl	800f7b4 <create_chain>
 8010ffe:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	895b      	ldrh	r3, [r3, #10]
 8011004:	025b      	lsls	r3, r3, #9
 8011006:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011008:	2300      	movs	r3, #0
 801100a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801100e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011010:	2b00      	cmp	r3, #0
 8011012:	d102      	bne.n	801101a <f_mkdir+0x7e>
 8011014:	2307      	movs	r3, #7
 8011016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801101a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801101c:	2b01      	cmp	r3, #1
 801101e:	d102      	bne.n	8011026 <f_mkdir+0x8a>
 8011020:	2302      	movs	r3, #2
 8011022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801102c:	d102      	bne.n	8011034 <f_mkdir+0x98>
 801102e:	2301      	movs	r3, #1
 8011030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011038:	2b00      	cmp	r3, #0
 801103a:	d106      	bne.n	801104a <f_mkdir+0xae>
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	4618      	mov	r0, r3
 8011040:	f7fe f8c0 	bl	800f1c4 <sync_window>
 8011044:	4603      	mov	r3, r0
 8011046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 801104a:	f7fa fca3 	bl	800b994 <get_fattime>
 801104e:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011054:	2b00      	cmp	r3, #0
 8011056:	d16a      	bne.n	801112e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801105c:	4618      	mov	r0, r3
 801105e:	f7fe f991 	bl	800f384 <clust2sect>
 8011062:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	3330      	adds	r3, #48	; 0x30
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801106a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801106e:	2100      	movs	r1, #0
 8011070:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011072:	f7fd fede 	bl	800ee32 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011076:	220b      	movs	r2, #11
 8011078:	2120      	movs	r1, #32
 801107a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801107c:	f7fd fed9 	bl	800ee32 <mem_set>
					dir[DIR_Name] = '.';
 8011080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011082:	222e      	movs	r2, #46	; 0x2e
 8011084:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011088:	330b      	adds	r3, #11
 801108a:	2210      	movs	r2, #16
 801108c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801108e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011090:	3316      	adds	r3, #22
 8011092:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011094:	4618      	mov	r0, r3
 8011096:	f7fd fe7f 	bl	800ed98 <st_dword>
					st_clust(fs, dir, dcl);
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801109e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fe fdf9 	bl	800fc98 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80110a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110a8:	3320      	adds	r3, #32
 80110aa:	2220      	movs	r2, #32
 80110ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fd fe9e 	bl	800edf0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80110b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110b6:	3321      	adds	r3, #33	; 0x21
 80110b8:	222e      	movs	r2, #46	; 0x2e
 80110ba:	701a      	strb	r2, [r3, #0]
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	2b03      	cmp	r3, #3
 80110c6:	d106      	bne.n	80110d6 <f_mkdir+0x13a>
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d101      	bne.n	80110d6 <f_mkdir+0x13a>
 80110d2:	2300      	movs	r3, #0
 80110d4:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80110d6:	68b8      	ldr	r0, [r7, #8]
 80110d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110da:	3320      	adds	r3, #32
 80110dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110de:	4619      	mov	r1, r3
 80110e0:	f7fe fdda 	bl	800fc98 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	895b      	ldrh	r3, [r3, #10]
 80110e8:	653b      	str	r3, [r7, #80]	; 0x50
 80110ea:	e01b      	b.n	8011124 <f_mkdir+0x188>
					fs->winsect = dsc++;
 80110ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ee:	1c5a      	adds	r2, r3, #1
 80110f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80110f2:	68ba      	ldr	r2, [r7, #8]
 80110f4:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	2201      	movs	r2, #1
 80110fa:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fe f860 	bl	800f1c4 <sync_window>
 8011104:	4603      	mov	r3, r0
 8011106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801110a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10c      	bne.n	801112c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8011112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011116:	2100      	movs	r1, #0
 8011118:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801111a:	f7fd fe8a 	bl	800ee32 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801111e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011120:	3b01      	subs	r3, #1
 8011122:	653b      	str	r3, [r7, #80]	; 0x50
 8011124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1e0      	bne.n	80110ec <f_mkdir+0x150>
 801112a:	e000      	b.n	801112e <f_mkdir+0x192>
					if (res != FR_OK) break;
 801112c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801112e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011132:	2b00      	cmp	r3, #0
 8011134:	d107      	bne.n	8011146 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011136:	f107 030c 	add.w	r3, r7, #12
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fe21 	bl	800fd82 <dir_register>
 8011140:	4603      	mov	r3, r0
 8011142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011146:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801114a:	2b00      	cmp	r3, #0
 801114c:	d120      	bne.n	8011190 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011150:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011154:	3316      	adds	r3, #22
 8011156:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011158:	4618      	mov	r0, r3
 801115a:	f7fd fe1d 	bl	800ed98 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011164:	4618      	mov	r0, r3
 8011166:	f7fe fd97 	bl	800fc98 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801116a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801116c:	330b      	adds	r3, #11
 801116e:	2210      	movs	r2, #16
 8011170:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	2201      	movs	r2, #1
 8011176:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801117c:	2b00      	cmp	r3, #0
 801117e:	d10e      	bne.n	801119e <f_mkdir+0x202>
					res = sync_fs(fs);
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	4618      	mov	r0, r3
 8011184:	f7fe f890 	bl	800f2a8 <sync_fs>
 8011188:	4603      	mov	r3, r0
 801118a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801118e:	e006      	b.n	801119e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011190:	f107 030c 	add.w	r3, r7, #12
 8011194:	2200      	movs	r2, #0
 8011196:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011198:	4618      	mov	r0, r3
 801119a:	f7fe faa6 	bl	800f6ea <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801119e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3758      	adds	r7, #88	; 0x58
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
	...

080111ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b087      	sub	sp, #28
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	4613      	mov	r3, r2
 80111b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80111ba:	2301      	movs	r3, #1
 80111bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80111be:	2300      	movs	r3, #0
 80111c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80111c2:	4b1f      	ldr	r3, [pc, #124]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111c4:	7a5b      	ldrb	r3, [r3, #9]
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d131      	bne.n	8011230 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80111cc:	4b1c      	ldr	r3, [pc, #112]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111ce:	7a5b      	ldrb	r3, [r3, #9]
 80111d0:	b2db      	uxtb	r3, r3
 80111d2:	461a      	mov	r2, r3
 80111d4:	4b1a      	ldr	r3, [pc, #104]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111d6:	2100      	movs	r1, #0
 80111d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80111da:	4b19      	ldr	r3, [pc, #100]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111dc:	7a5b      	ldrb	r3, [r3, #9]
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	4a17      	ldr	r2, [pc, #92]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111e2:	009b      	lsls	r3, r3, #2
 80111e4:	4413      	add	r3, r2
 80111e6:	68fa      	ldr	r2, [r7, #12]
 80111e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80111ea:	4b15      	ldr	r3, [pc, #84]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111ec:	7a5b      	ldrb	r3, [r3, #9]
 80111ee:	b2db      	uxtb	r3, r3
 80111f0:	461a      	mov	r2, r3
 80111f2:	4b13      	ldr	r3, [pc, #76]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111f4:	4413      	add	r3, r2
 80111f6:	79fa      	ldrb	r2, [r7, #7]
 80111f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80111fa:	4b11      	ldr	r3, [pc, #68]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 80111fc:	7a5b      	ldrb	r3, [r3, #9]
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	1c5a      	adds	r2, r3, #1
 8011202:	b2d1      	uxtb	r1, r2
 8011204:	4a0e      	ldr	r2, [pc, #56]	; (8011240 <FATFS_LinkDriverEx+0x94>)
 8011206:	7251      	strb	r1, [r2, #9]
 8011208:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801120a:	7dbb      	ldrb	r3, [r7, #22]
 801120c:	3330      	adds	r3, #48	; 0x30
 801120e:	b2da      	uxtb	r2, r3
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	3301      	adds	r3, #1
 8011218:	223a      	movs	r2, #58	; 0x3a
 801121a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	3302      	adds	r3, #2
 8011220:	222f      	movs	r2, #47	; 0x2f
 8011222:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	3303      	adds	r3, #3
 8011228:	2200      	movs	r2, #0
 801122a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801122c:	2300      	movs	r3, #0
 801122e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011230:	7dfb      	ldrb	r3, [r7, #23]
}
 8011232:	4618      	mov	r0, r3
 8011234:	371c      	adds	r7, #28
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr
 801123e:	bf00      	nop
 8011240:	20003878 	.word	0x20003878

08011244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b082      	sub	sp, #8
 8011248:	af00      	add	r7, sp, #0
 801124a:	6078      	str	r0, [r7, #4]
 801124c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801124e:	2200      	movs	r2, #0
 8011250:	6839      	ldr	r1, [r7, #0]
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f7ff ffaa 	bl	80111ac <FATFS_LinkDriverEx>
 8011258:	4603      	mov	r3, r0
}
 801125a:	4618      	mov	r0, r3
 801125c:	3708      	adds	r7, #8
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
	...

08011264 <GetUSBState>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
ApplicationTypeDef GetUSBState(){return Appli_state;}
 8011264:	b480      	push	{r7}
 8011266:	af00      	add	r7, sp, #0
 8011268:	4b03      	ldr	r3, [pc, #12]	; (8011278 <GetUSBState+0x14>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	4618      	mov	r0, r3
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop
 8011278:	20003c5c 	.word	0x20003c5c

0801127c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011280:	2200      	movs	r2, #0
 8011282:	490e      	ldr	r1, [pc, #56]	; (80112bc <MX_USB_HOST_Init+0x40>)
 8011284:	480e      	ldr	r0, [pc, #56]	; (80112c0 <MX_USB_HOST_Init+0x44>)
 8011286:	f7fc f841 	bl	800d30c <USBH_Init>
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	d001      	beq.n	8011294 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011290:	f7f2 f80c 	bl	80032ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8011294:	490b      	ldr	r1, [pc, #44]	; (80112c4 <MX_USB_HOST_Init+0x48>)
 8011296:	480a      	ldr	r0, [pc, #40]	; (80112c0 <MX_USB_HOST_Init+0x44>)
 8011298:	f7fc f8c6 	bl	800d428 <USBH_RegisterClass>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80112a2:	f7f2 f803 	bl	80032ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80112a6:	4806      	ldr	r0, [pc, #24]	; (80112c0 <MX_USB_HOST_Init+0x44>)
 80112a8:	f7fc f94a 	bl	800d540 <USBH_Start>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80112b2:	f7f1 fffb 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80112b6:	bf00      	nop
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	080112dd 	.word	0x080112dd
 80112c0:	20003884 	.word	0x20003884
 80112c4:	200000f8 	.word	0x200000f8

080112c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80112cc:	4802      	ldr	r0, [pc, #8]	; (80112d8 <MX_USB_HOST_Process+0x10>)
 80112ce:	f7fc f947 	bl	800d560 <USBH_Process>
}
 80112d2:	bf00      	nop
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	20003884 	.word	0x20003884

080112dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80112dc:	b480      	push	{r7}
 80112de:	b083      	sub	sp, #12
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	460b      	mov	r3, r1
 80112e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	3b01      	subs	r3, #1
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	d819      	bhi.n	8011324 <USBH_UserProcess+0x48>
 80112f0:	a201      	add	r2, pc, #4	; (adr r2, 80112f8 <USBH_UserProcess+0x1c>)
 80112f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f6:	bf00      	nop
 80112f8:	08011325 	.word	0x08011325
 80112fc:	08011315 	.word	0x08011315
 8011300:	08011325 	.word	0x08011325
 8011304:	0801131d 	.word	0x0801131d
 8011308:	0801130d 	.word	0x0801130d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801130c:	4b09      	ldr	r3, [pc, #36]	; (8011334 <USBH_UserProcess+0x58>)
 801130e:	2203      	movs	r2, #3
 8011310:	701a      	strb	r2, [r3, #0]
  break;
 8011312:	e008      	b.n	8011326 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011314:	4b07      	ldr	r3, [pc, #28]	; (8011334 <USBH_UserProcess+0x58>)
 8011316:	2202      	movs	r2, #2
 8011318:	701a      	strb	r2, [r3, #0]
  //set flag to be ready
  break;
 801131a:	e004      	b.n	8011326 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801131c:	4b05      	ldr	r3, [pc, #20]	; (8011334 <USBH_UserProcess+0x58>)
 801131e:	2201      	movs	r2, #1
 8011320:	701a      	strb	r2, [r3, #0]
  break;
 8011322:	e000      	b.n	8011326 <USBH_UserProcess+0x4a>

  default:
  break;
 8011324:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011326:	bf00      	nop
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	20003c5c 	.word	0x20003c5c

08011338 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b08a      	sub	sp, #40	; 0x28
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011340:	f107 0314 	add.w	r3, r7, #20
 8011344:	2200      	movs	r2, #0
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	605a      	str	r2, [r3, #4]
 801134a:	609a      	str	r2, [r3, #8]
 801134c:	60da      	str	r2, [r3, #12]
 801134e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4a24      	ldr	r2, [pc, #144]	; (80113e8 <HAL_HCD_MspInit+0xb0>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d141      	bne.n	80113de <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801135a:	2300      	movs	r3, #0
 801135c:	613b      	str	r3, [r7, #16]
 801135e:	4b23      	ldr	r3, [pc, #140]	; (80113ec <HAL_HCD_MspInit+0xb4>)
 8011360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011362:	4a22      	ldr	r2, [pc, #136]	; (80113ec <HAL_HCD_MspInit+0xb4>)
 8011364:	f043 0302 	orr.w	r3, r3, #2
 8011368:	6313      	str	r3, [r2, #48]	; 0x30
 801136a:	4b20      	ldr	r3, [pc, #128]	; (80113ec <HAL_HCD_MspInit+0xb4>)
 801136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801136e:	f003 0302 	and.w	r3, r3, #2
 8011372:	613b      	str	r3, [r7, #16]
 8011374:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8011376:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801137c:	2302      	movs	r3, #2
 801137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011380:	2300      	movs	r3, #0
 8011382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011384:	2300      	movs	r3, #0
 8011386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8011388:	230c      	movs	r3, #12
 801138a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801138c:	f107 0314 	add.w	r3, r7, #20
 8011390:	4619      	mov	r1, r3
 8011392:	4817      	ldr	r0, [pc, #92]	; (80113f0 <HAL_HCD_MspInit+0xb8>)
 8011394:	f7f3 f9f4 	bl	8004780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8011398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801139e:	2300      	movs	r3, #0
 80113a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80113a6:	f107 0314 	add.w	r3, r7, #20
 80113aa:	4619      	mov	r1, r3
 80113ac:	4810      	ldr	r0, [pc, #64]	; (80113f0 <HAL_HCD_MspInit+0xb8>)
 80113ae:	f7f3 f9e7 	bl	8004780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80113b2:	2300      	movs	r3, #0
 80113b4:	60fb      	str	r3, [r7, #12]
 80113b6:	4b0d      	ldr	r3, [pc, #52]	; (80113ec <HAL_HCD_MspInit+0xb4>)
 80113b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ba:	4a0c      	ldr	r2, [pc, #48]	; (80113ec <HAL_HCD_MspInit+0xb4>)
 80113bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80113c0:	6313      	str	r3, [r2, #48]	; 0x30
 80113c2:	4b0a      	ldr	r3, [pc, #40]	; (80113ec <HAL_HCD_MspInit+0xb4>)
 80113c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80113ca:	60fb      	str	r3, [r7, #12]
 80113cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80113ce:	2200      	movs	r2, #0
 80113d0:	2100      	movs	r1, #0
 80113d2:	204d      	movs	r0, #77	; 0x4d
 80113d4:	f7f2 fe05 	bl	8003fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80113d8:	204d      	movs	r0, #77	; 0x4d
 80113da:	f7f2 fe1e 	bl	800401a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80113de:	bf00      	nop
 80113e0:	3728      	adds	r7, #40	; 0x28
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	40040000 	.word	0x40040000
 80113ec:	40023800 	.word	0x40023800
 80113f0:	40020400 	.word	0x40020400

080113f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011402:	4618      	mov	r0, r3
 8011404:	f7fc fc8b 	bl	800dd1e <USBH_LL_IncTimer>
}
 8011408:	bf00      	nop
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}

08011410 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801141e:	4618      	mov	r0, r3
 8011420:	f7fc fcc3 	bl	800ddaa <USBH_LL_Connect>
}
 8011424:	bf00      	nop
 8011426:	3708      	adds	r7, #8
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801143a:	4618      	mov	r0, r3
 801143c:	f7fc fccc 	bl	800ddd8 <USBH_LL_Disconnect>
}
 8011440:	bf00      	nop
 8011442:	3708      	adds	r7, #8
 8011444:	46bd      	mov	sp, r7
 8011446:	bd80      	pop	{r7, pc}

08011448 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011448:	b480      	push	{r7}
 801144a:	b083      	sub	sp, #12
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	460b      	mov	r3, r1
 8011452:	70fb      	strb	r3, [r7, #3]
 8011454:	4613      	mov	r3, r2
 8011456:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr

08011464 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011472:	4618      	mov	r0, r3
 8011474:	f7fc fc7d 	bl	800dd72 <USBH_LL_PortEnabled>
}
 8011478:	bf00      	nop
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801148e:	4618      	mov	r0, r3
 8011490:	f7fc fc7d 	bl	800dd8e <USBH_LL_PortDisabled>
}
 8011494:	bf00      	nop
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d132      	bne.n	8011514 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80114ae:	4a1c      	ldr	r2, [pc, #112]	; (8011520 <USBH_LL_Init+0x84>)
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	4a19      	ldr	r2, [pc, #100]	; (8011520 <USBH_LL_Init+0x84>)
 80114ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80114be:	4b18      	ldr	r3, [pc, #96]	; (8011520 <USBH_LL_Init+0x84>)
 80114c0:	4a18      	ldr	r2, [pc, #96]	; (8011524 <USBH_LL_Init+0x88>)
 80114c2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80114c4:	4b16      	ldr	r3, [pc, #88]	; (8011520 <USBH_LL_Init+0x84>)
 80114c6:	220c      	movs	r2, #12
 80114c8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80114ca:	4b15      	ldr	r3, [pc, #84]	; (8011520 <USBH_LL_Init+0x84>)
 80114cc:	2201      	movs	r2, #1
 80114ce:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80114d0:	4b13      	ldr	r3, [pc, #76]	; (8011520 <USBH_LL_Init+0x84>)
 80114d2:	2200      	movs	r2, #0
 80114d4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80114d6:	4b12      	ldr	r3, [pc, #72]	; (8011520 <USBH_LL_Init+0x84>)
 80114d8:	2202      	movs	r2, #2
 80114da:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80114dc:	4b10      	ldr	r3, [pc, #64]	; (8011520 <USBH_LL_Init+0x84>)
 80114de:	2200      	movs	r2, #0
 80114e0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80114e2:	4b0f      	ldr	r3, [pc, #60]	; (8011520 <USBH_LL_Init+0x84>)
 80114e4:	2200      	movs	r2, #0
 80114e6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80114e8:	4b0d      	ldr	r3, [pc, #52]	; (8011520 <USBH_LL_Init+0x84>)
 80114ea:	2200      	movs	r2, #0
 80114ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80114ee:	4b0c      	ldr	r3, [pc, #48]	; (8011520 <USBH_LL_Init+0x84>)
 80114f0:	2200      	movs	r2, #0
 80114f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80114f4:	480a      	ldr	r0, [pc, #40]	; (8011520 <USBH_LL_Init+0x84>)
 80114f6:	f7f3 fb21 	bl	8004b3c <HAL_HCD_Init>
 80114fa:	4603      	mov	r3, r0
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d001      	beq.n	8011504 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8011500:	f7f1 fed4 	bl	80032ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8011504:	4806      	ldr	r0, [pc, #24]	; (8011520 <USBH_LL_Init+0x84>)
 8011506:	f7f3 ff04 	bl	8005312 <HAL_HCD_GetCurrentFrame>
 801150a:	4603      	mov	r3, r0
 801150c:	4619      	mov	r1, r3
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f7fc fbf6 	bl	800dd00 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011514:	2300      	movs	r3, #0
}
 8011516:	4618      	mov	r0, r3
 8011518:	3708      	adds	r7, #8
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	20003c60 	.word	0x20003c60
 8011524:	40040000 	.word	0x40040000

08011528 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b084      	sub	sp, #16
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011530:	2300      	movs	r3, #0
 8011532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011534:	2300      	movs	r3, #0
 8011536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801153e:	4618      	mov	r0, r3
 8011540:	f7f3 fe71 	bl	8005226 <HAL_HCD_Start>
 8011544:	4603      	mov	r3, r0
 8011546:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011548:	7bfb      	ldrb	r3, [r7, #15]
 801154a:	4618      	mov	r0, r3
 801154c:	f000 f98c 	bl	8011868 <USBH_Get_USB_Status>
 8011550:	4603      	mov	r3, r0
 8011552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011554:	7bbb      	ldrb	r3, [r7, #14]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b084      	sub	sp, #16
 8011562:	af00      	add	r7, sp, #0
 8011564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011566:	2300      	movs	r3, #0
 8011568:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801156a:	2300      	movs	r3, #0
 801156c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011574:	4618      	mov	r0, r3
 8011576:	f7f3 fe79 	bl	800526c <HAL_HCD_Stop>
 801157a:	4603      	mov	r3, r0
 801157c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	4618      	mov	r0, r3
 8011582:	f000 f971 	bl	8011868 <USBH_Get_USB_Status>
 8011586:	4603      	mov	r3, r0
 8011588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801158a:	7bbb      	ldrb	r3, [r7, #14]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3710      	adds	r7, #16
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801159c:	2301      	movs	r3, #1
 801159e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f3 fec1 	bl	800532e <HAL_HCD_GetCurrentSpeed>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b02      	cmp	r3, #2
 80115b0:	d00c      	beq.n	80115cc <USBH_LL_GetSpeed+0x38>
 80115b2:	2b02      	cmp	r3, #2
 80115b4:	d80d      	bhi.n	80115d2 <USBH_LL_GetSpeed+0x3e>
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d002      	beq.n	80115c0 <USBH_LL_GetSpeed+0x2c>
 80115ba:	2b01      	cmp	r3, #1
 80115bc:	d003      	beq.n	80115c6 <USBH_LL_GetSpeed+0x32>
 80115be:	e008      	b.n	80115d2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80115c0:	2300      	movs	r3, #0
 80115c2:	73fb      	strb	r3, [r7, #15]
    break;
 80115c4:	e008      	b.n	80115d8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80115c6:	2301      	movs	r3, #1
 80115c8:	73fb      	strb	r3, [r7, #15]
    break;
 80115ca:	e005      	b.n	80115d8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80115cc:	2302      	movs	r3, #2
 80115ce:	73fb      	strb	r3, [r7, #15]
    break;
 80115d0:	e002      	b.n	80115d8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80115d2:	2301      	movs	r3, #1
 80115d4:	73fb      	strb	r3, [r7, #15]
    break;
 80115d6:	bf00      	nop
  }
  return  speed;
 80115d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b084      	sub	sp, #16
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115ea:	2300      	movs	r3, #0
 80115ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80115ee:	2300      	movs	r3, #0
 80115f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f3 fe54 	bl	80052a6 <HAL_HCD_ResetPort>
 80115fe:	4603      	mov	r3, r0
 8011600:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011602:	7bfb      	ldrb	r3, [r7, #15]
 8011604:	4618      	mov	r0, r3
 8011606:	f000 f92f 	bl	8011868 <USBH_Get_USB_Status>
 801160a:	4603      	mov	r3, r0
 801160c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801160e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011610:	4618      	mov	r0, r3
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	460b      	mov	r3, r1
 8011622:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801162a:	78fa      	ldrb	r2, [r7, #3]
 801162c:	4611      	mov	r1, r2
 801162e:	4618      	mov	r0, r3
 8011630:	f7f3 fe5b 	bl	80052ea <HAL_HCD_HC_GetXferCount>
 8011634:	4603      	mov	r3, r0
}
 8011636:	4618      	mov	r0, r3
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801163e:	b590      	push	{r4, r7, lr}
 8011640:	b089      	sub	sp, #36	; 0x24
 8011642:	af04      	add	r7, sp, #16
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	4608      	mov	r0, r1
 8011648:	4611      	mov	r1, r2
 801164a:	461a      	mov	r2, r3
 801164c:	4603      	mov	r3, r0
 801164e:	70fb      	strb	r3, [r7, #3]
 8011650:	460b      	mov	r3, r1
 8011652:	70bb      	strb	r3, [r7, #2]
 8011654:	4613      	mov	r3, r2
 8011656:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801165c:	2300      	movs	r3, #0
 801165e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011666:	787c      	ldrb	r4, [r7, #1]
 8011668:	78ba      	ldrb	r2, [r7, #2]
 801166a:	78f9      	ldrb	r1, [r7, #3]
 801166c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801166e:	9302      	str	r3, [sp, #8]
 8011670:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011674:	9301      	str	r3, [sp, #4]
 8011676:	f897 3020 	ldrb.w	r3, [r7, #32]
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	4623      	mov	r3, r4
 801167e:	f7f3 fabf 	bl	8004c00 <HAL_HCD_HC_Init>
 8011682:	4603      	mov	r3, r0
 8011684:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011686:	7bfb      	ldrb	r3, [r7, #15]
 8011688:	4618      	mov	r0, r3
 801168a:	f000 f8ed 	bl	8011868 <USBH_Get_USB_Status>
 801168e:	4603      	mov	r3, r0
 8011690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011692:	7bbb      	ldrb	r3, [r7, #14]
}
 8011694:	4618      	mov	r0, r3
 8011696:	3714      	adds	r7, #20
 8011698:	46bd      	mov	sp, r7
 801169a:	bd90      	pop	{r4, r7, pc}

0801169c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	6078      	str	r0, [r7, #4]
 80116a4:	460b      	mov	r3, r1
 80116a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116a8:	2300      	movs	r3, #0
 80116aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116ac:	2300      	movs	r3, #0
 80116ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80116b6:	78fa      	ldrb	r2, [r7, #3]
 80116b8:	4611      	mov	r1, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7f3 fb2f 	bl	8004d1e <HAL_HCD_HC_Halt>
 80116c0:	4603      	mov	r3, r0
 80116c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80116c4:	7bfb      	ldrb	r3, [r7, #15]
 80116c6:	4618      	mov	r0, r3
 80116c8:	f000 f8ce 	bl	8011868 <USBH_Get_USB_Status>
 80116cc:	4603      	mov	r3, r0
 80116ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80116da:	b590      	push	{r4, r7, lr}
 80116dc:	b089      	sub	sp, #36	; 0x24
 80116de:	af04      	add	r7, sp, #16
 80116e0:	6078      	str	r0, [r7, #4]
 80116e2:	4608      	mov	r0, r1
 80116e4:	4611      	mov	r1, r2
 80116e6:	461a      	mov	r2, r3
 80116e8:	4603      	mov	r3, r0
 80116ea:	70fb      	strb	r3, [r7, #3]
 80116ec:	460b      	mov	r3, r1
 80116ee:	70bb      	strb	r3, [r7, #2]
 80116f0:	4613      	mov	r3, r2
 80116f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116f4:	2300      	movs	r3, #0
 80116f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80116f8:	2300      	movs	r3, #0
 80116fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011702:	787c      	ldrb	r4, [r7, #1]
 8011704:	78ba      	ldrb	r2, [r7, #2]
 8011706:	78f9      	ldrb	r1, [r7, #3]
 8011708:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801170c:	9303      	str	r3, [sp, #12]
 801170e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011710:	9302      	str	r3, [sp, #8]
 8011712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011714:	9301      	str	r3, [sp, #4]
 8011716:	f897 3020 	ldrb.w	r3, [r7, #32]
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	4623      	mov	r3, r4
 801171e:	f7f3 fb21 	bl	8004d64 <HAL_HCD_HC_SubmitRequest>
 8011722:	4603      	mov	r3, r0
 8011724:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011726:	7bfb      	ldrb	r3, [r7, #15]
 8011728:	4618      	mov	r0, r3
 801172a:	f000 f89d 	bl	8011868 <USBH_Get_USB_Status>
 801172e:	4603      	mov	r3, r0
 8011730:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011732:	7bbb      	ldrb	r3, [r7, #14]
}
 8011734:	4618      	mov	r0, r3
 8011736:	3714      	adds	r7, #20
 8011738:	46bd      	mov	sp, r7
 801173a:	bd90      	pop	{r4, r7, pc}

0801173c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b082      	sub	sp, #8
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	460b      	mov	r3, r1
 8011746:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801174e:	78fa      	ldrb	r2, [r7, #3]
 8011750:	4611      	mov	r1, r2
 8011752:	4618      	mov	r0, r3
 8011754:	f7f3 fdb5 	bl	80052c2 <HAL_HCD_HC_GetURBState>
 8011758:	4603      	mov	r3, r0
}
 801175a:	4618      	mov	r0, r3
 801175c:	3708      	adds	r7, #8
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}

08011762 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b082      	sub	sp, #8
 8011766:	af00      	add	r7, sp, #0
 8011768:	6078      	str	r0, [r7, #4]
 801176a:	460b      	mov	r3, r1
 801176c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011774:	2b00      	cmp	r3, #0
 8011776:	d103      	bne.n	8011780 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011778:	78fb      	ldrb	r3, [r7, #3]
 801177a:	4618      	mov	r0, r3
 801177c:	f000 f8a0 	bl	80118c0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011780:	20c8      	movs	r0, #200	; 0xc8
 8011782:	f7f2 fb2f 	bl	8003de4 <HAL_Delay>
  return USBH_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	4618      	mov	r0, r3
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}

08011790 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011790:	b480      	push	{r7}
 8011792:	b085      	sub	sp, #20
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	460b      	mov	r3, r1
 801179a:	70fb      	strb	r3, [r7, #3]
 801179c:	4613      	mov	r3, r2
 801179e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80117a6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80117a8:	78fb      	ldrb	r3, [r7, #3]
 80117aa:	68fa      	ldr	r2, [r7, #12]
 80117ac:	212c      	movs	r1, #44	; 0x2c
 80117ae:	fb01 f303 	mul.w	r3, r1, r3
 80117b2:	4413      	add	r3, r2
 80117b4:	333b      	adds	r3, #59	; 0x3b
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d009      	beq.n	80117d0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80117bc:	78fb      	ldrb	r3, [r7, #3]
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	212c      	movs	r1, #44	; 0x2c
 80117c2:	fb01 f303 	mul.w	r3, r1, r3
 80117c6:	4413      	add	r3, r2
 80117c8:	3354      	adds	r3, #84	; 0x54
 80117ca:	78ba      	ldrb	r2, [r7, #2]
 80117cc:	701a      	strb	r2, [r3, #0]
 80117ce:	e008      	b.n	80117e2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80117d0:	78fb      	ldrb	r3, [r7, #3]
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	212c      	movs	r1, #44	; 0x2c
 80117d6:	fb01 f303 	mul.w	r3, r1, r3
 80117da:	4413      	add	r3, r2
 80117dc:	3355      	adds	r3, #85	; 0x55
 80117de:	78ba      	ldrb	r2, [r7, #2]
 80117e0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3714      	adds	r7, #20
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b085      	sub	sp, #20
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 80117fc:	2300      	movs	r3, #0
 80117fe:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011806:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011808:	78fb      	ldrb	r3, [r7, #3]
 801180a:	68ba      	ldr	r2, [r7, #8]
 801180c:	212c      	movs	r1, #44	; 0x2c
 801180e:	fb01 f303 	mul.w	r3, r1, r3
 8011812:	4413      	add	r3, r2
 8011814:	333b      	adds	r3, #59	; 0x3b
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d009      	beq.n	8011830 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	68ba      	ldr	r2, [r7, #8]
 8011820:	212c      	movs	r1, #44	; 0x2c
 8011822:	fb01 f303 	mul.w	r3, r1, r3
 8011826:	4413      	add	r3, r2
 8011828:	3354      	adds	r3, #84	; 0x54
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	73fb      	strb	r3, [r7, #15]
 801182e:	e008      	b.n	8011842 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011830:	78fb      	ldrb	r3, [r7, #3]
 8011832:	68ba      	ldr	r2, [r7, #8]
 8011834:	212c      	movs	r1, #44	; 0x2c
 8011836:	fb01 f303 	mul.w	r3, r1, r3
 801183a:	4413      	add	r3, r2
 801183c:	3355      	adds	r3, #85	; 0x55
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011842:	7bfb      	ldrb	r3, [r7, #15]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3714      	adds	r7, #20
 8011848:	46bd      	mov	sp, r7
 801184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184e:	4770      	bx	lr

08011850 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011858:	6878      	ldr	r0, [r7, #4]
 801185a:	f7f2 fac3 	bl	8003de4 <HAL_Delay>
}
 801185e:	bf00      	nop
 8011860:	3708      	adds	r7, #8
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
	...

08011868 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	4603      	mov	r3, r0
 8011870:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011872:	2300      	movs	r3, #0
 8011874:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011876:	79fb      	ldrb	r3, [r7, #7]
 8011878:	2b03      	cmp	r3, #3
 801187a:	d817      	bhi.n	80118ac <USBH_Get_USB_Status+0x44>
 801187c:	a201      	add	r2, pc, #4	; (adr r2, 8011884 <USBH_Get_USB_Status+0x1c>)
 801187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011882:	bf00      	nop
 8011884:	08011895 	.word	0x08011895
 8011888:	0801189b 	.word	0x0801189b
 801188c:	080118a1 	.word	0x080118a1
 8011890:	080118a7 	.word	0x080118a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011894:	2300      	movs	r3, #0
 8011896:	73fb      	strb	r3, [r7, #15]
    break;
 8011898:	e00b      	b.n	80118b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801189a:	2302      	movs	r3, #2
 801189c:	73fb      	strb	r3, [r7, #15]
    break;
 801189e:	e008      	b.n	80118b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80118a0:	2301      	movs	r3, #1
 80118a2:	73fb      	strb	r3, [r7, #15]
    break;
 80118a4:	e005      	b.n	80118b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80118a6:	2302      	movs	r3, #2
 80118a8:	73fb      	strb	r3, [r7, #15]
    break;
 80118aa:	e002      	b.n	80118b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80118ac:	2302      	movs	r3, #2
 80118ae:	73fb      	strb	r3, [r7, #15]
    break;
 80118b0:	bf00      	nop
  }
  return usb_status;
 80118b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3714      	adds	r7, #20
 80118b8:	46bd      	mov	sp, r7
 80118ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118be:	4770      	bx	lr

080118c0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80118ca:	79fb      	ldrb	r3, [r7, #7]
 80118cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 80118ce:	79fb      	ldrb	r3, [r7, #7]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d102      	bne.n	80118da <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80118d4:	2301      	movs	r3, #1
 80118d6:	73fb      	strb	r3, [r7, #15]
 80118d8:	e001      	b.n	80118de <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80118da:	2300      	movs	r3, #0
 80118dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 80118de:	7bfb      	ldrb	r3, [r7, #15]
 80118e0:	461a      	mov	r2, r3
 80118e2:	2110      	movs	r1, #16
 80118e4:	4803      	ldr	r0, [pc, #12]	; (80118f4 <MX_DriverVbusHS+0x34>)
 80118e6:	f7f3 f8f7 	bl	8004ad8 <HAL_GPIO_WritePin>
}
 80118ea:	bf00      	nop
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	40020800 	.word	0x40020800

080118f8 <atoi>:
 80118f8:	220a      	movs	r2, #10
 80118fa:	2100      	movs	r1, #0
 80118fc:	f000 bb4c 	b.w	8011f98 <strtol>

08011900 <__errno>:
 8011900:	4b01      	ldr	r3, [pc, #4]	; (8011908 <__errno+0x8>)
 8011902:	6818      	ldr	r0, [r3, #0]
 8011904:	4770      	bx	lr
 8011906:	bf00      	nop
 8011908:	20000118 	.word	0x20000118

0801190c <__libc_init_array>:
 801190c:	b570      	push	{r4, r5, r6, lr}
 801190e:	4d0d      	ldr	r5, [pc, #52]	; (8011944 <__libc_init_array+0x38>)
 8011910:	4c0d      	ldr	r4, [pc, #52]	; (8011948 <__libc_init_array+0x3c>)
 8011912:	1b64      	subs	r4, r4, r5
 8011914:	10a4      	asrs	r4, r4, #2
 8011916:	2600      	movs	r6, #0
 8011918:	42a6      	cmp	r6, r4
 801191a:	d109      	bne.n	8011930 <__libc_init_array+0x24>
 801191c:	4d0b      	ldr	r5, [pc, #44]	; (801194c <__libc_init_array+0x40>)
 801191e:	4c0c      	ldr	r4, [pc, #48]	; (8011950 <__libc_init_array+0x44>)
 8011920:	f001 fbc0 	bl	80130a4 <_init>
 8011924:	1b64      	subs	r4, r4, r5
 8011926:	10a4      	asrs	r4, r4, #2
 8011928:	2600      	movs	r6, #0
 801192a:	42a6      	cmp	r6, r4
 801192c:	d105      	bne.n	801193a <__libc_init_array+0x2e>
 801192e:	bd70      	pop	{r4, r5, r6, pc}
 8011930:	f855 3b04 	ldr.w	r3, [r5], #4
 8011934:	4798      	blx	r3
 8011936:	3601      	adds	r6, #1
 8011938:	e7ee      	b.n	8011918 <__libc_init_array+0xc>
 801193a:	f855 3b04 	ldr.w	r3, [r5], #4
 801193e:	4798      	blx	r3
 8011940:	3601      	adds	r6, #1
 8011942:	e7f2      	b.n	801192a <__libc_init_array+0x1e>
 8011944:	08013df0 	.word	0x08013df0
 8011948:	08013df0 	.word	0x08013df0
 801194c:	08013df0 	.word	0x08013df0
 8011950:	08013df4 	.word	0x08013df4

08011954 <malloc>:
 8011954:	4b02      	ldr	r3, [pc, #8]	; (8011960 <malloc+0xc>)
 8011956:	4601      	mov	r1, r0
 8011958:	6818      	ldr	r0, [r3, #0]
 801195a:	f000 b88d 	b.w	8011a78 <_malloc_r>
 801195e:	bf00      	nop
 8011960:	20000118 	.word	0x20000118

08011964 <free>:
 8011964:	4b02      	ldr	r3, [pc, #8]	; (8011970 <free+0xc>)
 8011966:	4601      	mov	r1, r0
 8011968:	6818      	ldr	r0, [r3, #0]
 801196a:	f000 b819 	b.w	80119a0 <_free_r>
 801196e:	bf00      	nop
 8011970:	20000118 	.word	0x20000118

08011974 <memcpy>:
 8011974:	440a      	add	r2, r1
 8011976:	4291      	cmp	r1, r2
 8011978:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801197c:	d100      	bne.n	8011980 <memcpy+0xc>
 801197e:	4770      	bx	lr
 8011980:	b510      	push	{r4, lr}
 8011982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011986:	f803 4f01 	strb.w	r4, [r3, #1]!
 801198a:	4291      	cmp	r1, r2
 801198c:	d1f9      	bne.n	8011982 <memcpy+0xe>
 801198e:	bd10      	pop	{r4, pc}

08011990 <memset>:
 8011990:	4402      	add	r2, r0
 8011992:	4603      	mov	r3, r0
 8011994:	4293      	cmp	r3, r2
 8011996:	d100      	bne.n	801199a <memset+0xa>
 8011998:	4770      	bx	lr
 801199a:	f803 1b01 	strb.w	r1, [r3], #1
 801199e:	e7f9      	b.n	8011994 <memset+0x4>

080119a0 <_free_r>:
 80119a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119a2:	2900      	cmp	r1, #0
 80119a4:	d044      	beq.n	8011a30 <_free_r+0x90>
 80119a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119aa:	9001      	str	r0, [sp, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f1a1 0404 	sub.w	r4, r1, #4
 80119b2:	bfb8      	it	lt
 80119b4:	18e4      	addlt	r4, r4, r3
 80119b6:	f000 fdd9 	bl	801256c <__malloc_lock>
 80119ba:	4a1e      	ldr	r2, [pc, #120]	; (8011a34 <_free_r+0x94>)
 80119bc:	9801      	ldr	r0, [sp, #4]
 80119be:	6813      	ldr	r3, [r2, #0]
 80119c0:	b933      	cbnz	r3, 80119d0 <_free_r+0x30>
 80119c2:	6063      	str	r3, [r4, #4]
 80119c4:	6014      	str	r4, [r2, #0]
 80119c6:	b003      	add	sp, #12
 80119c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119cc:	f000 bdd4 	b.w	8012578 <__malloc_unlock>
 80119d0:	42a3      	cmp	r3, r4
 80119d2:	d908      	bls.n	80119e6 <_free_r+0x46>
 80119d4:	6825      	ldr	r5, [r4, #0]
 80119d6:	1961      	adds	r1, r4, r5
 80119d8:	428b      	cmp	r3, r1
 80119da:	bf01      	itttt	eq
 80119dc:	6819      	ldreq	r1, [r3, #0]
 80119de:	685b      	ldreq	r3, [r3, #4]
 80119e0:	1949      	addeq	r1, r1, r5
 80119e2:	6021      	streq	r1, [r4, #0]
 80119e4:	e7ed      	b.n	80119c2 <_free_r+0x22>
 80119e6:	461a      	mov	r2, r3
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	b10b      	cbz	r3, 80119f0 <_free_r+0x50>
 80119ec:	42a3      	cmp	r3, r4
 80119ee:	d9fa      	bls.n	80119e6 <_free_r+0x46>
 80119f0:	6811      	ldr	r1, [r2, #0]
 80119f2:	1855      	adds	r5, r2, r1
 80119f4:	42a5      	cmp	r5, r4
 80119f6:	d10b      	bne.n	8011a10 <_free_r+0x70>
 80119f8:	6824      	ldr	r4, [r4, #0]
 80119fa:	4421      	add	r1, r4
 80119fc:	1854      	adds	r4, r2, r1
 80119fe:	42a3      	cmp	r3, r4
 8011a00:	6011      	str	r1, [r2, #0]
 8011a02:	d1e0      	bne.n	80119c6 <_free_r+0x26>
 8011a04:	681c      	ldr	r4, [r3, #0]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	6053      	str	r3, [r2, #4]
 8011a0a:	4421      	add	r1, r4
 8011a0c:	6011      	str	r1, [r2, #0]
 8011a0e:	e7da      	b.n	80119c6 <_free_r+0x26>
 8011a10:	d902      	bls.n	8011a18 <_free_r+0x78>
 8011a12:	230c      	movs	r3, #12
 8011a14:	6003      	str	r3, [r0, #0]
 8011a16:	e7d6      	b.n	80119c6 <_free_r+0x26>
 8011a18:	6825      	ldr	r5, [r4, #0]
 8011a1a:	1961      	adds	r1, r4, r5
 8011a1c:	428b      	cmp	r3, r1
 8011a1e:	bf04      	itt	eq
 8011a20:	6819      	ldreq	r1, [r3, #0]
 8011a22:	685b      	ldreq	r3, [r3, #4]
 8011a24:	6063      	str	r3, [r4, #4]
 8011a26:	bf04      	itt	eq
 8011a28:	1949      	addeq	r1, r1, r5
 8011a2a:	6021      	streq	r1, [r4, #0]
 8011a2c:	6054      	str	r4, [r2, #4]
 8011a2e:	e7ca      	b.n	80119c6 <_free_r+0x26>
 8011a30:	b003      	add	sp, #12
 8011a32:	bd30      	pop	{r4, r5, pc}
 8011a34:	20003f64 	.word	0x20003f64

08011a38 <sbrk_aligned>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	4e0e      	ldr	r6, [pc, #56]	; (8011a74 <sbrk_aligned+0x3c>)
 8011a3c:	460c      	mov	r4, r1
 8011a3e:	6831      	ldr	r1, [r6, #0]
 8011a40:	4605      	mov	r5, r0
 8011a42:	b911      	cbnz	r1, 8011a4a <sbrk_aligned+0x12>
 8011a44:	f000 f930 	bl	8011ca8 <_sbrk_r>
 8011a48:	6030      	str	r0, [r6, #0]
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f000 f92b 	bl	8011ca8 <_sbrk_r>
 8011a52:	1c43      	adds	r3, r0, #1
 8011a54:	d00a      	beq.n	8011a6c <sbrk_aligned+0x34>
 8011a56:	1cc4      	adds	r4, r0, #3
 8011a58:	f024 0403 	bic.w	r4, r4, #3
 8011a5c:	42a0      	cmp	r0, r4
 8011a5e:	d007      	beq.n	8011a70 <sbrk_aligned+0x38>
 8011a60:	1a21      	subs	r1, r4, r0
 8011a62:	4628      	mov	r0, r5
 8011a64:	f000 f920 	bl	8011ca8 <_sbrk_r>
 8011a68:	3001      	adds	r0, #1
 8011a6a:	d101      	bne.n	8011a70 <sbrk_aligned+0x38>
 8011a6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011a70:	4620      	mov	r0, r4
 8011a72:	bd70      	pop	{r4, r5, r6, pc}
 8011a74:	20003f68 	.word	0x20003f68

08011a78 <_malloc_r>:
 8011a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a7c:	1ccd      	adds	r5, r1, #3
 8011a7e:	f025 0503 	bic.w	r5, r5, #3
 8011a82:	3508      	adds	r5, #8
 8011a84:	2d0c      	cmp	r5, #12
 8011a86:	bf38      	it	cc
 8011a88:	250c      	movcc	r5, #12
 8011a8a:	2d00      	cmp	r5, #0
 8011a8c:	4607      	mov	r7, r0
 8011a8e:	db01      	blt.n	8011a94 <_malloc_r+0x1c>
 8011a90:	42a9      	cmp	r1, r5
 8011a92:	d905      	bls.n	8011aa0 <_malloc_r+0x28>
 8011a94:	230c      	movs	r3, #12
 8011a96:	603b      	str	r3, [r7, #0]
 8011a98:	2600      	movs	r6, #0
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa0:	4e2e      	ldr	r6, [pc, #184]	; (8011b5c <_malloc_r+0xe4>)
 8011aa2:	f000 fd63 	bl	801256c <__malloc_lock>
 8011aa6:	6833      	ldr	r3, [r6, #0]
 8011aa8:	461c      	mov	r4, r3
 8011aaa:	bb34      	cbnz	r4, 8011afa <_malloc_r+0x82>
 8011aac:	4629      	mov	r1, r5
 8011aae:	4638      	mov	r0, r7
 8011ab0:	f7ff ffc2 	bl	8011a38 <sbrk_aligned>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	4604      	mov	r4, r0
 8011ab8:	d14d      	bne.n	8011b56 <_malloc_r+0xde>
 8011aba:	6834      	ldr	r4, [r6, #0]
 8011abc:	4626      	mov	r6, r4
 8011abe:	2e00      	cmp	r6, #0
 8011ac0:	d140      	bne.n	8011b44 <_malloc_r+0xcc>
 8011ac2:	6823      	ldr	r3, [r4, #0]
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	4638      	mov	r0, r7
 8011ac8:	eb04 0803 	add.w	r8, r4, r3
 8011acc:	f000 f8ec 	bl	8011ca8 <_sbrk_r>
 8011ad0:	4580      	cmp	r8, r0
 8011ad2:	d13a      	bne.n	8011b4a <_malloc_r+0xd2>
 8011ad4:	6821      	ldr	r1, [r4, #0]
 8011ad6:	3503      	adds	r5, #3
 8011ad8:	1a6d      	subs	r5, r5, r1
 8011ada:	f025 0503 	bic.w	r5, r5, #3
 8011ade:	3508      	adds	r5, #8
 8011ae0:	2d0c      	cmp	r5, #12
 8011ae2:	bf38      	it	cc
 8011ae4:	250c      	movcc	r5, #12
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	4638      	mov	r0, r7
 8011aea:	f7ff ffa5 	bl	8011a38 <sbrk_aligned>
 8011aee:	3001      	adds	r0, #1
 8011af0:	d02b      	beq.n	8011b4a <_malloc_r+0xd2>
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	442b      	add	r3, r5
 8011af6:	6023      	str	r3, [r4, #0]
 8011af8:	e00e      	b.n	8011b18 <_malloc_r+0xa0>
 8011afa:	6822      	ldr	r2, [r4, #0]
 8011afc:	1b52      	subs	r2, r2, r5
 8011afe:	d41e      	bmi.n	8011b3e <_malloc_r+0xc6>
 8011b00:	2a0b      	cmp	r2, #11
 8011b02:	d916      	bls.n	8011b32 <_malloc_r+0xba>
 8011b04:	1961      	adds	r1, r4, r5
 8011b06:	42a3      	cmp	r3, r4
 8011b08:	6025      	str	r5, [r4, #0]
 8011b0a:	bf18      	it	ne
 8011b0c:	6059      	strne	r1, [r3, #4]
 8011b0e:	6863      	ldr	r3, [r4, #4]
 8011b10:	bf08      	it	eq
 8011b12:	6031      	streq	r1, [r6, #0]
 8011b14:	5162      	str	r2, [r4, r5]
 8011b16:	604b      	str	r3, [r1, #4]
 8011b18:	4638      	mov	r0, r7
 8011b1a:	f104 060b 	add.w	r6, r4, #11
 8011b1e:	f000 fd2b 	bl	8012578 <__malloc_unlock>
 8011b22:	f026 0607 	bic.w	r6, r6, #7
 8011b26:	1d23      	adds	r3, r4, #4
 8011b28:	1af2      	subs	r2, r6, r3
 8011b2a:	d0b6      	beq.n	8011a9a <_malloc_r+0x22>
 8011b2c:	1b9b      	subs	r3, r3, r6
 8011b2e:	50a3      	str	r3, [r4, r2]
 8011b30:	e7b3      	b.n	8011a9a <_malloc_r+0x22>
 8011b32:	6862      	ldr	r2, [r4, #4]
 8011b34:	42a3      	cmp	r3, r4
 8011b36:	bf0c      	ite	eq
 8011b38:	6032      	streq	r2, [r6, #0]
 8011b3a:	605a      	strne	r2, [r3, #4]
 8011b3c:	e7ec      	b.n	8011b18 <_malloc_r+0xa0>
 8011b3e:	4623      	mov	r3, r4
 8011b40:	6864      	ldr	r4, [r4, #4]
 8011b42:	e7b2      	b.n	8011aaa <_malloc_r+0x32>
 8011b44:	4634      	mov	r4, r6
 8011b46:	6876      	ldr	r6, [r6, #4]
 8011b48:	e7b9      	b.n	8011abe <_malloc_r+0x46>
 8011b4a:	230c      	movs	r3, #12
 8011b4c:	603b      	str	r3, [r7, #0]
 8011b4e:	4638      	mov	r0, r7
 8011b50:	f000 fd12 	bl	8012578 <__malloc_unlock>
 8011b54:	e7a1      	b.n	8011a9a <_malloc_r+0x22>
 8011b56:	6025      	str	r5, [r4, #0]
 8011b58:	e7de      	b.n	8011b18 <_malloc_r+0xa0>
 8011b5a:	bf00      	nop
 8011b5c:	20003f64 	.word	0x20003f64

08011b60 <iprintf>:
 8011b60:	b40f      	push	{r0, r1, r2, r3}
 8011b62:	4b0a      	ldr	r3, [pc, #40]	; (8011b8c <iprintf+0x2c>)
 8011b64:	b513      	push	{r0, r1, r4, lr}
 8011b66:	681c      	ldr	r4, [r3, #0]
 8011b68:	b124      	cbz	r4, 8011b74 <iprintf+0x14>
 8011b6a:	69a3      	ldr	r3, [r4, #24]
 8011b6c:	b913      	cbnz	r3, 8011b74 <iprintf+0x14>
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f000 fbf6 	bl	8012360 <__sinit>
 8011b74:	ab05      	add	r3, sp, #20
 8011b76:	9a04      	ldr	r2, [sp, #16]
 8011b78:	68a1      	ldr	r1, [r4, #8]
 8011b7a:	9301      	str	r3, [sp, #4]
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f000 fe87 	bl	8012890 <_vfiprintf_r>
 8011b82:	b002      	add	sp, #8
 8011b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b88:	b004      	add	sp, #16
 8011b8a:	4770      	bx	lr
 8011b8c:	20000118 	.word	0x20000118

08011b90 <putchar>:
 8011b90:	4b09      	ldr	r3, [pc, #36]	; (8011bb8 <putchar+0x28>)
 8011b92:	b513      	push	{r0, r1, r4, lr}
 8011b94:	681c      	ldr	r4, [r3, #0]
 8011b96:	4601      	mov	r1, r0
 8011b98:	b134      	cbz	r4, 8011ba8 <putchar+0x18>
 8011b9a:	69a3      	ldr	r3, [r4, #24]
 8011b9c:	b923      	cbnz	r3, 8011ba8 <putchar+0x18>
 8011b9e:	9001      	str	r0, [sp, #4]
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f000 fbdd 	bl	8012360 <__sinit>
 8011ba6:	9901      	ldr	r1, [sp, #4]
 8011ba8:	68a2      	ldr	r2, [r4, #8]
 8011baa:	4620      	mov	r0, r4
 8011bac:	b002      	add	sp, #8
 8011bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bb2:	f001 b931 	b.w	8012e18 <_putc_r>
 8011bb6:	bf00      	nop
 8011bb8:	20000118 	.word	0x20000118

08011bbc <_puts_r>:
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	460e      	mov	r6, r1
 8011bc0:	4605      	mov	r5, r0
 8011bc2:	b118      	cbz	r0, 8011bcc <_puts_r+0x10>
 8011bc4:	6983      	ldr	r3, [r0, #24]
 8011bc6:	b90b      	cbnz	r3, 8011bcc <_puts_r+0x10>
 8011bc8:	f000 fbca 	bl	8012360 <__sinit>
 8011bcc:	69ab      	ldr	r3, [r5, #24]
 8011bce:	68ac      	ldr	r4, [r5, #8]
 8011bd0:	b913      	cbnz	r3, 8011bd8 <_puts_r+0x1c>
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	f000 fbc4 	bl	8012360 <__sinit>
 8011bd8:	4b2c      	ldr	r3, [pc, #176]	; (8011c8c <_puts_r+0xd0>)
 8011bda:	429c      	cmp	r4, r3
 8011bdc:	d120      	bne.n	8011c20 <_puts_r+0x64>
 8011bde:	686c      	ldr	r4, [r5, #4]
 8011be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011be2:	07db      	lsls	r3, r3, #31
 8011be4:	d405      	bmi.n	8011bf2 <_puts_r+0x36>
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	0598      	lsls	r0, r3, #22
 8011bea:	d402      	bmi.n	8011bf2 <_puts_r+0x36>
 8011bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bee:	f000 fc55 	bl	801249c <__retarget_lock_acquire_recursive>
 8011bf2:	89a3      	ldrh	r3, [r4, #12]
 8011bf4:	0719      	lsls	r1, r3, #28
 8011bf6:	d51d      	bpl.n	8011c34 <_puts_r+0x78>
 8011bf8:	6923      	ldr	r3, [r4, #16]
 8011bfa:	b1db      	cbz	r3, 8011c34 <_puts_r+0x78>
 8011bfc:	3e01      	subs	r6, #1
 8011bfe:	68a3      	ldr	r3, [r4, #8]
 8011c00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011c04:	3b01      	subs	r3, #1
 8011c06:	60a3      	str	r3, [r4, #8]
 8011c08:	bb39      	cbnz	r1, 8011c5a <_puts_r+0x9e>
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	da38      	bge.n	8011c80 <_puts_r+0xc4>
 8011c0e:	4622      	mov	r2, r4
 8011c10:	210a      	movs	r1, #10
 8011c12:	4628      	mov	r0, r5
 8011c14:	f000 f9ca 	bl	8011fac <__swbuf_r>
 8011c18:	3001      	adds	r0, #1
 8011c1a:	d011      	beq.n	8011c40 <_puts_r+0x84>
 8011c1c:	250a      	movs	r5, #10
 8011c1e:	e011      	b.n	8011c44 <_puts_r+0x88>
 8011c20:	4b1b      	ldr	r3, [pc, #108]	; (8011c90 <_puts_r+0xd4>)
 8011c22:	429c      	cmp	r4, r3
 8011c24:	d101      	bne.n	8011c2a <_puts_r+0x6e>
 8011c26:	68ac      	ldr	r4, [r5, #8]
 8011c28:	e7da      	b.n	8011be0 <_puts_r+0x24>
 8011c2a:	4b1a      	ldr	r3, [pc, #104]	; (8011c94 <_puts_r+0xd8>)
 8011c2c:	429c      	cmp	r4, r3
 8011c2e:	bf08      	it	eq
 8011c30:	68ec      	ldreq	r4, [r5, #12]
 8011c32:	e7d5      	b.n	8011be0 <_puts_r+0x24>
 8011c34:	4621      	mov	r1, r4
 8011c36:	4628      	mov	r0, r5
 8011c38:	f000 fa0a 	bl	8012050 <__swsetup_r>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	d0dd      	beq.n	8011bfc <_puts_r+0x40>
 8011c40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011c44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c46:	07da      	lsls	r2, r3, #31
 8011c48:	d405      	bmi.n	8011c56 <_puts_r+0x9a>
 8011c4a:	89a3      	ldrh	r3, [r4, #12]
 8011c4c:	059b      	lsls	r3, r3, #22
 8011c4e:	d402      	bmi.n	8011c56 <_puts_r+0x9a>
 8011c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c52:	f000 fc24 	bl	801249e <__retarget_lock_release_recursive>
 8011c56:	4628      	mov	r0, r5
 8011c58:	bd70      	pop	{r4, r5, r6, pc}
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	da04      	bge.n	8011c68 <_puts_r+0xac>
 8011c5e:	69a2      	ldr	r2, [r4, #24]
 8011c60:	429a      	cmp	r2, r3
 8011c62:	dc06      	bgt.n	8011c72 <_puts_r+0xb6>
 8011c64:	290a      	cmp	r1, #10
 8011c66:	d004      	beq.n	8011c72 <_puts_r+0xb6>
 8011c68:	6823      	ldr	r3, [r4, #0]
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	6022      	str	r2, [r4, #0]
 8011c6e:	7019      	strb	r1, [r3, #0]
 8011c70:	e7c5      	b.n	8011bfe <_puts_r+0x42>
 8011c72:	4622      	mov	r2, r4
 8011c74:	4628      	mov	r0, r5
 8011c76:	f000 f999 	bl	8011fac <__swbuf_r>
 8011c7a:	3001      	adds	r0, #1
 8011c7c:	d1bf      	bne.n	8011bfe <_puts_r+0x42>
 8011c7e:	e7df      	b.n	8011c40 <_puts_r+0x84>
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	250a      	movs	r5, #10
 8011c84:	1c5a      	adds	r2, r3, #1
 8011c86:	6022      	str	r2, [r4, #0]
 8011c88:	701d      	strb	r5, [r3, #0]
 8011c8a:	e7db      	b.n	8011c44 <_puts_r+0x88>
 8011c8c:	08013d74 	.word	0x08013d74
 8011c90:	08013d94 	.word	0x08013d94
 8011c94:	08013d54 	.word	0x08013d54

08011c98 <puts>:
 8011c98:	4b02      	ldr	r3, [pc, #8]	; (8011ca4 <puts+0xc>)
 8011c9a:	4601      	mov	r1, r0
 8011c9c:	6818      	ldr	r0, [r3, #0]
 8011c9e:	f7ff bf8d 	b.w	8011bbc <_puts_r>
 8011ca2:	bf00      	nop
 8011ca4:	20000118 	.word	0x20000118

08011ca8 <_sbrk_r>:
 8011ca8:	b538      	push	{r3, r4, r5, lr}
 8011caa:	4d06      	ldr	r5, [pc, #24]	; (8011cc4 <_sbrk_r+0x1c>)
 8011cac:	2300      	movs	r3, #0
 8011cae:	4604      	mov	r4, r0
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	602b      	str	r3, [r5, #0]
 8011cb4:	f7f1 fea8 	bl	8003a08 <_sbrk>
 8011cb8:	1c43      	adds	r3, r0, #1
 8011cba:	d102      	bne.n	8011cc2 <_sbrk_r+0x1a>
 8011cbc:	682b      	ldr	r3, [r5, #0]
 8011cbe:	b103      	cbz	r3, 8011cc2 <_sbrk_r+0x1a>
 8011cc0:	6023      	str	r3, [r4, #0]
 8011cc2:	bd38      	pop	{r3, r4, r5, pc}
 8011cc4:	20003f70 	.word	0x20003f70

08011cc8 <setvbuf>:
 8011cc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011ccc:	461d      	mov	r5, r3
 8011cce:	4b5d      	ldr	r3, [pc, #372]	; (8011e44 <setvbuf+0x17c>)
 8011cd0:	681f      	ldr	r7, [r3, #0]
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	460e      	mov	r6, r1
 8011cd6:	4690      	mov	r8, r2
 8011cd8:	b127      	cbz	r7, 8011ce4 <setvbuf+0x1c>
 8011cda:	69bb      	ldr	r3, [r7, #24]
 8011cdc:	b913      	cbnz	r3, 8011ce4 <setvbuf+0x1c>
 8011cde:	4638      	mov	r0, r7
 8011ce0:	f000 fb3e 	bl	8012360 <__sinit>
 8011ce4:	4b58      	ldr	r3, [pc, #352]	; (8011e48 <setvbuf+0x180>)
 8011ce6:	429c      	cmp	r4, r3
 8011ce8:	d167      	bne.n	8011dba <setvbuf+0xf2>
 8011cea:	687c      	ldr	r4, [r7, #4]
 8011cec:	f1b8 0f02 	cmp.w	r8, #2
 8011cf0:	d006      	beq.n	8011d00 <setvbuf+0x38>
 8011cf2:	f1b8 0f01 	cmp.w	r8, #1
 8011cf6:	f200 809f 	bhi.w	8011e38 <setvbuf+0x170>
 8011cfa:	2d00      	cmp	r5, #0
 8011cfc:	f2c0 809c 	blt.w	8011e38 <setvbuf+0x170>
 8011d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011d02:	07db      	lsls	r3, r3, #31
 8011d04:	d405      	bmi.n	8011d12 <setvbuf+0x4a>
 8011d06:	89a3      	ldrh	r3, [r4, #12]
 8011d08:	0598      	lsls	r0, r3, #22
 8011d0a:	d402      	bmi.n	8011d12 <setvbuf+0x4a>
 8011d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d0e:	f000 fbc5 	bl	801249c <__retarget_lock_acquire_recursive>
 8011d12:	4621      	mov	r1, r4
 8011d14:	4638      	mov	r0, r7
 8011d16:	f000 fa8f 	bl	8012238 <_fflush_r>
 8011d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d1c:	b141      	cbz	r1, 8011d30 <setvbuf+0x68>
 8011d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d22:	4299      	cmp	r1, r3
 8011d24:	d002      	beq.n	8011d2c <setvbuf+0x64>
 8011d26:	4638      	mov	r0, r7
 8011d28:	f7ff fe3a 	bl	80119a0 <_free_r>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	6363      	str	r3, [r4, #52]	; 0x34
 8011d30:	2300      	movs	r3, #0
 8011d32:	61a3      	str	r3, [r4, #24]
 8011d34:	6063      	str	r3, [r4, #4]
 8011d36:	89a3      	ldrh	r3, [r4, #12]
 8011d38:	0619      	lsls	r1, r3, #24
 8011d3a:	d503      	bpl.n	8011d44 <setvbuf+0x7c>
 8011d3c:	6921      	ldr	r1, [r4, #16]
 8011d3e:	4638      	mov	r0, r7
 8011d40:	f7ff fe2e 	bl	80119a0 <_free_r>
 8011d44:	89a3      	ldrh	r3, [r4, #12]
 8011d46:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8011d4a:	f023 0303 	bic.w	r3, r3, #3
 8011d4e:	f1b8 0f02 	cmp.w	r8, #2
 8011d52:	81a3      	strh	r3, [r4, #12]
 8011d54:	d06c      	beq.n	8011e30 <setvbuf+0x168>
 8011d56:	ab01      	add	r3, sp, #4
 8011d58:	466a      	mov	r2, sp
 8011d5a:	4621      	mov	r1, r4
 8011d5c:	4638      	mov	r0, r7
 8011d5e:	f000 fb9f 	bl	80124a0 <__swhatbuf_r>
 8011d62:	89a3      	ldrh	r3, [r4, #12]
 8011d64:	4318      	orrs	r0, r3
 8011d66:	81a0      	strh	r0, [r4, #12]
 8011d68:	2d00      	cmp	r5, #0
 8011d6a:	d130      	bne.n	8011dce <setvbuf+0x106>
 8011d6c:	9d00      	ldr	r5, [sp, #0]
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f7ff fdf0 	bl	8011954 <malloc>
 8011d74:	4606      	mov	r6, r0
 8011d76:	2800      	cmp	r0, #0
 8011d78:	d155      	bne.n	8011e26 <setvbuf+0x15e>
 8011d7a:	f8dd 9000 	ldr.w	r9, [sp]
 8011d7e:	45a9      	cmp	r9, r5
 8011d80:	d14a      	bne.n	8011e18 <setvbuf+0x150>
 8011d82:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011d86:	2200      	movs	r2, #0
 8011d88:	60a2      	str	r2, [r4, #8]
 8011d8a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8011d8e:	6022      	str	r2, [r4, #0]
 8011d90:	6122      	str	r2, [r4, #16]
 8011d92:	2201      	movs	r2, #1
 8011d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d98:	6162      	str	r2, [r4, #20]
 8011d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011d9c:	f043 0302 	orr.w	r3, r3, #2
 8011da0:	07d2      	lsls	r2, r2, #31
 8011da2:	81a3      	strh	r3, [r4, #12]
 8011da4:	d405      	bmi.n	8011db2 <setvbuf+0xea>
 8011da6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8011daa:	d102      	bne.n	8011db2 <setvbuf+0xea>
 8011dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dae:	f000 fb76 	bl	801249e <__retarget_lock_release_recursive>
 8011db2:	4628      	mov	r0, r5
 8011db4:	b003      	add	sp, #12
 8011db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011dba:	4b24      	ldr	r3, [pc, #144]	; (8011e4c <setvbuf+0x184>)
 8011dbc:	429c      	cmp	r4, r3
 8011dbe:	d101      	bne.n	8011dc4 <setvbuf+0xfc>
 8011dc0:	68bc      	ldr	r4, [r7, #8]
 8011dc2:	e793      	b.n	8011cec <setvbuf+0x24>
 8011dc4:	4b22      	ldr	r3, [pc, #136]	; (8011e50 <setvbuf+0x188>)
 8011dc6:	429c      	cmp	r4, r3
 8011dc8:	bf08      	it	eq
 8011dca:	68fc      	ldreq	r4, [r7, #12]
 8011dcc:	e78e      	b.n	8011cec <setvbuf+0x24>
 8011dce:	2e00      	cmp	r6, #0
 8011dd0:	d0cd      	beq.n	8011d6e <setvbuf+0xa6>
 8011dd2:	69bb      	ldr	r3, [r7, #24]
 8011dd4:	b913      	cbnz	r3, 8011ddc <setvbuf+0x114>
 8011dd6:	4638      	mov	r0, r7
 8011dd8:	f000 fac2 	bl	8012360 <__sinit>
 8011ddc:	f1b8 0f01 	cmp.w	r8, #1
 8011de0:	bf08      	it	eq
 8011de2:	89a3      	ldrheq	r3, [r4, #12]
 8011de4:	6026      	str	r6, [r4, #0]
 8011de6:	bf04      	itt	eq
 8011de8:	f043 0301 	orreq.w	r3, r3, #1
 8011dec:	81a3      	strheq	r3, [r4, #12]
 8011dee:	89a2      	ldrh	r2, [r4, #12]
 8011df0:	f012 0308 	ands.w	r3, r2, #8
 8011df4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8011df8:	d01c      	beq.n	8011e34 <setvbuf+0x16c>
 8011dfa:	07d3      	lsls	r3, r2, #31
 8011dfc:	bf41      	itttt	mi
 8011dfe:	2300      	movmi	r3, #0
 8011e00:	426d      	negmi	r5, r5
 8011e02:	60a3      	strmi	r3, [r4, #8]
 8011e04:	61a5      	strmi	r5, [r4, #24]
 8011e06:	bf58      	it	pl
 8011e08:	60a5      	strpl	r5, [r4, #8]
 8011e0a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8011e0c:	f015 0501 	ands.w	r5, r5, #1
 8011e10:	d115      	bne.n	8011e3e <setvbuf+0x176>
 8011e12:	f412 7f00 	tst.w	r2, #512	; 0x200
 8011e16:	e7c8      	b.n	8011daa <setvbuf+0xe2>
 8011e18:	4648      	mov	r0, r9
 8011e1a:	f7ff fd9b 	bl	8011954 <malloc>
 8011e1e:	4606      	mov	r6, r0
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d0ae      	beq.n	8011d82 <setvbuf+0xba>
 8011e24:	464d      	mov	r5, r9
 8011e26:	89a3      	ldrh	r3, [r4, #12]
 8011e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e2c:	81a3      	strh	r3, [r4, #12]
 8011e2e:	e7d0      	b.n	8011dd2 <setvbuf+0x10a>
 8011e30:	2500      	movs	r5, #0
 8011e32:	e7a8      	b.n	8011d86 <setvbuf+0xbe>
 8011e34:	60a3      	str	r3, [r4, #8]
 8011e36:	e7e8      	b.n	8011e0a <setvbuf+0x142>
 8011e38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011e3c:	e7b9      	b.n	8011db2 <setvbuf+0xea>
 8011e3e:	2500      	movs	r5, #0
 8011e40:	e7b7      	b.n	8011db2 <setvbuf+0xea>
 8011e42:	bf00      	nop
 8011e44:	20000118 	.word	0x20000118
 8011e48:	08013d74 	.word	0x08013d74
 8011e4c:	08013d94 	.word	0x08013d94
 8011e50:	08013d54 	.word	0x08013d54

08011e54 <siprintf>:
 8011e54:	b40e      	push	{r1, r2, r3}
 8011e56:	b500      	push	{lr}
 8011e58:	b09c      	sub	sp, #112	; 0x70
 8011e5a:	ab1d      	add	r3, sp, #116	; 0x74
 8011e5c:	9002      	str	r0, [sp, #8]
 8011e5e:	9006      	str	r0, [sp, #24]
 8011e60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e64:	4809      	ldr	r0, [pc, #36]	; (8011e8c <siprintf+0x38>)
 8011e66:	9107      	str	r1, [sp, #28]
 8011e68:	9104      	str	r1, [sp, #16]
 8011e6a:	4909      	ldr	r1, [pc, #36]	; (8011e90 <siprintf+0x3c>)
 8011e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e70:	9105      	str	r1, [sp, #20]
 8011e72:	6800      	ldr	r0, [r0, #0]
 8011e74:	9301      	str	r3, [sp, #4]
 8011e76:	a902      	add	r1, sp, #8
 8011e78:	f000 fbe0 	bl	801263c <_svfiprintf_r>
 8011e7c:	9b02      	ldr	r3, [sp, #8]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	701a      	strb	r2, [r3, #0]
 8011e82:	b01c      	add	sp, #112	; 0x70
 8011e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e88:	b003      	add	sp, #12
 8011e8a:	4770      	bx	lr
 8011e8c:	20000118 	.word	0x20000118
 8011e90:	ffff0208 	.word	0xffff0208

08011e94 <_strtol_l.constprop.0>:
 8011e94:	2b01      	cmp	r3, #1
 8011e96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e9a:	d001      	beq.n	8011ea0 <_strtol_l.constprop.0+0xc>
 8011e9c:	2b24      	cmp	r3, #36	; 0x24
 8011e9e:	d906      	bls.n	8011eae <_strtol_l.constprop.0+0x1a>
 8011ea0:	f7ff fd2e 	bl	8011900 <__errno>
 8011ea4:	2316      	movs	r3, #22
 8011ea6:	6003      	str	r3, [r0, #0]
 8011ea8:	2000      	movs	r0, #0
 8011eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011f94 <_strtol_l.constprop.0+0x100>
 8011eb2:	460d      	mov	r5, r1
 8011eb4:	462e      	mov	r6, r5
 8011eb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011eba:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011ebe:	f017 0708 	ands.w	r7, r7, #8
 8011ec2:	d1f7      	bne.n	8011eb4 <_strtol_l.constprop.0+0x20>
 8011ec4:	2c2d      	cmp	r4, #45	; 0x2d
 8011ec6:	d132      	bne.n	8011f2e <_strtol_l.constprop.0+0x9a>
 8011ec8:	782c      	ldrb	r4, [r5, #0]
 8011eca:	2701      	movs	r7, #1
 8011ecc:	1cb5      	adds	r5, r6, #2
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d05b      	beq.n	8011f8a <_strtol_l.constprop.0+0xf6>
 8011ed2:	2b10      	cmp	r3, #16
 8011ed4:	d109      	bne.n	8011eea <_strtol_l.constprop.0+0x56>
 8011ed6:	2c30      	cmp	r4, #48	; 0x30
 8011ed8:	d107      	bne.n	8011eea <_strtol_l.constprop.0+0x56>
 8011eda:	782c      	ldrb	r4, [r5, #0]
 8011edc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011ee0:	2c58      	cmp	r4, #88	; 0x58
 8011ee2:	d14d      	bne.n	8011f80 <_strtol_l.constprop.0+0xec>
 8011ee4:	786c      	ldrb	r4, [r5, #1]
 8011ee6:	2310      	movs	r3, #16
 8011ee8:	3502      	adds	r5, #2
 8011eea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011eee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011ef2:	f04f 0c00 	mov.w	ip, #0
 8011ef6:	fbb8 f9f3 	udiv	r9, r8, r3
 8011efa:	4666      	mov	r6, ip
 8011efc:	fb03 8a19 	mls	sl, r3, r9, r8
 8011f00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011f04:	f1be 0f09 	cmp.w	lr, #9
 8011f08:	d816      	bhi.n	8011f38 <_strtol_l.constprop.0+0xa4>
 8011f0a:	4674      	mov	r4, lr
 8011f0c:	42a3      	cmp	r3, r4
 8011f0e:	dd24      	ble.n	8011f5a <_strtol_l.constprop.0+0xc6>
 8011f10:	f1bc 0f00 	cmp.w	ip, #0
 8011f14:	db1e      	blt.n	8011f54 <_strtol_l.constprop.0+0xc0>
 8011f16:	45b1      	cmp	r9, r6
 8011f18:	d31c      	bcc.n	8011f54 <_strtol_l.constprop.0+0xc0>
 8011f1a:	d101      	bne.n	8011f20 <_strtol_l.constprop.0+0x8c>
 8011f1c:	45a2      	cmp	sl, r4
 8011f1e:	db19      	blt.n	8011f54 <_strtol_l.constprop.0+0xc0>
 8011f20:	fb06 4603 	mla	r6, r6, r3, r4
 8011f24:	f04f 0c01 	mov.w	ip, #1
 8011f28:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f2c:	e7e8      	b.n	8011f00 <_strtol_l.constprop.0+0x6c>
 8011f2e:	2c2b      	cmp	r4, #43	; 0x2b
 8011f30:	bf04      	itt	eq
 8011f32:	782c      	ldrbeq	r4, [r5, #0]
 8011f34:	1cb5      	addeq	r5, r6, #2
 8011f36:	e7ca      	b.n	8011ece <_strtol_l.constprop.0+0x3a>
 8011f38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011f3c:	f1be 0f19 	cmp.w	lr, #25
 8011f40:	d801      	bhi.n	8011f46 <_strtol_l.constprop.0+0xb2>
 8011f42:	3c37      	subs	r4, #55	; 0x37
 8011f44:	e7e2      	b.n	8011f0c <_strtol_l.constprop.0+0x78>
 8011f46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011f4a:	f1be 0f19 	cmp.w	lr, #25
 8011f4e:	d804      	bhi.n	8011f5a <_strtol_l.constprop.0+0xc6>
 8011f50:	3c57      	subs	r4, #87	; 0x57
 8011f52:	e7db      	b.n	8011f0c <_strtol_l.constprop.0+0x78>
 8011f54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011f58:	e7e6      	b.n	8011f28 <_strtol_l.constprop.0+0x94>
 8011f5a:	f1bc 0f00 	cmp.w	ip, #0
 8011f5e:	da05      	bge.n	8011f6c <_strtol_l.constprop.0+0xd8>
 8011f60:	2322      	movs	r3, #34	; 0x22
 8011f62:	6003      	str	r3, [r0, #0]
 8011f64:	4646      	mov	r6, r8
 8011f66:	b942      	cbnz	r2, 8011f7a <_strtol_l.constprop.0+0xe6>
 8011f68:	4630      	mov	r0, r6
 8011f6a:	e79e      	b.n	8011eaa <_strtol_l.constprop.0+0x16>
 8011f6c:	b107      	cbz	r7, 8011f70 <_strtol_l.constprop.0+0xdc>
 8011f6e:	4276      	negs	r6, r6
 8011f70:	2a00      	cmp	r2, #0
 8011f72:	d0f9      	beq.n	8011f68 <_strtol_l.constprop.0+0xd4>
 8011f74:	f1bc 0f00 	cmp.w	ip, #0
 8011f78:	d000      	beq.n	8011f7c <_strtol_l.constprop.0+0xe8>
 8011f7a:	1e69      	subs	r1, r5, #1
 8011f7c:	6011      	str	r1, [r2, #0]
 8011f7e:	e7f3      	b.n	8011f68 <_strtol_l.constprop.0+0xd4>
 8011f80:	2430      	movs	r4, #48	; 0x30
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1b1      	bne.n	8011eea <_strtol_l.constprop.0+0x56>
 8011f86:	2308      	movs	r3, #8
 8011f88:	e7af      	b.n	8011eea <_strtol_l.constprop.0+0x56>
 8011f8a:	2c30      	cmp	r4, #48	; 0x30
 8011f8c:	d0a5      	beq.n	8011eda <_strtol_l.constprop.0+0x46>
 8011f8e:	230a      	movs	r3, #10
 8011f90:	e7ab      	b.n	8011eea <_strtol_l.constprop.0+0x56>
 8011f92:	bf00      	nop
 8011f94:	08013c51 	.word	0x08013c51

08011f98 <strtol>:
 8011f98:	4613      	mov	r3, r2
 8011f9a:	460a      	mov	r2, r1
 8011f9c:	4601      	mov	r1, r0
 8011f9e:	4802      	ldr	r0, [pc, #8]	; (8011fa8 <strtol+0x10>)
 8011fa0:	6800      	ldr	r0, [r0, #0]
 8011fa2:	f7ff bf77 	b.w	8011e94 <_strtol_l.constprop.0>
 8011fa6:	bf00      	nop
 8011fa8:	20000118 	.word	0x20000118

08011fac <__swbuf_r>:
 8011fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fae:	460e      	mov	r6, r1
 8011fb0:	4614      	mov	r4, r2
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	b118      	cbz	r0, 8011fbe <__swbuf_r+0x12>
 8011fb6:	6983      	ldr	r3, [r0, #24]
 8011fb8:	b90b      	cbnz	r3, 8011fbe <__swbuf_r+0x12>
 8011fba:	f000 f9d1 	bl	8012360 <__sinit>
 8011fbe:	4b21      	ldr	r3, [pc, #132]	; (8012044 <__swbuf_r+0x98>)
 8011fc0:	429c      	cmp	r4, r3
 8011fc2:	d12b      	bne.n	801201c <__swbuf_r+0x70>
 8011fc4:	686c      	ldr	r4, [r5, #4]
 8011fc6:	69a3      	ldr	r3, [r4, #24]
 8011fc8:	60a3      	str	r3, [r4, #8]
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	071a      	lsls	r2, r3, #28
 8011fce:	d52f      	bpl.n	8012030 <__swbuf_r+0x84>
 8011fd0:	6923      	ldr	r3, [r4, #16]
 8011fd2:	b36b      	cbz	r3, 8012030 <__swbuf_r+0x84>
 8011fd4:	6923      	ldr	r3, [r4, #16]
 8011fd6:	6820      	ldr	r0, [r4, #0]
 8011fd8:	1ac0      	subs	r0, r0, r3
 8011fda:	6963      	ldr	r3, [r4, #20]
 8011fdc:	b2f6      	uxtb	r6, r6
 8011fde:	4283      	cmp	r3, r0
 8011fe0:	4637      	mov	r7, r6
 8011fe2:	dc04      	bgt.n	8011fee <__swbuf_r+0x42>
 8011fe4:	4621      	mov	r1, r4
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	f000 f926 	bl	8012238 <_fflush_r>
 8011fec:	bb30      	cbnz	r0, 801203c <__swbuf_r+0x90>
 8011fee:	68a3      	ldr	r3, [r4, #8]
 8011ff0:	3b01      	subs	r3, #1
 8011ff2:	60a3      	str	r3, [r4, #8]
 8011ff4:	6823      	ldr	r3, [r4, #0]
 8011ff6:	1c5a      	adds	r2, r3, #1
 8011ff8:	6022      	str	r2, [r4, #0]
 8011ffa:	701e      	strb	r6, [r3, #0]
 8011ffc:	6963      	ldr	r3, [r4, #20]
 8011ffe:	3001      	adds	r0, #1
 8012000:	4283      	cmp	r3, r0
 8012002:	d004      	beq.n	801200e <__swbuf_r+0x62>
 8012004:	89a3      	ldrh	r3, [r4, #12]
 8012006:	07db      	lsls	r3, r3, #31
 8012008:	d506      	bpl.n	8012018 <__swbuf_r+0x6c>
 801200a:	2e0a      	cmp	r6, #10
 801200c:	d104      	bne.n	8012018 <__swbuf_r+0x6c>
 801200e:	4621      	mov	r1, r4
 8012010:	4628      	mov	r0, r5
 8012012:	f000 f911 	bl	8012238 <_fflush_r>
 8012016:	b988      	cbnz	r0, 801203c <__swbuf_r+0x90>
 8012018:	4638      	mov	r0, r7
 801201a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801201c:	4b0a      	ldr	r3, [pc, #40]	; (8012048 <__swbuf_r+0x9c>)
 801201e:	429c      	cmp	r4, r3
 8012020:	d101      	bne.n	8012026 <__swbuf_r+0x7a>
 8012022:	68ac      	ldr	r4, [r5, #8]
 8012024:	e7cf      	b.n	8011fc6 <__swbuf_r+0x1a>
 8012026:	4b09      	ldr	r3, [pc, #36]	; (801204c <__swbuf_r+0xa0>)
 8012028:	429c      	cmp	r4, r3
 801202a:	bf08      	it	eq
 801202c:	68ec      	ldreq	r4, [r5, #12]
 801202e:	e7ca      	b.n	8011fc6 <__swbuf_r+0x1a>
 8012030:	4621      	mov	r1, r4
 8012032:	4628      	mov	r0, r5
 8012034:	f000 f80c 	bl	8012050 <__swsetup_r>
 8012038:	2800      	cmp	r0, #0
 801203a:	d0cb      	beq.n	8011fd4 <__swbuf_r+0x28>
 801203c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012040:	e7ea      	b.n	8012018 <__swbuf_r+0x6c>
 8012042:	bf00      	nop
 8012044:	08013d74 	.word	0x08013d74
 8012048:	08013d94 	.word	0x08013d94
 801204c:	08013d54 	.word	0x08013d54

08012050 <__swsetup_r>:
 8012050:	4b32      	ldr	r3, [pc, #200]	; (801211c <__swsetup_r+0xcc>)
 8012052:	b570      	push	{r4, r5, r6, lr}
 8012054:	681d      	ldr	r5, [r3, #0]
 8012056:	4606      	mov	r6, r0
 8012058:	460c      	mov	r4, r1
 801205a:	b125      	cbz	r5, 8012066 <__swsetup_r+0x16>
 801205c:	69ab      	ldr	r3, [r5, #24]
 801205e:	b913      	cbnz	r3, 8012066 <__swsetup_r+0x16>
 8012060:	4628      	mov	r0, r5
 8012062:	f000 f97d 	bl	8012360 <__sinit>
 8012066:	4b2e      	ldr	r3, [pc, #184]	; (8012120 <__swsetup_r+0xd0>)
 8012068:	429c      	cmp	r4, r3
 801206a:	d10f      	bne.n	801208c <__swsetup_r+0x3c>
 801206c:	686c      	ldr	r4, [r5, #4]
 801206e:	89a3      	ldrh	r3, [r4, #12]
 8012070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012074:	0719      	lsls	r1, r3, #28
 8012076:	d42c      	bmi.n	80120d2 <__swsetup_r+0x82>
 8012078:	06dd      	lsls	r5, r3, #27
 801207a:	d411      	bmi.n	80120a0 <__swsetup_r+0x50>
 801207c:	2309      	movs	r3, #9
 801207e:	6033      	str	r3, [r6, #0]
 8012080:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012084:	81a3      	strh	r3, [r4, #12]
 8012086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801208a:	e03e      	b.n	801210a <__swsetup_r+0xba>
 801208c:	4b25      	ldr	r3, [pc, #148]	; (8012124 <__swsetup_r+0xd4>)
 801208e:	429c      	cmp	r4, r3
 8012090:	d101      	bne.n	8012096 <__swsetup_r+0x46>
 8012092:	68ac      	ldr	r4, [r5, #8]
 8012094:	e7eb      	b.n	801206e <__swsetup_r+0x1e>
 8012096:	4b24      	ldr	r3, [pc, #144]	; (8012128 <__swsetup_r+0xd8>)
 8012098:	429c      	cmp	r4, r3
 801209a:	bf08      	it	eq
 801209c:	68ec      	ldreq	r4, [r5, #12]
 801209e:	e7e6      	b.n	801206e <__swsetup_r+0x1e>
 80120a0:	0758      	lsls	r0, r3, #29
 80120a2:	d512      	bpl.n	80120ca <__swsetup_r+0x7a>
 80120a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120a6:	b141      	cbz	r1, 80120ba <__swsetup_r+0x6a>
 80120a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120ac:	4299      	cmp	r1, r3
 80120ae:	d002      	beq.n	80120b6 <__swsetup_r+0x66>
 80120b0:	4630      	mov	r0, r6
 80120b2:	f7ff fc75 	bl	80119a0 <_free_r>
 80120b6:	2300      	movs	r3, #0
 80120b8:	6363      	str	r3, [r4, #52]	; 0x34
 80120ba:	89a3      	ldrh	r3, [r4, #12]
 80120bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80120c0:	81a3      	strh	r3, [r4, #12]
 80120c2:	2300      	movs	r3, #0
 80120c4:	6063      	str	r3, [r4, #4]
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	6023      	str	r3, [r4, #0]
 80120ca:	89a3      	ldrh	r3, [r4, #12]
 80120cc:	f043 0308 	orr.w	r3, r3, #8
 80120d0:	81a3      	strh	r3, [r4, #12]
 80120d2:	6923      	ldr	r3, [r4, #16]
 80120d4:	b94b      	cbnz	r3, 80120ea <__swsetup_r+0x9a>
 80120d6:	89a3      	ldrh	r3, [r4, #12]
 80120d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120e0:	d003      	beq.n	80120ea <__swsetup_r+0x9a>
 80120e2:	4621      	mov	r1, r4
 80120e4:	4630      	mov	r0, r6
 80120e6:	f000 fa01 	bl	80124ec <__smakebuf_r>
 80120ea:	89a0      	ldrh	r0, [r4, #12]
 80120ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80120f0:	f010 0301 	ands.w	r3, r0, #1
 80120f4:	d00a      	beq.n	801210c <__swsetup_r+0xbc>
 80120f6:	2300      	movs	r3, #0
 80120f8:	60a3      	str	r3, [r4, #8]
 80120fa:	6963      	ldr	r3, [r4, #20]
 80120fc:	425b      	negs	r3, r3
 80120fe:	61a3      	str	r3, [r4, #24]
 8012100:	6923      	ldr	r3, [r4, #16]
 8012102:	b943      	cbnz	r3, 8012116 <__swsetup_r+0xc6>
 8012104:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012108:	d1ba      	bne.n	8012080 <__swsetup_r+0x30>
 801210a:	bd70      	pop	{r4, r5, r6, pc}
 801210c:	0781      	lsls	r1, r0, #30
 801210e:	bf58      	it	pl
 8012110:	6963      	ldrpl	r3, [r4, #20]
 8012112:	60a3      	str	r3, [r4, #8]
 8012114:	e7f4      	b.n	8012100 <__swsetup_r+0xb0>
 8012116:	2000      	movs	r0, #0
 8012118:	e7f7      	b.n	801210a <__swsetup_r+0xba>
 801211a:	bf00      	nop
 801211c:	20000118 	.word	0x20000118
 8012120:	08013d74 	.word	0x08013d74
 8012124:	08013d94 	.word	0x08013d94
 8012128:	08013d54 	.word	0x08013d54

0801212c <__sflush_r>:
 801212c:	898a      	ldrh	r2, [r1, #12]
 801212e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012132:	4605      	mov	r5, r0
 8012134:	0710      	lsls	r0, r2, #28
 8012136:	460c      	mov	r4, r1
 8012138:	d458      	bmi.n	80121ec <__sflush_r+0xc0>
 801213a:	684b      	ldr	r3, [r1, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	dc05      	bgt.n	801214c <__sflush_r+0x20>
 8012140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012142:	2b00      	cmp	r3, #0
 8012144:	dc02      	bgt.n	801214c <__sflush_r+0x20>
 8012146:	2000      	movs	r0, #0
 8012148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801214c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801214e:	2e00      	cmp	r6, #0
 8012150:	d0f9      	beq.n	8012146 <__sflush_r+0x1a>
 8012152:	2300      	movs	r3, #0
 8012154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012158:	682f      	ldr	r7, [r5, #0]
 801215a:	602b      	str	r3, [r5, #0]
 801215c:	d032      	beq.n	80121c4 <__sflush_r+0x98>
 801215e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	075a      	lsls	r2, r3, #29
 8012164:	d505      	bpl.n	8012172 <__sflush_r+0x46>
 8012166:	6863      	ldr	r3, [r4, #4]
 8012168:	1ac0      	subs	r0, r0, r3
 801216a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801216c:	b10b      	cbz	r3, 8012172 <__sflush_r+0x46>
 801216e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012170:	1ac0      	subs	r0, r0, r3
 8012172:	2300      	movs	r3, #0
 8012174:	4602      	mov	r2, r0
 8012176:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012178:	6a21      	ldr	r1, [r4, #32]
 801217a:	4628      	mov	r0, r5
 801217c:	47b0      	blx	r6
 801217e:	1c43      	adds	r3, r0, #1
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	d106      	bne.n	8012192 <__sflush_r+0x66>
 8012184:	6829      	ldr	r1, [r5, #0]
 8012186:	291d      	cmp	r1, #29
 8012188:	d82c      	bhi.n	80121e4 <__sflush_r+0xb8>
 801218a:	4a2a      	ldr	r2, [pc, #168]	; (8012234 <__sflush_r+0x108>)
 801218c:	40ca      	lsrs	r2, r1
 801218e:	07d6      	lsls	r6, r2, #31
 8012190:	d528      	bpl.n	80121e4 <__sflush_r+0xb8>
 8012192:	2200      	movs	r2, #0
 8012194:	6062      	str	r2, [r4, #4]
 8012196:	04d9      	lsls	r1, r3, #19
 8012198:	6922      	ldr	r2, [r4, #16]
 801219a:	6022      	str	r2, [r4, #0]
 801219c:	d504      	bpl.n	80121a8 <__sflush_r+0x7c>
 801219e:	1c42      	adds	r2, r0, #1
 80121a0:	d101      	bne.n	80121a6 <__sflush_r+0x7a>
 80121a2:	682b      	ldr	r3, [r5, #0]
 80121a4:	b903      	cbnz	r3, 80121a8 <__sflush_r+0x7c>
 80121a6:	6560      	str	r0, [r4, #84]	; 0x54
 80121a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121aa:	602f      	str	r7, [r5, #0]
 80121ac:	2900      	cmp	r1, #0
 80121ae:	d0ca      	beq.n	8012146 <__sflush_r+0x1a>
 80121b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121b4:	4299      	cmp	r1, r3
 80121b6:	d002      	beq.n	80121be <__sflush_r+0x92>
 80121b8:	4628      	mov	r0, r5
 80121ba:	f7ff fbf1 	bl	80119a0 <_free_r>
 80121be:	2000      	movs	r0, #0
 80121c0:	6360      	str	r0, [r4, #52]	; 0x34
 80121c2:	e7c1      	b.n	8012148 <__sflush_r+0x1c>
 80121c4:	6a21      	ldr	r1, [r4, #32]
 80121c6:	2301      	movs	r3, #1
 80121c8:	4628      	mov	r0, r5
 80121ca:	47b0      	blx	r6
 80121cc:	1c41      	adds	r1, r0, #1
 80121ce:	d1c7      	bne.n	8012160 <__sflush_r+0x34>
 80121d0:	682b      	ldr	r3, [r5, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d0c4      	beq.n	8012160 <__sflush_r+0x34>
 80121d6:	2b1d      	cmp	r3, #29
 80121d8:	d001      	beq.n	80121de <__sflush_r+0xb2>
 80121da:	2b16      	cmp	r3, #22
 80121dc:	d101      	bne.n	80121e2 <__sflush_r+0xb6>
 80121de:	602f      	str	r7, [r5, #0]
 80121e0:	e7b1      	b.n	8012146 <__sflush_r+0x1a>
 80121e2:	89a3      	ldrh	r3, [r4, #12]
 80121e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121e8:	81a3      	strh	r3, [r4, #12]
 80121ea:	e7ad      	b.n	8012148 <__sflush_r+0x1c>
 80121ec:	690f      	ldr	r7, [r1, #16]
 80121ee:	2f00      	cmp	r7, #0
 80121f0:	d0a9      	beq.n	8012146 <__sflush_r+0x1a>
 80121f2:	0793      	lsls	r3, r2, #30
 80121f4:	680e      	ldr	r6, [r1, #0]
 80121f6:	bf08      	it	eq
 80121f8:	694b      	ldreq	r3, [r1, #20]
 80121fa:	600f      	str	r7, [r1, #0]
 80121fc:	bf18      	it	ne
 80121fe:	2300      	movne	r3, #0
 8012200:	eba6 0807 	sub.w	r8, r6, r7
 8012204:	608b      	str	r3, [r1, #8]
 8012206:	f1b8 0f00 	cmp.w	r8, #0
 801220a:	dd9c      	ble.n	8012146 <__sflush_r+0x1a>
 801220c:	6a21      	ldr	r1, [r4, #32]
 801220e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012210:	4643      	mov	r3, r8
 8012212:	463a      	mov	r2, r7
 8012214:	4628      	mov	r0, r5
 8012216:	47b0      	blx	r6
 8012218:	2800      	cmp	r0, #0
 801221a:	dc06      	bgt.n	801222a <__sflush_r+0xfe>
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012222:	81a3      	strh	r3, [r4, #12]
 8012224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012228:	e78e      	b.n	8012148 <__sflush_r+0x1c>
 801222a:	4407      	add	r7, r0
 801222c:	eba8 0800 	sub.w	r8, r8, r0
 8012230:	e7e9      	b.n	8012206 <__sflush_r+0xda>
 8012232:	bf00      	nop
 8012234:	20400001 	.word	0x20400001

08012238 <_fflush_r>:
 8012238:	b538      	push	{r3, r4, r5, lr}
 801223a:	690b      	ldr	r3, [r1, #16]
 801223c:	4605      	mov	r5, r0
 801223e:	460c      	mov	r4, r1
 8012240:	b913      	cbnz	r3, 8012248 <_fflush_r+0x10>
 8012242:	2500      	movs	r5, #0
 8012244:	4628      	mov	r0, r5
 8012246:	bd38      	pop	{r3, r4, r5, pc}
 8012248:	b118      	cbz	r0, 8012252 <_fflush_r+0x1a>
 801224a:	6983      	ldr	r3, [r0, #24]
 801224c:	b90b      	cbnz	r3, 8012252 <_fflush_r+0x1a>
 801224e:	f000 f887 	bl	8012360 <__sinit>
 8012252:	4b14      	ldr	r3, [pc, #80]	; (80122a4 <_fflush_r+0x6c>)
 8012254:	429c      	cmp	r4, r3
 8012256:	d11b      	bne.n	8012290 <_fflush_r+0x58>
 8012258:	686c      	ldr	r4, [r5, #4]
 801225a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d0ef      	beq.n	8012242 <_fflush_r+0xa>
 8012262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012264:	07d0      	lsls	r0, r2, #31
 8012266:	d404      	bmi.n	8012272 <_fflush_r+0x3a>
 8012268:	0599      	lsls	r1, r3, #22
 801226a:	d402      	bmi.n	8012272 <_fflush_r+0x3a>
 801226c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801226e:	f000 f915 	bl	801249c <__retarget_lock_acquire_recursive>
 8012272:	4628      	mov	r0, r5
 8012274:	4621      	mov	r1, r4
 8012276:	f7ff ff59 	bl	801212c <__sflush_r>
 801227a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801227c:	07da      	lsls	r2, r3, #31
 801227e:	4605      	mov	r5, r0
 8012280:	d4e0      	bmi.n	8012244 <_fflush_r+0xc>
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	059b      	lsls	r3, r3, #22
 8012286:	d4dd      	bmi.n	8012244 <_fflush_r+0xc>
 8012288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801228a:	f000 f908 	bl	801249e <__retarget_lock_release_recursive>
 801228e:	e7d9      	b.n	8012244 <_fflush_r+0xc>
 8012290:	4b05      	ldr	r3, [pc, #20]	; (80122a8 <_fflush_r+0x70>)
 8012292:	429c      	cmp	r4, r3
 8012294:	d101      	bne.n	801229a <_fflush_r+0x62>
 8012296:	68ac      	ldr	r4, [r5, #8]
 8012298:	e7df      	b.n	801225a <_fflush_r+0x22>
 801229a:	4b04      	ldr	r3, [pc, #16]	; (80122ac <_fflush_r+0x74>)
 801229c:	429c      	cmp	r4, r3
 801229e:	bf08      	it	eq
 80122a0:	68ec      	ldreq	r4, [r5, #12]
 80122a2:	e7da      	b.n	801225a <_fflush_r+0x22>
 80122a4:	08013d74 	.word	0x08013d74
 80122a8:	08013d94 	.word	0x08013d94
 80122ac:	08013d54 	.word	0x08013d54

080122b0 <std>:
 80122b0:	2300      	movs	r3, #0
 80122b2:	b510      	push	{r4, lr}
 80122b4:	4604      	mov	r4, r0
 80122b6:	e9c0 3300 	strd	r3, r3, [r0]
 80122ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122be:	6083      	str	r3, [r0, #8]
 80122c0:	8181      	strh	r1, [r0, #12]
 80122c2:	6643      	str	r3, [r0, #100]	; 0x64
 80122c4:	81c2      	strh	r2, [r0, #14]
 80122c6:	6183      	str	r3, [r0, #24]
 80122c8:	4619      	mov	r1, r3
 80122ca:	2208      	movs	r2, #8
 80122cc:	305c      	adds	r0, #92	; 0x5c
 80122ce:	f7ff fb5f 	bl	8011990 <memset>
 80122d2:	4b05      	ldr	r3, [pc, #20]	; (80122e8 <std+0x38>)
 80122d4:	6263      	str	r3, [r4, #36]	; 0x24
 80122d6:	4b05      	ldr	r3, [pc, #20]	; (80122ec <std+0x3c>)
 80122d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80122da:	4b05      	ldr	r3, [pc, #20]	; (80122f0 <std+0x40>)
 80122dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80122de:	4b05      	ldr	r3, [pc, #20]	; (80122f4 <std+0x44>)
 80122e0:	6224      	str	r4, [r4, #32]
 80122e2:	6323      	str	r3, [r4, #48]	; 0x30
 80122e4:	bd10      	pop	{r4, pc}
 80122e6:	bf00      	nop
 80122e8:	08012ea9 	.word	0x08012ea9
 80122ec:	08012ecb 	.word	0x08012ecb
 80122f0:	08012f03 	.word	0x08012f03
 80122f4:	08012f27 	.word	0x08012f27

080122f8 <_cleanup_r>:
 80122f8:	4901      	ldr	r1, [pc, #4]	; (8012300 <_cleanup_r+0x8>)
 80122fa:	f000 b8af 	b.w	801245c <_fwalk_reent>
 80122fe:	bf00      	nop
 8012300:	08012239 	.word	0x08012239

08012304 <__sfmoreglue>:
 8012304:	b570      	push	{r4, r5, r6, lr}
 8012306:	2268      	movs	r2, #104	; 0x68
 8012308:	1e4d      	subs	r5, r1, #1
 801230a:	4355      	muls	r5, r2
 801230c:	460e      	mov	r6, r1
 801230e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012312:	f7ff fbb1 	bl	8011a78 <_malloc_r>
 8012316:	4604      	mov	r4, r0
 8012318:	b140      	cbz	r0, 801232c <__sfmoreglue+0x28>
 801231a:	2100      	movs	r1, #0
 801231c:	e9c0 1600 	strd	r1, r6, [r0]
 8012320:	300c      	adds	r0, #12
 8012322:	60a0      	str	r0, [r4, #8]
 8012324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012328:	f7ff fb32 	bl	8011990 <memset>
 801232c:	4620      	mov	r0, r4
 801232e:	bd70      	pop	{r4, r5, r6, pc}

08012330 <__sfp_lock_acquire>:
 8012330:	4801      	ldr	r0, [pc, #4]	; (8012338 <__sfp_lock_acquire+0x8>)
 8012332:	f000 b8b3 	b.w	801249c <__retarget_lock_acquire_recursive>
 8012336:	bf00      	nop
 8012338:	20003f6d 	.word	0x20003f6d

0801233c <__sfp_lock_release>:
 801233c:	4801      	ldr	r0, [pc, #4]	; (8012344 <__sfp_lock_release+0x8>)
 801233e:	f000 b8ae 	b.w	801249e <__retarget_lock_release_recursive>
 8012342:	bf00      	nop
 8012344:	20003f6d 	.word	0x20003f6d

08012348 <__sinit_lock_acquire>:
 8012348:	4801      	ldr	r0, [pc, #4]	; (8012350 <__sinit_lock_acquire+0x8>)
 801234a:	f000 b8a7 	b.w	801249c <__retarget_lock_acquire_recursive>
 801234e:	bf00      	nop
 8012350:	20003f6e 	.word	0x20003f6e

08012354 <__sinit_lock_release>:
 8012354:	4801      	ldr	r0, [pc, #4]	; (801235c <__sinit_lock_release+0x8>)
 8012356:	f000 b8a2 	b.w	801249e <__retarget_lock_release_recursive>
 801235a:	bf00      	nop
 801235c:	20003f6e 	.word	0x20003f6e

08012360 <__sinit>:
 8012360:	b510      	push	{r4, lr}
 8012362:	4604      	mov	r4, r0
 8012364:	f7ff fff0 	bl	8012348 <__sinit_lock_acquire>
 8012368:	69a3      	ldr	r3, [r4, #24]
 801236a:	b11b      	cbz	r3, 8012374 <__sinit+0x14>
 801236c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012370:	f7ff bff0 	b.w	8012354 <__sinit_lock_release>
 8012374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012378:	6523      	str	r3, [r4, #80]	; 0x50
 801237a:	4b13      	ldr	r3, [pc, #76]	; (80123c8 <__sinit+0x68>)
 801237c:	4a13      	ldr	r2, [pc, #76]	; (80123cc <__sinit+0x6c>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	62a2      	str	r2, [r4, #40]	; 0x28
 8012382:	42a3      	cmp	r3, r4
 8012384:	bf04      	itt	eq
 8012386:	2301      	moveq	r3, #1
 8012388:	61a3      	streq	r3, [r4, #24]
 801238a:	4620      	mov	r0, r4
 801238c:	f000 f820 	bl	80123d0 <__sfp>
 8012390:	6060      	str	r0, [r4, #4]
 8012392:	4620      	mov	r0, r4
 8012394:	f000 f81c 	bl	80123d0 <__sfp>
 8012398:	60a0      	str	r0, [r4, #8]
 801239a:	4620      	mov	r0, r4
 801239c:	f000 f818 	bl	80123d0 <__sfp>
 80123a0:	2200      	movs	r2, #0
 80123a2:	60e0      	str	r0, [r4, #12]
 80123a4:	2104      	movs	r1, #4
 80123a6:	6860      	ldr	r0, [r4, #4]
 80123a8:	f7ff ff82 	bl	80122b0 <std>
 80123ac:	68a0      	ldr	r0, [r4, #8]
 80123ae:	2201      	movs	r2, #1
 80123b0:	2109      	movs	r1, #9
 80123b2:	f7ff ff7d 	bl	80122b0 <std>
 80123b6:	68e0      	ldr	r0, [r4, #12]
 80123b8:	2202      	movs	r2, #2
 80123ba:	2112      	movs	r1, #18
 80123bc:	f7ff ff78 	bl	80122b0 <std>
 80123c0:	2301      	movs	r3, #1
 80123c2:	61a3      	str	r3, [r4, #24]
 80123c4:	e7d2      	b.n	801236c <__sinit+0xc>
 80123c6:	bf00      	nop
 80123c8:	08013c4c 	.word	0x08013c4c
 80123cc:	080122f9 	.word	0x080122f9

080123d0 <__sfp>:
 80123d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d2:	4607      	mov	r7, r0
 80123d4:	f7ff ffac 	bl	8012330 <__sfp_lock_acquire>
 80123d8:	4b1e      	ldr	r3, [pc, #120]	; (8012454 <__sfp+0x84>)
 80123da:	681e      	ldr	r6, [r3, #0]
 80123dc:	69b3      	ldr	r3, [r6, #24]
 80123de:	b913      	cbnz	r3, 80123e6 <__sfp+0x16>
 80123e0:	4630      	mov	r0, r6
 80123e2:	f7ff ffbd 	bl	8012360 <__sinit>
 80123e6:	3648      	adds	r6, #72	; 0x48
 80123e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80123ec:	3b01      	subs	r3, #1
 80123ee:	d503      	bpl.n	80123f8 <__sfp+0x28>
 80123f0:	6833      	ldr	r3, [r6, #0]
 80123f2:	b30b      	cbz	r3, 8012438 <__sfp+0x68>
 80123f4:	6836      	ldr	r6, [r6, #0]
 80123f6:	e7f7      	b.n	80123e8 <__sfp+0x18>
 80123f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80123fc:	b9d5      	cbnz	r5, 8012434 <__sfp+0x64>
 80123fe:	4b16      	ldr	r3, [pc, #88]	; (8012458 <__sfp+0x88>)
 8012400:	60e3      	str	r3, [r4, #12]
 8012402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012406:	6665      	str	r5, [r4, #100]	; 0x64
 8012408:	f000 f847 	bl	801249a <__retarget_lock_init_recursive>
 801240c:	f7ff ff96 	bl	801233c <__sfp_lock_release>
 8012410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012418:	6025      	str	r5, [r4, #0]
 801241a:	61a5      	str	r5, [r4, #24]
 801241c:	2208      	movs	r2, #8
 801241e:	4629      	mov	r1, r5
 8012420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012424:	f7ff fab4 	bl	8011990 <memset>
 8012428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801242c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012430:	4620      	mov	r0, r4
 8012432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012434:	3468      	adds	r4, #104	; 0x68
 8012436:	e7d9      	b.n	80123ec <__sfp+0x1c>
 8012438:	2104      	movs	r1, #4
 801243a:	4638      	mov	r0, r7
 801243c:	f7ff ff62 	bl	8012304 <__sfmoreglue>
 8012440:	4604      	mov	r4, r0
 8012442:	6030      	str	r0, [r6, #0]
 8012444:	2800      	cmp	r0, #0
 8012446:	d1d5      	bne.n	80123f4 <__sfp+0x24>
 8012448:	f7ff ff78 	bl	801233c <__sfp_lock_release>
 801244c:	230c      	movs	r3, #12
 801244e:	603b      	str	r3, [r7, #0]
 8012450:	e7ee      	b.n	8012430 <__sfp+0x60>
 8012452:	bf00      	nop
 8012454:	08013c4c 	.word	0x08013c4c
 8012458:	ffff0001 	.word	0xffff0001

0801245c <_fwalk_reent>:
 801245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012460:	4606      	mov	r6, r0
 8012462:	4688      	mov	r8, r1
 8012464:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012468:	2700      	movs	r7, #0
 801246a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801246e:	f1b9 0901 	subs.w	r9, r9, #1
 8012472:	d505      	bpl.n	8012480 <_fwalk_reent+0x24>
 8012474:	6824      	ldr	r4, [r4, #0]
 8012476:	2c00      	cmp	r4, #0
 8012478:	d1f7      	bne.n	801246a <_fwalk_reent+0xe>
 801247a:	4638      	mov	r0, r7
 801247c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012480:	89ab      	ldrh	r3, [r5, #12]
 8012482:	2b01      	cmp	r3, #1
 8012484:	d907      	bls.n	8012496 <_fwalk_reent+0x3a>
 8012486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801248a:	3301      	adds	r3, #1
 801248c:	d003      	beq.n	8012496 <_fwalk_reent+0x3a>
 801248e:	4629      	mov	r1, r5
 8012490:	4630      	mov	r0, r6
 8012492:	47c0      	blx	r8
 8012494:	4307      	orrs	r7, r0
 8012496:	3568      	adds	r5, #104	; 0x68
 8012498:	e7e9      	b.n	801246e <_fwalk_reent+0x12>

0801249a <__retarget_lock_init_recursive>:
 801249a:	4770      	bx	lr

0801249c <__retarget_lock_acquire_recursive>:
 801249c:	4770      	bx	lr

0801249e <__retarget_lock_release_recursive>:
 801249e:	4770      	bx	lr

080124a0 <__swhatbuf_r>:
 80124a0:	b570      	push	{r4, r5, r6, lr}
 80124a2:	460e      	mov	r6, r1
 80124a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a8:	2900      	cmp	r1, #0
 80124aa:	b096      	sub	sp, #88	; 0x58
 80124ac:	4614      	mov	r4, r2
 80124ae:	461d      	mov	r5, r3
 80124b0:	da08      	bge.n	80124c4 <__swhatbuf_r+0x24>
 80124b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80124b6:	2200      	movs	r2, #0
 80124b8:	602a      	str	r2, [r5, #0]
 80124ba:	061a      	lsls	r2, r3, #24
 80124bc:	d410      	bmi.n	80124e0 <__swhatbuf_r+0x40>
 80124be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80124c2:	e00e      	b.n	80124e2 <__swhatbuf_r+0x42>
 80124c4:	466a      	mov	r2, sp
 80124c6:	f000 fd55 	bl	8012f74 <_fstat_r>
 80124ca:	2800      	cmp	r0, #0
 80124cc:	dbf1      	blt.n	80124b2 <__swhatbuf_r+0x12>
 80124ce:	9a01      	ldr	r2, [sp, #4]
 80124d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80124d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80124d8:	425a      	negs	r2, r3
 80124da:	415a      	adcs	r2, r3
 80124dc:	602a      	str	r2, [r5, #0]
 80124de:	e7ee      	b.n	80124be <__swhatbuf_r+0x1e>
 80124e0:	2340      	movs	r3, #64	; 0x40
 80124e2:	2000      	movs	r0, #0
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	b016      	add	sp, #88	; 0x58
 80124e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080124ec <__smakebuf_r>:
 80124ec:	898b      	ldrh	r3, [r1, #12]
 80124ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80124f0:	079d      	lsls	r5, r3, #30
 80124f2:	4606      	mov	r6, r0
 80124f4:	460c      	mov	r4, r1
 80124f6:	d507      	bpl.n	8012508 <__smakebuf_r+0x1c>
 80124f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	6123      	str	r3, [r4, #16]
 8012500:	2301      	movs	r3, #1
 8012502:	6163      	str	r3, [r4, #20]
 8012504:	b002      	add	sp, #8
 8012506:	bd70      	pop	{r4, r5, r6, pc}
 8012508:	ab01      	add	r3, sp, #4
 801250a:	466a      	mov	r2, sp
 801250c:	f7ff ffc8 	bl	80124a0 <__swhatbuf_r>
 8012510:	9900      	ldr	r1, [sp, #0]
 8012512:	4605      	mov	r5, r0
 8012514:	4630      	mov	r0, r6
 8012516:	f7ff faaf 	bl	8011a78 <_malloc_r>
 801251a:	b948      	cbnz	r0, 8012530 <__smakebuf_r+0x44>
 801251c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012520:	059a      	lsls	r2, r3, #22
 8012522:	d4ef      	bmi.n	8012504 <__smakebuf_r+0x18>
 8012524:	f023 0303 	bic.w	r3, r3, #3
 8012528:	f043 0302 	orr.w	r3, r3, #2
 801252c:	81a3      	strh	r3, [r4, #12]
 801252e:	e7e3      	b.n	80124f8 <__smakebuf_r+0xc>
 8012530:	4b0d      	ldr	r3, [pc, #52]	; (8012568 <__smakebuf_r+0x7c>)
 8012532:	62b3      	str	r3, [r6, #40]	; 0x28
 8012534:	89a3      	ldrh	r3, [r4, #12]
 8012536:	6020      	str	r0, [r4, #0]
 8012538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801253c:	81a3      	strh	r3, [r4, #12]
 801253e:	9b00      	ldr	r3, [sp, #0]
 8012540:	6163      	str	r3, [r4, #20]
 8012542:	9b01      	ldr	r3, [sp, #4]
 8012544:	6120      	str	r0, [r4, #16]
 8012546:	b15b      	cbz	r3, 8012560 <__smakebuf_r+0x74>
 8012548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801254c:	4630      	mov	r0, r6
 801254e:	f000 fd23 	bl	8012f98 <_isatty_r>
 8012552:	b128      	cbz	r0, 8012560 <__smakebuf_r+0x74>
 8012554:	89a3      	ldrh	r3, [r4, #12]
 8012556:	f023 0303 	bic.w	r3, r3, #3
 801255a:	f043 0301 	orr.w	r3, r3, #1
 801255e:	81a3      	strh	r3, [r4, #12]
 8012560:	89a0      	ldrh	r0, [r4, #12]
 8012562:	4305      	orrs	r5, r0
 8012564:	81a5      	strh	r5, [r4, #12]
 8012566:	e7cd      	b.n	8012504 <__smakebuf_r+0x18>
 8012568:	080122f9 	.word	0x080122f9

0801256c <__malloc_lock>:
 801256c:	4801      	ldr	r0, [pc, #4]	; (8012574 <__malloc_lock+0x8>)
 801256e:	f7ff bf95 	b.w	801249c <__retarget_lock_acquire_recursive>
 8012572:	bf00      	nop
 8012574:	20003f6c 	.word	0x20003f6c

08012578 <__malloc_unlock>:
 8012578:	4801      	ldr	r0, [pc, #4]	; (8012580 <__malloc_unlock+0x8>)
 801257a:	f7ff bf90 	b.w	801249e <__retarget_lock_release_recursive>
 801257e:	bf00      	nop
 8012580:	20003f6c 	.word	0x20003f6c

08012584 <__ssputs_r>:
 8012584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012588:	688e      	ldr	r6, [r1, #8]
 801258a:	429e      	cmp	r6, r3
 801258c:	4682      	mov	sl, r0
 801258e:	460c      	mov	r4, r1
 8012590:	4690      	mov	r8, r2
 8012592:	461f      	mov	r7, r3
 8012594:	d838      	bhi.n	8012608 <__ssputs_r+0x84>
 8012596:	898a      	ldrh	r2, [r1, #12]
 8012598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801259c:	d032      	beq.n	8012604 <__ssputs_r+0x80>
 801259e:	6825      	ldr	r5, [r4, #0]
 80125a0:	6909      	ldr	r1, [r1, #16]
 80125a2:	eba5 0901 	sub.w	r9, r5, r1
 80125a6:	6965      	ldr	r5, [r4, #20]
 80125a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80125ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80125b0:	3301      	adds	r3, #1
 80125b2:	444b      	add	r3, r9
 80125b4:	106d      	asrs	r5, r5, #1
 80125b6:	429d      	cmp	r5, r3
 80125b8:	bf38      	it	cc
 80125ba:	461d      	movcc	r5, r3
 80125bc:	0553      	lsls	r3, r2, #21
 80125be:	d531      	bpl.n	8012624 <__ssputs_r+0xa0>
 80125c0:	4629      	mov	r1, r5
 80125c2:	f7ff fa59 	bl	8011a78 <_malloc_r>
 80125c6:	4606      	mov	r6, r0
 80125c8:	b950      	cbnz	r0, 80125e0 <__ssputs_r+0x5c>
 80125ca:	230c      	movs	r3, #12
 80125cc:	f8ca 3000 	str.w	r3, [sl]
 80125d0:	89a3      	ldrh	r3, [r4, #12]
 80125d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125d6:	81a3      	strh	r3, [r4, #12]
 80125d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e0:	6921      	ldr	r1, [r4, #16]
 80125e2:	464a      	mov	r2, r9
 80125e4:	f7ff f9c6 	bl	8011974 <memcpy>
 80125e8:	89a3      	ldrh	r3, [r4, #12]
 80125ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80125ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125f2:	81a3      	strh	r3, [r4, #12]
 80125f4:	6126      	str	r6, [r4, #16]
 80125f6:	6165      	str	r5, [r4, #20]
 80125f8:	444e      	add	r6, r9
 80125fa:	eba5 0509 	sub.w	r5, r5, r9
 80125fe:	6026      	str	r6, [r4, #0]
 8012600:	60a5      	str	r5, [r4, #8]
 8012602:	463e      	mov	r6, r7
 8012604:	42be      	cmp	r6, r7
 8012606:	d900      	bls.n	801260a <__ssputs_r+0x86>
 8012608:	463e      	mov	r6, r7
 801260a:	6820      	ldr	r0, [r4, #0]
 801260c:	4632      	mov	r2, r6
 801260e:	4641      	mov	r1, r8
 8012610:	f000 fce4 	bl	8012fdc <memmove>
 8012614:	68a3      	ldr	r3, [r4, #8]
 8012616:	1b9b      	subs	r3, r3, r6
 8012618:	60a3      	str	r3, [r4, #8]
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	4433      	add	r3, r6
 801261e:	6023      	str	r3, [r4, #0]
 8012620:	2000      	movs	r0, #0
 8012622:	e7db      	b.n	80125dc <__ssputs_r+0x58>
 8012624:	462a      	mov	r2, r5
 8012626:	f000 fcf3 	bl	8013010 <_realloc_r>
 801262a:	4606      	mov	r6, r0
 801262c:	2800      	cmp	r0, #0
 801262e:	d1e1      	bne.n	80125f4 <__ssputs_r+0x70>
 8012630:	6921      	ldr	r1, [r4, #16]
 8012632:	4650      	mov	r0, sl
 8012634:	f7ff f9b4 	bl	80119a0 <_free_r>
 8012638:	e7c7      	b.n	80125ca <__ssputs_r+0x46>
	...

0801263c <_svfiprintf_r>:
 801263c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012640:	4698      	mov	r8, r3
 8012642:	898b      	ldrh	r3, [r1, #12]
 8012644:	061b      	lsls	r3, r3, #24
 8012646:	b09d      	sub	sp, #116	; 0x74
 8012648:	4607      	mov	r7, r0
 801264a:	460d      	mov	r5, r1
 801264c:	4614      	mov	r4, r2
 801264e:	d50e      	bpl.n	801266e <_svfiprintf_r+0x32>
 8012650:	690b      	ldr	r3, [r1, #16]
 8012652:	b963      	cbnz	r3, 801266e <_svfiprintf_r+0x32>
 8012654:	2140      	movs	r1, #64	; 0x40
 8012656:	f7ff fa0f 	bl	8011a78 <_malloc_r>
 801265a:	6028      	str	r0, [r5, #0]
 801265c:	6128      	str	r0, [r5, #16]
 801265e:	b920      	cbnz	r0, 801266a <_svfiprintf_r+0x2e>
 8012660:	230c      	movs	r3, #12
 8012662:	603b      	str	r3, [r7, #0]
 8012664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012668:	e0d1      	b.n	801280e <_svfiprintf_r+0x1d2>
 801266a:	2340      	movs	r3, #64	; 0x40
 801266c:	616b      	str	r3, [r5, #20]
 801266e:	2300      	movs	r3, #0
 8012670:	9309      	str	r3, [sp, #36]	; 0x24
 8012672:	2320      	movs	r3, #32
 8012674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012678:	f8cd 800c 	str.w	r8, [sp, #12]
 801267c:	2330      	movs	r3, #48	; 0x30
 801267e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012828 <_svfiprintf_r+0x1ec>
 8012682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012686:	f04f 0901 	mov.w	r9, #1
 801268a:	4623      	mov	r3, r4
 801268c:	469a      	mov	sl, r3
 801268e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012692:	b10a      	cbz	r2, 8012698 <_svfiprintf_r+0x5c>
 8012694:	2a25      	cmp	r2, #37	; 0x25
 8012696:	d1f9      	bne.n	801268c <_svfiprintf_r+0x50>
 8012698:	ebba 0b04 	subs.w	fp, sl, r4
 801269c:	d00b      	beq.n	80126b6 <_svfiprintf_r+0x7a>
 801269e:	465b      	mov	r3, fp
 80126a0:	4622      	mov	r2, r4
 80126a2:	4629      	mov	r1, r5
 80126a4:	4638      	mov	r0, r7
 80126a6:	f7ff ff6d 	bl	8012584 <__ssputs_r>
 80126aa:	3001      	adds	r0, #1
 80126ac:	f000 80aa 	beq.w	8012804 <_svfiprintf_r+0x1c8>
 80126b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126b2:	445a      	add	r2, fp
 80126b4:	9209      	str	r2, [sp, #36]	; 0x24
 80126b6:	f89a 3000 	ldrb.w	r3, [sl]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	f000 80a2 	beq.w	8012804 <_svfiprintf_r+0x1c8>
 80126c0:	2300      	movs	r3, #0
 80126c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126ca:	f10a 0a01 	add.w	sl, sl, #1
 80126ce:	9304      	str	r3, [sp, #16]
 80126d0:	9307      	str	r3, [sp, #28]
 80126d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126d6:	931a      	str	r3, [sp, #104]	; 0x68
 80126d8:	4654      	mov	r4, sl
 80126da:	2205      	movs	r2, #5
 80126dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126e0:	4851      	ldr	r0, [pc, #324]	; (8012828 <_svfiprintf_r+0x1ec>)
 80126e2:	f7ed fd8d 	bl	8000200 <memchr>
 80126e6:	9a04      	ldr	r2, [sp, #16]
 80126e8:	b9d8      	cbnz	r0, 8012722 <_svfiprintf_r+0xe6>
 80126ea:	06d0      	lsls	r0, r2, #27
 80126ec:	bf44      	itt	mi
 80126ee:	2320      	movmi	r3, #32
 80126f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126f4:	0711      	lsls	r1, r2, #28
 80126f6:	bf44      	itt	mi
 80126f8:	232b      	movmi	r3, #43	; 0x2b
 80126fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80126fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012702:	2b2a      	cmp	r3, #42	; 0x2a
 8012704:	d015      	beq.n	8012732 <_svfiprintf_r+0xf6>
 8012706:	9a07      	ldr	r2, [sp, #28]
 8012708:	4654      	mov	r4, sl
 801270a:	2000      	movs	r0, #0
 801270c:	f04f 0c0a 	mov.w	ip, #10
 8012710:	4621      	mov	r1, r4
 8012712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012716:	3b30      	subs	r3, #48	; 0x30
 8012718:	2b09      	cmp	r3, #9
 801271a:	d94e      	bls.n	80127ba <_svfiprintf_r+0x17e>
 801271c:	b1b0      	cbz	r0, 801274c <_svfiprintf_r+0x110>
 801271e:	9207      	str	r2, [sp, #28]
 8012720:	e014      	b.n	801274c <_svfiprintf_r+0x110>
 8012722:	eba0 0308 	sub.w	r3, r0, r8
 8012726:	fa09 f303 	lsl.w	r3, r9, r3
 801272a:	4313      	orrs	r3, r2
 801272c:	9304      	str	r3, [sp, #16]
 801272e:	46a2      	mov	sl, r4
 8012730:	e7d2      	b.n	80126d8 <_svfiprintf_r+0x9c>
 8012732:	9b03      	ldr	r3, [sp, #12]
 8012734:	1d19      	adds	r1, r3, #4
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	9103      	str	r1, [sp, #12]
 801273a:	2b00      	cmp	r3, #0
 801273c:	bfbb      	ittet	lt
 801273e:	425b      	neglt	r3, r3
 8012740:	f042 0202 	orrlt.w	r2, r2, #2
 8012744:	9307      	strge	r3, [sp, #28]
 8012746:	9307      	strlt	r3, [sp, #28]
 8012748:	bfb8      	it	lt
 801274a:	9204      	strlt	r2, [sp, #16]
 801274c:	7823      	ldrb	r3, [r4, #0]
 801274e:	2b2e      	cmp	r3, #46	; 0x2e
 8012750:	d10c      	bne.n	801276c <_svfiprintf_r+0x130>
 8012752:	7863      	ldrb	r3, [r4, #1]
 8012754:	2b2a      	cmp	r3, #42	; 0x2a
 8012756:	d135      	bne.n	80127c4 <_svfiprintf_r+0x188>
 8012758:	9b03      	ldr	r3, [sp, #12]
 801275a:	1d1a      	adds	r2, r3, #4
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	9203      	str	r2, [sp, #12]
 8012760:	2b00      	cmp	r3, #0
 8012762:	bfb8      	it	lt
 8012764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012768:	3402      	adds	r4, #2
 801276a:	9305      	str	r3, [sp, #20]
 801276c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012838 <_svfiprintf_r+0x1fc>
 8012770:	7821      	ldrb	r1, [r4, #0]
 8012772:	2203      	movs	r2, #3
 8012774:	4650      	mov	r0, sl
 8012776:	f7ed fd43 	bl	8000200 <memchr>
 801277a:	b140      	cbz	r0, 801278e <_svfiprintf_r+0x152>
 801277c:	2340      	movs	r3, #64	; 0x40
 801277e:	eba0 000a 	sub.w	r0, r0, sl
 8012782:	fa03 f000 	lsl.w	r0, r3, r0
 8012786:	9b04      	ldr	r3, [sp, #16]
 8012788:	4303      	orrs	r3, r0
 801278a:	3401      	adds	r4, #1
 801278c:	9304      	str	r3, [sp, #16]
 801278e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012792:	4826      	ldr	r0, [pc, #152]	; (801282c <_svfiprintf_r+0x1f0>)
 8012794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012798:	2206      	movs	r2, #6
 801279a:	f7ed fd31 	bl	8000200 <memchr>
 801279e:	2800      	cmp	r0, #0
 80127a0:	d038      	beq.n	8012814 <_svfiprintf_r+0x1d8>
 80127a2:	4b23      	ldr	r3, [pc, #140]	; (8012830 <_svfiprintf_r+0x1f4>)
 80127a4:	bb1b      	cbnz	r3, 80127ee <_svfiprintf_r+0x1b2>
 80127a6:	9b03      	ldr	r3, [sp, #12]
 80127a8:	3307      	adds	r3, #7
 80127aa:	f023 0307 	bic.w	r3, r3, #7
 80127ae:	3308      	adds	r3, #8
 80127b0:	9303      	str	r3, [sp, #12]
 80127b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127b4:	4433      	add	r3, r6
 80127b6:	9309      	str	r3, [sp, #36]	; 0x24
 80127b8:	e767      	b.n	801268a <_svfiprintf_r+0x4e>
 80127ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80127be:	460c      	mov	r4, r1
 80127c0:	2001      	movs	r0, #1
 80127c2:	e7a5      	b.n	8012710 <_svfiprintf_r+0xd4>
 80127c4:	2300      	movs	r3, #0
 80127c6:	3401      	adds	r4, #1
 80127c8:	9305      	str	r3, [sp, #20]
 80127ca:	4619      	mov	r1, r3
 80127cc:	f04f 0c0a 	mov.w	ip, #10
 80127d0:	4620      	mov	r0, r4
 80127d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127d6:	3a30      	subs	r2, #48	; 0x30
 80127d8:	2a09      	cmp	r2, #9
 80127da:	d903      	bls.n	80127e4 <_svfiprintf_r+0x1a8>
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d0c5      	beq.n	801276c <_svfiprintf_r+0x130>
 80127e0:	9105      	str	r1, [sp, #20]
 80127e2:	e7c3      	b.n	801276c <_svfiprintf_r+0x130>
 80127e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80127e8:	4604      	mov	r4, r0
 80127ea:	2301      	movs	r3, #1
 80127ec:	e7f0      	b.n	80127d0 <_svfiprintf_r+0x194>
 80127ee:	ab03      	add	r3, sp, #12
 80127f0:	9300      	str	r3, [sp, #0]
 80127f2:	462a      	mov	r2, r5
 80127f4:	4b0f      	ldr	r3, [pc, #60]	; (8012834 <_svfiprintf_r+0x1f8>)
 80127f6:	a904      	add	r1, sp, #16
 80127f8:	4638      	mov	r0, r7
 80127fa:	f3af 8000 	nop.w
 80127fe:	1c42      	adds	r2, r0, #1
 8012800:	4606      	mov	r6, r0
 8012802:	d1d6      	bne.n	80127b2 <_svfiprintf_r+0x176>
 8012804:	89ab      	ldrh	r3, [r5, #12]
 8012806:	065b      	lsls	r3, r3, #25
 8012808:	f53f af2c 	bmi.w	8012664 <_svfiprintf_r+0x28>
 801280c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801280e:	b01d      	add	sp, #116	; 0x74
 8012810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012814:	ab03      	add	r3, sp, #12
 8012816:	9300      	str	r3, [sp, #0]
 8012818:	462a      	mov	r2, r5
 801281a:	4b06      	ldr	r3, [pc, #24]	; (8012834 <_svfiprintf_r+0x1f8>)
 801281c:	a904      	add	r1, sp, #16
 801281e:	4638      	mov	r0, r7
 8012820:	f000 f9d4 	bl	8012bcc <_printf_i>
 8012824:	e7eb      	b.n	80127fe <_svfiprintf_r+0x1c2>
 8012826:	bf00      	nop
 8012828:	08013db4 	.word	0x08013db4
 801282c:	08013dbe 	.word	0x08013dbe
 8012830:	00000000 	.word	0x00000000
 8012834:	08012585 	.word	0x08012585
 8012838:	08013dba 	.word	0x08013dba

0801283c <__sfputc_r>:
 801283c:	6893      	ldr	r3, [r2, #8]
 801283e:	3b01      	subs	r3, #1
 8012840:	2b00      	cmp	r3, #0
 8012842:	b410      	push	{r4}
 8012844:	6093      	str	r3, [r2, #8]
 8012846:	da08      	bge.n	801285a <__sfputc_r+0x1e>
 8012848:	6994      	ldr	r4, [r2, #24]
 801284a:	42a3      	cmp	r3, r4
 801284c:	db01      	blt.n	8012852 <__sfputc_r+0x16>
 801284e:	290a      	cmp	r1, #10
 8012850:	d103      	bne.n	801285a <__sfputc_r+0x1e>
 8012852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012856:	f7ff bba9 	b.w	8011fac <__swbuf_r>
 801285a:	6813      	ldr	r3, [r2, #0]
 801285c:	1c58      	adds	r0, r3, #1
 801285e:	6010      	str	r0, [r2, #0]
 8012860:	7019      	strb	r1, [r3, #0]
 8012862:	4608      	mov	r0, r1
 8012864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012868:	4770      	bx	lr

0801286a <__sfputs_r>:
 801286a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801286c:	4606      	mov	r6, r0
 801286e:	460f      	mov	r7, r1
 8012870:	4614      	mov	r4, r2
 8012872:	18d5      	adds	r5, r2, r3
 8012874:	42ac      	cmp	r4, r5
 8012876:	d101      	bne.n	801287c <__sfputs_r+0x12>
 8012878:	2000      	movs	r0, #0
 801287a:	e007      	b.n	801288c <__sfputs_r+0x22>
 801287c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012880:	463a      	mov	r2, r7
 8012882:	4630      	mov	r0, r6
 8012884:	f7ff ffda 	bl	801283c <__sfputc_r>
 8012888:	1c43      	adds	r3, r0, #1
 801288a:	d1f3      	bne.n	8012874 <__sfputs_r+0xa>
 801288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012890 <_vfiprintf_r>:
 8012890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012894:	460d      	mov	r5, r1
 8012896:	b09d      	sub	sp, #116	; 0x74
 8012898:	4614      	mov	r4, r2
 801289a:	4698      	mov	r8, r3
 801289c:	4606      	mov	r6, r0
 801289e:	b118      	cbz	r0, 80128a8 <_vfiprintf_r+0x18>
 80128a0:	6983      	ldr	r3, [r0, #24]
 80128a2:	b90b      	cbnz	r3, 80128a8 <_vfiprintf_r+0x18>
 80128a4:	f7ff fd5c 	bl	8012360 <__sinit>
 80128a8:	4b89      	ldr	r3, [pc, #548]	; (8012ad0 <_vfiprintf_r+0x240>)
 80128aa:	429d      	cmp	r5, r3
 80128ac:	d11b      	bne.n	80128e6 <_vfiprintf_r+0x56>
 80128ae:	6875      	ldr	r5, [r6, #4]
 80128b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128b2:	07d9      	lsls	r1, r3, #31
 80128b4:	d405      	bmi.n	80128c2 <_vfiprintf_r+0x32>
 80128b6:	89ab      	ldrh	r3, [r5, #12]
 80128b8:	059a      	lsls	r2, r3, #22
 80128ba:	d402      	bmi.n	80128c2 <_vfiprintf_r+0x32>
 80128bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128be:	f7ff fded 	bl	801249c <__retarget_lock_acquire_recursive>
 80128c2:	89ab      	ldrh	r3, [r5, #12]
 80128c4:	071b      	lsls	r3, r3, #28
 80128c6:	d501      	bpl.n	80128cc <_vfiprintf_r+0x3c>
 80128c8:	692b      	ldr	r3, [r5, #16]
 80128ca:	b9eb      	cbnz	r3, 8012908 <_vfiprintf_r+0x78>
 80128cc:	4629      	mov	r1, r5
 80128ce:	4630      	mov	r0, r6
 80128d0:	f7ff fbbe 	bl	8012050 <__swsetup_r>
 80128d4:	b1c0      	cbz	r0, 8012908 <_vfiprintf_r+0x78>
 80128d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80128d8:	07dc      	lsls	r4, r3, #31
 80128da:	d50e      	bpl.n	80128fa <_vfiprintf_r+0x6a>
 80128dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80128e0:	b01d      	add	sp, #116	; 0x74
 80128e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e6:	4b7b      	ldr	r3, [pc, #492]	; (8012ad4 <_vfiprintf_r+0x244>)
 80128e8:	429d      	cmp	r5, r3
 80128ea:	d101      	bne.n	80128f0 <_vfiprintf_r+0x60>
 80128ec:	68b5      	ldr	r5, [r6, #8]
 80128ee:	e7df      	b.n	80128b0 <_vfiprintf_r+0x20>
 80128f0:	4b79      	ldr	r3, [pc, #484]	; (8012ad8 <_vfiprintf_r+0x248>)
 80128f2:	429d      	cmp	r5, r3
 80128f4:	bf08      	it	eq
 80128f6:	68f5      	ldreq	r5, [r6, #12]
 80128f8:	e7da      	b.n	80128b0 <_vfiprintf_r+0x20>
 80128fa:	89ab      	ldrh	r3, [r5, #12]
 80128fc:	0598      	lsls	r0, r3, #22
 80128fe:	d4ed      	bmi.n	80128dc <_vfiprintf_r+0x4c>
 8012900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012902:	f7ff fdcc 	bl	801249e <__retarget_lock_release_recursive>
 8012906:	e7e9      	b.n	80128dc <_vfiprintf_r+0x4c>
 8012908:	2300      	movs	r3, #0
 801290a:	9309      	str	r3, [sp, #36]	; 0x24
 801290c:	2320      	movs	r3, #32
 801290e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012912:	f8cd 800c 	str.w	r8, [sp, #12]
 8012916:	2330      	movs	r3, #48	; 0x30
 8012918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012adc <_vfiprintf_r+0x24c>
 801291c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012920:	f04f 0901 	mov.w	r9, #1
 8012924:	4623      	mov	r3, r4
 8012926:	469a      	mov	sl, r3
 8012928:	f813 2b01 	ldrb.w	r2, [r3], #1
 801292c:	b10a      	cbz	r2, 8012932 <_vfiprintf_r+0xa2>
 801292e:	2a25      	cmp	r2, #37	; 0x25
 8012930:	d1f9      	bne.n	8012926 <_vfiprintf_r+0x96>
 8012932:	ebba 0b04 	subs.w	fp, sl, r4
 8012936:	d00b      	beq.n	8012950 <_vfiprintf_r+0xc0>
 8012938:	465b      	mov	r3, fp
 801293a:	4622      	mov	r2, r4
 801293c:	4629      	mov	r1, r5
 801293e:	4630      	mov	r0, r6
 8012940:	f7ff ff93 	bl	801286a <__sfputs_r>
 8012944:	3001      	adds	r0, #1
 8012946:	f000 80aa 	beq.w	8012a9e <_vfiprintf_r+0x20e>
 801294a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801294c:	445a      	add	r2, fp
 801294e:	9209      	str	r2, [sp, #36]	; 0x24
 8012950:	f89a 3000 	ldrb.w	r3, [sl]
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 80a2 	beq.w	8012a9e <_vfiprintf_r+0x20e>
 801295a:	2300      	movs	r3, #0
 801295c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012964:	f10a 0a01 	add.w	sl, sl, #1
 8012968:	9304      	str	r3, [sp, #16]
 801296a:	9307      	str	r3, [sp, #28]
 801296c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012970:	931a      	str	r3, [sp, #104]	; 0x68
 8012972:	4654      	mov	r4, sl
 8012974:	2205      	movs	r2, #5
 8012976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801297a:	4858      	ldr	r0, [pc, #352]	; (8012adc <_vfiprintf_r+0x24c>)
 801297c:	f7ed fc40 	bl	8000200 <memchr>
 8012980:	9a04      	ldr	r2, [sp, #16]
 8012982:	b9d8      	cbnz	r0, 80129bc <_vfiprintf_r+0x12c>
 8012984:	06d1      	lsls	r1, r2, #27
 8012986:	bf44      	itt	mi
 8012988:	2320      	movmi	r3, #32
 801298a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801298e:	0713      	lsls	r3, r2, #28
 8012990:	bf44      	itt	mi
 8012992:	232b      	movmi	r3, #43	; 0x2b
 8012994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012998:	f89a 3000 	ldrb.w	r3, [sl]
 801299c:	2b2a      	cmp	r3, #42	; 0x2a
 801299e:	d015      	beq.n	80129cc <_vfiprintf_r+0x13c>
 80129a0:	9a07      	ldr	r2, [sp, #28]
 80129a2:	4654      	mov	r4, sl
 80129a4:	2000      	movs	r0, #0
 80129a6:	f04f 0c0a 	mov.w	ip, #10
 80129aa:	4621      	mov	r1, r4
 80129ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129b0:	3b30      	subs	r3, #48	; 0x30
 80129b2:	2b09      	cmp	r3, #9
 80129b4:	d94e      	bls.n	8012a54 <_vfiprintf_r+0x1c4>
 80129b6:	b1b0      	cbz	r0, 80129e6 <_vfiprintf_r+0x156>
 80129b8:	9207      	str	r2, [sp, #28]
 80129ba:	e014      	b.n	80129e6 <_vfiprintf_r+0x156>
 80129bc:	eba0 0308 	sub.w	r3, r0, r8
 80129c0:	fa09 f303 	lsl.w	r3, r9, r3
 80129c4:	4313      	orrs	r3, r2
 80129c6:	9304      	str	r3, [sp, #16]
 80129c8:	46a2      	mov	sl, r4
 80129ca:	e7d2      	b.n	8012972 <_vfiprintf_r+0xe2>
 80129cc:	9b03      	ldr	r3, [sp, #12]
 80129ce:	1d19      	adds	r1, r3, #4
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	9103      	str	r1, [sp, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	bfbb      	ittet	lt
 80129d8:	425b      	neglt	r3, r3
 80129da:	f042 0202 	orrlt.w	r2, r2, #2
 80129de:	9307      	strge	r3, [sp, #28]
 80129e0:	9307      	strlt	r3, [sp, #28]
 80129e2:	bfb8      	it	lt
 80129e4:	9204      	strlt	r2, [sp, #16]
 80129e6:	7823      	ldrb	r3, [r4, #0]
 80129e8:	2b2e      	cmp	r3, #46	; 0x2e
 80129ea:	d10c      	bne.n	8012a06 <_vfiprintf_r+0x176>
 80129ec:	7863      	ldrb	r3, [r4, #1]
 80129ee:	2b2a      	cmp	r3, #42	; 0x2a
 80129f0:	d135      	bne.n	8012a5e <_vfiprintf_r+0x1ce>
 80129f2:	9b03      	ldr	r3, [sp, #12]
 80129f4:	1d1a      	adds	r2, r3, #4
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	9203      	str	r2, [sp, #12]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	bfb8      	it	lt
 80129fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012a02:	3402      	adds	r4, #2
 8012a04:	9305      	str	r3, [sp, #20]
 8012a06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012aec <_vfiprintf_r+0x25c>
 8012a0a:	7821      	ldrb	r1, [r4, #0]
 8012a0c:	2203      	movs	r2, #3
 8012a0e:	4650      	mov	r0, sl
 8012a10:	f7ed fbf6 	bl	8000200 <memchr>
 8012a14:	b140      	cbz	r0, 8012a28 <_vfiprintf_r+0x198>
 8012a16:	2340      	movs	r3, #64	; 0x40
 8012a18:	eba0 000a 	sub.w	r0, r0, sl
 8012a1c:	fa03 f000 	lsl.w	r0, r3, r0
 8012a20:	9b04      	ldr	r3, [sp, #16]
 8012a22:	4303      	orrs	r3, r0
 8012a24:	3401      	adds	r4, #1
 8012a26:	9304      	str	r3, [sp, #16]
 8012a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a2c:	482c      	ldr	r0, [pc, #176]	; (8012ae0 <_vfiprintf_r+0x250>)
 8012a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a32:	2206      	movs	r2, #6
 8012a34:	f7ed fbe4 	bl	8000200 <memchr>
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	d03f      	beq.n	8012abc <_vfiprintf_r+0x22c>
 8012a3c:	4b29      	ldr	r3, [pc, #164]	; (8012ae4 <_vfiprintf_r+0x254>)
 8012a3e:	bb1b      	cbnz	r3, 8012a88 <_vfiprintf_r+0x1f8>
 8012a40:	9b03      	ldr	r3, [sp, #12]
 8012a42:	3307      	adds	r3, #7
 8012a44:	f023 0307 	bic.w	r3, r3, #7
 8012a48:	3308      	adds	r3, #8
 8012a4a:	9303      	str	r3, [sp, #12]
 8012a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a4e:	443b      	add	r3, r7
 8012a50:	9309      	str	r3, [sp, #36]	; 0x24
 8012a52:	e767      	b.n	8012924 <_vfiprintf_r+0x94>
 8012a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a58:	460c      	mov	r4, r1
 8012a5a:	2001      	movs	r0, #1
 8012a5c:	e7a5      	b.n	80129aa <_vfiprintf_r+0x11a>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	3401      	adds	r4, #1
 8012a62:	9305      	str	r3, [sp, #20]
 8012a64:	4619      	mov	r1, r3
 8012a66:	f04f 0c0a 	mov.w	ip, #10
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a70:	3a30      	subs	r2, #48	; 0x30
 8012a72:	2a09      	cmp	r2, #9
 8012a74:	d903      	bls.n	8012a7e <_vfiprintf_r+0x1ee>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d0c5      	beq.n	8012a06 <_vfiprintf_r+0x176>
 8012a7a:	9105      	str	r1, [sp, #20]
 8012a7c:	e7c3      	b.n	8012a06 <_vfiprintf_r+0x176>
 8012a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a82:	4604      	mov	r4, r0
 8012a84:	2301      	movs	r3, #1
 8012a86:	e7f0      	b.n	8012a6a <_vfiprintf_r+0x1da>
 8012a88:	ab03      	add	r3, sp, #12
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	462a      	mov	r2, r5
 8012a8e:	4b16      	ldr	r3, [pc, #88]	; (8012ae8 <_vfiprintf_r+0x258>)
 8012a90:	a904      	add	r1, sp, #16
 8012a92:	4630      	mov	r0, r6
 8012a94:	f3af 8000 	nop.w
 8012a98:	4607      	mov	r7, r0
 8012a9a:	1c78      	adds	r0, r7, #1
 8012a9c:	d1d6      	bne.n	8012a4c <_vfiprintf_r+0x1bc>
 8012a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012aa0:	07d9      	lsls	r1, r3, #31
 8012aa2:	d405      	bmi.n	8012ab0 <_vfiprintf_r+0x220>
 8012aa4:	89ab      	ldrh	r3, [r5, #12]
 8012aa6:	059a      	lsls	r2, r3, #22
 8012aa8:	d402      	bmi.n	8012ab0 <_vfiprintf_r+0x220>
 8012aaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012aac:	f7ff fcf7 	bl	801249e <__retarget_lock_release_recursive>
 8012ab0:	89ab      	ldrh	r3, [r5, #12]
 8012ab2:	065b      	lsls	r3, r3, #25
 8012ab4:	f53f af12 	bmi.w	80128dc <_vfiprintf_r+0x4c>
 8012ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012aba:	e711      	b.n	80128e0 <_vfiprintf_r+0x50>
 8012abc:	ab03      	add	r3, sp, #12
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	462a      	mov	r2, r5
 8012ac2:	4b09      	ldr	r3, [pc, #36]	; (8012ae8 <_vfiprintf_r+0x258>)
 8012ac4:	a904      	add	r1, sp, #16
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	f000 f880 	bl	8012bcc <_printf_i>
 8012acc:	e7e4      	b.n	8012a98 <_vfiprintf_r+0x208>
 8012ace:	bf00      	nop
 8012ad0:	08013d74 	.word	0x08013d74
 8012ad4:	08013d94 	.word	0x08013d94
 8012ad8:	08013d54 	.word	0x08013d54
 8012adc:	08013db4 	.word	0x08013db4
 8012ae0:	08013dbe 	.word	0x08013dbe
 8012ae4:	00000000 	.word	0x00000000
 8012ae8:	0801286b 	.word	0x0801286b
 8012aec:	08013dba 	.word	0x08013dba

08012af0 <_printf_common>:
 8012af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012af4:	4616      	mov	r6, r2
 8012af6:	4699      	mov	r9, r3
 8012af8:	688a      	ldr	r2, [r1, #8]
 8012afa:	690b      	ldr	r3, [r1, #16]
 8012afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b00:	4293      	cmp	r3, r2
 8012b02:	bfb8      	it	lt
 8012b04:	4613      	movlt	r3, r2
 8012b06:	6033      	str	r3, [r6, #0]
 8012b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b0c:	4607      	mov	r7, r0
 8012b0e:	460c      	mov	r4, r1
 8012b10:	b10a      	cbz	r2, 8012b16 <_printf_common+0x26>
 8012b12:	3301      	adds	r3, #1
 8012b14:	6033      	str	r3, [r6, #0]
 8012b16:	6823      	ldr	r3, [r4, #0]
 8012b18:	0699      	lsls	r1, r3, #26
 8012b1a:	bf42      	ittt	mi
 8012b1c:	6833      	ldrmi	r3, [r6, #0]
 8012b1e:	3302      	addmi	r3, #2
 8012b20:	6033      	strmi	r3, [r6, #0]
 8012b22:	6825      	ldr	r5, [r4, #0]
 8012b24:	f015 0506 	ands.w	r5, r5, #6
 8012b28:	d106      	bne.n	8012b38 <_printf_common+0x48>
 8012b2a:	f104 0a19 	add.w	sl, r4, #25
 8012b2e:	68e3      	ldr	r3, [r4, #12]
 8012b30:	6832      	ldr	r2, [r6, #0]
 8012b32:	1a9b      	subs	r3, r3, r2
 8012b34:	42ab      	cmp	r3, r5
 8012b36:	dc26      	bgt.n	8012b86 <_printf_common+0x96>
 8012b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b3c:	1e13      	subs	r3, r2, #0
 8012b3e:	6822      	ldr	r2, [r4, #0]
 8012b40:	bf18      	it	ne
 8012b42:	2301      	movne	r3, #1
 8012b44:	0692      	lsls	r2, r2, #26
 8012b46:	d42b      	bmi.n	8012ba0 <_printf_common+0xb0>
 8012b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b4c:	4649      	mov	r1, r9
 8012b4e:	4638      	mov	r0, r7
 8012b50:	47c0      	blx	r8
 8012b52:	3001      	adds	r0, #1
 8012b54:	d01e      	beq.n	8012b94 <_printf_common+0xa4>
 8012b56:	6823      	ldr	r3, [r4, #0]
 8012b58:	68e5      	ldr	r5, [r4, #12]
 8012b5a:	6832      	ldr	r2, [r6, #0]
 8012b5c:	f003 0306 	and.w	r3, r3, #6
 8012b60:	2b04      	cmp	r3, #4
 8012b62:	bf08      	it	eq
 8012b64:	1aad      	subeq	r5, r5, r2
 8012b66:	68a3      	ldr	r3, [r4, #8]
 8012b68:	6922      	ldr	r2, [r4, #16]
 8012b6a:	bf0c      	ite	eq
 8012b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b70:	2500      	movne	r5, #0
 8012b72:	4293      	cmp	r3, r2
 8012b74:	bfc4      	itt	gt
 8012b76:	1a9b      	subgt	r3, r3, r2
 8012b78:	18ed      	addgt	r5, r5, r3
 8012b7a:	2600      	movs	r6, #0
 8012b7c:	341a      	adds	r4, #26
 8012b7e:	42b5      	cmp	r5, r6
 8012b80:	d11a      	bne.n	8012bb8 <_printf_common+0xc8>
 8012b82:	2000      	movs	r0, #0
 8012b84:	e008      	b.n	8012b98 <_printf_common+0xa8>
 8012b86:	2301      	movs	r3, #1
 8012b88:	4652      	mov	r2, sl
 8012b8a:	4649      	mov	r1, r9
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	47c0      	blx	r8
 8012b90:	3001      	adds	r0, #1
 8012b92:	d103      	bne.n	8012b9c <_printf_common+0xac>
 8012b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b9c:	3501      	adds	r5, #1
 8012b9e:	e7c6      	b.n	8012b2e <_printf_common+0x3e>
 8012ba0:	18e1      	adds	r1, r4, r3
 8012ba2:	1c5a      	adds	r2, r3, #1
 8012ba4:	2030      	movs	r0, #48	; 0x30
 8012ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012baa:	4422      	add	r2, r4
 8012bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012bb4:	3302      	adds	r3, #2
 8012bb6:	e7c7      	b.n	8012b48 <_printf_common+0x58>
 8012bb8:	2301      	movs	r3, #1
 8012bba:	4622      	mov	r2, r4
 8012bbc:	4649      	mov	r1, r9
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	47c0      	blx	r8
 8012bc2:	3001      	adds	r0, #1
 8012bc4:	d0e6      	beq.n	8012b94 <_printf_common+0xa4>
 8012bc6:	3601      	adds	r6, #1
 8012bc8:	e7d9      	b.n	8012b7e <_printf_common+0x8e>
	...

08012bcc <_printf_i>:
 8012bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bd0:	7e0f      	ldrb	r7, [r1, #24]
 8012bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012bd4:	2f78      	cmp	r7, #120	; 0x78
 8012bd6:	4691      	mov	r9, r2
 8012bd8:	4680      	mov	r8, r0
 8012bda:	460c      	mov	r4, r1
 8012bdc:	469a      	mov	sl, r3
 8012bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012be2:	d807      	bhi.n	8012bf4 <_printf_i+0x28>
 8012be4:	2f62      	cmp	r7, #98	; 0x62
 8012be6:	d80a      	bhi.n	8012bfe <_printf_i+0x32>
 8012be8:	2f00      	cmp	r7, #0
 8012bea:	f000 80d8 	beq.w	8012d9e <_printf_i+0x1d2>
 8012bee:	2f58      	cmp	r7, #88	; 0x58
 8012bf0:	f000 80a3 	beq.w	8012d3a <_printf_i+0x16e>
 8012bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012bfc:	e03a      	b.n	8012c74 <_printf_i+0xa8>
 8012bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c02:	2b15      	cmp	r3, #21
 8012c04:	d8f6      	bhi.n	8012bf4 <_printf_i+0x28>
 8012c06:	a101      	add	r1, pc, #4	; (adr r1, 8012c0c <_printf_i+0x40>)
 8012c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c0c:	08012c65 	.word	0x08012c65
 8012c10:	08012c79 	.word	0x08012c79
 8012c14:	08012bf5 	.word	0x08012bf5
 8012c18:	08012bf5 	.word	0x08012bf5
 8012c1c:	08012bf5 	.word	0x08012bf5
 8012c20:	08012bf5 	.word	0x08012bf5
 8012c24:	08012c79 	.word	0x08012c79
 8012c28:	08012bf5 	.word	0x08012bf5
 8012c2c:	08012bf5 	.word	0x08012bf5
 8012c30:	08012bf5 	.word	0x08012bf5
 8012c34:	08012bf5 	.word	0x08012bf5
 8012c38:	08012d85 	.word	0x08012d85
 8012c3c:	08012ca9 	.word	0x08012ca9
 8012c40:	08012d67 	.word	0x08012d67
 8012c44:	08012bf5 	.word	0x08012bf5
 8012c48:	08012bf5 	.word	0x08012bf5
 8012c4c:	08012da7 	.word	0x08012da7
 8012c50:	08012bf5 	.word	0x08012bf5
 8012c54:	08012ca9 	.word	0x08012ca9
 8012c58:	08012bf5 	.word	0x08012bf5
 8012c5c:	08012bf5 	.word	0x08012bf5
 8012c60:	08012d6f 	.word	0x08012d6f
 8012c64:	682b      	ldr	r3, [r5, #0]
 8012c66:	1d1a      	adds	r2, r3, #4
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	602a      	str	r2, [r5, #0]
 8012c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c74:	2301      	movs	r3, #1
 8012c76:	e0a3      	b.n	8012dc0 <_printf_i+0x1f4>
 8012c78:	6820      	ldr	r0, [r4, #0]
 8012c7a:	6829      	ldr	r1, [r5, #0]
 8012c7c:	0606      	lsls	r6, r0, #24
 8012c7e:	f101 0304 	add.w	r3, r1, #4
 8012c82:	d50a      	bpl.n	8012c9a <_printf_i+0xce>
 8012c84:	680e      	ldr	r6, [r1, #0]
 8012c86:	602b      	str	r3, [r5, #0]
 8012c88:	2e00      	cmp	r6, #0
 8012c8a:	da03      	bge.n	8012c94 <_printf_i+0xc8>
 8012c8c:	232d      	movs	r3, #45	; 0x2d
 8012c8e:	4276      	negs	r6, r6
 8012c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c94:	485e      	ldr	r0, [pc, #376]	; (8012e10 <_printf_i+0x244>)
 8012c96:	230a      	movs	r3, #10
 8012c98:	e019      	b.n	8012cce <_printf_i+0x102>
 8012c9a:	680e      	ldr	r6, [r1, #0]
 8012c9c:	602b      	str	r3, [r5, #0]
 8012c9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012ca2:	bf18      	it	ne
 8012ca4:	b236      	sxthne	r6, r6
 8012ca6:	e7ef      	b.n	8012c88 <_printf_i+0xbc>
 8012ca8:	682b      	ldr	r3, [r5, #0]
 8012caa:	6820      	ldr	r0, [r4, #0]
 8012cac:	1d19      	adds	r1, r3, #4
 8012cae:	6029      	str	r1, [r5, #0]
 8012cb0:	0601      	lsls	r1, r0, #24
 8012cb2:	d501      	bpl.n	8012cb8 <_printf_i+0xec>
 8012cb4:	681e      	ldr	r6, [r3, #0]
 8012cb6:	e002      	b.n	8012cbe <_printf_i+0xf2>
 8012cb8:	0646      	lsls	r6, r0, #25
 8012cba:	d5fb      	bpl.n	8012cb4 <_printf_i+0xe8>
 8012cbc:	881e      	ldrh	r6, [r3, #0]
 8012cbe:	4854      	ldr	r0, [pc, #336]	; (8012e10 <_printf_i+0x244>)
 8012cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8012cc2:	bf0c      	ite	eq
 8012cc4:	2308      	moveq	r3, #8
 8012cc6:	230a      	movne	r3, #10
 8012cc8:	2100      	movs	r1, #0
 8012cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012cce:	6865      	ldr	r5, [r4, #4]
 8012cd0:	60a5      	str	r5, [r4, #8]
 8012cd2:	2d00      	cmp	r5, #0
 8012cd4:	bfa2      	ittt	ge
 8012cd6:	6821      	ldrge	r1, [r4, #0]
 8012cd8:	f021 0104 	bicge.w	r1, r1, #4
 8012cdc:	6021      	strge	r1, [r4, #0]
 8012cde:	b90e      	cbnz	r6, 8012ce4 <_printf_i+0x118>
 8012ce0:	2d00      	cmp	r5, #0
 8012ce2:	d04d      	beq.n	8012d80 <_printf_i+0x1b4>
 8012ce4:	4615      	mov	r5, r2
 8012ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8012cea:	fb03 6711 	mls	r7, r3, r1, r6
 8012cee:	5dc7      	ldrb	r7, [r0, r7]
 8012cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012cf4:	4637      	mov	r7, r6
 8012cf6:	42bb      	cmp	r3, r7
 8012cf8:	460e      	mov	r6, r1
 8012cfa:	d9f4      	bls.n	8012ce6 <_printf_i+0x11a>
 8012cfc:	2b08      	cmp	r3, #8
 8012cfe:	d10b      	bne.n	8012d18 <_printf_i+0x14c>
 8012d00:	6823      	ldr	r3, [r4, #0]
 8012d02:	07de      	lsls	r6, r3, #31
 8012d04:	d508      	bpl.n	8012d18 <_printf_i+0x14c>
 8012d06:	6923      	ldr	r3, [r4, #16]
 8012d08:	6861      	ldr	r1, [r4, #4]
 8012d0a:	4299      	cmp	r1, r3
 8012d0c:	bfde      	ittt	le
 8012d0e:	2330      	movle	r3, #48	; 0x30
 8012d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012d18:	1b52      	subs	r2, r2, r5
 8012d1a:	6122      	str	r2, [r4, #16]
 8012d1c:	f8cd a000 	str.w	sl, [sp]
 8012d20:	464b      	mov	r3, r9
 8012d22:	aa03      	add	r2, sp, #12
 8012d24:	4621      	mov	r1, r4
 8012d26:	4640      	mov	r0, r8
 8012d28:	f7ff fee2 	bl	8012af0 <_printf_common>
 8012d2c:	3001      	adds	r0, #1
 8012d2e:	d14c      	bne.n	8012dca <_printf_i+0x1fe>
 8012d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d34:	b004      	add	sp, #16
 8012d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d3a:	4835      	ldr	r0, [pc, #212]	; (8012e10 <_printf_i+0x244>)
 8012d3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012d40:	6829      	ldr	r1, [r5, #0]
 8012d42:	6823      	ldr	r3, [r4, #0]
 8012d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8012d48:	6029      	str	r1, [r5, #0]
 8012d4a:	061d      	lsls	r5, r3, #24
 8012d4c:	d514      	bpl.n	8012d78 <_printf_i+0x1ac>
 8012d4e:	07df      	lsls	r7, r3, #31
 8012d50:	bf44      	itt	mi
 8012d52:	f043 0320 	orrmi.w	r3, r3, #32
 8012d56:	6023      	strmi	r3, [r4, #0]
 8012d58:	b91e      	cbnz	r6, 8012d62 <_printf_i+0x196>
 8012d5a:	6823      	ldr	r3, [r4, #0]
 8012d5c:	f023 0320 	bic.w	r3, r3, #32
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	2310      	movs	r3, #16
 8012d64:	e7b0      	b.n	8012cc8 <_printf_i+0xfc>
 8012d66:	6823      	ldr	r3, [r4, #0]
 8012d68:	f043 0320 	orr.w	r3, r3, #32
 8012d6c:	6023      	str	r3, [r4, #0]
 8012d6e:	2378      	movs	r3, #120	; 0x78
 8012d70:	4828      	ldr	r0, [pc, #160]	; (8012e14 <_printf_i+0x248>)
 8012d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d76:	e7e3      	b.n	8012d40 <_printf_i+0x174>
 8012d78:	0659      	lsls	r1, r3, #25
 8012d7a:	bf48      	it	mi
 8012d7c:	b2b6      	uxthmi	r6, r6
 8012d7e:	e7e6      	b.n	8012d4e <_printf_i+0x182>
 8012d80:	4615      	mov	r5, r2
 8012d82:	e7bb      	b.n	8012cfc <_printf_i+0x130>
 8012d84:	682b      	ldr	r3, [r5, #0]
 8012d86:	6826      	ldr	r6, [r4, #0]
 8012d88:	6961      	ldr	r1, [r4, #20]
 8012d8a:	1d18      	adds	r0, r3, #4
 8012d8c:	6028      	str	r0, [r5, #0]
 8012d8e:	0635      	lsls	r5, r6, #24
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	d501      	bpl.n	8012d98 <_printf_i+0x1cc>
 8012d94:	6019      	str	r1, [r3, #0]
 8012d96:	e002      	b.n	8012d9e <_printf_i+0x1d2>
 8012d98:	0670      	lsls	r0, r6, #25
 8012d9a:	d5fb      	bpl.n	8012d94 <_printf_i+0x1c8>
 8012d9c:	8019      	strh	r1, [r3, #0]
 8012d9e:	2300      	movs	r3, #0
 8012da0:	6123      	str	r3, [r4, #16]
 8012da2:	4615      	mov	r5, r2
 8012da4:	e7ba      	b.n	8012d1c <_printf_i+0x150>
 8012da6:	682b      	ldr	r3, [r5, #0]
 8012da8:	1d1a      	adds	r2, r3, #4
 8012daa:	602a      	str	r2, [r5, #0]
 8012dac:	681d      	ldr	r5, [r3, #0]
 8012dae:	6862      	ldr	r2, [r4, #4]
 8012db0:	2100      	movs	r1, #0
 8012db2:	4628      	mov	r0, r5
 8012db4:	f7ed fa24 	bl	8000200 <memchr>
 8012db8:	b108      	cbz	r0, 8012dbe <_printf_i+0x1f2>
 8012dba:	1b40      	subs	r0, r0, r5
 8012dbc:	6060      	str	r0, [r4, #4]
 8012dbe:	6863      	ldr	r3, [r4, #4]
 8012dc0:	6123      	str	r3, [r4, #16]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012dc8:	e7a8      	b.n	8012d1c <_printf_i+0x150>
 8012dca:	6923      	ldr	r3, [r4, #16]
 8012dcc:	462a      	mov	r2, r5
 8012dce:	4649      	mov	r1, r9
 8012dd0:	4640      	mov	r0, r8
 8012dd2:	47d0      	blx	sl
 8012dd4:	3001      	adds	r0, #1
 8012dd6:	d0ab      	beq.n	8012d30 <_printf_i+0x164>
 8012dd8:	6823      	ldr	r3, [r4, #0]
 8012dda:	079b      	lsls	r3, r3, #30
 8012ddc:	d413      	bmi.n	8012e06 <_printf_i+0x23a>
 8012dde:	68e0      	ldr	r0, [r4, #12]
 8012de0:	9b03      	ldr	r3, [sp, #12]
 8012de2:	4298      	cmp	r0, r3
 8012de4:	bfb8      	it	lt
 8012de6:	4618      	movlt	r0, r3
 8012de8:	e7a4      	b.n	8012d34 <_printf_i+0x168>
 8012dea:	2301      	movs	r3, #1
 8012dec:	4632      	mov	r2, r6
 8012dee:	4649      	mov	r1, r9
 8012df0:	4640      	mov	r0, r8
 8012df2:	47d0      	blx	sl
 8012df4:	3001      	adds	r0, #1
 8012df6:	d09b      	beq.n	8012d30 <_printf_i+0x164>
 8012df8:	3501      	adds	r5, #1
 8012dfa:	68e3      	ldr	r3, [r4, #12]
 8012dfc:	9903      	ldr	r1, [sp, #12]
 8012dfe:	1a5b      	subs	r3, r3, r1
 8012e00:	42ab      	cmp	r3, r5
 8012e02:	dcf2      	bgt.n	8012dea <_printf_i+0x21e>
 8012e04:	e7eb      	b.n	8012dde <_printf_i+0x212>
 8012e06:	2500      	movs	r5, #0
 8012e08:	f104 0619 	add.w	r6, r4, #25
 8012e0c:	e7f5      	b.n	8012dfa <_printf_i+0x22e>
 8012e0e:	bf00      	nop
 8012e10:	08013dc5 	.word	0x08013dc5
 8012e14:	08013dd6 	.word	0x08013dd6

08012e18 <_putc_r>:
 8012e18:	b570      	push	{r4, r5, r6, lr}
 8012e1a:	460d      	mov	r5, r1
 8012e1c:	4614      	mov	r4, r2
 8012e1e:	4606      	mov	r6, r0
 8012e20:	b118      	cbz	r0, 8012e2a <_putc_r+0x12>
 8012e22:	6983      	ldr	r3, [r0, #24]
 8012e24:	b90b      	cbnz	r3, 8012e2a <_putc_r+0x12>
 8012e26:	f7ff fa9b 	bl	8012360 <__sinit>
 8012e2a:	4b1c      	ldr	r3, [pc, #112]	; (8012e9c <_putc_r+0x84>)
 8012e2c:	429c      	cmp	r4, r3
 8012e2e:	d124      	bne.n	8012e7a <_putc_r+0x62>
 8012e30:	6874      	ldr	r4, [r6, #4]
 8012e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e34:	07d8      	lsls	r0, r3, #31
 8012e36:	d405      	bmi.n	8012e44 <_putc_r+0x2c>
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	0599      	lsls	r1, r3, #22
 8012e3c:	d402      	bmi.n	8012e44 <_putc_r+0x2c>
 8012e3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e40:	f7ff fb2c 	bl	801249c <__retarget_lock_acquire_recursive>
 8012e44:	68a3      	ldr	r3, [r4, #8]
 8012e46:	3b01      	subs	r3, #1
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	60a3      	str	r3, [r4, #8]
 8012e4c:	da05      	bge.n	8012e5a <_putc_r+0x42>
 8012e4e:	69a2      	ldr	r2, [r4, #24]
 8012e50:	4293      	cmp	r3, r2
 8012e52:	db1c      	blt.n	8012e8e <_putc_r+0x76>
 8012e54:	b2eb      	uxtb	r3, r5
 8012e56:	2b0a      	cmp	r3, #10
 8012e58:	d019      	beq.n	8012e8e <_putc_r+0x76>
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	1c5a      	adds	r2, r3, #1
 8012e5e:	6022      	str	r2, [r4, #0]
 8012e60:	701d      	strb	r5, [r3, #0]
 8012e62:	b2ed      	uxtb	r5, r5
 8012e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e66:	07da      	lsls	r2, r3, #31
 8012e68:	d405      	bmi.n	8012e76 <_putc_r+0x5e>
 8012e6a:	89a3      	ldrh	r3, [r4, #12]
 8012e6c:	059b      	lsls	r3, r3, #22
 8012e6e:	d402      	bmi.n	8012e76 <_putc_r+0x5e>
 8012e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e72:	f7ff fb14 	bl	801249e <__retarget_lock_release_recursive>
 8012e76:	4628      	mov	r0, r5
 8012e78:	bd70      	pop	{r4, r5, r6, pc}
 8012e7a:	4b09      	ldr	r3, [pc, #36]	; (8012ea0 <_putc_r+0x88>)
 8012e7c:	429c      	cmp	r4, r3
 8012e7e:	d101      	bne.n	8012e84 <_putc_r+0x6c>
 8012e80:	68b4      	ldr	r4, [r6, #8]
 8012e82:	e7d6      	b.n	8012e32 <_putc_r+0x1a>
 8012e84:	4b07      	ldr	r3, [pc, #28]	; (8012ea4 <_putc_r+0x8c>)
 8012e86:	429c      	cmp	r4, r3
 8012e88:	bf08      	it	eq
 8012e8a:	68f4      	ldreq	r4, [r6, #12]
 8012e8c:	e7d1      	b.n	8012e32 <_putc_r+0x1a>
 8012e8e:	4629      	mov	r1, r5
 8012e90:	4622      	mov	r2, r4
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7ff f88a 	bl	8011fac <__swbuf_r>
 8012e98:	4605      	mov	r5, r0
 8012e9a:	e7e3      	b.n	8012e64 <_putc_r+0x4c>
 8012e9c:	08013d74 	.word	0x08013d74
 8012ea0:	08013d94 	.word	0x08013d94
 8012ea4:	08013d54 	.word	0x08013d54

08012ea8 <__sread>:
 8012ea8:	b510      	push	{r4, lr}
 8012eaa:	460c      	mov	r4, r1
 8012eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb0:	f000 f8de 	bl	8013070 <_read_r>
 8012eb4:	2800      	cmp	r0, #0
 8012eb6:	bfab      	itete	ge
 8012eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012eba:	89a3      	ldrhlt	r3, [r4, #12]
 8012ebc:	181b      	addge	r3, r3, r0
 8012ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012ec2:	bfac      	ite	ge
 8012ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8012ec6:	81a3      	strhlt	r3, [r4, #12]
 8012ec8:	bd10      	pop	{r4, pc}

08012eca <__swrite>:
 8012eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ece:	461f      	mov	r7, r3
 8012ed0:	898b      	ldrh	r3, [r1, #12]
 8012ed2:	05db      	lsls	r3, r3, #23
 8012ed4:	4605      	mov	r5, r0
 8012ed6:	460c      	mov	r4, r1
 8012ed8:	4616      	mov	r6, r2
 8012eda:	d505      	bpl.n	8012ee8 <__swrite+0x1e>
 8012edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ee0:	2302      	movs	r3, #2
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f000 f868 	bl	8012fb8 <_lseek_r>
 8012ee8:	89a3      	ldrh	r3, [r4, #12]
 8012eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ef2:	81a3      	strh	r3, [r4, #12]
 8012ef4:	4632      	mov	r2, r6
 8012ef6:	463b      	mov	r3, r7
 8012ef8:	4628      	mov	r0, r5
 8012efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012efe:	f000 b817 	b.w	8012f30 <_write_r>

08012f02 <__sseek>:
 8012f02:	b510      	push	{r4, lr}
 8012f04:	460c      	mov	r4, r1
 8012f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f0a:	f000 f855 	bl	8012fb8 <_lseek_r>
 8012f0e:	1c43      	adds	r3, r0, #1
 8012f10:	89a3      	ldrh	r3, [r4, #12]
 8012f12:	bf15      	itete	ne
 8012f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f1e:	81a3      	strheq	r3, [r4, #12]
 8012f20:	bf18      	it	ne
 8012f22:	81a3      	strhne	r3, [r4, #12]
 8012f24:	bd10      	pop	{r4, pc}

08012f26 <__sclose>:
 8012f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f2a:	f000 b813 	b.w	8012f54 <_close_r>
	...

08012f30 <_write_r>:
 8012f30:	b538      	push	{r3, r4, r5, lr}
 8012f32:	4d07      	ldr	r5, [pc, #28]	; (8012f50 <_write_r+0x20>)
 8012f34:	4604      	mov	r4, r0
 8012f36:	4608      	mov	r0, r1
 8012f38:	4611      	mov	r1, r2
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	602a      	str	r2, [r5, #0]
 8012f3e:	461a      	mov	r2, r3
 8012f40:	f7f0 f9e8 	bl	8003314 <_write>
 8012f44:	1c43      	adds	r3, r0, #1
 8012f46:	d102      	bne.n	8012f4e <_write_r+0x1e>
 8012f48:	682b      	ldr	r3, [r5, #0]
 8012f4a:	b103      	cbz	r3, 8012f4e <_write_r+0x1e>
 8012f4c:	6023      	str	r3, [r4, #0]
 8012f4e:	bd38      	pop	{r3, r4, r5, pc}
 8012f50:	20003f70 	.word	0x20003f70

08012f54 <_close_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	4d06      	ldr	r5, [pc, #24]	; (8012f70 <_close_r+0x1c>)
 8012f58:	2300      	movs	r3, #0
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	602b      	str	r3, [r5, #0]
 8012f60:	f7f0 fa04 	bl	800336c <_close>
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	d102      	bne.n	8012f6e <_close_r+0x1a>
 8012f68:	682b      	ldr	r3, [r5, #0]
 8012f6a:	b103      	cbz	r3, 8012f6e <_close_r+0x1a>
 8012f6c:	6023      	str	r3, [r4, #0]
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	20003f70 	.word	0x20003f70

08012f74 <_fstat_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4d07      	ldr	r5, [pc, #28]	; (8012f94 <_fstat_r+0x20>)
 8012f78:	2300      	movs	r3, #0
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	4608      	mov	r0, r1
 8012f7e:	4611      	mov	r1, r2
 8012f80:	602b      	str	r3, [r5, #0]
 8012f82:	f7f0 fa43 	bl	800340c <_fstat>
 8012f86:	1c43      	adds	r3, r0, #1
 8012f88:	d102      	bne.n	8012f90 <_fstat_r+0x1c>
 8012f8a:	682b      	ldr	r3, [r5, #0]
 8012f8c:	b103      	cbz	r3, 8012f90 <_fstat_r+0x1c>
 8012f8e:	6023      	str	r3, [r4, #0]
 8012f90:	bd38      	pop	{r3, r4, r5, pc}
 8012f92:	bf00      	nop
 8012f94:	20003f70 	.word	0x20003f70

08012f98 <_isatty_r>:
 8012f98:	b538      	push	{r3, r4, r5, lr}
 8012f9a:	4d06      	ldr	r5, [pc, #24]	; (8012fb4 <_isatty_r+0x1c>)
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	4608      	mov	r0, r1
 8012fa2:	602b      	str	r3, [r5, #0]
 8012fa4:	f7f0 f9a0 	bl	80032e8 <_isatty>
 8012fa8:	1c43      	adds	r3, r0, #1
 8012faa:	d102      	bne.n	8012fb2 <_isatty_r+0x1a>
 8012fac:	682b      	ldr	r3, [r5, #0]
 8012fae:	b103      	cbz	r3, 8012fb2 <_isatty_r+0x1a>
 8012fb0:	6023      	str	r3, [r4, #0]
 8012fb2:	bd38      	pop	{r3, r4, r5, pc}
 8012fb4:	20003f70 	.word	0x20003f70

08012fb8 <_lseek_r>:
 8012fb8:	b538      	push	{r3, r4, r5, lr}
 8012fba:	4d07      	ldr	r5, [pc, #28]	; (8012fd8 <_lseek_r+0x20>)
 8012fbc:	4604      	mov	r4, r0
 8012fbe:	4608      	mov	r0, r1
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	602a      	str	r2, [r5, #0]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	f7f0 f9e7 	bl	800339a <_lseek>
 8012fcc:	1c43      	adds	r3, r0, #1
 8012fce:	d102      	bne.n	8012fd6 <_lseek_r+0x1e>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b103      	cbz	r3, 8012fd6 <_lseek_r+0x1e>
 8012fd4:	6023      	str	r3, [r4, #0]
 8012fd6:	bd38      	pop	{r3, r4, r5, pc}
 8012fd8:	20003f70 	.word	0x20003f70

08012fdc <memmove>:
 8012fdc:	4288      	cmp	r0, r1
 8012fde:	b510      	push	{r4, lr}
 8012fe0:	eb01 0402 	add.w	r4, r1, r2
 8012fe4:	d902      	bls.n	8012fec <memmove+0x10>
 8012fe6:	4284      	cmp	r4, r0
 8012fe8:	4623      	mov	r3, r4
 8012fea:	d807      	bhi.n	8012ffc <memmove+0x20>
 8012fec:	1e43      	subs	r3, r0, #1
 8012fee:	42a1      	cmp	r1, r4
 8012ff0:	d008      	beq.n	8013004 <memmove+0x28>
 8012ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ffa:	e7f8      	b.n	8012fee <memmove+0x12>
 8012ffc:	4402      	add	r2, r0
 8012ffe:	4601      	mov	r1, r0
 8013000:	428a      	cmp	r2, r1
 8013002:	d100      	bne.n	8013006 <memmove+0x2a>
 8013004:	bd10      	pop	{r4, pc}
 8013006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801300a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801300e:	e7f7      	b.n	8013000 <memmove+0x24>

08013010 <_realloc_r>:
 8013010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013014:	4680      	mov	r8, r0
 8013016:	4614      	mov	r4, r2
 8013018:	460e      	mov	r6, r1
 801301a:	b921      	cbnz	r1, 8013026 <_realloc_r+0x16>
 801301c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013020:	4611      	mov	r1, r2
 8013022:	f7fe bd29 	b.w	8011a78 <_malloc_r>
 8013026:	b92a      	cbnz	r2, 8013034 <_realloc_r+0x24>
 8013028:	f7fe fcba 	bl	80119a0 <_free_r>
 801302c:	4625      	mov	r5, r4
 801302e:	4628      	mov	r0, r5
 8013030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013034:	f000 f82e 	bl	8013094 <_malloc_usable_size_r>
 8013038:	4284      	cmp	r4, r0
 801303a:	4607      	mov	r7, r0
 801303c:	d802      	bhi.n	8013044 <_realloc_r+0x34>
 801303e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013042:	d812      	bhi.n	801306a <_realloc_r+0x5a>
 8013044:	4621      	mov	r1, r4
 8013046:	4640      	mov	r0, r8
 8013048:	f7fe fd16 	bl	8011a78 <_malloc_r>
 801304c:	4605      	mov	r5, r0
 801304e:	2800      	cmp	r0, #0
 8013050:	d0ed      	beq.n	801302e <_realloc_r+0x1e>
 8013052:	42bc      	cmp	r4, r7
 8013054:	4622      	mov	r2, r4
 8013056:	4631      	mov	r1, r6
 8013058:	bf28      	it	cs
 801305a:	463a      	movcs	r2, r7
 801305c:	f7fe fc8a 	bl	8011974 <memcpy>
 8013060:	4631      	mov	r1, r6
 8013062:	4640      	mov	r0, r8
 8013064:	f7fe fc9c 	bl	80119a0 <_free_r>
 8013068:	e7e1      	b.n	801302e <_realloc_r+0x1e>
 801306a:	4635      	mov	r5, r6
 801306c:	e7df      	b.n	801302e <_realloc_r+0x1e>
	...

08013070 <_read_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4d07      	ldr	r5, [pc, #28]	; (8013090 <_read_r+0x20>)
 8013074:	4604      	mov	r4, r0
 8013076:	4608      	mov	r0, r1
 8013078:	4611      	mov	r1, r2
 801307a:	2200      	movs	r2, #0
 801307c:	602a      	str	r2, [r5, #0]
 801307e:	461a      	mov	r2, r3
 8013080:	f7f0 f99c 	bl	80033bc <_read>
 8013084:	1c43      	adds	r3, r0, #1
 8013086:	d102      	bne.n	801308e <_read_r+0x1e>
 8013088:	682b      	ldr	r3, [r5, #0]
 801308a:	b103      	cbz	r3, 801308e <_read_r+0x1e>
 801308c:	6023      	str	r3, [r4, #0]
 801308e:	bd38      	pop	{r3, r4, r5, pc}
 8013090:	20003f70 	.word	0x20003f70

08013094 <_malloc_usable_size_r>:
 8013094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013098:	1f18      	subs	r0, r3, #4
 801309a:	2b00      	cmp	r3, #0
 801309c:	bfbc      	itt	lt
 801309e:	580b      	ldrlt	r3, [r1, r0]
 80130a0:	18c0      	addlt	r0, r0, r3
 80130a2:	4770      	bx	lr

080130a4 <_init>:
 80130a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130a6:	bf00      	nop
 80130a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130aa:	bc08      	pop	{r3}
 80130ac:	469e      	mov	lr, r3
 80130ae:	4770      	bx	lr

080130b0 <_fini>:
 80130b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b2:	bf00      	nop
 80130b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130b6:	bc08      	pop	{r3}
 80130b8:	469e      	mov	lr, r3
 80130ba:	4770      	bx	lr
