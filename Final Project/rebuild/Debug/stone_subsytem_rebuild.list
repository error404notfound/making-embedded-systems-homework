
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800e394  0800e394  0001e394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8ec  0800e8ec  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  0800e8ec  0800e8ec  0001e8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8f4  0800e8f4  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8f4  0800e8f4  0001e8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8f8  0800e8f8  0001e8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  0800e8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020154  2**0
                  CONTENTS
 10 .bss          00000a40  20000154  20000154  00020154  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b94  20000b94  00020154  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029603  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e68  00000000  00000000  00049787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  0004f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bb8  00000000  00000000  00051418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ce2f  00000000  00000000  00052fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b0dd  00000000  00000000  0007fdff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec0ed  00000000  00000000  000aaedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00196fc9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085fc  00000000  00000000  0019701c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000154 	.word	0x20000154
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e37c 	.word	0x0800e37c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000158 	.word	0x20000158
 80001ec:	0800e37c 	.word	0x0800e37c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2bff      	cmp	r3, #255	; 0xff
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fc11 	bl	8000f18 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fc62 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fc5f 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fc5c 	bl	8000fc0 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2bff      	cmp	r3, #255	; 0xff
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	0800e394 	.word	0x0800e394
 8000738:	0800e3dc 	.word	0x0800e3dc
 800073c:	0800e3e0 	.word	0x0800e3e0
 8000740:	20000270 	.word	0x20000270
 8000744:	20000170 	.word	0x20000170

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fbf1 	bl	8000f48 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb78 	bl	8000e90 <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fbe6 	bl	8000fc0 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fbe3 	bl	8000fc0 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fbe0 	bl	8000fc0 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fbd4 	bl	8000fc0 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fbd1 	bl	8000fc0 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fbae 	bl	8000fc0 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fbab 	bl	8000fc0 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fb94 	bl	8000fc0 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000270 	.word	0x20000270
 80008a4:	20000170 	.word	0x20000170
 80008a8:	20000274 	.word	0x20000274
 80008ac:	0800e3e4 	.word	0x0800e3e4
 80008b0:	0800e3ec 	.word	0x0800e3ec
 80008b4:	0800e3dc 	.word	0x0800e3dc
 80008b8:	0800e3f4 	.word	0x0800e3f4
 80008bc:	0800e3e0 	.word	0x0800e3e0

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2bff      	cmp	r3, #255	; 0xff
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000908:	d102      	bne.n	8000910 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800090a:	2310      	movs	r3, #16
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	e002      	b.n	8000916 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
}
 8000918:	4618      	mov	r0, r3
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	460b      	mov	r3, r1
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000936:	f107 021c 	add.w	r2, r7, #28
 800093a:	7afb      	ldrb	r3, [r7, #11]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ffbe 	bl	80008c0 <ConsoleParamFindN>
 8000944:	4603      	mov	r3, r0
 8000946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	4413      	add	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095e:	e011      	b.n	8000984 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000960:	f107 0214 	add.w	r2, r7, #20
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4413      	add	r3, r2
 8000968:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096c:	701a      	strb	r2, [r3, #0]
		i++;
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	3301      	adds	r3, #1
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000974:	69fa      	ldr	r2, [r7, #28]
 8000976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000978:	4413      	add	r3, r2
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000984:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000988:	2b0a      	cmp	r3, #10
 800098a:	d00a      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
 800098c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d006      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000994:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b07      	cmp	r3, #7
 80009a0:	d9de      	bls.n	8000960 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d102      	bne.n	80009ae <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a8:	2310      	movs	r3, #16
 80009aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10e      	bne.n	80009d4 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b6:	f107 0214 	add.w	r2, r7, #20
 80009ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009bc:	4413      	add	r3, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f00c fb46 	bl	800d058 <atoi>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	460b      	mov	r3, r1
 80009ea:	607a      	str	r2, [r7, #4]
 80009ec:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	7afb      	ldrb	r3, [r7, #11]
 80009fc:	4619      	mov	r1, r3
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff5e 	bl	80008c0 <ConsoleParamFindN>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d12c      	bne.n	8000a68 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e01e      	b.n	8000a52 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a14:	7ffb      	ldrb	r3, [r7, #31]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d10d      	bne.n	8000a36 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	6a3b      	ldr	r3, [r7, #32]
 8000a1e:	4413      	add	r3, r2
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	f107 0217 	add.w	r2, r7, #23
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f8c5 	bl	8000bbc <ConsoleUtilHexCharToInt>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3e:	011b      	lsls	r3, r3, #4
 8000a40:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a42:	7dfb      	ldrb	r3, [r7, #23]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a48:	4413      	add	r3, r2
 8000a4a:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	6a3b      	ldr	r3, [r7, #32]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	623b      	str	r3, [r7, #32]
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9dd      	bls.n	8000a14 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b11      	cmp	r3, #17
 8000a5c:	d101      	bne.n	8000a62 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a66:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3728      	adds	r7, #40	; 0x28
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	4603      	mov	r3, r0
 8000a7a:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	e01b      	b.n	8000abe <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a86:	7cfb      	ldrb	r3, [r7, #19]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d115      	bne.n	8000ab8 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8c:	88fa      	ldrh	r2, [r7, #6]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f1c3 0303 	rsb	r3, r3, #3
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	fa42 f303 	asr.w	r3, r2, r3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa2:	f107 020c 	add.w	r2, r7, #12
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	441a      	add	r2, r3
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	4611      	mov	r1, r2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 f8c5 	bl	8000c3e <ConsoleUtilsIntToHexChar>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d9e0      	bls.n	8000a86 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac4:	f107 020c 	add.w	r2, r7, #12
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fa73 	bl	8000fc0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af4:	2301      	movs	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da07      	bge.n	8000b0e <smallItoa+0x2a>
		isNegative = true;
 8000afe:	2301      	movs	r3, #1
 8000b00:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	425b      	negs	r3, r3
 8000b06:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b12:	e007      	b.n	8000b24 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1c:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1f1      	bne.n	8000b14 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	fb01 f202 	mul.w	r2, r1, r2
 8000b52:	1a9b      	subs	r3, r3, r2
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3230      	adds	r2, #48	; 0x30
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b62:	69ba      	ldr	r2, [r7, #24]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6a:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	1e5a      	subs	r2, r3, #1
 8000b70:	617a      	str	r2, [r7, #20]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d1e6      	bne.n	8000b44 <smallItoa+0x60>

	if (isNegative) {
 8000b76:	7ffb      	ldrb	r3, [r7, #31]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	222d      	movs	r2, #45	; 0x2d
 8000b80:	701a      	strb	r2, [r3, #0]
	}
}
 8000b82:	bf00      	nop
 8000b84:	3724      	adds	r7, #36	; 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff9e 	bl	8000ae4 <smallItoa>
	ConsoleIoSendString(out);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 fa07 	bl	8000fc0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd0:	d908      	bls.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b39      	cmp	r3, #57	; 0x39
 8000bd6:	d805      	bhi.n	8000be4 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	3b30      	subs	r3, #48	; 0x30
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	e025      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	2b40      	cmp	r3, #64	; 0x40
 8000be8:	d908      	bls.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b46      	cmp	r3, #70	; 0x46
 8000bee:	d805      	bhi.n	8000bfc <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	3b37      	subs	r3, #55	; 0x37
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	e019      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b60      	cmp	r3, #96	; 0x60
 8000c00:	d908      	bls.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b66      	cmp	r3, #102	; 0x66
 8000c06:	d805      	bhi.n	8000c14 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3b57      	subs	r3, #87	; 0x57
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d105      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b0d      	cmp	r3, #13
 8000c1e:	d102      	bne.n	8000c26 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b20      	cmp	r3, #32
 8000c24:	d102      	bne.n	8000c2c <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c26:	2311      	movs	r3, #17
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d805      	bhi.n	8000c60 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3330      	adds	r3, #48	; 0x30
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00d      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d908      	bls.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d805      	bhi.n	8000c78 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	3337      	adds	r3, #55	; 0x37
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <ConsoleReceiveParamString>:
{
	ConsoleIoSendString(buffer);
	ConsoleIoSendString(STR_ENDLINE);
	return COMMAND_SUCCESS;
}
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterChar){
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b088      	sub	sp, #32
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	460b      	mov	r3, r1
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	72fb      	strb	r3, [r7, #11]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	77fb      	strb	r3, [r7, #31]
	uint32_t startIndex = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
	uint16_t value = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	82bb      	strh	r3, [r7, #20]
	uint32_t i =0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
	char charVal;


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f7ff fe05 	bl	80008c0 <ConsoleParamFindN>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	77fb      	strb	r3, [r7, #31]
	i = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
	charVal = buffer[startIndex + i];
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000ccc:	e00e      	b.n	8000cec <ConsoleReceiveParamString+0x62>
				&& ( PARAMETER_SEPARATER != charVal )
			&& ( i < INT16_MAX_STR_LENGTH ) )
		{
		parameterChar[i] = charVal;					// copy the relevant part
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	7dfa      	ldrb	r2, [r7, #23]
 8000cd6:	701a      	strb	r2, [r3, #0]
			i++;
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
			charVal = buffer[startIndex + i];
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	2b0a      	cmp	r3, #10
 8000cf0:	d008      	beq.n	8000d04 <ConsoleReceiveParamString+0x7a>
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	2b0d      	cmp	r3, #13
 8000cf6:	d005      	beq.n	8000d04 <ConsoleReceiveParamString+0x7a>
				&& ( PARAMETER_SEPARATER != charVal )
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	2b20      	cmp	r3, #32
 8000cfc:	d002      	beq.n	8000d04 <ConsoleReceiveParamString+0x7a>
			&& ( i < INT16_MAX_STR_LENGTH ) )
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b07      	cmp	r3, #7
 8000d02:	d9e4      	bls.n	8000cce <ConsoleReceiveParamString+0x44>
		}
		if ( i == INT16_MAX_STR_LENGTH)
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d101      	bne.n	8000d0e <ConsoleReceiveParamString+0x84>
		{
			result = COMMAND_PARAMETER_ERROR;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	77fb      	strb	r3, [r7, #31]
		}
		if ( COMMAND_SUCCESS == result )
 8000d0e:	7ffb      	ldrb	r3, [r7, #31]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <ConsoleReceiveParamString+0x94>
		{
			parameterChar[i] = NULL_CHAR;
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
	return result;
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3720      	adds	r7, #32
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e01e      	b.n	8000d94 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d56:	4914      	ldr	r1, [pc, #80]	; (8000da8 <ConsoleCommandHelp+0x68>)
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4413      	add	r3, r2
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	440b      	add	r3, r1
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f92a 	bl	8000fc0 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <ConsoleCommandHelp+0x6c>)
 8000d6e:	f000 f927 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4613      	mov	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <ConsoleCommandHelp+0x68>)
 8000d80:	4413      	add	r3, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f91c 	bl	8000fc0 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d88:	4809      	ldr	r0, [pc, #36]	; (8000db0 <ConsoleCommandHelp+0x70>)
 8000d8a:	f000 f919 	bl	8000fc0 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3db      	bcc.n	8000d56 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800e52c 	.word	0x0800e52c
 8000dac:	0800e42c 	.word	0x0800e42c
 8000db0:	0800e430 	.word	0x0800e430

08000db4 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fdad 	bl	8000924 <ConsoleReceiveParamInt16>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d116      	bne.n	8000e02 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <ConsoleCommandParamExampleInt16+0x58>)
 8000dd6:	f000 f8f3 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fed5 	bl	8000b8e <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <ConsoleCommandParamExampleInt16+0x5c>)
 8000de6:	f000 f8eb 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe3e 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000df6:	4807      	ldr	r0, [pc, #28]	; (8000e14 <ConsoleCommandParamExampleInt16+0x60>)
 8000df8:	f000 f8e2 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <ConsoleCommandParamExampleInt16+0x64>)
 8000dfe:	f000 f8df 	bl	8000fc0 <ConsoleIoSendString>
	}
	return result;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	0800e434 	.word	0x0800e434
 8000e10:	0800e444 	.word	0x0800e444
 8000e14:	0800e44c 	.word	0x0800e44c
 8000e18:	0800e430 	.word	0x0800e430

08000e1c <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fdd7 	bl	80009e0 <ConsoleReceiveParamHexUint16>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d109      	bne.n	8000e50 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e3e:	f000 f8bf 	bl	8000fc0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e42:	89bb      	ldrh	r3, [r7, #12]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe14 	bl	8000a72 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e4c:	f000 f8b8 	bl	8000fc0 <ConsoleIoSendString>
	}
	return result;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	0800e450 	.word	0x0800e450
 8000e60:	0800e430 	.word	0x0800e430

08000e64 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <ConsoleCommandVer+0x24>)
 8000e72:	f000 f8a5 	bl	8000fc0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <ConsoleCommandVer+0x28>)
 8000e78:	f000 f8a2 	bl	8000fc0 <ConsoleIoSendString>
	return result;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	0800e460 	.word	0x0800e460
 8000e8c:	0800e430 	.word	0x0800e430

08000e90 <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <ConsoleCommandsGetTable+0x10>)
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	0800e52c 	.word	0x0800e52c

08000ea4 <ConsoleCommandDebugPrint>:

static eCommandResult_T ConsoleCommandDebugPrint(const char buffer[])
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
	// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
	// All though it's great input sanitisation it's okay for this.
	char command[5] ={0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, &command);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fee2 	bl	8000c8a <ConsoleReceiveParamString>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
	char trigger = command[1];
 8000eca:	7a7b      	ldrb	r3, [r7, #9]
 8000ecc:	73bb      	strb	r3, [r7, #14]
	if ('n'==trigger)
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	2b6e      	cmp	r3, #110	; 0x6e
 8000ed2:	d103      	bne.n	8000edc <ConsoleCommandDebugPrint+0x38>
	{
		// trigger is on
		setUserDebugLogging(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f001 fb21 	bl	800251c <setUserDebugLogging>
 8000eda:	e005      	b.n	8000ee8 <ConsoleCommandDebugPrint+0x44>
	}
	else if('f'== trigger){
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	2b66      	cmp	r3, #102	; 0x66
 8000ee0:	d102      	bne.n	8000ee8 <ConsoleCommandDebugPrint+0x44>

		// trigger is off.
		setUserDebugLogging(0);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f001 fb1a 	bl	800251c <setUserDebugLogging>
	else
	{
		//the inputs bad output guide text.
	}

	return result;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	charCount = 0;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <reset+0x1c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <reset+0x20>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]

}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000280 	.word	0x20000280
 8000f14:	2000027c 	.word	0x2000027c

08000f18 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <ConsoleIoInit+0x28>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <ConsoleIoInit+0x28>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4905      	ldr	r1, [pc, #20]	; (8000f44 <ConsoleIoInit+0x2c>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f006 fb9b 	bl	800766a <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000278 	.word	0x20000278
 8000f44:	2000028e 	.word	0x2000028e

08000f48 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <ConsoleIoReceive+0x68>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d11f      	bne.n	8000fa0 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8000f60:	e00a      	b.n	8000f78 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	4413      	add	r3, r2
 8000f68:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <ConsoleIoReceive+0x6c>)
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	440a      	add	r2, r1
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	701a      	strb	r2, [r3, #0]
			i++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <ConsoleIoReceive+0x70>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d3ed      	bcc.n	8000f62 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <ConsoleIoReceive+0x70>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8000f90:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <ConsoleIoReceive+0x6c>)
 8000f92:	480a      	ldr	r0, [pc, #40]	; (8000fbc <ConsoleIoReceive+0x74>)
 8000f94:	f00c f994 	bl	800d2c0 <iprintf>
		// reset counts
		reset();
 8000f98:	f7ff ffac 	bl	8000ef4 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e003      	b.n	8000fa8 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000027c 	.word	0x2000027c
 8000fb4:	20000284 	.word	0x20000284
 8000fb8:	20000280 	.word	0x20000280
 8000fbc:	0800e474 	.word	0x0800e474

08000fc0 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <ConsoleIoSendString+0x1c>)
 8000fcc:	f00c f978 	bl	800d2c0 <iprintf>
	return CONSOLE_SUCCESS;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	0800e474 	.word	0x0800e474

08000fe0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_UART_RxCpltCallback+0x44>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <HAL_UART_RxCpltCallback+0x48>)
 8000fee:	7811      	ldrb	r1, [r2, #0]
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_UART_RxCpltCallback+0x4c>)
 8000ff2:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_UART_RxCpltCallback+0x44>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_UART_RxCpltCallback+0x44>)
 8000ffc:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_UART_RxCpltCallback+0x48>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b0a      	cmp	r3, #10
 8001004:	d102      	bne.n	800100c <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <HAL_UART_RxCpltCallback+0x50>)
 8001008:	2201      	movs	r2, #1
 800100a:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_UART_RxCpltCallback+0x54>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2201      	movs	r2, #1
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <HAL_UART_RxCpltCallback+0x48>)
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fb28 	bl	800766a <HAL_UART_Receive_IT>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000280 	.word	0x20000280
 8001028:	2000028e 	.word	0x2000028e
 800102c:	20000284 	.word	0x20000284
 8001030:	2000027c 	.word	0x2000027c
 8001034:	20000278 	.word	0x20000278

08001038 <MovementControllerInit>:
extern movementData_t lastAccel;

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f97e 	bl	8001344 <Lis3dhInit>
	I3G450D_Init(SPIxHandle);
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f000 fa0b 	bl	8001464 <I3G450D_Init>


}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <SessionControllerInit>:
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}

void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle,UART_HandleTypeDef * HUARTxHandler)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]


	MovementControllerInit(I2Cxhandle,SPIxHandle);
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ffe6 	bl	8001038 <MovementControllerInit>
	ConsoleInit(HUARTxHandler);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff fb3b 	bl	80006e8 <ConsoleInit>
	currentState = START;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <SessionControllerInit+0x34>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001078:	f001 fb08 	bl	800268c <HAL_GetTick>
 800107c:	4603      	mov	r3, r0
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <SessionControllerInit+0x38>)
 8001080:	6013      	str	r3, [r2, #0]


}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000028f 	.word	0x2000028f
 8001090:	20000294 	.word	0x20000294

08001094 <SessionControllerProcess>:
void SessionControllerProcess()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0


// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 800109a:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <SessionControllerProcess+0x64>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <SessionControllerProcess+0x68>)
 80010a2:	460b      	mov	r3, r1
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a5b      	subs	r3, r3, r1
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	463c      	mov	r4, r7
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	61fb      	str	r3, [r7, #28]


	//MovementControllerProcess();


	if ( HAL_GetTick() - timeStateStarted > timeout )
 80010c0:	f001 fae4 	bl	800268c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <SessionControllerProcess+0x6c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d201      	bcs.n	80010d6 <SessionControllerProcess+0x42>
	{

		current.onEnd();
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <SessionControllerProcess+0x70>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <SessionControllerProcess+0x4e>
	{

		current.onButtonPress();
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4798      	blx	r3
	if( 1 == shakeToWakeTriggered)
	{
		// shake to wake response.
	}
	// in mode
	if( 1 == inMode )
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <SessionControllerProcess+0x74>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d001      	beq.n	80010ee <SessionControllerProcess+0x5a>

	}
	else{
		// run out put for current state
		// run proccess for current state.
		current.stateProcess();
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4798      	blx	r3
	}


}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdb0      	pop	{r4, r5, r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000028f 	.word	0x2000028f
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000294 	.word	0x20000294
 8001104:	20000298 	.word	0x20000298
 8001108:	20000299 	.word	0x20000299

0800110c <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	debugPrint(" State = starting");
	return 0;
}
int IdleAwake(){
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <IdleAwake+0x28>)
 8001112:	781a      	ldrb	r2, [r3, #0]
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <IdleAwake+0x2c>)
 8001116:	701a      	strb	r2, [r3, #0]
	currentState = IDLE_AWAKE;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <IdleAwake+0x28>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800111e:	f001 fab5 	bl	800268c <HAL_GetTick>
 8001122:	4603      	mov	r3, r0
 8001124:	4a05      	ldr	r2, [pc, #20]	; (800113c <IdleAwake+0x30>)
 8001126:	6013      	str	r3, [r2, #0]
	debugPrint(" State = IdleAwake");
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <IdleAwake+0x34>)
 800112a:	f001 f9d7 	bl	80024dc <debugPrint>
	return 0;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000028f 	.word	0x2000028f
 8001138:	20000290 	.word	0x20000290
 800113c:	20000294 	.word	0x20000294
 8001140:	0800e48c 	.word	0x0800e48c

08001144 <DeepSleep>:
int DeepSleep(){
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <DeepSleep+0x28>)
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <DeepSleep+0x2c>)
 800114e:	701a      	strb	r2, [r3, #0]
	currentState = DEEP_SLEEP;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <DeepSleep+0x28>)
 8001152:	2202      	movs	r2, #2
 8001154:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001156:	f001 fa99 	bl	800268c <HAL_GetTick>
 800115a:	4603      	mov	r3, r0
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <DeepSleep+0x30>)
 800115e:	6013      	str	r3, [r2, #0]
	debugPrint(" State = DeepSleep");
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <DeepSleep+0x34>)
 8001162:	f001 f9bb 	bl	80024dc <debugPrint>
	return 0;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000028f 	.word	0x2000028f
 8001170:	20000290 	.word	0x20000290
 8001174:	20000294 	.word	0x20000294
 8001178:	0800e4a0 	.word	0x0800e4a0

0800117c <WaitingForSelection>:
int WaitingForSelection(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <WaitingForSelection+0x28>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <WaitingForSelection+0x2c>)
 8001186:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <WaitingForSelection+0x28>)
 800118a:	2203      	movs	r2, #3
 800118c:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800118e:	f001 fa7d 	bl	800268c <HAL_GetTick>
 8001192:	4603      	mov	r3, r0
 8001194:	4a05      	ldr	r2, [pc, #20]	; (80011ac <WaitingForSelection+0x30>)
 8001196:	6013      	str	r3, [r2, #0]
	debugPrint(" State = WaitingForSelection");
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <WaitingForSelection+0x34>)
 800119a:	f001 f99f 	bl	80024dc <debugPrint>
	return 0;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000028f 	.word	0x2000028f
 80011a8:	20000290 	.word	0x20000290
 80011ac:	20000294 	.word	0x20000294
 80011b0:	0800e4b4 	.word	0x0800e4b4

080011b4 <LoadMode>:
int LoadMode(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <LoadMode+0x28>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <LoadMode+0x2c>)
 80011be:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <LoadMode+0x28>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80011c6:	f001 fa61 	bl	800268c <HAL_GetTick>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <LoadMode+0x30>)
 80011ce:	6013      	str	r3, [r2, #0]
	debugPrint(" State = LoadMode");
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <LoadMode+0x34>)
 80011d2:	f001 f983 	bl	80024dc <debugPrint>
	return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000028f 	.word	0x2000028f
 80011e0:	20000290 	.word	0x20000290
 80011e4:	20000294 	.word	0x20000294
 80011e8:	0800e4d4 	.word	0x0800e4d4

080011ec <CliMode>:
int CliMode(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

	previouseState = currentState;
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <CliMode+0x34>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <CliMode+0x38>)
 80011f6:	701a      	strb	r2, [r3, #0]
	currentState = CLI_MODE;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <CliMode+0x34>)
 80011fa:	2206      	movs	r2, #6
 80011fc:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <CliMode+0x3c>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
	// in climode we want the debug output off while we are waiting for input.
	pauseDebugLogging();
 8001204:	f001 f99a 	bl	800253c <pauseDebugLogging>

	timeStateStarted = HAL_GetTick();
 8001208:	f001 fa40 	bl	800268c <HAL_GetTick>
 800120c:	4603      	mov	r3, r0
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <CliMode+0x40>)
 8001210:	6013      	str	r3, [r2, #0]
	debugPrint(" State = CliMode");
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <CliMode+0x44>)
 8001214:	f001 f962 	bl	80024dc <debugPrint>

	return 0;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000028f 	.word	0x2000028f
 8001224:	20000290 	.word	0x20000290
 8001228:	20000298 	.word	0x20000298
 800122c:	20000294 	.word	0x20000294
 8001230:	0800e4e8 	.word	0x0800e4e8

08001234 <StartPreviouseMode>:
int StartPreviouseMode(){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	currentState = previouseState;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <StartPreviouseMode+0x2c>)
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <StartPreviouseMode+0x30>)
 800123e:	701a      	strb	r2, [r3, #0]
	previouseState = CLI_MODE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <StartPreviouseMode+0x2c>)
 8001242:	2206      	movs	r2, #6
 8001244:	701a      	strb	r2, [r3, #0]
	// we also reset to our currentDebugMode
	resumeDebugLogging();
 8001246:	f001 f985 	bl	8002554 <resumeDebugLogging>

	timeStateStarted = HAL_GetTick();
 800124a:	f001 fa1f 	bl	800268c <HAL_GetTick>
 800124e:	4603      	mov	r3, r0
 8001250:	4a05      	ldr	r2, [pc, #20]	; (8001268 <StartPreviouseMode+0x34>)
 8001252:	6013      	str	r3, [r2, #0]
	debugPrint(" State = StartPreviouseMode");
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <StartPreviouseMode+0x38>)
 8001256:	f001 f941 	bl	80024dc <debugPrint>
	return 0;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000290 	.word	0x20000290
 8001264:	2000028f 	.word	0x2000028f
 8001268:	20000294 	.word	0x20000294
 800126c:	0800e4fc 	.word	0x0800e4fc

08001270 <InMode>:
int InMode()
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <InMode+0x20>)
 8001276:	2205      	movs	r2, #5
 8001278:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800127a:	f001 fa07 	bl	800268c <HAL_GetTick>
 800127e:	4603      	mov	r3, r0
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <InMode+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
	debugPrint(" State = InMode");
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <InMode+0x28>)
 8001286:	f001 f929 	bl	80024dc <debugPrint>
	return 0;
 800128a:	2300      	movs	r3, #0

}
 800128c:	4618      	mov	r0, r3
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000028f 	.word	0x2000028f
 8001294:	20000294 	.word	0x20000294
 8001298:	0800e518 	.word	0x0800e518

0800129c <StartProcess>:
int SleepOutput(){return 0;}
int WaitingForInputOutput(){return 0;}
int CliModeOutput(){return 0;}
int ModeLoading(){return 0;}

int StartProcess(){return 0;}
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
 80012a0:	2300      	movs	r3, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <IdleAwakeProcess>:

int IdleAwakeProcess(){return 0;}
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	2300      	movs	r3, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <DeepSleepProcess>:

int DeepSleepProcess(){return 0;}
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
 80012c0:	2300      	movs	r3, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <WaitingForSelectionProcess>:

int WaitingForSelectionProcess(){return 0;}
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	2300      	movs	r3, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LoadModeProcess>:

int LoadModeProcess(){return 0;}
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	2300      	movs	r3, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <CliModeProcess>:

int CliModeProcess(){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	ConsoleProcess();
 80012f0:	f7ff fa2a 	bl	8000748 <ConsoleProcess>

	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}

080012fa <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}

int InModeProcess(){return 0;}
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	2300      	movs	r3, #0
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8001316:	2301      	movs	r3, #1
 8001318:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_GPIO_EXTI_Callback+0x30>)
 800131c:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	4619      	mov	r1, r3
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f001 fd4e 	bl	8002dc4 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_GPIO_EXTI_Callback+0x34>)
 8001330:	2201      	movs	r2, #1
 8001332:	701a      	strb	r2, [r3, #0]
	}

}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40020000 	.word	0x40020000
 8001340:	20000298 	.word	0x20000298

08001344 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
 800134a:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 800134c:	4a40      	ldr	r2, [pc, #256]	; (8001450 <Lis3dhInit+0x10c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001352:	238f      	movs	r3, #143	; 0x8f
 8001354:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 8001356:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <Lis3dhInit+0x10c>)
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	2130      	movs	r1, #48	; 0x30
 800135c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001360:	2201      	movs	r2, #1
 8001362:	f003 fdeb 	bl	8004f3c <HAL_I2C_IsDeviceReady>
 8001366:	4603      	mov	r3, r0
 8001368:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <Lis3dhInit+0x10c>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2130      	movs	r1, #48	; 0x30
 8001370:	f107 0214 	add.w	r2, r7, #20
 8001374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	f003 faba 	bl	80048f4 <HAL_I2C_Master_Transmit>
 8001380:	4603      	mov	r3, r0
 8001382:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 800138a:	f000 f863 	bl	8001454 <errorHandler>





}
 800138e:	e05b      	b.n	8001448 <Lis3dhInit+0x104>
	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <Lis3dhInit+0x10c>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	2130      	movs	r1, #48	; 0x30
 8001396:	f107 0208 	add.w	r2, r7, #8
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2302      	movs	r3, #2
 80013a2:	f003 fba5 	bl	8004af0 <HAL_I2C_Master_Receive>
 80013a6:	4603      	mov	r3, r0
 80013a8:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <Lis3dhInit+0x72>
	        	errorHandler();
 80013b0:	f000 f850 	bl	8001454 <errorHandler>
}
 80013b4:	e048      	b.n	8001448 <Lis3dhInit+0x104>
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80013b6:	23a0      	movs	r3, #160	; 0xa0
 80013b8:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <Lis3dhInit+0x10c>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	2130      	movs	r1, #48	; 0x30
 80013c0:	f107 0214 	add.w	r2, r7, #20
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	f003 fa92 	bl	80048f4 <HAL_I2C_Master_Transmit>
 80013d0:	4603      	mov	r3, r0
 80013d2:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <Lis3dhInit+0x10c>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	2130      	movs	r1, #48	; 0x30
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2302      	movs	r3, #2
 80013e6:	f003 fb83 	bl	8004af0 <HAL_I2C_Master_Receive>
 80013ea:	4603      	mov	r3, r0
 80013ec:	75fb      	strb	r3, [r7, #23]
				sendBuff[0] = LIS3DH_REG_CTRL1;
 80013ee:	2320      	movs	r3, #32
 80013f0:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = 0x57;
 80013f2:	2357      	movs	r3, #87	; 0x57
 80013f4:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <Lis3dhInit+0x10c>)
 80013f8:	6818      	ldr	r0, [r3, #0]
 80013fa:	2130      	movs	r1, #48	; 0x30
 80013fc:	f107 0214 	add.w	r2, r7, #20
 8001400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2302      	movs	r3, #2
 8001408:	f003 fa74 	bl	80048f4 <HAL_I2C_Master_Transmit>
 800140c:	4603      	mov	r3, r0
 800140e:	75fb      	strb	r3, [r7, #23]
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001410:	23a0      	movs	r3, #160	; 0xa0
 8001412:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <Lis3dhInit+0x10c>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	2130      	movs	r1, #48	; 0x30
 800141a:	f107 0214 	add.w	r2, r7, #20
 800141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2301      	movs	r3, #1
 8001426:	f003 fa65 	bl	80048f4 <HAL_I2C_Master_Transmit>
 800142a:	4603      	mov	r3, r0
 800142c:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <Lis3dhInit+0x10c>)
 8001430:	6818      	ldr	r0, [r3, #0]
 8001432:	2130      	movs	r1, #48	; 0x30
 8001434:	f107 0208 	add.w	r2, r7, #8
 8001438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2302      	movs	r3, #2
 8001440:	f003 fb56 	bl	8004af0 <HAL_I2C_Master_Receive>
 8001444:	4603      	mov	r3, r0
 8001446:	75fb      	strb	r3, [r7, #23]
}
 8001448:	bf00      	nop
 800144a:	3718      	adds	r7, #24
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000029c 	.word	0x2000029c

08001454 <errorHandler>:
	*acelY = LastYAcel;
	*acelZ = LastZAcel;

}
void errorHandler()
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	// handle the error
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 800146c:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <I3G450D_Init+0x180>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2102      	movs	r1, #2
 8001476:	485c      	ldr	r0, [pc, #368]	; (80015e8 <I3G450D_Init+0x184>)
 8001478:	f001 fcbc 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800147c:	2014      	movs	r0, #20
 800147e:	f001 f911 	bl	80026a4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	2102      	movs	r1, #2
 8001486:	4858      	ldr	r0, [pc, #352]	; (80015e8 <I3G450D_Init+0x184>)
 8001488:	f001 fcb4 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800148c:	2014      	movs	r0, #20
 800148e:	f001 f909 	bl	80026a4 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8001492:	4b56      	ldr	r3, [pc, #344]	; (80015ec <I3G450D_Init+0x188>)
 8001494:	2220      	movs	r2, #32
 8001496:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8001498:	4b54      	ldr	r3, [pc, #336]	; (80015ec <I3G450D_Init+0x188>)
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800149e:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <I3G450D_Init+0x180>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	2332      	movs	r3, #50	; 0x32
 80014a4:	2202      	movs	r2, #2
 80014a6:	4951      	ldr	r1, [pc, #324]	; (80015ec <I3G450D_Init+0x188>)
 80014a8:	f004 ff73 	bl	8006392 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80014ac:	2201      	movs	r2, #1
 80014ae:	2102      	movs	r1, #2
 80014b0:	484d      	ldr	r0, [pc, #308]	; (80015e8 <I3G450D_Init+0x184>)
 80014b2:	f001 fc9f 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014b6:	2014      	movs	r0, #20
 80014b8:	f001 f8f4 	bl	80026a4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2102      	movs	r1, #2
 80014c0:	4849      	ldr	r0, [pc, #292]	; (80015e8 <I3G450D_Init+0x184>)
 80014c2:	f001 fc97 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014c6:	2014      	movs	r0, #20
 80014c8:	f001 f8ec 	bl	80026a4 <HAL_Delay>
	spiTxBuf[0]=0x21;
 80014cc:	4b47      	ldr	r3, [pc, #284]	; (80015ec <I3G450D_Init+0x188>)
 80014ce:	2221      	movs	r2, #33	; 0x21
 80014d0:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <I3G450D_Init+0x188>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80014d8:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <I3G450D_Init+0x180>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	2332      	movs	r3, #50	; 0x32
 80014de:	2202      	movs	r2, #2
 80014e0:	4942      	ldr	r1, [pc, #264]	; (80015ec <I3G450D_Init+0x188>)
 80014e2:	f004 ff56 	bl	8006392 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	2102      	movs	r1, #2
 80014ea:	483f      	ldr	r0, [pc, #252]	; (80015e8 <I3G450D_Init+0x184>)
 80014ec:	f001 fc82 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014f0:	2014      	movs	r0, #20
 80014f2:	f001 f8d7 	bl	80026a4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2102      	movs	r1, #2
 80014fa:	483b      	ldr	r0, [pc, #236]	; (80015e8 <I3G450D_Init+0x184>)
 80014fc:	f001 fc7a 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001500:	2014      	movs	r0, #20
 8001502:	f001 f8cf 	bl	80026a4 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <I3G450D_Init+0x188>)
 8001508:	2222      	movs	r2, #34	; 0x22
 800150a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800150c:	4b37      	ldr	r3, [pc, #220]	; (80015ec <I3G450D_Init+0x188>)
 800150e:	2200      	movs	r2, #0
 8001510:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <I3G450D_Init+0x180>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	2332      	movs	r3, #50	; 0x32
 8001518:	2202      	movs	r2, #2
 800151a:	4934      	ldr	r1, [pc, #208]	; (80015ec <I3G450D_Init+0x188>)
 800151c:	f004 ff39 	bl	8006392 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2102      	movs	r1, #2
 8001524:	4830      	ldr	r0, [pc, #192]	; (80015e8 <I3G450D_Init+0x184>)
 8001526:	f001 fc65 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800152a:	2014      	movs	r0, #20
 800152c:	f001 f8ba 	bl	80026a4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2102      	movs	r1, #2
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <I3G450D_Init+0x184>)
 8001536:	f001 fc5d 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800153a:	2014      	movs	r0, #20
 800153c:	f001 f8b2 	bl	80026a4 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <I3G450D_Init+0x188>)
 8001542:	2223      	movs	r2, #35	; 0x23
 8001544:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <I3G450D_Init+0x188>)
 8001548:	2220      	movs	r2, #32
 800154a:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <I3G450D_Init+0x180>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	2332      	movs	r3, #50	; 0x32
 8001552:	2202      	movs	r2, #2
 8001554:	4925      	ldr	r1, [pc, #148]	; (80015ec <I3G450D_Init+0x188>)
 8001556:	f004 ff1c 	bl	8006392 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2102      	movs	r1, #2
 800155e:	4822      	ldr	r0, [pc, #136]	; (80015e8 <I3G450D_Init+0x184>)
 8001560:	f001 fc48 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001564:	2014      	movs	r0, #20
 8001566:	f001 f89d 	bl	80026a4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2102      	movs	r1, #2
 800156e:	481e      	ldr	r0, [pc, #120]	; (80015e8 <I3G450D_Init+0x184>)
 8001570:	f001 fc40 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001574:	2014      	movs	r0, #20
 8001576:	f001 f895 	bl	80026a4 <HAL_Delay>
	spiTxBuf[0]=0x24;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <I3G450D_Init+0x188>)
 800157c:	2224      	movs	r2, #36	; 0x24
 800157e:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <I3G450D_Init+0x188>)
 8001582:	2210      	movs	r2, #16
 8001584:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <I3G450D_Init+0x180>)
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	2332      	movs	r3, #50	; 0x32
 800158c:	2202      	movs	r2, #2
 800158e:	4917      	ldr	r1, [pc, #92]	; (80015ec <I3G450D_Init+0x188>)
 8001590:	f004 feff 	bl	8006392 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2102      	movs	r1, #2
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <I3G450D_Init+0x184>)
 800159a:	f001 fc2b 	bl	8002df4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800159e:	2014      	movs	r0, #20
 80015a0:	f001 f880 	bl	80026a4 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2102      	movs	r1, #2
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <I3G450D_Init+0x184>)
 80015aa:	f001 fc23 	bl	8002df4 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <I3G450D_Init+0x188>)
 80015b0:	228f      	movs	r2, #143	; 0x8f
 80015b2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <I3G450D_Init+0x180>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	2332      	movs	r3, #50	; 0x32
 80015ba:	2201      	movs	r2, #1
 80015bc:	490b      	ldr	r1, [pc, #44]	; (80015ec <I3G450D_Init+0x188>)
 80015be:	f004 fee8 	bl	8006392 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <I3G450D_Init+0x180>)
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	2332      	movs	r3, #50	; 0x32
 80015c8:	2201      	movs	r2, #1
 80015ca:	4909      	ldr	r1, [pc, #36]	; (80015f0 <I3G450D_Init+0x18c>)
 80015cc:	f005 f81d 	bl	800660a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	2102      	movs	r1, #2
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <I3G450D_Init+0x184>)
 80015d6:	f001 fc0d 	bl	8002df4 <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200002ac 	.word	0x200002ac
 80015e8:	40020800 	.word	0x40020800
 80015ec:	200002a0 	.word	0x200002a0
 80015f0:	200002a5 	.word	0x200002a5

080015f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f8:	f000 ffe2 	bl	80025c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fc:	f000 f828 	bl	8001650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001600:	f000 fa24 	bl	8001a4c <MX_GPIO_Init>
  MX_CRC_Init();
 8001604:	f000 f88e 	bl	8001724 <MX_CRC_Init>
  MX_FMC_Init();
 8001608:	f000 f9d0 	bl	80019ac <MX_FMC_Init>
  MX_SPI5_Init();
 800160c:	f000 f91e 	bl	800184c <MX_SPI5_Init>
  MX_TIM1_Init();
 8001610:	f000 f952 	bl	80018b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001614:	f000 f9a0 	bl	8001958 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001618:	f00b f9e0 	bl	800c9dc <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800161c:	f008 f86a 	bl	80096f4 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001620:	f000 f894 	bl	800174c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001624:	f000 f8d2 	bl	80017cc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <main+0x50>)
 800162a:	f000 fbc3 	bl	8001db4 <RetargetInit>
  SessionControllerInit(&hi2c3,&hspi5,&huart1);
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <main+0x50>)
 8001630:	4905      	ldr	r1, [pc, #20]	; (8001648 <main+0x54>)
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <main+0x58>)
 8001634:	f7ff fd10 	bl	8001058 <SessionControllerInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001638:	f00b f9f6 	bl	800ca28 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    SessionControllerProcess();
 800163c:	f7ff fd2a 	bl	8001094 <SessionControllerProcess>
    MX_USB_HOST_Process();
 8001640:	e7fa      	b.n	8001638 <main+0x44>
 8001642:	bf00      	nop
 8001644:	20000400 	.word	0x20000400
 8001648:	20000360 	.word	0x20000360
 800164c:	2000030c 	.word	0x2000030c

08001650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	2230      	movs	r2, #48	; 0x30
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f00b fd46 	bl	800d0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a27      	ldr	r2, [pc, #156]	; (800171c <SystemClock_Config+0xcc>)
 800167e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <SystemClock_Config+0xd0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800169c:	4a20      	ldr	r2, [pc, #128]	; (8001720 <SystemClock_Config+0xd0>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <SystemClock_Config+0xd0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016c8:	2348      	movs	r3, #72	; 0x48
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016d0:	2303      	movs	r3, #3
 80016d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 f905 	bl	80058e8 <HAL_RCC_OscConfig>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016e4:	f000 fb60 	bl	8001da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e8:	230f      	movs	r3, #15
 80016ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ec:	2302      	movs	r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2102      	movs	r1, #2
 8001704:	4618      	mov	r0, r3
 8001706:	f004 fb67 	bl	8005dd8 <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001710:	f000 fb4a 	bl	8001da8 <Error_Handler>
  }
}
 8001714:	bf00      	nop
 8001716:	3750      	adds	r7, #80	; 0x50
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_CRC_Init+0x20>)
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <MX_CRC_Init+0x24>)
 800172c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_CRC_Init+0x20>)
 8001730:	f001 f8ed 	bl	800290e <HAL_CRC_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800173a:	f000 fb35 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002b0 	.word	0x200002b0
 8001748:	40023000 	.word	0x40023000

0800174c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001752:	4a1c      	ldr	r2, [pc, #112]	; (80017c4 <MX_I2C1_Init+0x78>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001758:	4a1b      	ldr	r2, [pc, #108]	; (80017c8 <MX_I2C1_Init+0x7c>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_I2C1_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_I2C1_Init+0x74>)
 800176a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800176e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_I2C1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_I2C1_Init+0x74>)
 800178a:	f002 ff6f 	bl	800466c <HAL_I2C_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 fb08 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_I2C1_Init+0x74>)
 800179c:	f004 f829 	bl	80057f2 <HAL_I2CEx_ConfigAnalogFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80017a6:	f000 faff 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_I2C1_Init+0x74>)
 80017ae:	f004 f85c 	bl	800586a <HAL_I2CEx_ConfigDigitalFilter>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80017b8:	f000 faf6 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200002b8 	.word	0x200002b8
 80017c4:	40005400 	.word	0x40005400
 80017c8:	000186a0 	.word	0x000186a0

080017cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_I2C3_Init+0x74>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <MX_I2C3_Init+0x78>)
 80017d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_I2C3_Init+0x74>)
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <MX_I2C3_Init+0x7c>)
 80017da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_I2C3_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_I2C3_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_I2C3_Init+0x74>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <MX_I2C3_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C3_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fc:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_I2C3_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C3_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <MX_I2C3_Init+0x74>)
 800180a:	f002 ff2f 	bl	800466c <HAL_I2C_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001814:	f000 fac8 	bl	8001da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <MX_I2C3_Init+0x74>)
 800181c:	f003 ffe9 	bl	80057f2 <HAL_I2CEx_ConfigAnalogFilter>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001826:	f000 fabf 	bl	8001da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800182a:	2100      	movs	r1, #0
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C3_Init+0x74>)
 800182e:	f004 f81c 	bl	800586a <HAL_I2CEx_ConfigDigitalFilter>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001838:	f000 fab6 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000030c 	.word	0x2000030c
 8001844:	40005c00 	.word	0x40005c00
 8001848:	000186a0 	.word	0x000186a0

0800184c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <MX_SPI5_Init+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI5_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001880:	2218      	movs	r2, #24
 8001882:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001884:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI5_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001892:	2200      	movs	r2, #0
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI5_Init+0x64>)
 8001898:	220a      	movs	r2, #10
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_SPI5_Init+0x64>)
 800189e:	f004 fcef 	bl	8006280 <HAL_SPI_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80018a8:	f000 fa7e 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000360 	.word	0x20000360
 80018b4:	40015000 	.word	0x40015000

080018b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <MX_TIM1_Init+0x98>)
 80018d6:	4a1f      	ldr	r2, [pc, #124]	; (8001954 <MX_TIM1_Init+0x9c>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_TIM1_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_TIM1_Init+0x98>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_TIM1_Init+0x98>)
 80018e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_TIM1_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_TIM1_Init+0x98>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <MX_TIM1_Init+0x98>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001900:	4813      	ldr	r0, [pc, #76]	; (8001950 <MX_TIM1_Init+0x98>)
 8001902:	f005 fa65 	bl	8006dd0 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800190c:	f000 fa4c 	bl	8001da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_TIM1_Init+0x98>)
 800191e:	f005 faa6 	bl	8006e6e <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001928:	f000 fa3e 	bl	8001da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	4619      	mov	r1, r3
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_TIM1_Init+0x98>)
 800193a:	f005 fc99 	bl	8007270 <HAL_TIMEx_MasterConfigSynchronization>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001944:	f000 fa30 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200003b8 	.word	0x200003b8
 8001954:	40010000 	.word	0x40010000

08001958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART1_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001990:	f005 fcea 	bl	8007368 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 fa05 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000400 	.word	0x20000400
 80019a8:	40011000 	.word	0x40011000

080019ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
 80019c0:	615a      	str	r2, [r3, #20]
 80019c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <MX_FMC_Init+0x98>)
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <MX_FMC_Init+0x9c>)
 80019c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <MX_FMC_Init+0x98>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80019d0:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <MX_FMC_Init+0x98>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_FMC_Init+0x98>)
 80019d8:	2204      	movs	r2, #4
 80019da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <MX_FMC_Init+0x98>)
 80019de:	2210      	movs	r2, #16
 80019e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_FMC_Init+0x98>)
 80019e4:	2240      	movs	r2, #64	; 0x40
 80019e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_FMC_Init+0x98>)
 80019ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80019ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_FMC_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <MX_FMC_Init+0x98>)
 80019f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <MX_FMC_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <MX_FMC_Init+0x98>)
 8001a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a10:	2307      	movs	r3, #7
 8001a12:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a14:	2304      	movs	r3, #4
 8001a16:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_FMC_Init+0x98>)
 8001a2e:	f004 fbf3 	bl	8006218 <HAL_SDRAM_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001a38:	f000 f9b6 	bl	8001da8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000444 	.word	0x20000444
 8001a48:	a0000140 	.word	0xa0000140

08001a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	; 0x38
 8001a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	4bb2      	ldr	r3, [pc, #712]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4ab1      	ldr	r2, [pc, #708]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4baf      	ldr	r3, [pc, #700]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	4bab      	ldr	r3, [pc, #684]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4aaa      	ldr	r2, [pc, #680]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4ba8      	ldr	r3, [pc, #672]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	4ba4      	ldr	r3, [pc, #656]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4aa3      	ldr	r2, [pc, #652]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4ba1      	ldr	r3, [pc, #644]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	4b9d      	ldr	r3, [pc, #628]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a9c      	ldr	r2, [pc, #624]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b9a      	ldr	r3, [pc, #616]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a95      	ldr	r2, [pc, #596]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b93      	ldr	r3, [pc, #588]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b8f      	ldr	r3, [pc, #572]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a8e      	ldr	r2, [pc, #568]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b8c      	ldr	r3, [pc, #560]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a87      	ldr	r2, [pc, #540]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b85      	ldr	r3, [pc, #532]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b81      	ldr	r3, [pc, #516]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a80      	ldr	r2, [pc, #512]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b7e      	ldr	r3, [pc, #504]	; (8001d30 <MX_GPIO_Init+0x2e4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2116      	movs	r1, #22
 8001b46:	487b      	ldr	r0, [pc, #492]	; (8001d34 <MX_GPIO_Init+0x2e8>)
 8001b48:	f001 f954 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2180      	movs	r1, #128	; 0x80
 8001b50:	4879      	ldr	r0, [pc, #484]	; (8001d38 <MX_GPIO_Init+0x2ec>)
 8001b52:	f001 f94f 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b5c:	4877      	ldr	r0, [pc, #476]	; (8001d3c <MX_GPIO_Init+0x2f0>)
 8001b5e:	f001 f949 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b68:	4875      	ldr	r0, [pc, #468]	; (8001d40 <MX_GPIO_Init+0x2f4>)
 8001b6a:	f001 f943 	bl	8002df4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b80:	230e      	movs	r3, #14
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b88:	4619      	mov	r1, r3
 8001b8a:	486e      	ldr	r0, [pc, #440]	; (8001d44 <MX_GPIO_Init+0x2f8>)
 8001b8c:	f000 ff6e 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001b90:	2316      	movs	r3, #22
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4863      	ldr	r0, [pc, #396]	; (8001d34 <MX_GPIO_Init+0x2e8>)
 8001ba8:	f000 ff60 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bac:	2301      	movs	r3, #1
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	485d      	ldr	r0, [pc, #372]	; (8001d38 <MX_GPIO_Init+0x2ec>)
 8001bc2:	f000 ff53 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001bc6:	f248 0306 	movw	r3, #32774	; 0x8006
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bcc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4856      	ldr	r0, [pc, #344]	; (8001d38 <MX_GPIO_Init+0x2ec>)
 8001bde:	f000 ff45 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8001be2:	2358      	movs	r3, #88	; 0x58
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf2:	230e      	movs	r3, #14
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	484e      	ldr	r0, [pc, #312]	; (8001d38 <MX_GPIO_Init+0x2ec>)
 8001bfe:	f000 ff35 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c06:	2301      	movs	r3, #1
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c16:	4619      	mov	r1, r3
 8001c18:	4847      	ldr	r0, [pc, #284]	; (8001d38 <MX_GPIO_Init+0x2ec>)
 8001c1a:	f000 ff27 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c22:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c30:	4619      	mov	r1, r3
 8001c32:	4840      	ldr	r0, [pc, #256]	; (8001d34 <MX_GPIO_Init+0x2e8>)
 8001c34:	f000 ff1a 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c48:	2309      	movs	r3, #9
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	483d      	ldr	r0, [pc, #244]	; (8001d48 <MX_GPIO_Init+0x2fc>)
 8001c54:	f000 ff0a 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4837      	ldr	r0, [pc, #220]	; (8001d48 <MX_GPIO_Init+0x2fc>)
 8001c6c:	f000 fefe 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8001c70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c82:	230e      	movs	r3, #14
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482e      	ldr	r0, [pc, #184]	; (8001d48 <MX_GPIO_Init+0x2fc>)
 8001c8e:	f000 feed 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4825      	ldr	r0, [pc, #148]	; (8001d3c <MX_GPIO_Init+0x2f0>)
 8001ca8:	f000 fee0 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001cac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481d      	ldr	r0, [pc, #116]	; (8001d3c <MX_GPIO_Init+0x2f0>)
 8001cc6:	f000 fed1 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 8001cca:	23c0      	movs	r3, #192	; 0xc0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cda:	230e      	movs	r3, #14
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4816      	ldr	r0, [pc, #88]	; (8001d40 <MX_GPIO_Init+0x2f4>)
 8001ce6:	f000 fec1 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001cea:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cfc:	230e      	movs	r3, #14
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	4619      	mov	r1, r3
 8001d06:	480b      	ldr	r0, [pc, #44]	; (8001d34 <MX_GPIO_Init+0x2e8>)
 8001d08:	f000 feb0 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001d0c:	2348      	movs	r3, #72	; 0x48
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d1c:	230e      	movs	r3, #14
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_GPIO_Init+0x2f0>)
 8001d28:	f000 fea0 	bl	8002a6c <HAL_GPIO_Init>
 8001d2c:	e00e      	b.n	8001d4c <MX_GPIO_Init+0x300>
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40020400 	.word	0x40020400

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8001d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d5e:	2309      	movs	r3, #9
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d66:	4619      	mov	r1, r3
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <MX_GPIO_Init+0x358>)
 8001d6a:	f000 fe7f 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d6e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_GPIO_Init+0x358>)
 8001d88:	f000 fe70 	bl	8002a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2006      	movs	r0, #6
 8001d92:	f000 fd86 	bl	80028a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d96:	2006      	movs	r0, #6
 8001d98:	f000 fd9f 	bl	80028da <HAL_NVIC_EnableIRQ>

}
 8001d9c:	bf00      	nop
 8001d9e:	3738      	adds	r7, #56	; 0x38
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021800 	.word	0x40021800

08001da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x8>
	...

08001db4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <RetargetInit+0x28>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001dc2:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <RetargetInit+0x2c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6898      	ldr	r0, [r3, #8]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2202      	movs	r2, #2
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f00b fab5 	bl	800d33c <setvbuf>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000478 	.word	0x20000478
 8001de0:	200000f0 	.word	0x200000f0

08001de4 <_isatty>:

int _isatty(int fd) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	db04      	blt.n	8001dfc <_isatty+0x18>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	dc01      	bgt.n	8001dfc <_isatty+0x18>
    return 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e005      	b.n	8001e08 <_isatty+0x24>

  errno = EBADF;
 8001dfc:	f00b f930 	bl	800d060 <__errno>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2209      	movs	r2, #9
 8001e04:	601a      	str	r2, [r3, #0]
  return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_write>:

int _write(int fd, char* ptr, int len) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d002      	beq.n	8001e28 <_write+0x18>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d111      	bne.n	8001e4c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <_write+0x54>)
 8001e2a:	6818      	ldr	r0, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	f005 fae4 	bl	8007402 <HAL_UART_Transmit>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <_write+0x38>
      return len;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	e008      	b.n	8001e5a <_write+0x4a>
    else
      return EIO;
 8001e48:	2305      	movs	r3, #5
 8001e4a:	e006      	b.n	8001e5a <_write+0x4a>
  }
  errno = EBADF;
 8001e4c:	f00b f908 	bl	800d060 <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2209      	movs	r2, #9
 8001e54:	601a      	str	r2, [r3, #0]
  return -1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000478 	.word	0x20000478

08001e68 <_close>:

int _close(int fd) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db04      	blt.n	8001e80 <_close+0x18>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	dc01      	bgt.n	8001e80 <_close+0x18>
    return 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e006      	b.n	8001e8e <_close+0x26>

  errno = EBADF;
 8001e80:	f00b f8ee 	bl	800d060 <__errno>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2209      	movs	r2, #9
 8001e88:	601a      	str	r2, [r3, #0]
  return -1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001ea2:	f00b f8dd 	bl	800d060 <__errno>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2209      	movs	r2, #9
 8001eaa:	601a      	str	r2, [r3, #0]
  return -1;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_read>:

int _read(int fd, char* ptr, int len) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d110      	bne.n	8001eec <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <_read+0x4c>)
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	f005 fb26 	bl	8007526 <HAL_UART_Receive>
 8001eda:	4603      	mov	r3, r0
 8001edc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <_read+0x30>
      return 1;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e008      	b.n	8001efa <_read+0x42>
    else
      return EIO;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	e006      	b.n	8001efa <_read+0x42>
  }
  errno = EBADF;
 8001eec:	f00b f8b8 	bl	800d060 <__errno>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2209      	movs	r2, #9
 8001ef4:	601a      	str	r2, [r3, #0]
  return -1;
 8001ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000478 	.word	0x20000478

08001f08 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db08      	blt.n	8001f2a <_fstat+0x22>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	dc05      	bgt.n	8001f2a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f24:	605a      	str	r2, [r3, #4]
    return 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e005      	b.n	8001f36 <_fstat+0x2e>
  }

  errno = EBADF;
 8001f2a:	f00b f899 	bl	800d060 <__errno>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2209      	movs	r2, #9
 8001f32:	601a      	str	r2, [r3, #0]
  return 0;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a0f      	ldr	r2, [pc, #60]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_MspInit+0x4c>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800

08001f90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <HAL_CRC_MspInit+0x3c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10d      	bne.n	8001fbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <HAL_CRC_MspInit+0x40>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023000 	.word	0x40023000
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	; 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a42      	ldr	r2, [pc, #264]	; (80020fc <HAL_I2C_MspInit+0x128>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d12d      	bne.n	8002052 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8002000:	f043 0302 	orr.w	r3, r3, #2
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002018:	2312      	movs	r3, #18
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002024:	2304      	movs	r3, #4
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	4835      	ldr	r0, [pc, #212]	; (8002104 <HAL_I2C_MspInit+0x130>)
 8002030:	f000 fd1c 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 800203e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002042:	6413      	str	r3, [r2, #64]	; 0x40
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002050:	e050      	b.n	80020f4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <HAL_I2C_MspInit+0x134>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d14b      	bne.n	80020f4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a1f      	ldr	r2, [pc, #124]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209a:	2312      	movs	r3, #18
 800209c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800209e:	2301      	movs	r3, #1
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020a6:	2304      	movs	r3, #4
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <HAL_I2C_MspInit+0x138>)
 80020b2:	f000 fcdb 	bl	8002a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020bc:	2312      	movs	r3, #18
 80020be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020c8:	2304      	movs	r3, #4
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 031c 	add.w	r3, r7, #28
 80020d0:	4619      	mov	r1, r3
 80020d2:	480f      	ldr	r0, [pc, #60]	; (8002110 <HAL_I2C_MspInit+0x13c>)
 80020d4:	f000 fcca 	bl	8002a6c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 80020e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e6:	6413      	str	r3, [r2, #64]	; 0x40
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_I2C_MspInit+0x12c>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
}
 80020f4:	bf00      	nop
 80020f6:	3730      	adds	r7, #48	; 0x30
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40005400 	.word	0x40005400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020400 	.word	0x40020400
 8002108:	40005c00 	.word	0x40005c00
 800210c:	40020800 	.word	0x40020800
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a19      	ldr	r2, [pc, #100]	; (8002198 <HAL_SPI_MspInit+0x84>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d12c      	bne.n	8002190 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_SPI_MspInit+0x88>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a17      	ldr	r2, [pc, #92]	; (800219c <HAL_SPI_MspInit+0x88>)
 8002140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_SPI_MspInit+0x88>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_SPI_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_SPI_MspInit+0x88>)
 800215c:	f043 0320 	orr.w	r3, r3, #32
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_SPI_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800216e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002180:	2305      	movs	r3, #5
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_SPI_MspInit+0x8c>)
 800218c:	f000 fc6e 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40015000 	.word	0x40015000
 800219c:	40023800 	.word	0x40023800
 80021a0:	40021400 	.word	0x40021400

080021a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <HAL_TIM_Base_MspInit+0x3c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d10d      	bne.n	80021d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_TIM_Base_MspInit+0x40>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_TIM_Base_MspInit+0x40>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_TIM_Base_MspInit+0x40>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40010000 	.word	0x40010000
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_UART_MspInit+0x94>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d134      	bne.n	8002274 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <HAL_UART_MspInit+0x98>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_UART_MspInit+0x98>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6453      	str	r3, [r2, #68]	; 0x44
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_UART_MspInit+0x98>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x98>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_UART_MspInit+0x98>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_UART_MspInit+0x98>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002242:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002248:	2302      	movs	r3, #2
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002250:	2303      	movs	r3, #3
 8002252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002254:	2307      	movs	r3, #7
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4619      	mov	r1, r3
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <HAL_UART_MspInit+0x9c>)
 8002260:	f000 fc04 	bl	8002a6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2025      	movs	r0, #37	; 0x25
 800226a:	f000 fb1a 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800226e:	2025      	movs	r0, #37	; 0x25
 8002270:	f000 fb33 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002274:	bf00      	nop
 8002276:	3728      	adds	r7, #40	; 0x28
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40011000 	.word	0x40011000
 8002280:	40023800 	.word	0x40023800
 8002284:	40020000 	.word	0x40020000

08002288 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800229c:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_FMC_MspInit+0x104>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d16f      	bne.n	8002384 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80022a4:	4b39      	ldr	r3, [pc, #228]	; (800238c <HAL_FMC_MspInit+0x104>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_FMC_MspInit+0x108>)
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4a37      	ldr	r2, [pc, #220]	; (8002390 <HAL_FMC_MspInit+0x108>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6393      	str	r3, [r2, #56]	; 0x38
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_FMC_MspInit+0x108>)
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80022c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80022ca:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022d8:	230c      	movs	r3, #12
 80022da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	482c      	ldr	r0, [pc, #176]	; (8002394 <HAL_FMC_MspInit+0x10c>)
 80022e2:	f000 fbc3 	bl	8002a6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80022e6:	2301      	movs	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022f6:	230c      	movs	r3, #12
 80022f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4826      	ldr	r0, [pc, #152]	; (8002398 <HAL_FMC_MspInit+0x110>)
 8002300:	f000 fbb4 	bl	8002a6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002304:	f248 1333 	movw	r3, #33075	; 0x8133
 8002308:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002316:	230c      	movs	r3, #12
 8002318:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	4619      	mov	r1, r3
 800231e:	481f      	ldr	r0, [pc, #124]	; (800239c <HAL_FMC_MspInit+0x114>)
 8002320:	f000 fba4 	bl	8002a6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002324:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002328:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002336:	230c      	movs	r3, #12
 8002338:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4818      	ldr	r0, [pc, #96]	; (80023a0 <HAL_FMC_MspInit+0x118>)
 8002340:	f000 fb94 	bl	8002a6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002344:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002348:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002356:	230c      	movs	r3, #12
 8002358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4811      	ldr	r0, [pc, #68]	; (80023a4 <HAL_FMC_MspInit+0x11c>)
 8002360:	f000 fb84 	bl	8002a6c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002364:	2360      	movs	r3, #96	; 0x60
 8002366:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002374:	230c      	movs	r3, #12
 8002376:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	4619      	mov	r1, r3
 800237c:	480a      	ldr	r0, [pc, #40]	; (80023a8 <HAL_FMC_MspInit+0x120>)
 800237e:	f000 fb75 	bl	8002a6c <HAL_GPIO_Init>
 8002382:	e000      	b.n	8002386 <HAL_FMC_MspInit+0xfe>
    return;
 8002384:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000047c 	.word	0x2000047c
 8002390:	40023800 	.word	0x40023800
 8002394:	40021400 	.word	0x40021400
 8002398:	40020800 	.word	0x40020800
 800239c:	40021800 	.word	0x40021800
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40020c00 	.word	0x40020c00
 80023a8:	40020400 	.word	0x40020400

080023ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80023b4:	f7ff ff68 	bl	8002288 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler+0x4>

080023c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <MemManage_Handler+0x4>

080023d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <UsageFault_Handler+0x4>

080023de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240c:	f000 f92a 	bl	8002664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}

08002414 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002418:	2001      	movs	r0, #1
 800241a:	f000 fd05 	bl	8002e28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <USART1_IRQHandler+0x10>)
 800242a:	f005 f94f 	bl	80076cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000400 	.word	0x20000400

08002438 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <OTG_HS_IRQHandler+0x10>)
 800243e:	f000 ff75 	bl	800332c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000880 	.word	0x20000880

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f00a fdf0 	bl	800d060 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20030000 	.word	0x20030000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	20000480 	.word	0x20000480
 80024b4:	20000b98 	.word	0x20000b98

080024b8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <debugPrint>:

int debugLogging = 0;
int paused = 0;

void debugPrint(char * buffer)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	if(debugLogging&!paused)
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <debugPrint+0x38>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <debugPrint+0x3c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <debugPrint+0x2e>
	{
		printf(buffer);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f00a fede 	bl	800d2c0 <iprintf>
		printf("\n");
 8002504:	200a      	movs	r0, #10
 8002506:	f00a fef3 	bl	800d2f0 <putchar>
	}
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000488 	.word	0x20000488
 8002518:	20000484 	.word	0x20000484

0800251c <setUserDebugLogging>:
void setUserDebugLogging ( int set )
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	debugLogging = set;
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <setUserDebugLogging+0x1c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000484 	.word	0x20000484

0800253c <pauseDebugLogging>:
int getDebugLogging( )
{
	return debugLogging;
}
void pauseDebugLogging(){paused = 1;}
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <pauseDebugLogging+0x14>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	20000488 	.word	0x20000488

08002554 <resumeDebugLogging>:
void resumeDebugLogging(){paused = 0;}
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <resumeDebugLogging+0x14>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	20000488 	.word	0x20000488

0800256c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800256c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002570:	480d      	ldr	r0, [pc, #52]	; (80025a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002572:	490e      	ldr	r1, [pc, #56]	; (80025ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002574:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002578:	e002      	b.n	8002580 <LoopCopyDataInit>

0800257a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800257c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257e:	3304      	adds	r3, #4

08002580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002584:	d3f9      	bcc.n	800257a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002586:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002588:	4c0b      	ldr	r4, [pc, #44]	; (80025b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800258c:	e001      	b.n	8002592 <LoopFillZerobss>

0800258e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002590:	3204      	adds	r2, #4

08002592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002594:	d3fb      	bcc.n	800258e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002596:	f7ff ff8f 	bl	80024b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259a:	f00a fd67 	bl	800d06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259e:	f7ff f829 	bl	80015f4 <main>
  bx  lr    
 80025a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ac:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 80025b0:	0800e8fc 	.word	0x0800e8fc
  ldr r2, =_sbss
 80025b4:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 80025b8:	20000b94 	.word	0x20000b94

080025bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025bc:	e7fe      	b.n	80025bc <ADC_IRQHandler>
	...

080025c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <HAL_Init+0x40>)
 80025ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <HAL_Init+0x40>)
 80025d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a07      	ldr	r2, [pc, #28]	; (8002600 <HAL_Init+0x40>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e8:	2003      	movs	r0, #3
 80025ea:	f000 f94f 	bl	800288c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ee:	200f      	movs	r0, #15
 80025f0:	f000 f808 	bl	8002604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f4:	f7ff fca4 	bl	8001f40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00

08002604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_InitTick+0x54>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_InitTick+0x58>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	4619      	mov	r1, r3
 8002616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261a:	fbb3 f3f1 	udiv	r3, r3, r1
 800261e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f967 	bl	80028f6 <HAL_SYSTICK_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e00e      	b.n	8002650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b0f      	cmp	r3, #15
 8002636:	d80a      	bhi.n	800264e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002638:	2200      	movs	r2, #0
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002640:	f000 f92f 	bl	80028a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_InitTick+0x5c>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	e000      	b.n	8002650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200000c4 	.word	0x200000c4
 800265c:	200000cc 	.word	0x200000cc
 8002660:	200000c8 	.word	0x200000c8

08002664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_IncTick+0x20>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_IncTick+0x24>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4413      	add	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_IncTick+0x24>)
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	200000cc 	.word	0x200000cc
 8002688:	2000048c 	.word	0x2000048c

0800268c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return uwTick;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_GetTick+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000048c 	.word	0x2000048c

080026a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff ffee 	bl	800268c <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026bc:	d005      	beq.n	80026ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_Delay+0x44>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ca:	bf00      	nop
 80026cc:	f7ff ffde 	bl	800268c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d8f7      	bhi.n	80026cc <HAL_Delay+0x28>
  {
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200000cc 	.word	0x200000cc

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002714:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	2b00      	cmp	r3, #0
 8002760:	db0b      	blt.n	800277a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	f003 021f 	and.w	r2, r3, #31
 8002768:	4907      	ldr	r1, [pc, #28]	; (8002788 <__NVIC_EnableIRQ+0x38>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2001      	movs	r0, #1
 8002772:	fa00 f202 	lsl.w	r2, r0, r2
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000e100 	.word	0xe000e100

0800278c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	db0a      	blt.n	80027b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	490c      	ldr	r1, [pc, #48]	; (80027d8 <__NVIC_SetPriority+0x4c>)
 80027a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027aa:	0112      	lsls	r2, r2, #4
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	440b      	add	r3, r1
 80027b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b4:	e00a      	b.n	80027cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	4908      	ldr	r1, [pc, #32]	; (80027dc <__NVIC_SetPriority+0x50>)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	3b04      	subs	r3, #4
 80027c4:	0112      	lsls	r2, r2, #4
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	440b      	add	r3, r1
 80027ca:	761a      	strb	r2, [r3, #24]
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000e100 	.word	0xe000e100
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f1c3 0307 	rsb	r3, r3, #7
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	bf28      	it	cs
 80027fe:	2304      	movcs	r3, #4
 8002800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3304      	adds	r3, #4
 8002806:	2b06      	cmp	r3, #6
 8002808:	d902      	bls.n	8002810 <NVIC_EncodePriority+0x30>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3b03      	subs	r3, #3
 800280e:	e000      	b.n	8002812 <NVIC_EncodePriority+0x32>
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43da      	mvns	r2, r3
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	401a      	ands	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002828:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	43d9      	mvns	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	4313      	orrs	r3, r2
         );
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002858:	d301      	bcc.n	800285e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285a:	2301      	movs	r3, #1
 800285c:	e00f      	b.n	800287e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <SysTick_Config+0x40>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3b01      	subs	r3, #1
 8002864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002866:	210f      	movs	r1, #15
 8002868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800286c:	f7ff ff8e 	bl	800278c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <SysTick_Config+0x40>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002876:	4b04      	ldr	r3, [pc, #16]	; (8002888 <SysTick_Config+0x40>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	e000e010 	.word	0xe000e010

0800288c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff29 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b086      	sub	sp, #24
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	4603      	mov	r3, r0
 80028aa:	60b9      	str	r1, [r7, #8]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff3e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff8e 	bl	80027e0 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5d 	bl	800278c <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff31 	bl	8002750 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa2 	bl	8002848 <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e00e      	b.n	800293e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	795b      	ldrb	r3, [r3, #5]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fb2d 	bl	8001f90 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff fe9a 	bl	800268c <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d008      	beq.n	8002978 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e052      	b.n	8002a1e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0216 	bic.w	r2, r2, #22
 8002986:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002996:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <HAL_DMA_Abort+0x62>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0208 	bic.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c8:	e013      	b.n	80029f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ca:	f7ff fe5f 	bl	800268c <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d90c      	bls.n	80029f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2203      	movs	r2, #3
 80029e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e015      	b.n	8002a1e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e4      	bne.n	80029ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	223f      	movs	r2, #63	; 0x3f
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e00c      	b.n	8002a5e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2205      	movs	r2, #5
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e177      	b.n	8002d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 8166 	bne.w	8002d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80c0 	beq.w	8002d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b66      	ldr	r3, [pc, #408]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a65      	ldr	r2, [pc, #404]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_GPIO_Init+0x324>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a61      	ldr	r2, [pc, #388]	; (8002d94 <HAL_GPIO_Init+0x328>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_GPIO_Init+0x32c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d037      	beq.n	8002caa <HAL_GPIO_Init+0x23e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a57      	ldr	r2, [pc, #348]	; (8002d9c <HAL_GPIO_Init+0x330>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d031      	beq.n	8002ca6 <HAL_GPIO_Init+0x23a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a56      	ldr	r2, [pc, #344]	; (8002da0 <HAL_GPIO_Init+0x334>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02b      	beq.n	8002ca2 <HAL_GPIO_Init+0x236>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a55      	ldr	r2, [pc, #340]	; (8002da4 <HAL_GPIO_Init+0x338>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d025      	beq.n	8002c9e <HAL_GPIO_Init+0x232>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a54      	ldr	r2, [pc, #336]	; (8002da8 <HAL_GPIO_Init+0x33c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <HAL_GPIO_Init+0x22e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a53      	ldr	r2, [pc, #332]	; (8002dac <HAL_GPIO_Init+0x340>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x22a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_GPIO_Init+0x344>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a51      	ldr	r2, [pc, #324]	; (8002db4 <HAL_GPIO_Init+0x348>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x222>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a50      	ldr	r2, [pc, #320]	; (8002db8 <HAL_GPIO_Init+0x34c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x21e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	; (8002dbc <HAL_GPIO_Init+0x350>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c82:	2309      	movs	r3, #9
 8002c84:	e012      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c86:	230a      	movs	r3, #10
 8002c88:	e010      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	e00e      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e00c      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c92:	2306      	movs	r3, #6
 8002c94:	e00a      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c96:	2305      	movs	r3, #5
 8002c98:	e008      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002caa:	2300      	movs	r3, #0
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f002 0203 	and.w	r2, r2, #3
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <HAL_GPIO_Init+0x328>)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cee:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b32      	ldr	r3, [pc, #200]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d18:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d42:	4a1f      	ldr	r2, [pc, #124]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d6c:	4a14      	ldr	r2, [pc, #80]	; (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	f67f ae84 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40021400 	.word	0x40021400
 8002db0:	40021800 	.word	0x40021800
 8002db4:	40021c00 	.word	0x40021c00
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40022400 	.word	0x40022400
 8002dc0:	40013c00 	.word	0x40013c00

08002dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e001      	b.n	8002de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e04:	787b      	ldrb	r3, [r7, #1]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e10:	e003      	b.n	8002e1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e12:	887b      	ldrh	r3, [r7, #2]
 8002e14:	041a      	lsls	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fa60 	bl	800130c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40013c00 	.word	0x40013c00

08002e58 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5a:	b08f      	sub	sp, #60	; 0x3c
 8002e5c:	af0a      	add	r7, sp, #40	; 0x28
 8002e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e054      	b.n	8002f14 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f009 fe07 	bl	800ca98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f005 fcaf 	bl	800880c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	687e      	ldr	r6, [r7, #4]
 8002eb6:	466d      	mov	r5, sp
 8002eb8:	f106 0410 	add.w	r4, r6, #16
 8002ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ecc:	1d33      	adds	r3, r6, #4
 8002ece:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f005 fc29 	bl	8008728 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f005 fca6 	bl	800882e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	687e      	ldr	r6, [r7, #4]
 8002eea:	466d      	mov	r5, sp
 8002eec:	f106 0410 	add.w	r4, r6, #16
 8002ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f00:	1d33      	adds	r3, r6, #4
 8002f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f04:	6838      	ldr	r0, [r7, #0]
 8002f06:	f005 fe2f 	bl	8008b68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f1c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af04      	add	r7, sp, #16
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	70fb      	strb	r3, [r7, #3]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	70bb      	strb	r3, [r7, #2]
 8002f32:	4613      	mov	r3, r2
 8002f34:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d101      	bne.n	8002f44 <HAL_HCD_HC_Init+0x28>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e076      	b.n	8003032 <HAL_HCD_HC_Init+0x116>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	333d      	adds	r3, #61	; 0x3d
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3338      	adds	r3, #56	; 0x38
 8002f6c:	787a      	ldrb	r2, [r7, #1]
 8002f6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3340      	adds	r3, #64	; 0x40
 8002f7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f80:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3339      	adds	r3, #57	; 0x39
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	333f      	adds	r3, #63	; 0x3f
 8002fa2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002fa6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	78ba      	ldrb	r2, [r7, #2]
 8002fac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002fb0:	b2d0      	uxtb	r0, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	333a      	adds	r3, #58	; 0x3a
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002fc2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da09      	bge.n	8002fde <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	333b      	adds	r3, #59	; 0x3b
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e008      	b.n	8002ff0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	333b      	adds	r3, #59	; 0x3b
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	212c      	movs	r1, #44	; 0x2c
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	333c      	adds	r3, #60	; 0x3c
 8002ffe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003002:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	787c      	ldrb	r4, [r7, #1]
 800300a:	78ba      	ldrb	r2, [r7, #2]
 800300c:	78f9      	ldrb	r1, [r7, #3]
 800300e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003010:	9302      	str	r3, [sp, #8]
 8003012:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	f897 3020 	ldrb.w	r3, [r7, #32]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4623      	mov	r3, r4
 8003020:	f005 ff28 	bl	8008e74 <USB_HC_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003030:	7bfb      	ldrb	r3, [r7, #15]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bd90      	pop	{r4, r7, pc}

0800303a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_HCD_HC_Halt+0x1e>
 8003054:	2302      	movs	r3, #2
 8003056:	e00f      	b.n	8003078 <HAL_HCD_HC_Halt+0x3e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f006 f978 	bl	800935e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003076:	7bfb      	ldrb	r3, [r7, #15]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	70bb      	strb	r3, [r7, #2]
 8003096:	4613      	mov	r3, r2
 8003098:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	333b      	adds	r3, #59	; 0x3b
 80030a8:	78ba      	ldrb	r2, [r7, #2]
 80030aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	333f      	adds	r3, #63	; 0x3f
 80030ba:	787a      	ldrb	r2, [r7, #1]
 80030bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80030be:	7c3b      	ldrb	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d112      	bne.n	80030ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3342      	adds	r3, #66	; 0x42
 80030d2:	2203      	movs	r2, #3
 80030d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333d      	adds	r3, #61	; 0x3d
 80030e4:	7f3a      	ldrb	r2, [r7, #28]
 80030e6:	701a      	strb	r2, [r3, #0]
 80030e8:	e008      	b.n	80030fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3342      	adds	r3, #66	; 0x42
 80030f8:	2202      	movs	r2, #2
 80030fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030fc:	787b      	ldrb	r3, [r7, #1]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f200 80c6 	bhi.w	8003290 <HAL_HCD_HC_SubmitRequest+0x210>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800327d 	.word	0x0800327d
 8003114:	08003181 	.word	0x08003181
 8003118:	080031ff 	.word	0x080031ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800311c:	7c3b      	ldrb	r3, [r7, #16]
 800311e:	2b01      	cmp	r3, #1
 8003120:	f040 80b8 	bne.w	8003294 <HAL_HCD_HC_SubmitRequest+0x214>
 8003124:	78bb      	ldrb	r3, [r7, #2]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 80b4 	bne.w	8003294 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800312c:	8b3b      	ldrh	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	212c      	movs	r1, #44	; 0x2c
 8003138:	fb01 f303 	mul.w	r3, r1, r3
 800313c:	4413      	add	r3, r2
 800313e:	3355      	adds	r3, #85	; 0x55
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3355      	adds	r3, #85	; 0x55
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d109      	bne.n	800316c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3342      	adds	r3, #66	; 0x42
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800316a:	e093      	b.n	8003294 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3342      	adds	r3, #66	; 0x42
 800317a:	2202      	movs	r2, #2
 800317c:	701a      	strb	r2, [r3, #0]
      break;
 800317e:	e089      	b.n	8003294 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003180:	78bb      	ldrb	r3, [r7, #2]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d11d      	bne.n	80031c2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3355      	adds	r3, #85	; 0x55
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3342      	adds	r3, #66	; 0x42
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80031ac:	e073      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	212c      	movs	r1, #44	; 0x2c
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3342      	adds	r3, #66	; 0x42
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
      break;
 80031c0:	e069      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031c2:	78fb      	ldrb	r3, [r7, #3]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	212c      	movs	r1, #44	; 0x2c
 80031c8:	fb01 f303 	mul.w	r3, r1, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	3354      	adds	r3, #84	; 0x54
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	212c      	movs	r1, #44	; 0x2c
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	3342      	adds	r3, #66	; 0x42
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
      break;
 80031e8:	e055      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031ea:	78fb      	ldrb	r3, [r7, #3]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3342      	adds	r3, #66	; 0x42
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
      break;
 80031fc:	e04b      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031fe:	78bb      	ldrb	r3, [r7, #2]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d11d      	bne.n	8003240 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3355      	adds	r3, #85	; 0x55
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3342      	adds	r3, #66	; 0x42
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800322a:	e034      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3342      	adds	r3, #66	; 0x42
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
      break;
 800323e:	e02a      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3354      	adds	r3, #84	; 0x54
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d109      	bne.n	8003268 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	3342      	adds	r3, #66	; 0x42
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
      break;
 8003266:	e016      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3342      	adds	r3, #66	; 0x42
 8003276:	2202      	movs	r2, #2
 8003278:	701a      	strb	r2, [r3, #0]
      break;
 800327a:	e00c      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	3342      	adds	r3, #66	; 0x42
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
      break;
 800328e:	e002      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003290:	bf00      	nop
 8003292:	e000      	b.n	8003296 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003294:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3344      	adds	r3, #68	; 0x44
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	8b3a      	ldrh	r2, [r7, #24]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	202c      	movs	r0, #44	; 0x2c
 80032b0:	fb00 f303 	mul.w	r3, r0, r3
 80032b4:	440b      	add	r3, r1
 80032b6:	334c      	adds	r3, #76	; 0x4c
 80032b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3360      	adds	r3, #96	; 0x60
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3350      	adds	r3, #80	; 0x50
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	212c      	movs	r1, #44	; 0x2c
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	3339      	adds	r3, #57	; 0x39
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3361      	adds	r3, #97	; 0x61
 80032fe:	2200      	movs	r2, #0
 8003300:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	222c      	movs	r2, #44	; 0x2c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	3338      	adds	r3, #56	; 0x38
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	18d1      	adds	r1, r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	f005 fecc 	bl	80090b8 <USB_HC_StartXfer>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f005 fbcd 	bl	8008ae2 <USB_GetMode>
 8003348:	4603      	mov	r3, r0
 800334a:	2b01      	cmp	r3, #1
 800334c:	f040 80f6 	bne.w	800353c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f005 fbb1 	bl	8008abc <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80ec 	beq.w	800353a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f005 fba8 	bl	8008abc <USB_ReadInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003376:	d104      	bne.n	8003382 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003380:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f005 fb98 	bl	8008abc <USB_ReadInterrupts>
 800338c:	4603      	mov	r3, r0
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003396:	d104      	bne.n	80033a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f005 fb88 	bl	8008abc <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b6:	d104      	bne.n	80033c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80033c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 fb78 	bl	8008abc <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d103      	bne.n	80033de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2202      	movs	r2, #2
 80033dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f005 fb6a 	bl	8008abc <USB_ReadInterrupts>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f2:	d11c      	bne.n	800342e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033fc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800340e:	2110      	movs	r1, #16
 8003410:	6938      	ldr	r0, [r7, #16]
 8003412:	f005 fa59 	bl	80088c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003416:	6938      	ldr	r0, [r7, #16]
 8003418:	f005 fa8a 	bl	8008930 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f005 fc60 	bl	8008ce8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f009 fbaf 	bl	800cb8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f005 fb42 	bl	8008abc <USB_ReadInterrupts>
 8003438:	4603      	mov	r3, r0
 800343a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800343e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003442:	d102      	bne.n	800344a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f001 f89e 	bl	8004586 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f005 fb34 	bl	8008abc <USB_ReadInterrupts>
 8003454:	4603      	mov	r3, r0
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b08      	cmp	r3, #8
 800345c:	d106      	bne.n	800346c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f009 fb78 	bl	800cb54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2208      	movs	r2, #8
 800346a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f005 fb23 	bl	8008abc <USB_ReadInterrupts>
 8003476:	4603      	mov	r3, r0
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d101      	bne.n	8003484 <HAL_HCD_IRQHandler+0x158>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_HCD_IRQHandler+0x15a>
 8003484:	2300      	movs	r3, #0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0210 	bic.w	r2, r2, #16
 8003498:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 ffa1 	bl	80043e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0210 	orr.w	r2, r2, #16
 80034ae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f005 fb01 	bl	8008abc <USB_ReadInterrupts>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c4:	d13a      	bne.n	800353c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f005 ff36 	bl	800933c <USB_HC_ReadInterrupt>
 80034d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	e025      	b.n	8003524 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d018      	beq.n	800351e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003502:	d106      	bne.n	8003512 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8ab 	bl	8003666 <HCD_HC_IN_IRQHandler>
 8003510:	e005      	b.n	800351e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 fbf9 	bl	8003d10 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3301      	adds	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	429a      	cmp	r2, r3
 800352c:	d3d4      	bcc.n	80034d8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003536:	615a      	str	r2, [r3, #20]
 8003538:	e000      	b.n	800353c <HAL_HCD_IRQHandler+0x210>
      return;
 800353a:	bf00      	nop
    }
  }
}
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_HCD_Start+0x16>
 8003554:	2302      	movs	r3, #2
 8003556:	e013      	b.n	8003580 <HAL_HCD_Start+0x3e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fc22 	bl	8008db0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f005 f93a 	bl	80087ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_HCD_Stop+0x16>
 800359a:	2302      	movs	r3, #2
 800359c:	e00d      	b.n	80035ba <HAL_HCD_Stop+0x32>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f006 f810 	bl	80095d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f005 fbc4 	bl	8008d5c <USB_ResetPort>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3360      	adds	r3, #96	; 0x60
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	3350      	adds	r3, #80	; 0x50
 8003620:	681b      	ldr	r3, [r3, #0]
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b082      	sub	sp, #8
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f005 fc08 	bl	8008e50 <USB_GetCurrentFrame>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f005 fbe3 	bl	8008e22 <USB_GetHostSpeed>
 800365c:	4603      	mov	r3, r0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b04      	cmp	r3, #4
 8003694:	d11a      	bne.n	80036cc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2304      	movs	r3, #4
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	2206      	movs	r2, #6
 80036b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	b2d2      	uxtb	r2, r2
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f005 fe4a 	bl	800935e <USB_HC_Halt>
 80036ca:	e0af      	b.n	800382c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e2:	d11b      	bne.n	800371c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	212c      	movs	r1, #44	; 0x2c
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	4413      	add	r3, r2
 8003704:	3361      	adds	r3, #97	; 0x61
 8003706:	2207      	movs	r2, #7
 8003708:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f005 fe22 	bl	800935e <USB_HC_Halt>
 800371a:	e087      	b.n	800382c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	d109      	bne.n	8003746 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	461a      	mov	r2, r3
 8003740:	2320      	movs	r3, #32
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	e072      	b.n	800382c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d11a      	bne.n	8003792 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	2308      	movs	r3, #8
 800376c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3361      	adds	r3, #97	; 0x61
 800377c:	2205      	movs	r2, #5
 800377e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f005 fde7 	bl	800935e <USB_HC_Halt>
 8003790:	e04c      	b.n	800382c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a8:	d11b      	bne.n	80037e2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3361      	adds	r3, #97	; 0x61
 80037cc:	2208      	movs	r2, #8
 80037ce:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	4611      	mov	r1, r2
 80037da:	4618      	mov	r0, r3
 80037dc:	f005 fdbf 	bl	800935e <USB_HC_Halt>
 80037e0:	e024      	b.n	800382c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d119      	bne.n	800382c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003804:	461a      	mov	r2, r3
 8003806:	2380      	movs	r3, #128	; 0x80
 8003808:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	3361      	adds	r3, #97	; 0x61
 8003818:	2206      	movs	r2, #6
 800381a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	4611      	mov	r1, r2
 8003826:	4618      	mov	r0, r3
 8003828:	f005 fd99 	bl	800935e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003842:	d112      	bne.n	800386a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f005 fd85 	bl	800935e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	461a      	mov	r2, r3
 8003862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003866:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003868:	e24e      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 80df 	bne.w	8003a40 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d019      	beq.n	80038be <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	212c      	movs	r1, #44	; 0x2c
 8003890:	fb01 f303 	mul.w	r3, r1, r3
 8003894:	4413      	add	r3, r2
 8003896:	3348      	adds	r3, #72	; 0x48
 8003898:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	0159      	lsls	r1, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	440b      	add	r3, r1
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038ac:	1ad2      	subs	r2, r2, r3
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	202c      	movs	r0, #44	; 0x2c
 80038b4:	fb00 f303 	mul.w	r3, r0, r3
 80038b8:	440b      	add	r3, r1
 80038ba:	3350      	adds	r3, #80	; 0x50
 80038bc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3361      	adds	r3, #97	; 0x61
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	335c      	adds	r3, #92	; 0x5c
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	461a      	mov	r2, r3
 80038f0:	2301      	movs	r3, #1
 80038f2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	333f      	adds	r3, #63	; 0x3f
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	333f      	adds	r3, #63	; 0x3f
 8003916:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003918:	2b02      	cmp	r3, #2
 800391a:	d111      	bne.n	8003940 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f005 fd19 	bl	800935e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	461a      	mov	r2, r3
 800393a:	2310      	movs	r3, #16
 800393c:	6093      	str	r3, [r2, #8]
 800393e:	e03a      	b.n	80039b6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	333f      	adds	r3, #63	; 0x3f
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d009      	beq.n	8003968 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	333f      	adds	r3, #63	; 0x3f
 8003962:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003964:	2b01      	cmp	r3, #1
 8003966:	d126      	bne.n	80039b6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	0151      	lsls	r1, r2, #5
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	440a      	add	r2, r1
 800397e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003986:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3360      	adds	r3, #96	; 0x60
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	b2d9      	uxtb	r1, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	202c      	movs	r0, #44	; 0x2c
 80039a4:	fb00 f303 	mul.w	r3, r0, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3360      	adds	r3, #96	; 0x60
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f009 f8f9 	bl	800cba8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d12b      	bne.n	8003a16 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3348      	adds	r3, #72	; 0x48
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	202c      	movs	r0, #44	; 0x2c
 80039d4:	fb00 f202 	mul.w	r2, r0, r2
 80039d8:	440a      	add	r2, r1
 80039da:	3240      	adds	r2, #64	; 0x40
 80039dc:	8812      	ldrh	r2, [r2, #0]
 80039de:	fbb3 f3f2 	udiv	r3, r3, r2
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 818e 	beq.w	8003d08 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	212c      	movs	r1, #44	; 0x2c
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	4413      	add	r3, r2
 80039f8:	3354      	adds	r3, #84	; 0x54
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f083 0301 	eor.w	r3, r3, #1
 8003a00:	b2d8      	uxtb	r0, r3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3354      	adds	r3, #84	; 0x54
 8003a10:	4602      	mov	r2, r0
 8003a12:	701a      	strb	r2, [r3, #0]
}
 8003a14:	e178      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	3354      	adds	r3, #84	; 0x54
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	f083 0301 	eor.w	r3, r3, #1
 8003a2a:	b2d8      	uxtb	r0, r3
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3354      	adds	r3, #84	; 0x54
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	701a      	strb	r2, [r3, #0]
}
 8003a3e:	e163      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	f040 80f6 	bne.w	8003c44 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3361      	adds	r3, #97	; 0x61
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d109      	bne.n	8003a80 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3360      	adds	r3, #96	; 0x60
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e0c9      	b.n	8003c14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d109      	bne.n	8003aa8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3360      	adds	r3, #96	; 0x60
 8003aa2:	2205      	movs	r2, #5
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e0b5      	b.n	8003c14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3361      	adds	r3, #97	; 0x61
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d009      	beq.n	8003ad0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3361      	adds	r3, #97	; 0x61
 8003aca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d150      	bne.n	8003b72 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	202c      	movs	r0, #44	; 0x2c
 8003ae8:	fb00 f303 	mul.w	r3, r0, r3
 8003aec:	440b      	add	r3, r1
 8003aee:	335c      	adds	r3, #92	; 0x5c
 8003af0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	335c      	adds	r3, #92	; 0x5c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d912      	bls.n	8003b2c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	335c      	adds	r3, #92	; 0x5c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2204      	movs	r2, #4
 8003b28:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b2a:	e073      	b.n	8003c14 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3360      	adds	r3, #96	; 0x60
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b54:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b5c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b70:	e050      	b.n	8003c14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3361      	adds	r3, #97	; 0x61
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d122      	bne.n	8003bcc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	212c      	movs	r1, #44	; 0x2c
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3360      	adds	r3, #96	; 0x60
 8003b94:	2202      	movs	r2, #2
 8003b96:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bb6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	e023      	b.n	8003c14 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3361      	adds	r3, #97	; 0x61
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d119      	bne.n	8003c14 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	335c      	adds	r3, #92	; 0x5c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	202c      	movs	r0, #44	; 0x2c
 8003bf8:	fb00 f303 	mul.w	r3, r0, r3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	335c      	adds	r3, #92	; 0x5c
 8003c00:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	212c      	movs	r1, #44	; 0x2c
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3360      	adds	r3, #96	; 0x60
 8003c10:	2204      	movs	r2, #4
 8003c12:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	2302      	movs	r3, #2
 8003c24:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	b2d9      	uxtb	r1, r3
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	202c      	movs	r0, #44	; 0x2c
 8003c30:	fb00 f303 	mul.w	r3, r0, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3360      	adds	r3, #96	; 0x60
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f008 ffb3 	bl	800cba8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003c42:	e061      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d156      	bne.n	8003d08 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	212c      	movs	r1, #44	; 0x2c
 8003c60:	fb01 f303 	mul.w	r3, r1, r3
 8003c64:	4413      	add	r3, r2
 8003c66:	333f      	adds	r3, #63	; 0x3f
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d111      	bne.n	8003c92 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	212c      	movs	r1, #44	; 0x2c
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	335c      	adds	r3, #92	; 0x5c
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f005 fb67 	bl	800935e <USB_HC_Halt>
 8003c90:	e031      	b.n	8003cf6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	333f      	adds	r3, #63	; 0x3f
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	333f      	adds	r3, #63	; 0x3f
 8003cb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d11d      	bne.n	8003cf6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	335c      	adds	r3, #92	; 0x5c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d110      	bne.n	8003cf6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3361      	adds	r3, #97	; 0x61
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f005 fb34 	bl	800935e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	461a      	mov	r2, r3
 8003d04:	2310      	movs	r3, #16
 8003d06:	6093      	str	r3, [r2, #8]
}
 8003d08:	bf00      	nop
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d11a      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	2304      	movs	r3, #4
 8003d50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3361      	adds	r3, #97	; 0x61
 8003d60:	2206      	movs	r2, #6
 8003d62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f005 faf5 	bl	800935e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003d74:	e331      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	015a      	lsls	r2, r3, #5
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d12e      	bne.n	8003dea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d98:	461a      	mov	r2, r3
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	333d      	adds	r3, #61	; 0x3d
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	f040 8313 	bne.w	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	333d      	adds	r3, #61	; 0x3d
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	212c      	movs	r1, #44	; 0x2c
 8003dcc:	fb01 f303 	mul.w	r3, r1, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3360      	adds	r3, #96	; 0x60
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fabb 	bl	800935e <USB_HC_Halt>
}
 8003de8:	e2f7      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e00:	d112      	bne.n	8003e28 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e14:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f005 fa9c 	bl	800935e <USB_HC_Halt>
}
 8003e26:	e2d8      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d140      	bne.n	8003ec0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	335c      	adds	r3, #92	; 0x5c
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e62:	2b40      	cmp	r3, #64	; 0x40
 8003e64:	d111      	bne.n	8003e8a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	212c      	movs	r1, #44	; 0x2c
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	4413      	add	r3, r2
 8003e72:	333d      	adds	r3, #61	; 0x3d
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2340      	movs	r3, #64	; 0x40
 8003e88:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	2301      	movs	r3, #1
 8003e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	fb01 f303 	mul.w	r3, r1, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3361      	adds	r3, #97	; 0x61
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f005 fa50 	bl	800935e <USB_HC_Halt>
}
 8003ebe:	e28c      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d12c      	bne.n	8003f30 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3361      	adds	r3, #97	; 0x61
 8003ee4:	2204      	movs	r2, #4
 8003ee6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	333d      	adds	r3, #61	; 0x3d
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	335c      	adds	r3, #92	; 0x5c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f005 fa21 	bl	800935e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2340      	movs	r3, #64	; 0x40
 8003f2c:	6093      	str	r3, [r2, #8]
}
 8003f2e:	e254      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d11a      	bne.n	8003f7c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f52:	461a      	mov	r2, r3
 8003f54:	2308      	movs	r3, #8
 8003f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	3361      	adds	r3, #97	; 0x61
 8003f66:	2205      	movs	r2, #5
 8003f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f005 f9f2 	bl	800935e <USB_HC_Halt>
}
 8003f7a:	e22e      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d140      	bne.n	8004014 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	212c      	movs	r1, #44	; 0x2c
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	335c      	adds	r3, #92	; 0x5c
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3361      	adds	r3, #97	; 0x61
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	212c      	movs	r1, #44	; 0x2c
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	333d      	adds	r3, #61	; 0x3d
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d112      	bne.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	212c      	movs	r1, #44	; 0x2c
 8003fd0:	fb01 f303 	mul.w	r3, r1, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	333c      	adds	r3, #60	; 0x3c
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	212c      	movs	r1, #44	; 0x2c
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	4413      	add	r3, r2
 8003fea:	333d      	adds	r3, #61	; 0x3d
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f005 f9af 	bl	800935e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	2310      	movs	r3, #16
 8004010:	6093      	str	r3, [r2, #8]
}
 8004012:	e1e2      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d164      	bne.n	80040f4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d111      	bne.n	8004056 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	212c      	movs	r1, #44	; 0x2c
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	4413      	add	r3, r2
 800403e:	3361      	adds	r3, #97	; 0x61
 8004040:	2206      	movs	r2, #6
 8004042:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f005 f985 	bl	800935e <USB_HC_Halt>
 8004054:	e044      	b.n	80040e0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	212c      	movs	r1, #44	; 0x2c
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	4413      	add	r3, r2
 8004062:	335c      	adds	r3, #92	; 0x5c
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	202c      	movs	r0, #44	; 0x2c
 800406e:	fb00 f303 	mul.w	r3, r0, r3
 8004072:	440b      	add	r3, r1
 8004074:	335c      	adds	r3, #92	; 0x5c
 8004076:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	335c      	adds	r3, #92	; 0x5c
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b02      	cmp	r3, #2
 800408a:	d920      	bls.n	80040ce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	335c      	adds	r3, #92	; 0x5c
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	212c      	movs	r1, #44	; 0x2c
 80040a4:	fb01 f303 	mul.w	r3, r1, r3
 80040a8:	4413      	add	r3, r2
 80040aa:	3360      	adds	r3, #96	; 0x60
 80040ac:	2204      	movs	r2, #4
 80040ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	b2d9      	uxtb	r1, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	202c      	movs	r0, #44	; 0x2c
 80040ba:	fb00 f303 	mul.w	r3, r0, r3
 80040be:	4413      	add	r3, r2
 80040c0:	3360      	adds	r3, #96	; 0x60
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f008 fd6e 	bl	800cba8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040cc:	e008      	b.n	80040e0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3360      	adds	r3, #96	; 0x60
 80040dc:	2202      	movs	r2, #2
 80040de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	461a      	mov	r2, r3
 80040ee:	2380      	movs	r3, #128	; 0x80
 80040f0:	6093      	str	r3, [r2, #8]
}
 80040f2:	e172      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d11b      	bne.n	8004144 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	212c      	movs	r1, #44	; 0x2c
 8004112:	fb01 f303 	mul.w	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3361      	adds	r3, #97	; 0x61
 800411a:	2208      	movs	r2, #8
 800411c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f005 f918 	bl	800935e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800413a:	461a      	mov	r2, r3
 800413c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004140:	6093      	str	r3, [r2, #8]
}
 8004142:	e14a      	b.n	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b02      	cmp	r3, #2
 8004158:	f040 813f 	bne.w	80043da <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3361      	adds	r3, #97	; 0x61
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d17d      	bne.n	800426c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	212c      	movs	r1, #44	; 0x2c
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	4413      	add	r3, r2
 800417c:	3360      	adds	r3, #96	; 0x60
 800417e:	2201      	movs	r2, #1
 8004180:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	333f      	adds	r3, #63	; 0x3f
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d00a      	beq.n	80041ac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	212c      	movs	r1, #44	; 0x2c
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	4413      	add	r3, r2
 80041a2:	333f      	adds	r3, #63	; 0x3f
 80041a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	f040 8100 	bne.w	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	3355      	adds	r3, #85	; 0x55
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f083 0301 	eor.w	r3, r3, #1
 80041c8:	b2d8      	uxtb	r0, r3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	212c      	movs	r1, #44	; 0x2c
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	4413      	add	r3, r2
 80041d6:	3355      	adds	r3, #85	; 0x55
 80041d8:	4602      	mov	r2, r0
 80041da:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f040 80e3 	bne.w	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	334c      	adds	r3, #76	; 0x4c
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80d8 	beq.w	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	212c      	movs	r1, #44	; 0x2c
 8004202:	fb01 f303 	mul.w	r3, r1, r3
 8004206:	4413      	add	r3, r2
 8004208:	334c      	adds	r3, #76	; 0x4c
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	202c      	movs	r0, #44	; 0x2c
 8004212:	fb00 f202 	mul.w	r2, r0, r2
 8004216:	440a      	add	r2, r1
 8004218:	3240      	adds	r2, #64	; 0x40
 800421a:	8812      	ldrh	r2, [r2, #0]
 800421c:	4413      	add	r3, r2
 800421e:	3b01      	subs	r3, #1
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	202c      	movs	r0, #44	; 0x2c
 8004226:	fb00 f202 	mul.w	r2, r0, r2
 800422a:	440a      	add	r2, r1
 800422c:	3240      	adds	r2, #64	; 0x40
 800422e:	8812      	ldrh	r2, [r2, #0]
 8004230:	fbb3 f3f2 	udiv	r3, r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80b5 	beq.w	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	212c      	movs	r1, #44	; 0x2c
 8004248:	fb01 f303 	mul.w	r3, r1, r3
 800424c:	4413      	add	r3, r2
 800424e:	3355      	adds	r3, #85	; 0x55
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f083 0301 	eor.w	r3, r3, #1
 8004256:	b2d8      	uxtb	r0, r3
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3355      	adds	r3, #85	; 0x55
 8004266:	4602      	mov	r2, r0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e09f      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3361      	adds	r3, #97	; 0x61
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d109      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3360      	adds	r3, #96	; 0x60
 800428e:	2202      	movs	r2, #2
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e08b      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3361      	adds	r3, #97	; 0x61
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d109      	bne.n	80042bc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3360      	adds	r3, #96	; 0x60
 80042b6:	2202      	movs	r2, #2
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	e077      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	212c      	movs	r1, #44	; 0x2c
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	3361      	adds	r3, #97	; 0x61
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b05      	cmp	r3, #5
 80042ce:	d109      	bne.n	80042e4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3360      	adds	r3, #96	; 0x60
 80042de:	2205      	movs	r2, #5
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e063      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3361      	adds	r3, #97	; 0x61
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d009      	beq.n	800430c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	212c      	movs	r1, #44	; 0x2c
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	3361      	adds	r3, #97	; 0x61
 8004306:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004308:	2b08      	cmp	r3, #8
 800430a:	d14f      	bne.n	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	212c      	movs	r1, #44	; 0x2c
 8004312:	fb01 f303 	mul.w	r3, r1, r3
 8004316:	4413      	add	r3, r2
 8004318:	335c      	adds	r3, #92	; 0x5c
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	202c      	movs	r0, #44	; 0x2c
 8004324:	fb00 f303 	mul.w	r3, r0, r3
 8004328:	440b      	add	r3, r1
 800432a:	335c      	adds	r3, #92	; 0x5c
 800432c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	fb01 f303 	mul.w	r3, r1, r3
 8004338:	4413      	add	r3, r2
 800433a:	335c      	adds	r3, #92	; 0x5c
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d912      	bls.n	8004368 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	335c      	adds	r3, #92	; 0x5c
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	3360      	adds	r3, #96	; 0x60
 8004362:	2204      	movs	r2, #4
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e021      	b.n	80043ac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	212c      	movs	r1, #44	; 0x2c
 800436e:	fb01 f303 	mul.w	r3, r1, r3
 8004372:	4413      	add	r3, r2
 8004374:	3360      	adds	r3, #96	; 0x60
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4413      	add	r3, r2
 8004382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004390:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004398:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a6:	461a      	mov	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b8:	461a      	mov	r2, r3
 80043ba:	2302      	movs	r3, #2
 80043bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	b2d9      	uxtb	r1, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	202c      	movs	r0, #44	; 0x2c
 80043c8:	fb00 f303 	mul.w	r3, r0, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3360      	adds	r3, #96	; 0x60
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f008 fbe7 	bl	800cba8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043da:	bf00      	nop
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08a      	sub	sp, #40	; 0x28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	0c5b      	lsrs	r3, r3, #17
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004416:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d004      	beq.n	8004428 <HCD_RXQLVL_IRQHandler+0x46>
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b05      	cmp	r3, #5
 8004422:	f000 80a9 	beq.w	8004578 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004426:	e0aa      	b.n	800457e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80a6 	beq.w	800457c <HCD_RXQLVL_IRQHandler+0x19a>
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3344      	adds	r3, #68	; 0x44
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 809b 	beq.w	800457c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3350      	adds	r3, #80	; 0x50
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	441a      	add	r2, r3
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	202c      	movs	r0, #44	; 0x2c
 8004460:	fb00 f303 	mul.w	r3, r0, r3
 8004464:	440b      	add	r3, r1
 8004466:	334c      	adds	r3, #76	; 0x4c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d87a      	bhi.n	8004564 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	212c      	movs	r1, #44	; 0x2c
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	3344      	adds	r3, #68	; 0x44
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	b292      	uxth	r2, r2
 8004486:	4619      	mov	r1, r3
 8004488:	f004 fac0 	bl	8008a0c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	212c      	movs	r1, #44	; 0x2c
 8004492:	fb01 f303 	mul.w	r3, r1, r3
 8004496:	4413      	add	r3, r2
 8004498:	3344      	adds	r3, #68	; 0x44
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	441a      	add	r2, r3
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	202c      	movs	r0, #44	; 0x2c
 80044a6:	fb00 f303 	mul.w	r3, r0, r3
 80044aa:	440b      	add	r3, r1
 80044ac:	3344      	adds	r3, #68	; 0x44
 80044ae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	212c      	movs	r1, #44	; 0x2c
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	4413      	add	r3, r2
 80044bc:	3350      	adds	r3, #80	; 0x50
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	441a      	add	r2, r3
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	202c      	movs	r0, #44	; 0x2c
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	440b      	add	r3, r1
 80044d0:	3350      	adds	r3, #80	; 0x50
 80044d2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	0cdb      	lsrs	r3, r3, #19
 80044e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	212c      	movs	r1, #44	; 0x2c
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	3340      	adds	r3, #64	; 0x40
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4293      	cmp	r3, r2
 8004500:	d13c      	bne.n	800457c <HCD_RXQLVL_IRQHandler+0x19a>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d039      	beq.n	800457c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800451e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004526:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	4413      	add	r3, r2
 8004530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004534:	461a      	mov	r2, r3
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	3354      	adds	r3, #84	; 0x54
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	f083 0301 	eor.w	r3, r3, #1
 800454e:	b2d8      	uxtb	r0, r3
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	212c      	movs	r1, #44	; 0x2c
 8004556:	fb01 f303 	mul.w	r3, r1, r3
 800455a:	4413      	add	r3, r2
 800455c:	3354      	adds	r3, #84	; 0x54
 800455e:	4602      	mov	r2, r0
 8004560:	701a      	strb	r2, [r3, #0]
      break;
 8004562:	e00b      	b.n	800457c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	3360      	adds	r3, #96	; 0x60
 8004572:	2204      	movs	r2, #4
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	e001      	b.n	800457c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800457c:	bf00      	nop
  }
}
 800457e:	bf00      	nop
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b086      	sub	sp, #24
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045b2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d10b      	bne.n	80045d6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d102      	bne.n	80045ce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f008 fad1 	bl	800cb70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d132      	bne.n	8004646 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f043 0308 	orr.w	r3, r3, #8
 80045e6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0304 	and.w	r3, r3, #4
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d126      	bne.n	8004640 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d113      	bne.n	8004622 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004604:	d106      	bne.n	8004614 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f004 fb6b 	bl	8008ce8 <USB_InitFSLSPClkSel>
 8004612:	e011      	b.n	8004638 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2101      	movs	r1, #1
 800461a:	4618      	mov	r0, r3
 800461c:	f004 fb64 	bl	8008ce8 <USB_InitFSLSPClkSel>
 8004620:	e00a      	b.n	8004638 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d106      	bne.n	8004638 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004630:	461a      	mov	r2, r3
 8004632:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004636:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f008 fac3 	bl	800cbc4 <HAL_HCD_PortEnabled_Callback>
 800463e:	e002      	b.n	8004646 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f008 facd 	bl	800cbe0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d103      	bne.n	8004658 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f043 0320 	orr.w	r3, r3, #32
 8004656:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800465e:	461a      	mov	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6013      	str	r3, [r2, #0]
}
 8004664:	bf00      	nop
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e12b      	b.n	80048d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fc9e 	bl	8001fd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	; 0x24
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 0201 	bic.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046d0:	f001 fd7a 	bl	80061c8 <HAL_RCC_GetPCLK1Freq>
 80046d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4a81      	ldr	r2, [pc, #516]	; (80048e0 <HAL_I2C_Init+0x274>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d807      	bhi.n	80046f0 <HAL_I2C_Init+0x84>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4a80      	ldr	r2, [pc, #512]	; (80048e4 <HAL_I2C_Init+0x278>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	bf94      	ite	ls
 80046e8:	2301      	movls	r3, #1
 80046ea:	2300      	movhi	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e006      	b.n	80046fe <HAL_I2C_Init+0x92>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a7d      	ldr	r2, [pc, #500]	; (80048e8 <HAL_I2C_Init+0x27c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	bf94      	ite	ls
 80046f8:	2301      	movls	r3, #1
 80046fa:	2300      	movhi	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0e7      	b.n	80048d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a78      	ldr	r2, [pc, #480]	; (80048ec <HAL_I2C_Init+0x280>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a6a      	ldr	r2, [pc, #424]	; (80048e0 <HAL_I2C_Init+0x274>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d802      	bhi.n	8004740 <HAL_I2C_Init+0xd4>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3301      	adds	r3, #1
 800473e:	e009      	b.n	8004754 <HAL_I2C_Init+0xe8>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	4a69      	ldr	r2, [pc, #420]	; (80048f0 <HAL_I2C_Init+0x284>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	3301      	adds	r3, #1
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	430b      	orrs	r3, r1
 800475a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	495c      	ldr	r1, [pc, #368]	; (80048e0 <HAL_I2C_Init+0x274>)
 8004770:	428b      	cmp	r3, r1
 8004772:	d819      	bhi.n	80047a8 <HAL_I2C_Init+0x13c>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1e59      	subs	r1, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004782:	1c59      	adds	r1, r3, #1
 8004784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004788:	400b      	ands	r3, r1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_I2C_Init+0x138>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1e59      	subs	r1, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fbb1 f3f3 	udiv	r3, r1, r3
 800479c:	3301      	adds	r3, #1
 800479e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a2:	e051      	b.n	8004848 <HAL_I2C_Init+0x1dc>
 80047a4:	2304      	movs	r3, #4
 80047a6:	e04f      	b.n	8004848 <HAL_I2C_Init+0x1dc>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d111      	bne.n	80047d4 <HAL_I2C_Init+0x168>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1e58      	subs	r0, r3, #1
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6859      	ldr	r1, [r3, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	440b      	add	r3, r1
 80047be:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	e012      	b.n	80047fa <HAL_I2C_Init+0x18e>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1e58      	subs	r0, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6859      	ldr	r1, [r3, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	0099      	lsls	r1, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ea:	3301      	adds	r3, #1
 80047ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Init+0x196>
 80047fe:	2301      	movs	r3, #1
 8004800:	e022      	b.n	8004848 <HAL_I2C_Init+0x1dc>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10e      	bne.n	8004828 <HAL_I2C_Init+0x1bc>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	1e58      	subs	r0, r3, #1
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6859      	ldr	r1, [r3, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	440b      	add	r3, r1
 8004818:	fbb0 f3f3 	udiv	r3, r0, r3
 800481c:	3301      	adds	r3, #1
 800481e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004826:	e00f      	b.n	8004848 <HAL_I2C_Init+0x1dc>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	1e58      	subs	r0, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6859      	ldr	r1, [r3, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	0099      	lsls	r1, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	fbb0 f3f3 	udiv	r3, r0, r3
 800483e:	3301      	adds	r3, #1
 8004840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	6809      	ldr	r1, [r1, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6911      	ldr	r1, [r2, #16]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	68d2      	ldr	r2, [r2, #12]
 8004882:	4311      	orrs	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	430b      	orrs	r3, r1
 800488a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	000186a0 	.word	0x000186a0
 80048e4:	001e847f 	.word	0x001e847f
 80048e8:	003d08ff 	.word	0x003d08ff
 80048ec:	431bde83 	.word	0x431bde83
 80048f0:	10624dd3 	.word	0x10624dd3

080048f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	461a      	mov	r2, r3
 8004900:	460b      	mov	r3, r1
 8004902:	817b      	strh	r3, [r7, #10]
 8004904:	4613      	mov	r3, r2
 8004906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004908:	f7fd fec0 	bl	800268c <HAL_GetTick>
 800490c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	f040 80e0 	bne.w	8004adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	2319      	movs	r3, #25
 8004922:	2201      	movs	r2, #1
 8004924:	4970      	ldr	r1, [pc, #448]	; (8004ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fd86 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004932:	2302      	movs	r3, #2
 8004934:	e0d3      	b.n	8004ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_I2C_Master_Transmit+0x50>
 8004940:	2302      	movs	r3, #2
 8004942:	e0cc      	b.n	8004ade <HAL_I2C_Master_Transmit+0x1ea>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b01      	cmp	r3, #1
 8004958:	d007      	beq.n	800496a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2221      	movs	r2, #33	; 0x21
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2210      	movs	r2, #16
 8004986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	893a      	ldrh	r2, [r7, #8]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a50      	ldr	r2, [pc, #320]	; (8004aec <HAL_I2C_Master_Transmit+0x1f8>)
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80049ac:	8979      	ldrh	r1, [r7, #10]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	6a3a      	ldr	r2, [r7, #32]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 fbf0 	bl	8005198 <I2C_MasterRequestWrite>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e08d      	b.n	8004ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80049d8:	e066      	b.n	8004aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	6a39      	ldr	r1, [r7, #32]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fe00 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d107      	bne.n	8004a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06b      	b.n	8004ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d11b      	bne.n	8004a7c <HAL_I2C_Master_Transmit+0x188>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	6a39      	ldr	r1, [r7, #32]
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 fdf0 	bl	8005666 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00d      	beq.n	8004aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d107      	bne.n	8004aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e01a      	b.n	8004ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d194      	bne.n	80049da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	00100002 	.word	0x00100002
 8004aec:	ffff0000 	.word	0xffff0000

08004af0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	461a      	mov	r2, r3
 8004afc:	460b      	mov	r3, r1
 8004afe:	817b      	strh	r3, [r7, #10]
 8004b00:	4613      	mov	r3, r2
 8004b02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7fd fdc2 	bl	800268c <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b20      	cmp	r3, #32
 8004b14:	f040 820b 	bne.w	8004f2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	2319      	movs	r3, #25
 8004b1e:	2201      	movs	r2, #1
 8004b20:	497c      	ldr	r1, [pc, #496]	; (8004d14 <HAL_I2C_Master_Receive+0x224>)
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fc88 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e1fe      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_I2C_Master_Receive+0x50>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e1f7      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d007      	beq.n	8004b66 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2222      	movs	r2, #34	; 0x22
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2210      	movs	r2, #16
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	893a      	ldrh	r2, [r7, #8]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a5c      	ldr	r2, [pc, #368]	; (8004d18 <HAL_I2C_Master_Receive+0x228>)
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ba8:	8979      	ldrh	r1, [r7, #10]
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fb74 	bl	800529c <I2C_MasterRequestRead>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e1b8      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d113      	bne.n	8004bee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	623b      	str	r3, [r7, #32]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e18c      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d11b      	bne.n	8004c2e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e16c      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d11b      	bne.n	8004c6e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	e14c      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c94:	e138      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	f200 80f1 	bhi.w	8004e82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d123      	bne.n	8004cf0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fd1b 	bl	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e139      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691a      	ldr	r2, [r3, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cee:	e10b      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d14e      	bne.n	8004d96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	2200      	movs	r2, #0
 8004d00:	4906      	ldr	r1, [pc, #24]	; (8004d1c <HAL_I2C_Master_Receive+0x22c>)
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fb98 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e10e      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
 8004d12:	bf00      	nop
 8004d14:	00100002 	.word	0x00100002
 8004d18:	ffff0000 	.word	0xffff0000
 8004d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d94:	e0b8      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4966      	ldr	r1, [pc, #408]	; (8004f38 <HAL_I2C_Master_Receive+0x448>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fb49 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0bf      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2200      	movs	r2, #0
 8004dfa:	494f      	ldr	r1, [pc, #316]	; (8004f38 <HAL_I2C_Master_Receive+0x448>)
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fb1b 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e091      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e80:	e042      	b.n	8004f08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 fc2e 	bl	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e04c      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0304 	and.w	r3, r3, #4
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d118      	bne.n	8004f08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f47f aec2 	bne.w	8004c96 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3728      	adds	r7, #40	; 0x28
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	00010004 	.word	0x00010004

08004f3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08a      	sub	sp, #40	; 0x28
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	607a      	str	r2, [r7, #4]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f4c:	f7fd fb9e 	bl	800268c <HAL_GetTick>
 8004f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	f040 8111 	bne.w	8005186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2319      	movs	r3, #25
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4988      	ldr	r1, [pc, #544]	; (8005190 <HAL_I2C_IsDeviceReady+0x254>)
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fa62 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e104      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_I2C_IsDeviceReady+0x50>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0fd      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d007      	beq.n	8004fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2224      	movs	r2, #36	; 0x24
 8004fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a70      	ldr	r2, [pc, #448]	; (8005194 <HAL_I2C_IsDeviceReady+0x258>)
 8004fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fa20 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500c:	d103      	bne.n	8005016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0b6      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800502a:	f7fd fb2f 	bl	800268c <HAL_GetTick>
 800502e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800505e:	e025      	b.n	80050ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005060:	f7fd fb14 	bl	800268c <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <HAL_I2C_IsDeviceReady+0x13a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22a0      	movs	r2, #160	; 0xa0
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2ba0      	cmp	r3, #160	; 0xa0
 80050b6:	d005      	beq.n	80050c4 <HAL_I2C_IsDeviceReady+0x188>
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <HAL_I2C_IsDeviceReady+0x188>
 80050be:	7dbb      	ldrb	r3, [r7, #22]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0cd      	beq.n	8005060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d129      	bne.n	800512e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	613b      	str	r3, [r7, #16]
 80050fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	2319      	movs	r3, #25
 8005106:	2201      	movs	r2, #1
 8005108:	4921      	ldr	r1, [pc, #132]	; (8005190 <HAL_I2C_IsDeviceReady+0x254>)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f994 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e036      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e02c      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	2319      	movs	r3, #25
 800514e:	2201      	movs	r2, #1
 8005150:	490f      	ldr	r1, [pc, #60]	; (8005190 <HAL_I2C_IsDeviceReady+0x254>)
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 f970 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e012      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3301      	adds	r3, #1
 8005166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	f4ff af32 	bcc.w	8004fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005186:	2302      	movs	r3, #2
  }
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	00100002 	.word	0x00100002
 8005194:	ffff0000 	.word	0xffff0000

08005198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	460b      	mov	r3, r1
 80051a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d006      	beq.n	80051c2 <I2C_MasterRequestWrite+0x2a>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <I2C_MasterRequestWrite+0x2a>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051c0:	d108      	bne.n	80051d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e00b      	b.n	80051ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	2b12      	cmp	r3, #18
 80051da:	d107      	bne.n	80051ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f91d 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d103      	bne.n	800521c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e035      	b.n	800528c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005228:	d108      	bne.n	800523c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800522a:	897b      	ldrh	r3, [r7, #10]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	e01b      	b.n	8005274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	11db      	asrs	r3, r3, #7
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 0306 	and.w	r3, r3, #6
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f063 030f 	orn	r3, r3, #15
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	490e      	ldr	r1, [pc, #56]	; (8005294 <I2C_MasterRequestWrite+0xfc>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f943 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e010      	b.n	800528c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4907      	ldr	r1, [pc, #28]	; (8005298 <I2C_MasterRequestWrite+0x100>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f933 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	00010008 	.word	0x00010008
 8005298:	00010002 	.word	0x00010002

0800529c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	460b      	mov	r3, r1
 80052aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d006      	beq.n	80052d6 <I2C_MasterRequestRead+0x3a>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d003      	beq.n	80052d6 <I2C_MasterRequestRead+0x3a>
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052d4:	d108      	bne.n	80052e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e00b      	b.n	8005300 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	2b11      	cmp	r3, #17
 80052ee:	d107      	bne.n	8005300 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f893 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00d      	beq.n	8005334 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d103      	bne.n	8005330 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e079      	b.n	8005428 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533c:	d108      	bne.n	8005350 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800533e:	897b      	ldrh	r3, [r7, #10]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e05f      	b.n	8005410 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	11db      	asrs	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f063 030f 	orn	r3, r3, #15
 8005360:	b2da      	uxtb	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4930      	ldr	r1, [pc, #192]	; (8005430 <I2C_MasterRequestRead+0x194>)
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f8b9 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e054      	b.n	8005428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4929      	ldr	r1, [pc, #164]	; (8005434 <I2C_MasterRequestRead+0x198>)
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f8a9 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e044      	b.n	8005428 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f831 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00d      	beq.n	80053f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ea:	d103      	bne.n	80053f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e017      	b.n	8005428 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80053f8:	897b      	ldrh	r3, [r7, #10]
 80053fa:	11db      	asrs	r3, r3, #7
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f003 0306 	and.w	r3, r3, #6
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f063 030e 	orn	r3, r3, #14
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4907      	ldr	r1, [pc, #28]	; (8005434 <I2C_MasterRequestRead+0x198>)
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f865 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	00010008 	.word	0x00010008
 8005434:	00010002 	.word	0x00010002

08005438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005448:	e025      	b.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005450:	d021      	beq.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fd f91b 	bl	800268c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d116      	bne.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e023      	b.n	80054de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d10d      	bne.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bf0c      	ite	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2300      	movne	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	e00c      	b.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d0b6      	beq.n	800544a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f4:	e051      	b.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d123      	bne.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800551e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e046      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005554:	d021      	beq.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd f899 	bl	800268c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d116      	bne.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e020      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10c      	bne.n	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	43da      	mvns	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e00b      	b.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d18d      	bne.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f0:	e02d      	b.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f8ce 	bl	8005794 <I2C_IsAcknowledgeFailed>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e02d      	b.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005608:	d021      	beq.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fd f83f 	bl	800268c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d116      	bne.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e007      	b.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d1ca      	bne.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005672:	e02d      	b.n	80056d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f88d 	bl	8005794 <I2C_IsAcknowledgeFailed>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e02d      	b.n	80056e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800568a:	d021      	beq.n	80056d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568c:	f7fc fffe 	bl	800268c <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d116      	bne.n	80056d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	f043 0220 	orr.w	r2, r3, #32
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e007      	b.n	80056e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b04      	cmp	r3, #4
 80056dc:	d1ca      	bne.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056f4:	e042      	b.n	800577c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b10      	cmp	r3, #16
 8005702:	d119      	bne.n	8005738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0210 	mvn.w	r2, #16
 800570c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e029      	b.n	800578c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005738:	f7fc ffa8 	bl	800268c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	429a      	cmp	r2, r3
 8005746:	d302      	bcc.n	800574e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d116      	bne.n	800577c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e007      	b.n	800578c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d1b5      	bne.n	80056f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057aa:	d11b      	bne.n	80057e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b20      	cmp	r3, #32
 8005806:	d129      	bne.n	800585c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0210 	bic.w	r2, r2, #16
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b20      	cmp	r3, #32
 8005882:	d12a      	bne.n	80058da <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	; 0x24
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f022 0201 	bic.w	r2, r2, #1
 800589a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80058a4:	89fb      	ldrh	r3, [r7, #14]
 80058a6:	f023 030f 	bic.w	r3, r3, #15
 80058aa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	89fb      	ldrh	r3, [r7, #14]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	89fa      	ldrh	r2, [r7, #14]
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e267      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d075      	beq.n	80059f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005906:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b04      	cmp	r3, #4
 8005910:	d00c      	beq.n	800592c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005912:	4b85      	ldr	r3, [pc, #532]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800591a:	2b08      	cmp	r3, #8
 800591c:	d112      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591e:	4b82      	ldr	r3, [pc, #520]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800592a:	d10b      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b7e      	ldr	r3, [pc, #504]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05b      	beq.n	80059f0 <HAL_RCC_OscConfig+0x108>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d157      	bne.n	80059f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e242      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x74>
 800594e:	4b76      	ldr	r3, [pc, #472]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a75      	ldr	r2, [pc, #468]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e01d      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x98>
 8005966:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a6f      	ldr	r2, [pc, #444]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b6d      	ldr	r3, [pc, #436]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a6c      	ldr	r2, [pc, #432]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 8005980:	4b69      	ldr	r3, [pc, #420]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a68      	ldr	r2, [pc, #416]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b66      	ldr	r3, [pc, #408]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a65      	ldr	r2, [pc, #404]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fc fe74 	bl	800268c <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fc fe70 	bl	800268c <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	; 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e207      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b5b      	ldr	r3, [pc, #364]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0xc0>
 80059c6:	e014      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fc fe60 	bl	800268c <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fc fe5c 	bl	800268c <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1f3      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	4b51      	ldr	r3, [pc, #324]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0xe8>
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d063      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059fe:	4b4a      	ldr	r3, [pc, #296]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d11c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a16:	4b44      	ldr	r3, [pc, #272]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d116      	bne.n	8005a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a22:	4b41      	ldr	r3, [pc, #260]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_RCC_OscConfig+0x152>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1c7      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3a:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4937      	ldr	r1, [pc, #220]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	e03a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a58:	4b34      	ldr	r3, [pc, #208]	; (8005b2c <HAL_RCC_OscConfig+0x244>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fc fe15 	bl	800268c <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a66:	f7fc fe11 	bl	800268c <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e1a8      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a84:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4925      	ldr	r1, [pc, #148]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
 8005a98:	e015      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9a:	4b24      	ldr	r3, [pc, #144]	; (8005b2c <HAL_RCC_OscConfig+0x244>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc fdf4 	bl	800268c <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fc fdf0 	bl	800268c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e187      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d036      	beq.n	8005b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ada:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <HAL_RCC_OscConfig+0x248>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fc fdd4 	bl	800268c <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae8:	f7fc fdd0 	bl	800268c <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e167      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_OscConfig+0x240>)
 8005afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x200>
 8005b06:	e01b      	b.n	8005b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <HAL_RCC_OscConfig+0x248>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fc fdbd 	bl	800268c <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	e00e      	b.n	8005b34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b16:	f7fc fdb9 	bl	800268c <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d907      	bls.n	8005b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e150      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	42470000 	.word	0x42470000
 8005b30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	4b88      	ldr	r3, [pc, #544]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1ea      	bne.n	8005b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8097 	beq.w	8005c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b52:	4b81      	ldr	r3, [pc, #516]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	4b7d      	ldr	r3, [pc, #500]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	4a7c      	ldr	r2, [pc, #496]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b6e:	4b7a      	ldr	r3, [pc, #488]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b76:	60bb      	str	r3, [r7, #8]
 8005b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b7e:	4b77      	ldr	r3, [pc, #476]	; (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d118      	bne.n	8005bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b8a:	4b74      	ldr	r3, [pc, #464]	; (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a73      	ldr	r2, [pc, #460]	; (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b96:	f7fc fd79 	bl	800268c <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b9e:	f7fc fd75 	bl	800268c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e10c      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	4b6a      	ldr	r3, [pc, #424]	; (8005d5c <HAL_RCC_OscConfig+0x474>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f0      	beq.n	8005b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d106      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x2ea>
 8005bc4:	4b64      	ldr	r3, [pc, #400]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc8:	4a63      	ldr	r2, [pc, #396]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd0:	e01c      	b.n	8005c0c <HAL_RCC_OscConfig+0x324>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b05      	cmp	r3, #5
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x30c>
 8005bda:	4b5f      	ldr	r3, [pc, #380]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bde:	4a5e      	ldr	r2, [pc, #376]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005be0:	f043 0304 	orr.w	r3, r3, #4
 8005be4:	6713      	str	r3, [r2, #112]	; 0x70
 8005be6:	4b5c      	ldr	r3, [pc, #368]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bea:	4a5b      	ldr	r2, [pc, #364]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf2:	e00b      	b.n	8005c0c <HAL_RCC_OscConfig+0x324>
 8005bf4:	4b58      	ldr	r3, [pc, #352]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf8:	4a57      	ldr	r2, [pc, #348]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 0301 	bic.w	r3, r3, #1
 8005bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005c00:	4b55      	ldr	r3, [pc, #340]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a54      	ldr	r2, [pc, #336]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c06:	f023 0304 	bic.w	r3, r3, #4
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d015      	beq.n	8005c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fc fd3a 	bl	800268c <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c1c:	f7fc fd36 	bl	800268c <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0cb      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c32:	4b49      	ldr	r3, [pc, #292]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0ee      	beq.n	8005c1c <HAL_RCC_OscConfig+0x334>
 8005c3e:	e014      	b.n	8005c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c40:	f7fc fd24 	bl	800268c <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fc fd20 	bl	800268c <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e0b5      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1ee      	bne.n	8005c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c70:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	4a38      	ldr	r2, [pc, #224]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80a1 	beq.w	8005dc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c86:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d05c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d141      	bne.n	8005d1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <HAL_RCC_OscConfig+0x478>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fc fcf4 	bl	800268c <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7fc fcf0 	bl	800268c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e087      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cba:	4b27      	ldr	r3, [pc, #156]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	69da      	ldr	r2, [r3, #28]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	019b      	lsls	r3, r3, #6
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	041b      	lsls	r3, r3, #16
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	061b      	lsls	r3, r3, #24
 8005cea:	491b      	ldr	r1, [pc, #108]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf0:	4b1b      	ldr	r3, [pc, #108]	; (8005d60 <HAL_RCC_OscConfig+0x478>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cf6:	f7fc fcc9 	bl	800268c <HAL_GetTick>
 8005cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cfe:	f7fc fcc5 	bl	800268c <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e05c      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x416>
 8005d1c:	e054      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <HAL_RCC_OscConfig+0x478>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fc fcb2 	bl	800268c <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d2c:	f7fc fcae 	bl	800268c <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e045      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d3e:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <HAL_RCC_OscConfig+0x470>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x444>
 8005d4a:	e03d      	b.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e038      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <HAL_RCC_OscConfig+0x4ec>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d028      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d121      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d11a      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d111      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d001      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e000      	b.n	8005dca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3718      	adds	r7, #24
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40023800 	.word	0x40023800

08005dd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0cc      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dec:	4b68      	ldr	r3, [pc, #416]	; (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d90c      	bls.n	8005e14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfa:	4b65      	ldr	r3, [pc, #404]	; (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e02:	4b63      	ldr	r3, [pc, #396]	; (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 030f 	and.w	r3, r3, #15
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d001      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0b8      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d020      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0304 	and.w	r3, r3, #4
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e2c:	4b59      	ldr	r3, [pc, #356]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	4a58      	ldr	r2, [pc, #352]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e44:	4b53      	ldr	r3, [pc, #332]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4a52      	ldr	r2, [pc, #328]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e50:	4b50      	ldr	r3, [pc, #320]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	494d      	ldr	r1, [pc, #308]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d044      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	4b47      	ldr	r3, [pc, #284]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d119      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e07f      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e96:	4b3f      	ldr	r3, [pc, #252]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e06f      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea6:	4b3b      	ldr	r3, [pc, #236]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e067      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eb6:	4b37      	ldr	r3, [pc, #220]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f023 0203 	bic.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4934      	ldr	r1, [pc, #208]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec8:	f7fc fbe0 	bl	800268c <HAL_GetTick>
 8005ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ece:	e00a      	b.n	8005ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed0:	f7fc fbdc 	bl	800268c <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e04f      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee6:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 020c 	and.w	r2, r3, #12
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d1eb      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d20c      	bcs.n	8005f20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f06:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f0e:	4b20      	ldr	r3, [pc, #128]	; (8005f90 <HAL_RCC_ClockConfig+0x1b8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d001      	beq.n	8005f20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e032      	b.n	8005f86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d008      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4916      	ldr	r1, [pc, #88]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	490e      	ldr	r1, [pc, #56]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f5e:	f000 f821 	bl	8005fa4 <HAL_RCC_GetSysClockFreq>
 8005f62:	4602      	mov	r2, r0
 8005f64:	4b0b      	ldr	r3, [pc, #44]	; (8005f94 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	091b      	lsrs	r3, r3, #4
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	490a      	ldr	r1, [pc, #40]	; (8005f98 <HAL_RCC_ClockConfig+0x1c0>)
 8005f70:	5ccb      	ldrb	r3, [r1, r3]
 8005f72:	fa22 f303 	lsr.w	r3, r2, r3
 8005f76:	4a09      	ldr	r2, [pc, #36]	; (8005f9c <HAL_RCC_ClockConfig+0x1c4>)
 8005f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f7a:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fc fb40 	bl	8002604 <HAL_InitTick>

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023c00 	.word	0x40023c00
 8005f94:	40023800 	.word	0x40023800
 8005f98:	0800e724 	.word	0x0800e724
 8005f9c:	200000c4 	.word	0x200000c4
 8005fa0:	200000c8 	.word	0x200000c8

08005fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fa8:	b094      	sub	sp, #80	; 0x50
 8005faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fbc:	4b79      	ldr	r3, [pc, #484]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 030c 	and.w	r3, r3, #12
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d00d      	beq.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	f200 80e1 	bhi.w	8006190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d003      	beq.n	8005fde <HAL_RCC_GetSysClockFreq+0x3a>
 8005fd6:	e0db      	b.n	8006190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fd8:	4b73      	ldr	r3, [pc, #460]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fdc:	e0db      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fde:	4b73      	ldr	r3, [pc, #460]	; (80061ac <HAL_RCC_GetSysClockFreq+0x208>)
 8005fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fe2:	e0d8      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fe4:	4b6f      	ldr	r3, [pc, #444]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fee:	4b6d      	ldr	r3, [pc, #436]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d063      	beq.n	80060c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ffa:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	099b      	lsrs	r3, r3, #6
 8006000:	2200      	movs	r2, #0
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
 800600e:	2300      	movs	r3, #0
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
 8006012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	f04f 0000 	mov.w	r0, #0
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	0159      	lsls	r1, r3, #5
 8006024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006028:	0150      	lsls	r0, r2, #5
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4621      	mov	r1, r4
 8006030:	1a51      	subs	r1, r2, r1
 8006032:	6139      	str	r1, [r7, #16]
 8006034:	4629      	mov	r1, r5
 8006036:	eb63 0301 	sbc.w	r3, r3, r1
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	f04f 0200 	mov.w	r2, #0
 8006040:	f04f 0300 	mov.w	r3, #0
 8006044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006048:	4659      	mov	r1, fp
 800604a:	018b      	lsls	r3, r1, #6
 800604c:	4651      	mov	r1, sl
 800604e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006052:	4651      	mov	r1, sl
 8006054:	018a      	lsls	r2, r1, #6
 8006056:	4651      	mov	r1, sl
 8006058:	ebb2 0801 	subs.w	r8, r2, r1
 800605c:	4659      	mov	r1, fp
 800605e:	eb63 0901 	sbc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	462b      	mov	r3, r5
 8006084:	eb49 0303 	adc.w	r3, r9, r3
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006096:	4629      	mov	r1, r5
 8006098:	024b      	lsls	r3, r1, #9
 800609a:	4621      	mov	r1, r4
 800609c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060a0:	4621      	mov	r1, r4
 80060a2:	024a      	lsls	r2, r1, #9
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060aa:	2200      	movs	r2, #0
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060b4:	f7fa f8ec 	bl	8000290 <__aeabi_uldivmod>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4613      	mov	r3, r2
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	e058      	b.n	8006174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c2:	4b38      	ldr	r3, [pc, #224]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	099b      	lsrs	r3, r3, #6
 80060c8:	2200      	movs	r2, #0
 80060ca:	4618      	mov	r0, r3
 80060cc:	4611      	mov	r1, r2
 80060ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060d2:	623b      	str	r3, [r7, #32]
 80060d4:	2300      	movs	r3, #0
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
 80060d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	f04f 0000 	mov.w	r0, #0
 80060e4:	f04f 0100 	mov.w	r1, #0
 80060e8:	0159      	lsls	r1, r3, #5
 80060ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ee:	0150      	lsls	r0, r2, #5
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4641      	mov	r1, r8
 80060f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80060fa:	4649      	mov	r1, r9
 80060fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800610c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006114:	ebb2 040a 	subs.w	r4, r2, sl
 8006118:	eb63 050b 	sbc.w	r5, r3, fp
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	00eb      	lsls	r3, r5, #3
 8006126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612a:	00e2      	lsls	r2, r4, #3
 800612c:	4614      	mov	r4, r2
 800612e:	461d      	mov	r5, r3
 8006130:	4643      	mov	r3, r8
 8006132:	18e3      	adds	r3, r4, r3
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	464b      	mov	r3, r9
 8006138:	eb45 0303 	adc.w	r3, r5, r3
 800613c:	607b      	str	r3, [r7, #4]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800614a:	4629      	mov	r1, r5
 800614c:	028b      	lsls	r3, r1, #10
 800614e:	4621      	mov	r1, r4
 8006150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006154:	4621      	mov	r1, r4
 8006156:	028a      	lsls	r2, r1, #10
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615e:	2200      	movs	r2, #0
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	61fa      	str	r2, [r7, #28]
 8006164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006168:	f7fa f892 	bl	8000290 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	3301      	adds	r3, #1
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006184:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006188:	fbb2 f3f3 	udiv	r3, r2, r3
 800618c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800618e:	e002      	b.n	8006196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006192:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006198:	4618      	mov	r0, r3
 800619a:	3750      	adds	r7, #80	; 0x50
 800619c:	46bd      	mov	sp, r7
 800619e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a2:	bf00      	nop
 80061a4:	40023800 	.word	0x40023800
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	007a1200 	.word	0x007a1200

080061b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061b4:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80061b6:	681b      	ldr	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	200000c4 	.word	0x200000c4

080061c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061cc:	f7ff fff0 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061d0:	4602      	mov	r2, r0
 80061d2:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	0a9b      	lsrs	r3, r3, #10
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	4903      	ldr	r1, [pc, #12]	; (80061ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80061de:	5ccb      	ldrb	r3, [r1, r3]
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40023800 	.word	0x40023800
 80061ec:	0800e734 	.word	0x0800e734

080061f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061f4:	f7ff ffdc 	bl	80061b0 <HAL_RCC_GetHCLKFreq>
 80061f8:	4602      	mov	r2, r0
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	0b5b      	lsrs	r3, r3, #13
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	4903      	ldr	r1, [pc, #12]	; (8006214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006206:	5ccb      	ldrb	r3, [r1, r3]
 8006208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800620c:	4618      	mov	r0, r3
 800620e:	bd80      	pop	{r7, pc}
 8006210:	40023800 	.word	0x40023800
 8006214:	0800e734 	.word	0x0800e734

08006218 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e025      	b.n	8006278 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fc f8b3 	bl	80023ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f002 f99f 	bl	800859c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	461a      	mov	r2, r3
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	f002 f9f4 	bl	8008656 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e07b      	b.n	800638a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d108      	bne.n	80062ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a2:	d009      	beq.n	80062b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	61da      	str	r2, [r3, #28]
 80062aa:	e005      	b.n	80062b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fb ff1e 	bl	8002114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633c:	ea42 0103 	orr.w	r1, r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	f003 0104 	and.w	r1, r3, #4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	f003 0210 	and.w	r2, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	69da      	ldr	r2, [r3, #28]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b088      	sub	sp, #32
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	603b      	str	r3, [r7, #0]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_SPI_Transmit+0x22>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e126      	b.n	8006602 <HAL_SPI_Transmit+0x270>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063bc:	f7fc f966 	bl	800268c <HAL_GetTick>
 80063c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d002      	beq.n	80063d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063d2:	2302      	movs	r3, #2
 80063d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063d6:	e10b      	b.n	80065f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_SPI_Transmit+0x52>
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063e8:	e102      	b.n	80065f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2203      	movs	r2, #3
 80063ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	88fa      	ldrh	r2, [r7, #6]
 8006402:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	d10f      	bne.n	8006452 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006450:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645c:	2b40      	cmp	r3, #64	; 0x40
 800645e:	d007      	beq.n	8006470 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006478:	d14b      	bne.n	8006512 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_SPI_Transmit+0xf6>
 8006482:	8afb      	ldrh	r3, [r7, #22]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d13e      	bne.n	8006506 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	881a      	ldrh	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	1c9a      	adds	r2, r3, #2
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064ac:	e02b      	b.n	8006506 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d112      	bne.n	80064e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	881a      	ldrh	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	1c9a      	adds	r2, r3, #2
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	86da      	strh	r2, [r3, #54]	; 0x36
 80064e0:	e011      	b.n	8006506 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e2:	f7fc f8d3 	bl	800268c <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d803      	bhi.n	80064fa <HAL_SPI_Transmit+0x168>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064f8:	d102      	bne.n	8006500 <HAL_SPI_Transmit+0x16e>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d102      	bne.n	8006506 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006504:	e074      	b.n	80065f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1ce      	bne.n	80064ae <HAL_SPI_Transmit+0x11c>
 8006510:	e04c      	b.n	80065ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_Transmit+0x18e>
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d140      	bne.n	80065a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	7812      	ldrb	r2, [r2, #0]
 800652c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006546:	e02c      	b.n	80065a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d113      	bne.n	800657e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	86da      	strh	r2, [r3, #54]	; 0x36
 800657c:	e011      	b.n	80065a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800657e:	f7fc f885 	bl	800268c <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d803      	bhi.n	8006596 <HAL_SPI_Transmit+0x204>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006594:	d102      	bne.n	800659c <HAL_SPI_Transmit+0x20a>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065a0:	e026      	b.n	80065f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1cd      	bne.n	8006548 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fbcb 	bl	8006d4c <SPI_EndRxTxTransaction>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e000      	b.n	80065f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006600:	7ffb      	ldrb	r3, [r7, #31]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3720      	adds	r7, #32
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b088      	sub	sp, #32
 800660e:	af02      	add	r7, sp, #8
 8006610:	60f8      	str	r0, [r7, #12]
 8006612:	60b9      	str	r1, [r7, #8]
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d112      	bne.n	800664e <HAL_SPI_Receive+0x44>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10e      	bne.n	800664e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2204      	movs	r2, #4
 8006634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006638:	88fa      	ldrh	r2, [r7, #6]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	4613      	mov	r3, r2
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f8f1 	bl	800682c <HAL_SPI_TransmitReceive>
 800664a:	4603      	mov	r3, r0
 800664c:	e0ea      	b.n	8006824 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_SPI_Receive+0x52>
 8006658:	2302      	movs	r3, #2
 800665a:	e0e3      	b.n	8006824 <HAL_SPI_Receive+0x21a>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006664:	f7fc f812 	bl	800268c <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d002      	beq.n	800667c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006676:	2302      	movs	r3, #2
 8006678:	75fb      	strb	r3, [r7, #23]
    goto error;
 800667a:	e0ca      	b.n	8006812 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_SPI_Receive+0x7e>
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d102      	bne.n	800668e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800668c:	e0c1      	b.n	8006812 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2204      	movs	r2, #4
 8006692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	88fa      	ldrh	r2, [r7, #6]
 80066a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	88fa      	ldrh	r2, [r7, #6]
 80066ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d4:	d10f      	bne.n	80066f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d007      	beq.n	8006714 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d162      	bne.n	80067e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800671c:	e02e      	b.n	800677c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b01      	cmp	r3, #1
 800672a:	d115      	bne.n	8006758 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f103 020c 	add.w	r2, r3, #12
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	7812      	ldrb	r2, [r2, #0]
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006756:	e011      	b.n	800677c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006758:	f7fb ff98 	bl	800268c <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d803      	bhi.n	8006770 <HAL_SPI_Receive+0x166>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d102      	bne.n	8006776 <HAL_SPI_Receive+0x16c>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	75fb      	strb	r3, [r7, #23]
          goto error;
 800677a:	e04a      	b.n	8006812 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1cb      	bne.n	800671e <HAL_SPI_Receive+0x114>
 8006786:	e031      	b.n	80067ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d113      	bne.n	80067be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	b292      	uxth	r2, r2
 80067a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	1c9a      	adds	r2, r3, #2
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80067bc:	e011      	b.n	80067e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067be:	f7fb ff65 	bl	800268c <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d803      	bhi.n	80067d6 <HAL_SPI_Receive+0x1cc>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d4:	d102      	bne.n	80067dc <HAL_SPI_Receive+0x1d2>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067e0:	e017      	b.n	8006812 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1cd      	bne.n	8006788 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fa45 	bl	8006c80 <SPI_EndRxTransaction>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
 800680e:	e000      	b.n	8006812 <HAL_SPI_Receive+0x208>
  }

error :
 8006810:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800683a:	2301      	movs	r3, #1
 800683c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800684a:	2b01      	cmp	r3, #1
 800684c:	d101      	bne.n	8006852 <HAL_SPI_TransmitReceive+0x26>
 800684e:	2302      	movs	r3, #2
 8006850:	e18a      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x33c>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800685a:	f7fb ff17 	bl	800268c <HAL_GetTick>
 800685e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006870:	887b      	ldrh	r3, [r7, #2]
 8006872:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006874:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006878:	2b01      	cmp	r3, #1
 800687a:	d00f      	beq.n	800689c <HAL_SPI_TransmitReceive+0x70>
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006882:	d107      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x68>
 800688c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006890:	2b04      	cmp	r3, #4
 8006892:	d003      	beq.n	800689c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006894:	2302      	movs	r3, #2
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800689a:	e15b      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x82>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_SPI_TransmitReceive+0x82>
 80068a8:	887b      	ldrh	r3, [r7, #2]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068b4:	e14e      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d003      	beq.n	80068ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2205      	movs	r2, #5
 80068c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	887a      	ldrh	r2, [r7, #2]
 80068da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	887a      	ldrh	r2, [r7, #2]
 80068e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	887a      	ldrh	r2, [r7, #2]
 80068f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b40      	cmp	r3, #64	; 0x40
 800690c:	d007      	beq.n	800691e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006926:	d178      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <HAL_SPI_TransmitReceive+0x10a>
 8006930:	8b7b      	ldrh	r3, [r7, #26]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d166      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	881a      	ldrh	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	1c9a      	adds	r2, r3, #2
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800695a:	e053      	b.n	8006a04 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d11b      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x176>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696e:	b29b      	uxth	r3, r3
 8006970:	2b00      	cmp	r3, #0
 8006972:	d016      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x176>
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b01      	cmp	r3, #1
 8006978:	d113      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	881a      	ldrh	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	1c9a      	adds	r2, r3, #2
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006994:	b29b      	uxth	r3, r3
 8006996:	3b01      	subs	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d119      	bne.n	80069e4 <HAL_SPI_TransmitReceive+0x1b8>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d014      	beq.n	80069e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	b292      	uxth	r2, r2
 80069c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	1c9a      	adds	r2, r3, #2
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069e0:	2301      	movs	r3, #1
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069e4:	f7fb fe52 	bl	800268c <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d807      	bhi.n	8006a04 <HAL_SPI_TransmitReceive+0x1d8>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fa:	d003      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a02:	e0a7      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1a6      	bne.n	800695c <HAL_SPI_TransmitReceive+0x130>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1a1      	bne.n	800695c <HAL_SPI_TransmitReceive+0x130>
 8006a18:	e07c      	b.n	8006b14 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_TransmitReceive+0x1fc>
 8006a22:	8b7b      	ldrh	r3, [r7, #26]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d16b      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	330c      	adds	r3, #12
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b01      	subs	r3, #1
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a4e:	e057      	b.n	8006b00 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d11c      	bne.n	8006a98 <HAL_SPI_TransmitReceive+0x26c>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d017      	beq.n	8006a98 <HAL_SPI_TransmitReceive+0x26c>
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d114      	bne.n	8006a98 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d119      	bne.n	8006ada <HAL_SPI_TransmitReceive+0x2ae>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d014      	beq.n	8006ada <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	b2d2      	uxtb	r2, r2
 8006abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ada:	f7fb fdd7 	bl	800268c <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d803      	bhi.n	8006af2 <HAL_SPI_TransmitReceive+0x2c6>
 8006aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af0:	d102      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x2cc>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006afe:	e029      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1a2      	bne.n	8006a50 <HAL_SPI_TransmitReceive+0x224>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d19d      	bne.n	8006a50 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 f917 	bl	8006d4c <SPI_EndRxTxTransaction>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b30:	e010      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	e000      	b.n	8006b54 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3730      	adds	r7, #48	; 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b088      	sub	sp, #32
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b80:	f7fb fd84 	bl	800268c <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b90:	f7fb fd7c 	bl	800268c <HAL_GetTick>
 8006b94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b96:	4b39      	ldr	r3, [pc, #228]	; (8006c7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	015b      	lsls	r3, r3, #5
 8006b9c:	0d1b      	lsrs	r3, r3, #20
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	fb02 f303 	mul.w	r3, r2, r3
 8006ba4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ba6:	e054      	b.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bae:	d050      	beq.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bb0:	f7fb fd6c 	bl	800268c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	69fa      	ldr	r2, [r7, #28]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d902      	bls.n	8006bc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d13d      	bne.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006bd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bde:	d111      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be8:	d004      	beq.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf2:	d107      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c0c:	d10f      	bne.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e017      	b.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	bf0c      	ite	eq
 8006c62:	2301      	moveq	r3, #1
 8006c64:	2300      	movne	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d19b      	bne.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	200000c4 	.word	0x200000c4

08006c80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c94:	d111      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	d004      	beq.n	8006caa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca8:	d107      	bne.n	8006cba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc2:	d12a      	bne.n	8006d1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ccc:	d012      	beq.n	8006cf4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2180      	movs	r1, #128	; 0x80
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7ff ff49 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d02d      	beq.n	8006d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e026      	b.n	8006d42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff ff36 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d01a      	beq.n	8006d40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0e:	f043 0220 	orr.w	r2, r3, #32
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e013      	b.n	8006d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	2101      	movs	r1, #1
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff ff23 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	f043 0220 	orr.w	r2, r3, #32
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e000      	b.n	8006d42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d58:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <SPI_EndRxTxTransaction+0x7c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a1b      	ldr	r2, [pc, #108]	; (8006dcc <SPI_EndRxTxTransaction+0x80>)
 8006d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d62:	0d5b      	lsrs	r3, r3, #21
 8006d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d68:	fb02 f303 	mul.w	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d76:	d112      	bne.n	8006d9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2180      	movs	r1, #128	; 0x80
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff fef4 	bl	8006b70 <SPI_WaitFlagStateUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d016      	beq.n	8006dbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e00f      	b.n	8006dbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db4:	2b80      	cmp	r3, #128	; 0x80
 8006db6:	d0f2      	beq.n	8006d9e <SPI_EndRxTxTransaction+0x52>
 8006db8:	e000      	b.n	8006dbc <SPI_EndRxTxTransaction+0x70>
        break;
 8006dba:	bf00      	nop
  }

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	200000c4 	.word	0x200000c4
 8006dcc:	165e9f81 	.word	0x165e9f81

08006dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e041      	b.n	8006e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fb f9d4 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4610      	mov	r0, r2
 8006e10:	f000 f8f4 	bl	8006ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_TIM_ConfigClockSource+0x1c>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e0b4      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x186>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec2:	d03e      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0xd4>
 8006ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec8:	f200 8087 	bhi.w	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed0:	f000 8086 	beq.w	8006fe0 <HAL_TIM_ConfigClockSource+0x172>
 8006ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed8:	d87f      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006eda:	2b70      	cmp	r3, #112	; 0x70
 8006edc:	d01a      	beq.n	8006f14 <HAL_TIM_ConfigClockSource+0xa6>
 8006ede:	2b70      	cmp	r3, #112	; 0x70
 8006ee0:	d87b      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006ee2:	2b60      	cmp	r3, #96	; 0x60
 8006ee4:	d050      	beq.n	8006f88 <HAL_TIM_ConfigClockSource+0x11a>
 8006ee6:	2b60      	cmp	r3, #96	; 0x60
 8006ee8:	d877      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006eea:	2b50      	cmp	r3, #80	; 0x50
 8006eec:	d03c      	beq.n	8006f68 <HAL_TIM_ConfigClockSource+0xfa>
 8006eee:	2b50      	cmp	r3, #80	; 0x50
 8006ef0:	d873      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006ef2:	2b40      	cmp	r3, #64	; 0x40
 8006ef4:	d058      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0x13a>
 8006ef6:	2b40      	cmp	r3, #64	; 0x40
 8006ef8:	d86f      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006efa:	2b30      	cmp	r3, #48	; 0x30
 8006efc:	d064      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8006efe:	2b30      	cmp	r3, #48	; 0x30
 8006f00:	d86b      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	d060      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d867      	bhi.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d05c      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8006f0e:	2b10      	cmp	r3, #16
 8006f10:	d05a      	beq.n	8006fc8 <HAL_TIM_ConfigClockSource+0x15a>
 8006f12:	e062      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6818      	ldr	r0, [r3, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	6899      	ldr	r1, [r3, #8]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f000 f984 	bl	8007230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	609a      	str	r2, [r3, #8]
      break;
 8006f40:	e04f      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6899      	ldr	r1, [r3, #8]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f000 f96d 	bl	8007230 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	689a      	ldr	r2, [r3, #8]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f64:	609a      	str	r2, [r3, #8]
      break;
 8006f66:	e03c      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6859      	ldr	r1, [r3, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	461a      	mov	r2, r3
 8006f76:	f000 f8e1 	bl	800713c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2150      	movs	r1, #80	; 0x50
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 f93a 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 8006f86:	e02c      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6818      	ldr	r0, [r3, #0]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	6859      	ldr	r1, [r3, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f000 f900 	bl	800719a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2160      	movs	r1, #96	; 0x60
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f92a 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 8006fa6:	e01c      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6859      	ldr	r1, [r3, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f000 f8c1 	bl	800713c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2140      	movs	r1, #64	; 0x40
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f000 f91a 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 8006fc6:	e00c      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4610      	mov	r0, r2
 8006fd4:	f000 f911 	bl	80071fa <TIM_ITRx_SetConfig>
      break;
 8006fd8:	e003      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006fde:	e000      	b.n	8006fe2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a40      	ldr	r2, [pc, #256]	; (8007110 <TIM_Base_SetConfig+0x114>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <TIM_Base_SetConfig+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701a:	d00f      	beq.n	800703c <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a3d      	ldr	r2, [pc, #244]	; (8007114 <TIM_Base_SetConfig+0x118>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00b      	beq.n	800703c <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a3c      	ldr	r2, [pc, #240]	; (8007118 <TIM_Base_SetConfig+0x11c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d007      	beq.n	800703c <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a3b      	ldr	r2, [pc, #236]	; (800711c <TIM_Base_SetConfig+0x120>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d003      	beq.n	800703c <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a3a      	ldr	r2, [pc, #232]	; (8007120 <TIM_Base_SetConfig+0x124>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d108      	bne.n	800704e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a2f      	ldr	r2, [pc, #188]	; (8007110 <TIM_Base_SetConfig+0x114>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d02b      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d027      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2c      	ldr	r2, [pc, #176]	; (8007114 <TIM_Base_SetConfig+0x118>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d023      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2b      	ldr	r2, [pc, #172]	; (8007118 <TIM_Base_SetConfig+0x11c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01f      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2a      	ldr	r2, [pc, #168]	; (800711c <TIM_Base_SetConfig+0x120>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01b      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a29      	ldr	r2, [pc, #164]	; (8007120 <TIM_Base_SetConfig+0x124>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d017      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a28      	ldr	r2, [pc, #160]	; (8007124 <TIM_Base_SetConfig+0x128>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a27      	ldr	r2, [pc, #156]	; (8007128 <TIM_Base_SetConfig+0x12c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00f      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a26      	ldr	r2, [pc, #152]	; (800712c <TIM_Base_SetConfig+0x130>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00b      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a25      	ldr	r2, [pc, #148]	; (8007130 <TIM_Base_SetConfig+0x134>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d007      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a24      	ldr	r2, [pc, #144]	; (8007134 <TIM_Base_SetConfig+0x138>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a23      	ldr	r2, [pc, #140]	; (8007138 <TIM_Base_SetConfig+0x13c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d108      	bne.n	80070c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <TIM_Base_SetConfig+0x114>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_Base_SetConfig+0xf8>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a0c      	ldr	r2, [pc, #48]	; (8007120 <TIM_Base_SetConfig+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d103      	bne.n	80070fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	615a      	str	r2, [r3, #20]
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40010000 	.word	0x40010000
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40010400 	.word	0x40010400
 8007124:	40014000 	.word	0x40014000
 8007128:	40014400 	.word	0x40014400
 800712c:	40014800 	.word	0x40014800
 8007130:	40001800 	.word	0x40001800
 8007134:	40001c00 	.word	0x40001c00
 8007138:	40002000 	.word	0x40002000

0800713c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800713c:	b480      	push	{r7}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f023 030a 	bic.w	r3, r3, #10
 8007178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719a:	b480      	push	{r7}
 800719c:	b087      	sub	sp, #28
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	f023 0210 	bic.w	r2, r3, #16
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	031b      	lsls	r3, r3, #12
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	f043 0307 	orr.w	r3, r3, #7
 800721c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	609a      	str	r2, [r3, #8]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800724a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	021a      	lsls	r2, r3, #8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	431a      	orrs	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4313      	orrs	r3, r2
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	609a      	str	r2, [r3, #8]
}
 8007264:	bf00      	nop
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007284:	2302      	movs	r3, #2
 8007286:	e05a      	b.n	800733e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a21      	ldr	r2, [pc, #132]	; (800734c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d022      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d4:	d01d      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1d      	ldr	r2, [pc, #116]	; (8007350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d018      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1b      	ldr	r2, [pc, #108]	; (8007354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d013      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1a      	ldr	r2, [pc, #104]	; (8007358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00e      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a18      	ldr	r2, [pc, #96]	; (800735c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d009      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a17      	ldr	r2, [pc, #92]	; (8007360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d004      	beq.n	8007312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a15      	ldr	r2, [pc, #84]	; (8007364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d10c      	bne.n	800732c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4313      	orrs	r3, r2
 8007322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40010000 	.word	0x40010000
 8007350:	40000400 	.word	0x40000400
 8007354:	40000800 	.word	0x40000800
 8007358:	40000c00 	.word	0x40000c00
 800735c:	40010400 	.word	0x40010400
 8007360:	40014000 	.word	0x40014000
 8007364:	40001800 	.word	0x40001800

08007368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e03f      	b.n	80073fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b00      	cmp	r3, #0
 8007384:	d106      	bne.n	8007394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7fa ff2a 	bl	80021e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2224      	movs	r2, #36	; 0x24
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fe81 	bl	80080b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695a      	ldr	r2, [r3, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b08a      	sub	sp, #40	; 0x28
 8007406:	af02      	add	r7, sp, #8
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	603b      	str	r3, [r7, #0]
 800740e:	4613      	mov	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b20      	cmp	r3, #32
 8007420:	d17c      	bne.n	800751c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <HAL_UART_Transmit+0x2c>
 8007428:	88fb      	ldrh	r3, [r7, #6]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e075      	b.n	800751e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_UART_Transmit+0x3e>
 800743c:	2302      	movs	r3, #2
 800743e:	e06e      	b.n	800751e <HAL_UART_Transmit+0x11c>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2221      	movs	r2, #33	; 0x21
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007456:	f7fb f919 	bl	800268c <HAL_GetTick>
 800745a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	88fa      	ldrh	r2, [r7, #6]
 8007466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	d108      	bne.n	8007484 <HAL_UART_Transmit+0x82>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d104      	bne.n	8007484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	e003      	b.n	800748c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007494:	e02a      	b.n	80074ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2200      	movs	r2, #0
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fbc1 	bl	8007c28 <UART_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e036      	b.n	800751e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10b      	bne.n	80074ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	3302      	adds	r3, #2
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	e007      	b.n	80074de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1cf      	bne.n	8007496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2200      	movs	r2, #0
 80074fe:	2140      	movs	r1, #64	; 0x40
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 fb91 	bl	8007c28 <UART_WaitOnFlagUntilTimeout>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e006      	b.n	800751e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2220      	movs	r2, #32
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	e000      	b.n	800751e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800751c:	2302      	movs	r3, #2
  }
}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b08a      	sub	sp, #40	; 0x28
 800752a:	af02      	add	r7, sp, #8
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	603b      	str	r3, [r7, #0]
 8007532:	4613      	mov	r3, r2
 8007534:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b20      	cmp	r3, #32
 8007544:	f040 808c 	bne.w	8007660 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_UART_Receive+0x2e>
 800754e:	88fb      	ldrh	r3, [r7, #6]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e084      	b.n	8007662 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755e:	2b01      	cmp	r3, #1
 8007560:	d101      	bne.n	8007566 <HAL_UART_Receive+0x40>
 8007562:	2302      	movs	r3, #2
 8007564:	e07d      	b.n	8007662 <HAL_UART_Receive+0x13c>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2222      	movs	r2, #34	; 0x22
 8007578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007582:	f7fb f883 	bl	800268c <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	88fa      	ldrh	r2, [r7, #6]
 800758c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759c:	d108      	bne.n	80075b0 <HAL_UART_Receive+0x8a>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	e003      	b.n	80075b8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80075c0:	e043      	b.n	800764a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	2120      	movs	r1, #32
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fb2b 	bl	8007c28 <UART_WaitOnFlagUntilTimeout>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e042      	b.n	8007662 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10c      	bne.n	80075fc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	3302      	adds	r3, #2
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e01f      	b.n	800763c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007604:	d007      	beq.n	8007616 <HAL_UART_Receive+0xf0>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <HAL_UART_Receive+0xfe>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d106      	bne.n	8007624 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e008      	b.n	8007636 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007630:	b2da      	uxtb	r2, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	3301      	adds	r3, #1
 800763a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1b6      	bne.n	80075c2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	4613      	mov	r3, r2
 8007676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b20      	cmp	r3, #32
 8007682:	d11d      	bne.n	80076c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d002      	beq.n	8007690 <HAL_UART_Receive_IT+0x26>
 800768a:	88fb      	ldrh	r3, [r7, #6]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e016      	b.n	80076c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_UART_Receive_IT+0x38>
 800769e:	2302      	movs	r3, #2
 80076a0:	e00f      	b.n	80076c2 <HAL_UART_Receive_IT+0x58>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076b0:	88fb      	ldrh	r3, [r7, #6]
 80076b2:	461a      	mov	r2, r3
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f000 fb24 	bl	8007d04 <UART_Start_Receive_IT>
 80076bc:	4603      	mov	r3, r0
 80076be:	e000      	b.n	80076c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80076c0:	2302      	movs	r3, #2
  }
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b0ba      	sub	sp, #232	; 0xe8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800770a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10f      	bne.n	8007732 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <HAL_UART_IRQHandler+0x66>
 800771e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fc07 	bl	8007f3e <UART_Receive_IT>
      return;
 8007730:	e256      	b.n	8007be0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 80de 	beq.w	80078f8 <HAL_UART_IRQHandler+0x22c>
 800773c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80d1 	beq.w	80078f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_UART_IRQHandler+0xae>
 8007762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776a:	2b00      	cmp	r3, #0
 800776c:	d005      	beq.n	800777a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f043 0201 	orr.w	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800777a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_UART_IRQHandler+0xd2>
 8007786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d005      	beq.n	800779e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	f043 0202 	orr.w	r2, r3, #2
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <HAL_UART_IRQHandler+0xf6>
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d005      	beq.n	80077c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f043 0204 	orr.w	r2, r3, #4
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d011      	beq.n	80077f2 <HAL_UART_IRQHandler+0x126>
 80077ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d105      	bne.n	80077e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80077da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f043 0208 	orr.w	r2, r3, #8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 81ed 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007800:	f003 0320 	and.w	r3, r3, #32
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <HAL_UART_IRQHandler+0x14e>
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb92 	bl	8007f3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	bf0c      	ite	eq
 8007828:	2301      	moveq	r3, #1
 800782a:	2300      	movne	r3, #0
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f003 0308 	and.w	r3, r3, #8
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <HAL_UART_IRQHandler+0x17a>
 800783e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007842:	2b00      	cmp	r3, #0
 8007844:	d04f      	beq.n	80078e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa9a 	bl	8007d80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007856:	2b40      	cmp	r3, #64	; 0x40
 8007858:	d141      	bne.n	80078de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3314      	adds	r3, #20
 8007860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007868:	e853 3f00 	ldrex	r3, [r3]
 800786c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800788a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007896:	e841 2300 	strex	r3, r2, [r1]
 800789a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800789e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1d9      	bne.n	800785a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d013      	beq.n	80078d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b2:	4a7d      	ldr	r2, [pc, #500]	; (8007aa8 <HAL_UART_IRQHandler+0x3dc>)
 80078b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fb f8b3 	bl	8002a26 <HAL_DMA_Abort_IT>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d016      	beq.n	80078f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078d0:	4610      	mov	r0, r2
 80078d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	e00e      	b.n	80078f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f990 	bl	8007bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	e00a      	b.n	80078f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f98c 	bl	8007bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e4:	e006      	b.n	80078f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f988 	bl	8007bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80078f2:	e170      	b.n	8007bd6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f4:	bf00      	nop
    return;
 80078f6:	e16e      	b.n	8007bd6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	f040 814a 	bne.w	8007b96 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8143 	beq.w	8007b96 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 813c 	beq.w	8007b96 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800791e:	2300      	movs	r3, #0
 8007920:	60bb      	str	r3, [r7, #8]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	f040 80b4 	bne.w	8007aac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007950:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 8140 	beq.w	8007bda <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800795e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007962:	429a      	cmp	r2, r3
 8007964:	f080 8139 	bcs.w	8007bda <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800796e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797a:	f000 8088 	beq.w	8007a8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800799c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	330c      	adds	r3, #12
 80079a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1d9      	bne.n	800797e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3314      	adds	r3, #20
 80079d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3314      	adds	r3, #20
 80079ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e1      	bne.n	80079ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3314      	adds	r3, #20
 8007a0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3314      	adds	r3, #20
 8007a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e3      	bne.n	8007a06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	330c      	adds	r3, #12
 8007a52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5e:	f023 0310 	bic.w	r3, r3, #16
 8007a62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a70:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e3      	bne.n	8007a4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fa ff5c 	bl	8002946 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8b6 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007aa4:	e099      	b.n	8007bda <HAL_UART_IRQHandler+0x50e>
 8007aa6:	bf00      	nop
 8007aa8:	08007e47 	.word	0x08007e47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 808b 	beq.w	8007bde <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8086 	beq.w	8007bde <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007af6:	647a      	str	r2, [r7, #68]	; 0x44
 8007af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e3      	bne.n	8007ad2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	3314      	adds	r3, #20
 8007b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	623b      	str	r3, [r7, #32]
   return(result);
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	f023 0301 	bic.w	r3, r3, #1
 8007b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3314      	adds	r3, #20
 8007b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e3      	bne.n	8007b0a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 0310 	bic.w	r3, r3, #16
 8007b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007b74:	61fa      	str	r2, [r7, #28]
 8007b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	69b9      	ldr	r1, [r7, #24]
 8007b7a:	69fa      	ldr	r2, [r7, #28]
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	617b      	str	r3, [r7, #20]
   return(result);
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e3      	bne.n	8007b50 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f83e 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b94:	e023      	b.n	8007bde <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d009      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x4ea>
 8007ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f95d 	bl	8007e6e <UART_Transmit_IT>
    return;
 8007bb4:	e014      	b.n	8007be0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00e      	beq.n	8007be0 <HAL_UART_IRQHandler+0x514>
 8007bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d008      	beq.n	8007be0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f99d 	bl	8007f0e <UART_EndTransmit_IT>
    return;
 8007bd4:	e004      	b.n	8007be0 <HAL_UART_IRQHandler+0x514>
    return;
 8007bd6:	bf00      	nop
 8007bd8:	e002      	b.n	8007be0 <HAL_UART_IRQHandler+0x514>
      return;
 8007bda:	bf00      	nop
 8007bdc:	e000      	b.n	8007be0 <HAL_UART_IRQHandler+0x514>
      return;
 8007bde:	bf00      	nop
  }
}
 8007be0:	37e8      	adds	r7, #232	; 0xe8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop

08007be8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b090      	sub	sp, #64	; 0x40
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	4613      	mov	r3, r2
 8007c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c38:	e050      	b.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c40:	d04c      	beq.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c48:	f7fa fd20 	bl	800268c <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d241      	bcs.n	8007cdc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c78:	637a      	str	r2, [r7, #52]	; 0x34
 8007c7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3314      	adds	r3, #20
 8007c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cac:	623a      	str	r2, [r7, #32]
 8007cae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e00f      	b.n	8007cfc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d09f      	beq.n	8007c3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3740      	adds	r7, #64	; 0x40
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	4613      	mov	r3, r2
 8007d10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	88fa      	ldrh	r2, [r7, #6]
 8007d1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	88fa      	ldrh	r2, [r7, #6]
 8007d22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2222      	movs	r2, #34	; 0x22
 8007d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0201 	orr.w	r2, r2, #1
 8007d60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0220 	orr.w	r2, r2, #32
 8007d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b095      	sub	sp, #84	; 0x54
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	330c      	adds	r3, #12
 8007da6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007da8:	643a      	str	r2, [r7, #64]	; 0x40
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e5      	bne.n	8007d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3314      	adds	r3, #20
 8007dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3314      	adds	r3, #20
 8007dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d119      	bne.n	8007e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e18:	61ba      	str	r2, [r7, #24]
 8007e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	613b      	str	r3, [r7, #16]
   return(result);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e3a:	bf00      	nop
 8007e3c:	3754      	adds	r7, #84	; 0x54
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fecb 	bl	8007bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b21      	cmp	r3, #33	; 0x21
 8007e80:	d13e      	bne.n	8007f00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e8a:	d114      	bne.n	8007eb6 <UART_Transmit_IT+0x48>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d110      	bne.n	8007eb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	881b      	ldrh	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ea8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	1c9a      	adds	r2, r3, #2
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	621a      	str	r2, [r3, #32]
 8007eb4:	e008      	b.n	8007ec8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	1c59      	adds	r1, r3, #1
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6211      	str	r1, [r2, #32]
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10f      	bne.n	8007efc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007eea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007efa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e000      	b.n	8007f02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f00:	2302      	movs	r3, #2
  }
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff fe5a 	bl	8007be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b08c      	sub	sp, #48	; 0x30
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b22      	cmp	r3, #34	; 0x22
 8007f50:	f040 80ab 	bne.w	80080aa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5c:	d117      	bne.n	8007f8e <UART_Receive_IT+0x50>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d113      	bne.n	8007f8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f86:	1c9a      	adds	r2, r3, #2
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	629a      	str	r2, [r3, #40]	; 0x28
 8007f8c:	e026      	b.n	8007fdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa0:	d007      	beq.n	8007fb2 <UART_Receive_IT+0x74>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <UART_Receive_IT+0x82>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d106      	bne.n	8007fc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e008      	b.n	8007fd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	4619      	mov	r1, r3
 8007fea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d15a      	bne.n	80080a6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0220 	bic.w	r2, r2, #32
 8007ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800800e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0201 	bic.w	r2, r2, #1
 800801e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	2b01      	cmp	r3, #1
 800802e:	d135      	bne.n	800809c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	330c      	adds	r3, #12
 800803c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	613b      	str	r3, [r7, #16]
   return(result);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f023 0310 	bic.w	r3, r3, #16
 800804c:	627b      	str	r3, [r7, #36]	; 0x24
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	330c      	adds	r3, #12
 8008054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008056:	623a      	str	r2, [r7, #32]
 8008058:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	69f9      	ldr	r1, [r7, #28]
 800805c:	6a3a      	ldr	r2, [r7, #32]
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	61bb      	str	r3, [r7, #24]
   return(result);
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b10      	cmp	r3, #16
 8008076:	d10a      	bne.n	800808e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff fdbb 	bl	8007c10 <HAL_UARTEx_RxEventCallback>
 800809a:	e002      	b.n	80080a2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7f8 ff9f 	bl	8000fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e002      	b.n	80080ac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	e000      	b.n	80080ac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080aa:	2302      	movs	r3, #2
  }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3730      	adds	r7, #48	; 0x30
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080b8:	b0c0      	sub	sp, #256	; 0x100
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d0:	68d9      	ldr	r1, [r3, #12]
 80080d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	ea40 0301 	orr.w	r3, r0, r1
 80080dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	431a      	orrs	r2, r3
 80080ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f0:	695b      	ldr	r3, [r3, #20]
 80080f2:	431a      	orrs	r2, r3
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800810c:	f021 010c 	bic.w	r1, r1, #12
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800811a:	430b      	orrs	r3, r1
 800811c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800811e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800812a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812e:	6999      	ldr	r1, [r3, #24]
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	ea40 0301 	orr.w	r3, r0, r1
 800813a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b8f      	ldr	r3, [pc, #572]	; (8008380 <UART_SetConfig+0x2cc>)
 8008144:	429a      	cmp	r2, r3
 8008146:	d005      	beq.n	8008154 <UART_SetConfig+0xa0>
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b8d      	ldr	r3, [pc, #564]	; (8008384 <UART_SetConfig+0x2d0>)
 8008150:	429a      	cmp	r2, r3
 8008152:	d104      	bne.n	800815e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008154:	f7fe f84c 	bl	80061f0 <HAL_RCC_GetPCLK2Freq>
 8008158:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800815c:	e003      	b.n	8008166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800815e:	f7fe f833 	bl	80061c8 <HAL_RCC_GetPCLK1Freq>
 8008162:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816a:	69db      	ldr	r3, [r3, #28]
 800816c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008170:	f040 810c 	bne.w	800838c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008178:	2200      	movs	r2, #0
 800817a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800817e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008186:	4622      	mov	r2, r4
 8008188:	462b      	mov	r3, r5
 800818a:	1891      	adds	r1, r2, r2
 800818c:	65b9      	str	r1, [r7, #88]	; 0x58
 800818e:	415b      	adcs	r3, r3
 8008190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008196:	4621      	mov	r1, r4
 8008198:	eb12 0801 	adds.w	r8, r2, r1
 800819c:	4629      	mov	r1, r5
 800819e:	eb43 0901 	adc.w	r9, r3, r1
 80081a2:	f04f 0200 	mov.w	r2, #0
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081b6:	4690      	mov	r8, r2
 80081b8:	4699      	mov	r9, r3
 80081ba:	4623      	mov	r3, r4
 80081bc:	eb18 0303 	adds.w	r3, r8, r3
 80081c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081c4:	462b      	mov	r3, r5
 80081c6:	eb49 0303 	adc.w	r3, r9, r3
 80081ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80081da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80081de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80081e2:	460b      	mov	r3, r1
 80081e4:	18db      	adds	r3, r3, r3
 80081e6:	653b      	str	r3, [r7, #80]	; 0x50
 80081e8:	4613      	mov	r3, r2
 80081ea:	eb42 0303 	adc.w	r3, r2, r3
 80081ee:	657b      	str	r3, [r7, #84]	; 0x54
 80081f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80081f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80081f8:	f7f8 f84a 	bl	8000290 <__aeabi_uldivmod>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4b61      	ldr	r3, [pc, #388]	; (8008388 <UART_SetConfig+0x2d4>)
 8008202:	fba3 2302 	umull	r2, r3, r3, r2
 8008206:	095b      	lsrs	r3, r3, #5
 8008208:	011c      	lsls	r4, r3, #4
 800820a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800820e:	2200      	movs	r2, #0
 8008210:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008214:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800821c:	4642      	mov	r2, r8
 800821e:	464b      	mov	r3, r9
 8008220:	1891      	adds	r1, r2, r2
 8008222:	64b9      	str	r1, [r7, #72]	; 0x48
 8008224:	415b      	adcs	r3, r3
 8008226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800822c:	4641      	mov	r1, r8
 800822e:	eb12 0a01 	adds.w	sl, r2, r1
 8008232:	4649      	mov	r1, r9
 8008234:	eb43 0b01 	adc.w	fp, r3, r1
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	f04f 0300 	mov.w	r3, #0
 8008240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800824c:	4692      	mov	sl, r2
 800824e:	469b      	mov	fp, r3
 8008250:	4643      	mov	r3, r8
 8008252:	eb1a 0303 	adds.w	r3, sl, r3
 8008256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800825a:	464b      	mov	r3, r9
 800825c:	eb4b 0303 	adc.w	r3, fp, r3
 8008260:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008270:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008278:	460b      	mov	r3, r1
 800827a:	18db      	adds	r3, r3, r3
 800827c:	643b      	str	r3, [r7, #64]	; 0x40
 800827e:	4613      	mov	r3, r2
 8008280:	eb42 0303 	adc.w	r3, r2, r3
 8008284:	647b      	str	r3, [r7, #68]	; 0x44
 8008286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800828a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800828e:	f7f7 ffff 	bl	8000290 <__aeabi_uldivmod>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4611      	mov	r1, r2
 8008298:	4b3b      	ldr	r3, [pc, #236]	; (8008388 <UART_SetConfig+0x2d4>)
 800829a:	fba3 2301 	umull	r2, r3, r3, r1
 800829e:	095b      	lsrs	r3, r3, #5
 80082a0:	2264      	movs	r2, #100	; 0x64
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	1acb      	subs	r3, r1, r3
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082ae:	4b36      	ldr	r3, [pc, #216]	; (8008388 <UART_SetConfig+0x2d4>)
 80082b0:	fba3 2302 	umull	r2, r3, r3, r2
 80082b4:	095b      	lsrs	r3, r3, #5
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082bc:	441c      	add	r4, r3
 80082be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80082cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80082d0:	4642      	mov	r2, r8
 80082d2:	464b      	mov	r3, r9
 80082d4:	1891      	adds	r1, r2, r2
 80082d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80082d8:	415b      	adcs	r3, r3
 80082da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80082e0:	4641      	mov	r1, r8
 80082e2:	1851      	adds	r1, r2, r1
 80082e4:	6339      	str	r1, [r7, #48]	; 0x30
 80082e6:	4649      	mov	r1, r9
 80082e8:	414b      	adcs	r3, r1
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80082f8:	4659      	mov	r1, fp
 80082fa:	00cb      	lsls	r3, r1, #3
 80082fc:	4651      	mov	r1, sl
 80082fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008302:	4651      	mov	r1, sl
 8008304:	00ca      	lsls	r2, r1, #3
 8008306:	4610      	mov	r0, r2
 8008308:	4619      	mov	r1, r3
 800830a:	4603      	mov	r3, r0
 800830c:	4642      	mov	r2, r8
 800830e:	189b      	adds	r3, r3, r2
 8008310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008314:	464b      	mov	r3, r9
 8008316:	460a      	mov	r2, r1
 8008318:	eb42 0303 	adc.w	r3, r2, r3
 800831c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800832c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008334:	460b      	mov	r3, r1
 8008336:	18db      	adds	r3, r3, r3
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
 800833a:	4613      	mov	r3, r2
 800833c:	eb42 0303 	adc.w	r3, r2, r3
 8008340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800834a:	f7f7 ffa1 	bl	8000290 <__aeabi_uldivmod>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <UART_SetConfig+0x2d4>)
 8008354:	fba3 1302 	umull	r1, r3, r3, r2
 8008358:	095b      	lsrs	r3, r3, #5
 800835a:	2164      	movs	r1, #100	; 0x64
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	00db      	lsls	r3, r3, #3
 8008364:	3332      	adds	r3, #50	; 0x32
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <UART_SetConfig+0x2d4>)
 8008368:	fba2 2303 	umull	r2, r3, r2, r3
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	f003 0207 	and.w	r2, r3, #7
 8008372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4422      	add	r2, r4
 800837a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800837c:	e105      	b.n	800858a <UART_SetConfig+0x4d6>
 800837e:	bf00      	nop
 8008380:	40011000 	.word	0x40011000
 8008384:	40011400 	.word	0x40011400
 8008388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800838c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008390:	2200      	movs	r2, #0
 8008392:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008396:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800839a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800839e:	4642      	mov	r2, r8
 80083a0:	464b      	mov	r3, r9
 80083a2:	1891      	adds	r1, r2, r2
 80083a4:	6239      	str	r1, [r7, #32]
 80083a6:	415b      	adcs	r3, r3
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
 80083aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ae:	4641      	mov	r1, r8
 80083b0:	1854      	adds	r4, r2, r1
 80083b2:	4649      	mov	r1, r9
 80083b4:	eb43 0501 	adc.w	r5, r3, r1
 80083b8:	f04f 0200 	mov.w	r2, #0
 80083bc:	f04f 0300 	mov.w	r3, #0
 80083c0:	00eb      	lsls	r3, r5, #3
 80083c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083c6:	00e2      	lsls	r2, r4, #3
 80083c8:	4614      	mov	r4, r2
 80083ca:	461d      	mov	r5, r3
 80083cc:	4643      	mov	r3, r8
 80083ce:	18e3      	adds	r3, r4, r3
 80083d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80083d4:	464b      	mov	r3, r9
 80083d6:	eb45 0303 	adc.w	r3, r5, r3
 80083da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80083de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80083ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083ee:	f04f 0200 	mov.w	r2, #0
 80083f2:	f04f 0300 	mov.w	r3, #0
 80083f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80083fa:	4629      	mov	r1, r5
 80083fc:	008b      	lsls	r3, r1, #2
 80083fe:	4621      	mov	r1, r4
 8008400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008404:	4621      	mov	r1, r4
 8008406:	008a      	lsls	r2, r1, #2
 8008408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800840c:	f7f7 ff40 	bl	8000290 <__aeabi_uldivmod>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	4b60      	ldr	r3, [pc, #384]	; (8008598 <UART_SetConfig+0x4e4>)
 8008416:	fba3 2302 	umull	r2, r3, r3, r2
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	011c      	lsls	r4, r3, #4
 800841e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008422:	2200      	movs	r2, #0
 8008424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800842c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008430:	4642      	mov	r2, r8
 8008432:	464b      	mov	r3, r9
 8008434:	1891      	adds	r1, r2, r2
 8008436:	61b9      	str	r1, [r7, #24]
 8008438:	415b      	adcs	r3, r3
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008440:	4641      	mov	r1, r8
 8008442:	1851      	adds	r1, r2, r1
 8008444:	6139      	str	r1, [r7, #16]
 8008446:	4649      	mov	r1, r9
 8008448:	414b      	adcs	r3, r1
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008458:	4659      	mov	r1, fp
 800845a:	00cb      	lsls	r3, r1, #3
 800845c:	4651      	mov	r1, sl
 800845e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008462:	4651      	mov	r1, sl
 8008464:	00ca      	lsls	r2, r1, #3
 8008466:	4610      	mov	r0, r2
 8008468:	4619      	mov	r1, r3
 800846a:	4603      	mov	r3, r0
 800846c:	4642      	mov	r2, r8
 800846e:	189b      	adds	r3, r3, r2
 8008470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008474:	464b      	mov	r3, r9
 8008476:	460a      	mov	r2, r1
 8008478:	eb42 0303 	adc.w	r3, r2, r3
 800847c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	67bb      	str	r3, [r7, #120]	; 0x78
 800848a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800848c:	f04f 0200 	mov.w	r2, #0
 8008490:	f04f 0300 	mov.w	r3, #0
 8008494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008498:	4649      	mov	r1, r9
 800849a:	008b      	lsls	r3, r1, #2
 800849c:	4641      	mov	r1, r8
 800849e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084a2:	4641      	mov	r1, r8
 80084a4:	008a      	lsls	r2, r1, #2
 80084a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084aa:	f7f7 fef1 	bl	8000290 <__aeabi_uldivmod>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4b39      	ldr	r3, [pc, #228]	; (8008598 <UART_SetConfig+0x4e4>)
 80084b4:	fba3 1302 	umull	r1, r3, r3, r2
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	2164      	movs	r1, #100	; 0x64
 80084bc:	fb01 f303 	mul.w	r3, r1, r3
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	3332      	adds	r3, #50	; 0x32
 80084c6:	4a34      	ldr	r2, [pc, #208]	; (8008598 <UART_SetConfig+0x4e4>)
 80084c8:	fba2 2303 	umull	r2, r3, r2, r3
 80084cc:	095b      	lsrs	r3, r3, #5
 80084ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d2:	441c      	add	r4, r3
 80084d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084d8:	2200      	movs	r2, #0
 80084da:	673b      	str	r3, [r7, #112]	; 0x70
 80084dc:	677a      	str	r2, [r7, #116]	; 0x74
 80084de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80084e2:	4642      	mov	r2, r8
 80084e4:	464b      	mov	r3, r9
 80084e6:	1891      	adds	r1, r2, r2
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	415b      	adcs	r3, r3
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084f2:	4641      	mov	r1, r8
 80084f4:	1851      	adds	r1, r2, r1
 80084f6:	6039      	str	r1, [r7, #0]
 80084f8:	4649      	mov	r1, r9
 80084fa:	414b      	adcs	r3, r1
 80084fc:	607b      	str	r3, [r7, #4]
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800850a:	4659      	mov	r1, fp
 800850c:	00cb      	lsls	r3, r1, #3
 800850e:	4651      	mov	r1, sl
 8008510:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008514:	4651      	mov	r1, sl
 8008516:	00ca      	lsls	r2, r1, #3
 8008518:	4610      	mov	r0, r2
 800851a:	4619      	mov	r1, r3
 800851c:	4603      	mov	r3, r0
 800851e:	4642      	mov	r2, r8
 8008520:	189b      	adds	r3, r3, r2
 8008522:	66bb      	str	r3, [r7, #104]	; 0x68
 8008524:	464b      	mov	r3, r9
 8008526:	460a      	mov	r2, r1
 8008528:	eb42 0303 	adc.w	r3, r2, r3
 800852c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800852e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	663b      	str	r3, [r7, #96]	; 0x60
 8008538:	667a      	str	r2, [r7, #100]	; 0x64
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008546:	4649      	mov	r1, r9
 8008548:	008b      	lsls	r3, r1, #2
 800854a:	4641      	mov	r1, r8
 800854c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008550:	4641      	mov	r1, r8
 8008552:	008a      	lsls	r2, r1, #2
 8008554:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008558:	f7f7 fe9a 	bl	8000290 <__aeabi_uldivmod>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <UART_SetConfig+0x4e4>)
 8008562:	fba3 1302 	umull	r1, r3, r3, r2
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	2164      	movs	r1, #100	; 0x64
 800856a:	fb01 f303 	mul.w	r3, r1, r3
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	3332      	adds	r3, #50	; 0x32
 8008574:	4a08      	ldr	r2, [pc, #32]	; (8008598 <UART_SetConfig+0x4e4>)
 8008576:	fba2 2303 	umull	r2, r3, r2, r3
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	f003 020f 	and.w	r2, r3, #15
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4422      	add	r2, r4
 8008588:	609a      	str	r2, [r3, #8]
}
 800858a:	bf00      	nop
 800858c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008590:	46bd      	mov	sp, r7
 8008592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008596:	bf00      	nop
 8008598:	51eb851f 	.word	0x51eb851f

0800859c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d123      	bne.n	80085f6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80085b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	6851      	ldr	r1, [r2, #4]
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	6892      	ldr	r2, [r2, #8]
 80085c2:	4311      	orrs	r1, r2
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	68d2      	ldr	r2, [r2, #12]
 80085c8:	4311      	orrs	r1, r2
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	6912      	ldr	r2, [r2, #16]
 80085ce:	4311      	orrs	r1, r2
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	6952      	ldr	r2, [r2, #20]
 80085d4:	4311      	orrs	r1, r2
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	6992      	ldr	r2, [r2, #24]
 80085da:	4311      	orrs	r1, r2
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	69d2      	ldr	r2, [r2, #28]
 80085e0:	4311      	orrs	r1, r2
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	6a12      	ldr	r2, [r2, #32]
 80085e6:	4311      	orrs	r1, r2
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80085ec:	430a      	orrs	r2, r1
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	e028      	b.n	8008648 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	69d9      	ldr	r1, [r3, #28]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	4319      	orrs	r1, r3
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	430b      	orrs	r3, r1
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800861c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	6851      	ldr	r1, [r2, #4]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	6892      	ldr	r2, [r2, #8]
 8008628:	4311      	orrs	r1, r2
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	68d2      	ldr	r2, [r2, #12]
 800862e:	4311      	orrs	r1, r2
 8008630:	683a      	ldr	r2, [r7, #0]
 8008632:	6912      	ldr	r2, [r2, #16]
 8008634:	4311      	orrs	r1, r2
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	6952      	ldr	r2, [r2, #20]
 800863a:	4311      	orrs	r1, r2
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	6992      	ldr	r2, [r2, #24]
 8008640:	430a      	orrs	r2, r1
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008656:	b480      	push	{r7}
 8008658:	b085      	sub	sp, #20
 800865a:	af00      	add	r7, sp, #0
 800865c:	60f8      	str	r0, [r7, #12]
 800865e:	60b9      	str	r1, [r7, #8]
 8008660:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d128      	bne.n	80086ba <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	1e59      	subs	r1, r3, #1
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	3b01      	subs	r3, #1
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	4319      	orrs	r1, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	3b01      	subs	r3, #1
 8008686:	021b      	lsls	r3, r3, #8
 8008688:	4319      	orrs	r1, r3
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	3b01      	subs	r3, #1
 8008690:	031b      	lsls	r3, r3, #12
 8008692:	4319      	orrs	r1, r3
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	3b01      	subs	r3, #1
 800869a:	041b      	lsls	r3, r3, #16
 800869c:	4319      	orrs	r1, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	051b      	lsls	r3, r3, #20
 80086a6:	4319      	orrs	r1, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	061b      	lsls	r3, r3, #24
 80086b0:	430b      	orrs	r3, r1
 80086b2:	431a      	orrs	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	e02f      	b.n	800871a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	68d2      	ldr	r2, [r2, #12]
 80086ca:	3a01      	subs	r2, #1
 80086cc:	0311      	lsls	r1, r2, #12
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	6952      	ldr	r2, [r2, #20]
 80086d2:	3a01      	subs	r2, #1
 80086d4:	0512      	lsls	r2, r2, #20
 80086d6:	430a      	orrs	r2, r1
 80086d8:	431a      	orrs	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	1e59      	subs	r1, r3, #1
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	4319      	orrs	r1, r3
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	021b      	lsls	r3, r3, #8
 80086fe:	4319      	orrs	r1, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	3b01      	subs	r3, #1
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	4319      	orrs	r1, r3
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	699b      	ldr	r3, [r3, #24]
 800870e:	3b01      	subs	r3, #1
 8008710:	061b      	lsls	r3, r3, #24
 8008712:	430b      	orrs	r3, r1
 8008714:	431a      	orrs	r2, r3
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008728:	b084      	sub	sp, #16
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	f107 001c 	add.w	r0, r7, #28
 8008736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800873a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873c:	2b01      	cmp	r3, #1
 800873e:	d122      	bne.n	8008786 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800876a:	2b01      	cmp	r3, #1
 800876c:	d105      	bne.n	800877a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f9c0 	bl	8008b00 <USB_CoreReset>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
 8008784:	e01a      	b.n	80087bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9b4 	bl	8008b00 <USB_CoreReset>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800879c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	639a      	str	r2, [r3, #56]	; 0x38
 80087ae:	e005      	b.n	80087bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d10b      	bne.n	80087da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f043 0206 	orr.w	r2, r3, #6
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f043 0220 	orr.w	r2, r3, #32
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087da:	7bfb      	ldrb	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087e6:	b004      	add	sp, #16
 80087e8:	4770      	bx	lr

080087ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f043 0201 	orr.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f023 0201 	bic.w	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	460b      	mov	r3, r1
 8008838:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d115      	bne.n	800887c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800885c:	2001      	movs	r0, #1
 800885e:	f7f9 ff21 	bl	80026a4 <HAL_Delay>
      ms++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 f93a 	bl	8008ae2 <USB_GetMode>
 800886e:	4603      	mov	r3, r0
 8008870:	2b01      	cmp	r3, #1
 8008872:	d01e      	beq.n	80088b2 <USB_SetCurrentMode+0x84>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b31      	cmp	r3, #49	; 0x31
 8008878:	d9f0      	bls.n	800885c <USB_SetCurrentMode+0x2e>
 800887a:	e01a      	b.n	80088b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d115      	bne.n	80088ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800888e:	2001      	movs	r0, #1
 8008890:	f7f9 ff08 	bl	80026a4 <HAL_Delay>
      ms++;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3301      	adds	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f921 	bl	8008ae2 <USB_GetMode>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <USB_SetCurrentMode+0x84>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2b31      	cmp	r3, #49	; 0x31
 80088aa:	d9f0      	bls.n	800888e <USB_SetCurrentMode+0x60>
 80088ac:	e001      	b.n	80088b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e005      	b.n	80088be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b32      	cmp	r3, #50	; 0x32
 80088b6:	d101      	bne.n	80088bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a13      	ldr	r2, [pc, #76]	; (800892c <USB_FlushTxFifo+0x64>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d901      	bls.n	80088e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e01b      	b.n	8008920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	daf2      	bge.n	80088d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	019b      	lsls	r3, r3, #6
 80088f8:	f043 0220 	orr.w	r2, r3, #32
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4a08      	ldr	r2, [pc, #32]	; (800892c <USB_FlushTxFifo+0x64>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d901      	bls.n	8008912 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e006      	b.n	8008920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b20      	cmp	r3, #32
 800891c:	d0f0      	beq.n	8008900 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	00030d40 	.word	0x00030d40

08008930 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4a11      	ldr	r2, [pc, #68]	; (800898c <USB_FlushRxFifo+0x5c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d901      	bls.n	800894e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e018      	b.n	8008980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	daf2      	bge.n	800893c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2210      	movs	r2, #16
 800895e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3301      	adds	r3, #1
 8008964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4a08      	ldr	r2, [pc, #32]	; (800898c <USB_FlushRxFifo+0x5c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e006      	b.n	8008980 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	f003 0310 	and.w	r3, r3, #16
 800897a:	2b10      	cmp	r3, #16
 800897c:	d0f0      	beq.n	8008960 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	00030d40 	.word	0x00030d40

08008990 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008990:	b480      	push	{r7}
 8008992:	b089      	sub	sp, #36	; 0x24
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4611      	mov	r1, r2
 800899c:	461a      	mov	r2, r3
 800899e:	460b      	mov	r3, r1
 80089a0:	71fb      	strb	r3, [r7, #7]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d123      	bne.n	80089fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089b6:	88bb      	ldrh	r3, [r7, #4]
 80089b8:	3303      	adds	r3, #3
 80089ba:	089b      	lsrs	r3, r3, #2
 80089bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089be:	2300      	movs	r3, #0
 80089c0:	61bb      	str	r3, [r7, #24]
 80089c2:	e018      	b.n	80089f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	031a      	lsls	r2, r3, #12
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d0:	461a      	mov	r2, r3
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	3301      	adds	r3, #1
 80089dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	3301      	adds	r3, #1
 80089e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	3301      	adds	r3, #1
 80089e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	3301      	adds	r3, #1
 80089ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	3301      	adds	r3, #1
 80089f4:	61bb      	str	r3, [r7, #24]
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d3e2      	bcc.n	80089c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3724      	adds	r7, #36	; 0x24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b08b      	sub	sp, #44	; 0x2c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a22:	88fb      	ldrh	r3, [r7, #6]
 8008a24:	089b      	lsrs	r3, r3, #2
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a32:	2300      	movs	r3, #0
 8008a34:	623b      	str	r3, [r7, #32]
 8008a36:	e014      	b.n	8008a62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	3301      	adds	r3, #1
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	3301      	adds	r3, #1
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	3301      	adds	r3, #1
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008a5c:	6a3b      	ldr	r3, [r7, #32]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	623b      	str	r3, [r7, #32]
 8008a62:	6a3a      	ldr	r2, [r7, #32]
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d3e6      	bcc.n	8008a38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a6a:	8bfb      	ldrh	r3, [r7, #30]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d01e      	beq.n	8008aae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f107 0310 	add.w	r3, r7, #16
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	701a      	strb	r2, [r3, #0]
      i++;
 8008a96:	6a3b      	ldr	r3, [r7, #32]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008aa2:	8bfb      	ldrh	r3, [r7, #30]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008aa8:	8bfb      	ldrh	r3, [r7, #30]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1ea      	bne.n	8008a84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	372c      	adds	r7, #44	; 0x2c
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f003 0301 	and.w	r3, r3, #1
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4a13      	ldr	r2, [pc, #76]	; (8008b64 <USB_CoreReset+0x64>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d901      	bls.n	8008b1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e01b      	b.n	8008b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	daf2      	bge.n	8008b0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	f043 0201 	orr.w	r2, r3, #1
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4a09      	ldr	r2, [pc, #36]	; (8008b64 <USB_CoreReset+0x64>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d901      	bls.n	8008b48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e006      	b.n	8008b56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d0f0      	beq.n	8008b36 <USB_CoreReset+0x36>

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	00030d40 	.word	0x00030d40

08008b68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b68:	b084      	sub	sp, #16
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b086      	sub	sp, #24
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b88:	461a      	mov	r2, r3
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d018      	beq.n	8008bf0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d10a      	bne.n	8008bda <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bd2:	f043 0304 	orr.w	r3, r3, #4
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	e014      	b.n	8008c04 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008be8:	f023 0304 	bic.w	r3, r3, #4
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	e009      	b.n	8008c04 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bfe:	f023 0304 	bic.w	r3, r3, #4
 8008c02:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c04:	2110      	movs	r1, #16
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fe5e 	bl	80088c8 <USB_FlushTxFifo>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff fe8a 	bl	8008930 <USB_FlushRxFifo>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d001      	beq.n	8008c26 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e015      	b.n	8008c58 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c3e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	015a      	lsls	r2, r3, #5
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4413      	add	r3, r2
 8008c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3301      	adds	r3, #1
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	693a      	ldr	r2, [r7, #16]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d3e5      	bcc.n	8008c2c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c6c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00b      	beq.n	8008c92 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a13      	ldr	r2, [pc, #76]	; (8008cd4 <USB_HostInit+0x16c>)
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <USB_HostInit+0x170>)
 8008c8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008c90:	e009      	b.n	8008ca6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2280      	movs	r2, #128	; 0x80
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a10      	ldr	r2, [pc, #64]	; (8008cdc <USB_HostInit+0x174>)
 8008c9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a0f      	ldr	r2, [pc, #60]	; (8008ce0 <USB_HostInit+0x178>)
 8008ca2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f043 0210 	orr.w	r2, r3, #16
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699a      	ldr	r2, [r3, #24]
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <USB_HostInit+0x17c>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cd0:	b004      	add	sp, #16
 8008cd2:	4770      	bx	lr
 8008cd4:	01000200 	.word	0x01000200
 8008cd8:	00e00300 	.word	0x00e00300
 8008cdc:	00600080 	.word	0x00600080
 8008ce0:	004000e0 	.word	0x004000e0
 8008ce4:	a3200008 	.word	0xa3200008

08008ce8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b085      	sub	sp, #20
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	68f9      	ldr	r1, [r7, #12]
 8008d1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d20:	4313      	orrs	r3, r2
 8008d22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d107      	bne.n	8008d3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d30:	461a      	mov	r2, r3
 8008d32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008d36:	6053      	str	r3, [r2, #4]
 8008d38:	e009      	b.n	8008d4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d106      	bne.n	8008d4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d46:	461a      	mov	r2, r3
 8008d48:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008d7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008d8c:	2064      	movs	r0, #100	; 0x64
 8008d8e:	f7f9 fc89 	bl	80026a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008da0:	200a      	movs	r0, #10
 8008da2:	f7f9 fc7f 	bl	80026a4 <HAL_Delay>

  return HAL_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008dd4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d109      	bne.n	8008df4 <USB_DriveVbus+0x44>
 8008de0:	78fb      	ldrb	r3, [r7, #3]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d106      	bne.n	8008df4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008df2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dfe:	d109      	bne.n	8008e14 <USB_DriveVbus+0x64>
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	0c5b      	lsrs	r3, r3, #17
 8008e40:	f003 0303 	and.w	r3, r3, #3
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	b29b      	uxth	r3, r3
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
	...

08008e74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	4611      	mov	r1, r2
 8008e80:	461a      	mov	r2, r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	70fb      	strb	r3, [r7, #3]
 8008e86:	460b      	mov	r3, r1
 8008e88:	70bb      	strb	r3, [r7, #2]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ea8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008eaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d87e      	bhi.n	8008fb0 <USB_HC_Init+0x13c>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <USB_HC_Init+0x44>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008ec9 	.word	0x08008ec9
 8008ebc:	08008f73 	.word	0x08008f73
 8008ec0:	08008ec9 	.word	0x08008ec9
 8008ec4:	08008f35 	.word	0x08008f35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ec8:	78fb      	ldrb	r3, [r7, #3]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f240 439d 	movw	r3, #1181	; 0x49d
 8008eda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008edc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	da10      	bge.n	8008f06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	78fa      	ldrb	r2, [r7, #3]
 8008ef4:	0151      	lsls	r1, r2, #5
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	440a      	add	r2, r1
 8008efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f02:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008f04:	e057      	b.n	8008fb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d051      	beq.n	8008fb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	78fa      	ldrb	r2, [r7, #3]
 8008f22:	0151      	lsls	r1, r2, #5
 8008f24:	693a      	ldr	r2, [r7, #16]
 8008f26:	440a      	add	r2, r1
 8008f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f30:	60d3      	str	r3, [r2, #12]
      break;
 8008f32:	e040      	b.n	8008fb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f40:	461a      	mov	r2, r3
 8008f42:	f240 639d 	movw	r3, #1693	; 0x69d
 8008f46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	da34      	bge.n	8008fba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f70:	e023      	b.n	8008fba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f72:	78fb      	ldrb	r3, [r7, #3]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f240 2325 	movw	r3, #549	; 0x225
 8008f84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da17      	bge.n	8008fbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	0151      	lsls	r1, r2, #5
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	440a      	add	r2, r1
 8008fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008fac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008fae:	e006      	b.n	8008fbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	77fb      	strb	r3, [r7, #31]
      break;
 8008fb4:	e004      	b.n	8008fc0 <USB_HC_Init+0x14c>
      break;
 8008fb6:	bf00      	nop
 8008fb8:	e002      	b.n	8008fc0 <USB_HC_Init+0x14c>
      break;
 8008fba:	bf00      	nop
 8008fbc:	e000      	b.n	8008fc0 <USB_HC_Init+0x14c>
      break;
 8008fbe:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	015a      	lsls	r2, r3, #5
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	0151      	lsls	r1, r2, #5
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	440a      	add	r2, r1
 8008fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fda:	f043 0302 	orr.w	r3, r3, #2
 8008fde:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	78fb      	ldrb	r3, [r7, #3]
 8008fea:	f003 030f 	and.w	r3, r3, #15
 8008fee:	2101      	movs	r1, #1
 8008ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ff4:	6939      	ldr	r1, [r7, #16]
 8008ff6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800900a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800900e:	2b00      	cmp	r3, #0
 8009010:	da03      	bge.n	800901a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009016:	61bb      	str	r3, [r7, #24]
 8009018:	e001      	b.n	800901e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff feff 	bl	8008e22 <USB_GetHostSpeed>
 8009024:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800902a:	2b02      	cmp	r3, #2
 800902c:	d106      	bne.n	800903c <USB_HC_Init+0x1c8>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d003      	beq.n	800903c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009038:	617b      	str	r3, [r7, #20]
 800903a:	e001      	b.n	8009040 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009040:	787b      	ldrb	r3, [r7, #1]
 8009042:	059b      	lsls	r3, r3, #22
 8009044:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009048:	78bb      	ldrb	r3, [r7, #2]
 800904a:	02db      	lsls	r3, r3, #11
 800904c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009050:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009056:	049b      	lsls	r3, r3, #18
 8009058:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800905c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800905e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009060:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009064:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	0159      	lsls	r1, r3, #5
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	440b      	add	r3, r1
 8009072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009076:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800907c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800907e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009082:	2b03      	cmp	r3, #3
 8009084:	d003      	beq.n	800908e <USB_HC_Init+0x21a>
 8009086:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800908a:	2b01      	cmp	r3, #1
 800908c:	d10f      	bne.n	80090ae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	4413      	add	r3, r2
 8009096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80090ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3720      	adds	r7, #32
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08c      	sub	sp, #48	; 0x30
 80090bc:	af02      	add	r7, sp, #8
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	4613      	mov	r3, r2
 80090c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80090d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090d4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d02d      	beq.n	800913e <USB_HC_StartXfer+0x86>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	791b      	ldrb	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d129      	bne.n	800913e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d117      	bne.n	8009120 <USB_HC_StartXfer+0x68>
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	79db      	ldrb	r3, [r3, #7]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <USB_HC_StartXfer+0x48>
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	79db      	ldrb	r3, [r3, #7]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d10f      	bne.n	8009120 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	015a      	lsls	r2, r3, #5
 8009104:	6a3b      	ldr	r3, [r7, #32]
 8009106:	4413      	add	r3, r2
 8009108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	0151      	lsls	r1, r2, #5
 8009112:	6a3a      	ldr	r2, [r7, #32]
 8009114:	440a      	add	r2, r1
 8009116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800911a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10b      	bne.n	800913e <USB_HC_StartXfer+0x86>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	795b      	ldrb	r3, [r3, #5]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d107      	bne.n	800913e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	4619      	mov	r1, r3
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fa0f 	bl	8009558 <USB_DoPing>
      return HAL_OK;
 800913a:	2300      	movs	r3, #0
 800913c:	e0f8      	b.n	8009330 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d018      	beq.n	8009178 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	8912      	ldrh	r2, [r2, #8]
 800914e:	4413      	add	r3, r2
 8009150:	3b01      	subs	r3, #1
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	8912      	ldrh	r2, [r2, #8]
 8009156:	fbb3 f3f2 	udiv	r3, r3, r2
 800915a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800915c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800915e:	8b7b      	ldrh	r3, [r7, #26]
 8009160:	429a      	cmp	r2, r3
 8009162:	d90b      	bls.n	800917c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009164:	8b7b      	ldrh	r3, [r7, #26]
 8009166:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009168:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	8912      	ldrh	r2, [r2, #8]
 800916e:	fb03 f202 	mul.w	r2, r3, r2
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	611a      	str	r2, [r3, #16]
 8009176:	e001      	b.n	800917c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8009178:	2301      	movs	r3, #1
 800917a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	78db      	ldrb	r3, [r3, #3]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d007      	beq.n	8009194 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	8912      	ldrh	r2, [r2, #8]
 800918a:	fb03 f202 	mul.w	r2, r3, r2
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	611a      	str	r2, [r3, #16]
 8009192:	e003      	b.n	800919c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	695a      	ldr	r2, [r3, #20]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091a6:	04d9      	lsls	r1, r3, #19
 80091a8:	4b63      	ldr	r3, [pc, #396]	; (8009338 <USB_HC_StartXfer+0x280>)
 80091aa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091ac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	7a9b      	ldrb	r3, [r3, #10]
 80091b2:	075b      	lsls	r3, r3, #29
 80091b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	0148      	lsls	r0, r1, #5
 80091bc:	6a39      	ldr	r1, [r7, #32]
 80091be:	4401      	add	r1, r0
 80091c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091c4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80091c6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d009      	beq.n	80091e2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	68d9      	ldr	r1, [r3, #12]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	6a3b      	ldr	r3, [r7, #32]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091de:	460a      	mov	r2, r1
 80091e0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	bf0c      	ite	eq
 80091f2:	2301      	moveq	r3, #1
 80091f4:	2300      	movne	r3, #0
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	6a3b      	ldr	r3, [r7, #32]
 8009200:	4413      	add	r3, r2
 8009202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	6a3a      	ldr	r2, [r7, #32]
 800920e:	440a      	add	r2, r1
 8009210:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009214:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009218:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	4413      	add	r3, r2
 8009222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	7e7b      	ldrb	r3, [r7, #25]
 800922a:	075b      	lsls	r3, r3, #29
 800922c:	69f9      	ldr	r1, [r7, #28]
 800922e:	0148      	lsls	r0, r1, #5
 8009230:	6a39      	ldr	r1, [r7, #32]
 8009232:	4401      	add	r1, r0
 8009234:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009238:	4313      	orrs	r3, r2
 800923a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	4413      	add	r3, r2
 8009244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009252:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009262:	613b      	str	r3, [r7, #16]
 8009264:	e003      	b.n	800926e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800926c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009274:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	4413      	add	r3, r2
 800927e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009282:	461a      	mov	r2, r3
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	e04e      	b.n	8009330 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	78db      	ldrb	r3, [r3, #3]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d149      	bne.n	800932e <USB_HC_StartXfer+0x276>
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d045      	beq.n	800932e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	79db      	ldrb	r3, [r3, #7]
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d830      	bhi.n	800930c <USB_HC_StartXfer+0x254>
 80092aa:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <USB_HC_StartXfer+0x1f8>)
 80092ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b0:	080092c1 	.word	0x080092c1
 80092b4:	080092e5 	.word	0x080092e5
 80092b8:	080092c1 	.word	0x080092c1
 80092bc:	080092e5 	.word	0x080092e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	3303      	adds	r3, #3
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80092ca:	8afa      	ldrh	r2, [r7, #22]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d91c      	bls.n	8009310 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	f043 0220 	orr.w	r2, r3, #32
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80092e2:	e015      	b.n	8009310 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	3303      	adds	r3, #3
 80092ea:	089b      	lsrs	r3, r3, #2
 80092ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80092ee:	8afa      	ldrh	r2, [r7, #22]
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d90a      	bls.n	8009314 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	619a      	str	r2, [r3, #24]
        }
        break;
 800930a:	e003      	b.n	8009314 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800930c:	bf00      	nop
 800930e:	e002      	b.n	8009316 <USB_HC_StartXfer+0x25e>
        break;
 8009310:	bf00      	nop
 8009312:	e000      	b.n	8009316 <USB_HC_StartXfer+0x25e>
        break;
 8009314:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68d9      	ldr	r1, [r3, #12]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	785a      	ldrb	r2, [r3, #1]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	b29b      	uxth	r3, r3
 8009324:	2000      	movs	r0, #0
 8009326:	9000      	str	r0, [sp, #0]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff fb31 	bl	8008990 <USB_WritePacket>
  }

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3728      	adds	r7, #40	; 0x28
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	1ff80000 	.word	0x1ff80000

0800933c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	b29b      	uxth	r3, r3
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800935e:	b480      	push	{r7}
 8009360:	b089      	sub	sp, #36	; 0x24
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	460b      	mov	r3, r1
 8009368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800936e:	78fb      	ldrb	r3, [r7, #3]
 8009370:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	015a      	lsls	r2, r3, #5
 800937a:	69fb      	ldr	r3, [r7, #28]
 800937c:	4413      	add	r3, r2
 800937e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	0c9b      	lsrs	r3, r3, #18
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	0fdb      	lsrs	r3, r3, #31
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f003 0320 	and.w	r3, r3, #32
 80093aa:	2b20      	cmp	r3, #32
 80093ac:	d104      	bne.n	80093b8 <USB_HC_Halt+0x5a>
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	e0c8      	b.n	800954a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <USB_HC_Halt+0x66>
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d163      	bne.n	800948c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	0151      	lsls	r1, r2, #5
 80093d6:	69fa      	ldr	r2, [r7, #28]
 80093d8:	440a      	add	r2, r1
 80093da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80093e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f040 80ab 	bne.w	8009548 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d133      	bne.n	8009466 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	015a      	lsls	r2, r3, #5
 8009402:	69fb      	ldr	r3, [r7, #28]
 8009404:	4413      	add	r3, r2
 8009406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	0151      	lsls	r1, r2, #5
 8009410:	69fa      	ldr	r2, [r7, #28]
 8009412:	440a      	add	r2, r1
 8009414:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009418:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800941c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	69fa      	ldr	r2, [r7, #28]
 8009432:	440a      	add	r2, r1
 8009434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800943c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800944a:	d81d      	bhi.n	8009488 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	4413      	add	r3, r2
 8009454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800945e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009462:	d0ec      	beq.n	800943e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009464:	e070      	b.n	8009548 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	4413      	add	r3, r2
 800946e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	69fa      	ldr	r2, [r7, #28]
 800947a:	440a      	add	r2, r1
 800947c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009484:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009486:	e05f      	b.n	8009548 <USB_HC_Halt+0x1ea>
            break;
 8009488:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800948a:	e05d      	b.n	8009548 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d133      	bne.n	8009524 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	69fa      	ldr	r2, [r7, #28]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3301      	adds	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009508:	d81d      	bhi.n	8009546 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800951c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009520:	d0ec      	beq.n	80094fc <USB_HC_Halt+0x19e>
 8009522:	e011      	b.n	8009548 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	4413      	add	r3, r2
 800952c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	69ba      	ldr	r2, [r7, #24]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	440a      	add	r2, r1
 800953a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800953e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009542:	6013      	str	r3, [r2, #0]
 8009544:	e000      	b.n	8009548 <USB_HC_Halt+0x1ea>
          break;
 8009546:	bf00      	nop
    }
  }

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3724      	adds	r7, #36	; 0x24
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800956c:	2301      	movs	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	04da      	lsls	r2, r3, #19
 8009574:	4b15      	ldr	r3, [pc, #84]	; (80095cc <USB_DoPing+0x74>)
 8009576:	4013      	ands	r3, r2
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	440a      	add	r2, r1
 8009580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009584:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009588:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	015a      	lsls	r2, r3, #5
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	4413      	add	r3, r2
 8009592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	015a      	lsls	r2, r3, #5
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	4413      	add	r3, r2
 80095b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b6:	461a      	mov	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	1ff80000 	.word	0x1ff80000

080095d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f7ff f911 	bl	800880c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095ea:	2110      	movs	r1, #16
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff f96b 	bl	80088c8 <USB_FlushTxFifo>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff f997 	bl	8008930 <USB_FlushRxFifo>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800960c:	2300      	movs	r3, #0
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	e01f      	b.n	8009652 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	4413      	add	r3, r2
 800961a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009628:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009630:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009638:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	4413      	add	r3, r2
 8009642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009646:	461a      	mov	r2, r3
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	3301      	adds	r3, #1
 8009650:	61bb      	str	r3, [r7, #24]
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b0f      	cmp	r3, #15
 8009656:	d9dc      	bls.n	8009612 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009658:	2300      	movs	r3, #0
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	e034      	b.n	80096c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	015a      	lsls	r2, r3, #5
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	4413      	add	r3, r2
 8009666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009674:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800967c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009684:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009692:	461a      	mov	r2, r3
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a4:	d80c      	bhi.n	80096c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096bc:	d0ec      	beq.n	8009698 <USB_StopHost+0xc8>
 80096be:	e000      	b.n	80096c2 <USB_StopHost+0xf2>
        break;
 80096c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	3301      	adds	r3, #1
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	2b0f      	cmp	r3, #15
 80096cc:	d9c7      	bls.n	800965e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096d4:	461a      	mov	r2, r3
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff f880 	bl	80087ea <USB_EnableGlobalInt>

  return ret;
 80096ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3720      	adds	r7, #32
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80096f8:	4904      	ldr	r1, [pc, #16]	; (800970c <MX_FATFS_Init+0x18>)
 80096fa:	4805      	ldr	r0, [pc, #20]	; (8009710 <MX_FATFS_Init+0x1c>)
 80096fc:	f003 f95e 	bl	800c9bc <FATFS_LinkDriver>
 8009700:	4603      	mov	r3, r0
 8009702:	461a      	mov	r2, r3
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <MX_FATFS_Init+0x20>)
 8009706:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009708:	bf00      	nop
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000494 	.word	0x20000494
 8009710:	0800e73c 	.word	0x0800e73c
 8009714:	20000490 	.word	0x20000490

08009718 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	4619      	mov	r1, r3
 8009742:	4808      	ldr	r0, [pc, #32]	; (8009764 <USBH_status+0x34>)
 8009744:	f000 fe32 	bl	800a3ac <USBH_MSC_UnitIsReady>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <USBH_status+0x24>
  {
    res = RES_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	73fb      	strb	r3, [r7, #15]
 8009752:	e001      	b.n	8009758 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200004a4 	.word	0x200004a4

08009768 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b094      	sub	sp, #80	; 0x50
 800976c:	af02      	add	r7, sp, #8
 800976e:	60b9      	str	r1, [r7, #8]
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800977e:	7bf9      	ldrb	r1, [r7, #15]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	4813      	ldr	r0, [pc, #76]	; (80097d8 <USBH_read+0x70>)
 800978a:	f000 fe59 	bl	800a440 <USBH_MSC_Read>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d103      	bne.n	800979c <USBH_read+0x34>
  {
    res = RES_OK;
 8009794:	2300      	movs	r3, #0
 8009796:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800979a:	e017      	b.n	80097cc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800979c:	f107 0210 	add.w	r2, r7, #16
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	4619      	mov	r1, r3
 80097a4:	480c      	ldr	r0, [pc, #48]	; (80097d8 <USBH_read+0x70>)
 80097a6:	f000 fe27 	bl	800a3f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80097aa:	7f7b      	ldrb	r3, [r7, #29]
 80097ac:	2b3a      	cmp	r3, #58	; 0x3a
 80097ae:	d005      	beq.n	80097bc <USBH_read+0x54>
 80097b0:	2b3a      	cmp	r3, #58	; 0x3a
 80097b2:	dc07      	bgt.n	80097c4 <USBH_read+0x5c>
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d001      	beq.n	80097bc <USBH_read+0x54>
 80097b8:	2b28      	cmp	r3, #40	; 0x28
 80097ba:	d103      	bne.n	80097c4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80097bc:	2303      	movs	r3, #3
 80097be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097c2:	e003      	b.n	80097cc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80097ca:	bf00      	nop
    }
  }

  return res;
 80097cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3748      	adds	r7, #72	; 0x48
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200004a4 	.word	0x200004a4

080097dc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b094      	sub	sp, #80	; 0x50
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80097f2:	7bf9      	ldrb	r1, [r7, #15]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	4817      	ldr	r0, [pc, #92]	; (800985c <USBH_write+0x80>)
 80097fe:	f000 fe88 	bl	800a512 <USBH_MSC_Write>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <USBH_write+0x34>
  {
    res = RES_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800980e:	e01f      	b.n	8009850 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009810:	f107 0210 	add.w	r2, r7, #16
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4619      	mov	r1, r3
 8009818:	4810      	ldr	r0, [pc, #64]	; (800985c <USBH_write+0x80>)
 800981a:	f000 fded 	bl	800a3f8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800981e:	7f7b      	ldrb	r3, [r7, #29]
 8009820:	2b3a      	cmp	r3, #58	; 0x3a
 8009822:	d00d      	beq.n	8009840 <USBH_write+0x64>
 8009824:	2b3a      	cmp	r3, #58	; 0x3a
 8009826:	dc0f      	bgt.n	8009848 <USBH_write+0x6c>
 8009828:	2b28      	cmp	r3, #40	; 0x28
 800982a:	d009      	beq.n	8009840 <USBH_write+0x64>
 800982c:	2b28      	cmp	r3, #40	; 0x28
 800982e:	dc0b      	bgt.n	8009848 <USBH_write+0x6c>
 8009830:	2b04      	cmp	r3, #4
 8009832:	d005      	beq.n	8009840 <USBH_write+0x64>
 8009834:	2b27      	cmp	r3, #39	; 0x27
 8009836:	d107      	bne.n	8009848 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009838:	2302      	movs	r3, #2
 800983a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800983e:	e007      	b.n	8009850 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009840:	2303      	movs	r3, #3
 8009842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009846:	e003      	b.n	8009850 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800984e:	bf00      	nop
    }
  }

  return res;
 8009850:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009854:	4618      	mov	r0, r3
 8009856:	3748      	adds	r7, #72	; 0x48
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	200004a4 	.word	0x200004a4

08009860 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b090      	sub	sp, #64	; 0x40
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	603a      	str	r2, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
 800986c:	460b      	mov	r3, r1
 800986e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009876:	79bb      	ldrb	r3, [r7, #6]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d852      	bhi.n	8009922 <USBH_ioctl+0xc2>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <USBH_ioctl+0x24>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	08009895 	.word	0x08009895
 8009888:	0800989d 	.word	0x0800989d
 800988c:	080098c7 	.word	0x080098c7
 8009890:	080098f3 	.word	0x080098f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800989a:	e045      	b.n	8009928 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800989c:	f107 0208 	add.w	r2, r7, #8
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	4619      	mov	r1, r3
 80098a4:	4823      	ldr	r0, [pc, #140]	; (8009934 <USBH_ioctl+0xd4>)
 80098a6:	f000 fda7 	bl	800a3f8 <USBH_MSC_GetLUNInfo>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80098bc:	e034      	b.n	8009928 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098c4:	e030      	b.n	8009928 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098c6:	f107 0208 	add.w	r2, r7, #8
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	4619      	mov	r1, r3
 80098ce:	4819      	ldr	r0, [pc, #100]	; (8009934 <USBH_ioctl+0xd4>)
 80098d0:	f000 fd92 	bl	800a3f8 <USBH_MSC_GetLUNInfo>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d107      	bne.n	80098ea <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80098da:	8a3b      	ldrh	r3, [r7, #16]
 80098dc:	461a      	mov	r2, r3
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80098e8:	e01e      	b.n	8009928 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098f0:	e01a      	b.n	8009928 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098f2:	f107 0208 	add.w	r2, r7, #8
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	4619      	mov	r1, r3
 80098fa:	480e      	ldr	r0, [pc, #56]	; (8009934 <USBH_ioctl+0xd4>)
 80098fc:	f000 fd7c 	bl	800a3f8 <USBH_MSC_GetLUNInfo>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d109      	bne.n	800991a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009906:	8a3b      	ldrh	r3, [r7, #16]
 8009908:	0a5b      	lsrs	r3, r3, #9
 800990a:	b29b      	uxth	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009918:	e006      	b.n	8009928 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009920:	e002      	b.n	8009928 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009922:	2304      	movs	r3, #4
 8009924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800992c:	4618      	mov	r0, r3
 800992e:	3740      	adds	r7, #64	; 0x40
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	200004a4 	.word	0x200004a4

08009938 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b089      	sub	sp, #36	; 0x24
 800993c:	af04      	add	r7, sp, #16
 800993e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009946:	7919      	ldrb	r1, [r3, #4]
 8009948:	2350      	movs	r3, #80	; 0x50
 800994a:	2206      	movs	r2, #6
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fc6b 	bl	800b228 <USBH_FindInterface>
 8009952:	4603      	mov	r3, r0
 8009954:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2bff      	cmp	r3, #255	; 0xff
 800995a:	d002      	beq.n	8009962 <USBH_MSC_InterfaceInit+0x2a>
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d901      	bls.n	8009966 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009962:	2302      	movs	r3, #2
 8009964:	e106      	b.n	8009b74 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 fc40 	bl	800b1f0 <USBH_SelectInterface>
 8009970:	4603      	mov	r3, r0
 8009972:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009974:	7bbb      	ldrb	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800997a:	2302      	movs	r3, #2
 800997c:	e0fa      	b.n	8009b74 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009984:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009988:	f003 fb94 	bl	800d0b4 <malloc>
 800998c:	4603      	mov	r3, r0
 800998e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80099a0:	2302      	movs	r3, #2
 80099a2:	e0e7      	b.n	8009b74 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80099a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099a8:	2100      	movs	r1, #0
 80099aa:	68b8      	ldr	r0, [r7, #8]
 80099ac:	f003 fba0 	bl	800d0f0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80099b0:	7bfb      	ldrb	r3, [r7, #15]
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	211a      	movs	r1, #26
 80099b6:	fb01 f303 	mul.w	r3, r1, r3
 80099ba:	4413      	add	r3, r2
 80099bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	b25b      	sxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	da16      	bge.n	80099f6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	211a      	movs	r1, #26
 80099ce:	fb01 f303 	mul.w	r3, r1, r3
 80099d2:	4413      	add	r3, r2
 80099d4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80099d8:	781a      	ldrb	r2, [r3, #0]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	211a      	movs	r1, #26
 80099e4:	fb01 f303 	mul.w	r3, r1, r3
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80099ee:	881a      	ldrh	r2, [r3, #0]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	815a      	strh	r2, [r3, #10]
 80099f4:	e015      	b.n	8009a22 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	211a      	movs	r1, #26
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	4413      	add	r3, r2
 8009a02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a06:	781a      	ldrb	r2, [r3, #0]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	211a      	movs	r1, #26
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a1c:	881a      	ldrh	r2, [r3, #0]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	211a      	movs	r1, #26
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	b25b      	sxtb	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	da16      	bge.n	8009a68 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	211a      	movs	r1, #26
 8009a40:	fb01 f303 	mul.w	r3, r1, r3
 8009a44:	4413      	add	r3, r2
 8009a46:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a4a:	781a      	ldrb	r2, [r3, #0]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	211a      	movs	r1, #26
 8009a56:	fb01 f303 	mul.w	r3, r1, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009a60:	881a      	ldrh	r2, [r3, #0]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	815a      	strh	r2, [r3, #10]
 8009a66:	e015      	b.n	8009a94 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	211a      	movs	r1, #26
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	211a      	movs	r1, #26
 8009a84:	fb01 f303 	mul.w	r3, r1, r3
 8009a88:	4413      	add	r3, r2
 8009a8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009a8e:	881a      	ldrh	r2, [r3, #0]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2200      	movs	r2, #0
 8009a98:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	799b      	ldrb	r3, [r3, #6]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f002 fed6 	bl	800c85e <USBH_AllocPipe>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	79db      	ldrb	r3, [r3, #7]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f002 fecc 	bl	800c85e <USBH_AllocPipe>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	461a      	mov	r2, r3
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fdc4 	bl	800a65c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	799b      	ldrb	r3, [r3, #6]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01e      	beq.n	8009b1a <USBH_MSC_InterfaceInit+0x1e2>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	891b      	ldrh	r3, [r3, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d01a      	beq.n	8009b1a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	7959      	ldrb	r1, [r3, #5]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	7998      	ldrb	r0, [r3, #6]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	8912      	ldrh	r2, [r2, #8]
 8009afc:	9202      	str	r2, [sp, #8]
 8009afe:	2202      	movs	r2, #2
 8009b00:	9201      	str	r2, [sp, #4]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	4623      	mov	r3, r4
 8009b06:	4602      	mov	r2, r0
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f002 fe79 	bl	800c800 <USBH_OpenPipe>
 8009b0e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	79db      	ldrb	r3, [r3, #7]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d02c      	beq.n	8009b72 <USBH_MSC_InterfaceInit+0x23a>
 8009b18:	e001      	b.n	8009b1e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e02a      	b.n	8009b74 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	895b      	ldrh	r3, [r3, #10]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d025      	beq.n	8009b72 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	7919      	ldrb	r1, [r3, #4]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	79d8      	ldrb	r0, [r3, #7]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	8952      	ldrh	r2, [r2, #10]
 8009b3e:	9202      	str	r2, [sp, #8]
 8009b40:	2202      	movs	r2, #2
 8009b42:	9201      	str	r2, [sp, #4]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4623      	mov	r3, r4
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f002 fe58 	bl	800c800 <USBH_OpenPipe>
 8009b50:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f003 f9c8 	bl	800cef0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	795b      	ldrb	r3, [r3, #5]
 8009b64:	2200      	movs	r2, #0
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f003 f9c1 	bl	800cef0 <USBH_LL_SetToggle>

  return USBH_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e000      	b.n	8009b74 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8009b72:	2303      	movs	r3, #3
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd90      	pop	{r4, r7, pc}

08009b7c <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b8a:	69db      	ldr	r3, [r3, #28]
 8009b8c:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	795b      	ldrb	r3, [r3, #5]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00e      	beq.n	8009bb4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	795b      	ldrb	r3, [r3, #5]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f002 fe4e 	bl	800c83e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	795b      	ldrb	r3, [r3, #5]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f002 fe79 	bl	800c8a0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	791b      	ldrb	r3, [r3, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00e      	beq.n	8009bda <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	791b      	ldrb	r3, [r3, #4]
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f002 fe3b 	bl	800c83e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	4619      	mov	r1, r3
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f002 fe66 	bl	800c8a0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009be0:	69db      	ldr	r3, [r3, #28]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f003 fa68 	bl	800d0c4 <free>
    phost->pActiveClass->pData = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c16:	69db      	ldr	r3, [r3, #28]
 8009c18:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	7b9b      	ldrb	r3, [r3, #14]
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d041      	beq.n	8009caa <USBH_MSC_ClassRequest+0xa2>
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	dc4b      	bgt.n	8009cc2 <USBH_MSC_ClassRequest+0xba>
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <USBH_MSC_ClassRequest+0x2a>
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	d147      	bne.n	8009cc2 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fcf1 	bl	800a61e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009c40:	7bfb      	ldrb	r3, [r7, #15]
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d104      	bne.n	8009c50 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d137      	bne.n	8009cc6 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d804      	bhi.n	8009c68 <USBH_MSC_ClassRequest+0x60>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	e000      	b.n	8009c6a <USBH_MSC_ClassRequest+0x62>
 8009c68:	2202      	movs	r2, #2
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73bb      	strb	r3, [r7, #14]
 8009c72:	e014      	b.n	8009c9e <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	2134      	movs	r1, #52	; 0x34
 8009c7a:	fb01 f303 	mul.w	r3, r1, r3
 8009c7e:	4413      	add	r3, r2
 8009c80:	3392      	adds	r3, #146	; 0x92
 8009c82:	2202      	movs	r2, #2
 8009c84:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	2134      	movs	r1, #52	; 0x34
 8009c8c:	fb01 f303 	mul.w	r3, r1, r3
 8009c90:	4413      	add	r3, r2
 8009c92:	33c1      	adds	r3, #193	; 0xc1
 8009c94:	2200      	movs	r2, #0
 8009c96:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	73bb      	strb	r3, [r7, #14]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	7bba      	ldrb	r2, [r7, #14]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d3e5      	bcc.n	8009c74 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8009ca8:	e00d      	b.n	8009cc6 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009caa:	2100      	movs	r1, #0
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f002 f888 	bl	800bdc2 <USBH_ClrFeature>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d108      	bne.n	8009cca <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	7bda      	ldrb	r2, [r3, #15]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	739a      	strb	r2, [r3, #14]
      }
      break;
 8009cc0:	e003      	b.n	8009cca <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <USBH_MSC_ClassRequest+0xc4>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <USBH_MSC_ClassRequest+0xc4>
      break;
 8009cca:	bf00      	nop
  }

  return status;
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009cea:	2301      	movs	r3, #1
 8009cec:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	7b1b      	ldrb	r3, [r3, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <USBH_MSC_Process+0x2e>
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	f000 8271 	beq.w	800a1e6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009d04:	e272      	b.n	800a1ec <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	429a      	cmp	r2, r3
 8009d14:	f080 824f 	bcs.w	800a1b6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d1e:	4619      	mov	r1, r3
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	2334      	movs	r3, #52	; 0x34
 8009d24:	fb01 f303 	mul.w	r3, r1, r3
 8009d28:	4413      	add	r3, r2
 8009d2a:	3391      	adds	r3, #145	; 0x91
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d36:	4619      	mov	r1, r3
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	2334      	movs	r3, #52	; 0x34
 8009d3c:	fb01 f303 	mul.w	r3, r1, r3
 8009d40:	4413      	add	r3, r2
 8009d42:	3390      	adds	r3, #144	; 0x90
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b08      	cmp	r3, #8
 8009d48:	f200 8243 	bhi.w	800a1d2 <USBH_MSC_Process+0x4fa>
 8009d4c:	a201      	add	r2, pc, #4	; (adr r2, 8009d54 <USBH_MSC_Process+0x7c>)
 8009d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d52:	bf00      	nop
 8009d54:	08009d79 	.word	0x08009d79
 8009d58:	0800a1d3 	.word	0x0800a1d3
 8009d5c:	08009e41 	.word	0x08009e41
 8009d60:	08009fc5 	.word	0x08009fc5
 8009d64:	08009d9f 	.word	0x08009d9f
 8009d68:	0800a091 	.word	0x0800a091
 8009d6c:	0800a1d3 	.word	0x0800a1d3
 8009d70:	0800a1d3 	.word	0x0800a1d3
 8009d74:	0800a1a5 	.word	0x0800a1a5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d7e:	4619      	mov	r1, r3
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	2334      	movs	r3, #52	; 0x34
 8009d84:	fb01 f303 	mul.w	r3, r1, r3
 8009d88:	4413      	add	r3, r2
 8009d8a:	3390      	adds	r3, #144	; 0x90
 8009d8c:	2204      	movs	r2, #4
 8009d8e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009d9c:	e222      	b.n	800a1e4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009da4:	b2d9      	uxtb	r1, r3
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dac:	461a      	mov	r2, r3
 8009dae:	2334      	movs	r3, #52	; 0x34
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	3398      	adds	r3, #152	; 0x98
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4413      	add	r3, r2
 8009dba:	3307      	adds	r3, #7
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 ff6a 	bl	800ac98 <USBH_MSC_SCSI_Inquiry>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10b      	bne.n	8009de6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	2334      	movs	r3, #52	; 0x34
 8009dda:	fb01 f303 	mul.w	r3, r1, r3
 8009dde:	4413      	add	r3, r2
 8009de0:	3390      	adds	r3, #144	; 0x90
 8009de2:	2202      	movs	r2, #2
 8009de4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d10c      	bne.n	8009e06 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009df2:	4619      	mov	r1, r3
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	2334      	movs	r3, #52	; 0x34
 8009df8:	fb01 f303 	mul.w	r3, r1, r3
 8009dfc:	4413      	add	r3, r2
 8009dfe:	3390      	adds	r3, #144	; 0x90
 8009e00:	2205      	movs	r2, #5
 8009e02:	701a      	strb	r2, [r3, #0]
            break;
 8009e04:	e1e7      	b.n	800a1d6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	f040 81e4 	bne.w	800a1d6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e14:	4619      	mov	r1, r3
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	2334      	movs	r3, #52	; 0x34
 8009e1a:	fb01 f303 	mul.w	r3, r1, r3
 8009e1e:	4413      	add	r3, r2
 8009e20:	3390      	adds	r3, #144	; 0x90
 8009e22:	2201      	movs	r2, #1
 8009e24:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	2334      	movs	r3, #52	; 0x34
 8009e32:	fb01 f303 	mul.w	r3, r1, r3
 8009e36:	4413      	add	r3, r2
 8009e38:	3391      	adds	r3, #145	; 0x91
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	701a      	strb	r2, [r3, #0]
            break;
 8009e3e:	e1ca      	b.n	800a1d6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fe66 	bl	800ab1c <USBH_MSC_SCSI_TestUnitReady>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d149      	bne.n	8009eee <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e60:	4619      	mov	r1, r3
 8009e62:	693a      	ldr	r2, [r7, #16]
 8009e64:	2334      	movs	r3, #52	; 0x34
 8009e66:	fb01 f303 	mul.w	r3, r1, r3
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3392      	adds	r3, #146	; 0x92
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00c      	beq.n	8009e8e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	2334      	movs	r3, #52	; 0x34
 8009e80:	fb01 f303 	mul.w	r3, r1, r3
 8009e84:	4413      	add	r3, r2
 8009e86:	33c1      	adds	r3, #193	; 0xc1
 8009e88:	2201      	movs	r2, #1
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	e00b      	b.n	8009ea6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e94:	4619      	mov	r1, r3
 8009e96:	693a      	ldr	r2, [r7, #16]
 8009e98:	2334      	movs	r3, #52	; 0x34
 8009e9a:	fb01 f303 	mul.w	r3, r1, r3
 8009e9e:	4413      	add	r3, r2
 8009ea0:	33c1      	adds	r3, #193	; 0xc1
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eac:	4619      	mov	r1, r3
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	2334      	movs	r3, #52	; 0x34
 8009eb2:	fb01 f303 	mul.w	r3, r1, r3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	3390      	adds	r3, #144	; 0x90
 8009eba:	2203      	movs	r2, #3
 8009ebc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	2334      	movs	r3, #52	; 0x34
 8009eca:	fb01 f303 	mul.w	r3, r1, r3
 8009ece:	4413      	add	r3, r2
 8009ed0:	3391      	adds	r3, #145	; 0x91
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009edc:	4619      	mov	r1, r3
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	2334      	movs	r3, #52	; 0x34
 8009ee2:	fb01 f303 	mul.w	r3, r1, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3392      	adds	r3, #146	; 0x92
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d14a      	bne.n	8009f8a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009efa:	4619      	mov	r1, r3
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	2334      	movs	r3, #52	; 0x34
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	4413      	add	r3, r2
 8009f06:	3392      	adds	r3, #146	; 0x92
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d00c      	beq.n	8009f28 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f14:	4619      	mov	r1, r3
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	2334      	movs	r3, #52	; 0x34
 8009f1a:	fb01 f303 	mul.w	r3, r1, r3
 8009f1e:	4413      	add	r3, r2
 8009f20:	33c1      	adds	r3, #193	; 0xc1
 8009f22:	2201      	movs	r2, #1
 8009f24:	701a      	strb	r2, [r3, #0]
 8009f26:	e00b      	b.n	8009f40 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f2e:	4619      	mov	r1, r3
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	2334      	movs	r3, #52	; 0x34
 8009f34:	fb01 f303 	mul.w	r3, r1, r3
 8009f38:	4413      	add	r3, r2
 8009f3a:	33c1      	adds	r3, #193	; 0xc1
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f46:	4619      	mov	r1, r3
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	2334      	movs	r3, #52	; 0x34
 8009f4c:	fb01 f303 	mul.w	r3, r1, r3
 8009f50:	4413      	add	r3, r2
 8009f52:	3390      	adds	r3, #144	; 0x90
 8009f54:	2205      	movs	r2, #5
 8009f56:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f5e:	4619      	mov	r1, r3
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	2334      	movs	r3, #52	; 0x34
 8009f64:	fb01 f303 	mul.w	r3, r1, r3
 8009f68:	4413      	add	r3, r2
 8009f6a:	3391      	adds	r3, #145	; 0x91
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f76:	4619      	mov	r1, r3
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	2334      	movs	r3, #52	; 0x34
 8009f7c:	fb01 f303 	mul.w	r3, r1, r3
 8009f80:	4413      	add	r3, r2
 8009f82:	3392      	adds	r3, #146	; 0x92
 8009f84:	2202      	movs	r2, #2
 8009f86:	701a      	strb	r2, [r3, #0]
            break;
 8009f88:	e127      	b.n	800a1da <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009f8a:	7bbb      	ldrb	r3, [r7, #14]
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	f040 8124 	bne.w	800a1da <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f98:	4619      	mov	r1, r3
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	2334      	movs	r3, #52	; 0x34
 8009f9e:	fb01 f303 	mul.w	r3, r1, r3
 8009fa2:	4413      	add	r3, r2
 8009fa4:	3390      	adds	r3, #144	; 0x90
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	2334      	movs	r3, #52	; 0x34
 8009fb6:	fb01 f303 	mul.w	r3, r1, r3
 8009fba:	4413      	add	r3, r2
 8009fbc:	3391      	adds	r3, #145	; 0x91
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	701a      	strb	r2, [r3, #0]
            break;
 8009fc2:	e10a      	b.n	800a1da <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fca:	b2d9      	uxtb	r1, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	2334      	movs	r3, #52	; 0x34
 8009fd6:	fb02 f303 	mul.w	r3, r2, r3
 8009fda:	3390      	adds	r3, #144	; 0x90
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	4413      	add	r3, r2
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 fddc 	bl	800aba2 <USBH_MSC_SCSI_ReadCapacity>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d120      	bne.n	800a036 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	2334      	movs	r3, #52	; 0x34
 800a000:	fb01 f303 	mul.w	r3, r1, r3
 800a004:	4413      	add	r3, r2
 800a006:	3390      	adds	r3, #144	; 0x90
 800a008:	2201      	movs	r2, #1
 800a00a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a012:	4619      	mov	r1, r3
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	2334      	movs	r3, #52	; 0x34
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	4413      	add	r3, r2
 800a01e:	3391      	adds	r3, #145	; 0x91
 800a020:	2200      	movs	r2, #0
 800a022:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a02a:	3301      	adds	r3, #1
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a034:	e0d3      	b.n	800a1de <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d10c      	bne.n	800a056 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a042:	4619      	mov	r1, r3
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	2334      	movs	r3, #52	; 0x34
 800a048:	fb01 f303 	mul.w	r3, r1, r3
 800a04c:	4413      	add	r3, r2
 800a04e:	3390      	adds	r3, #144	; 0x90
 800a050:	2205      	movs	r2, #5
 800a052:	701a      	strb	r2, [r3, #0]
            break;
 800a054:	e0c3      	b.n	800a1de <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b04      	cmp	r3, #4
 800a05a:	f040 80c0 	bne.w	800a1de <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a064:	4619      	mov	r1, r3
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	2334      	movs	r3, #52	; 0x34
 800a06a:	fb01 f303 	mul.w	r3, r1, r3
 800a06e:	4413      	add	r3, r2
 800a070:	3390      	adds	r3, #144	; 0x90
 800a072:	2201      	movs	r2, #1
 800a074:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a07c:	4619      	mov	r1, r3
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	2334      	movs	r3, #52	; 0x34
 800a082:	fb01 f303 	mul.w	r3, r1, r3
 800a086:	4413      	add	r3, r2
 800a088:	3391      	adds	r3, #145	; 0x91
 800a08a:	2202      	movs	r2, #2
 800a08c:	701a      	strb	r2, [r3, #0]
            break;
 800a08e:	e0a6      	b.n	800a1de <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a096:	b2d9      	uxtb	r1, r3
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a09e:	461a      	mov	r2, r3
 800a0a0:	2334      	movs	r3, #52	; 0x34
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	3398      	adds	r3, #152	; 0x98
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fe96 	bl	800ade2 <USBH_MSC_SCSI_RequestSense>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d145      	bne.n	800a14c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	2334      	movs	r3, #52	; 0x34
 800a0cc:	fb01 f303 	mul.w	r3, r1, r3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	339c      	adds	r3, #156	; 0x9c
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b06      	cmp	r3, #6
 800a0d8:	d00c      	beq.n	800a0f4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	2334      	movs	r3, #52	; 0x34
 800a0e6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ea:	4413      	add	r3, r2
 800a0ec:	339c      	adds	r3, #156	; 0x9c
 800a0ee:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d117      	bne.n	800a124 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	f242 720f 	movw	r2, #9999	; 0x270f
 800a106:	4293      	cmp	r3, r2
 800a108:	d80c      	bhi.n	800a124 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a110:	4619      	mov	r1, r3
 800a112:	693a      	ldr	r2, [r7, #16]
 800a114:	2334      	movs	r3, #52	; 0x34
 800a116:	fb01 f303 	mul.w	r3, r1, r3
 800a11a:	4413      	add	r3, r2
 800a11c:	3390      	adds	r3, #144	; 0x90
 800a11e:	2202      	movs	r2, #2
 800a120:	701a      	strb	r2, [r3, #0]
                  break;
 800a122:	e05f      	b.n	800a1e4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a12a:	4619      	mov	r1, r3
 800a12c:	693a      	ldr	r2, [r7, #16]
 800a12e:	2334      	movs	r3, #52	; 0x34
 800a130:	fb01 f303 	mul.w	r3, r1, r3
 800a134:	4413      	add	r3, r2
 800a136:	3390      	adds	r3, #144	; 0x90
 800a138:	2201      	movs	r2, #1
 800a13a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a142:	3301      	adds	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d10c      	bne.n	800a16c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a158:	4619      	mov	r1, r3
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	2334      	movs	r3, #52	; 0x34
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	4413      	add	r3, r2
 800a164:	3390      	adds	r3, #144	; 0x90
 800a166:	2208      	movs	r2, #8
 800a168:	701a      	strb	r2, [r3, #0]
            break;
 800a16a:	e03a      	b.n	800a1e2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d137      	bne.n	800a1e2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a178:	4619      	mov	r1, r3
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	2334      	movs	r3, #52	; 0x34
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	4413      	add	r3, r2
 800a184:	3390      	adds	r3, #144	; 0x90
 800a186:	2201      	movs	r2, #1
 800a188:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a190:	4619      	mov	r1, r3
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	2334      	movs	r3, #52	; 0x34
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	4413      	add	r3, r2
 800a19c:	3391      	adds	r3, #145	; 0x91
 800a19e:	2202      	movs	r2, #2
 800a1a0:	701a      	strb	r2, [r3, #0]
            break;
 800a1a2:	e01e      	b.n	800a1e2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a1b4:	e016      	b.n	800a1e4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	4798      	blx	r3
      break;
 800a1d0:	e00c      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1d2:	bf00      	nop
 800a1d4:	e00a      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1d6:	bf00      	nop
 800a1d8:	e008      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1da:	bf00      	nop
 800a1dc:	e006      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1de:	bf00      	nop
 800a1e0:	e004      	b.n	800a1ec <USBH_MSC_Process+0x514>
            break;
 800a1e2:	bf00      	nop
      break;
 800a1e4:	e002      	b.n	800a1ec <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ea:	bf00      	nop
  }
  return error;
 800a1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop

0800a1f8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af02      	add	r7, sp, #8
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	460b      	mov	r3, r1
 800a218:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a224:	2301      	movs	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a228:	2301      	movs	r3, #1
 800a22a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	2134      	movs	r1, #52	; 0x34
 800a232:	fb01 f303 	mul.w	r3, r1, r3
 800a236:	4413      	add	r3, r2
 800a238:	3390      	adds	r3, #144	; 0x90
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	2b07      	cmp	r3, #7
 800a23e:	d03c      	beq.n	800a2ba <USBH_MSC_RdWrProcess+0xac>
 800a240:	2b07      	cmp	r3, #7
 800a242:	f300 80a7 	bgt.w	800a394 <USBH_MSC_RdWrProcess+0x186>
 800a246:	2b05      	cmp	r3, #5
 800a248:	d06c      	beq.n	800a324 <USBH_MSC_RdWrProcess+0x116>
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	f040 80a2 	bne.w	800a394 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a250:	78f9      	ldrb	r1, [r7, #3]
 800a252:	2300      	movs	r3, #0
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fea5 	bl	800afaa <USBH_MSC_SCSI_Read>
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a264:	7bfb      	ldrb	r3, [r7, #15]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10b      	bne.n	800a282 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	2134      	movs	r1, #52	; 0x34
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	3390      	adds	r3, #144	; 0x90
 800a278:	2201      	movs	r2, #1
 800a27a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a280:	e08a      	b.n	800a398 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800a282:	7bfb      	ldrb	r3, [r7, #15]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d109      	bne.n	800a29c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	2134      	movs	r1, #52	; 0x34
 800a28e:	fb01 f303 	mul.w	r3, r1, r3
 800a292:	4413      	add	r3, r2
 800a294:	3390      	adds	r3, #144	; 0x90
 800a296:	2205      	movs	r2, #5
 800a298:	701a      	strb	r2, [r3, #0]
      break;
 800a29a:	e07d      	b.n	800a398 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d17a      	bne.n	800a398 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	2134      	movs	r1, #52	; 0x34
 800a2a8:	fb01 f303 	mul.w	r3, r1, r3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3390      	adds	r3, #144	; 0x90
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b8:	e06e      	b.n	800a398 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a2ba:	78f9      	ldrb	r1, [r7, #3]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fe05 	bl	800aed4 <USBH_MSC_SCSI_Write>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d10b      	bne.n	800a2ec <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	2134      	movs	r1, #52	; 0x34
 800a2da:	fb01 f303 	mul.w	r3, r1, r3
 800a2de:	4413      	add	r3, r2
 800a2e0:	3390      	adds	r3, #144	; 0x90
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a2ea:	e057      	b.n	800a39c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d109      	bne.n	800a306 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a2f2:	78fb      	ldrb	r3, [r7, #3]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	2134      	movs	r1, #52	; 0x34
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	3390      	adds	r3, #144	; 0x90
 800a300:	2205      	movs	r2, #5
 800a302:	701a      	strb	r2, [r3, #0]
      break;
 800a304:	e04a      	b.n	800a39c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b04      	cmp	r3, #4
 800a30a:	d147      	bne.n	800a39c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a30c:	78fb      	ldrb	r3, [r7, #3]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	2134      	movs	r1, #52	; 0x34
 800a312:	fb01 f303 	mul.w	r3, r1, r3
 800a316:	4413      	add	r3, r2
 800a318:	3390      	adds	r3, #144	; 0x90
 800a31a:	2208      	movs	r2, #8
 800a31c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a31e:	2302      	movs	r3, #2
 800a320:	75fb      	strb	r3, [r7, #23]
      break;
 800a322:	e03b      	b.n	800a39c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	2234      	movs	r2, #52	; 0x34
 800a328:	fb02 f303 	mul.w	r3, r2, r3
 800a32c:	3398      	adds	r3, #152	; 0x98
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	4413      	add	r3, r2
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fd52 	bl	800ade2 <USBH_MSC_SCSI_RequestSense>
 800a33e:	4603      	mov	r3, r0
 800a340:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800a342:	7bfb      	ldrb	r3, [r7, #15]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d113      	bne.n	800a370 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	693a      	ldr	r2, [r7, #16]
 800a34c:	2134      	movs	r1, #52	; 0x34
 800a34e:	fb01 f303 	mul.w	r3, r1, r3
 800a352:	4413      	add	r3, r2
 800a354:	3390      	adds	r3, #144	; 0x90
 800a356:	2201      	movs	r2, #1
 800a358:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	2134      	movs	r1, #52	; 0x34
 800a360:	fb01 f303 	mul.w	r3, r1, r3
 800a364:	4413      	add	r3, r2
 800a366:	3391      	adds	r3, #145	; 0x91
 800a368:	2202      	movs	r2, #2
 800a36a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800a36c:	2302      	movs	r3, #2
 800a36e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	2b02      	cmp	r3, #2
 800a374:	d014      	beq.n	800a3a0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a376:	7bfb      	ldrb	r3, [r7, #15]
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d111      	bne.n	800a3a0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	2134      	movs	r1, #52	; 0x34
 800a382:	fb01 f303 	mul.w	r3, r1, r3
 800a386:	4413      	add	r3, r2
 800a388:	3390      	adds	r3, #144	; 0x90
 800a38a:	2208      	movs	r2, #8
 800a38c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a38e:	2302      	movs	r3, #2
 800a390:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a392:	e005      	b.n	800a3a0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800a394:	bf00      	nop
 800a396:	e004      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a398:	bf00      	nop
 800a39a:	e002      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a39c:	bf00      	nop
 800a39e:	e000      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800a3a0:	bf00      	nop

  }
  return error;
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3718      	adds	r7, #24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b0b      	cmp	r3, #11
 800a3ca:	d10c      	bne.n	800a3e6 <USBH_MSC_UnitIsReady+0x3a>
 800a3cc:	78fb      	ldrb	r3, [r7, #3]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	2134      	movs	r1, #52	; 0x34
 800a3d2:	fb01 f303 	mul.w	r3, r1, r3
 800a3d6:	4413      	add	r3, r2
 800a3d8:	3391      	adds	r3, #145	; 0x91
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	73fb      	strb	r3, [r7, #15]
 800a3e4:	e001      	b.n	800a3ea <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3714      	adds	r7, #20
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	460b      	mov	r3, r1
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b0b      	cmp	r3, #11
 800a418:	d10d      	bne.n	800a436 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	2234      	movs	r2, #52	; 0x34
 800a41e:	fb02 f303 	mul.w	r3, r2, r3
 800a422:	3390      	adds	r3, #144	; 0x90
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4413      	add	r3, r2
 800a428:	2234      	movs	r2, #52	; 0x34
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f002 fe51 	bl	800d0d4 <memcpy>
    return USBH_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	e000      	b.n	800a438 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a436:	2302      	movs	r3, #2
  }
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3718      	adds	r7, #24
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	607a      	str	r2, [r7, #4]
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	460b      	mov	r3, r1
 800a44e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a456:	69db      	ldr	r3, [r3, #28]
 800a458:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a46c:	2b0b      	cmp	r3, #11
 800a46e:	d109      	bne.n	800a484 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a470:	7afb      	ldrb	r3, [r7, #11]
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	2134      	movs	r1, #52	; 0x34
 800a476:	fb01 f303 	mul.w	r3, r1, r3
 800a47a:	4413      	add	r3, r2
 800a47c:	3390      	adds	r3, #144	; 0x90
 800a47e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a480:	2b01      	cmp	r3, #1
 800a482:	d001      	beq.n	800a488 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a484:	2302      	movs	r3, #2
 800a486:	e040      	b.n	800a50a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2206      	movs	r2, #6
 800a48c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a48e:	7afb      	ldrb	r3, [r7, #11]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	2134      	movs	r1, #52	; 0x34
 800a494:	fb01 f303 	mul.w	r3, r1, r3
 800a498:	4413      	add	r3, r2
 800a49a:	3390      	adds	r3, #144	; 0x90
 800a49c:	2206      	movs	r2, #6
 800a49e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a4aa:	7af9      	ldrb	r1, [r7, #11]
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 fd78 	bl	800afaa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4c0:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4c2:	e016      	b.n	800a4f2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad2      	subs	r2, r2, r3
 800a4ce:	6a3b      	ldr	r3, [r7, #32]
 800a4d0:	f242 7110 	movw	r1, #10000	; 0x2710
 800a4d4:	fb01 f303 	mul.w	r3, r1, r3
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d805      	bhi.n	800a4e8 <USBH_MSC_Read+0xa8>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	e00b      	b.n	800a50a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4f2:	7afb      	ldrb	r3, [r7, #11]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f7ff fe89 	bl	800a20e <USBH_MSC_RdWrProcess>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d0e0      	beq.n	800a4c4 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2201      	movs	r2, #1
 800a506:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b088      	sub	sp, #32
 800a516:	af02      	add	r7, sp, #8
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	460b      	mov	r3, r1
 800a520:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a528:	69db      	ldr	r3, [r3, #28]
 800a52a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00e      	beq.n	800a556 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a53e:	2b0b      	cmp	r3, #11
 800a540:	d109      	bne.n	800a556 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a542:	7afb      	ldrb	r3, [r7, #11]
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	2134      	movs	r1, #52	; 0x34
 800a548:	fb01 f303 	mul.w	r3, r1, r3
 800a54c:	4413      	add	r3, r2
 800a54e:	3390      	adds	r3, #144	; 0x90
 800a550:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a552:	2b01      	cmp	r3, #1
 800a554:	d001      	beq.n	800a55a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a556:	2302      	movs	r3, #2
 800a558:	e040      	b.n	800a5dc <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2207      	movs	r2, #7
 800a55e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a560:	7afb      	ldrb	r3, [r7, #11]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	2134      	movs	r1, #52	; 0x34
 800a566:	fb01 f303 	mul.w	r3, r1, r3
 800a56a:	4413      	add	r3, r2
 800a56c:	3390      	adds	r3, #144	; 0x90
 800a56e:	2207      	movs	r2, #7
 800a570:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	b29a      	uxth	r2, r3
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a57c:	7af9      	ldrb	r1, [r7, #11]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fca4 	bl	800aed4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a592:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a594:	e016      	b.n	800a5c4 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	f242 7110 	movw	r1, #10000	; 0x2710
 800a5a6:	fb01 f303 	mul.w	r3, r1, r3
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d805      	bhi.n	800a5ba <USBH_MSC_Write+0xa8>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d104      	bne.n	800a5c4 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e00b      	b.n	800a5dc <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff fe20 	bl	800a20e <USBH_MSC_RdWrProcess>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d0e0      	beq.n	800a596 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2221      	movs	r2, #33	; 0x21
 800a5f0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	22ff      	movs	r2, #255	; 0xff
 800a5f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a60a:	2200      	movs	r2, #0
 800a60c:	2100      	movs	r1, #0
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f001 fea4 	bl	800c35c <USBH_CtlReq>
 800a614:	4603      	mov	r3, r0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b082      	sub	sp, #8
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	22a1      	movs	r2, #161	; 0xa1
 800a62c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	22fe      	movs	r2, #254	; 0xfe
 800a632:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a646:	2201      	movs	r2, #1
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fe86 	bl	800c35c <USBH_CtlReq>
 800a650:	4603      	mov	r3, r0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4a09      	ldr	r2, [pc, #36]	; (800a698 <USBH_MSC_BOT_Init+0x3c>)
 800a672:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a09      	ldr	r2, [pc, #36]	; (800a69c <USBH_MSC_BOT_Init+0x40>)
 800a678:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2201      	movs	r2, #1
 800a67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr
 800a698:	43425355 	.word	0x43425355
 800a69c:	20304050 	.word	0x20304050

0800a6a0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af02      	add	r7, sp, #8
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c2:	69db      	ldr	r3, [r3, #28]
 800a6c4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	2b0a      	cmp	r3, #10
 800a6d4:	f200 819e 	bhi.w	800aa14 <USBH_MSC_BOT_Process+0x374>
 800a6d8:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <USBH_MSC_BOT_Process+0x40>)
 800a6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6de:	bf00      	nop
 800a6e0:	0800a70d 	.word	0x0800a70d
 800a6e4:	0800a735 	.word	0x0800a735
 800a6e8:	0800a79f 	.word	0x0800a79f
 800a6ec:	0800a7bd 	.word	0x0800a7bd
 800a6f0:	0800a841 	.word	0x0800a841
 800a6f4:	0800a863 	.word	0x0800a863
 800a6f8:	0800a8fb 	.word	0x0800a8fb
 800a6fc:	0800a917 	.word	0x0800a917
 800a700:	0800a969 	.word	0x0800a969
 800a704:	0800a999 	.word	0x0800a999
 800a708:	0800a9fb 	.word	0x0800a9fb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	78fa      	ldrb	r2, [r7, #3]
 800a710:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	795b      	ldrb	r3, [r3, #5]
 800a726:	2201      	movs	r2, #1
 800a728:	9200      	str	r2, [sp, #0]
 800a72a:	221f      	movs	r2, #31
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f002 f824 	bl	800c77a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a732:	e17e      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	795b      	ldrb	r3, [r3, #5]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f002 fbae 	bl	800ce9c <USBH_LL_GetURBState>
 800a740:	4603      	mov	r3, r0
 800a742:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a744:	7d3b      	ldrb	r3, [r7, #20]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d118      	bne.n	800a77c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00f      	beq.n	800a772 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a752:	693b      	ldr	r3, [r7, #16]
 800a754:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a758:	b25b      	sxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	da04      	bge.n	800a768 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	2203      	movs	r2, #3
 800a762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a766:	e157      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2205      	movs	r2, #5
 800a76c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a770:	e152      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2207      	movs	r2, #7
 800a776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a77a:	e14d      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a77c:	7d3b      	ldrb	r3, [r7, #20]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d104      	bne.n	800a78c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a78a:	e145      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a78c:	7d3b      	ldrb	r3, [r7, #20]
 800a78e:	2b05      	cmp	r3, #5
 800a790:	f040 8142 	bne.w	800aa18 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	220a      	movs	r2, #10
 800a798:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a79c:	e13c      	b.n	800aa18 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	895a      	ldrh	r2, [r3, #10]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	791b      	ldrb	r3, [r3, #4]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f002 f809 	bl	800c7c4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2204      	movs	r2, #4
 800a7b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a7ba:	e13a      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	791b      	ldrb	r3, [r3, #4]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f002 fb6a 	bl	800ce9c <USBH_LL_GetURBState>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a7cc:	7d3b      	ldrb	r3, [r7, #20]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d12d      	bne.n	800a82e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	8952      	ldrh	r2, [r2, #10]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d910      	bls.n	800a800 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	8952      	ldrh	r2, [r2, #10]
 800a7e8:	441a      	add	r2, r3
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	8952      	ldrh	r2, [r2, #10]
 800a7f8:	1a9a      	subs	r2, r3, r2
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a7fe:	e002      	b.n	800a806 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	2200      	movs	r2, #0
 800a804:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00a      	beq.n	800a824 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	895a      	ldrh	r2, [r3, #10]
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	791b      	ldrb	r3, [r3, #4]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f001 ffd1 	bl	800c7c4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a822:	e0fb      	b.n	800aa1c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	2207      	movs	r2, #7
 800a828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a82c:	e0f6      	b.n	800aa1c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a82e:	7d3b      	ldrb	r3, [r7, #20]
 800a830:	2b05      	cmp	r3, #5
 800a832:	f040 80f3 	bne.w	800aa1c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2209      	movs	r2, #9
 800a83a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a83e:	e0ed      	b.n	800aa1c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	891a      	ldrh	r2, [r3, #8]
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	795b      	ldrb	r3, [r3, #5]
 800a84e:	2001      	movs	r0, #1
 800a850:	9000      	str	r0, [sp, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f001 ff91 	bl	800c77a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2206      	movs	r2, #6
 800a85c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a860:	e0e7      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	795b      	ldrb	r3, [r3, #5]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f002 fb17 	bl	800ce9c <USBH_LL_GetURBState>
 800a86e:	4603      	mov	r3, r0
 800a870:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a872:	7d3b      	ldrb	r3, [r7, #20]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d12f      	bne.n	800a8d8 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	8912      	ldrh	r2, [r2, #8]
 800a880:	4293      	cmp	r3, r2
 800a882:	d910      	bls.n	800a8a6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a88a:	693a      	ldr	r2, [r7, #16]
 800a88c:	8912      	ldrh	r2, [r2, #8]
 800a88e:	441a      	add	r2, r3
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a89a:	693a      	ldr	r2, [r7, #16]
 800a89c:	8912      	ldrh	r2, [r2, #8]
 800a89e:	1a9a      	subs	r2, r3, r2
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8a4:	e002      	b.n	800a8ac <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d00c      	beq.n	800a8ce <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	891a      	ldrh	r2, [r3, #8]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	795b      	ldrb	r3, [r3, #5]
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	9000      	str	r0, [sp, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f001 ff57 	bl	800c77a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a8cc:	e0a8      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8d6:	e0a3      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8d8:	7d3b      	ldrb	r3, [r7, #20]
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d104      	bne.n	800a8e8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	2205      	movs	r2, #5
 800a8e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8e6:	e09b      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a8e8:	7d3b      	ldrb	r3, [r7, #20]
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	f040 8098 	bne.w	800aa20 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	220a      	movs	r2, #10
 800a8f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8f8:	e092      	b.n	800aa20 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	791b      	ldrb	r3, [r3, #4]
 800a904:	220d      	movs	r2, #13
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f001 ff5c 	bl	800c7c4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2208      	movs	r2, #8
 800a910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a914:	e08d      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	791b      	ldrb	r3, [r3, #4]
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f002 fabd 	bl	800ce9c <USBH_LL_GetURBState>
 800a922:	4603      	mov	r3, r0
 800a924:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a926:	7d3b      	ldrb	r3, [r7, #20]
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d115      	bne.n	800a958 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2201      	movs	r2, #1
 800a930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2201      	movs	r2, #1
 800a938:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f8a9 	bl	800aa94 <USBH_MSC_DecodeCSW>
 800a942:	4603      	mov	r3, r0
 800a944:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a946:	7d7b      	ldrb	r3, [r7, #21]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a950:	e068      	b.n	800aa24 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a952:	2302      	movs	r3, #2
 800a954:	75fb      	strb	r3, [r7, #23]
      break;
 800a956:	e065      	b.n	800aa24 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a958:	7d3b      	ldrb	r3, [r7, #20]
 800a95a:	2b05      	cmp	r3, #5
 800a95c:	d162      	bne.n	800aa24 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2209      	movs	r2, #9
 800a962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a966:	e05d      	b.n	800aa24 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a968:	78fb      	ldrb	r3, [r7, #3]
 800a96a:	2200      	movs	r2, #0
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f864 	bl	800aa3c <USBH_MSC_BOT_Abort>
 800a974:	4603      	mov	r3, r0
 800a976:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a978:	7dbb      	ldrb	r3, [r7, #22]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2207      	movs	r2, #7
 800a982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a986:	e04f      	b.n	800aa28 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a988:	7dbb      	ldrb	r3, [r7, #22]
 800a98a:	2b04      	cmp	r3, #4
 800a98c:	d14c      	bne.n	800aa28 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	220b      	movs	r2, #11
 800a992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a996:	e047      	b.n	800aa28 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a998:	78fb      	ldrb	r3, [r7, #3]
 800a99a:	2201      	movs	r2, #1
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f84c 	bl	800aa3c <USBH_MSC_BOT_Abort>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a9a8:	7dbb      	ldrb	r3, [r7, #22]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d11d      	bne.n	800a9ea <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	795b      	ldrb	r3, [r3, #5]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f002 facb 	bl	800cf50 <USBH_LL_GetToggle>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	7959      	ldrb	r1, [r3, #5]
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	f1c3 0301 	rsb	r3, r3, #1
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f002 fa8f 	bl	800cef0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	791b      	ldrb	r3, [r3, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f002 fa88 	bl	800cef0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	2209      	movs	r2, #9
 800a9e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a9e8:	e020      	b.n	800aa2c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a9ea:	7dbb      	ldrb	r3, [r7, #22]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d11d      	bne.n	800aa2c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	220b      	movs	r2, #11
 800a9f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9f8:	e018      	b.n	800aa2c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff fdf2 	bl	800a5e4 <USBH_MSC_BOT_REQ_Reset>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d112      	bne.n	800aa30 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800aa12:	e00d      	b.n	800aa30 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800aa14:	bf00      	nop
 800aa16:	e00c      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa18:	bf00      	nop
 800aa1a:	e00a      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa1c:	bf00      	nop
 800aa1e:	e008      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa20:	bf00      	nop
 800aa22:	e006      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa24:	bf00      	nop
 800aa26:	e004      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa28:	bf00      	nop
 800aa2a:	e002      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa2c:	bf00      	nop
 800aa2e:	e000      	b.n	800aa32 <USBH_MSC_BOT_Process+0x392>
      break;
 800aa30:	bf00      	nop
  }
  return status;
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa56:	69db      	ldr	r3, [r3, #28]
 800aa58:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aa5a:	78bb      	ldrb	r3, [r7, #2]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <USBH_MSC_BOT_Abort+0x2a>
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d009      	beq.n	800aa78 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aa64:	e011      	b.n	800aa8a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	79db      	ldrb	r3, [r3, #7]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 f9a8 	bl	800bdc2 <USBH_ClrFeature>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
      break;
 800aa76:	e008      	b.n	800aa8a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	799b      	ldrb	r3, [r3, #6]
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 f99f 	bl	800bdc2 <USBH_ClrFeature>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]
      break;
 800aa88:	bf00      	nop
  }
  return status;
 800aa8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	791b      	ldrb	r3, [r3, #4]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f002 f961 	bl	800cd78 <USBH_LL_GetLastXferSize>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b0d      	cmp	r3, #13
 800aaba:	d002      	beq.n	800aac2 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800aabc:	2302      	movs	r3, #2
 800aabe:	73fb      	strb	r3, [r7, #15]
 800aac0:	e024      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aac6:	4a14      	ldr	r2, [pc, #80]	; (800ab18 <USBH_MSC_DecodeCSW+0x84>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d11d      	bne.n	800ab08 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d119      	bne.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]
 800aae6:	e011      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d102      	bne.n	800aaf8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	73fb      	strb	r3, [r7, #15]
 800aaf6:	e009      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d104      	bne.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ab02:	2302      	movs	r3, #2
 800ab04:	73fb      	strb	r3, [r7, #15]
 800ab06:	e001      	b.n	800ab0c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ab08:	2302      	movs	r3, #2
 800ab0a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	53425355 	.word	0x53425355

0800ab1c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d002      	beq.n	800ab46 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d021      	beq.n	800ab88 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ab44:	e028      	b.n	800ab98 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	220a      	movs	r2, #10
 800ab58:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	3363      	adds	r3, #99	; 0x63
 800ab60:	2210      	movs	r2, #16
 800ab62:	2100      	movs	r1, #0
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 fac3 	bl	800d0f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ab82:	2301      	movs	r3, #1
 800ab84:	73fb      	strb	r3, [r7, #15]
      break;
 800ab86:	e007      	b.n	800ab98 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff fd87 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73fb      	strb	r3, [r7, #15]
      break;
 800ab96:	bf00      	nop
  }

  return error;
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	460b      	mov	r3, r1
 800abac:	607a      	str	r2, [r7, #4]
 800abae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800abb0:	2301      	movs	r3, #1
 800abb2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d002      	beq.n	800abce <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800abc8:	2b02      	cmp	r3, #2
 800abca:	d027      	beq.n	800ac1c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800abcc:	e05f      	b.n	800ac8e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2208      	movs	r2, #8
 800abd2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2280      	movs	r2, #128	; 0x80
 800abd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	220a      	movs	r2, #10
 800abe0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	3363      	adds	r3, #99	; 0x63
 800abe8:	2210      	movs	r2, #16
 800abea:	2100      	movs	r1, #0
 800abec:	4618      	mov	r0, r3
 800abee:	f002 fa7f 	bl	800d0f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	2225      	movs	r2, #37	; 0x25
 800abf6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	2202      	movs	r2, #2
 800ac06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f103 0210 	add.w	r2, r3, #16
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
      break;
 800ac1a:	e038      	b.n	800ac8e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff fd3d 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ac26:	4603      	mov	r3, r0
 800ac28:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac2a:	7dfb      	ldrb	r3, [r7, #23]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d12d      	bne.n	800ac8c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac36:	3303      	adds	r3, #3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac42:	3302      	adds	r3, #2
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	021b      	lsls	r3, r3, #8
 800ac48:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac50:	3301      	adds	r3, #1
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac56:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	061b      	lsls	r3, r3, #24
 800ac62:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac6e:	3307      	adds	r3, #7
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac7a:	3306      	adds	r3, #6
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	021b      	lsls	r3, r3, #8
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4313      	orrs	r3, r2
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	809a      	strh	r2, [r3, #4]
      break;
 800ac8c:	bf00      	nop
  }

  return error;
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	460b      	mov	r3, r1
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800aca6:	2302      	movs	r3, #2
 800aca8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d002      	beq.n	800acc4 <USBH_MSC_SCSI_Inquiry+0x2c>
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d03d      	beq.n	800ad3e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800acc2:	e089      	b.n	800add8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2224      	movs	r2, #36	; 0x24
 800acc8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2280      	movs	r2, #128	; 0x80
 800acce:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	220a      	movs	r2, #10
 800acd6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	3363      	adds	r3, #99	; 0x63
 800acde:	220a      	movs	r2, #10
 800ace0:	2100      	movs	r1, #0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f002 fa04 	bl	800d0f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	2212      	movs	r2, #18
 800acec:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	015b      	lsls	r3, r3, #5
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2224      	movs	r2, #36	; 0x24
 800ad10:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	f103 0210 	add.w	r2, r3, #16
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad3c:	e04c      	b.n	800add8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad3e:	7afb      	ldrb	r3, [r7, #11]
 800ad40:	4619      	mov	r1, r3
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f7ff fcac 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ad4c:	7dfb      	ldrb	r3, [r7, #23]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d141      	bne.n	800add6 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ad52:	2222      	movs	r2, #34	; 0x22
 800ad54:	2100      	movs	r1, #0
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f002 f9ca 	bl	800d0f0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	f003 031f 	and.w	r3, r3, #31
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	095b      	lsrs	r3, r3, #5
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad84:	3301      	adds	r3, #1
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da03      	bge.n	800ad96 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	709a      	strb	r2, [r3, #2]
 800ad94:	e002      	b.n	800ad9c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	1cd8      	adds	r0, r3, #3
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ada6:	3308      	adds	r3, #8
 800ada8:	2208      	movs	r2, #8
 800adaa:	4619      	mov	r1, r3
 800adac:	f002 f992 	bl	800d0d4 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f103 000c 	add.w	r0, r3, #12
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adbc:	3310      	adds	r3, #16
 800adbe:	2210      	movs	r2, #16
 800adc0:	4619      	mov	r1, r3
 800adc2:	f002 f987 	bl	800d0d4 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	331d      	adds	r3, #29
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800add0:	3220      	adds	r2, #32
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	601a      	str	r2, [r3, #0]
      break;
 800add6:	bf00      	nop
  }

  return error;
 800add8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b086      	sub	sp, #24
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	460b      	mov	r3, r1
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800adf0:	2302      	movs	r3, #2
 800adf2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d002      	beq.n	800ae0e <USBH_MSC_SCSI_RequestSense+0x2c>
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d03d      	beq.n	800ae88 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ae0c:	e05d      	b.n	800aeca <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	220e      	movs	r2, #14
 800ae12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2280      	movs	r2, #128	; 0x80
 800ae18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	220a      	movs	r2, #10
 800ae20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	3363      	adds	r3, #99	; 0x63
 800ae28:	2210      	movs	r2, #16
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f002 f95f 	bl	800d0f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2203      	movs	r2, #3
 800ae36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	015b      	lsls	r3, r3, #5
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	220e      	movs	r2, #14
 800ae5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2202      	movs	r2, #2
 800ae72:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f103 0210 	add.w	r2, r3, #16
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae82:	2301      	movs	r3, #1
 800ae84:	75fb      	strb	r3, [r7, #23]
      break;
 800ae86:	e020      	b.n	800aeca <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae88:	7afb      	ldrb	r3, [r7, #11]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f7ff fc07 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800ae92:	4603      	mov	r3, r0
 800ae94:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d115      	bne.n	800aec8 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea2:	3302      	adds	r3, #2
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb6:	7b1a      	ldrb	r2, [r3, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec2:	7b5a      	ldrb	r2, [r3, #13]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	709a      	strb	r2, [r3, #2]
      break;
 800aec8:	bf00      	nop
  }

  return error;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	607a      	str	r2, [r7, #4]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	460b      	mov	r3, r1
 800aee2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aee4:	2302      	movs	r3, #2
 800aee6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeee:	69db      	ldr	r3, [r3, #28]
 800aef0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d002      	beq.n	800af02 <USBH_MSC_SCSI_Write+0x2e>
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d047      	beq.n	800af90 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800af00:	e04e      	b.n	800afa0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800af08:	461a      	mov	r2, r3
 800af0a:	6a3b      	ldr	r3, [r7, #32]
 800af0c:	fb03 f202 	mul.w	r2, r3, r2
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	220a      	movs	r2, #10
 800af20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	3363      	adds	r3, #99	; 0x63
 800af28:	2210      	movs	r2, #16
 800af2a:	2100      	movs	r1, #0
 800af2c:	4618      	mov	r0, r3
 800af2e:	f002 f8df 	bl	800d0f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	222a      	movs	r2, #42	; 0x2a
 800af36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af3a:	79fa      	ldrb	r2, [r7, #7]
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af42:	79ba      	ldrb	r2, [r7, #6]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af4a:	797a      	ldrb	r2, [r7, #5]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af52:	1d3b      	adds	r3, r7, #4
 800af54:	781a      	ldrb	r2, [r3, #0]
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800af5c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800af66:	f107 0320 	add.w	r3, r7, #32
 800af6a:	781a      	ldrb	r2, [r3, #0]
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2202      	movs	r2, #2
 800af7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	683a      	ldr	r2, [r7, #0]
 800af86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af8a:	2301      	movs	r3, #1
 800af8c:	75fb      	strb	r3, [r7, #23]
      break;
 800af8e:	e007      	b.n	800afa0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	4619      	mov	r1, r3
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7ff fb83 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800af9a:	4603      	mov	r3, r0
 800af9c:	75fb      	strb	r3, [r7, #23]
      break;
 800af9e:	bf00      	nop
  }

  return error;
 800afa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b086      	sub	sp, #24
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	603b      	str	r3, [r7, #0]
 800afb6:	460b      	mov	r3, r1
 800afb8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800afba:	2302      	movs	r3, #2
 800afbc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d002      	beq.n	800afd8 <USBH_MSC_SCSI_Read+0x2e>
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d047      	beq.n	800b066 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afd6:	e04e      	b.n	800b076 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800afde:	461a      	mov	r2, r3
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	fb03 f202 	mul.w	r2, r3, r2
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2280      	movs	r2, #128	; 0x80
 800afee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	220a      	movs	r2, #10
 800aff6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	3363      	adds	r3, #99	; 0x63
 800affe:	2210      	movs	r2, #16
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f002 f874 	bl	800d0f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	2228      	movs	r2, #40	; 0x28
 800b00c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b010:	79fa      	ldrb	r2, [r7, #7]
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b018:	79ba      	ldrb	r2, [r7, #6]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b020:	797a      	ldrb	r2, [r7, #5]
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b028:	1d3b      	adds	r3, r7, #4
 800b02a:	781a      	ldrb	r2, [r3, #0]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b032:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b03c:	f107 0320 	add.w	r3, r7, #32
 800b040:	781a      	ldrb	r2, [r3, #0]
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	2202      	movs	r2, #2
 800b054:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b060:	2301      	movs	r3, #1
 800b062:	75fb      	strb	r3, [r7, #23]
      break;
 800b064:	e007      	b.n	800b076 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b066:	7afb      	ldrb	r3, [r7, #11]
 800b068:	4619      	mov	r1, r3
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f7ff fb18 	bl	800a6a0 <USBH_MSC_BOT_Process>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	bf00      	nop
  }

  return error;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d101      	bne.n	800b098 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b094:	2302      	movs	r3, #2
 800b096:	e029      	b.n	800b0ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	79fa      	ldrb	r2, [r7, #7]
 800b09c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f81f 	bl	800b0f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f001 fd89 	bl	800cbfc <USBH_LL_Init>

  return USBH_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b100:	2300      	movs	r3, #0
 800b102:	60fb      	str	r3, [r7, #12]
 800b104:	e009      	b.n	800b11a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	33e0      	adds	r3, #224	; 0xe0
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	2200      	movs	r2, #0
 800b112:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2b0f      	cmp	r3, #15
 800b11e:	d9f2      	bls.n	800b106 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e009      	b.n	800b13a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	3301      	adds	r3, #1
 800b138:	60fb      	str	r3, [r7, #12]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b140:	d3f1      	bcc.n	800b126 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2240      	movs	r2, #64	; 0x40
 800b166:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3714      	adds	r7, #20
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d016      	beq.n	800b1de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10e      	bne.n	800b1d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1c0:	1c59      	adds	r1, r3, #1
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	33de      	adds	r3, #222	; 0xde
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]
 800b1d6:	e004      	b.n	800b1e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b1d8:	2302      	movs	r3, #2
 800b1da:	73fb      	strb	r3, [r7, #15]
 800b1dc:	e001      	b.n	800b1e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b1de:	2302      	movs	r3, #2
 800b1e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d204      	bcs.n	800b216 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	78fa      	ldrb	r2, [r7, #3]
 800b210:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b214:	e001      	b.n	800b21a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b216:	2302      	movs	r3, #2
 800b218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3714      	adds	r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	4608      	mov	r0, r1
 800b232:	4611      	mov	r1, r2
 800b234:	461a      	mov	r2, r3
 800b236:	4603      	mov	r3, r0
 800b238:	70fb      	strb	r3, [r7, #3]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70bb      	strb	r3, [r7, #2]
 800b23e:	4613      	mov	r3, r2
 800b240:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b250:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b252:	e025      	b.n	800b2a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	221a      	movs	r2, #26
 800b258:	fb02 f303 	mul.w	r3, r2, r3
 800b25c:	3308      	adds	r3, #8
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	3302      	adds	r3, #2
 800b264:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	795b      	ldrb	r3, [r3, #5]
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d002      	beq.n	800b276 <USBH_FindInterface+0x4e>
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	2bff      	cmp	r3, #255	; 0xff
 800b274:	d111      	bne.n	800b29a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b27a:	78ba      	ldrb	r2, [r7, #2]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d002      	beq.n	800b286 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b280:	78bb      	ldrb	r3, [r7, #2]
 800b282:	2bff      	cmp	r3, #255	; 0xff
 800b284:	d109      	bne.n	800b29a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b28a:	787a      	ldrb	r2, [r7, #1]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d002      	beq.n	800b296 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b290:	787b      	ldrb	r3, [r7, #1]
 800b292:	2bff      	cmp	r3, #255	; 0xff
 800b294:	d101      	bne.n	800b29a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b296:	7dfb      	ldrb	r3, [r7, #23]
 800b298:	e006      	b.n	800b2a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	3301      	adds	r3, #1
 800b29e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2a0:	7dfb      	ldrb	r3, [r7, #23]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d9d6      	bls.n	800b254 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b2a6:	23ff      	movs	r3, #255	; 0xff
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	371c      	adds	r7, #28
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 fce3 	bl	800cc88 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f001 fdfc 	bl	800cec2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af04      	add	r7, sp, #16
 800b2da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b2dc:	2302      	movs	r3, #2
 800b2de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d102      	bne.n	800b2f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2203      	movs	r2, #3
 800b2f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b0b      	cmp	r3, #11
 800b2fe:	f200 81be 	bhi.w	800b67e <USBH_Process+0x3aa>
 800b302:	a201      	add	r2, pc, #4	; (adr r2, 800b308 <USBH_Process+0x34>)
 800b304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b308:	0800b339 	.word	0x0800b339
 800b30c:	0800b36b 	.word	0x0800b36b
 800b310:	0800b3d3 	.word	0x0800b3d3
 800b314:	0800b619 	.word	0x0800b619
 800b318:	0800b67f 	.word	0x0800b67f
 800b31c:	0800b477 	.word	0x0800b477
 800b320:	0800b5bf 	.word	0x0800b5bf
 800b324:	0800b4ad 	.word	0x0800b4ad
 800b328:	0800b4cd 	.word	0x0800b4cd
 800b32c:	0800b4ed 	.word	0x0800b4ed
 800b330:	0800b531 	.word	0x0800b531
 800b334:	0800b601 	.word	0x0800b601
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 819e 	beq.w	800b682 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b34c:	20c8      	movs	r0, #200	; 0xc8
 800b34e:	f001 fe2f 	bl	800cfb0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f001 fcf5 	bl	800cd42 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b368:	e18b      	b.n	800b682 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b370:	2b01      	cmp	r3, #1
 800b372:	d107      	bne.n	800b384 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2202      	movs	r2, #2
 800b380:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b382:	e18d      	b.n	800b6a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b38a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b38e:	d914      	bls.n	800b3ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b396:	3301      	adds	r3, #1
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d903      	bls.n	800b3b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	220d      	movs	r2, #13
 800b3ae:	701a      	strb	r2, [r3, #0]
      break;
 800b3b0:	e176      	b.n	800b6a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
      break;
 800b3b8:	e172      	b.n	800b6a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b3c0:	f103 020a 	add.w	r2, r3, #10
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b3ca:	200a      	movs	r0, #10
 800b3cc:	f001 fdf0 	bl	800cfb0 <USBH_Delay>
      break;
 800b3d0:	e166      	b.n	800b6a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b3e8:	2064      	movs	r0, #100	; 0x64
 800b3ea:	f001 fde1 	bl	800cfb0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 fc80 	bl	800ccf4 <USBH_LL_GetSpeed>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2205      	movs	r2, #5
 800b402:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b404:	2100      	movs	r1, #0
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f001 fa29 	bl	800c85e <USBH_AllocPipe>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b414:	2180      	movs	r1, #128	; 0x80
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fa21 	bl	800c85e <USBH_AllocPipe>
 800b41c:	4603      	mov	r3, r0
 800b41e:	461a      	mov	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	7919      	ldrb	r1, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b438:	b292      	uxth	r2, r2
 800b43a:	9202      	str	r2, [sp, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	9201      	str	r2, [sp, #4]
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	4603      	mov	r3, r0
 800b444:	2280      	movs	r2, #128	; 0x80
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 f9da 	bl	800c800 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	7959      	ldrb	r1, [r3, #5]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b460:	b292      	uxth	r2, r2
 800b462:	9202      	str	r2, [sp, #8]
 800b464:	2200      	movs	r2, #0
 800b466:	9201      	str	r2, [sp, #4]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	4603      	mov	r3, r0
 800b46c:	2200      	movs	r2, #0
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 f9c6 	bl	800c800 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b474:	e114      	b.n	800b6a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f918 	bl	800b6ac <USBH_HandleEnum>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b480:	7bbb      	ldrb	r3, [r7, #14]
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	f040 80fe 	bne.w	800b686 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d103      	bne.n	800b4a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2208      	movs	r2, #8
 800b4a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b4a2:	e0f0      	b.n	800b686 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2207      	movs	r2, #7
 800b4a8:	701a      	strb	r2, [r3, #0]
      break;
 800b4aa:	e0ec      	b.n	800b686 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f000 80e9 	beq.w	800b68a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4be:	2101      	movs	r1, #1
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2208      	movs	r2, #8
 800b4c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b4ca:	e0de      	b.n	800b68a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fc2c 	bl	800bd34 <USBH_SetCfg>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f040 80d5 	bne.w	800b68e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2209      	movs	r2, #9
 800b4e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b4ea:	e0d0      	b.n	800b68e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b4f2:	f003 0320 	and.w	r3, r3, #32
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d016      	beq.n	800b528 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fc3c 	bl	800bd7a <USBH_SetFeature>
 800b502:	4603      	mov	r3, r0
 800b504:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d103      	bne.n	800b516 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	220a      	movs	r2, #10
 800b512:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b514:	e0bd      	b.n	800b692 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	f040 80b9 	bne.w	800b692 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	220a      	movs	r2, #10
 800b524:	701a      	strb	r2, [r3, #0]
      break;
 800b526:	e0b4      	b.n	800b692 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	220a      	movs	r2, #10
 800b52c:	701a      	strb	r2, [r3, #0]
      break;
 800b52e:	e0b0      	b.n	800b692 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 80ad 	beq.w	800b696 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b544:	2300      	movs	r3, #0
 800b546:	73fb      	strb	r3, [r7, #15]
 800b548:	e016      	b.n	800b578 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b54a:	7bfa      	ldrb	r2, [r7, #15]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	32de      	adds	r2, #222	; 0xde
 800b550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b554:	791a      	ldrb	r2, [r3, #4]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d108      	bne.n	800b572 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b560:	7bfa      	ldrb	r2, [r7, #15]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	32de      	adds	r2, #222	; 0xde
 800b566:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b570:	e005      	b.n	800b57e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	3301      	adds	r3, #1
 800b576:	73fb      	strb	r3, [r7, #15]
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0e5      	beq.n	800b54a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d016      	beq.n	800b5b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	4798      	blx	r3
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d109      	bne.n	800b5ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2206      	movs	r2, #6
 800b59e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5a6:	2103      	movs	r1, #3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5ac:	e073      	b.n	800b696 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	220d      	movs	r2, #13
 800b5b2:	701a      	strb	r2, [r3, #0]
      break;
 800b5b4:	e06f      	b.n	800b696 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	220d      	movs	r2, #13
 800b5ba:	701a      	strb	r2, [r3, #0]
      break;
 800b5bc:	e06b      	b.n	800b696 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d017      	beq.n	800b5f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	4798      	blx	r3
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d103      	bne.n	800b5e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	220b      	movs	r2, #11
 800b5e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b5e6:	e058      	b.n	800b69a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d154      	bne.n	800b69a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	220d      	movs	r2, #13
 800b5f4:	701a      	strb	r2, [r3, #0]
      break;
 800b5f6:	e050      	b.n	800b69a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	220d      	movs	r2, #13
 800b5fc:	701a      	strb	r2, [r3, #0]
      break;
 800b5fe:	e04c      	b.n	800b69a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b606:	2b00      	cmp	r3, #0
 800b608:	d049      	beq.n	800b69e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b610:	695b      	ldr	r3, [r3, #20]
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	4798      	blx	r3
      }
      break;
 800b616:	e042      	b.n	800b69e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7ff fd67 	bl	800b0f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d009      	beq.n	800b644 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b654:	2105      	movs	r1, #5
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2b01      	cmp	r3, #1
 800b664:	d107      	bne.n	800b676 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fe20 	bl	800b2b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b674:	e014      	b.n	800b6a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f001 fb06 	bl	800cc88 <USBH_LL_Start>
      break;
 800b67c:	e010      	b.n	800b6a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800b67e:	bf00      	nop
 800b680:	e00e      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b682:	bf00      	nop
 800b684:	e00c      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b686:	bf00      	nop
 800b688:	e00a      	b.n	800b6a0 <USBH_Process+0x3cc>
    break;
 800b68a:	bf00      	nop
 800b68c:	e008      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b68e:	bf00      	nop
 800b690:	e006      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b692:	bf00      	nop
 800b694:	e004      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b696:	bf00      	nop
 800b698:	e002      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b69a:	bf00      	nop
 800b69c:	e000      	b.n	800b6a0 <USBH_Process+0x3cc>
      break;
 800b69e:	bf00      	nop
  }
  return USBH_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop

0800b6ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af04      	add	r7, sp, #16
 800b6b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	2b07      	cmp	r3, #7
 800b6c2:	f200 81c1 	bhi.w	800ba48 <USBH_HandleEnum+0x39c>
 800b6c6:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <USBH_HandleEnum+0x20>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b6ed 	.word	0x0800b6ed
 800b6d0:	0800b7ab 	.word	0x0800b7ab
 800b6d4:	0800b815 	.word	0x0800b815
 800b6d8:	0800b8a3 	.word	0x0800b8a3
 800b6dc:	0800b90d 	.word	0x0800b90d
 800b6e0:	0800b97d 	.word	0x0800b97d
 800b6e4:	0800b9c3 	.word	0x0800b9c3
 800b6e8:	0800ba09 	.word	0x0800ba09
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b6ec:	2108      	movs	r1, #8
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fa50 	bl	800bb94 <USBH_Get_DevDesc>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d130      	bne.n	800b760 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	7919      	ldrb	r1, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b722:	b292      	uxth	r2, r2
 800b724:	9202      	str	r2, [sp, #8]
 800b726:	2200      	movs	r2, #0
 800b728:	9201      	str	r2, [sp, #4]
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4603      	mov	r3, r0
 800b72e:	2280      	movs	r2, #128	; 0x80
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 f865 	bl	800c800 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7959      	ldrb	r1, [r3, #5]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b74a:	b292      	uxth	r2, r2
 800b74c:	9202      	str	r2, [sp, #8]
 800b74e:	2200      	movs	r2, #0
 800b750:	9201      	str	r2, [sp, #4]
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	4603      	mov	r3, r0
 800b756:	2200      	movs	r2, #0
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f001 f851 	bl	800c800 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b75e:	e175      	b.n	800ba4c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	2b03      	cmp	r3, #3
 800b764:	f040 8172 	bne.w	800ba4c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b76e:	3301      	adds	r3, #1
 800b770:	b2da      	uxtb	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d903      	bls.n	800b78a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	220d      	movs	r2, #13
 800b786:	701a      	strb	r2, [r3, #0]
      break;
 800b788:	e160      	b.n	800ba4c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	795b      	ldrb	r3, [r3, #5]
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f001 f885 	bl	800c8a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	791b      	ldrb	r3, [r3, #4]
 800b79a:	4619      	mov	r1, r3
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f001 f87f 	bl	800c8a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
      break;
 800b7a8:	e150      	b.n	800ba4c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b7aa:	2112      	movs	r1, #18
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f9f1 	bl	800bb94 <USBH_Get_DevDesc>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d103      	bne.n	800b7c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7c2:	e145      	b.n	800ba50 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	2b03      	cmp	r3, #3
 800b7c8:	f040 8142 	bne.w	800ba50 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	b2da      	uxtb	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d903      	bls.n	800b7ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	220d      	movs	r2, #13
 800b7ea:	701a      	strb	r2, [r3, #0]
      break;
 800b7ec:	e130      	b.n	800ba50 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	795b      	ldrb	r3, [r3, #5]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 f853 	bl	800c8a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	791b      	ldrb	r3, [r3, #4]
 800b7fe:	4619      	mov	r1, r3
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f001 f84d 	bl	800c8a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	701a      	strb	r2, [r3, #0]
      break;
 800b812:	e11d      	b.n	800ba50 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b814:	2101      	movs	r1, #1
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fa68 	bl	800bcec <USBH_SetAddress>
 800b81c:	4603      	mov	r3, r0
 800b81e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b820:	7bbb      	ldrb	r3, [r7, #14]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d132      	bne.n	800b88c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b826:	2002      	movs	r0, #2
 800b828:	f001 fbc2 	bl	800cfb0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2203      	movs	r2, #3
 800b838:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	7919      	ldrb	r1, [r3, #4]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b84e:	b292      	uxth	r2, r2
 800b850:	9202      	str	r2, [sp, #8]
 800b852:	2200      	movs	r2, #0
 800b854:	9201      	str	r2, [sp, #4]
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	4603      	mov	r3, r0
 800b85a:	2280      	movs	r2, #128	; 0x80
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 ffcf 	bl	800c800 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	7959      	ldrb	r1, [r3, #5]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b876:	b292      	uxth	r2, r2
 800b878:	9202      	str	r2, [sp, #8]
 800b87a:	2200      	movs	r2, #0
 800b87c:	9201      	str	r2, [sp, #4]
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	4603      	mov	r3, r0
 800b882:	2200      	movs	r2, #0
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 ffbb 	bl	800c800 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b88a:	e0e3      	b.n	800ba54 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b88c:	7bbb      	ldrb	r3, [r7, #14]
 800b88e:	2b03      	cmp	r3, #3
 800b890:	f040 80e0 	bne.w	800ba54 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	220d      	movs	r2, #13
 800b898:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	705a      	strb	r2, [r3, #1]
      break;
 800b8a0:	e0d8      	b.n	800ba54 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b8a2:	2109      	movs	r1, #9
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f99d 	bl	800bbe4 <USBH_Get_CfgDesc>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8ae:	7bbb      	ldrb	r3, [r7, #14]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d103      	bne.n	800b8bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2204      	movs	r2, #4
 800b8b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b8ba:	e0cd      	b.n	800ba58 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	2b03      	cmp	r3, #3
 800b8c0:	f040 80ca 	bne.w	800ba58 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d903      	bls.n	800b8e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	220d      	movs	r2, #13
 800b8e2:	701a      	strb	r2, [r3, #0]
      break;
 800b8e4:	e0b8      	b.n	800ba58 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	795b      	ldrb	r3, [r3, #5]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 ffd7 	bl	800c8a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	791b      	ldrb	r3, [r3, #4]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 ffd1 	bl	800c8a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	701a      	strb	r2, [r3, #0]
      break;
 800b90a:	e0a5      	b.n	800ba58 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f965 	bl	800bbe4 <USBH_Get_CfgDesc>
 800b91a:	4603      	mov	r3, r0
 800b91c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d103      	bne.n	800b92c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2205      	movs	r2, #5
 800b928:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b92a:	e097      	b.n	800ba5c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	2b03      	cmp	r3, #3
 800b930:	f040 8094 	bne.w	800ba5c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b93a:	3301      	adds	r3, #1
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d903      	bls.n	800b956 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	220d      	movs	r2, #13
 800b952:	701a      	strb	r2, [r3, #0]
      break;
 800b954:	e082      	b.n	800ba5c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	795b      	ldrb	r3, [r3, #5]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 ff9f 	bl	800c8a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	791b      	ldrb	r3, [r3, #4]
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 ff99 	bl	800c8a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	701a      	strb	r2, [r3, #0]
      break;
 800b97a:	e06f      	b.n	800ba5c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b982:	2b00      	cmp	r3, #0
 800b984:	d019      	beq.n	800b9ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b992:	23ff      	movs	r3, #255	; 0xff
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f949 	bl	800bc2c <USBH_Get_StringDesc>
 800b99a:	4603      	mov	r3, r0
 800b99c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b99e:	7bbb      	ldrb	r3, [r7, #14]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2206      	movs	r2, #6
 800b9a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b9aa:	e059      	b.n	800ba60 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d156      	bne.n	800ba60 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2206      	movs	r2, #6
 800b9b6:	705a      	strb	r2, [r3, #1]
      break;
 800b9b8:	e052      	b.n	800ba60 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2206      	movs	r2, #6
 800b9be:	705a      	strb	r2, [r3, #1]
      break;
 800b9c0:	e04e      	b.n	800ba60 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d019      	beq.n	800ba00 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9d8:	23ff      	movs	r3, #255	; 0xff
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f926 	bl	800bc2c <USBH_Get_StringDesc>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d103      	bne.n	800b9f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2207      	movs	r2, #7
 800b9ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b9f0:	e038      	b.n	800ba64 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9f2:	7bbb      	ldrb	r3, [r7, #14]
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	d135      	bne.n	800ba64 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2207      	movs	r2, #7
 800b9fc:	705a      	strb	r2, [r3, #1]
      break;
 800b9fe:	e031      	b.n	800ba64 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2207      	movs	r2, #7
 800ba04:	705a      	strb	r2, [r3, #1]
      break;
 800ba06:	e02d      	b.n	800ba64 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d017      	beq.n	800ba42 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba1e:	23ff      	movs	r3, #255	; 0xff
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f903 	bl	800bc2c <USBH_Get_StringDesc>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ba34:	e018      	b.n	800ba68 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba36:	7bbb      	ldrb	r3, [r7, #14]
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d115      	bne.n	800ba68 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba40:	e012      	b.n	800ba68 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
      break;
 800ba46:	e00f      	b.n	800ba68 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ba48:	bf00      	nop
 800ba4a:	e00e      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba4c:	bf00      	nop
 800ba4e:	e00c      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba50:	bf00      	nop
 800ba52:	e00a      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba54:	bf00      	nop
 800ba56:	e008      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba58:	bf00      	nop
 800ba5a:	e006      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba5c:	bf00      	nop
 800ba5e:	e004      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba60:	bf00      	nop
 800ba62:	e002      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba64:	bf00      	nop
 800ba66:	e000      	b.n	800ba6a <USBH_HandleEnum+0x3be>
      break;
 800ba68:	bf00      	nop
  }
  return Status;
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	683a      	ldr	r2, [r7, #0]
 800ba82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 f804 	bl	800bab6 <USBH_HandleSof>
}
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	2b0b      	cmp	r3, #11
 800bac6:	d10a      	bne.n	800bade <USBH_HandleSof+0x28>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	4798      	blx	r3
  }
}
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2201      	movs	r2, #1
 800baf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800baf6:	bf00      	nop
}
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800bb02:	b480      	push	{r7}
 800bb04:	b083      	sub	sp, #12
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bb12:	bf00      	nop
}
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f001 f8a6 	bl	800ccbe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	791b      	ldrb	r3, [r3, #4]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fe91 	bl	800c8a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	795b      	ldrb	r3, [r3, #5]
 800bb82:	4619      	mov	r1, r3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fe8b 	bl	800c8a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af02      	add	r7, sp, #8
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	4613      	mov	r3, r2
 800bbae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f864 	bl	800bc82 <USBH_GetDescriptor>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbd0:	78fa      	ldrb	r2, [r7, #3]
 800bbd2:	b292      	uxth	r2, r2
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	f000 f918 	bl	800be0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af02      	add	r7, sp, #8
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	331c      	adds	r3, #28
 800bbf4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbf6:	887b      	ldrh	r3, [r7, #2]
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc00:	2100      	movs	r1, #0
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f83d 	bl	800bc82 <USBH_GetDescriptor>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d107      	bne.n	800bc22 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bc12:	887b      	ldrh	r3, [r7, #2]
 800bc14:	461a      	mov	r2, r3
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 f987 	bl	800bf2c <USBH_ParseCfgDesc>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af02      	add	r7, sp, #8
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	607a      	str	r2, [r7, #4]
 800bc36:	461a      	mov	r2, r3
 800bc38:	460b      	mov	r3, r1
 800bc3a:	72fb      	strb	r3, [r7, #11]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800bc40:	7afb      	ldrb	r3, [r7, #11]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bc48:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800bc50:	893b      	ldrh	r3, [r7, #8]
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	460b      	mov	r3, r1
 800bc56:	2100      	movs	r1, #0
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f000 f812 	bl	800bc82 <USBH_GetDescriptor>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d107      	bne.n	800bc78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc6e:	893a      	ldrh	r2, [r7, #8]
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f000 fb24 	bl	800c2c0 <USBH_ParseStringDesc>
  }

  return status;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	60f8      	str	r0, [r7, #12]
 800bc8a:	607b      	str	r3, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	72fb      	strb	r3, [r7, #11]
 800bc90:	4613      	mov	r3, r2
 800bc92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	789b      	ldrb	r3, [r3, #2]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d11c      	bne.n	800bcd6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc9c:	7afb      	ldrb	r3, [r7, #11]
 800bc9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2206      	movs	r2, #6
 800bcac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	893a      	ldrh	r2, [r7, #8]
 800bcb2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bcb4:	893b      	ldrh	r3, [r7, #8]
 800bcb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bcba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcbe:	d104      	bne.n	800bcca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f240 4209 	movw	r2, #1033	; 0x409
 800bcc6:	829a      	strh	r2, [r3, #20]
 800bcc8:	e002      	b.n	800bcd0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	8b3a      	ldrh	r2, [r7, #24]
 800bcd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bcd6:	8b3b      	ldrh	r3, [r7, #24]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 fb3d 	bl	800c35c <USBH_CtlReq>
 800bce2:	4603      	mov	r3, r0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	789b      	ldrb	r3, [r3, #2]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d10f      	bne.n	800bd20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2205      	movs	r2, #5
 800bd0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd20:	2200      	movs	r2, #0
 800bd22:	2100      	movs	r1, #0
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fb19 	bl	800c35c <USBH_CtlReq>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	789b      	ldrb	r3, [r3, #2]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d10e      	bne.n	800bd66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2209      	movs	r2, #9
 800bd52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	887a      	ldrh	r2, [r7, #2]
 800bd58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd66:	2200      	movs	r2, #0
 800bd68:	2100      	movs	r1, #0
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 faf6 	bl	800c35c <USBH_CtlReq>
 800bd70:	4603      	mov	r3, r0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b082      	sub	sp, #8
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
 800bd82:	460b      	mov	r3, r1
 800bd84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	789b      	ldrb	r3, [r3, #2]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d10f      	bne.n	800bdae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2203      	movs	r2, #3
 800bd98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 fad2 	bl	800c35c <USBH_CtlReq>
 800bdb8:	4603      	mov	r3, r0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	789b      	ldrb	r3, [r3, #2]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d10f      	bne.n	800bdf6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2202      	movs	r2, #2
 800bdda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 faae 	bl	800c35c <USBH_CtlReq>
 800be00:	4603      	mov	r3, r0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	60f8      	str	r0, [r7, #12]
 800be12:	60b9      	str	r1, [r7, #8]
 800be14:	4613      	mov	r3, r2
 800be16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	785a      	ldrb	r2, [r3, #1]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	3302      	adds	r3, #2
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b29a      	uxth	r2, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	3303      	adds	r3, #3
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	b29b      	uxth	r3, r3
 800be38:	021b      	lsls	r3, r3, #8
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	4313      	orrs	r3, r2
 800be3e:	b29a      	uxth	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	791a      	ldrb	r2, [r3, #4]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	795a      	ldrb	r2, [r3, #5]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	799a      	ldrb	r2, [r3, #6]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	79da      	ldrb	r2, [r3, #7]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	79db      	ldrb	r3, [r3, #7]
 800be68:	2b20      	cmp	r3, #32
 800be6a:	dc11      	bgt.n	800be90 <USBH_ParseDevDesc+0x86>
 800be6c:	2b08      	cmp	r3, #8
 800be6e:	db16      	blt.n	800be9e <USBH_ParseDevDesc+0x94>
 800be70:	3b08      	subs	r3, #8
 800be72:	2201      	movs	r2, #1
 800be74:	fa02 f303 	lsl.w	r3, r2, r3
 800be78:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800be7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be80:	2b00      	cmp	r3, #0
 800be82:	bf14      	ite	ne
 800be84:	2301      	movne	r3, #1
 800be86:	2300      	moveq	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d102      	bne.n	800be94 <USBH_ParseDevDesc+0x8a>
 800be8e:	e006      	b.n	800be9e <USBH_ParseDevDesc+0x94>
 800be90:	2b40      	cmp	r3, #64	; 0x40
 800be92:	d104      	bne.n	800be9e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	79da      	ldrb	r2, [r3, #7]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	71da      	strb	r2, [r3, #7]
      break;
 800be9c:	e003      	b.n	800bea6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2240      	movs	r2, #64	; 0x40
 800bea2:	71da      	strb	r2, [r3, #7]
      break;
 800bea4:	bf00      	nop
  }

  if (length > 8U)
 800bea6:	88fb      	ldrh	r3, [r7, #6]
 800bea8:	2b08      	cmp	r3, #8
 800beaa:	d939      	bls.n	800bf20 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	3308      	adds	r3, #8
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	3309      	adds	r3, #9
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4313      	orrs	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	330a      	adds	r3, #10
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	b29a      	uxth	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	330b      	adds	r3, #11
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	b29b      	uxth	r3, r3
 800bedc:	4313      	orrs	r3, r2
 800bede:	b29a      	uxth	r2, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	330c      	adds	r3, #12
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	b29a      	uxth	r2, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	330d      	adds	r3, #13
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	021b      	lsls	r3, r3, #8
 800bef6:	b29b      	uxth	r3, r3
 800bef8:	4313      	orrs	r3, r2
 800befa:	b29a      	uxth	r2, r3
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	7b9a      	ldrb	r2, [r3, #14]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	7bda      	ldrb	r2, [r3, #15]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	7c1a      	ldrb	r2, [r3, #16]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	7c5a      	ldrb	r2, [r3, #17]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	745a      	strb	r2, [r3, #17]
  }
}
 800bf20:	bf00      	nop
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08c      	sub	sp, #48	; 0x30
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bf40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	781a      	ldrb	r2, [r3, #0]
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	785a      	ldrb	r2, [r3, #1]
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	3302      	adds	r3, #2
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	3303      	adds	r3, #3
 800bf78:	781b      	ldrb	r3, [r3, #0]
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	021b      	lsls	r3, r3, #8
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4313      	orrs	r3, r2
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf88:	bf28      	it	cs
 800bf8a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	791a      	ldrb	r2, [r3, #4]
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	795a      	ldrb	r2, [r3, #5]
 800bfa0:	6a3b      	ldr	r3, [r7, #32]
 800bfa2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	799a      	ldrb	r2, [r3, #6]
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	79da      	ldrb	r2, [r3, #7]
 800bfb0:	6a3b      	ldr	r3, [r7, #32]
 800bfb2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	7a1a      	ldrb	r2, [r3, #8]
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800bfbc:	6a3b      	ldr	r3, [r7, #32]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	2b09      	cmp	r3, #9
 800bfc2:	d002      	beq.n	800bfca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
 800bfc6:	2209      	movs	r2, #9
 800bfc8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfca:	88fb      	ldrh	r3, [r7, #6]
 800bfcc:	2b09      	cmp	r3, #9
 800bfce:	f240 809d 	bls.w	800c10c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfd2:	2309      	movs	r3, #9
 800bfd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfda:	e081      	b.n	800c0e0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfdc:	f107 0316 	add.w	r3, r7, #22
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfe4:	f000 f99f 	bl	800c326 <USBH_GetNextDesc>
 800bfe8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	785b      	ldrb	r3, [r3, #1]
 800bfee:	2b04      	cmp	r3, #4
 800bff0:	d176      	bne.n	800c0e0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b09      	cmp	r3, #9
 800bff8:	d002      	beq.n	800c000 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	2209      	movs	r2, #9
 800bffe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c004:	221a      	movs	r2, #26
 800c006:	fb02 f303 	mul.w	r3, r2, r3
 800c00a:	3308      	adds	r3, #8
 800c00c:	6a3a      	ldr	r2, [r7, #32]
 800c00e:	4413      	add	r3, r2
 800c010:	3302      	adds	r3, #2
 800c012:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c016:	69f8      	ldr	r0, [r7, #28]
 800c018:	f000 f87e 	bl	800c118 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c026:	e043      	b.n	800c0b0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c028:	f107 0316 	add.w	r3, r7, #22
 800c02c:	4619      	mov	r1, r3
 800c02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c030:	f000 f979 	bl	800c326 <USBH_GetNextDesc>
 800c034:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	785b      	ldrb	r3, [r3, #1]
 800c03a:	2b05      	cmp	r3, #5
 800c03c:	d138      	bne.n	800c0b0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	795b      	ldrb	r3, [r3, #5]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d10f      	bne.n	800c066 <USBH_ParseCfgDesc+0x13a>
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	799b      	ldrb	r3, [r3, #6]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d10b      	bne.n	800c066 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	79db      	ldrb	r3, [r3, #7]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10f      	bne.n	800c076 <USBH_ParseCfgDesc+0x14a>
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	2b09      	cmp	r3, #9
 800c05c:	d00b      	beq.n	800c076 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c060:	2209      	movs	r2, #9
 800c062:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c064:	e007      	b.n	800c076 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b07      	cmp	r3, #7
 800c06c:	d004      	beq.n	800c078 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c070:	2207      	movs	r2, #7
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	e000      	b.n	800c078 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c076:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c07c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c080:	3201      	adds	r2, #1
 800c082:	00d2      	lsls	r2, r2, #3
 800c084:	211a      	movs	r1, #26
 800c086:	fb01 f303 	mul.w	r3, r1, r3
 800c08a:	4413      	add	r3, r2
 800c08c:	3308      	adds	r3, #8
 800c08e:	6a3a      	ldr	r2, [r7, #32]
 800c090:	4413      	add	r3, r2
 800c092:	3304      	adds	r3, #4
 800c094:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c098:	69b9      	ldr	r1, [r7, #24]
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f000 f86b 	bl	800c176 <USBH_ParseEPDesc>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c0a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	791b      	ldrb	r3, [r3, #4]
 800c0b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d204      	bcs.n	800c0c6 <USBH_ParseCfgDesc+0x19a>
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	885a      	ldrh	r2, [r3, #2]
 800c0c0:	8afb      	ldrh	r3, [r7, #22]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d8b0      	bhi.n	800c028 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	791b      	ldrb	r3, [r3, #4]
 800c0ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d201      	bcs.n	800c0d6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	e01c      	b.n	800c110 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0da:	3301      	adds	r3, #1
 800c0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e4:	2b01      	cmp	r3, #1
 800c0e6:	d805      	bhi.n	800c0f4 <USBH_ParseCfgDesc+0x1c8>
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	885a      	ldrh	r2, [r3, #2]
 800c0ec:	8afb      	ldrh	r3, [r7, #22]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	f63f af74 	bhi.w	800bfdc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	791b      	ldrb	r3, [r3, #4]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	bf28      	it	cs
 800c0fc:	2302      	movcs	r3, #2
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c104:	429a      	cmp	r2, r3
 800c106:	d201      	bcs.n	800c10c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c108:	2303      	movs	r3, #3
 800c10a:	e001      	b.n	800c110 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c10c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c110:	4618      	mov	r0, r3
 800c112:	3730      	adds	r7, #48	; 0x30
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	781a      	ldrb	r2, [r3, #0]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	785a      	ldrb	r2, [r3, #1]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	789a      	ldrb	r2, [r3, #2]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	78da      	ldrb	r2, [r3, #3]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	791a      	ldrb	r2, [r3, #4]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	795a      	ldrb	r2, [r3, #5]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	799a      	ldrb	r2, [r3, #6]
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	79da      	ldrb	r2, [r3, #7]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	7a1a      	ldrb	r2, [r3, #8]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	721a      	strb	r2, [r3, #8]
}
 800c16a:	bf00      	nop
 800c16c:	370c      	adds	r7, #12
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c176:	b480      	push	{r7}
 800c178:	b087      	sub	sp, #28
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	781a      	ldrb	r2, [r3, #0]
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	785a      	ldrb	r2, [r3, #1]
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	789a      	ldrb	r2, [r3, #2]
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	78da      	ldrb	r2, [r3, #3]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3305      	adds	r3, #5
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	021b      	lsls	r3, r3, #8
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	799a      	ldrb	r2, [r3, #6]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	889b      	ldrh	r3, [r3, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d102      	bne.n	800c1d8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c1d2:	2303      	movs	r3, #3
 800c1d4:	75fb      	strb	r3, [r7, #23]
 800c1d6:	e033      	b.n	800c240 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	889b      	ldrh	r3, [r3, #4]
 800c1dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c1e0:	f023 0307 	bic.w	r3, r3, #7
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	889b      	ldrh	r3, [r3, #4]
 800c1ee:	b21a      	sxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	3304      	adds	r3, #4
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b299      	uxth	r1, r3
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3305      	adds	r3, #5
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	021b      	lsls	r3, r3, #8
 800c202:	b29b      	uxth	r3, r3
 800c204:	430b      	orrs	r3, r1
 800c206:	b29b      	uxth	r3, r3
 800c208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d110      	bne.n	800c232 <USBH_ParseEPDesc+0xbc>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3304      	adds	r3, #4
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b299      	uxth	r1, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	3305      	adds	r3, #5
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	b29b      	uxth	r3, r3
 800c220:	021b      	lsls	r3, r3, #8
 800c222:	b29b      	uxth	r3, r3
 800c224:	430b      	orrs	r3, r1
 800c226:	b29b      	uxth	r3, r3
 800c228:	b21b      	sxth	r3, r3
 800c22a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c22e:	b21b      	sxth	r3, r3
 800c230:	e001      	b.n	800c236 <USBH_ParseEPDesc+0xc0>
 800c232:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c236:	4313      	orrs	r3, r2
 800c238:	b21b      	sxth	r3, r3
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c246:	2b00      	cmp	r3, #0
 800c248:	d116      	bne.n	800c278 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	78db      	ldrb	r3, [r3, #3]
 800c24e:	f003 0303 	and.w	r3, r3, #3
 800c252:	2b01      	cmp	r3, #1
 800c254:	d005      	beq.n	800c262 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	78db      	ldrb	r3, [r3, #3]
 800c25a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d127      	bne.n	800c2b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	799b      	ldrb	r3, [r3, #6]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <USBH_ParseEPDesc+0xfc>
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	799b      	ldrb	r3, [r3, #6]
 800c26e:	2b10      	cmp	r3, #16
 800c270:	d91f      	bls.n	800c2b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c272:	2303      	movs	r3, #3
 800c274:	75fb      	strb	r3, [r7, #23]
 800c276:	e01c      	b.n	800c2b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	78db      	ldrb	r3, [r3, #3]
 800c27c:	f003 0303 	and.w	r3, r3, #3
 800c280:	2b01      	cmp	r3, #1
 800c282:	d10a      	bne.n	800c29a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	799b      	ldrb	r3, [r3, #6]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d003      	beq.n	800c294 <USBH_ParseEPDesc+0x11e>
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	799b      	ldrb	r3, [r3, #6]
 800c290:	2b10      	cmp	r3, #16
 800c292:	d90e      	bls.n	800c2b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c294:	2303      	movs	r3, #3
 800c296:	75fb      	strb	r3, [r7, #23]
 800c298:	e00b      	b.n	800c2b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	78db      	ldrb	r3, [r3, #3]
 800c29e:	f003 0303 	and.w	r3, r3, #3
 800c2a2:	2b03      	cmp	r3, #3
 800c2a4:	d105      	bne.n	800c2b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	799b      	ldrb	r3, [r3, #6]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	371c      	adds	r7, #28
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d120      	bne.n	800c31a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	1e9a      	subs	r2, r3, #2
 800c2de:	88fb      	ldrh	r3, [r7, #6]
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	bf28      	it	cs
 800c2e4:	4613      	movcs	r3, r2
 800c2e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3302      	adds	r3, #2
 800c2ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	82fb      	strh	r3, [r7, #22]
 800c2f2:	e00b      	b.n	800c30c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c2f4:	8afb      	ldrh	r3, [r7, #22]
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	781a      	ldrb	r2, [r3, #0]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	3301      	adds	r3, #1
 800c304:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c306:	8afb      	ldrh	r3, [r7, #22]
 800c308:	3302      	adds	r3, #2
 800c30a:	82fb      	strh	r3, [r7, #22]
 800c30c:	8afa      	ldrh	r2, [r7, #22]
 800c30e:	8abb      	ldrh	r3, [r7, #20]
 800c310:	429a      	cmp	r2, r3
 800c312:	d3ef      	bcc.n	800c2f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	2200      	movs	r2, #0
 800c318:	701a      	strb	r2, [r3, #0]
  }
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c326:	b480      	push	{r7}
 800c328:	b085      	sub	sp, #20
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
 800c32e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	881a      	ldrh	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4413      	add	r3, r2
 800c33c:	b29a      	uxth	r2, r3
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4413      	add	r3, r2
 800c34c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c34e:	68fb      	ldr	r3, [r7, #12]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4613      	mov	r3, r2
 800c368:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c36a:	2301      	movs	r3, #1
 800c36c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	789b      	ldrb	r3, [r3, #2]
 800c372:	2b01      	cmp	r3, #1
 800c374:	d002      	beq.n	800c37c <USBH_CtlReq+0x20>
 800c376:	2b02      	cmp	r3, #2
 800c378:	d00f      	beq.n	800c39a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c37a:	e027      	b.n	800c3cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	88fa      	ldrh	r2, [r7, #6]
 800c386:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2202      	movs	r2, #2
 800c392:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c394:	2301      	movs	r3, #1
 800c396:	75fb      	strb	r3, [r7, #23]
      break;
 800c398:	e018      	b.n	800c3cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c39a:	68f8      	ldr	r0, [r7, #12]
 800c39c:	f000 f81c 	bl	800c3d8 <USBH_HandleControl>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <USBH_CtlReq+0x54>
 800c3aa:	7dfb      	ldrb	r3, [r7, #23]
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d106      	bne.n	800c3be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	761a      	strb	r2, [r3, #24]
      break;
 800c3bc:	e005      	b.n	800c3ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d102      	bne.n	800c3ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	709a      	strb	r2, [r3, #2]
      break;
 800c3ca:	bf00      	nop
  }
  return status;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af02      	add	r7, sp, #8
 800c3de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	7e1b      	ldrb	r3, [r3, #24]
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	2b0a      	cmp	r3, #10
 800c3f0:	f200 8156 	bhi.w	800c6a0 <USBH_HandleControl+0x2c8>
 800c3f4:	a201      	add	r2, pc, #4	; (adr r2, 800c3fc <USBH_HandleControl+0x24>)
 800c3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3fa:	bf00      	nop
 800c3fc:	0800c429 	.word	0x0800c429
 800c400:	0800c443 	.word	0x0800c443
 800c404:	0800c4ad 	.word	0x0800c4ad
 800c408:	0800c4d3 	.word	0x0800c4d3
 800c40c:	0800c50b 	.word	0x0800c50b
 800c410:	0800c535 	.word	0x0800c535
 800c414:	0800c587 	.word	0x0800c587
 800c418:	0800c5a9 	.word	0x0800c5a9
 800c41c:	0800c5e5 	.word	0x0800c5e5
 800c420:	0800c60b 	.word	0x0800c60b
 800c424:	0800c649 	.word	0x0800c649
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f103 0110 	add.w	r1, r3, #16
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	795b      	ldrb	r3, [r3, #5]
 800c432:	461a      	mov	r2, r3
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f943 	bl	800c6c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2202      	movs	r2, #2
 800c43e:	761a      	strb	r2, [r3, #24]
      break;
 800c440:	e139      	b.n	800c6b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	795b      	ldrb	r3, [r3, #5]
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 fd27 	bl	800ce9c <USBH_LL_GetURBState>
 800c44e:	4603      	mov	r3, r0
 800c450:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d11e      	bne.n	800c496 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	7c1b      	ldrb	r3, [r3, #16]
 800c45c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c460:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	8adb      	ldrh	r3, [r3, #22]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00a      	beq.n	800c480 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c46a:	7b7b      	ldrb	r3, [r7, #13]
 800c46c:	2b80      	cmp	r3, #128	; 0x80
 800c46e:	d103      	bne.n	800c478 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2203      	movs	r2, #3
 800c474:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c476:	e115      	b.n	800c6a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2205      	movs	r2, #5
 800c47c:	761a      	strb	r2, [r3, #24]
      break;
 800c47e:	e111      	b.n	800c6a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c480:	7b7b      	ldrb	r3, [r7, #13]
 800c482:	2b80      	cmp	r3, #128	; 0x80
 800c484:	d103      	bne.n	800c48e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2209      	movs	r2, #9
 800c48a:	761a      	strb	r2, [r3, #24]
      break;
 800c48c:	e10a      	b.n	800c6a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2207      	movs	r2, #7
 800c492:	761a      	strb	r2, [r3, #24]
      break;
 800c494:	e106      	b.n	800c6a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	2b04      	cmp	r3, #4
 800c49a:	d003      	beq.n	800c4a4 <USBH_HandleControl+0xcc>
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	f040 8100 	bne.w	800c6a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	220b      	movs	r2, #11
 800c4a8:	761a      	strb	r2, [r3, #24]
      break;
 800c4aa:	e0fb      	b.n	800c6a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6899      	ldr	r1, [r3, #8]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	899a      	ldrh	r2, [r3, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	791b      	ldrb	r3, [r3, #4]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f93a 	bl	800c73e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2204      	movs	r2, #4
 800c4ce:	761a      	strb	r2, [r3, #24]
      break;
 800c4d0:	e0f1      	b.n	800c6b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	791b      	ldrb	r3, [r3, #4]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fcdf 	bl	800ce9c <USBH_LL_GetURBState>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d102      	bne.n	800c4ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2209      	movs	r2, #9
 800c4ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b05      	cmp	r3, #5
 800c4f2:	d102      	bne.n	800c4fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c4f8:	e0d6      	b.n	800c6a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c4fa:	7bbb      	ldrb	r3, [r7, #14]
 800c4fc:	2b04      	cmp	r3, #4
 800c4fe:	f040 80d3 	bne.w	800c6a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	220b      	movs	r2, #11
 800c506:	761a      	strb	r2, [r3, #24]
      break;
 800c508:	e0ce      	b.n	800c6a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6899      	ldr	r1, [r3, #8]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	899a      	ldrh	r2, [r3, #12]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	795b      	ldrb	r3, [r3, #5]
 800c516:	2001      	movs	r0, #1
 800c518:	9000      	str	r0, [sp, #0]
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f8ea 	bl	800c6f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c526:	b29a      	uxth	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2206      	movs	r2, #6
 800c530:	761a      	strb	r2, [r3, #24]
      break;
 800c532:	e0c0      	b.n	800c6b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	795b      	ldrb	r3, [r3, #5]
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fcae 	bl	800ce9c <USBH_LL_GetURBState>
 800c540:	4603      	mov	r3, r0
 800c542:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d103      	bne.n	800c552 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2207      	movs	r2, #7
 800c54e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c550:	e0ac      	b.n	800c6ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	2b05      	cmp	r3, #5
 800c556:	d105      	bne.n	800c564 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	220c      	movs	r2, #12
 800c55c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c55e:	2303      	movs	r3, #3
 800c560:	73fb      	strb	r3, [r7, #15]
      break;
 800c562:	e0a3      	b.n	800c6ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c564:	7bbb      	ldrb	r3, [r7, #14]
 800c566:	2b02      	cmp	r3, #2
 800c568:	d103      	bne.n	800c572 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2205      	movs	r2, #5
 800c56e:	761a      	strb	r2, [r3, #24]
      break;
 800c570:	e09c      	b.n	800c6ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c572:	7bbb      	ldrb	r3, [r7, #14]
 800c574:	2b04      	cmp	r3, #4
 800c576:	f040 8099 	bne.w	800c6ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	220b      	movs	r2, #11
 800c57e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c580:	2302      	movs	r3, #2
 800c582:	73fb      	strb	r3, [r7, #15]
      break;
 800c584:	e092      	b.n	800c6ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	791b      	ldrb	r3, [r3, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2100      	movs	r1, #0
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f8d5 	bl	800c73e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2208      	movs	r2, #8
 800c5a4:	761a      	strb	r2, [r3, #24]

      break;
 800c5a6:	e086      	b.n	800c6b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	791b      	ldrb	r3, [r3, #4]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fc74 	bl	800ce9c <USBH_LL_GetURBState>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d105      	bne.n	800c5ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	220d      	movs	r2, #13
 800c5c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c5c8:	e072      	b.n	800c6b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c5ca:	7bbb      	ldrb	r3, [r7, #14]
 800c5cc:	2b04      	cmp	r3, #4
 800c5ce:	d103      	bne.n	800c5d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	220b      	movs	r2, #11
 800c5d4:	761a      	strb	r2, [r3, #24]
      break;
 800c5d6:	e06b      	b.n	800c6b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b05      	cmp	r3, #5
 800c5dc:	d168      	bne.n	800c6b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e2:	e065      	b.n	800c6b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	795b      	ldrb	r3, [r3, #5]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	9200      	str	r2, [sp, #0]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f000 f87f 	bl	800c6f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	220a      	movs	r2, #10
 800c606:	761a      	strb	r2, [r3, #24]
      break;
 800c608:	e055      	b.n	800c6b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	795b      	ldrb	r3, [r3, #5]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fc43 	bl	800ce9c <USBH_LL_GetURBState>
 800c616:	4603      	mov	r3, r0
 800c618:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c61a:	7bbb      	ldrb	r3, [r7, #14]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d105      	bne.n	800c62c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c620:	2300      	movs	r3, #0
 800c622:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	220d      	movs	r2, #13
 800c628:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c62a:	e043      	b.n	800c6b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	2b02      	cmp	r3, #2
 800c630:	d103      	bne.n	800c63a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2209      	movs	r2, #9
 800c636:	761a      	strb	r2, [r3, #24]
      break;
 800c638:	e03c      	b.n	800c6b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b04      	cmp	r3, #4
 800c63e:	d139      	bne.n	800c6b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	220b      	movs	r2, #11
 800c644:	761a      	strb	r2, [r3, #24]
      break;
 800c646:	e035      	b.n	800c6b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	7e5b      	ldrb	r3, [r3, #25]
 800c64c:	3301      	adds	r3, #1
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	765a      	strb	r2, [r3, #25]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7e5b      	ldrb	r3, [r3, #25]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d806      	bhi.n	800c66a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c668:	e025      	b.n	800c6b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c670:	2106      	movs	r1, #6
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	795b      	ldrb	r3, [r3, #5]
 800c680:	4619      	mov	r1, r3
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f90c 	bl	800c8a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	791b      	ldrb	r3, [r3, #4]
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f906 	bl	800c8a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c69a:	2302      	movs	r3, #2
 800c69c:	73fb      	strb	r3, [r7, #15]
      break;
 800c69e:	e00a      	b.n	800c6b6 <USBH_HandleControl+0x2de>

    default:
      break;
 800c6a0:	bf00      	nop
 800c6a2:	e008      	b.n	800c6b6 <USBH_HandleControl+0x2de>
      break;
 800c6a4:	bf00      	nop
 800c6a6:	e006      	b.n	800c6b6 <USBH_HandleControl+0x2de>
      break;
 800c6a8:	bf00      	nop
 800c6aa:	e004      	b.n	800c6b6 <USBH_HandleControl+0x2de>
      break;
 800c6ac:	bf00      	nop
 800c6ae:	e002      	b.n	800c6b6 <USBH_HandleControl+0x2de>
      break;
 800c6b0:	bf00      	nop
 800c6b2:	e000      	b.n	800c6b6 <USBH_HandleControl+0x2de>
      break;
 800c6b4:	bf00      	nop
  }

  return status;
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3710      	adds	r7, #16
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}

0800c6c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b088      	sub	sp, #32
 800c6c4:	af04      	add	r7, sp, #16
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c6ce:	79f9      	ldrb	r1, [r7, #7]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9303      	str	r3, [sp, #12]
 800c6d4:	2308      	movs	r3, #8
 800c6d6:	9302      	str	r3, [sp, #8]
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	9301      	str	r3, [sp, #4]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9300      	str	r3, [sp, #0]
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	68f8      	ldr	r0, [r7, #12]
 800c6e6:	f000 fba8 	bl	800ce3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af04      	add	r7, sp, #16
 800c6fa:	60f8      	str	r0, [r7, #12]
 800c6fc:	60b9      	str	r1, [r7, #8]
 800c6fe:	4611      	mov	r1, r2
 800c700:	461a      	mov	r2, r3
 800c702:	460b      	mov	r3, r1
 800c704:	80fb      	strh	r3, [r7, #6]
 800c706:	4613      	mov	r3, r2
 800c708:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c718:	7979      	ldrb	r1, [r7, #5]
 800c71a:	7e3b      	ldrb	r3, [r7, #24]
 800c71c:	9303      	str	r3, [sp, #12]
 800c71e:	88fb      	ldrh	r3, [r7, #6]
 800c720:	9302      	str	r3, [sp, #8]
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	2301      	movs	r3, #1
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	2300      	movs	r3, #0
 800c72c:	2200      	movs	r2, #0
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	f000 fb83 	bl	800ce3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b088      	sub	sp, #32
 800c742:	af04      	add	r7, sp, #16
 800c744:	60f8      	str	r0, [r7, #12]
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	4611      	mov	r1, r2
 800c74a:	461a      	mov	r2, r3
 800c74c:	460b      	mov	r3, r1
 800c74e:	80fb      	strh	r3, [r7, #6]
 800c750:	4613      	mov	r3, r2
 800c752:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c754:	7979      	ldrb	r1, [r7, #5]
 800c756:	2300      	movs	r3, #0
 800c758:	9303      	str	r3, [sp, #12]
 800c75a:	88fb      	ldrh	r3, [r7, #6]
 800c75c:	9302      	str	r3, [sp, #8]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	2301      	movs	r3, #1
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	2300      	movs	r3, #0
 800c768:	2201      	movs	r2, #1
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f000 fb65 	bl	800ce3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c770:	2300      	movs	r3, #0

}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b088      	sub	sp, #32
 800c77e:	af04      	add	r7, sp, #16
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	60b9      	str	r1, [r7, #8]
 800c784:	4611      	mov	r1, r2
 800c786:	461a      	mov	r2, r3
 800c788:	460b      	mov	r3, r1
 800c78a:	80fb      	strh	r3, [r7, #6]
 800c78c:	4613      	mov	r3, r2
 800c78e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c79a:	2300      	movs	r3, #0
 800c79c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c79e:	7979      	ldrb	r1, [r7, #5]
 800c7a0:	7e3b      	ldrb	r3, [r7, #24]
 800c7a2:	9303      	str	r3, [sp, #12]
 800c7a4:	88fb      	ldrh	r3, [r7, #6]
 800c7a6:	9302      	str	r3, [sp, #8]
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f000 fb40 	bl	800ce3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b088      	sub	sp, #32
 800c7c8:	af04      	add	r7, sp, #16
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	4611      	mov	r1, r2
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	80fb      	strh	r3, [r7, #6]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7da:	7979      	ldrb	r1, [r7, #5]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9303      	str	r3, [sp, #12]
 800c7e0:	88fb      	ldrh	r3, [r7, #6]
 800c7e2:	9302      	str	r3, [sp, #8]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 fb22 	bl	800ce3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b086      	sub	sp, #24
 800c804:	af04      	add	r7, sp, #16
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	4608      	mov	r0, r1
 800c80a:	4611      	mov	r1, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	4603      	mov	r3, r0
 800c810:	70fb      	strb	r3, [r7, #3]
 800c812:	460b      	mov	r3, r1
 800c814:	70bb      	strb	r3, [r7, #2]
 800c816:	4613      	mov	r3, r2
 800c818:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c81a:	7878      	ldrb	r0, [r7, #1]
 800c81c:	78ba      	ldrb	r2, [r7, #2]
 800c81e:	78f9      	ldrb	r1, [r7, #3]
 800c820:	8b3b      	ldrh	r3, [r7, #24]
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	7d3b      	ldrb	r3, [r7, #20]
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	7c3b      	ldrb	r3, [r7, #16]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	4603      	mov	r3, r0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fab5 	bl	800cd9e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
 800c846:	460b      	mov	r3, r1
 800c848:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c84a:	78fb      	ldrb	r3, [r7, #3]
 800c84c:	4619      	mov	r1, r3
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fad4 	bl	800cdfc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c854:	2300      	movs	r3, #0
}
 800c856:	4618      	mov	r0, r3
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f836 	bl	800c8dc <USBH_GetFreePipe>
 800c870:	4603      	mov	r3, r0
 800c872:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c874:	89fb      	ldrh	r3, [r7, #14]
 800c876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00a      	beq.n	800c894 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c87e:	78fa      	ldrb	r2, [r7, #3]
 800c880:	89fb      	ldrh	r3, [r7, #14]
 800c882:	f003 030f 	and.w	r3, r3, #15
 800c886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c88a:	6879      	ldr	r1, [r7, #4]
 800c88c:	33e0      	adds	r3, #224	; 0xe0
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	440b      	add	r3, r1
 800c892:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c894:	89fb      	ldrh	r3, [r7, #14]
 800c896:	b2db      	uxtb	r3, r3
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c8ac:	78fb      	ldrb	r3, [r7, #3]
 800c8ae:	2b0f      	cmp	r3, #15
 800c8b0:	d80d      	bhi.n	800c8ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c8b2:	78fb      	ldrb	r3, [r7, #3]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	33e0      	adds	r3, #224	; 0xe0
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	78fb      	ldrb	r3, [r7, #3]
 800c8c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	33e0      	adds	r3, #224	; 0xe0
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	440b      	add	r3, r1
 800c8cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	73fb      	strb	r3, [r7, #15]
 800c8ec:	e00f      	b.n	800c90e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	33e0      	adds	r3, #224	; 0xe0
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	4413      	add	r3, r2
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d102      	bne.n	800c908 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	b29b      	uxth	r3, r3
 800c906:	e007      	b.n	800c918 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c908:	7bfb      	ldrb	r3, [r7, #15]
 800c90a:	3301      	adds	r3, #1
 800c90c:	73fb      	strb	r3, [r7, #15]
 800c90e:	7bfb      	ldrb	r3, [r7, #15]
 800c910:	2b0f      	cmp	r3, #15
 800c912:	d9ec      	bls.n	800c8ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c914:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	4613      	mov	r3, r2
 800c930:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c932:	2301      	movs	r3, #1
 800c934:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c93a:	4b1f      	ldr	r3, [pc, #124]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c93c:	7a5b      	ldrb	r3, [r3, #9]
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	2b00      	cmp	r3, #0
 800c942:	d131      	bne.n	800c9a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c944:	4b1c      	ldr	r3, [pc, #112]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c946:	7a5b      	ldrb	r3, [r3, #9]
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	461a      	mov	r2, r3
 800c94c:	4b1a      	ldr	r3, [pc, #104]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c94e:	2100      	movs	r1, #0
 800c950:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c952:	4b19      	ldr	r3, [pc, #100]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c954:	7a5b      	ldrb	r3, [r3, #9]
 800c956:	b2db      	uxtb	r3, r3
 800c958:	4a17      	ldr	r2, [pc, #92]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c962:	4b15      	ldr	r3, [pc, #84]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c964:	7a5b      	ldrb	r3, [r3, #9]
 800c966:	b2db      	uxtb	r3, r3
 800c968:	461a      	mov	r2, r3
 800c96a:	4b13      	ldr	r3, [pc, #76]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c96c:	4413      	add	r3, r2
 800c96e:	79fa      	ldrb	r2, [r7, #7]
 800c970:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c972:	4b11      	ldr	r3, [pc, #68]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c974:	7a5b      	ldrb	r3, [r3, #9]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	b2d1      	uxtb	r1, r2
 800c97c:	4a0e      	ldr	r2, [pc, #56]	; (800c9b8 <FATFS_LinkDriverEx+0x94>)
 800c97e:	7251      	strb	r1, [r2, #9]
 800c980:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c982:	7dbb      	ldrb	r3, [r7, #22]
 800c984:	3330      	adds	r3, #48	; 0x30
 800c986:	b2da      	uxtb	r2, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	3301      	adds	r3, #1
 800c990:	223a      	movs	r2, #58	; 0x3a
 800c992:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	3302      	adds	r3, #2
 800c998:	222f      	movs	r2, #47	; 0x2f
 800c99a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3303      	adds	r3, #3
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	371c      	adds	r7, #28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	20000498 	.word	0x20000498

0800c9bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7ff ffaa 	bl	800c924 <FATFS_LinkDriverEx>
 800c9d0:	4603      	mov	r3, r0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3708      	adds	r7, #8
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	490e      	ldr	r1, [pc, #56]	; (800ca1c <MX_USB_HOST_Init+0x40>)
 800c9e4:	480e      	ldr	r0, [pc, #56]	; (800ca20 <MX_USB_HOST_Init+0x44>)
 800c9e6:	f7fe fb4b 	bl	800b080 <USBH_Init>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c9f0:	f7f5 f9da 	bl	8001da8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800c9f4:	490b      	ldr	r1, [pc, #44]	; (800ca24 <MX_USB_HOST_Init+0x48>)
 800c9f6:	480a      	ldr	r0, [pc, #40]	; (800ca20 <MX_USB_HOST_Init+0x44>)
 800c9f8:	f7fe fbd0 	bl	800b19c <USBH_RegisterClass>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ca02:	f7f5 f9d1 	bl	8001da8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ca06:	4806      	ldr	r0, [pc, #24]	; (800ca20 <MX_USB_HOST_Init+0x44>)
 800ca08:	f7fe fc54 	bl	800b2b4 <USBH_Start>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ca12:	f7f5 f9c9 	bl	8001da8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ca16:	bf00      	nop
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	0800ca3d 	.word	0x0800ca3d
 800ca20:	200004a4 	.word	0x200004a4
 800ca24:	200000d0 	.word	0x200000d0

0800ca28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800ca2c:	4802      	ldr	r0, [pc, #8]	; (800ca38 <MX_USB_HOST_Process+0x10>)
 800ca2e:	f7fe fc51 	bl	800b2d4 <USBH_Process>
}
 800ca32:	bf00      	nop
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	200004a4 	.word	0x200004a4

0800ca3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	460b      	mov	r3, r1
 800ca46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ca48:	78fb      	ldrb	r3, [r7, #3]
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	2b04      	cmp	r3, #4
 800ca4e:	d819      	bhi.n	800ca84 <USBH_UserProcess+0x48>
 800ca50:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <USBH_UserProcess+0x1c>)
 800ca52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca56:	bf00      	nop
 800ca58:	0800ca85 	.word	0x0800ca85
 800ca5c:	0800ca75 	.word	0x0800ca75
 800ca60:	0800ca85 	.word	0x0800ca85
 800ca64:	0800ca7d 	.word	0x0800ca7d
 800ca68:	0800ca6d 	.word	0x0800ca6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <USBH_UserProcess+0x58>)
 800ca6e:	2203      	movs	r2, #3
 800ca70:	701a      	strb	r2, [r3, #0]
  break;
 800ca72:	e008      	b.n	800ca86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ca74:	4b07      	ldr	r3, [pc, #28]	; (800ca94 <USBH_UserProcess+0x58>)
 800ca76:	2202      	movs	r2, #2
 800ca78:	701a      	strb	r2, [r3, #0]
  break;
 800ca7a:	e004      	b.n	800ca86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ca7c:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <USBH_UserProcess+0x58>)
 800ca7e:	2201      	movs	r2, #1
 800ca80:	701a      	strb	r2, [r3, #0]
  break;
 800ca82:	e000      	b.n	800ca86 <USBH_UserProcess+0x4a>

  default:
  break;
 800ca84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ca86:	bf00      	nop
 800ca88:	370c      	adds	r7, #12
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	2000087c 	.word	0x2000087c

0800ca98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800caa0:	f107 0314 	add.w	r3, r7, #20
 800caa4:	2200      	movs	r2, #0
 800caa6:	601a      	str	r2, [r3, #0]
 800caa8:	605a      	str	r2, [r3, #4]
 800caaa:	609a      	str	r2, [r3, #8]
 800caac:	60da      	str	r2, [r3, #12]
 800caae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a24      	ldr	r2, [pc, #144]	; (800cb48 <HAL_HCD_MspInit+0xb0>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d141      	bne.n	800cb3e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800caba:	2300      	movs	r3, #0
 800cabc:	613b      	str	r3, [r7, #16]
 800cabe:	4b23      	ldr	r3, [pc, #140]	; (800cb4c <HAL_HCD_MspInit+0xb4>)
 800cac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac2:	4a22      	ldr	r2, [pc, #136]	; (800cb4c <HAL_HCD_MspInit+0xb4>)
 800cac4:	f043 0302 	orr.w	r3, r3, #2
 800cac8:	6313      	str	r3, [r2, #48]	; 0x30
 800caca:	4b20      	ldr	r3, [pc, #128]	; (800cb4c <HAL_HCD_MspInit+0xb4>)
 800cacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cace:	f003 0302 	and.w	r3, r3, #2
 800cad2:	613b      	str	r3, [r7, #16]
 800cad4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cad6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800cada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cadc:	2302      	movs	r3, #2
 800cade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cae0:	2300      	movs	r3, #0
 800cae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cae4:	2300      	movs	r3, #0
 800cae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cae8:	230c      	movs	r3, #12
 800caea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800caec:	f107 0314 	add.w	r3, r7, #20
 800caf0:	4619      	mov	r1, r3
 800caf2:	4817      	ldr	r0, [pc, #92]	; (800cb50 <HAL_HCD_MspInit+0xb8>)
 800caf4:	f7f5 ffba 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800caf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cafc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cafe:	2300      	movs	r3, #0
 800cb00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cb06:	f107 0314 	add.w	r3, r7, #20
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	4810      	ldr	r0, [pc, #64]	; (800cb50 <HAL_HCD_MspInit+0xb8>)
 800cb0e:	f7f5 ffad 	bl	8002a6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]
 800cb16:	4b0d      	ldr	r3, [pc, #52]	; (800cb4c <HAL_HCD_MspInit+0xb4>)
 800cb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb1a:	4a0c      	ldr	r2, [pc, #48]	; (800cb4c <HAL_HCD_MspInit+0xb4>)
 800cb1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cb20:	6313      	str	r3, [r2, #48]	; 0x30
 800cb22:	4b0a      	ldr	r3, [pc, #40]	; (800cb4c <HAL_HCD_MspInit+0xb4>)
 800cb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cb2e:	2200      	movs	r2, #0
 800cb30:	2100      	movs	r1, #0
 800cb32:	204d      	movs	r0, #77	; 0x4d
 800cb34:	f7f5 feb5 	bl	80028a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cb38:	204d      	movs	r0, #77	; 0x4d
 800cb3a:	f7f5 fece 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cb3e:	bf00      	nop
 800cb40:	3728      	adds	r7, #40	; 0x28
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	40040000 	.word	0x40040000
 800cb4c:	40023800 	.word	0x40023800
 800cb50:	40020400 	.word	0x40020400

0800cb54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe ff95 	bl	800ba92 <USBH_LL_IncTimer>
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe ffcd 	bl	800bb1e <USBH_LL_Connect>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fe ffd6 	bl	800bb4c <USBH_LL_Disconnect>
}
 800cba0:	bf00      	nop
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	70fb      	strb	r3, [r7, #3]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe ff87 	bl	800bae6 <USBH_LL_PortEnabled>
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7fe ff87 	bl	800bb02 <USBH_LL_PortDisabled>
}
 800cbf4:	bf00      	nop
 800cbf6:	3708      	adds	r7, #8
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d132      	bne.n	800cc74 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cc0e:	4a1c      	ldr	r2, [pc, #112]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a19      	ldr	r2, [pc, #100]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc1a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cc1e:	4b18      	ldr	r3, [pc, #96]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc20:	4a18      	ldr	r2, [pc, #96]	; (800cc84 <USBH_LL_Init+0x88>)
 800cc22:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800cc24:	4b16      	ldr	r3, [pc, #88]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc26:	220c      	movs	r2, #12
 800cc28:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cc2a:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cc30:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc32:	2200      	movs	r2, #0
 800cc34:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cc36:	4b12      	ldr	r3, [pc, #72]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc38:	2202      	movs	r2, #2
 800cc3a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cc3c:	4b10      	ldr	r3, [pc, #64]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cc42:	4b0f      	ldr	r3, [pc, #60]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc44:	2200      	movs	r2, #0
 800cc46:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cc48:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cc4e:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cc54:	480a      	ldr	r0, [pc, #40]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc56:	f7f6 f8ff 	bl	8002e58 <HAL_HCD_Init>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cc60:	f7f5 f8a2 	bl	8001da8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cc64:	4806      	ldr	r0, [pc, #24]	; (800cc80 <USBH_LL_Init+0x84>)
 800cc66:	f7f6 fce2 	bl	800362e <HAL_HCD_GetCurrentFrame>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f7fe ff00 	bl	800ba74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3708      	adds	r7, #8
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000880 	.word	0x20000880
 800cc84:	40040000 	.word	0x40040000

0800cc88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc90:	2300      	movs	r3, #0
 800cc92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f6 fc4f 	bl	8003542 <HAL_HCD_Start>
 800cca4:	4603      	mov	r3, r0
 800cca6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 f98c 	bl	800cfc8 <USBH_Get_USB_Status>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7f6 fc57 	bl	8003588 <HAL_HCD_Stop>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 f971 	bl	800cfc8 <USBH_Get_USB_Status>
 800cce6:	4603      	mov	r3, r0
 800cce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccea:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3710      	adds	r7, #16
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7f6 fc9f 	bl	800364a <HAL_HCD_GetCurrentSpeed>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d00c      	beq.n	800cd2c <USBH_LL_GetSpeed+0x38>
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d80d      	bhi.n	800cd32 <USBH_LL_GetSpeed+0x3e>
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <USBH_LL_GetSpeed+0x2c>
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d003      	beq.n	800cd26 <USBH_LL_GetSpeed+0x32>
 800cd1e:	e008      	b.n	800cd32 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
    break;
 800cd24:	e008      	b.n	800cd38 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cd26:	2301      	movs	r3, #1
 800cd28:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2a:	e005      	b.n	800cd38 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd30:	e002      	b.n	800cd38 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cd32:	2301      	movs	r3, #1
 800cd34:	73fb      	strb	r3, [r7, #15]
    break;
 800cd36:	bf00      	nop
  }
  return  speed;
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3710      	adds	r7, #16
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}

0800cd42 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cd42:	b580      	push	{r7, lr}
 800cd44:	b084      	sub	sp, #16
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7f6 fc32 	bl	80035c2 <HAL_HCD_ResetPort>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 f92f 	bl	800cfc8 <USBH_Get_USB_Status>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	460b      	mov	r3, r1
 800cd82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7f6 fc39 	bl	8003606 <HAL_HCD_HC_GetXferCount>
 800cd94:	4603      	mov	r3, r0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd9e:	b590      	push	{r4, r7, lr}
 800cda0:	b089      	sub	sp, #36	; 0x24
 800cda2:	af04      	add	r7, sp, #16
 800cda4:	6078      	str	r0, [r7, #4]
 800cda6:	4608      	mov	r0, r1
 800cda8:	4611      	mov	r1, r2
 800cdaa:	461a      	mov	r2, r3
 800cdac:	4603      	mov	r3, r0
 800cdae:	70fb      	strb	r3, [r7, #3]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70bb      	strb	r3, [r7, #2]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cdc6:	787c      	ldrb	r4, [r7, #1]
 800cdc8:	78ba      	ldrb	r2, [r7, #2]
 800cdca:	78f9      	ldrb	r1, [r7, #3]
 800cdcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cdce:	9302      	str	r3, [sp, #8]
 800cdd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4623      	mov	r3, r4
 800cdde:	f7f6 f89d 	bl	8002f1c <HAL_HCD_HC_Init>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 f8ed 	bl	800cfc8 <USBH_Get_USB_Status>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd90      	pop	{r4, r7, pc}

0800cdfc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b084      	sub	sp, #16
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	460b      	mov	r3, r1
 800ce06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce16:	78fa      	ldrb	r2, [r7, #3]
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7f6 f90d 	bl	800303a <HAL_HCD_HC_Halt>
 800ce20:	4603      	mov	r3, r0
 800ce22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 f8ce 	bl	800cfc8 <USBH_Get_USB_Status>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ce3a:	b590      	push	{r4, r7, lr}
 800ce3c:	b089      	sub	sp, #36	; 0x24
 800ce3e:	af04      	add	r7, sp, #16
 800ce40:	6078      	str	r0, [r7, #4]
 800ce42:	4608      	mov	r0, r1
 800ce44:	4611      	mov	r1, r2
 800ce46:	461a      	mov	r2, r3
 800ce48:	4603      	mov	r3, r0
 800ce4a:	70fb      	strb	r3, [r7, #3]
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	70bb      	strb	r3, [r7, #2]
 800ce50:	4613      	mov	r3, r2
 800ce52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce62:	787c      	ldrb	r4, [r7, #1]
 800ce64:	78ba      	ldrb	r2, [r7, #2]
 800ce66:	78f9      	ldrb	r1, [r7, #3]
 800ce68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce6c:	9303      	str	r3, [sp, #12]
 800ce6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce70:	9302      	str	r3, [sp, #8]
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4623      	mov	r3, r4
 800ce7e:	f7f6 f8ff 	bl	8003080 <HAL_HCD_HC_SubmitRequest>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 f89d 	bl	800cfc8 <USBH_Get_USB_Status>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd90      	pop	{r4, r7, pc}

0800ce9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ceae:	78fa      	ldrb	r2, [r7, #3]
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7f6 fb93 	bl	80035de <HAL_HCD_HC_GetURBState>
 800ceb8:	4603      	mov	r3, r0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b082      	sub	sp, #8
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	460b      	mov	r3, r1
 800cecc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d103      	bne.n	800cee0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ced8:	78fb      	ldrb	r3, [r7, #3]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f000 f8a0 	bl	800d020 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cee0:	20c8      	movs	r0, #200	; 0xc8
 800cee2:	f7f5 fbdf 	bl	80026a4 <HAL_Delay>
  return USBH_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
 800cefc:	4613      	mov	r3, r2
 800cefe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf06:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cf08:	78fb      	ldrb	r3, [r7, #3]
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	212c      	movs	r1, #44	; 0x2c
 800cf0e:	fb01 f303 	mul.w	r3, r1, r3
 800cf12:	4413      	add	r3, r2
 800cf14:	333b      	adds	r3, #59	; 0x3b
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d009      	beq.n	800cf30 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cf1c:	78fb      	ldrb	r3, [r7, #3]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	212c      	movs	r1, #44	; 0x2c
 800cf22:	fb01 f303 	mul.w	r3, r1, r3
 800cf26:	4413      	add	r3, r2
 800cf28:	3354      	adds	r3, #84	; 0x54
 800cf2a:	78ba      	ldrb	r2, [r7, #2]
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	e008      	b.n	800cf42 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cf30:	78fb      	ldrb	r3, [r7, #3]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	212c      	movs	r1, #44	; 0x2c
 800cf36:	fb01 f303 	mul.w	r3, r1, r3
 800cf3a:	4413      	add	r3, r2
 800cf3c:	3355      	adds	r3, #85	; 0x55
 800cf3e:	78ba      	ldrb	r2, [r7, #2]
 800cf40:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf66:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	212c      	movs	r1, #44	; 0x2c
 800cf6e:	fb01 f303 	mul.w	r3, r1, r3
 800cf72:	4413      	add	r3, r2
 800cf74:	333b      	adds	r3, #59	; 0x3b
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d009      	beq.n	800cf90 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	212c      	movs	r1, #44	; 0x2c
 800cf82:	fb01 f303 	mul.w	r3, r1, r3
 800cf86:	4413      	add	r3, r2
 800cf88:	3354      	adds	r3, #84	; 0x54
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	73fb      	strb	r3, [r7, #15]
 800cf8e:	e008      	b.n	800cfa2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800cf90:	78fb      	ldrb	r3, [r7, #3]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	212c      	movs	r1, #44	; 0x2c
 800cf96:	fb01 f303 	mul.w	r3, r1, r3
 800cf9a:	4413      	add	r3, r2
 800cf9c:	3355      	adds	r3, #85	; 0x55
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800cfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7f5 fb73 	bl	80026a4 <HAL_Delay>
}
 800cfbe:	bf00      	nop
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	2b03      	cmp	r3, #3
 800cfda:	d817      	bhi.n	800d00c <USBH_Get_USB_Status+0x44>
 800cfdc:	a201      	add	r2, pc, #4	; (adr r2, 800cfe4 <USBH_Get_USB_Status+0x1c>)
 800cfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe2:	bf00      	nop
 800cfe4:	0800cff5 	.word	0x0800cff5
 800cfe8:	0800cffb 	.word	0x0800cffb
 800cfec:	0800d001 	.word	0x0800d001
 800cff0:	0800d007 	.word	0x0800d007
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]
    break;
 800cff8:	e00b      	b.n	800d012 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cffa:	2302      	movs	r3, #2
 800cffc:	73fb      	strb	r3, [r7, #15]
    break;
 800cffe:	e008      	b.n	800d012 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
    break;
 800d004:	e005      	b.n	800d012 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d006:	2302      	movs	r3, #2
 800d008:	73fb      	strb	r3, [r7, #15]
    break;
 800d00a:	e002      	b.n	800d012 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d00c:	2302      	movs	r3, #2
 800d00e:	73fb      	strb	r3, [r7, #15]
    break;
 800d010:	bf00      	nop
  }
  return usb_status;
 800d012:	7bfb      	ldrb	r3, [r7, #15]
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	4603      	mov	r3, r0
 800d028:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d02a:	79fb      	ldrb	r3, [r7, #7]
 800d02c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d102      	bne.n	800d03a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d034:	2301      	movs	r3, #1
 800d036:	73fb      	strb	r3, [r7, #15]
 800d038:	e001      	b.n	800d03e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d03a:	2300      	movs	r3, #0
 800d03c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d03e:	7bfb      	ldrb	r3, [r7, #15]
 800d040:	461a      	mov	r2, r3
 800d042:	2110      	movs	r1, #16
 800d044:	4803      	ldr	r0, [pc, #12]	; (800d054 <MX_DriverVbusHS+0x34>)
 800d046:	f7f5 fed5 	bl	8002df4 <HAL_GPIO_WritePin>
}
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	40020800 	.word	0x40020800

0800d058 <atoi>:
 800d058:	220a      	movs	r2, #10
 800d05a:	2100      	movs	r1, #0
 800d05c:	f000 bab6 	b.w	800d5cc <strtol>

0800d060 <__errno>:
 800d060:	4b01      	ldr	r3, [pc, #4]	; (800d068 <__errno+0x8>)
 800d062:	6818      	ldr	r0, [r3, #0]
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	200000f0 	.word	0x200000f0

0800d06c <__libc_init_array>:
 800d06c:	b570      	push	{r4, r5, r6, lr}
 800d06e:	4d0d      	ldr	r5, [pc, #52]	; (800d0a4 <__libc_init_array+0x38>)
 800d070:	4c0d      	ldr	r4, [pc, #52]	; (800d0a8 <__libc_init_array+0x3c>)
 800d072:	1b64      	subs	r4, r4, r5
 800d074:	10a4      	asrs	r4, r4, #2
 800d076:	2600      	movs	r6, #0
 800d078:	42a6      	cmp	r6, r4
 800d07a:	d109      	bne.n	800d090 <__libc_init_array+0x24>
 800d07c:	4d0b      	ldr	r5, [pc, #44]	; (800d0ac <__libc_init_array+0x40>)
 800d07e:	4c0c      	ldr	r4, [pc, #48]	; (800d0b0 <__libc_init_array+0x44>)
 800d080:	f001 f97c 	bl	800e37c <_init>
 800d084:	1b64      	subs	r4, r4, r5
 800d086:	10a4      	asrs	r4, r4, #2
 800d088:	2600      	movs	r6, #0
 800d08a:	42a6      	cmp	r6, r4
 800d08c:	d105      	bne.n	800d09a <__libc_init_array+0x2e>
 800d08e:	bd70      	pop	{r4, r5, r6, pc}
 800d090:	f855 3b04 	ldr.w	r3, [r5], #4
 800d094:	4798      	blx	r3
 800d096:	3601      	adds	r6, #1
 800d098:	e7ee      	b.n	800d078 <__libc_init_array+0xc>
 800d09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d09e:	4798      	blx	r3
 800d0a0:	3601      	adds	r6, #1
 800d0a2:	e7f2      	b.n	800d08a <__libc_init_array+0x1e>
 800d0a4:	0800e8f4 	.word	0x0800e8f4
 800d0a8:	0800e8f4 	.word	0x0800e8f4
 800d0ac:	0800e8f4 	.word	0x0800e8f4
 800d0b0:	0800e8f8 	.word	0x0800e8f8

0800d0b4 <malloc>:
 800d0b4:	4b02      	ldr	r3, [pc, #8]	; (800d0c0 <malloc+0xc>)
 800d0b6:	4601      	mov	r1, r0
 800d0b8:	6818      	ldr	r0, [r3, #0]
 800d0ba:	f000 b88d 	b.w	800d1d8 <_malloc_r>
 800d0be:	bf00      	nop
 800d0c0:	200000f0 	.word	0x200000f0

0800d0c4 <free>:
 800d0c4:	4b02      	ldr	r3, [pc, #8]	; (800d0d0 <free+0xc>)
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	6818      	ldr	r0, [r3, #0]
 800d0ca:	f000 b819 	b.w	800d100 <_free_r>
 800d0ce:	bf00      	nop
 800d0d0:	200000f0 	.word	0x200000f0

0800d0d4 <memcpy>:
 800d0d4:	440a      	add	r2, r1
 800d0d6:	4291      	cmp	r1, r2
 800d0d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d0dc:	d100      	bne.n	800d0e0 <memcpy+0xc>
 800d0de:	4770      	bx	lr
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ea:	4291      	cmp	r1, r2
 800d0ec:	d1f9      	bne.n	800d0e2 <memcpy+0xe>
 800d0ee:	bd10      	pop	{r4, pc}

0800d0f0 <memset>:
 800d0f0:	4402      	add	r2, r0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d100      	bne.n	800d0fa <memset+0xa>
 800d0f8:	4770      	bx	lr
 800d0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d0fe:	e7f9      	b.n	800d0f4 <memset+0x4>

0800d100 <_free_r>:
 800d100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d102:	2900      	cmp	r1, #0
 800d104:	d044      	beq.n	800d190 <_free_r+0x90>
 800d106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d10a:	9001      	str	r0, [sp, #4]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f1a1 0404 	sub.w	r4, r1, #4
 800d112:	bfb8      	it	lt
 800d114:	18e4      	addlt	r4, r4, r3
 800d116:	f000 fc83 	bl	800da20 <__malloc_lock>
 800d11a:	4a1e      	ldr	r2, [pc, #120]	; (800d194 <_free_r+0x94>)
 800d11c:	9801      	ldr	r0, [sp, #4]
 800d11e:	6813      	ldr	r3, [r2, #0]
 800d120:	b933      	cbnz	r3, 800d130 <_free_r+0x30>
 800d122:	6063      	str	r3, [r4, #4]
 800d124:	6014      	str	r4, [r2, #0]
 800d126:	b003      	add	sp, #12
 800d128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d12c:	f000 bc7e 	b.w	800da2c <__malloc_unlock>
 800d130:	42a3      	cmp	r3, r4
 800d132:	d908      	bls.n	800d146 <_free_r+0x46>
 800d134:	6825      	ldr	r5, [r4, #0]
 800d136:	1961      	adds	r1, r4, r5
 800d138:	428b      	cmp	r3, r1
 800d13a:	bf01      	itttt	eq
 800d13c:	6819      	ldreq	r1, [r3, #0]
 800d13e:	685b      	ldreq	r3, [r3, #4]
 800d140:	1949      	addeq	r1, r1, r5
 800d142:	6021      	streq	r1, [r4, #0]
 800d144:	e7ed      	b.n	800d122 <_free_r+0x22>
 800d146:	461a      	mov	r2, r3
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	b10b      	cbz	r3, 800d150 <_free_r+0x50>
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	d9fa      	bls.n	800d146 <_free_r+0x46>
 800d150:	6811      	ldr	r1, [r2, #0]
 800d152:	1855      	adds	r5, r2, r1
 800d154:	42a5      	cmp	r5, r4
 800d156:	d10b      	bne.n	800d170 <_free_r+0x70>
 800d158:	6824      	ldr	r4, [r4, #0]
 800d15a:	4421      	add	r1, r4
 800d15c:	1854      	adds	r4, r2, r1
 800d15e:	42a3      	cmp	r3, r4
 800d160:	6011      	str	r1, [r2, #0]
 800d162:	d1e0      	bne.n	800d126 <_free_r+0x26>
 800d164:	681c      	ldr	r4, [r3, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	6053      	str	r3, [r2, #4]
 800d16a:	4421      	add	r1, r4
 800d16c:	6011      	str	r1, [r2, #0]
 800d16e:	e7da      	b.n	800d126 <_free_r+0x26>
 800d170:	d902      	bls.n	800d178 <_free_r+0x78>
 800d172:	230c      	movs	r3, #12
 800d174:	6003      	str	r3, [r0, #0]
 800d176:	e7d6      	b.n	800d126 <_free_r+0x26>
 800d178:	6825      	ldr	r5, [r4, #0]
 800d17a:	1961      	adds	r1, r4, r5
 800d17c:	428b      	cmp	r3, r1
 800d17e:	bf04      	itt	eq
 800d180:	6819      	ldreq	r1, [r3, #0]
 800d182:	685b      	ldreq	r3, [r3, #4]
 800d184:	6063      	str	r3, [r4, #4]
 800d186:	bf04      	itt	eq
 800d188:	1949      	addeq	r1, r1, r5
 800d18a:	6021      	streq	r1, [r4, #0]
 800d18c:	6054      	str	r4, [r2, #4]
 800d18e:	e7ca      	b.n	800d126 <_free_r+0x26>
 800d190:	b003      	add	sp, #12
 800d192:	bd30      	pop	{r4, r5, pc}
 800d194:	20000b84 	.word	0x20000b84

0800d198 <sbrk_aligned>:
 800d198:	b570      	push	{r4, r5, r6, lr}
 800d19a:	4e0e      	ldr	r6, [pc, #56]	; (800d1d4 <sbrk_aligned+0x3c>)
 800d19c:	460c      	mov	r4, r1
 800d19e:	6831      	ldr	r1, [r6, #0]
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	b911      	cbnz	r1, 800d1aa <sbrk_aligned+0x12>
 800d1a4:	f000 f8ba 	bl	800d31c <_sbrk_r>
 800d1a8:	6030      	str	r0, [r6, #0]
 800d1aa:	4621      	mov	r1, r4
 800d1ac:	4628      	mov	r0, r5
 800d1ae:	f000 f8b5 	bl	800d31c <_sbrk_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d00a      	beq.n	800d1cc <sbrk_aligned+0x34>
 800d1b6:	1cc4      	adds	r4, r0, #3
 800d1b8:	f024 0403 	bic.w	r4, r4, #3
 800d1bc:	42a0      	cmp	r0, r4
 800d1be:	d007      	beq.n	800d1d0 <sbrk_aligned+0x38>
 800d1c0:	1a21      	subs	r1, r4, r0
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f000 f8aa 	bl	800d31c <_sbrk_r>
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d101      	bne.n	800d1d0 <sbrk_aligned+0x38>
 800d1cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	bd70      	pop	{r4, r5, r6, pc}
 800d1d4:	20000b88 	.word	0x20000b88

0800d1d8 <_malloc_r>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	1ccd      	adds	r5, r1, #3
 800d1de:	f025 0503 	bic.w	r5, r5, #3
 800d1e2:	3508      	adds	r5, #8
 800d1e4:	2d0c      	cmp	r5, #12
 800d1e6:	bf38      	it	cc
 800d1e8:	250c      	movcc	r5, #12
 800d1ea:	2d00      	cmp	r5, #0
 800d1ec:	4607      	mov	r7, r0
 800d1ee:	db01      	blt.n	800d1f4 <_malloc_r+0x1c>
 800d1f0:	42a9      	cmp	r1, r5
 800d1f2:	d905      	bls.n	800d200 <_malloc_r+0x28>
 800d1f4:	230c      	movs	r3, #12
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	2600      	movs	r6, #0
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d200:	4e2e      	ldr	r6, [pc, #184]	; (800d2bc <_malloc_r+0xe4>)
 800d202:	f000 fc0d 	bl	800da20 <__malloc_lock>
 800d206:	6833      	ldr	r3, [r6, #0]
 800d208:	461c      	mov	r4, r3
 800d20a:	bb34      	cbnz	r4, 800d25a <_malloc_r+0x82>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4638      	mov	r0, r7
 800d210:	f7ff ffc2 	bl	800d198 <sbrk_aligned>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	4604      	mov	r4, r0
 800d218:	d14d      	bne.n	800d2b6 <_malloc_r+0xde>
 800d21a:	6834      	ldr	r4, [r6, #0]
 800d21c:	4626      	mov	r6, r4
 800d21e:	2e00      	cmp	r6, #0
 800d220:	d140      	bne.n	800d2a4 <_malloc_r+0xcc>
 800d222:	6823      	ldr	r3, [r4, #0]
 800d224:	4631      	mov	r1, r6
 800d226:	4638      	mov	r0, r7
 800d228:	eb04 0803 	add.w	r8, r4, r3
 800d22c:	f000 f876 	bl	800d31c <_sbrk_r>
 800d230:	4580      	cmp	r8, r0
 800d232:	d13a      	bne.n	800d2aa <_malloc_r+0xd2>
 800d234:	6821      	ldr	r1, [r4, #0]
 800d236:	3503      	adds	r5, #3
 800d238:	1a6d      	subs	r5, r5, r1
 800d23a:	f025 0503 	bic.w	r5, r5, #3
 800d23e:	3508      	adds	r5, #8
 800d240:	2d0c      	cmp	r5, #12
 800d242:	bf38      	it	cc
 800d244:	250c      	movcc	r5, #12
 800d246:	4629      	mov	r1, r5
 800d248:	4638      	mov	r0, r7
 800d24a:	f7ff ffa5 	bl	800d198 <sbrk_aligned>
 800d24e:	3001      	adds	r0, #1
 800d250:	d02b      	beq.n	800d2aa <_malloc_r+0xd2>
 800d252:	6823      	ldr	r3, [r4, #0]
 800d254:	442b      	add	r3, r5
 800d256:	6023      	str	r3, [r4, #0]
 800d258:	e00e      	b.n	800d278 <_malloc_r+0xa0>
 800d25a:	6822      	ldr	r2, [r4, #0]
 800d25c:	1b52      	subs	r2, r2, r5
 800d25e:	d41e      	bmi.n	800d29e <_malloc_r+0xc6>
 800d260:	2a0b      	cmp	r2, #11
 800d262:	d916      	bls.n	800d292 <_malloc_r+0xba>
 800d264:	1961      	adds	r1, r4, r5
 800d266:	42a3      	cmp	r3, r4
 800d268:	6025      	str	r5, [r4, #0]
 800d26a:	bf18      	it	ne
 800d26c:	6059      	strne	r1, [r3, #4]
 800d26e:	6863      	ldr	r3, [r4, #4]
 800d270:	bf08      	it	eq
 800d272:	6031      	streq	r1, [r6, #0]
 800d274:	5162      	str	r2, [r4, r5]
 800d276:	604b      	str	r3, [r1, #4]
 800d278:	4638      	mov	r0, r7
 800d27a:	f104 060b 	add.w	r6, r4, #11
 800d27e:	f000 fbd5 	bl	800da2c <__malloc_unlock>
 800d282:	f026 0607 	bic.w	r6, r6, #7
 800d286:	1d23      	adds	r3, r4, #4
 800d288:	1af2      	subs	r2, r6, r3
 800d28a:	d0b6      	beq.n	800d1fa <_malloc_r+0x22>
 800d28c:	1b9b      	subs	r3, r3, r6
 800d28e:	50a3      	str	r3, [r4, r2]
 800d290:	e7b3      	b.n	800d1fa <_malloc_r+0x22>
 800d292:	6862      	ldr	r2, [r4, #4]
 800d294:	42a3      	cmp	r3, r4
 800d296:	bf0c      	ite	eq
 800d298:	6032      	streq	r2, [r6, #0]
 800d29a:	605a      	strne	r2, [r3, #4]
 800d29c:	e7ec      	b.n	800d278 <_malloc_r+0xa0>
 800d29e:	4623      	mov	r3, r4
 800d2a0:	6864      	ldr	r4, [r4, #4]
 800d2a2:	e7b2      	b.n	800d20a <_malloc_r+0x32>
 800d2a4:	4634      	mov	r4, r6
 800d2a6:	6876      	ldr	r6, [r6, #4]
 800d2a8:	e7b9      	b.n	800d21e <_malloc_r+0x46>
 800d2aa:	230c      	movs	r3, #12
 800d2ac:	603b      	str	r3, [r7, #0]
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f000 fbbc 	bl	800da2c <__malloc_unlock>
 800d2b4:	e7a1      	b.n	800d1fa <_malloc_r+0x22>
 800d2b6:	6025      	str	r5, [r4, #0]
 800d2b8:	e7de      	b.n	800d278 <_malloc_r+0xa0>
 800d2ba:	bf00      	nop
 800d2bc:	20000b84 	.word	0x20000b84

0800d2c0 <iprintf>:
 800d2c0:	b40f      	push	{r0, r1, r2, r3}
 800d2c2:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <iprintf+0x2c>)
 800d2c4:	b513      	push	{r0, r1, r4, lr}
 800d2c6:	681c      	ldr	r4, [r3, #0]
 800d2c8:	b124      	cbz	r4, 800d2d4 <iprintf+0x14>
 800d2ca:	69a3      	ldr	r3, [r4, #24]
 800d2cc:	b913      	cbnz	r3, 800d2d4 <iprintf+0x14>
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 faa0 	bl	800d814 <__sinit>
 800d2d4:	ab05      	add	r3, sp, #20
 800d2d6:	9a04      	ldr	r2, [sp, #16]
 800d2d8:	68a1      	ldr	r1, [r4, #8]
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f000 fbd5 	bl	800da8c <_vfiprintf_r>
 800d2e2:	b002      	add	sp, #8
 800d2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2e8:	b004      	add	sp, #16
 800d2ea:	4770      	bx	lr
 800d2ec:	200000f0 	.word	0x200000f0

0800d2f0 <putchar>:
 800d2f0:	4b09      	ldr	r3, [pc, #36]	; (800d318 <putchar+0x28>)
 800d2f2:	b513      	push	{r0, r1, r4, lr}
 800d2f4:	681c      	ldr	r4, [r3, #0]
 800d2f6:	4601      	mov	r1, r0
 800d2f8:	b134      	cbz	r4, 800d308 <putchar+0x18>
 800d2fa:	69a3      	ldr	r3, [r4, #24]
 800d2fc:	b923      	cbnz	r3, 800d308 <putchar+0x18>
 800d2fe:	9001      	str	r0, [sp, #4]
 800d300:	4620      	mov	r0, r4
 800d302:	f000 fa87 	bl	800d814 <__sinit>
 800d306:	9901      	ldr	r1, [sp, #4]
 800d308:	68a2      	ldr	r2, [r4, #8]
 800d30a:	4620      	mov	r0, r4
 800d30c:	b002      	add	sp, #8
 800d30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d312:	f000 be7f 	b.w	800e014 <_putc_r>
 800d316:	bf00      	nop
 800d318:	200000f0 	.word	0x200000f0

0800d31c <_sbrk_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4d06      	ldr	r5, [pc, #24]	; (800d338 <_sbrk_r+0x1c>)
 800d320:	2300      	movs	r3, #0
 800d322:	4604      	mov	r4, r0
 800d324:	4608      	mov	r0, r1
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	f7f5 f890 	bl	800244c <_sbrk>
 800d32c:	1c43      	adds	r3, r0, #1
 800d32e:	d102      	bne.n	800d336 <_sbrk_r+0x1a>
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	b103      	cbz	r3, 800d336 <_sbrk_r+0x1a>
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	bd38      	pop	{r3, r4, r5, pc}
 800d338:	20000b90 	.word	0x20000b90

0800d33c <setvbuf>:
 800d33c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d340:	461d      	mov	r5, r3
 800d342:	4b5d      	ldr	r3, [pc, #372]	; (800d4b8 <setvbuf+0x17c>)
 800d344:	681f      	ldr	r7, [r3, #0]
 800d346:	4604      	mov	r4, r0
 800d348:	460e      	mov	r6, r1
 800d34a:	4690      	mov	r8, r2
 800d34c:	b127      	cbz	r7, 800d358 <setvbuf+0x1c>
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	b913      	cbnz	r3, 800d358 <setvbuf+0x1c>
 800d352:	4638      	mov	r0, r7
 800d354:	f000 fa5e 	bl	800d814 <__sinit>
 800d358:	4b58      	ldr	r3, [pc, #352]	; (800d4bc <setvbuf+0x180>)
 800d35a:	429c      	cmp	r4, r3
 800d35c:	d167      	bne.n	800d42e <setvbuf+0xf2>
 800d35e:	687c      	ldr	r4, [r7, #4]
 800d360:	f1b8 0f02 	cmp.w	r8, #2
 800d364:	d006      	beq.n	800d374 <setvbuf+0x38>
 800d366:	f1b8 0f01 	cmp.w	r8, #1
 800d36a:	f200 809f 	bhi.w	800d4ac <setvbuf+0x170>
 800d36e:	2d00      	cmp	r5, #0
 800d370:	f2c0 809c 	blt.w	800d4ac <setvbuf+0x170>
 800d374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d376:	07db      	lsls	r3, r3, #31
 800d378:	d405      	bmi.n	800d386 <setvbuf+0x4a>
 800d37a:	89a3      	ldrh	r3, [r4, #12]
 800d37c:	0598      	lsls	r0, r3, #22
 800d37e:	d402      	bmi.n	800d386 <setvbuf+0x4a>
 800d380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d382:	f000 fae5 	bl	800d950 <__retarget_lock_acquire_recursive>
 800d386:	4621      	mov	r1, r4
 800d388:	4638      	mov	r0, r7
 800d38a:	f000 f9af 	bl	800d6ec <_fflush_r>
 800d38e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d390:	b141      	cbz	r1, 800d3a4 <setvbuf+0x68>
 800d392:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d396:	4299      	cmp	r1, r3
 800d398:	d002      	beq.n	800d3a0 <setvbuf+0x64>
 800d39a:	4638      	mov	r0, r7
 800d39c:	f7ff feb0 	bl	800d100 <_free_r>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	6363      	str	r3, [r4, #52]	; 0x34
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61a3      	str	r3, [r4, #24]
 800d3a8:	6063      	str	r3, [r4, #4]
 800d3aa:	89a3      	ldrh	r3, [r4, #12]
 800d3ac:	0619      	lsls	r1, r3, #24
 800d3ae:	d503      	bpl.n	800d3b8 <setvbuf+0x7c>
 800d3b0:	6921      	ldr	r1, [r4, #16]
 800d3b2:	4638      	mov	r0, r7
 800d3b4:	f7ff fea4 	bl	800d100 <_free_r>
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800d3be:	f023 0303 	bic.w	r3, r3, #3
 800d3c2:	f1b8 0f02 	cmp.w	r8, #2
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	d06c      	beq.n	800d4a4 <setvbuf+0x168>
 800d3ca:	ab01      	add	r3, sp, #4
 800d3cc:	466a      	mov	r2, sp
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f000 fabf 	bl	800d954 <__swhatbuf_r>
 800d3d6:	89a3      	ldrh	r3, [r4, #12]
 800d3d8:	4318      	orrs	r0, r3
 800d3da:	81a0      	strh	r0, [r4, #12]
 800d3dc:	2d00      	cmp	r5, #0
 800d3de:	d130      	bne.n	800d442 <setvbuf+0x106>
 800d3e0:	9d00      	ldr	r5, [sp, #0]
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f7ff fe66 	bl	800d0b4 <malloc>
 800d3e8:	4606      	mov	r6, r0
 800d3ea:	2800      	cmp	r0, #0
 800d3ec:	d155      	bne.n	800d49a <setvbuf+0x15e>
 800d3ee:	f8dd 9000 	ldr.w	r9, [sp]
 800d3f2:	45a9      	cmp	r9, r5
 800d3f4:	d14a      	bne.n	800d48c <setvbuf+0x150>
 800d3f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	60a2      	str	r2, [r4, #8]
 800d3fe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800d402:	6022      	str	r2, [r4, #0]
 800d404:	6122      	str	r2, [r4, #16]
 800d406:	2201      	movs	r2, #1
 800d408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d40c:	6162      	str	r2, [r4, #20]
 800d40e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d410:	f043 0302 	orr.w	r3, r3, #2
 800d414:	07d2      	lsls	r2, r2, #31
 800d416:	81a3      	strh	r3, [r4, #12]
 800d418:	d405      	bmi.n	800d426 <setvbuf+0xea>
 800d41a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d41e:	d102      	bne.n	800d426 <setvbuf+0xea>
 800d420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d422:	f000 fa96 	bl	800d952 <__retarget_lock_release_recursive>
 800d426:	4628      	mov	r0, r5
 800d428:	b003      	add	sp, #12
 800d42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d42e:	4b24      	ldr	r3, [pc, #144]	; (800d4c0 <setvbuf+0x184>)
 800d430:	429c      	cmp	r4, r3
 800d432:	d101      	bne.n	800d438 <setvbuf+0xfc>
 800d434:	68bc      	ldr	r4, [r7, #8]
 800d436:	e793      	b.n	800d360 <setvbuf+0x24>
 800d438:	4b22      	ldr	r3, [pc, #136]	; (800d4c4 <setvbuf+0x188>)
 800d43a:	429c      	cmp	r4, r3
 800d43c:	bf08      	it	eq
 800d43e:	68fc      	ldreq	r4, [r7, #12]
 800d440:	e78e      	b.n	800d360 <setvbuf+0x24>
 800d442:	2e00      	cmp	r6, #0
 800d444:	d0cd      	beq.n	800d3e2 <setvbuf+0xa6>
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	b913      	cbnz	r3, 800d450 <setvbuf+0x114>
 800d44a:	4638      	mov	r0, r7
 800d44c:	f000 f9e2 	bl	800d814 <__sinit>
 800d450:	f1b8 0f01 	cmp.w	r8, #1
 800d454:	bf08      	it	eq
 800d456:	89a3      	ldrheq	r3, [r4, #12]
 800d458:	6026      	str	r6, [r4, #0]
 800d45a:	bf04      	itt	eq
 800d45c:	f043 0301 	orreq.w	r3, r3, #1
 800d460:	81a3      	strheq	r3, [r4, #12]
 800d462:	89a2      	ldrh	r2, [r4, #12]
 800d464:	f012 0308 	ands.w	r3, r2, #8
 800d468:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800d46c:	d01c      	beq.n	800d4a8 <setvbuf+0x16c>
 800d46e:	07d3      	lsls	r3, r2, #31
 800d470:	bf41      	itttt	mi
 800d472:	2300      	movmi	r3, #0
 800d474:	426d      	negmi	r5, r5
 800d476:	60a3      	strmi	r3, [r4, #8]
 800d478:	61a5      	strmi	r5, [r4, #24]
 800d47a:	bf58      	it	pl
 800d47c:	60a5      	strpl	r5, [r4, #8]
 800d47e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d480:	f015 0501 	ands.w	r5, r5, #1
 800d484:	d115      	bne.n	800d4b2 <setvbuf+0x176>
 800d486:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d48a:	e7c8      	b.n	800d41e <setvbuf+0xe2>
 800d48c:	4648      	mov	r0, r9
 800d48e:	f7ff fe11 	bl	800d0b4 <malloc>
 800d492:	4606      	mov	r6, r0
 800d494:	2800      	cmp	r0, #0
 800d496:	d0ae      	beq.n	800d3f6 <setvbuf+0xba>
 800d498:	464d      	mov	r5, r9
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4a0:	81a3      	strh	r3, [r4, #12]
 800d4a2:	e7d0      	b.n	800d446 <setvbuf+0x10a>
 800d4a4:	2500      	movs	r5, #0
 800d4a6:	e7a8      	b.n	800d3fa <setvbuf+0xbe>
 800d4a8:	60a3      	str	r3, [r4, #8]
 800d4aa:	e7e8      	b.n	800d47e <setvbuf+0x142>
 800d4ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d4b0:	e7b9      	b.n	800d426 <setvbuf+0xea>
 800d4b2:	2500      	movs	r5, #0
 800d4b4:	e7b7      	b.n	800d426 <setvbuf+0xea>
 800d4b6:	bf00      	nop
 800d4b8:	200000f0 	.word	0x200000f0
 800d4bc:	0800e878 	.word	0x0800e878
 800d4c0:	0800e898 	.word	0x0800e898
 800d4c4:	0800e858 	.word	0x0800e858

0800d4c8 <_strtol_l.constprop.0>:
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4ce:	d001      	beq.n	800d4d4 <_strtol_l.constprop.0+0xc>
 800d4d0:	2b24      	cmp	r3, #36	; 0x24
 800d4d2:	d906      	bls.n	800d4e2 <_strtol_l.constprop.0+0x1a>
 800d4d4:	f7ff fdc4 	bl	800d060 <__errno>
 800d4d8:	2316      	movs	r3, #22
 800d4da:	6003      	str	r3, [r0, #0]
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d5c8 <_strtol_l.constprop.0+0x100>
 800d4e6:	460d      	mov	r5, r1
 800d4e8:	462e      	mov	r6, r5
 800d4ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d4f2:	f017 0708 	ands.w	r7, r7, #8
 800d4f6:	d1f7      	bne.n	800d4e8 <_strtol_l.constprop.0+0x20>
 800d4f8:	2c2d      	cmp	r4, #45	; 0x2d
 800d4fa:	d132      	bne.n	800d562 <_strtol_l.constprop.0+0x9a>
 800d4fc:	782c      	ldrb	r4, [r5, #0]
 800d4fe:	2701      	movs	r7, #1
 800d500:	1cb5      	adds	r5, r6, #2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d05b      	beq.n	800d5be <_strtol_l.constprop.0+0xf6>
 800d506:	2b10      	cmp	r3, #16
 800d508:	d109      	bne.n	800d51e <_strtol_l.constprop.0+0x56>
 800d50a:	2c30      	cmp	r4, #48	; 0x30
 800d50c:	d107      	bne.n	800d51e <_strtol_l.constprop.0+0x56>
 800d50e:	782c      	ldrb	r4, [r5, #0]
 800d510:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d514:	2c58      	cmp	r4, #88	; 0x58
 800d516:	d14d      	bne.n	800d5b4 <_strtol_l.constprop.0+0xec>
 800d518:	786c      	ldrb	r4, [r5, #1]
 800d51a:	2310      	movs	r3, #16
 800d51c:	3502      	adds	r5, #2
 800d51e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d522:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d526:	f04f 0c00 	mov.w	ip, #0
 800d52a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d52e:	4666      	mov	r6, ip
 800d530:	fb03 8a19 	mls	sl, r3, r9, r8
 800d534:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d538:	f1be 0f09 	cmp.w	lr, #9
 800d53c:	d816      	bhi.n	800d56c <_strtol_l.constprop.0+0xa4>
 800d53e:	4674      	mov	r4, lr
 800d540:	42a3      	cmp	r3, r4
 800d542:	dd24      	ble.n	800d58e <_strtol_l.constprop.0+0xc6>
 800d544:	f1bc 0f00 	cmp.w	ip, #0
 800d548:	db1e      	blt.n	800d588 <_strtol_l.constprop.0+0xc0>
 800d54a:	45b1      	cmp	r9, r6
 800d54c:	d31c      	bcc.n	800d588 <_strtol_l.constprop.0+0xc0>
 800d54e:	d101      	bne.n	800d554 <_strtol_l.constprop.0+0x8c>
 800d550:	45a2      	cmp	sl, r4
 800d552:	db19      	blt.n	800d588 <_strtol_l.constprop.0+0xc0>
 800d554:	fb06 4603 	mla	r6, r6, r3, r4
 800d558:	f04f 0c01 	mov.w	ip, #1
 800d55c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d560:	e7e8      	b.n	800d534 <_strtol_l.constprop.0+0x6c>
 800d562:	2c2b      	cmp	r4, #43	; 0x2b
 800d564:	bf04      	itt	eq
 800d566:	782c      	ldrbeq	r4, [r5, #0]
 800d568:	1cb5      	addeq	r5, r6, #2
 800d56a:	e7ca      	b.n	800d502 <_strtol_l.constprop.0+0x3a>
 800d56c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d570:	f1be 0f19 	cmp.w	lr, #25
 800d574:	d801      	bhi.n	800d57a <_strtol_l.constprop.0+0xb2>
 800d576:	3c37      	subs	r4, #55	; 0x37
 800d578:	e7e2      	b.n	800d540 <_strtol_l.constprop.0+0x78>
 800d57a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d57e:	f1be 0f19 	cmp.w	lr, #25
 800d582:	d804      	bhi.n	800d58e <_strtol_l.constprop.0+0xc6>
 800d584:	3c57      	subs	r4, #87	; 0x57
 800d586:	e7db      	b.n	800d540 <_strtol_l.constprop.0+0x78>
 800d588:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d58c:	e7e6      	b.n	800d55c <_strtol_l.constprop.0+0x94>
 800d58e:	f1bc 0f00 	cmp.w	ip, #0
 800d592:	da05      	bge.n	800d5a0 <_strtol_l.constprop.0+0xd8>
 800d594:	2322      	movs	r3, #34	; 0x22
 800d596:	6003      	str	r3, [r0, #0]
 800d598:	4646      	mov	r6, r8
 800d59a:	b942      	cbnz	r2, 800d5ae <_strtol_l.constprop.0+0xe6>
 800d59c:	4630      	mov	r0, r6
 800d59e:	e79e      	b.n	800d4de <_strtol_l.constprop.0+0x16>
 800d5a0:	b107      	cbz	r7, 800d5a4 <_strtol_l.constprop.0+0xdc>
 800d5a2:	4276      	negs	r6, r6
 800d5a4:	2a00      	cmp	r2, #0
 800d5a6:	d0f9      	beq.n	800d59c <_strtol_l.constprop.0+0xd4>
 800d5a8:	f1bc 0f00 	cmp.w	ip, #0
 800d5ac:	d000      	beq.n	800d5b0 <_strtol_l.constprop.0+0xe8>
 800d5ae:	1e69      	subs	r1, r5, #1
 800d5b0:	6011      	str	r1, [r2, #0]
 800d5b2:	e7f3      	b.n	800d59c <_strtol_l.constprop.0+0xd4>
 800d5b4:	2430      	movs	r4, #48	; 0x30
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1b1      	bne.n	800d51e <_strtol_l.constprop.0+0x56>
 800d5ba:	2308      	movs	r3, #8
 800d5bc:	e7af      	b.n	800d51e <_strtol_l.constprop.0+0x56>
 800d5be:	2c30      	cmp	r4, #48	; 0x30
 800d5c0:	d0a5      	beq.n	800d50e <_strtol_l.constprop.0+0x46>
 800d5c2:	230a      	movs	r3, #10
 800d5c4:	e7ab      	b.n	800d51e <_strtol_l.constprop.0+0x56>
 800d5c6:	bf00      	nop
 800d5c8:	0800e755 	.word	0x0800e755

0800d5cc <strtol>:
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	460a      	mov	r2, r1
 800d5d0:	4601      	mov	r1, r0
 800d5d2:	4802      	ldr	r0, [pc, #8]	; (800d5dc <strtol+0x10>)
 800d5d4:	6800      	ldr	r0, [r0, #0]
 800d5d6:	f7ff bf77 	b.w	800d4c8 <_strtol_l.constprop.0>
 800d5da:	bf00      	nop
 800d5dc:	200000f0 	.word	0x200000f0

0800d5e0 <__sflush_r>:
 800d5e0:	898a      	ldrh	r2, [r1, #12]
 800d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	0710      	lsls	r0, r2, #28
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	d458      	bmi.n	800d6a0 <__sflush_r+0xc0>
 800d5ee:	684b      	ldr	r3, [r1, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	dc05      	bgt.n	800d600 <__sflush_r+0x20>
 800d5f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dc02      	bgt.n	800d600 <__sflush_r+0x20>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d602:	2e00      	cmp	r6, #0
 800d604:	d0f9      	beq.n	800d5fa <__sflush_r+0x1a>
 800d606:	2300      	movs	r3, #0
 800d608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d60c:	682f      	ldr	r7, [r5, #0]
 800d60e:	602b      	str	r3, [r5, #0]
 800d610:	d032      	beq.n	800d678 <__sflush_r+0x98>
 800d612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	075a      	lsls	r2, r3, #29
 800d618:	d505      	bpl.n	800d626 <__sflush_r+0x46>
 800d61a:	6863      	ldr	r3, [r4, #4]
 800d61c:	1ac0      	subs	r0, r0, r3
 800d61e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d620:	b10b      	cbz	r3, 800d626 <__sflush_r+0x46>
 800d622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d624:	1ac0      	subs	r0, r0, r3
 800d626:	2300      	movs	r3, #0
 800d628:	4602      	mov	r2, r0
 800d62a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d62c:	6a21      	ldr	r1, [r4, #32]
 800d62e:	4628      	mov	r0, r5
 800d630:	47b0      	blx	r6
 800d632:	1c43      	adds	r3, r0, #1
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	d106      	bne.n	800d646 <__sflush_r+0x66>
 800d638:	6829      	ldr	r1, [r5, #0]
 800d63a:	291d      	cmp	r1, #29
 800d63c:	d82c      	bhi.n	800d698 <__sflush_r+0xb8>
 800d63e:	4a2a      	ldr	r2, [pc, #168]	; (800d6e8 <__sflush_r+0x108>)
 800d640:	40ca      	lsrs	r2, r1
 800d642:	07d6      	lsls	r6, r2, #31
 800d644:	d528      	bpl.n	800d698 <__sflush_r+0xb8>
 800d646:	2200      	movs	r2, #0
 800d648:	6062      	str	r2, [r4, #4]
 800d64a:	04d9      	lsls	r1, r3, #19
 800d64c:	6922      	ldr	r2, [r4, #16]
 800d64e:	6022      	str	r2, [r4, #0]
 800d650:	d504      	bpl.n	800d65c <__sflush_r+0x7c>
 800d652:	1c42      	adds	r2, r0, #1
 800d654:	d101      	bne.n	800d65a <__sflush_r+0x7a>
 800d656:	682b      	ldr	r3, [r5, #0]
 800d658:	b903      	cbnz	r3, 800d65c <__sflush_r+0x7c>
 800d65a:	6560      	str	r0, [r4, #84]	; 0x54
 800d65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d65e:	602f      	str	r7, [r5, #0]
 800d660:	2900      	cmp	r1, #0
 800d662:	d0ca      	beq.n	800d5fa <__sflush_r+0x1a>
 800d664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d668:	4299      	cmp	r1, r3
 800d66a:	d002      	beq.n	800d672 <__sflush_r+0x92>
 800d66c:	4628      	mov	r0, r5
 800d66e:	f7ff fd47 	bl	800d100 <_free_r>
 800d672:	2000      	movs	r0, #0
 800d674:	6360      	str	r0, [r4, #52]	; 0x34
 800d676:	e7c1      	b.n	800d5fc <__sflush_r+0x1c>
 800d678:	6a21      	ldr	r1, [r4, #32]
 800d67a:	2301      	movs	r3, #1
 800d67c:	4628      	mov	r0, r5
 800d67e:	47b0      	blx	r6
 800d680:	1c41      	adds	r1, r0, #1
 800d682:	d1c7      	bne.n	800d614 <__sflush_r+0x34>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0c4      	beq.n	800d614 <__sflush_r+0x34>
 800d68a:	2b1d      	cmp	r3, #29
 800d68c:	d001      	beq.n	800d692 <__sflush_r+0xb2>
 800d68e:	2b16      	cmp	r3, #22
 800d690:	d101      	bne.n	800d696 <__sflush_r+0xb6>
 800d692:	602f      	str	r7, [r5, #0]
 800d694:	e7b1      	b.n	800d5fa <__sflush_r+0x1a>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	e7ad      	b.n	800d5fc <__sflush_r+0x1c>
 800d6a0:	690f      	ldr	r7, [r1, #16]
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	d0a9      	beq.n	800d5fa <__sflush_r+0x1a>
 800d6a6:	0793      	lsls	r3, r2, #30
 800d6a8:	680e      	ldr	r6, [r1, #0]
 800d6aa:	bf08      	it	eq
 800d6ac:	694b      	ldreq	r3, [r1, #20]
 800d6ae:	600f      	str	r7, [r1, #0]
 800d6b0:	bf18      	it	ne
 800d6b2:	2300      	movne	r3, #0
 800d6b4:	eba6 0807 	sub.w	r8, r6, r7
 800d6b8:	608b      	str	r3, [r1, #8]
 800d6ba:	f1b8 0f00 	cmp.w	r8, #0
 800d6be:	dd9c      	ble.n	800d5fa <__sflush_r+0x1a>
 800d6c0:	6a21      	ldr	r1, [r4, #32]
 800d6c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6c4:	4643      	mov	r3, r8
 800d6c6:	463a      	mov	r2, r7
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b0      	blx	r6
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	dc06      	bgt.n	800d6de <__sflush_r+0xfe>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6dc:	e78e      	b.n	800d5fc <__sflush_r+0x1c>
 800d6de:	4407      	add	r7, r0
 800d6e0:	eba8 0800 	sub.w	r8, r8, r0
 800d6e4:	e7e9      	b.n	800d6ba <__sflush_r+0xda>
 800d6e6:	bf00      	nop
 800d6e8:	20400001 	.word	0x20400001

0800d6ec <_fflush_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	690b      	ldr	r3, [r1, #16]
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b913      	cbnz	r3, 800d6fc <_fflush_r+0x10>
 800d6f6:	2500      	movs	r5, #0
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	b118      	cbz	r0, 800d706 <_fflush_r+0x1a>
 800d6fe:	6983      	ldr	r3, [r0, #24]
 800d700:	b90b      	cbnz	r3, 800d706 <_fflush_r+0x1a>
 800d702:	f000 f887 	bl	800d814 <__sinit>
 800d706:	4b14      	ldr	r3, [pc, #80]	; (800d758 <_fflush_r+0x6c>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d11b      	bne.n	800d744 <_fflush_r+0x58>
 800d70c:	686c      	ldr	r4, [r5, #4]
 800d70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0ef      	beq.n	800d6f6 <_fflush_r+0xa>
 800d716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d718:	07d0      	lsls	r0, r2, #31
 800d71a:	d404      	bmi.n	800d726 <_fflush_r+0x3a>
 800d71c:	0599      	lsls	r1, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_fflush_r+0x3a>
 800d720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d722:	f000 f915 	bl	800d950 <__retarget_lock_acquire_recursive>
 800d726:	4628      	mov	r0, r5
 800d728:	4621      	mov	r1, r4
 800d72a:	f7ff ff59 	bl	800d5e0 <__sflush_r>
 800d72e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d730:	07da      	lsls	r2, r3, #31
 800d732:	4605      	mov	r5, r0
 800d734:	d4e0      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	059b      	lsls	r3, r3, #22
 800d73a:	d4dd      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d73e:	f000 f908 	bl	800d952 <__retarget_lock_release_recursive>
 800d742:	e7d9      	b.n	800d6f8 <_fflush_r+0xc>
 800d744:	4b05      	ldr	r3, [pc, #20]	; (800d75c <_fflush_r+0x70>)
 800d746:	429c      	cmp	r4, r3
 800d748:	d101      	bne.n	800d74e <_fflush_r+0x62>
 800d74a:	68ac      	ldr	r4, [r5, #8]
 800d74c:	e7df      	b.n	800d70e <_fflush_r+0x22>
 800d74e:	4b04      	ldr	r3, [pc, #16]	; (800d760 <_fflush_r+0x74>)
 800d750:	429c      	cmp	r4, r3
 800d752:	bf08      	it	eq
 800d754:	68ec      	ldreq	r4, [r5, #12]
 800d756:	e7da      	b.n	800d70e <_fflush_r+0x22>
 800d758:	0800e878 	.word	0x0800e878
 800d75c:	0800e898 	.word	0x0800e898
 800d760:	0800e858 	.word	0x0800e858

0800d764 <std>:
 800d764:	2300      	movs	r3, #0
 800d766:	b510      	push	{r4, lr}
 800d768:	4604      	mov	r4, r0
 800d76a:	e9c0 3300 	strd	r3, r3, [r0]
 800d76e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d772:	6083      	str	r3, [r0, #8]
 800d774:	8181      	strh	r1, [r0, #12]
 800d776:	6643      	str	r3, [r0, #100]	; 0x64
 800d778:	81c2      	strh	r2, [r0, #14]
 800d77a:	6183      	str	r3, [r0, #24]
 800d77c:	4619      	mov	r1, r3
 800d77e:	2208      	movs	r2, #8
 800d780:	305c      	adds	r0, #92	; 0x5c
 800d782:	f7ff fcb5 	bl	800d0f0 <memset>
 800d786:	4b05      	ldr	r3, [pc, #20]	; (800d79c <std+0x38>)
 800d788:	6263      	str	r3, [r4, #36]	; 0x24
 800d78a:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <std+0x3c>)
 800d78c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d78e:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <std+0x40>)
 800d790:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <std+0x44>)
 800d794:	6224      	str	r4, [r4, #32]
 800d796:	6323      	str	r3, [r4, #48]	; 0x30
 800d798:	bd10      	pop	{r4, pc}
 800d79a:	bf00      	nop
 800d79c:	0800e0a5 	.word	0x0800e0a5
 800d7a0:	0800e0c7 	.word	0x0800e0c7
 800d7a4:	0800e0ff 	.word	0x0800e0ff
 800d7a8:	0800e123 	.word	0x0800e123

0800d7ac <_cleanup_r>:
 800d7ac:	4901      	ldr	r1, [pc, #4]	; (800d7b4 <_cleanup_r+0x8>)
 800d7ae:	f000 b8af 	b.w	800d910 <_fwalk_reent>
 800d7b2:	bf00      	nop
 800d7b4:	0800d6ed 	.word	0x0800d6ed

0800d7b8 <__sfmoreglue>:
 800d7b8:	b570      	push	{r4, r5, r6, lr}
 800d7ba:	2268      	movs	r2, #104	; 0x68
 800d7bc:	1e4d      	subs	r5, r1, #1
 800d7be:	4355      	muls	r5, r2
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7c6:	f7ff fd07 	bl	800d1d8 <_malloc_r>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	b140      	cbz	r0, 800d7e0 <__sfmoreglue+0x28>
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	e9c0 1600 	strd	r1, r6, [r0]
 800d7d4:	300c      	adds	r0, #12
 800d7d6:	60a0      	str	r0, [r4, #8]
 800d7d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7dc:	f7ff fc88 	bl	800d0f0 <memset>
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}

0800d7e4 <__sfp_lock_acquire>:
 800d7e4:	4801      	ldr	r0, [pc, #4]	; (800d7ec <__sfp_lock_acquire+0x8>)
 800d7e6:	f000 b8b3 	b.w	800d950 <__retarget_lock_acquire_recursive>
 800d7ea:	bf00      	nop
 800d7ec:	20000b8d 	.word	0x20000b8d

0800d7f0 <__sfp_lock_release>:
 800d7f0:	4801      	ldr	r0, [pc, #4]	; (800d7f8 <__sfp_lock_release+0x8>)
 800d7f2:	f000 b8ae 	b.w	800d952 <__retarget_lock_release_recursive>
 800d7f6:	bf00      	nop
 800d7f8:	20000b8d 	.word	0x20000b8d

0800d7fc <__sinit_lock_acquire>:
 800d7fc:	4801      	ldr	r0, [pc, #4]	; (800d804 <__sinit_lock_acquire+0x8>)
 800d7fe:	f000 b8a7 	b.w	800d950 <__retarget_lock_acquire_recursive>
 800d802:	bf00      	nop
 800d804:	20000b8e 	.word	0x20000b8e

0800d808 <__sinit_lock_release>:
 800d808:	4801      	ldr	r0, [pc, #4]	; (800d810 <__sinit_lock_release+0x8>)
 800d80a:	f000 b8a2 	b.w	800d952 <__retarget_lock_release_recursive>
 800d80e:	bf00      	nop
 800d810:	20000b8e 	.word	0x20000b8e

0800d814 <__sinit>:
 800d814:	b510      	push	{r4, lr}
 800d816:	4604      	mov	r4, r0
 800d818:	f7ff fff0 	bl	800d7fc <__sinit_lock_acquire>
 800d81c:	69a3      	ldr	r3, [r4, #24]
 800d81e:	b11b      	cbz	r3, 800d828 <__sinit+0x14>
 800d820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d824:	f7ff bff0 	b.w	800d808 <__sinit_lock_release>
 800d828:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d82c:	6523      	str	r3, [r4, #80]	; 0x50
 800d82e:	4b13      	ldr	r3, [pc, #76]	; (800d87c <__sinit+0x68>)
 800d830:	4a13      	ldr	r2, [pc, #76]	; (800d880 <__sinit+0x6c>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	62a2      	str	r2, [r4, #40]	; 0x28
 800d836:	42a3      	cmp	r3, r4
 800d838:	bf04      	itt	eq
 800d83a:	2301      	moveq	r3, #1
 800d83c:	61a3      	streq	r3, [r4, #24]
 800d83e:	4620      	mov	r0, r4
 800d840:	f000 f820 	bl	800d884 <__sfp>
 800d844:	6060      	str	r0, [r4, #4]
 800d846:	4620      	mov	r0, r4
 800d848:	f000 f81c 	bl	800d884 <__sfp>
 800d84c:	60a0      	str	r0, [r4, #8]
 800d84e:	4620      	mov	r0, r4
 800d850:	f000 f818 	bl	800d884 <__sfp>
 800d854:	2200      	movs	r2, #0
 800d856:	60e0      	str	r0, [r4, #12]
 800d858:	2104      	movs	r1, #4
 800d85a:	6860      	ldr	r0, [r4, #4]
 800d85c:	f7ff ff82 	bl	800d764 <std>
 800d860:	68a0      	ldr	r0, [r4, #8]
 800d862:	2201      	movs	r2, #1
 800d864:	2109      	movs	r1, #9
 800d866:	f7ff ff7d 	bl	800d764 <std>
 800d86a:	68e0      	ldr	r0, [r4, #12]
 800d86c:	2202      	movs	r2, #2
 800d86e:	2112      	movs	r1, #18
 800d870:	f7ff ff78 	bl	800d764 <std>
 800d874:	2301      	movs	r3, #1
 800d876:	61a3      	str	r3, [r4, #24]
 800d878:	e7d2      	b.n	800d820 <__sinit+0xc>
 800d87a:	bf00      	nop
 800d87c:	0800e750 	.word	0x0800e750
 800d880:	0800d7ad 	.word	0x0800d7ad

0800d884 <__sfp>:
 800d884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d886:	4607      	mov	r7, r0
 800d888:	f7ff ffac 	bl	800d7e4 <__sfp_lock_acquire>
 800d88c:	4b1e      	ldr	r3, [pc, #120]	; (800d908 <__sfp+0x84>)
 800d88e:	681e      	ldr	r6, [r3, #0]
 800d890:	69b3      	ldr	r3, [r6, #24]
 800d892:	b913      	cbnz	r3, 800d89a <__sfp+0x16>
 800d894:	4630      	mov	r0, r6
 800d896:	f7ff ffbd 	bl	800d814 <__sinit>
 800d89a:	3648      	adds	r6, #72	; 0x48
 800d89c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	d503      	bpl.n	800d8ac <__sfp+0x28>
 800d8a4:	6833      	ldr	r3, [r6, #0]
 800d8a6:	b30b      	cbz	r3, 800d8ec <__sfp+0x68>
 800d8a8:	6836      	ldr	r6, [r6, #0]
 800d8aa:	e7f7      	b.n	800d89c <__sfp+0x18>
 800d8ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8b0:	b9d5      	cbnz	r5, 800d8e8 <__sfp+0x64>
 800d8b2:	4b16      	ldr	r3, [pc, #88]	; (800d90c <__sfp+0x88>)
 800d8b4:	60e3      	str	r3, [r4, #12]
 800d8b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8ba:	6665      	str	r5, [r4, #100]	; 0x64
 800d8bc:	f000 f847 	bl	800d94e <__retarget_lock_init_recursive>
 800d8c0:	f7ff ff96 	bl	800d7f0 <__sfp_lock_release>
 800d8c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8cc:	6025      	str	r5, [r4, #0]
 800d8ce:	61a5      	str	r5, [r4, #24]
 800d8d0:	2208      	movs	r2, #8
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8d8:	f7ff fc0a 	bl	800d0f0 <memset>
 800d8dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8e4:	4620      	mov	r0, r4
 800d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8e8:	3468      	adds	r4, #104	; 0x68
 800d8ea:	e7d9      	b.n	800d8a0 <__sfp+0x1c>
 800d8ec:	2104      	movs	r1, #4
 800d8ee:	4638      	mov	r0, r7
 800d8f0:	f7ff ff62 	bl	800d7b8 <__sfmoreglue>
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	6030      	str	r0, [r6, #0]
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1d5      	bne.n	800d8a8 <__sfp+0x24>
 800d8fc:	f7ff ff78 	bl	800d7f0 <__sfp_lock_release>
 800d900:	230c      	movs	r3, #12
 800d902:	603b      	str	r3, [r7, #0]
 800d904:	e7ee      	b.n	800d8e4 <__sfp+0x60>
 800d906:	bf00      	nop
 800d908:	0800e750 	.word	0x0800e750
 800d90c:	ffff0001 	.word	0xffff0001

0800d910 <_fwalk_reent>:
 800d910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d914:	4606      	mov	r6, r0
 800d916:	4688      	mov	r8, r1
 800d918:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d91c:	2700      	movs	r7, #0
 800d91e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d922:	f1b9 0901 	subs.w	r9, r9, #1
 800d926:	d505      	bpl.n	800d934 <_fwalk_reent+0x24>
 800d928:	6824      	ldr	r4, [r4, #0]
 800d92a:	2c00      	cmp	r4, #0
 800d92c:	d1f7      	bne.n	800d91e <_fwalk_reent+0xe>
 800d92e:	4638      	mov	r0, r7
 800d930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d934:	89ab      	ldrh	r3, [r5, #12]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d907      	bls.n	800d94a <_fwalk_reent+0x3a>
 800d93a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d93e:	3301      	adds	r3, #1
 800d940:	d003      	beq.n	800d94a <_fwalk_reent+0x3a>
 800d942:	4629      	mov	r1, r5
 800d944:	4630      	mov	r0, r6
 800d946:	47c0      	blx	r8
 800d948:	4307      	orrs	r7, r0
 800d94a:	3568      	adds	r5, #104	; 0x68
 800d94c:	e7e9      	b.n	800d922 <_fwalk_reent+0x12>

0800d94e <__retarget_lock_init_recursive>:
 800d94e:	4770      	bx	lr

0800d950 <__retarget_lock_acquire_recursive>:
 800d950:	4770      	bx	lr

0800d952 <__retarget_lock_release_recursive>:
 800d952:	4770      	bx	lr

0800d954 <__swhatbuf_r>:
 800d954:	b570      	push	{r4, r5, r6, lr}
 800d956:	460e      	mov	r6, r1
 800d958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d95c:	2900      	cmp	r1, #0
 800d95e:	b096      	sub	sp, #88	; 0x58
 800d960:	4614      	mov	r4, r2
 800d962:	461d      	mov	r5, r3
 800d964:	da08      	bge.n	800d978 <__swhatbuf_r+0x24>
 800d966:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	602a      	str	r2, [r5, #0]
 800d96e:	061a      	lsls	r2, r3, #24
 800d970:	d410      	bmi.n	800d994 <__swhatbuf_r+0x40>
 800d972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d976:	e00e      	b.n	800d996 <__swhatbuf_r+0x42>
 800d978:	466a      	mov	r2, sp
 800d97a:	f000 fcb9 	bl	800e2f0 <_fstat_r>
 800d97e:	2800      	cmp	r0, #0
 800d980:	dbf1      	blt.n	800d966 <__swhatbuf_r+0x12>
 800d982:	9a01      	ldr	r2, [sp, #4]
 800d984:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d988:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d98c:	425a      	negs	r2, r3
 800d98e:	415a      	adcs	r2, r3
 800d990:	602a      	str	r2, [r5, #0]
 800d992:	e7ee      	b.n	800d972 <__swhatbuf_r+0x1e>
 800d994:	2340      	movs	r3, #64	; 0x40
 800d996:	2000      	movs	r0, #0
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	b016      	add	sp, #88	; 0x58
 800d99c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9a0 <__smakebuf_r>:
 800d9a0:	898b      	ldrh	r3, [r1, #12]
 800d9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9a4:	079d      	lsls	r5, r3, #30
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	d507      	bpl.n	800d9bc <__smakebuf_r+0x1c>
 800d9ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	6123      	str	r3, [r4, #16]
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	6163      	str	r3, [r4, #20]
 800d9b8:	b002      	add	sp, #8
 800d9ba:	bd70      	pop	{r4, r5, r6, pc}
 800d9bc:	ab01      	add	r3, sp, #4
 800d9be:	466a      	mov	r2, sp
 800d9c0:	f7ff ffc8 	bl	800d954 <__swhatbuf_r>
 800d9c4:	9900      	ldr	r1, [sp, #0]
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7ff fc05 	bl	800d1d8 <_malloc_r>
 800d9ce:	b948      	cbnz	r0, 800d9e4 <__smakebuf_r+0x44>
 800d9d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d4:	059a      	lsls	r2, r3, #22
 800d9d6:	d4ef      	bmi.n	800d9b8 <__smakebuf_r+0x18>
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	f043 0302 	orr.w	r3, r3, #2
 800d9e0:	81a3      	strh	r3, [r4, #12]
 800d9e2:	e7e3      	b.n	800d9ac <__smakebuf_r+0xc>
 800d9e4:	4b0d      	ldr	r3, [pc, #52]	; (800da1c <__smakebuf_r+0x7c>)
 800d9e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	6020      	str	r0, [r4, #0]
 800d9ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f0:	81a3      	strh	r3, [r4, #12]
 800d9f2:	9b00      	ldr	r3, [sp, #0]
 800d9f4:	6163      	str	r3, [r4, #20]
 800d9f6:	9b01      	ldr	r3, [sp, #4]
 800d9f8:	6120      	str	r0, [r4, #16]
 800d9fa:	b15b      	cbz	r3, 800da14 <__smakebuf_r+0x74>
 800d9fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da00:	4630      	mov	r0, r6
 800da02:	f000 fc87 	bl	800e314 <_isatty_r>
 800da06:	b128      	cbz	r0, 800da14 <__smakebuf_r+0x74>
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	f023 0303 	bic.w	r3, r3, #3
 800da0e:	f043 0301 	orr.w	r3, r3, #1
 800da12:	81a3      	strh	r3, [r4, #12]
 800da14:	89a0      	ldrh	r0, [r4, #12]
 800da16:	4305      	orrs	r5, r0
 800da18:	81a5      	strh	r5, [r4, #12]
 800da1a:	e7cd      	b.n	800d9b8 <__smakebuf_r+0x18>
 800da1c:	0800d7ad 	.word	0x0800d7ad

0800da20 <__malloc_lock>:
 800da20:	4801      	ldr	r0, [pc, #4]	; (800da28 <__malloc_lock+0x8>)
 800da22:	f7ff bf95 	b.w	800d950 <__retarget_lock_acquire_recursive>
 800da26:	bf00      	nop
 800da28:	20000b8c 	.word	0x20000b8c

0800da2c <__malloc_unlock>:
 800da2c:	4801      	ldr	r0, [pc, #4]	; (800da34 <__malloc_unlock+0x8>)
 800da2e:	f7ff bf90 	b.w	800d952 <__retarget_lock_release_recursive>
 800da32:	bf00      	nop
 800da34:	20000b8c 	.word	0x20000b8c

0800da38 <__sfputc_r>:
 800da38:	6893      	ldr	r3, [r2, #8]
 800da3a:	3b01      	subs	r3, #1
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	b410      	push	{r4}
 800da40:	6093      	str	r3, [r2, #8]
 800da42:	da08      	bge.n	800da56 <__sfputc_r+0x1e>
 800da44:	6994      	ldr	r4, [r2, #24]
 800da46:	42a3      	cmp	r3, r4
 800da48:	db01      	blt.n	800da4e <__sfputc_r+0x16>
 800da4a:	290a      	cmp	r1, #10
 800da4c:	d103      	bne.n	800da56 <__sfputc_r+0x1e>
 800da4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da52:	f000 bb6b 	b.w	800e12c <__swbuf_r>
 800da56:	6813      	ldr	r3, [r2, #0]
 800da58:	1c58      	adds	r0, r3, #1
 800da5a:	6010      	str	r0, [r2, #0]
 800da5c:	7019      	strb	r1, [r3, #0]
 800da5e:	4608      	mov	r0, r1
 800da60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <__sfputs_r>:
 800da66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da68:	4606      	mov	r6, r0
 800da6a:	460f      	mov	r7, r1
 800da6c:	4614      	mov	r4, r2
 800da6e:	18d5      	adds	r5, r2, r3
 800da70:	42ac      	cmp	r4, r5
 800da72:	d101      	bne.n	800da78 <__sfputs_r+0x12>
 800da74:	2000      	movs	r0, #0
 800da76:	e007      	b.n	800da88 <__sfputs_r+0x22>
 800da78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7c:	463a      	mov	r2, r7
 800da7e:	4630      	mov	r0, r6
 800da80:	f7ff ffda 	bl	800da38 <__sfputc_r>
 800da84:	1c43      	adds	r3, r0, #1
 800da86:	d1f3      	bne.n	800da70 <__sfputs_r+0xa>
 800da88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da8c <_vfiprintf_r>:
 800da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	460d      	mov	r5, r1
 800da92:	b09d      	sub	sp, #116	; 0x74
 800da94:	4614      	mov	r4, r2
 800da96:	4698      	mov	r8, r3
 800da98:	4606      	mov	r6, r0
 800da9a:	b118      	cbz	r0, 800daa4 <_vfiprintf_r+0x18>
 800da9c:	6983      	ldr	r3, [r0, #24]
 800da9e:	b90b      	cbnz	r3, 800daa4 <_vfiprintf_r+0x18>
 800daa0:	f7ff feb8 	bl	800d814 <__sinit>
 800daa4:	4b89      	ldr	r3, [pc, #548]	; (800dccc <_vfiprintf_r+0x240>)
 800daa6:	429d      	cmp	r5, r3
 800daa8:	d11b      	bne.n	800dae2 <_vfiprintf_r+0x56>
 800daaa:	6875      	ldr	r5, [r6, #4]
 800daac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800daae:	07d9      	lsls	r1, r3, #31
 800dab0:	d405      	bmi.n	800dabe <_vfiprintf_r+0x32>
 800dab2:	89ab      	ldrh	r3, [r5, #12]
 800dab4:	059a      	lsls	r2, r3, #22
 800dab6:	d402      	bmi.n	800dabe <_vfiprintf_r+0x32>
 800dab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daba:	f7ff ff49 	bl	800d950 <__retarget_lock_acquire_recursive>
 800dabe:	89ab      	ldrh	r3, [r5, #12]
 800dac0:	071b      	lsls	r3, r3, #28
 800dac2:	d501      	bpl.n	800dac8 <_vfiprintf_r+0x3c>
 800dac4:	692b      	ldr	r3, [r5, #16]
 800dac6:	b9eb      	cbnz	r3, 800db04 <_vfiprintf_r+0x78>
 800dac8:	4629      	mov	r1, r5
 800daca:	4630      	mov	r0, r6
 800dacc:	f000 fb92 	bl	800e1f4 <__swsetup_r>
 800dad0:	b1c0      	cbz	r0, 800db04 <_vfiprintf_r+0x78>
 800dad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad4:	07dc      	lsls	r4, r3, #31
 800dad6:	d50e      	bpl.n	800daf6 <_vfiprintf_r+0x6a>
 800dad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dadc:	b01d      	add	sp, #116	; 0x74
 800dade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae2:	4b7b      	ldr	r3, [pc, #492]	; (800dcd0 <_vfiprintf_r+0x244>)
 800dae4:	429d      	cmp	r5, r3
 800dae6:	d101      	bne.n	800daec <_vfiprintf_r+0x60>
 800dae8:	68b5      	ldr	r5, [r6, #8]
 800daea:	e7df      	b.n	800daac <_vfiprintf_r+0x20>
 800daec:	4b79      	ldr	r3, [pc, #484]	; (800dcd4 <_vfiprintf_r+0x248>)
 800daee:	429d      	cmp	r5, r3
 800daf0:	bf08      	it	eq
 800daf2:	68f5      	ldreq	r5, [r6, #12]
 800daf4:	e7da      	b.n	800daac <_vfiprintf_r+0x20>
 800daf6:	89ab      	ldrh	r3, [r5, #12]
 800daf8:	0598      	lsls	r0, r3, #22
 800dafa:	d4ed      	bmi.n	800dad8 <_vfiprintf_r+0x4c>
 800dafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dafe:	f7ff ff28 	bl	800d952 <__retarget_lock_release_recursive>
 800db02:	e7e9      	b.n	800dad8 <_vfiprintf_r+0x4c>
 800db04:	2300      	movs	r3, #0
 800db06:	9309      	str	r3, [sp, #36]	; 0x24
 800db08:	2320      	movs	r3, #32
 800db0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db12:	2330      	movs	r3, #48	; 0x30
 800db14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcd8 <_vfiprintf_r+0x24c>
 800db18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db1c:	f04f 0901 	mov.w	r9, #1
 800db20:	4623      	mov	r3, r4
 800db22:	469a      	mov	sl, r3
 800db24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db28:	b10a      	cbz	r2, 800db2e <_vfiprintf_r+0xa2>
 800db2a:	2a25      	cmp	r2, #37	; 0x25
 800db2c:	d1f9      	bne.n	800db22 <_vfiprintf_r+0x96>
 800db2e:	ebba 0b04 	subs.w	fp, sl, r4
 800db32:	d00b      	beq.n	800db4c <_vfiprintf_r+0xc0>
 800db34:	465b      	mov	r3, fp
 800db36:	4622      	mov	r2, r4
 800db38:	4629      	mov	r1, r5
 800db3a:	4630      	mov	r0, r6
 800db3c:	f7ff ff93 	bl	800da66 <__sfputs_r>
 800db40:	3001      	adds	r0, #1
 800db42:	f000 80aa 	beq.w	800dc9a <_vfiprintf_r+0x20e>
 800db46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db48:	445a      	add	r2, fp
 800db4a:	9209      	str	r2, [sp, #36]	; 0x24
 800db4c:	f89a 3000 	ldrb.w	r3, [sl]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 80a2 	beq.w	800dc9a <_vfiprintf_r+0x20e>
 800db56:	2300      	movs	r3, #0
 800db58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db60:	f10a 0a01 	add.w	sl, sl, #1
 800db64:	9304      	str	r3, [sp, #16]
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db6c:	931a      	str	r3, [sp, #104]	; 0x68
 800db6e:	4654      	mov	r4, sl
 800db70:	2205      	movs	r2, #5
 800db72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db76:	4858      	ldr	r0, [pc, #352]	; (800dcd8 <_vfiprintf_r+0x24c>)
 800db78:	f7f2 fb3a 	bl	80001f0 <memchr>
 800db7c:	9a04      	ldr	r2, [sp, #16]
 800db7e:	b9d8      	cbnz	r0, 800dbb8 <_vfiprintf_r+0x12c>
 800db80:	06d1      	lsls	r1, r2, #27
 800db82:	bf44      	itt	mi
 800db84:	2320      	movmi	r3, #32
 800db86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db8a:	0713      	lsls	r3, r2, #28
 800db8c:	bf44      	itt	mi
 800db8e:	232b      	movmi	r3, #43	; 0x2b
 800db90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db94:	f89a 3000 	ldrb.w	r3, [sl]
 800db98:	2b2a      	cmp	r3, #42	; 0x2a
 800db9a:	d015      	beq.n	800dbc8 <_vfiprintf_r+0x13c>
 800db9c:	9a07      	ldr	r2, [sp, #28]
 800db9e:	4654      	mov	r4, sl
 800dba0:	2000      	movs	r0, #0
 800dba2:	f04f 0c0a 	mov.w	ip, #10
 800dba6:	4621      	mov	r1, r4
 800dba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbac:	3b30      	subs	r3, #48	; 0x30
 800dbae:	2b09      	cmp	r3, #9
 800dbb0:	d94e      	bls.n	800dc50 <_vfiprintf_r+0x1c4>
 800dbb2:	b1b0      	cbz	r0, 800dbe2 <_vfiprintf_r+0x156>
 800dbb4:	9207      	str	r2, [sp, #28]
 800dbb6:	e014      	b.n	800dbe2 <_vfiprintf_r+0x156>
 800dbb8:	eba0 0308 	sub.w	r3, r0, r8
 800dbbc:	fa09 f303 	lsl.w	r3, r9, r3
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	46a2      	mov	sl, r4
 800dbc6:	e7d2      	b.n	800db6e <_vfiprintf_r+0xe2>
 800dbc8:	9b03      	ldr	r3, [sp, #12]
 800dbca:	1d19      	adds	r1, r3, #4
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	9103      	str	r1, [sp, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bfbb      	ittet	lt
 800dbd4:	425b      	neglt	r3, r3
 800dbd6:	f042 0202 	orrlt.w	r2, r2, #2
 800dbda:	9307      	strge	r3, [sp, #28]
 800dbdc:	9307      	strlt	r3, [sp, #28]
 800dbde:	bfb8      	it	lt
 800dbe0:	9204      	strlt	r2, [sp, #16]
 800dbe2:	7823      	ldrb	r3, [r4, #0]
 800dbe4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbe6:	d10c      	bne.n	800dc02 <_vfiprintf_r+0x176>
 800dbe8:	7863      	ldrb	r3, [r4, #1]
 800dbea:	2b2a      	cmp	r3, #42	; 0x2a
 800dbec:	d135      	bne.n	800dc5a <_vfiprintf_r+0x1ce>
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	1d1a      	adds	r2, r3, #4
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	9203      	str	r2, [sp, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bfb8      	it	lt
 800dbfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dbfe:	3402      	adds	r4, #2
 800dc00:	9305      	str	r3, [sp, #20]
 800dc02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dce8 <_vfiprintf_r+0x25c>
 800dc06:	7821      	ldrb	r1, [r4, #0]
 800dc08:	2203      	movs	r2, #3
 800dc0a:	4650      	mov	r0, sl
 800dc0c:	f7f2 faf0 	bl	80001f0 <memchr>
 800dc10:	b140      	cbz	r0, 800dc24 <_vfiprintf_r+0x198>
 800dc12:	2340      	movs	r3, #64	; 0x40
 800dc14:	eba0 000a 	sub.w	r0, r0, sl
 800dc18:	fa03 f000 	lsl.w	r0, r3, r0
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	4303      	orrs	r3, r0
 800dc20:	3401      	adds	r4, #1
 800dc22:	9304      	str	r3, [sp, #16]
 800dc24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc28:	482c      	ldr	r0, [pc, #176]	; (800dcdc <_vfiprintf_r+0x250>)
 800dc2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc2e:	2206      	movs	r2, #6
 800dc30:	f7f2 fade 	bl	80001f0 <memchr>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d03f      	beq.n	800dcb8 <_vfiprintf_r+0x22c>
 800dc38:	4b29      	ldr	r3, [pc, #164]	; (800dce0 <_vfiprintf_r+0x254>)
 800dc3a:	bb1b      	cbnz	r3, 800dc84 <_vfiprintf_r+0x1f8>
 800dc3c:	9b03      	ldr	r3, [sp, #12]
 800dc3e:	3307      	adds	r3, #7
 800dc40:	f023 0307 	bic.w	r3, r3, #7
 800dc44:	3308      	adds	r3, #8
 800dc46:	9303      	str	r3, [sp, #12]
 800dc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4a:	443b      	add	r3, r7
 800dc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc4e:	e767      	b.n	800db20 <_vfiprintf_r+0x94>
 800dc50:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc54:	460c      	mov	r4, r1
 800dc56:	2001      	movs	r0, #1
 800dc58:	e7a5      	b.n	800dba6 <_vfiprintf_r+0x11a>
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	3401      	adds	r4, #1
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	4619      	mov	r1, r3
 800dc62:	f04f 0c0a 	mov.w	ip, #10
 800dc66:	4620      	mov	r0, r4
 800dc68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc6c:	3a30      	subs	r2, #48	; 0x30
 800dc6e:	2a09      	cmp	r2, #9
 800dc70:	d903      	bls.n	800dc7a <_vfiprintf_r+0x1ee>
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d0c5      	beq.n	800dc02 <_vfiprintf_r+0x176>
 800dc76:	9105      	str	r1, [sp, #20]
 800dc78:	e7c3      	b.n	800dc02 <_vfiprintf_r+0x176>
 800dc7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc7e:	4604      	mov	r4, r0
 800dc80:	2301      	movs	r3, #1
 800dc82:	e7f0      	b.n	800dc66 <_vfiprintf_r+0x1da>
 800dc84:	ab03      	add	r3, sp, #12
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	462a      	mov	r2, r5
 800dc8a:	4b16      	ldr	r3, [pc, #88]	; (800dce4 <_vfiprintf_r+0x258>)
 800dc8c:	a904      	add	r1, sp, #16
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f3af 8000 	nop.w
 800dc94:	4607      	mov	r7, r0
 800dc96:	1c78      	adds	r0, r7, #1
 800dc98:	d1d6      	bne.n	800dc48 <_vfiprintf_r+0x1bc>
 800dc9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc9c:	07d9      	lsls	r1, r3, #31
 800dc9e:	d405      	bmi.n	800dcac <_vfiprintf_r+0x220>
 800dca0:	89ab      	ldrh	r3, [r5, #12]
 800dca2:	059a      	lsls	r2, r3, #22
 800dca4:	d402      	bmi.n	800dcac <_vfiprintf_r+0x220>
 800dca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dca8:	f7ff fe53 	bl	800d952 <__retarget_lock_release_recursive>
 800dcac:	89ab      	ldrh	r3, [r5, #12]
 800dcae:	065b      	lsls	r3, r3, #25
 800dcb0:	f53f af12 	bmi.w	800dad8 <_vfiprintf_r+0x4c>
 800dcb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcb6:	e711      	b.n	800dadc <_vfiprintf_r+0x50>
 800dcb8:	ab03      	add	r3, sp, #12
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	462a      	mov	r2, r5
 800dcbe:	4b09      	ldr	r3, [pc, #36]	; (800dce4 <_vfiprintf_r+0x258>)
 800dcc0:	a904      	add	r1, sp, #16
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f000 f880 	bl	800ddc8 <_printf_i>
 800dcc8:	e7e4      	b.n	800dc94 <_vfiprintf_r+0x208>
 800dcca:	bf00      	nop
 800dccc:	0800e878 	.word	0x0800e878
 800dcd0:	0800e898 	.word	0x0800e898
 800dcd4:	0800e858 	.word	0x0800e858
 800dcd8:	0800e8b8 	.word	0x0800e8b8
 800dcdc:	0800e8c2 	.word	0x0800e8c2
 800dce0:	00000000 	.word	0x00000000
 800dce4:	0800da67 	.word	0x0800da67
 800dce8:	0800e8be 	.word	0x0800e8be

0800dcec <_printf_common>:
 800dcec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	4699      	mov	r9, r3
 800dcf4:	688a      	ldr	r2, [r1, #8]
 800dcf6:	690b      	ldr	r3, [r1, #16]
 800dcf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	bfb8      	it	lt
 800dd00:	4613      	movlt	r3, r2
 800dd02:	6033      	str	r3, [r6, #0]
 800dd04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd08:	4607      	mov	r7, r0
 800dd0a:	460c      	mov	r4, r1
 800dd0c:	b10a      	cbz	r2, 800dd12 <_printf_common+0x26>
 800dd0e:	3301      	adds	r3, #1
 800dd10:	6033      	str	r3, [r6, #0]
 800dd12:	6823      	ldr	r3, [r4, #0]
 800dd14:	0699      	lsls	r1, r3, #26
 800dd16:	bf42      	ittt	mi
 800dd18:	6833      	ldrmi	r3, [r6, #0]
 800dd1a:	3302      	addmi	r3, #2
 800dd1c:	6033      	strmi	r3, [r6, #0]
 800dd1e:	6825      	ldr	r5, [r4, #0]
 800dd20:	f015 0506 	ands.w	r5, r5, #6
 800dd24:	d106      	bne.n	800dd34 <_printf_common+0x48>
 800dd26:	f104 0a19 	add.w	sl, r4, #25
 800dd2a:	68e3      	ldr	r3, [r4, #12]
 800dd2c:	6832      	ldr	r2, [r6, #0]
 800dd2e:	1a9b      	subs	r3, r3, r2
 800dd30:	42ab      	cmp	r3, r5
 800dd32:	dc26      	bgt.n	800dd82 <_printf_common+0x96>
 800dd34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd38:	1e13      	subs	r3, r2, #0
 800dd3a:	6822      	ldr	r2, [r4, #0]
 800dd3c:	bf18      	it	ne
 800dd3e:	2301      	movne	r3, #1
 800dd40:	0692      	lsls	r2, r2, #26
 800dd42:	d42b      	bmi.n	800dd9c <_printf_common+0xb0>
 800dd44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd48:	4649      	mov	r1, r9
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	47c0      	blx	r8
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d01e      	beq.n	800dd90 <_printf_common+0xa4>
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	68e5      	ldr	r5, [r4, #12]
 800dd56:	6832      	ldr	r2, [r6, #0]
 800dd58:	f003 0306 	and.w	r3, r3, #6
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	bf08      	it	eq
 800dd60:	1aad      	subeq	r5, r5, r2
 800dd62:	68a3      	ldr	r3, [r4, #8]
 800dd64:	6922      	ldr	r2, [r4, #16]
 800dd66:	bf0c      	ite	eq
 800dd68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd6c:	2500      	movne	r5, #0
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	bfc4      	itt	gt
 800dd72:	1a9b      	subgt	r3, r3, r2
 800dd74:	18ed      	addgt	r5, r5, r3
 800dd76:	2600      	movs	r6, #0
 800dd78:	341a      	adds	r4, #26
 800dd7a:	42b5      	cmp	r5, r6
 800dd7c:	d11a      	bne.n	800ddb4 <_printf_common+0xc8>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	e008      	b.n	800dd94 <_printf_common+0xa8>
 800dd82:	2301      	movs	r3, #1
 800dd84:	4652      	mov	r2, sl
 800dd86:	4649      	mov	r1, r9
 800dd88:	4638      	mov	r0, r7
 800dd8a:	47c0      	blx	r8
 800dd8c:	3001      	adds	r0, #1
 800dd8e:	d103      	bne.n	800dd98 <_printf_common+0xac>
 800dd90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd98:	3501      	adds	r5, #1
 800dd9a:	e7c6      	b.n	800dd2a <_printf_common+0x3e>
 800dd9c:	18e1      	adds	r1, r4, r3
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	2030      	movs	r0, #48	; 0x30
 800dda2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dda6:	4422      	add	r2, r4
 800dda8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddb0:	3302      	adds	r3, #2
 800ddb2:	e7c7      	b.n	800dd44 <_printf_common+0x58>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	4622      	mov	r2, r4
 800ddb8:	4649      	mov	r1, r9
 800ddba:	4638      	mov	r0, r7
 800ddbc:	47c0      	blx	r8
 800ddbe:	3001      	adds	r0, #1
 800ddc0:	d0e6      	beq.n	800dd90 <_printf_common+0xa4>
 800ddc2:	3601      	adds	r6, #1
 800ddc4:	e7d9      	b.n	800dd7a <_printf_common+0x8e>
	...

0800ddc8 <_printf_i>:
 800ddc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddcc:	7e0f      	ldrb	r7, [r1, #24]
 800ddce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddd0:	2f78      	cmp	r7, #120	; 0x78
 800ddd2:	4691      	mov	r9, r2
 800ddd4:	4680      	mov	r8, r0
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	469a      	mov	sl, r3
 800ddda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddde:	d807      	bhi.n	800ddf0 <_printf_i+0x28>
 800dde0:	2f62      	cmp	r7, #98	; 0x62
 800dde2:	d80a      	bhi.n	800ddfa <_printf_i+0x32>
 800dde4:	2f00      	cmp	r7, #0
 800dde6:	f000 80d8 	beq.w	800df9a <_printf_i+0x1d2>
 800ddea:	2f58      	cmp	r7, #88	; 0x58
 800ddec:	f000 80a3 	beq.w	800df36 <_printf_i+0x16e>
 800ddf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ddf8:	e03a      	b.n	800de70 <_printf_i+0xa8>
 800ddfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ddfe:	2b15      	cmp	r3, #21
 800de00:	d8f6      	bhi.n	800ddf0 <_printf_i+0x28>
 800de02:	a101      	add	r1, pc, #4	; (adr r1, 800de08 <_printf_i+0x40>)
 800de04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de08:	0800de61 	.word	0x0800de61
 800de0c:	0800de75 	.word	0x0800de75
 800de10:	0800ddf1 	.word	0x0800ddf1
 800de14:	0800ddf1 	.word	0x0800ddf1
 800de18:	0800ddf1 	.word	0x0800ddf1
 800de1c:	0800ddf1 	.word	0x0800ddf1
 800de20:	0800de75 	.word	0x0800de75
 800de24:	0800ddf1 	.word	0x0800ddf1
 800de28:	0800ddf1 	.word	0x0800ddf1
 800de2c:	0800ddf1 	.word	0x0800ddf1
 800de30:	0800ddf1 	.word	0x0800ddf1
 800de34:	0800df81 	.word	0x0800df81
 800de38:	0800dea5 	.word	0x0800dea5
 800de3c:	0800df63 	.word	0x0800df63
 800de40:	0800ddf1 	.word	0x0800ddf1
 800de44:	0800ddf1 	.word	0x0800ddf1
 800de48:	0800dfa3 	.word	0x0800dfa3
 800de4c:	0800ddf1 	.word	0x0800ddf1
 800de50:	0800dea5 	.word	0x0800dea5
 800de54:	0800ddf1 	.word	0x0800ddf1
 800de58:	0800ddf1 	.word	0x0800ddf1
 800de5c:	0800df6b 	.word	0x0800df6b
 800de60:	682b      	ldr	r3, [r5, #0]
 800de62:	1d1a      	adds	r2, r3, #4
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	602a      	str	r2, [r5, #0]
 800de68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de70:	2301      	movs	r3, #1
 800de72:	e0a3      	b.n	800dfbc <_printf_i+0x1f4>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	6829      	ldr	r1, [r5, #0]
 800de78:	0606      	lsls	r6, r0, #24
 800de7a:	f101 0304 	add.w	r3, r1, #4
 800de7e:	d50a      	bpl.n	800de96 <_printf_i+0xce>
 800de80:	680e      	ldr	r6, [r1, #0]
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	2e00      	cmp	r6, #0
 800de86:	da03      	bge.n	800de90 <_printf_i+0xc8>
 800de88:	232d      	movs	r3, #45	; 0x2d
 800de8a:	4276      	negs	r6, r6
 800de8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de90:	485e      	ldr	r0, [pc, #376]	; (800e00c <_printf_i+0x244>)
 800de92:	230a      	movs	r3, #10
 800de94:	e019      	b.n	800deca <_printf_i+0x102>
 800de96:	680e      	ldr	r6, [r1, #0]
 800de98:	602b      	str	r3, [r5, #0]
 800de9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de9e:	bf18      	it	ne
 800dea0:	b236      	sxthne	r6, r6
 800dea2:	e7ef      	b.n	800de84 <_printf_i+0xbc>
 800dea4:	682b      	ldr	r3, [r5, #0]
 800dea6:	6820      	ldr	r0, [r4, #0]
 800dea8:	1d19      	adds	r1, r3, #4
 800deaa:	6029      	str	r1, [r5, #0]
 800deac:	0601      	lsls	r1, r0, #24
 800deae:	d501      	bpl.n	800deb4 <_printf_i+0xec>
 800deb0:	681e      	ldr	r6, [r3, #0]
 800deb2:	e002      	b.n	800deba <_printf_i+0xf2>
 800deb4:	0646      	lsls	r6, r0, #25
 800deb6:	d5fb      	bpl.n	800deb0 <_printf_i+0xe8>
 800deb8:	881e      	ldrh	r6, [r3, #0]
 800deba:	4854      	ldr	r0, [pc, #336]	; (800e00c <_printf_i+0x244>)
 800debc:	2f6f      	cmp	r7, #111	; 0x6f
 800debe:	bf0c      	ite	eq
 800dec0:	2308      	moveq	r3, #8
 800dec2:	230a      	movne	r3, #10
 800dec4:	2100      	movs	r1, #0
 800dec6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deca:	6865      	ldr	r5, [r4, #4]
 800decc:	60a5      	str	r5, [r4, #8]
 800dece:	2d00      	cmp	r5, #0
 800ded0:	bfa2      	ittt	ge
 800ded2:	6821      	ldrge	r1, [r4, #0]
 800ded4:	f021 0104 	bicge.w	r1, r1, #4
 800ded8:	6021      	strge	r1, [r4, #0]
 800deda:	b90e      	cbnz	r6, 800dee0 <_printf_i+0x118>
 800dedc:	2d00      	cmp	r5, #0
 800dede:	d04d      	beq.n	800df7c <_printf_i+0x1b4>
 800dee0:	4615      	mov	r5, r2
 800dee2:	fbb6 f1f3 	udiv	r1, r6, r3
 800dee6:	fb03 6711 	mls	r7, r3, r1, r6
 800deea:	5dc7      	ldrb	r7, [r0, r7]
 800deec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800def0:	4637      	mov	r7, r6
 800def2:	42bb      	cmp	r3, r7
 800def4:	460e      	mov	r6, r1
 800def6:	d9f4      	bls.n	800dee2 <_printf_i+0x11a>
 800def8:	2b08      	cmp	r3, #8
 800defa:	d10b      	bne.n	800df14 <_printf_i+0x14c>
 800defc:	6823      	ldr	r3, [r4, #0]
 800defe:	07de      	lsls	r6, r3, #31
 800df00:	d508      	bpl.n	800df14 <_printf_i+0x14c>
 800df02:	6923      	ldr	r3, [r4, #16]
 800df04:	6861      	ldr	r1, [r4, #4]
 800df06:	4299      	cmp	r1, r3
 800df08:	bfde      	ittt	le
 800df0a:	2330      	movle	r3, #48	; 0x30
 800df0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800df14:	1b52      	subs	r2, r2, r5
 800df16:	6122      	str	r2, [r4, #16]
 800df18:	f8cd a000 	str.w	sl, [sp]
 800df1c:	464b      	mov	r3, r9
 800df1e:	aa03      	add	r2, sp, #12
 800df20:	4621      	mov	r1, r4
 800df22:	4640      	mov	r0, r8
 800df24:	f7ff fee2 	bl	800dcec <_printf_common>
 800df28:	3001      	adds	r0, #1
 800df2a:	d14c      	bne.n	800dfc6 <_printf_i+0x1fe>
 800df2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df30:	b004      	add	sp, #16
 800df32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df36:	4835      	ldr	r0, [pc, #212]	; (800e00c <_printf_i+0x244>)
 800df38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df3c:	6829      	ldr	r1, [r5, #0]
 800df3e:	6823      	ldr	r3, [r4, #0]
 800df40:	f851 6b04 	ldr.w	r6, [r1], #4
 800df44:	6029      	str	r1, [r5, #0]
 800df46:	061d      	lsls	r5, r3, #24
 800df48:	d514      	bpl.n	800df74 <_printf_i+0x1ac>
 800df4a:	07df      	lsls	r7, r3, #31
 800df4c:	bf44      	itt	mi
 800df4e:	f043 0320 	orrmi.w	r3, r3, #32
 800df52:	6023      	strmi	r3, [r4, #0]
 800df54:	b91e      	cbnz	r6, 800df5e <_printf_i+0x196>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	f023 0320 	bic.w	r3, r3, #32
 800df5c:	6023      	str	r3, [r4, #0]
 800df5e:	2310      	movs	r3, #16
 800df60:	e7b0      	b.n	800dec4 <_printf_i+0xfc>
 800df62:	6823      	ldr	r3, [r4, #0]
 800df64:	f043 0320 	orr.w	r3, r3, #32
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	2378      	movs	r3, #120	; 0x78
 800df6c:	4828      	ldr	r0, [pc, #160]	; (800e010 <_printf_i+0x248>)
 800df6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df72:	e7e3      	b.n	800df3c <_printf_i+0x174>
 800df74:	0659      	lsls	r1, r3, #25
 800df76:	bf48      	it	mi
 800df78:	b2b6      	uxthmi	r6, r6
 800df7a:	e7e6      	b.n	800df4a <_printf_i+0x182>
 800df7c:	4615      	mov	r5, r2
 800df7e:	e7bb      	b.n	800def8 <_printf_i+0x130>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	6826      	ldr	r6, [r4, #0]
 800df84:	6961      	ldr	r1, [r4, #20]
 800df86:	1d18      	adds	r0, r3, #4
 800df88:	6028      	str	r0, [r5, #0]
 800df8a:	0635      	lsls	r5, r6, #24
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	d501      	bpl.n	800df94 <_printf_i+0x1cc>
 800df90:	6019      	str	r1, [r3, #0]
 800df92:	e002      	b.n	800df9a <_printf_i+0x1d2>
 800df94:	0670      	lsls	r0, r6, #25
 800df96:	d5fb      	bpl.n	800df90 <_printf_i+0x1c8>
 800df98:	8019      	strh	r1, [r3, #0]
 800df9a:	2300      	movs	r3, #0
 800df9c:	6123      	str	r3, [r4, #16]
 800df9e:	4615      	mov	r5, r2
 800dfa0:	e7ba      	b.n	800df18 <_printf_i+0x150>
 800dfa2:	682b      	ldr	r3, [r5, #0]
 800dfa4:	1d1a      	adds	r2, r3, #4
 800dfa6:	602a      	str	r2, [r5, #0]
 800dfa8:	681d      	ldr	r5, [r3, #0]
 800dfaa:	6862      	ldr	r2, [r4, #4]
 800dfac:	2100      	movs	r1, #0
 800dfae:	4628      	mov	r0, r5
 800dfb0:	f7f2 f91e 	bl	80001f0 <memchr>
 800dfb4:	b108      	cbz	r0, 800dfba <_printf_i+0x1f2>
 800dfb6:	1b40      	subs	r0, r0, r5
 800dfb8:	6060      	str	r0, [r4, #4]
 800dfba:	6863      	ldr	r3, [r4, #4]
 800dfbc:	6123      	str	r3, [r4, #16]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfc4:	e7a8      	b.n	800df18 <_printf_i+0x150>
 800dfc6:	6923      	ldr	r3, [r4, #16]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4649      	mov	r1, r9
 800dfcc:	4640      	mov	r0, r8
 800dfce:	47d0      	blx	sl
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d0ab      	beq.n	800df2c <_printf_i+0x164>
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	079b      	lsls	r3, r3, #30
 800dfd8:	d413      	bmi.n	800e002 <_printf_i+0x23a>
 800dfda:	68e0      	ldr	r0, [r4, #12]
 800dfdc:	9b03      	ldr	r3, [sp, #12]
 800dfde:	4298      	cmp	r0, r3
 800dfe0:	bfb8      	it	lt
 800dfe2:	4618      	movlt	r0, r3
 800dfe4:	e7a4      	b.n	800df30 <_printf_i+0x168>
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	4632      	mov	r2, r6
 800dfea:	4649      	mov	r1, r9
 800dfec:	4640      	mov	r0, r8
 800dfee:	47d0      	blx	sl
 800dff0:	3001      	adds	r0, #1
 800dff2:	d09b      	beq.n	800df2c <_printf_i+0x164>
 800dff4:	3501      	adds	r5, #1
 800dff6:	68e3      	ldr	r3, [r4, #12]
 800dff8:	9903      	ldr	r1, [sp, #12]
 800dffa:	1a5b      	subs	r3, r3, r1
 800dffc:	42ab      	cmp	r3, r5
 800dffe:	dcf2      	bgt.n	800dfe6 <_printf_i+0x21e>
 800e000:	e7eb      	b.n	800dfda <_printf_i+0x212>
 800e002:	2500      	movs	r5, #0
 800e004:	f104 0619 	add.w	r6, r4, #25
 800e008:	e7f5      	b.n	800dff6 <_printf_i+0x22e>
 800e00a:	bf00      	nop
 800e00c:	0800e8c9 	.word	0x0800e8c9
 800e010:	0800e8da 	.word	0x0800e8da

0800e014 <_putc_r>:
 800e014:	b570      	push	{r4, r5, r6, lr}
 800e016:	460d      	mov	r5, r1
 800e018:	4614      	mov	r4, r2
 800e01a:	4606      	mov	r6, r0
 800e01c:	b118      	cbz	r0, 800e026 <_putc_r+0x12>
 800e01e:	6983      	ldr	r3, [r0, #24]
 800e020:	b90b      	cbnz	r3, 800e026 <_putc_r+0x12>
 800e022:	f7ff fbf7 	bl	800d814 <__sinit>
 800e026:	4b1c      	ldr	r3, [pc, #112]	; (800e098 <_putc_r+0x84>)
 800e028:	429c      	cmp	r4, r3
 800e02a:	d124      	bne.n	800e076 <_putc_r+0x62>
 800e02c:	6874      	ldr	r4, [r6, #4]
 800e02e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e030:	07d8      	lsls	r0, r3, #31
 800e032:	d405      	bmi.n	800e040 <_putc_r+0x2c>
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	0599      	lsls	r1, r3, #22
 800e038:	d402      	bmi.n	800e040 <_putc_r+0x2c>
 800e03a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e03c:	f7ff fc88 	bl	800d950 <__retarget_lock_acquire_recursive>
 800e040:	68a3      	ldr	r3, [r4, #8]
 800e042:	3b01      	subs	r3, #1
 800e044:	2b00      	cmp	r3, #0
 800e046:	60a3      	str	r3, [r4, #8]
 800e048:	da05      	bge.n	800e056 <_putc_r+0x42>
 800e04a:	69a2      	ldr	r2, [r4, #24]
 800e04c:	4293      	cmp	r3, r2
 800e04e:	db1c      	blt.n	800e08a <_putc_r+0x76>
 800e050:	b2eb      	uxtb	r3, r5
 800e052:	2b0a      	cmp	r3, #10
 800e054:	d019      	beq.n	800e08a <_putc_r+0x76>
 800e056:	6823      	ldr	r3, [r4, #0]
 800e058:	1c5a      	adds	r2, r3, #1
 800e05a:	6022      	str	r2, [r4, #0]
 800e05c:	701d      	strb	r5, [r3, #0]
 800e05e:	b2ed      	uxtb	r5, r5
 800e060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e062:	07da      	lsls	r2, r3, #31
 800e064:	d405      	bmi.n	800e072 <_putc_r+0x5e>
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	059b      	lsls	r3, r3, #22
 800e06a:	d402      	bmi.n	800e072 <_putc_r+0x5e>
 800e06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e06e:	f7ff fc70 	bl	800d952 <__retarget_lock_release_recursive>
 800e072:	4628      	mov	r0, r5
 800e074:	bd70      	pop	{r4, r5, r6, pc}
 800e076:	4b09      	ldr	r3, [pc, #36]	; (800e09c <_putc_r+0x88>)
 800e078:	429c      	cmp	r4, r3
 800e07a:	d101      	bne.n	800e080 <_putc_r+0x6c>
 800e07c:	68b4      	ldr	r4, [r6, #8]
 800e07e:	e7d6      	b.n	800e02e <_putc_r+0x1a>
 800e080:	4b07      	ldr	r3, [pc, #28]	; (800e0a0 <_putc_r+0x8c>)
 800e082:	429c      	cmp	r4, r3
 800e084:	bf08      	it	eq
 800e086:	68f4      	ldreq	r4, [r6, #12]
 800e088:	e7d1      	b.n	800e02e <_putc_r+0x1a>
 800e08a:	4629      	mov	r1, r5
 800e08c:	4622      	mov	r2, r4
 800e08e:	4630      	mov	r0, r6
 800e090:	f000 f84c 	bl	800e12c <__swbuf_r>
 800e094:	4605      	mov	r5, r0
 800e096:	e7e3      	b.n	800e060 <_putc_r+0x4c>
 800e098:	0800e878 	.word	0x0800e878
 800e09c:	0800e898 	.word	0x0800e898
 800e0a0:	0800e858 	.word	0x0800e858

0800e0a4 <__sread>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ac:	f000 f954 	bl	800e358 <_read_r>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	bfab      	itete	ge
 800e0b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0b6:	89a3      	ldrhlt	r3, [r4, #12]
 800e0b8:	181b      	addge	r3, r3, r0
 800e0ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0be:	bfac      	ite	ge
 800e0c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0c2:	81a3      	strhlt	r3, [r4, #12]
 800e0c4:	bd10      	pop	{r4, pc}

0800e0c6 <__swrite>:
 800e0c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ca:	461f      	mov	r7, r3
 800e0cc:	898b      	ldrh	r3, [r1, #12]
 800e0ce:	05db      	lsls	r3, r3, #23
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	460c      	mov	r4, r1
 800e0d4:	4616      	mov	r6, r2
 800e0d6:	d505      	bpl.n	800e0e4 <__swrite+0x1e>
 800e0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0dc:	2302      	movs	r3, #2
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f000 f928 	bl	800e334 <_lseek_r>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0ee:	81a3      	strh	r3, [r4, #12]
 800e0f0:	4632      	mov	r2, r6
 800e0f2:	463b      	mov	r3, r7
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0fa:	f000 b869 	b.w	800e1d0 <_write_r>

0800e0fe <__sseek>:
 800e0fe:	b510      	push	{r4, lr}
 800e100:	460c      	mov	r4, r1
 800e102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e106:	f000 f915 	bl	800e334 <_lseek_r>
 800e10a:	1c43      	adds	r3, r0, #1
 800e10c:	89a3      	ldrh	r3, [r4, #12]
 800e10e:	bf15      	itete	ne
 800e110:	6560      	strne	r0, [r4, #84]	; 0x54
 800e112:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e116:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e11a:	81a3      	strheq	r3, [r4, #12]
 800e11c:	bf18      	it	ne
 800e11e:	81a3      	strhne	r3, [r4, #12]
 800e120:	bd10      	pop	{r4, pc}

0800e122 <__sclose>:
 800e122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e126:	f000 b8d3 	b.w	800e2d0 <_close_r>
	...

0800e12c <__swbuf_r>:
 800e12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e12e:	460e      	mov	r6, r1
 800e130:	4614      	mov	r4, r2
 800e132:	4605      	mov	r5, r0
 800e134:	b118      	cbz	r0, 800e13e <__swbuf_r+0x12>
 800e136:	6983      	ldr	r3, [r0, #24]
 800e138:	b90b      	cbnz	r3, 800e13e <__swbuf_r+0x12>
 800e13a:	f7ff fb6b 	bl	800d814 <__sinit>
 800e13e:	4b21      	ldr	r3, [pc, #132]	; (800e1c4 <__swbuf_r+0x98>)
 800e140:	429c      	cmp	r4, r3
 800e142:	d12b      	bne.n	800e19c <__swbuf_r+0x70>
 800e144:	686c      	ldr	r4, [r5, #4]
 800e146:	69a3      	ldr	r3, [r4, #24]
 800e148:	60a3      	str	r3, [r4, #8]
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	071a      	lsls	r2, r3, #28
 800e14e:	d52f      	bpl.n	800e1b0 <__swbuf_r+0x84>
 800e150:	6923      	ldr	r3, [r4, #16]
 800e152:	b36b      	cbz	r3, 800e1b0 <__swbuf_r+0x84>
 800e154:	6923      	ldr	r3, [r4, #16]
 800e156:	6820      	ldr	r0, [r4, #0]
 800e158:	1ac0      	subs	r0, r0, r3
 800e15a:	6963      	ldr	r3, [r4, #20]
 800e15c:	b2f6      	uxtb	r6, r6
 800e15e:	4283      	cmp	r3, r0
 800e160:	4637      	mov	r7, r6
 800e162:	dc04      	bgt.n	800e16e <__swbuf_r+0x42>
 800e164:	4621      	mov	r1, r4
 800e166:	4628      	mov	r0, r5
 800e168:	f7ff fac0 	bl	800d6ec <_fflush_r>
 800e16c:	bb30      	cbnz	r0, 800e1bc <__swbuf_r+0x90>
 800e16e:	68a3      	ldr	r3, [r4, #8]
 800e170:	3b01      	subs	r3, #1
 800e172:	60a3      	str	r3, [r4, #8]
 800e174:	6823      	ldr	r3, [r4, #0]
 800e176:	1c5a      	adds	r2, r3, #1
 800e178:	6022      	str	r2, [r4, #0]
 800e17a:	701e      	strb	r6, [r3, #0]
 800e17c:	6963      	ldr	r3, [r4, #20]
 800e17e:	3001      	adds	r0, #1
 800e180:	4283      	cmp	r3, r0
 800e182:	d004      	beq.n	800e18e <__swbuf_r+0x62>
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	07db      	lsls	r3, r3, #31
 800e188:	d506      	bpl.n	800e198 <__swbuf_r+0x6c>
 800e18a:	2e0a      	cmp	r6, #10
 800e18c:	d104      	bne.n	800e198 <__swbuf_r+0x6c>
 800e18e:	4621      	mov	r1, r4
 800e190:	4628      	mov	r0, r5
 800e192:	f7ff faab 	bl	800d6ec <_fflush_r>
 800e196:	b988      	cbnz	r0, 800e1bc <__swbuf_r+0x90>
 800e198:	4638      	mov	r0, r7
 800e19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e19c:	4b0a      	ldr	r3, [pc, #40]	; (800e1c8 <__swbuf_r+0x9c>)
 800e19e:	429c      	cmp	r4, r3
 800e1a0:	d101      	bne.n	800e1a6 <__swbuf_r+0x7a>
 800e1a2:	68ac      	ldr	r4, [r5, #8]
 800e1a4:	e7cf      	b.n	800e146 <__swbuf_r+0x1a>
 800e1a6:	4b09      	ldr	r3, [pc, #36]	; (800e1cc <__swbuf_r+0xa0>)
 800e1a8:	429c      	cmp	r4, r3
 800e1aa:	bf08      	it	eq
 800e1ac:	68ec      	ldreq	r4, [r5, #12]
 800e1ae:	e7ca      	b.n	800e146 <__swbuf_r+0x1a>
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	f000 f81e 	bl	800e1f4 <__swsetup_r>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d0cb      	beq.n	800e154 <__swbuf_r+0x28>
 800e1bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e1c0:	e7ea      	b.n	800e198 <__swbuf_r+0x6c>
 800e1c2:	bf00      	nop
 800e1c4:	0800e878 	.word	0x0800e878
 800e1c8:	0800e898 	.word	0x0800e898
 800e1cc:	0800e858 	.word	0x0800e858

0800e1d0 <_write_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d07      	ldr	r5, [pc, #28]	; (800e1f0 <_write_r+0x20>)
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	4608      	mov	r0, r1
 800e1d8:	4611      	mov	r1, r2
 800e1da:	2200      	movs	r2, #0
 800e1dc:	602a      	str	r2, [r5, #0]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f7f3 fe16 	bl	8001e10 <_write>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d102      	bne.n	800e1ee <_write_r+0x1e>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	b103      	cbz	r3, 800e1ee <_write_r+0x1e>
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	bd38      	pop	{r3, r4, r5, pc}
 800e1f0:	20000b90 	.word	0x20000b90

0800e1f4 <__swsetup_r>:
 800e1f4:	4b32      	ldr	r3, [pc, #200]	; (800e2c0 <__swsetup_r+0xcc>)
 800e1f6:	b570      	push	{r4, r5, r6, lr}
 800e1f8:	681d      	ldr	r5, [r3, #0]
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	460c      	mov	r4, r1
 800e1fe:	b125      	cbz	r5, 800e20a <__swsetup_r+0x16>
 800e200:	69ab      	ldr	r3, [r5, #24]
 800e202:	b913      	cbnz	r3, 800e20a <__swsetup_r+0x16>
 800e204:	4628      	mov	r0, r5
 800e206:	f7ff fb05 	bl	800d814 <__sinit>
 800e20a:	4b2e      	ldr	r3, [pc, #184]	; (800e2c4 <__swsetup_r+0xd0>)
 800e20c:	429c      	cmp	r4, r3
 800e20e:	d10f      	bne.n	800e230 <__swsetup_r+0x3c>
 800e210:	686c      	ldr	r4, [r5, #4]
 800e212:	89a3      	ldrh	r3, [r4, #12]
 800e214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e218:	0719      	lsls	r1, r3, #28
 800e21a:	d42c      	bmi.n	800e276 <__swsetup_r+0x82>
 800e21c:	06dd      	lsls	r5, r3, #27
 800e21e:	d411      	bmi.n	800e244 <__swsetup_r+0x50>
 800e220:	2309      	movs	r3, #9
 800e222:	6033      	str	r3, [r6, #0]
 800e224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e228:	81a3      	strh	r3, [r4, #12]
 800e22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e22e:	e03e      	b.n	800e2ae <__swsetup_r+0xba>
 800e230:	4b25      	ldr	r3, [pc, #148]	; (800e2c8 <__swsetup_r+0xd4>)
 800e232:	429c      	cmp	r4, r3
 800e234:	d101      	bne.n	800e23a <__swsetup_r+0x46>
 800e236:	68ac      	ldr	r4, [r5, #8]
 800e238:	e7eb      	b.n	800e212 <__swsetup_r+0x1e>
 800e23a:	4b24      	ldr	r3, [pc, #144]	; (800e2cc <__swsetup_r+0xd8>)
 800e23c:	429c      	cmp	r4, r3
 800e23e:	bf08      	it	eq
 800e240:	68ec      	ldreq	r4, [r5, #12]
 800e242:	e7e6      	b.n	800e212 <__swsetup_r+0x1e>
 800e244:	0758      	lsls	r0, r3, #29
 800e246:	d512      	bpl.n	800e26e <__swsetup_r+0x7a>
 800e248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e24a:	b141      	cbz	r1, 800e25e <__swsetup_r+0x6a>
 800e24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e250:	4299      	cmp	r1, r3
 800e252:	d002      	beq.n	800e25a <__swsetup_r+0x66>
 800e254:	4630      	mov	r0, r6
 800e256:	f7fe ff53 	bl	800d100 <_free_r>
 800e25a:	2300      	movs	r3, #0
 800e25c:	6363      	str	r3, [r4, #52]	; 0x34
 800e25e:	89a3      	ldrh	r3, [r4, #12]
 800e260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e264:	81a3      	strh	r3, [r4, #12]
 800e266:	2300      	movs	r3, #0
 800e268:	6063      	str	r3, [r4, #4]
 800e26a:	6923      	ldr	r3, [r4, #16]
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	f043 0308 	orr.w	r3, r3, #8
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	6923      	ldr	r3, [r4, #16]
 800e278:	b94b      	cbnz	r3, 800e28e <__swsetup_r+0x9a>
 800e27a:	89a3      	ldrh	r3, [r4, #12]
 800e27c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e284:	d003      	beq.n	800e28e <__swsetup_r+0x9a>
 800e286:	4621      	mov	r1, r4
 800e288:	4630      	mov	r0, r6
 800e28a:	f7ff fb89 	bl	800d9a0 <__smakebuf_r>
 800e28e:	89a0      	ldrh	r0, [r4, #12]
 800e290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e294:	f010 0301 	ands.w	r3, r0, #1
 800e298:	d00a      	beq.n	800e2b0 <__swsetup_r+0xbc>
 800e29a:	2300      	movs	r3, #0
 800e29c:	60a3      	str	r3, [r4, #8]
 800e29e:	6963      	ldr	r3, [r4, #20]
 800e2a0:	425b      	negs	r3, r3
 800e2a2:	61a3      	str	r3, [r4, #24]
 800e2a4:	6923      	ldr	r3, [r4, #16]
 800e2a6:	b943      	cbnz	r3, 800e2ba <__swsetup_r+0xc6>
 800e2a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2ac:	d1ba      	bne.n	800e224 <__swsetup_r+0x30>
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	0781      	lsls	r1, r0, #30
 800e2b2:	bf58      	it	pl
 800e2b4:	6963      	ldrpl	r3, [r4, #20]
 800e2b6:	60a3      	str	r3, [r4, #8]
 800e2b8:	e7f4      	b.n	800e2a4 <__swsetup_r+0xb0>
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	e7f7      	b.n	800e2ae <__swsetup_r+0xba>
 800e2be:	bf00      	nop
 800e2c0:	200000f0 	.word	0x200000f0
 800e2c4:	0800e878 	.word	0x0800e878
 800e2c8:	0800e898 	.word	0x0800e898
 800e2cc:	0800e858 	.word	0x0800e858

0800e2d0 <_close_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4d06      	ldr	r5, [pc, #24]	; (800e2ec <_close_r+0x1c>)
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	4604      	mov	r4, r0
 800e2d8:	4608      	mov	r0, r1
 800e2da:	602b      	str	r3, [r5, #0]
 800e2dc:	f7f3 fdc4 	bl	8001e68 <_close>
 800e2e0:	1c43      	adds	r3, r0, #1
 800e2e2:	d102      	bne.n	800e2ea <_close_r+0x1a>
 800e2e4:	682b      	ldr	r3, [r5, #0]
 800e2e6:	b103      	cbz	r3, 800e2ea <_close_r+0x1a>
 800e2e8:	6023      	str	r3, [r4, #0]
 800e2ea:	bd38      	pop	{r3, r4, r5, pc}
 800e2ec:	20000b90 	.word	0x20000b90

0800e2f0 <_fstat_r>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	4d07      	ldr	r5, [pc, #28]	; (800e310 <_fstat_r+0x20>)
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	4608      	mov	r0, r1
 800e2fa:	4611      	mov	r1, r2
 800e2fc:	602b      	str	r3, [r5, #0]
 800e2fe:	f7f3 fe03 	bl	8001f08 <_fstat>
 800e302:	1c43      	adds	r3, r0, #1
 800e304:	d102      	bne.n	800e30c <_fstat_r+0x1c>
 800e306:	682b      	ldr	r3, [r5, #0]
 800e308:	b103      	cbz	r3, 800e30c <_fstat_r+0x1c>
 800e30a:	6023      	str	r3, [r4, #0]
 800e30c:	bd38      	pop	{r3, r4, r5, pc}
 800e30e:	bf00      	nop
 800e310:	20000b90 	.word	0x20000b90

0800e314 <_isatty_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d06      	ldr	r5, [pc, #24]	; (800e330 <_isatty_r+0x1c>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	602b      	str	r3, [r5, #0]
 800e320:	f7f3 fd60 	bl	8001de4 <_isatty>
 800e324:	1c43      	adds	r3, r0, #1
 800e326:	d102      	bne.n	800e32e <_isatty_r+0x1a>
 800e328:	682b      	ldr	r3, [r5, #0]
 800e32a:	b103      	cbz	r3, 800e32e <_isatty_r+0x1a>
 800e32c:	6023      	str	r3, [r4, #0]
 800e32e:	bd38      	pop	{r3, r4, r5, pc}
 800e330:	20000b90 	.word	0x20000b90

0800e334 <_lseek_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4d07      	ldr	r5, [pc, #28]	; (800e354 <_lseek_r+0x20>)
 800e338:	4604      	mov	r4, r0
 800e33a:	4608      	mov	r0, r1
 800e33c:	4611      	mov	r1, r2
 800e33e:	2200      	movs	r2, #0
 800e340:	602a      	str	r2, [r5, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	f7f3 fda7 	bl	8001e96 <_lseek>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d102      	bne.n	800e352 <_lseek_r+0x1e>
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	b103      	cbz	r3, 800e352 <_lseek_r+0x1e>
 800e350:	6023      	str	r3, [r4, #0]
 800e352:	bd38      	pop	{r3, r4, r5, pc}
 800e354:	20000b90 	.word	0x20000b90

0800e358 <_read_r>:
 800e358:	b538      	push	{r3, r4, r5, lr}
 800e35a:	4d07      	ldr	r5, [pc, #28]	; (800e378 <_read_r+0x20>)
 800e35c:	4604      	mov	r4, r0
 800e35e:	4608      	mov	r0, r1
 800e360:	4611      	mov	r1, r2
 800e362:	2200      	movs	r2, #0
 800e364:	602a      	str	r2, [r5, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	f7f3 fda6 	bl	8001eb8 <_read>
 800e36c:	1c43      	adds	r3, r0, #1
 800e36e:	d102      	bne.n	800e376 <_read_r+0x1e>
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	b103      	cbz	r3, 800e376 <_read_r+0x1e>
 800e374:	6023      	str	r3, [r4, #0]
 800e376:	bd38      	pop	{r3, r4, r5, pc}
 800e378:	20000b90 	.word	0x20000b90

0800e37c <_init>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	bf00      	nop
 800e380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e382:	bc08      	pop	{r3}
 800e384:	469e      	mov	lr, r3
 800e386:	4770      	bx	lr

0800e388 <_fini>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	bf00      	nop
 800e38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38e:	bc08      	pop	{r3}
 800e390:	469e      	mov	lr, r3
 800e392:	4770      	bx	lr
