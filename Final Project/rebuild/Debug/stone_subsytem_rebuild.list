
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb84  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800bd30  0800bd30  0001bd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd60  0800bd60  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd60  0800bd60  0001bd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd68  0800bd68  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800bd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00003844  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200038d8  200038d8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023b48  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ed3  00000000  00000000  00043c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac8  00000000  00000000  00048ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d8  00000000  00000000  0004a5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ac42  00000000  00000000  0004be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025277  00000000  00000000  00076ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e997a  00000000  00000000  0009bd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001856b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000072d0  00000000  00000000  00185704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000094 	.word	0x20000094
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800bd18 	.word	0x0800bd18

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000098 	.word	0x20000098
 80001e8:	0800bd18 	.word	0x0800bd18

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <Lis3dhInit>:

}



void Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 80004f8:	4a40      	ldr	r2, [pc, #256]	; (80005fc <Lis3dhInit+0x10c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 80004fe:	238f      	movs	r3, #143	; 0x8f
 8000500:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 8000502:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <Lis3dhInit+0x10c>)
 8000504:	6818      	ldr	r0, [r3, #0]
 8000506:	2130      	movs	r1, #48	; 0x30
 8000508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800050c:	2201      	movs	r2, #1
 800050e:	f004 f87f 	bl	8004610 <HAL_I2C_IsDeviceReady>
 8000512:	4603      	mov	r3, r0
 8000514:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000516:	4b39      	ldr	r3, [pc, #228]	; (80005fc <Lis3dhInit+0x10c>)
 8000518:	6818      	ldr	r0, [r3, #0]
 800051a:	2130      	movs	r1, #48	; 0x30
 800051c:	f107 0214 	add.w	r2, r7, #20
 8000520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	f003 fd4e 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 800052c:	4603      	mov	r3, r0
 800052e:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d002      	beq.n	800053c <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 8000536:	f000 f8bd 	bl	80006b4 <errorHandler>





}
 800053a:	e05b      	b.n	80005f4 <Lis3dhInit+0x104>
	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 800053c:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <Lis3dhInit+0x10c>)
 800053e:	6818      	ldr	r0, [r3, #0]
 8000540:	2130      	movs	r1, #48	; 0x30
 8000542:	f107 0208 	add.w	r2, r7, #8
 8000546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2302      	movs	r3, #2
 800054e:	f003 fe39 	bl	80041c4 <HAL_I2C_Master_Receive>
 8000552:	4603      	mov	r3, r0
 8000554:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 8000556:	7dfb      	ldrb	r3, [r7, #23]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d002      	beq.n	8000562 <Lis3dhInit+0x72>
	        	errorHandler();
 800055c:	f000 f8aa 	bl	80006b4 <errorHandler>
}
 8000560:	e048      	b.n	80005f4 <Lis3dhInit+0x104>
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8000562:	23a0      	movs	r3, #160	; 0xa0
 8000564:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <Lis3dhInit+0x10c>)
 8000568:	6818      	ldr	r0, [r3, #0]
 800056a:	2130      	movs	r1, #48	; 0x30
 800056c:	f107 0214 	add.w	r2, r7, #20
 8000570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	f003 fd26 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 800057c:	4603      	mov	r3, r0
 800057e:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <Lis3dhInit+0x10c>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	2130      	movs	r1, #48	; 0x30
 8000586:	f107 0208 	add.w	r2, r7, #8
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2302      	movs	r3, #2
 8000592:	f003 fe17 	bl	80041c4 <HAL_I2C_Master_Receive>
 8000596:	4603      	mov	r3, r0
 8000598:	75fb      	strb	r3, [r7, #23]
				sendBuff[0] = LIS3DH_REG_CTRL1;
 800059a:	2320      	movs	r3, #32
 800059c:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = 0x57;
 800059e:	2357      	movs	r3, #87	; 0x57
 80005a0:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <Lis3dhInit+0x10c>)
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	2130      	movs	r1, #48	; 0x30
 80005a8:	f107 0214 	add.w	r2, r7, #20
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2302      	movs	r3, #2
 80005b4:	f003 fd08 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 80005b8:	4603      	mov	r3, r0
 80005ba:	75fb      	strb	r3, [r7, #23]
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80005bc:	23a0      	movs	r3, #160	; 0xa0
 80005be:	753b      	strb	r3, [r7, #20]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <Lis3dhInit+0x10c>)
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	2130      	movs	r1, #48	; 0x30
 80005c6:	f107 0214 	add.w	r2, r7, #20
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	f003 fcf9 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 80005d6:	4603      	mov	r3, r0
 80005d8:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <Lis3dhInit+0x10c>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	2130      	movs	r1, #48	; 0x30
 80005e0:	f107 0208 	add.w	r2, r7, #8
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2302      	movs	r3, #2
 80005ec:	f003 fdea 	bl	80041c4 <HAL_I2C_Master_Receive>
 80005f0:	4603      	mov	r3, r0
 80005f2:	75fb      	strb	r3, [r7, #23]
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000b0 	.word	0x200000b0

08000600 <Lis3dhGetAcc>:
int Lis3dhGetAcc(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 8000606:	23a7      	movs	r3, #167	; 0xa7
 8000608:	733b      	strb	r3, [r7, #12]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <Lis3dhGetAcc+0xa4>)
 800060c:	6818      	ldr	r0, [r3, #0]
 800060e:	2130      	movs	r1, #48	; 0x30
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2301      	movs	r3, #1
 800061c:	f003 fcd4 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <Lis3dhGetAcc+0xa4>)
 8000626:	6818      	ldr	r0, [r3, #0]
 8000628:	2130      	movs	r1, #48	; 0x30
 800062a:	463a      	mov	r2, r7
 800062c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2302      	movs	r3, #2
 8000634:	f003 fdc6 	bl	80041c4 <HAL_I2C_Master_Receive>
 8000638:	4603      	mov	r3, r0
 800063a:	73fb      	strb	r3, [r7, #15]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 800063c:	23a8      	movs	r3, #168	; 0xa8
 800063e:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <Lis3dhGetAcc+0xa4>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	2130      	movs	r1, #48	; 0x30
 8000646:	f107 020c 	add.w	r2, r7, #12
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2301      	movs	r3, #1
 8000652:	f003 fcb9 	bl	8003fc8 <HAL_I2C_Master_Transmit>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <Lis3dhGetAcc+0xa4>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	2130      	movs	r1, #48	; 0x30
 8000660:	463a      	mov	r2, r7
 8000662:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2306      	movs	r3, #6
 800066a:	f003 fdab 	bl	80041c4 <HAL_I2C_Master_Receive>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]



	LastXAcel = *((int16_t*)reciveBuff);
 8000672:	463b      	mov	r3, r7
 8000674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <Lis3dhGetAcc+0xa8>)
 800067c:	801a      	strh	r2, [r3, #0]
	LastYAcel = *((int16_t*)(reciveBuff + 2));
 800067e:	463b      	mov	r3, r7
 8000680:	3302      	adds	r3, #2
 8000682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <Lis3dhGetAcc+0xac>)
 800068a:	801a      	strh	r2, [r3, #0]
	LastZAcel = *((int16_t*)(reciveBuff + 4));
 800068c:	463b      	mov	r3, r7
 800068e:	3304      	adds	r3, #4
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <Lis3dhGetAcc+0xb0>)
 8000698:	801a      	strh	r2, [r3, #0]


	return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	200000b0 	.word	0x200000b0
 80006a8:	200000b4 	.word	0x200000b4
 80006ac:	200000b6 	.word	0x200000b6
 80006b0:	200000b8 	.word	0x200000b8

080006b4 <errorHandler>:
	*acelY = LastYAcel;
	*acelZ = LastZAcel;

}
void errorHandler()
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	// handle the error
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 80006cc:	4a5d      	ldr	r2, [pc, #372]	; (8000844 <I3G450D_Init+0x180>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2102      	movs	r1, #2
 80006d6:	485c      	ldr	r0, [pc, #368]	; (8000848 <I3G450D_Init+0x184>)
 80006d8:	f001 fef6 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006dc:	2014      	movs	r0, #20
 80006de:	f001 fbdd 	bl	8001e9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2102      	movs	r1, #2
 80006e6:	4858      	ldr	r0, [pc, #352]	; (8000848 <I3G450D_Init+0x184>)
 80006e8:	f001 feee 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80006ec:	2014      	movs	r0, #20
 80006ee:	f001 fbd5 	bl	8001e9c <HAL_Delay>
	spiTxBuf[0]=0x20;
 80006f2:	4b56      	ldr	r3, [pc, #344]	; (800084c <I3G450D_Init+0x188>)
 80006f4:	2220      	movs	r2, #32
 80006f6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 80006f8:	4b54      	ldr	r3, [pc, #336]	; (800084c <I3G450D_Init+0x188>)
 80006fa:	22ff      	movs	r2, #255	; 0xff
 80006fc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80006fe:	4b51      	ldr	r3, [pc, #324]	; (8000844 <I3G450D_Init+0x180>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	2332      	movs	r3, #50	; 0x32
 8000704:	2202      	movs	r2, #2
 8000706:	4951      	ldr	r1, [pc, #324]	; (800084c <I3G450D_Init+0x188>)
 8000708:	f005 f9ad 	bl	8005a66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2102      	movs	r1, #2
 8000710:	484d      	ldr	r0, [pc, #308]	; (8000848 <I3G450D_Init+0x184>)
 8000712:	f001 fed9 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000716:	2014      	movs	r0, #20
 8000718:	f001 fbc0 	bl	8001e9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2102      	movs	r1, #2
 8000720:	4849      	ldr	r0, [pc, #292]	; (8000848 <I3G450D_Init+0x184>)
 8000722:	f001 fed1 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000726:	2014      	movs	r0, #20
 8000728:	f001 fbb8 	bl	8001e9c <HAL_Delay>
	spiTxBuf[0]=0x21;
 800072c:	4b47      	ldr	r3, [pc, #284]	; (800084c <I3G450D_Init+0x188>)
 800072e:	2221      	movs	r2, #33	; 0x21
 8000730:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8000732:	4b46      	ldr	r3, [pc, #280]	; (800084c <I3G450D_Init+0x188>)
 8000734:	2200      	movs	r2, #0
 8000736:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8000738:	4b42      	ldr	r3, [pc, #264]	; (8000844 <I3G450D_Init+0x180>)
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	2332      	movs	r3, #50	; 0x32
 800073e:	2202      	movs	r2, #2
 8000740:	4942      	ldr	r1, [pc, #264]	; (800084c <I3G450D_Init+0x188>)
 8000742:	f005 f990 	bl	8005a66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	483f      	ldr	r0, [pc, #252]	; (8000848 <I3G450D_Init+0x184>)
 800074c:	f001 febc 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000750:	2014      	movs	r0, #20
 8000752:	f001 fba3 	bl	8001e9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2102      	movs	r1, #2
 800075a:	483b      	ldr	r0, [pc, #236]	; (8000848 <I3G450D_Init+0x184>)
 800075c:	f001 feb4 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000760:	2014      	movs	r0, #20
 8000762:	f001 fb9b 	bl	8001e9c <HAL_Delay>
	spiTxBuf[0]=0x22;
 8000766:	4b39      	ldr	r3, [pc, #228]	; (800084c <I3G450D_Init+0x188>)
 8000768:	2222      	movs	r2, #34	; 0x22
 800076a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 800076c:	4b37      	ldr	r3, [pc, #220]	; (800084c <I3G450D_Init+0x188>)
 800076e:	2200      	movs	r2, #0
 8000770:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <I3G450D_Init+0x180>)
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	2332      	movs	r3, #50	; 0x32
 8000778:	2202      	movs	r2, #2
 800077a:	4934      	ldr	r1, [pc, #208]	; (800084c <I3G450D_Init+0x188>)
 800077c:	f005 f973 	bl	8005a66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2102      	movs	r1, #2
 8000784:	4830      	ldr	r0, [pc, #192]	; (8000848 <I3G450D_Init+0x184>)
 8000786:	f001 fe9f 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800078a:	2014      	movs	r0, #20
 800078c:	f001 fb86 	bl	8001e9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2102      	movs	r1, #2
 8000794:	482c      	ldr	r0, [pc, #176]	; (8000848 <I3G450D_Init+0x184>)
 8000796:	f001 fe97 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800079a:	2014      	movs	r0, #20
 800079c:	f001 fb7e 	bl	8001e9c <HAL_Delay>
	spiTxBuf[0]=0x23;
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <I3G450D_Init+0x188>)
 80007a2:	2223      	movs	r2, #35	; 0x23
 80007a4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <I3G450D_Init+0x188>)
 80007a8:	2220      	movs	r2, #32
 80007aa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <I3G450D_Init+0x180>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	2332      	movs	r3, #50	; 0x32
 80007b2:	2202      	movs	r2, #2
 80007b4:	4925      	ldr	r1, [pc, #148]	; (800084c <I3G450D_Init+0x188>)
 80007b6:	f005 f956 	bl	8005a66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <I3G450D_Init+0x184>)
 80007c0:	f001 fe82 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007c4:	2014      	movs	r0, #20
 80007c6:	f001 fb69 	bl	8001e9c <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	481e      	ldr	r0, [pc, #120]	; (8000848 <I3G450D_Init+0x184>)
 80007d0:	f001 fe7a 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007d4:	2014      	movs	r0, #20
 80007d6:	f001 fb61 	bl	8001e9c <HAL_Delay>
	spiTxBuf[0]=0x24;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <I3G450D_Init+0x188>)
 80007dc:	2224      	movs	r2, #36	; 0x24
 80007de:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <I3G450D_Init+0x188>)
 80007e2:	2210      	movs	r2, #16
 80007e4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <I3G450D_Init+0x180>)
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	2332      	movs	r3, #50	; 0x32
 80007ec:	2202      	movs	r2, #2
 80007ee:	4917      	ldr	r1, [pc, #92]	; (800084c <I3G450D_Init+0x188>)
 80007f0:	f005 f939 	bl	8005a66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2102      	movs	r1, #2
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <I3G450D_Init+0x184>)
 80007fa:	f001 fe65 	bl	80024c8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007fe:	2014      	movs	r0, #20
 8000800:	f001 fb4c 	bl	8001e9c <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2102      	movs	r1, #2
 8000808:	480f      	ldr	r0, [pc, #60]	; (8000848 <I3G450D_Init+0x184>)
 800080a:	f001 fe5d 	bl	80024c8 <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <I3G450D_Init+0x188>)
 8000810:	228f      	movs	r2, #143	; 0x8f
 8000812:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <I3G450D_Init+0x180>)
 8000816:	6818      	ldr	r0, [r3, #0]
 8000818:	2332      	movs	r3, #50	; 0x32
 800081a:	2201      	movs	r2, #1
 800081c:	490b      	ldr	r1, [pc, #44]	; (800084c <I3G450D_Init+0x188>)
 800081e:	f005 f922 	bl	8005a66 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <I3G450D_Init+0x180>)
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	2332      	movs	r3, #50	; 0x32
 8000828:	2201      	movs	r2, #1
 800082a:	4909      	ldr	r1, [pc, #36]	; (8000850 <I3G450D_Init+0x18c>)
 800082c:	f005 fa57 	bl	8005cde <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <I3G450D_Init+0x184>)
 8000836:	f001 fe47 	bl	80024c8 <HAL_GPIO_WritePin>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20002ffc 	.word	0x20002ffc
 8000848:	40020800 	.word	0x40020800
 800084c:	20002ff0 	.word	0x20002ff0
 8000850:	20002ff5 	.word	0x20002ff5

08000854 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b098      	sub	sp, #96	; 0x60
 8000858:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 800085a:	2300      	movs	r3, #0
 800085c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8000860:	2300      	movs	r3, #0
 8000862:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 8000866:	2300      	movs	r3, #0
 8000868:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 800086a:	f04f 0300 	mov.w	r3, #0
 800086e:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8000870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 80008ae:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <I3G450D_loop+0x1c8>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <I3G450D_loop+0x6a>
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	f000 80c6 	beq.w	8000a48 <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 80008bc:	e379      	b.n	8000fb2 <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 80008be:	4b58      	ldr	r3, [pc, #352]	; (8000a20 <I3G450D_loop+0x1cc>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	f040 8374 	bne.w	8000fb0 <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2102      	movs	r1, #2
 80008cc:	4855      	ldr	r0, [pc, #340]	; (8000a24 <I3G450D_loop+0x1d0>)
 80008ce:	f001 fdfb 	bl	80024c8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 80008d2:	4b55      	ldr	r3, [pc, #340]	; (8000a28 <I3G450D_loop+0x1d4>)
 80008d4:	22a8      	movs	r2, #168	; 0xa8
 80008d6:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80008d8:	4b54      	ldr	r3, [pc, #336]	; (8000a2c <I3G450D_loop+0x1d8>)
 80008da:	6818      	ldr	r0, [r3, #0]
 80008dc:	2332      	movs	r3, #50	; 0x32
 80008de:	2201      	movs	r2, #1
 80008e0:	4951      	ldr	r1, [pc, #324]	; (8000a28 <I3G450D_loop+0x1d4>)
 80008e2:	f005 f8c0 	bl	8005a66 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 80008e6:	4b51      	ldr	r3, [pc, #324]	; (8000a2c <I3G450D_loop+0x1d8>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	2332      	movs	r3, #50	; 0x32
 80008ec:	2201      	movs	r2, #1
 80008ee:	4950      	ldr	r1, [pc, #320]	; (8000a30 <I3G450D_loop+0x1dc>)
 80008f0:	f005 f9f5 	bl	8005cde <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2102      	movs	r1, #2
 80008f8:	484a      	ldr	r0, [pc, #296]	; (8000a24 <I3G450D_loop+0x1d0>)
 80008fa:	f001 fde5 	bl	80024c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2102      	movs	r1, #2
 8000902:	4848      	ldr	r0, [pc, #288]	; (8000a24 <I3G450D_loop+0x1d0>)
 8000904:	f001 fde0 	bl	80024c8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8000908:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <I3G450D_loop+0x1d4>)
 800090a:	22a9      	movs	r2, #169	; 0xa9
 800090c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800090e:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <I3G450D_loop+0x1d8>)
 8000910:	6818      	ldr	r0, [r3, #0]
 8000912:	2332      	movs	r3, #50	; 0x32
 8000914:	2201      	movs	r2, #1
 8000916:	4944      	ldr	r1, [pc, #272]	; (8000a28 <I3G450D_loop+0x1d4>)
 8000918:	f005 f8a5 	bl	8005a66 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 800091c:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <I3G450D_loop+0x1d8>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	2332      	movs	r3, #50	; 0x32
 8000922:	2201      	movs	r2, #1
 8000924:	4943      	ldr	r1, [pc, #268]	; (8000a34 <I3G450D_loop+0x1e0>)
 8000926:	f005 f9da 	bl	8005cde <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2102      	movs	r1, #2
 800092e:	483d      	ldr	r0, [pc, #244]	; (8000a24 <I3G450D_loop+0x1d0>)
 8000930:	f001 fdca 	bl	80024c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2102      	movs	r1, #2
 8000938:	483a      	ldr	r0, [pc, #232]	; (8000a24 <I3G450D_loop+0x1d0>)
 800093a:	f001 fdc5 	bl	80024c8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 800093e:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <I3G450D_loop+0x1d4>)
 8000940:	22aa      	movs	r2, #170	; 0xaa
 8000942:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <I3G450D_loop+0x1d8>)
 8000946:	6818      	ldr	r0, [r3, #0]
 8000948:	2332      	movs	r3, #50	; 0x32
 800094a:	2201      	movs	r2, #1
 800094c:	4936      	ldr	r1, [pc, #216]	; (8000a28 <I3G450D_loop+0x1d4>)
 800094e:	f005 f88a 	bl	8005a66 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <I3G450D_loop+0x1d8>)
 8000954:	6818      	ldr	r0, [r3, #0]
 8000956:	2332      	movs	r3, #50	; 0x32
 8000958:	2201      	movs	r2, #1
 800095a:	4937      	ldr	r1, [pc, #220]	; (8000a38 <I3G450D_loop+0x1e4>)
 800095c:	f005 f9bf 	bl	8005cde <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2102      	movs	r1, #2
 8000964:	482f      	ldr	r0, [pc, #188]	; (8000a24 <I3G450D_loop+0x1d0>)
 8000966:	f001 fdaf 	bl	80024c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2102      	movs	r1, #2
 800096e:	482d      	ldr	r0, [pc, #180]	; (8000a24 <I3G450D_loop+0x1d0>)
 8000970:	f001 fdaa 	bl	80024c8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <I3G450D_loop+0x1d4>)
 8000976:	22ab      	movs	r2, #171	; 0xab
 8000978:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 800097a:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <I3G450D_loop+0x1d8>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	2332      	movs	r3, #50	; 0x32
 8000980:	2201      	movs	r2, #1
 8000982:	4929      	ldr	r1, [pc, #164]	; (8000a28 <I3G450D_loop+0x1d4>)
 8000984:	f005 f86f 	bl	8005a66 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <I3G450D_loop+0x1d8>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	2332      	movs	r3, #50	; 0x32
 800098e:	2201      	movs	r2, #1
 8000990:	492a      	ldr	r1, [pc, #168]	; (8000a3c <I3G450D_loop+0x1e8>)
 8000992:	f005 f9a4 	bl	8005cde <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	2102      	movs	r1, #2
 800099a:	4822      	ldr	r0, [pc, #136]	; (8000a24 <I3G450D_loop+0x1d0>)
 800099c:	f001 fd94 	bl	80024c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2102      	movs	r1, #2
 80009a4:	481f      	ldr	r0, [pc, #124]	; (8000a24 <I3G450D_loop+0x1d0>)
 80009a6:	f001 fd8f 	bl	80024c8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <I3G450D_loop+0x1d4>)
 80009ac:	22ac      	movs	r2, #172	; 0xac
 80009ae:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <I3G450D_loop+0x1d8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	2332      	movs	r3, #50	; 0x32
 80009b6:	2201      	movs	r2, #1
 80009b8:	491b      	ldr	r1, [pc, #108]	; (8000a28 <I3G450D_loop+0x1d4>)
 80009ba:	f005 f854 	bl	8005a66 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <I3G450D_loop+0x1d8>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	2332      	movs	r3, #50	; 0x32
 80009c4:	2201      	movs	r2, #1
 80009c6:	491e      	ldr	r1, [pc, #120]	; (8000a40 <I3G450D_loop+0x1ec>)
 80009c8:	f005 f989 	bl	8005cde <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2102      	movs	r1, #2
 80009d0:	4814      	ldr	r0, [pc, #80]	; (8000a24 <I3G450D_loop+0x1d0>)
 80009d2:	f001 fd79 	bl	80024c8 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2102      	movs	r1, #2
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <I3G450D_loop+0x1d0>)
 80009dc:	f001 fd74 	bl	80024c8 <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <I3G450D_loop+0x1d4>)
 80009e2:	22ad      	movs	r2, #173	; 0xad
 80009e4:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <I3G450D_loop+0x1d8>)
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	2332      	movs	r3, #50	; 0x32
 80009ec:	2201      	movs	r2, #1
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <I3G450D_loop+0x1d4>)
 80009f0:	f005 f839 	bl	8005a66 <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <I3G450D_loop+0x1d8>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	2332      	movs	r3, #50	; 0x32
 80009fa:	2201      	movs	r2, #1
 80009fc:	4911      	ldr	r1, [pc, #68]	; (8000a44 <I3G450D_loop+0x1f0>)
 80009fe:	f005 f96e 	bl	8005cde <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2102      	movs	r1, #2
 8000a06:	4807      	ldr	r0, [pc, #28]	; (8000a24 <I3G450D_loop+0x1d0>)
 8000a08:	f001 fd5e 	bl	80024c8 <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <I3G450D_loop+0x1c8>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8000a12:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <I3G450D_loop+0x1cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
				break;
 8000a18:	e2ca      	b.n	8000fb0 <I3G450D_loop+0x75c>
 8000a1a:	bf00      	nop
 8000a1c:	200000bb 	.word	0x200000bb
 8000a20:	20000000 	.word	0x20000000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	20002ff0 	.word	0x20002ff0
 8000a2c:	20002ffc 	.word	0x20002ffc
 8000a30:	20002ff5 	.word	0x20002ff5
 8000a34:	20002ff6 	.word	0x20002ff6
 8000a38:	20002ff7 	.word	0x20002ff7
 8000a3c:	20002ff8 	.word	0x20002ff8
 8000a40:	20002ff9 	.word	0x20002ff9
 8000a44:	20002ffa 	.word	0x20002ffa
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8000a48:	4ba0      	ldr	r3, [pc, #640]	; (8000ccc <I3G450D_loop+0x478>)
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b21a      	sxth	r2, r3
 8000a50:	4b9e      	ldr	r3, [pc, #632]	; (8000ccc <I3G450D_loop+0x478>)
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 8000a5e:	4b9b      	ldr	r3, [pc, #620]	; (8000ccc <I3G450D_loop+0x478>)
 8000a60:	791b      	ldrb	r3, [r3, #4]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	4b99      	ldr	r3, [pc, #612]	; (8000ccc <I3G450D_loop+0x478>)
 8000a68:	78db      	ldrb	r3, [r3, #3]
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8000a74:	4b95      	ldr	r3, [pc, #596]	; (8000ccc <I3G450D_loop+0x478>)
 8000a76:	799b      	ldrb	r3, [r3, #6]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	4b93      	ldr	r3, [pc, #588]	; (8000ccc <I3G450D_loop+0x478>)
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	b21b      	sxth	r3, r3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	b21b      	sxth	r3, r3
 8000a86:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8000a88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	4b90      	ldr	r3, [pc, #576]	; (8000cd0 <I3G450D_loop+0x47c>)
 8000a90:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8000a92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	4b8e      	ldr	r3, [pc, #568]	; (8000cd4 <I3G450D_loop+0x480>)
 8000a9a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 8000a9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	4b8d      	ldr	r3, [pc, #564]	; (8000cd8 <I3G450D_loop+0x484>)
 8000aa2:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 8000aa4:	4b8d      	ldr	r3, [pc, #564]	; (8000cdc <I3G450D_loop+0x488>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	f040 80d5 	bne.w	8000c58 <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 8000aae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000ab2:	b21b      	sxth	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b8a      	ldr	r3, [pc, #552]	; (8000ce0 <I3G450D_loop+0x48c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000ce4 <I3G450D_loop+0x490>
 8000ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000acc:	4b86      	ldr	r3, [pc, #536]	; (8000ce8 <I3G450D_loop+0x494>)
 8000ace:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 8000ad2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ad6:	b21b      	sxth	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b84      	ldr	r3, [pc, #528]	; (8000cec <I3G450D_loop+0x498>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	ee07 3a90 	vmov	s15, r3
 8000ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000ce4 <I3G450D_loop+0x490>
 8000aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000af0:	4b7f      	ldr	r3, [pc, #508]	; (8000cf0 <I3G450D_loop+0x49c>)
 8000af2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 8000af6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b7d      	ldr	r3, [pc, #500]	; (8000cf4 <I3G450D_loop+0x4a0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	ee07 3a90 	vmov	s15, r3
 8000b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8000ce4 <I3G450D_loop+0x490>
 8000b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b12:	4b79      	ldr	r3, [pc, #484]	; (8000cf8 <I3G450D_loop+0x4a4>)
 8000b14:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8000b18:	4b78      	ldr	r3, [pc, #480]	; (8000cfc <I3G450D_loop+0x4a8>)
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 8000b1c:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <I3G450D_loop+0x494>)
 8000b1e:	ed93 7a00 	vldr	s14, [r3]
 8000b22:	4b77      	ldr	r3, [pc, #476]	; (8000d00 <I3G450D_loop+0x4ac>)
 8000b24:	edd3 7a00 	vldr	s15, [r3]
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	dc0c      	bgt.n	8000b4c <I3G450D_loop+0x2f8>
 8000b32:	4b73      	ldr	r3, [pc, #460]	; (8000d00 <I3G450D_loop+0x4ac>)
 8000b34:	edd3 7a00 	vldr	s15, [r3]
 8000b38:	eeb1 7a67 	vneg.f32	s14, s15
 8000b3c:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <I3G450D_loop+0x494>)
 8000b3e:	edd3 7a00 	vldr	s15, [r3]
 8000b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4a:	dd1b      	ble.n	8000b84 <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 8000b4c:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <I3G450D_loop+0x494>)
 8000b4e:	ed93 7a00 	vldr	s14, [r3]
 8000b52:	4b6c      	ldr	r3, [pc, #432]	; (8000d04 <I3G450D_loop+0x4b0>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000b68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b6c:	4b66      	ldr	r3, [pc, #408]	; (8000d08 <I3G450D_loop+0x4b4>)
 8000b6e:	edd3 7a00 	vldr	s15, [r3]
 8000b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b76:	4b64      	ldr	r3, [pc, #400]	; (8000d08 <I3G450D_loop+0x4b4>)
 8000b78:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 8000b7c:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <I3G450D_loop+0x494>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a60      	ldr	r2, [pc, #384]	; (8000d04 <I3G450D_loop+0x4b0>)
 8000b82:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8000b84:	4b5a      	ldr	r3, [pc, #360]	; (8000cf0 <I3G450D_loop+0x49c>)
 8000b86:	ed93 7a00 	vldr	s14, [r3]
 8000b8a:	4b60      	ldr	r3, [pc, #384]	; (8000d0c <I3G450D_loop+0x4b8>)
 8000b8c:	edd3 7a00 	vldr	s15, [r3]
 8000b90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b98:	dc0c      	bgt.n	8000bb4 <I3G450D_loop+0x360>
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <I3G450D_loop+0x4b8>)
 8000b9c:	edd3 7a00 	vldr	s15, [r3]
 8000ba0:	eeb1 7a67 	vneg.f32	s14, s15
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <I3G450D_loop+0x49c>)
 8000ba6:	edd3 7a00 	vldr	s15, [r3]
 8000baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb2:	dd1b      	ble.n	8000bec <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 8000bb4:	4b4e      	ldr	r3, [pc, #312]	; (8000cf0 <I3G450D_loop+0x49c>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	4b55      	ldr	r3, [pc, #340]	; (8000d10 <I3G450D_loop+0x4bc>)
 8000bbc:	edd3 7a00 	vldr	s15, [r3]
 8000bc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000bc4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bcc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000bd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <I3G450D_loop+0x4c0>)
 8000bd6:	edd3 7a00 	vldr	s15, [r3]
 8000bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bde:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <I3G450D_loop+0x4c0>)
 8000be0:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 8000be4:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <I3G450D_loop+0x49c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a49      	ldr	r2, [pc, #292]	; (8000d10 <I3G450D_loop+0x4bc>)
 8000bea:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 8000bec:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <I3G450D_loop+0x4a4>)
 8000bee:	ed93 7a00 	vldr	s14, [r3]
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <I3G450D_loop+0x4c4>)
 8000bf4:	edd3 7a00 	vldr	s15, [r3]
 8000bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c00:	dc0d      	bgt.n	8000c1e <I3G450D_loop+0x3ca>
 8000c02:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <I3G450D_loop+0x4c4>)
 8000c04:	edd3 7a00 	vldr	s15, [r3]
 8000c08:	eeb1 7a67 	vneg.f32	s14, s15
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <I3G450D_loop+0x4a4>)
 8000c0e:	edd3 7a00 	vldr	s15, [r3]
 8000c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	f340 81c2 	ble.w	8000fa2 <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <I3G450D_loop+0x4a4>)
 8000c20:	ed93 7a00 	vldr	s14, [r3]
 8000c24:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <I3G450D_loop+0x4c8>)
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c36:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000c3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c3e:	4b38      	ldr	r3, [pc, #224]	; (8000d20 <I3G450D_loop+0x4cc>)
 8000c40:	edd3 7a00 	vldr	s15, [r3]
 8000c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c48:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <I3G450D_loop+0x4cc>)
 8000c4a:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <I3G450D_loop+0x4a4>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a32      	ldr	r2, [pc, #200]	; (8000d1c <I3G450D_loop+0x4c8>)
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e1a4      	b.n	8000fa2 <I3G450D_loop+0x74e>
				switch(currentcalistate)
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <I3G450D_loop+0x488>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	f000 819b 	beq.w	8000f98 <I3G450D_loop+0x744>
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	f300 819a 	bgt.w	8000f9c <I3G450D_loop+0x748>
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <I3G450D_loop+0x41e>
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d029      	beq.n	8000cc4 <I3G450D_loop+0x470>
						break;
 8000c70:	e194      	b.n	8000f9c <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8000c72:	4b2c      	ldr	r3, [pc, #176]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000c7a:	b211      	sxth	r1, r2
 8000c7c:	4a2a      	ldr	r2, [pc, #168]	; (8000d28 <I3G450D_loop+0x4d4>)
 8000c7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8000c82:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000c8a:	b211      	sxth	r1, r2
 8000c8c:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <I3G450D_loop+0x4d8>)
 8000c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000c98:	b211      	sxth	r1, r2
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <I3G450D_loop+0x4dc>)
 8000c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000ca8:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cb2:	f0c0 8175 	bcc.w	8000fa0 <I3G450D_loop+0x74c>
							caliCounter=0;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <I3G450D_loop+0x4d0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <I3G450D_loop+0x488>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
						break;
 8000cc2:	e16d      	b.n	8000fa0 <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cc8:	e0a5      	b.n	8000e16 <I3G450D_loop+0x5c2>
 8000cca:	bf00      	nop
 8000ccc:	20002ff4 	.word	0x20002ff4
 8000cd0:	20000104 	.word	0x20000104
 8000cd4:	20000106 	.word	0x20000106
 8000cd8:	20000108 	.word	0x20000108
 8000cdc:	200000ba 	.word	0x200000ba
 8000ce0:	200000c8 	.word	0x200000c8
 8000ce4:	3d8f5c29 	.word	0x3d8f5c29
 8000ce8:	200000bc 	.word	0x200000bc
 8000cec:	200000cc 	.word	0x200000cc
 8000cf0:	200000c0 	.word	0x200000c0
 8000cf4:	200000d0 	.word	0x200000d0
 8000cf8:	200000c4 	.word	0x200000c4
 8000cfc:	3b449ba6 	.word	0x3b449ba6
 8000d00:	200000d4 	.word	0x200000d4
 8000d04:	200000ec 	.word	0x200000ec
 8000d08:	200000e0 	.word	0x200000e0
 8000d0c:	200000d8 	.word	0x200000d8
 8000d10:	200000f0 	.word	0x200000f0
 8000d14:	200000e4 	.word	0x200000e4
 8000d18:	200000dc 	.word	0x200000dc
 8000d1c:	200000f4 	.word	0x200000f4
 8000d20:	200000e8 	.word	0x200000e8
 8000d24:	2000010c 	.word	0x2000010c
 8000d28:	20000110 	.word	0x20000110
 8000d2c:	200010b0 	.word	0x200010b0
 8000d30:	20002050 	.word	0x20002050
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8000d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	3360      	adds	r3, #96	; 0x60
 8000d3a:	443b      	add	r3, r7
 8000d3c:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8000d40:	461a      	mov	r2, r3
 8000d42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	499d      	ldr	r1, [pc, #628]	; (8000fbc <I3G450D_loop+0x768>)
 8000d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d4a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000d4e:	4413      	add	r3, r2
 8000d50:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8000d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	3360      	adds	r3, #96	; 0x60
 8000d58:	443b      	add	r3, r7
 8000d5a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d62:	1a9b      	subs	r3, r3, r2
 8000d64:	4996      	ldr	r1, [pc, #600]	; (8000fc0 <I3G450D_loop+0x76c>)
 8000d66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d68:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8000d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	3360      	adds	r3, #96	; 0x60
 8000d76:	443b      	add	r3, r7
 8000d78:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	4990      	ldr	r1, [pc, #576]	; (8000fc4 <I3G450D_loop+0x770>)
 8000d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d86:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 8000d8e:	4a8b      	ldr	r2, [pc, #556]	; (8000fbc <I3G450D_loop+0x768>)
 8000d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d92:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	3360      	adds	r3, #96	; 0x60
 8000d9c:	443b      	add	r3, r7
 8000d9e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 8000da2:	4a87      	ldr	r2, [pc, #540]	; (8000fc0 <I3G450D_loop+0x76c>)
 8000da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000da6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	3360      	adds	r3, #96	; 0x60
 8000db0:	443b      	add	r3, r7
 8000db2:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 8000db6:	4a83      	ldr	r2, [pc, #524]	; (8000fc4 <I3G450D_loop+0x770>)
 8000db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dba:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	3360      	adds	r3, #96	; 0x60
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 8000dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dcc:	4a7e      	ldr	r2, [pc, #504]	; (8000fc8 <I3G450D_loop+0x774>)
 8000dce:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd2:	1092      	asrs	r2, r2, #2
 8000dd4:	17db      	asrs	r3, r3, #31
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4a7c      	ldr	r2, [pc, #496]	; (8000fcc <I3G450D_loop+0x778>)
 8000dda:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 8000ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dde:	4a7a      	ldr	r2, [pc, #488]	; (8000fc8 <I3G450D_loop+0x774>)
 8000de0:	fb82 1203 	smull	r1, r2, r2, r3
 8000de4:	1092      	asrs	r2, r2, #2
 8000de6:	17db      	asrs	r3, r3, #31
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	4a79      	ldr	r2, [pc, #484]	; (8000fd0 <I3G450D_loop+0x77c>)
 8000dec:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 8000dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df0:	4a75      	ldr	r2, [pc, #468]	; (8000fc8 <I3G450D_loop+0x774>)
 8000df2:	fb82 1203 	smull	r1, r2, r2, r3
 8000df6:	1092      	asrs	r2, r2, #2
 8000df8:	17db      	asrs	r3, r3, #31
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	4a75      	ldr	r2, [pc, #468]	; (8000fd4 <I3G450D_loop+0x780>)
 8000dfe:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8000e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e02:	3301      	adds	r3, #1
 8000e04:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8000e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e08:	2b09      	cmp	r3, #9
 8000e0a:	d901      	bls.n	8000e10 <I3G450D_loop+0x5bc>
									windowPosition=0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e12:	3301      	adds	r3, #1
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e1c:	d38a      	bcc.n	8000d34 <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e22:	e089      	b.n	8000f38 <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8000e24:	4a65      	ldr	r2, [pc, #404]	; (8000fbc <I3G450D_loop+0x768>)
 8000e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e28:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <I3G450D_loop+0x778>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	1ad2      	subs	r2, r2, r3
 8000e34:	4b68      	ldr	r3, [pc, #416]	; (8000fd8 <I3G450D_loop+0x784>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dd0a      	ble.n	8000e52 <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 8000e3c:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <I3G450D_loop+0x768>)
 8000e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b61      	ldr	r3, [pc, #388]	; (8000fcc <I3G450D_loop+0x778>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <I3G450D_loop+0x784>)
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e015      	b.n	8000e7e <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8000e52:	4a5a      	ldr	r2, [pc, #360]	; (8000fbc <I3G450D_loop+0x768>)
 8000e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b5b      	ldr	r3, [pc, #364]	; (8000fcc <I3G450D_loop+0x778>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad2      	subs	r2, r2, r3
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <I3G450D_loop+0x784>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	425b      	negs	r3, r3
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	da08      	bge.n	8000e7e <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 8000e6c:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <I3G450D_loop+0x778>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4952      	ldr	r1, [pc, #328]	; (8000fbc <I3G450D_loop+0x768>)
 8000e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e74:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <I3G450D_loop+0x784>)
 8000e7c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 8000e7e:	4a50      	ldr	r2, [pc, #320]	; (8000fc0 <I3G450D_loop+0x76c>)
 8000e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e82:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b51      	ldr	r3, [pc, #324]	; (8000fd0 <I3G450D_loop+0x77c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	1ad2      	subs	r2, r2, r3
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <I3G450D_loop+0x788>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dd0a      	ble.n	8000eac <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8000e96:	4a4a      	ldr	r2, [pc, #296]	; (8000fc0 <I3G450D_loop+0x76c>)
 8000e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e9a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b4b      	ldr	r3, [pc, #300]	; (8000fd0 <I3G450D_loop+0x77c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	4a4d      	ldr	r2, [pc, #308]	; (8000fdc <I3G450D_loop+0x788>)
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e015      	b.n	8000ed8 <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 8000eac:	4a44      	ldr	r2, [pc, #272]	; (8000fc0 <I3G450D_loop+0x76c>)
 8000eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000eb0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <I3G450D_loop+0x77c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1ad2      	subs	r2, r2, r3
 8000ebc:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <I3G450D_loop+0x788>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	425b      	negs	r3, r3
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	da08      	bge.n	8000ed8 <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 8000ec6:	4b42      	ldr	r3, [pc, #264]	; (8000fd0 <I3G450D_loop+0x77c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	493d      	ldr	r1, [pc, #244]	; (8000fc0 <I3G450D_loop+0x76c>)
 8000ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ece:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	4a41      	ldr	r2, [pc, #260]	; (8000fdc <I3G450D_loop+0x788>)
 8000ed6:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 8000ed8:	4a3a      	ldr	r2, [pc, #232]	; (8000fc4 <I3G450D_loop+0x770>)
 8000eda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000edc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <I3G450D_loop+0x780>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	1ad2      	subs	r2, r2, r3
 8000ee8:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <I3G450D_loop+0x78c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dd0a      	ble.n	8000f06 <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 8000ef0:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <I3G450D_loop+0x770>)
 8000ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ef4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <I3G450D_loop+0x780>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	4a37      	ldr	r2, [pc, #220]	; (8000fe0 <I3G450D_loop+0x78c>)
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e015      	b.n	8000f32 <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <I3G450D_loop+0x770>)
 8000f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f0a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <I3G450D_loop+0x780>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1ad2      	subs	r2, r2, r3
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <I3G450D_loop+0x78c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	425b      	negs	r3, r3
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	da08      	bge.n	8000f32 <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <I3G450D_loop+0x780>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4927      	ldr	r1, [pc, #156]	; (8000fc4 <I3G450D_loop+0x770>)
 8000f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f28:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	4a2c      	ldr	r2, [pc, #176]	; (8000fe0 <I3G450D_loop+0x78c>)
 8000f30:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8000f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f34:	3301      	adds	r3, #1
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f3a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f3e:	f4ff af71 	bcc.w	8000e24 <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8000f42:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <I3G450D_loop+0x784>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000fe4 <I3G450D_loop+0x790>
 8000f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <I3G450D_loop+0x794>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <I3G450D_loop+0x788>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f68:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000fe4 <I3G450D_loop+0x790>
 8000f6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <I3G450D_loop+0x798>)
 8000f72:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <I3G450D_loop+0x78c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f82:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000fe4 <I3G450D_loop+0x790>
 8000f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <I3G450D_loop+0x79c>)
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <I3G450D_loop+0x7a0>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	701a      	strb	r2, [r3, #0]
							break;
 8000f96:	e004      	b.n	8000fa2 <I3G450D_loop+0x74e>
						break;
 8000f98:	bf00      	nop
 8000f9a:	e002      	b.n	8000fa2 <I3G450D_loop+0x74e>
						break;
 8000f9c:	bf00      	nop
 8000f9e:	e000      	b.n	8000fa2 <I3G450D_loop+0x74e>
						break;
 8000fa0:	bf00      	nop
			currentState=L3GD20_fisrt;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <I3G450D_loop+0x7a4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <I3G450D_loop+0x7a8>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
			break;
 8000fae:	e000      	b.n	8000fb2 <I3G450D_loop+0x75e>
				break;
 8000fb0:	bf00      	nop

		}
}
 8000fb2:	bf00      	nop
 8000fb4:	3760      	adds	r7, #96	; 0x60
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000110 	.word	0x20000110
 8000fc0:	200010b0 	.word	0x200010b0
 8000fc4:	20002050 	.word	0x20002050
 8000fc8:	66666667 	.word	0x66666667
 8000fcc:	200000c8 	.word	0x200000c8
 8000fd0:	200000cc 	.word	0x200000cc
 8000fd4:	200000d0 	.word	0x200000d0
 8000fd8:	200000f8 	.word	0x200000f8
 8000fdc:	200000fc 	.word	0x200000fc
 8000fe0:	20000100 	.word	0x20000100
 8000fe4:	3d8f5c29 	.word	0x3d8f5c29
 8000fe8:	200000d4 	.word	0x200000d4
 8000fec:	200000d8 	.word	0x200000d8
 8000ff0:	200000dc 	.word	0x200000dc
 8000ff4:	200000ba 	.word	0x200000ba
 8000ff8:	200000bb 	.word	0x200000bb
 8000ffc:	20000000 	.word	0x20000000

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f000 fed8 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f826 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 fa22 	bl	8001454 <MX_GPIO_Init>
  MX_CRC_Init();
 8001010:	f000 f88c 	bl	800112c <MX_CRC_Init>
  MX_FMC_Init();
 8001014:	f000 f9ce 	bl	80013b4 <MX_FMC_Init>
  MX_I2C3_Init();
 8001018:	f000 f8dc 	bl	80011d4 <MX_I2C3_Init>
  MX_SPI5_Init();
 800101c:	f000 f91a 	bl	8001254 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001020:	f000 f94e 	bl	80012c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001024:	f000 f99c 	bl	8001360 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001028:	f00a f9ea 	bl	800b400 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800102c:	f007 f874 	bl	8008118 <MX_FATFS_Init>
  MX_I2C1_Init();
 8001030:	f000 f890 	bl	8001154 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I3G450D_Init(&hspi5);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <main+0x50>)
 8001036:	f7ff fb45 	bl	80006c4 <I3G450D_Init>
  Lis3dhInit(&hi2c3);
 800103a:	4806      	ldr	r0, [pc, #24]	; (8001054 <main+0x54>)
 800103c:	f7ff fa58 	bl	80004f0 <Lis3dhInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001040:	f00a fa04 	bl	800b44c <MX_USB_HOST_Process>
    I3G450D_loop();
 8001044:	f7ff fc06 	bl	8000854 <I3G450D_loop>
    Lis3dhGetAcc();
 8001048:	f7ff fada 	bl	8000600 <Lis3dhGetAcc>
    MX_USB_HOST_Process();
 800104c:	e7f8      	b.n	8001040 <main+0x40>
 800104e:	bf00      	nop
 8001050:	200030b0 	.word	0x200030b0
 8001054:	2000305c 	.word	0x2000305c

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0320 	add.w	r3, r7, #32
 8001062:	2230      	movs	r2, #48	; 0x30
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f00a fd50 	bl	800bb0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <SystemClock_Config+0xcc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a27      	ldr	r2, [pc, #156]	; (8001124 <SystemClock_Config+0xcc>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <SystemClock_Config+0xcc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <SystemClock_Config+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a4:	4a20      	ldr	r2, [pc, #128]	; (8001128 <SystemClock_Config+0xd0>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010b8:	2301      	movs	r3, #1
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010cc:	2304      	movs	r3, #4
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010d0:	2348      	movs	r3, #72	; 0x48
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010d8:	2303      	movs	r3, #3
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 ff6b 	bl	8004fbc <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010ec:	f000 fb78 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	2102      	movs	r1, #2
 800110c:	4618      	mov	r0, r3
 800110e:	f004 f9cd 	bl	80054ac <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001118:	f000 fb62 	bl	80017e0 <Error_Handler>
  }
}
 800111c:	bf00      	nop
 800111e:	3750      	adds	r7, #80	; 0x50
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000

0800112c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_CRC_Init+0x20>)
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <MX_CRC_Init+0x24>)
 8001134:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_CRC_Init+0x20>)
 8001138:	f000 ffe5 	bl	8002106 <HAL_CRC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001142:	f000 fb4d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20003000 	.word	0x20003000
 8001150:	40023000 	.word	0x40023000

08001154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_I2C1_Init+0x74>)
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <MX_I2C1_Init+0x78>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <MX_I2C1_Init+0x7c>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <MX_I2C1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_I2C1_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_I2C1_Init+0x74>)
 8001192:	f002 fdd5 	bl	8003d40 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 fb20 	bl	80017e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	4809      	ldr	r0, [pc, #36]	; (80011c8 <MX_I2C1_Init+0x74>)
 80011a4:	f003 fe8f 	bl	8004ec6 <HAL_I2CEx_ConfigAnalogFilter>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011ae:	f000 fb17 	bl	80017e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <MX_I2C1_Init+0x74>)
 80011b6:	f003 fec2 	bl	8004f3e <HAL_I2CEx_ConfigDigitalFilter>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011c0:	f000 fb0e 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20003008 	.word	0x20003008
 80011cc:	40005400 	.word	0x40005400
 80011d0:	000186a0 	.word	0x000186a0

080011d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C3_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_I2C3_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C3_Init+0x74>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <MX_I2C3_Init+0x7c>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C3_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C3_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C3_Init+0x74>)
 80011f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011fe:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <MX_I2C3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C3_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_I2C3_Init+0x74>)
 8001212:	f002 fd95 	bl	8003d40 <HAL_I2C_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800121c:	f000 fae0 	bl	80017e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_I2C3_Init+0x74>)
 8001224:	f003 fe4f 	bl	8004ec6 <HAL_I2CEx_ConfigAnalogFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800122e:	f000 fad7 	bl	80017e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001232:	2100      	movs	r1, #0
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C3_Init+0x74>)
 8001236:	f003 fe82 	bl	8004f3e <HAL_I2CEx_ConfigDigitalFilter>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001240:	f000 face 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000305c 	.word	0x2000305c
 800124c:	40005c00 	.word	0x40005c00
 8001250:	000186a0 	.word	0x000186a0

08001254 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI5_Init+0x64>)
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <MX_SPI5_Init+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI5_Init+0x64>)
 8001260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001264:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI5_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI5_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI5_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI5_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI5_Init+0x64>)
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI5_Init+0x64>)
 8001288:	2218      	movs	r2, #24
 800128a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI5_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI5_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI5_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI5_Init+0x64>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI5_Init+0x64>)
 80012a6:	f004 fb55 	bl	8005954 <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80012b0:	f000 fa96 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200030b0 	.word	0x200030b0
 80012bc:	40015000 	.word	0x40015000

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	463b      	mov	r3, r7
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM1_Init+0x98>)
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <MX_TIM1_Init+0x9c>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_TIM1_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_TIM1_Init+0x98>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM1_Init+0x98>)
 80012f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_TIM1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_TIM1_Init+0x98>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_TIM1_Init+0x98>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <MX_TIM1_Init+0x98>)
 800130a:	f005 f8cb 	bl	80064a4 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 fa64 	bl	80017e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	4619      	mov	r1, r3
 8001324:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_TIM1_Init+0x98>)
 8001326:	f005 f90c 	bl	8006542 <HAL_TIM_ConfigClockSource>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001330:	f000 fa56 	bl	80017e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_TIM1_Init+0x98>)
 8001342:	f005 faff 	bl	8006944 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800134c:	f000 fa48 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20003108 	.word	0x20003108
 800135c:	40010000 	.word	0x40010000

08001360 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART1_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001398:	f005 fb50 	bl	8006a3c <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f000 fa1d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20003150 	.word	0x20003150
 80013b0:	40011000 	.word	0x40011000

080013b4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_FMC_Init+0x98>)
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <MX_FMC_Init+0x9c>)
 80013d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_FMC_Init+0x98>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_FMC_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_FMC_Init+0x98>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_FMC_Init+0x98>)
 80013e6:	2210      	movs	r2, #16
 80013e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_FMC_Init+0x98>)
 80013ec:	2240      	movs	r2, #64	; 0x40
 80013ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_FMC_Init+0x98>)
 80013f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013f6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_FMC_Init+0x98>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_FMC_Init+0x98>)
 8001400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001404:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_FMC_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_FMC_Init+0x98>)
 800140e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001414:	2302      	movs	r3, #2
 8001416:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001418:	2307      	movs	r3, #7
 800141a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800141c:	2304      	movs	r3, #4
 800141e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001420:	2307      	movs	r3, #7
 8001422:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001424:	2303      	movs	r3, #3
 8001426:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_FMC_Init+0x98>)
 8001436:	f004 fa59 	bl	80058ec <HAL_SDRAM_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001440:	f000 f9ce 	bl	80017e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20003194 	.word	0x20003194
 8001450:	a0000140 	.word	0xa0000140

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	4bb1      	ldr	r3, [pc, #708]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4ab0      	ldr	r2, [pc, #704]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4bae      	ldr	r3, [pc, #696]	; (8001734 <MX_GPIO_Init+0x2e0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	4baa      	ldr	r3, [pc, #680]	; (8001734 <MX_GPIO_Init+0x2e0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4aa9      	ldr	r2, [pc, #676]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4ba7      	ldr	r3, [pc, #668]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	61fb      	str	r3, [r7, #28]
 80014a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
 80014a6:	4ba3      	ldr	r3, [pc, #652]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4aa2      	ldr	r2, [pc, #648]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4ba0      	ldr	r3, [pc, #640]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	4b9c      	ldr	r3, [pc, #624]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a9b      	ldr	r2, [pc, #620]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b99      	ldr	r3, [pc, #612]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
 80014de:	4b95      	ldr	r3, [pc, #596]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a94      	ldr	r2, [pc, #592]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014e4:	f043 0302 	orr.w	r3, r3, #2
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b92      	ldr	r3, [pc, #584]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <MX_GPIO_Init+0x2e0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a8d      	ldr	r2, [pc, #564]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b87      	ldr	r3, [pc, #540]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a86      	ldr	r2, [pc, #536]	; (8001734 <MX_GPIO_Init+0x2e0>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b84      	ldr	r3, [pc, #528]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	4b80      	ldr	r3, [pc, #512]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a7f      	ldr	r2, [pc, #508]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <MX_GPIO_Init+0x2e0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2116      	movs	r1, #22
 800154e:	487a      	ldr	r0, [pc, #488]	; (8001738 <MX_GPIO_Init+0x2e4>)
 8001550:	f000 ffba 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	4878      	ldr	r0, [pc, #480]	; (800173c <MX_GPIO_Init+0x2e8>)
 800155a:	f000 ffb5 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001564:	4876      	ldr	r0, [pc, #472]	; (8001740 <MX_GPIO_Init+0x2ec>)
 8001566:	f000 ffaf 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001570:	4874      	ldr	r0, [pc, #464]	; (8001744 <MX_GPIO_Init+0x2f0>)
 8001572:	f000 ffa9 	bl	80024c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2300      	movs	r3, #0
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001588:	230e      	movs	r3, #14
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	486d      	ldr	r0, [pc, #436]	; (8001748 <MX_GPIO_Init+0x2f4>)
 8001594:	f000 fdd4 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001598:	2316      	movs	r3, #22
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ac:	4619      	mov	r1, r3
 80015ae:	4862      	ldr	r0, [pc, #392]	; (8001738 <MX_GPIO_Init+0x2e4>)
 80015b0:	f000 fdc6 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	485c      	ldr	r0, [pc, #368]	; (800173c <MX_GPIO_Init+0x2e8>)
 80015ca:	f000 fdb9 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80015ce:	f248 0306 	movw	r3, #32774	; 0x8006
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4855      	ldr	r0, [pc, #340]	; (800173c <MX_GPIO_Init+0x2e8>)
 80015e6:	f000 fdab 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80015ea:	f641 0358 	movw	r3, #6232	; 0x1858
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015fc:	230e      	movs	r3, #14
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	484d      	ldr	r0, [pc, #308]	; (800173c <MX_GPIO_Init+0x2e8>)
 8001608:	f000 fd9a 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4846      	ldr	r0, [pc, #280]	; (800173c <MX_GPIO_Init+0x2e8>)
 8001624:	f000 fd8c 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001628:	2320      	movs	r3, #32
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800162c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	483e      	ldr	r0, [pc, #248]	; (8001738 <MX_GPIO_Init+0x2e4>)
 800163e:	f000 fd7f 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001642:	2303      	movs	r3, #3
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001652:	2309      	movs	r3, #9
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	483b      	ldr	r0, [pc, #236]	; (800174c <MX_GPIO_Init+0x2f8>)
 800165e:	f000 fd6f 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001662:	2304      	movs	r3, #4
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4835      	ldr	r0, [pc, #212]	; (800174c <MX_GPIO_Init+0x2f8>)
 8001676:	f000 fd63 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 800167a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800168c:	230e      	movs	r3, #14
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	482d      	ldr	r0, [pc, #180]	; (800174c <MX_GPIO_Init+0x2f8>)
 8001698:	f000 fd52 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800169c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	4823      	ldr	r0, [pc, #140]	; (8001740 <MX_GPIO_Init+0x2ec>)
 80016b2:	f000 fd45 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80016b6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <MX_GPIO_Init+0x2ec>)
 80016d0:	f000 fd36 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80016d4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80016e6:	230e      	movs	r3, #14
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <MX_GPIO_Init+0x2f0>)
 80016f2:	f000 fd25 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80016f6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001708:	230e      	movs	r3, #14
 800170a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <MX_GPIO_Init+0x2e4>)
 8001714:	f000 fd14 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001718:	2348      	movs	r3, #72	; 0x48
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001728:	230e      	movs	r3, #14
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	4619      	mov	r1, r3
 8001732:	e00d      	b.n	8001750 <MX_GPIO_Init+0x2fc>
 8001734:	40023800 	.word	0x40023800
 8001738:	40020800 	.word	0x40020800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021800 	.word	0x40021800
 8001748:	40021400 	.word	0x40021400
 800174c:	40020400 	.word	0x40020400
 8001750:	4817      	ldr	r0, [pc, #92]	; (80017b0 <MX_GPIO_Init+0x35c>)
 8001752:	f000 fcf5 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001768:	2309      	movs	r3, #9
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800176c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001770:	4619      	mov	r1, r3
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <MX_GPIO_Init+0x360>)
 8001774:	f000 fce4 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001778:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <MX_GPIO_Init+0x360>)
 8001792:	f000 fcd5 	bl	8002140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	2006      	movs	r0, #6
 800179c:	f000 fc7d 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017a0:	2006      	movs	r0, #6
 80017a2:	f000 fc96 	bl	80020d2 <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3738      	adds	r7, #56	; 0x38
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021800 	.word	0x40021800

080017b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 80017c2:	2301      	movs	r3, #1
 80017c4:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <HAL_GPIO_EXTI_Callback+0x24>)
 80017c8:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	4619      	mov	r1, r3
 80017ce:	68b8      	ldr	r0, [r7, #8]
 80017d0:	f000 fe62 	bl	8002498 <HAL_GPIO_ReadPin>

		//buttonPressed = 1;
	}

}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020000 	.word	0x40020000

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <Error_Handler+0x8>
	...

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a0f      	ldr	r2, [pc, #60]	; (8001838 <HAL_MspInit+0x4c>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x4c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_CRC_MspInit+0x3c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10d      	bne.n	800186a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_CRC_MspInit+0x40>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_CRC_MspInit+0x40>)
 8001858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_CRC_MspInit+0x40>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023000 	.word	0x40023000
 800187c:	40023800 	.word	0x40023800

08001880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08c      	sub	sp, #48	; 0x30
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a42      	ldr	r2, [pc, #264]	; (80019a8 <HAL_I2C_MspInit+0x128>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d12d      	bne.n	80018fe <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c4:	2312      	movs	r3, #18
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018d0:	2304      	movs	r3, #4
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4835      	ldr	r0, [pc, #212]	; (80019b0 <HAL_I2C_MspInit+0x130>)
 80018dc:	f000 fc30 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a30      	ldr	r2, [pc, #192]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 80018ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80018fc:	e050      	b.n	80019a0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <HAL_I2C_MspInit+0x134>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d14b      	bne.n	80019a0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	4b27      	ldr	r3, [pc, #156]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001946:	2312      	movs	r3, #18
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194a:	2301      	movs	r3, #1
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001952:	2304      	movs	r3, #4
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4816      	ldr	r0, [pc, #88]	; (80019b8 <HAL_I2C_MspInit+0x138>)
 800195e:	f000 fbef 	bl	8002140 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001974:	2304      	movs	r3, #4
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	480f      	ldr	r0, [pc, #60]	; (80019bc <HAL_I2C_MspInit+0x13c>)
 8001980:	f000 fbde 	bl	8002140 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 800198e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_I2C_MspInit+0x12c>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
}
 80019a0:	bf00      	nop
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40005c00 	.word	0x40005c00
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_SPI_MspInit+0x84>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12c      	bne.n	8001a3c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_SPI_MspInit+0x88>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_SPI_MspInit+0x88>)
 80019ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_SPI_MspInit+0x88>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_SPI_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_SPI_MspInit+0x88>)
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_SPI_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0320 	and.w	r3, r3, #32
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001a1a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <HAL_SPI_MspInit+0x8c>)
 8001a38:	f000 fb82 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40015000 	.word	0x40015000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021400 	.word	0x40021400

08001a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_Base_MspInit+0x3c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d10d      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <HAL_TIM_Base_MspInit+0x40>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40023800 	.word	0x40023800

08001a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_UART_MspInit+0x84>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d12c      	bne.n	8001b10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_UART_MspInit+0x88>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001aee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b00:	2307      	movs	r3, #7
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_UART_MspInit+0x8c>)
 8001b0c:	f000 fb18 	bl	8002140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	; 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40011000 	.word	0x40011000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40020000 	.word	0x40020000

08001b24 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b38:	4b3b      	ldr	r3, [pc, #236]	; (8001c28 <HAL_FMC_MspInit+0x104>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d16f      	bne.n	8001c20 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <HAL_FMC_MspInit+0x104>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <HAL_FMC_MspInit+0x108>)
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4e:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <HAL_FMC_MspInit+0x108>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6393      	str	r3, [r2, #56]	; 0x38
 8001b56:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <HAL_FMC_MspInit+0x108>)
 8001b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001b62:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b66:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b74:	230c      	movs	r3, #12
 8001b76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	482c      	ldr	r0, [pc, #176]	; (8001c30 <HAL_FMC_MspInit+0x10c>)
 8001b7e:	f000 fadf 	bl	8002140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001b82:	2301      	movs	r3, #1
 8001b84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b92:	230c      	movs	r3, #12
 8001b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4826      	ldr	r0, [pc, #152]	; (8001c34 <HAL_FMC_MspInit+0x110>)
 8001b9c:	f000 fad0 	bl	8002140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001ba0:	f248 1333 	movw	r3, #33075	; 0x8133
 8001ba4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481f      	ldr	r0, [pc, #124]	; (8001c38 <HAL_FMC_MspInit+0x114>)
 8001bbc:	f000 fac0 	bl	8002140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001bc0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001bc4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4818      	ldr	r0, [pc, #96]	; (8001c3c <HAL_FMC_MspInit+0x118>)
 8001bdc:	f000 fab0 	bl	8002140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001be0:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001be4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <HAL_FMC_MspInit+0x11c>)
 8001bfc:	f000 faa0 	bl	8002140 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001c00:	2360      	movs	r3, #96	; 0x60
 8001c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c10:	230c      	movs	r3, #12
 8001c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	480a      	ldr	r0, [pc, #40]	; (8001c44 <HAL_FMC_MspInit+0x120>)
 8001c1a:	f000 fa91 	bl	8002140 <HAL_GPIO_Init>
 8001c1e:	e000      	b.n	8001c22 <HAL_FMC_MspInit+0xfe>
    return;
 8001c20:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200031c8 	.word	0x200031c8
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40021400 	.word	0x40021400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40021800 	.word	0x40021800
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40020c00 	.word	0x40020c00
 8001c44:	40020400 	.word	0x40020400

08001c48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c50:	f7ff ff68 	bl	8001b24 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <NMI_Handler+0x4>

08001c62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler+0x4>

08001c6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c72:	e7fe      	b.n	8001c72 <BusFault_Handler+0x4>

08001c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler+0x4>

08001c7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f8d8 	bl	8001e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f000 fc21 	bl	80024fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <OTG_HS_IRQHandler+0x10>)
 8001cc6:	f000 fe9b 	bl	8002a00 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200035c4 	.word	0x200035c4

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f009 feba 	bl	800ba7c <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20030000 	.word	0x20030000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	200031cc 	.word	0x200031cc
 8001d3c:	200038d8 	.word	0x200038d8

08001d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480d      	ldr	r0, [pc, #52]	; (8001da0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d6a:	490e      	ldr	r1, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d6c:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d80:	4c0b      	ldr	r4, [pc, #44]	; (8001db0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8e:	f7ff ffd7 	bl	8001d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d92:	f009 fe79 	bl	800ba88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d96:	f7ff f933 	bl	8001000 <main>
  bx  lr    
 8001d9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001da8:	0800bd70 	.word	0x0800bd70
  ldr r2, =_sbss
 8001dac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001db0:	200038d8 	.word	0x200038d8

08001db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	; (8001df8 <HAL_Init+0x40>)
 8001dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_Init+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_Init+0x40>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_Init+0x40>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f94f 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	200f      	movs	r0, #15
 8001de8:	f000 f808 	bl	8001dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fcfe 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x54>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_InitTick+0x58>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f967 	bl	80020ee <HAL_SYSTICK_Config>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e00e      	b.n	8001e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b0f      	cmp	r3, #15
 8001e2e:	d80a      	bhi.n	8001e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e38:	f000 f92f 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e3c:	4a06      	ldr	r2, [pc, #24]	; (8001e58 <HAL_InitTick+0x5c>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	e000      	b.n	8001e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000004 	.word	0x20000004
 8001e54:	2000000c 	.word	0x2000000c
 8001e58:	20000008 	.word	0x20000008

08001e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x20>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_IncTick+0x24>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <HAL_IncTick+0x24>)
 8001e6e:	6013      	str	r3, [r2, #0]
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	200031d0 	.word	0x200031d0

08001e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_GetTick+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	200031d0 	.word	0x200031d0

08001e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff ffee 	bl	8001e84 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eb4:	d005      	beq.n	8001ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_Delay+0x44>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec2:	bf00      	nop
 8001ec4:	f7ff ffde 	bl	8001e84 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d8f7      	bhi.n	8001ec4 <HAL_Delay+0x28>
  {
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000000c 	.word	0x2000000c

08001ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f00:	4013      	ands	r3, r2
 8001f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f16:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <__NVIC_SetPriorityGrouping+0x44>)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60d3      	str	r3, [r2, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <__NVIC_GetPriorityGrouping+0x18>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	f003 0307 	and.w	r3, r3, #7
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db0b      	blt.n	8001f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	f003 021f 	and.w	r2, r3, #31
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <__NVIC_EnableIRQ+0x38>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2001      	movs	r0, #1
 8001f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff29 	bl	8001ee4 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff3e 	bl	8001f2c <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff31 	bl	8001f48 <__NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffa2 	bl	8002040 <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e00e      	b.n	8002136 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	795b      	ldrb	r3, [r3, #5]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fb87 	bl	800183c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	; 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	e177      	b.n	800244c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	429a      	cmp	r2, r3
 8002176:	f040 8166 	bne.w	8002446 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b01      	cmp	r3, #1
 8002184:	d005      	beq.n	8002192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800218e:	2b02      	cmp	r3, #2
 8002190:	d130      	bne.n	80021f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	2203      	movs	r2, #3
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 0201 	and.w	r2, r3, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d017      	beq.n	8002230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	2203      	movs	r2, #3
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d123      	bne.n	8002284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	220f      	movs	r2, #15
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	69b9      	ldr	r1, [r7, #24]
 8002280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	2203      	movs	r2, #3
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 80c0 	beq.w	8002446 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b66      	ldr	r3, [pc, #408]	; (8002464 <HAL_GPIO_Init+0x324>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a65      	ldr	r2, [pc, #404]	; (8002464 <HAL_GPIO_Init+0x324>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b63      	ldr	r3, [pc, #396]	; (8002464 <HAL_GPIO_Init+0x324>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022e2:	4a61      	ldr	r2, [pc, #388]	; (8002468 <HAL_GPIO_Init+0x328>)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	3302      	adds	r3, #2
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	220f      	movs	r2, #15
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_GPIO_Init+0x32c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d037      	beq.n	800237e <HAL_GPIO_Init+0x23e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a57      	ldr	r2, [pc, #348]	; (8002470 <HAL_GPIO_Init+0x330>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d031      	beq.n	800237a <HAL_GPIO_Init+0x23a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a56      	ldr	r2, [pc, #344]	; (8002474 <HAL_GPIO_Init+0x334>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02b      	beq.n	8002376 <HAL_GPIO_Init+0x236>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a55      	ldr	r2, [pc, #340]	; (8002478 <HAL_GPIO_Init+0x338>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d025      	beq.n	8002372 <HAL_GPIO_Init+0x232>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a54      	ldr	r2, [pc, #336]	; (800247c <HAL_GPIO_Init+0x33c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01f      	beq.n	800236e <HAL_GPIO_Init+0x22e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a53      	ldr	r2, [pc, #332]	; (8002480 <HAL_GPIO_Init+0x340>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0x22a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_GPIO_Init+0x344>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d013      	beq.n	8002366 <HAL_GPIO_Init+0x226>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_GPIO_Init+0x348>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00d      	beq.n	8002362 <HAL_GPIO_Init+0x222>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a50      	ldr	r2, [pc, #320]	; (800248c <HAL_GPIO_Init+0x34c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <HAL_GPIO_Init+0x21e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4f      	ldr	r2, [pc, #316]	; (8002490 <HAL_GPIO_Init+0x350>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_GPIO_Init+0x21a>
 8002356:	2309      	movs	r3, #9
 8002358:	e012      	b.n	8002380 <HAL_GPIO_Init+0x240>
 800235a:	230a      	movs	r3, #10
 800235c:	e010      	b.n	8002380 <HAL_GPIO_Init+0x240>
 800235e:	2308      	movs	r3, #8
 8002360:	e00e      	b.n	8002380 <HAL_GPIO_Init+0x240>
 8002362:	2307      	movs	r3, #7
 8002364:	e00c      	b.n	8002380 <HAL_GPIO_Init+0x240>
 8002366:	2306      	movs	r3, #6
 8002368:	e00a      	b.n	8002380 <HAL_GPIO_Init+0x240>
 800236a:	2305      	movs	r3, #5
 800236c:	e008      	b.n	8002380 <HAL_GPIO_Init+0x240>
 800236e:	2304      	movs	r3, #4
 8002370:	e006      	b.n	8002380 <HAL_GPIO_Init+0x240>
 8002372:	2303      	movs	r3, #3
 8002374:	e004      	b.n	8002380 <HAL_GPIO_Init+0x240>
 8002376:	2302      	movs	r3, #2
 8002378:	e002      	b.n	8002380 <HAL_GPIO_Init+0x240>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x240>
 800237e:	2300      	movs	r3, #0
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f002 0203 	and.w	r2, r2, #3
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	4093      	lsls	r3, r2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002390:	4935      	ldr	r1, [pc, #212]	; (8002468 <HAL_GPIO_Init+0x328>)
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239e:	4b3d      	ldr	r3, [pc, #244]	; (8002494 <HAL_GPIO_Init+0x354>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023c2:	4a34      	ldr	r2, [pc, #208]	; (8002494 <HAL_GPIO_Init+0x354>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c8:	4b32      	ldr	r3, [pc, #200]	; (8002494 <HAL_GPIO_Init+0x354>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023ec:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_GPIO_Init+0x354>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023f2:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_GPIO_Init+0x354>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002416:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_GPIO_Init+0x354>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_GPIO_Init+0x354>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <HAL_GPIO_Init+0x354>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3301      	adds	r3, #1
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b0f      	cmp	r3, #15
 8002450:	f67f ae84 	bls.w	800215c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3724      	adds	r7, #36	; 0x24
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40023800 	.word	0x40023800
 8002468:	40013800 	.word	0x40013800
 800246c:	40020000 	.word	0x40020000
 8002470:	40020400 	.word	0x40020400
 8002474:	40020800 	.word	0x40020800
 8002478:	40020c00 	.word	0x40020c00
 800247c:	40021000 	.word	0x40021000
 8002480:	40021400 	.word	0x40021400
 8002484:	40021800 	.word	0x40021800
 8002488:	40021c00 	.word	0x40021c00
 800248c:	40022000 	.word	0x40022000
 8002490:	40022400 	.word	0x40022400
 8002494:	40013c00 	.word	0x40013c00

08002498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e001      	b.n	80024ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
 80024d4:	4613      	mov	r3, r2
 80024d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024d8:	787b      	ldrb	r3, [r7, #1]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e4:	e003      	b.n	80024ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	619a      	str	r2, [r3, #24]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002512:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff f94c 	bl	80017b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40013c00 	.word	0x40013c00

0800252c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252e:	b08f      	sub	sp, #60	; 0x3c
 8002530:	af0a      	add	r7, sp, #40	; 0x28
 8002532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e054      	b.n	80025e8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d106      	bne.n	800255e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f008 ffaf 	bl	800b4bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2203      	movs	r2, #3
 8002562:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f004 fe57 	bl	8007230 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	687e      	ldr	r6, [r7, #4]
 800258a:	466d      	mov	r5, sp
 800258c:	f106 0410 	add.w	r4, r6, #16
 8002590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002598:	e894 0003 	ldmia.w	r4, {r0, r1}
 800259c:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a0:	1d33      	adds	r3, r6, #4
 80025a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	f004 fdd1 	bl	800714c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2101      	movs	r1, #1
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 fe4e 	bl	8007252 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	687e      	ldr	r6, [r7, #4]
 80025be:	466d      	mov	r5, sp
 80025c0:	f106 0410 	add.w	r4, r6, #16
 80025c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80025d4:	1d33      	adds	r3, r6, #4
 80025d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d8:	6838      	ldr	r0, [r7, #0]
 80025da:	f004 ffd7 	bl	800758c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025f0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80025f0:	b590      	push	{r4, r7, lr}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	4608      	mov	r0, r1
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	4603      	mov	r3, r0
 8002600:	70fb      	strb	r3, [r7, #3]
 8002602:	460b      	mov	r3, r1
 8002604:	70bb      	strb	r3, [r7, #2]
 8002606:	4613      	mov	r3, r2
 8002608:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_HCD_HC_Init+0x28>
 8002614:	2302      	movs	r3, #2
 8002616:	e076      	b.n	8002706 <HAL_HCD_HC_Init+0x116>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	333d      	adds	r3, #61	; 0x3d
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3338      	adds	r3, #56	; 0x38
 8002640:	787a      	ldrb	r2, [r7, #1]
 8002642:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	3340      	adds	r3, #64	; 0x40
 8002652:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002654:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3339      	adds	r3, #57	; 0x39
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	333f      	adds	r3, #63	; 0x3f
 8002676:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800267a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	78ba      	ldrb	r2, [r7, #2]
 8002680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002684:	b2d0      	uxtb	r0, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	333a      	adds	r3, #58	; 0x3a
 8002692:	4602      	mov	r2, r0
 8002694:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002696:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800269a:	2b00      	cmp	r3, #0
 800269c:	da09      	bge.n	80026b2 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333b      	adds	r3, #59	; 0x3b
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
 80026b0:	e008      	b.n	80026c4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333b      	adds	r3, #59	; 0x3b
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	333c      	adds	r3, #60	; 0x3c
 80026d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026d6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	787c      	ldrb	r4, [r7, #1]
 80026de:	78ba      	ldrb	r2, [r7, #2]
 80026e0:	78f9      	ldrb	r1, [r7, #3]
 80026e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026e4:	9302      	str	r3, [sp, #8]
 80026e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4623      	mov	r3, r4
 80026f4:	f005 f8d0 	bl	8007898 <USB_HC_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bd90      	pop	{r4, r7, pc}

0800270e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_HCD_HC_Halt+0x1e>
 8002728:	2302      	movs	r3, #2
 800272a:	e00f      	b.n	800274c <HAL_HCD_HC_Halt+0x3e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f005 fb20 	bl	8007d82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	4608      	mov	r0, r1
 800275e:	4611      	mov	r1, r2
 8002760:	461a      	mov	r2, r3
 8002762:	4603      	mov	r3, r0
 8002764:	70fb      	strb	r3, [r7, #3]
 8002766:	460b      	mov	r3, r1
 8002768:	70bb      	strb	r3, [r7, #2]
 800276a:	4613      	mov	r3, r2
 800276c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333b      	adds	r3, #59	; 0x3b
 800277c:	78ba      	ldrb	r2, [r7, #2]
 800277e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	212c      	movs	r1, #44	; 0x2c
 8002786:	fb01 f303 	mul.w	r3, r1, r3
 800278a:	4413      	add	r3, r2
 800278c:	333f      	adds	r3, #63	; 0x3f
 800278e:	787a      	ldrb	r2, [r7, #1]
 8002790:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002792:	7c3b      	ldrb	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d112      	bne.n	80027be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	212c      	movs	r1, #44	; 0x2c
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	3342      	adds	r3, #66	; 0x42
 80027a6:	2203      	movs	r2, #3
 80027a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	7f3a      	ldrb	r2, [r7, #28]
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e008      	b.n	80027d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3342      	adds	r3, #66	; 0x42
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f200 80c6 	bhi.w	8002964 <HAL_HCD_HC_SubmitRequest+0x210>
 80027d8:	a201      	add	r2, pc, #4	; (adr r2, 80027e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80027da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027de:	bf00      	nop
 80027e0:	080027f1 	.word	0x080027f1
 80027e4:	08002951 	.word	0x08002951
 80027e8:	08002855 	.word	0x08002855
 80027ec:	080028d3 	.word	0x080028d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80027f0:	7c3b      	ldrb	r3, [r7, #16]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	f040 80b8 	bne.w	8002968 <HAL_HCD_HC_SubmitRequest+0x214>
 80027f8:	78bb      	ldrb	r3, [r7, #2]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80b4 	bne.w	8002968 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3355      	adds	r3, #85	; 0x55
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3355      	adds	r3, #85	; 0x55
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3342      	adds	r3, #66	; 0x42
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800283e:	e093      	b.n	8002968 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3342      	adds	r3, #66	; 0x42
 800284e:	2202      	movs	r2, #2
 8002850:	701a      	strb	r2, [r3, #0]
      break;
 8002852:	e089      	b.n	8002968 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002854:	78bb      	ldrb	r3, [r7, #2]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11d      	bne.n	8002896 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3355      	adds	r3, #85	; 0x55
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800286e:	78fb      	ldrb	r3, [r7, #3]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3342      	adds	r3, #66	; 0x42
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002880:	e073      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	3342      	adds	r3, #66	; 0x42
 8002890:	2202      	movs	r2, #2
 8002892:	701a      	strb	r2, [r3, #0]
      break;
 8002894:	e069      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3354      	adds	r3, #84	; 0x54
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3342      	adds	r3, #66	; 0x42
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
      break;
 80028bc:	e055      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	3342      	adds	r3, #66	; 0x42
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]
      break;
 80028d0:	e04b      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028d2:	78bb      	ldrb	r3, [r7, #2]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d11d      	bne.n	8002914 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3355      	adds	r3, #85	; 0x55
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3342      	adds	r3, #66	; 0x42
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80028fe:	e034      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3342      	adds	r3, #66	; 0x42
 800290e:	2202      	movs	r2, #2
 8002910:	701a      	strb	r2, [r3, #0]
      break;
 8002912:	e02a      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3354      	adds	r3, #84	; 0x54
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3342      	adds	r3, #66	; 0x42
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
      break;
 800293a:	e016      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	212c      	movs	r1, #44	; 0x2c
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	4413      	add	r3, r2
 8002948:	3342      	adds	r3, #66	; 0x42
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
      break;
 800294e:	e00c      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3342      	adds	r3, #66	; 0x42
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
      break;
 8002962:	e002      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002964:	bf00      	nop
 8002966:	e000      	b.n	800296a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002968:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3344      	adds	r3, #68	; 0x44
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	8b3a      	ldrh	r2, [r7, #24]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	202c      	movs	r0, #44	; 0x2c
 8002984:	fb00 f303 	mul.w	r3, r0, r3
 8002988:	440b      	add	r3, r1
 800298a:	334c      	adds	r3, #76	; 0x4c
 800298c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3360      	adds	r3, #96	; 0x60
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3350      	adds	r3, #80	; 0x50
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	3339      	adds	r3, #57	; 0x39
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	222c      	movs	r2, #44	; 0x2c
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	3338      	adds	r3, #56	; 0x38
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	18d1      	adds	r1, r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	f005 f874 	bl	8007adc <USB_HC_StartXfer>
 80029f4:	4603      	mov	r3, r0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop

08002a00 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f004 fd75 	bl	8007506 <USB_GetMode>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	f040 80f6 	bne.w	8002c10 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fd59 	bl	80074e0 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80ec 	beq.w	8002c0e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fd50 	bl	80074e0 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4a:	d104      	bne.n	8002a56 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 fd40 	bl	80074e0 <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a6a:	d104      	bne.n	8002a76 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f004 fd30 	bl	80074e0 <USB_ReadInterrupts>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a8a:	d104      	bne.n	8002a96 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 fd20 	bl	80074e0 <USB_ReadInterrupts>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d103      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fd12 	bl	80074e0 <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac6:	d11c      	bne.n	8002b02 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ad0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10f      	bne.n	8002b02 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	6938      	ldr	r0, [r7, #16]
 8002ae6:	f004 fc01 	bl	80072ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002aea:	6938      	ldr	r0, [r7, #16]
 8002aec:	f004 fc32 	bl	8007354 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f004 fe08 	bl	800770c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f008 fd57 	bl	800b5b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fcea 	bl	80074e0 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b16:	d102      	bne.n	8002b1e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f001 f89e 	bl	8003c5a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 fcdc 	bl	80074e0 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d106      	bne.n	8002b40 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f008 fd20 	bl	800b578 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 fccb 	bl	80074e0 <USB_ReadInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d101      	bne.n	8002b58 <HAL_HCD_IRQHandler+0x158>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_HCD_IRQHandler+0x15a>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0210 	bic.w	r2, r2, #16
 8002b6c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 ffa1 	bl	8003ab6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0210 	orr.w	r2, r2, #16
 8002b82:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fca9 	bl	80074e0 <USB_ReadInterrupts>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b98:	d13a      	bne.n	8002c10 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f005 f8de 	bl	8007d60 <USB_HC_ReadInterrupt>
 8002ba4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e025      	b.n	8002bf8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d018      	beq.n	8002bf2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bd6:	d106      	bne.n	8002be6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8ab 	bl	8002d3a <HCD_HC_IN_IRQHandler>
 8002be4:	e005      	b.n	8002bf2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fbf9 	bl	80033e4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d3d4      	bcc.n	8002bac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c0a:	615a      	str	r2, [r3, #20]
 8002c0c:	e000      	b.n	8002c10 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c0e:	bf00      	nop
    }
  }
}
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_HCD_Start+0x16>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e013      	b.n	8002c54 <HAL_HCD_Start+0x3e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 fdca 	bl	80077d4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 fae2 	bl	800720e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_HCD_Stop+0x16>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e00d      	b.n	8002c8e <HAL_HCD_Stop+0x32>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f005 f9b8 	bl	8007ff4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fd6c 	bl	8007780 <USB_ResetPort>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3360      	adds	r3, #96	; 0x60
 8002ccc:	781b      	ldrb	r3, [r3, #0]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002ce6:	78fb      	ldrb	r3, [r7, #3]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3350      	adds	r3, #80	; 0x50
 8002cf4:	681b      	ldr	r3, [r3, #0]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 fdb0 	bl	8007874 <USB_GetCurrentFrame>
 8002d14:	4603      	mov	r3, r0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 fd8b 	bl	8007846 <USB_GetHostSpeed>
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d11a      	bne.n	8002da0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2304      	movs	r3, #4
 8002d7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	2206      	movs	r2, #6
 8002d8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fff2 	bl	8007d82 <USB_HC_Halt>
 8002d9e:	e0af      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	d11b      	bne.n	8002df0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3361      	adds	r3, #97	; 0x61
 8002dda:	2207      	movs	r2, #7
 8002ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f004 ffca 	bl	8007d82 <USB_HC_Halt>
 8002dee:	e087      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b20      	cmp	r3, #32
 8002e04:	d109      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	2320      	movs	r3, #32
 8002e16:	6093      	str	r3, [r2, #8]
 8002e18:	e072      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d11a      	bne.n	8002e66 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2308      	movs	r3, #8
 8002e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3361      	adds	r3, #97	; 0x61
 8002e50:	2205      	movs	r2, #5
 8002e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 ff8f 	bl	8007d82 <USB_HC_Halt>
 8002e64:	e04c      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7c:	d11b      	bne.n	8002eb6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3361      	adds	r3, #97	; 0x61
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 ff67 	bl	8007d82 <USB_HC_Halt>
 8002eb4:	e024      	b.n	8002f00 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	015a      	lsls	r2, r3, #5
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d119      	bne.n	8002f00 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3361      	adds	r3, #97	; 0x61
 8002eec:	2206      	movs	r2, #6
 8002eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f004 ff41 	bl	8007d82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f16:	d112      	bne.n	8002f3e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f004 ff2d 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	461a      	mov	r2, r3
 8002f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f3c:	e24e      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 80df 	bne.w	8003114 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d019      	beq.n	8002f92 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3348      	adds	r3, #72	; 0x48
 8002f6c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	440b      	add	r3, r1
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f80:	1ad2      	subs	r2, r2, r3
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	202c      	movs	r0, #44	; 0x2c
 8002f88:	fb00 f303 	mul.w	r3, r0, r3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3350      	adds	r3, #80	; 0x50
 8002f90:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3361      	adds	r3, #97	; 0x61
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	335c      	adds	r3, #92	; 0x5c
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	333f      	adds	r3, #63	; 0x3f
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d009      	beq.n	8002ff0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	333f      	adds	r3, #63	; 0x3f
 8002fea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d111      	bne.n	8003014 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 fec1 	bl	8007d82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	2310      	movs	r3, #16
 8003010:	6093      	str	r3, [r2, #8]
 8003012:	e03a      	b.n	800308a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	333f      	adds	r3, #63	; 0x3f
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d009      	beq.n	800303c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	333f      	adds	r3, #63	; 0x3f
 8003036:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003038:	2b01      	cmp	r3, #1
 800303a:	d126      	bne.n	800308a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	0151      	lsls	r1, r2, #5
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	440a      	add	r2, r1
 8003052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800305a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3360      	adds	r3, #96	; 0x60
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	b2d9      	uxtb	r1, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	4413      	add	r3, r2
 800307e:	3360      	adds	r3, #96	; 0x60
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f008 faa1 	bl	800b5cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d12b      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3348      	adds	r3, #72	; 0x48
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	202c      	movs	r0, #44	; 0x2c
 80030a8:	fb00 f202 	mul.w	r2, r0, r2
 80030ac:	440a      	add	r2, r1
 80030ae:	3240      	adds	r2, #64	; 0x40
 80030b0:	8812      	ldrh	r2, [r2, #0]
 80030b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 818e 	beq.w	80033dc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3354      	adds	r3, #84	; 0x54
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f083 0301 	eor.w	r3, r3, #1
 80030d4:	b2d8      	uxtb	r0, r3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3354      	adds	r3, #84	; 0x54
 80030e4:	4602      	mov	r2, r0
 80030e6:	701a      	strb	r2, [r3, #0]
}
 80030e8:	e178      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	3354      	adds	r3, #84	; 0x54
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2d8      	uxtb	r0, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3354      	adds	r3, #84	; 0x54
 800310e:	4602      	mov	r2, r0
 8003110:	701a      	strb	r2, [r3, #0]
}
 8003112:	e163      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	f040 80f6 	bne.w	8003318 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3361      	adds	r3, #97	; 0x61
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d109      	bne.n	8003154 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	212c      	movs	r1, #44	; 0x2c
 8003146:	fb01 f303 	mul.w	r3, r1, r3
 800314a:	4413      	add	r3, r2
 800314c:	3360      	adds	r3, #96	; 0x60
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e0c9      	b.n	80032e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	212c      	movs	r1, #44	; 0x2c
 800315a:	fb01 f303 	mul.w	r3, r1, r3
 800315e:	4413      	add	r3, r2
 8003160:	3361      	adds	r3, #97	; 0x61
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b05      	cmp	r3, #5
 8003166:	d109      	bne.n	800317c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3360      	adds	r3, #96	; 0x60
 8003176:	2205      	movs	r2, #5
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e0b5      	b.n	80032e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	212c      	movs	r1, #44	; 0x2c
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3361      	adds	r3, #97	; 0x61
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	2b06      	cmp	r3, #6
 800318e:	d009      	beq.n	80031a4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	212c      	movs	r1, #44	; 0x2c
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	3361      	adds	r3, #97	; 0x61
 800319e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d150      	bne.n	8003246 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	335c      	adds	r3, #92	; 0x5c
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	202c      	movs	r0, #44	; 0x2c
 80031bc:	fb00 f303 	mul.w	r3, r0, r3
 80031c0:	440b      	add	r3, r1
 80031c2:	335c      	adds	r3, #92	; 0x5c
 80031c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	335c      	adds	r3, #92	; 0x5c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d912      	bls.n	8003200 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	212c      	movs	r1, #44	; 0x2c
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3360      	adds	r3, #96	; 0x60
 80031fa:	2204      	movs	r2, #4
 80031fc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031fe:	e073      	b.n	80032e8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	3360      	adds	r3, #96	; 0x60
 800320e:	2202      	movs	r2, #2
 8003210:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003228:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003230:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	461a      	mov	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003244:	e050      	b.n	80032e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	3361      	adds	r3, #97	; 0x61
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d122      	bne.n	80032a0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3360      	adds	r3, #96	; 0x60
 8003268:	2202      	movs	r2, #2
 800326a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003282:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800328a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	461a      	mov	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e023      	b.n	80032e8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3361      	adds	r3, #97	; 0x61
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b07      	cmp	r3, #7
 80032b2:	d119      	bne.n	80032e8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	335c      	adds	r3, #92	; 0x5c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	202c      	movs	r0, #44	; 0x2c
 80032cc:	fb00 f303 	mul.w	r3, r0, r3
 80032d0:	440b      	add	r3, r1
 80032d2:	335c      	adds	r3, #92	; 0x5c
 80032d4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3360      	adds	r3, #96	; 0x60
 80032e4:	2204      	movs	r2, #4
 80032e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	2302      	movs	r3, #2
 80032f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	b2d9      	uxtb	r1, r3
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	202c      	movs	r0, #44	; 0x2c
 8003304:	fb00 f303 	mul.w	r3, r0, r3
 8003308:	4413      	add	r3, r2
 800330a:	3360      	adds	r3, #96	; 0x60
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f008 f95b 	bl	800b5cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003316:	e061      	b.n	80033dc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b10      	cmp	r3, #16
 800332c:	d156      	bne.n	80033dc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	333f      	adds	r3, #63	; 0x3f
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d111      	bne.n	8003366 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f004 fd0f 	bl	8007d82 <USB_HC_Halt>
 8003364:	e031      	b.n	80033ca <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	333f      	adds	r3, #63	; 0x3f
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	333f      	adds	r3, #63	; 0x3f
 8003388:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800338a:	2b02      	cmp	r3, #2
 800338c:	d11d      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	335c      	adds	r3, #92	; 0x5c
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d110      	bne.n	80033ca <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	212c      	movs	r1, #44	; 0x2c
 80033ae:	fb01 f303 	mul.w	r3, r1, r3
 80033b2:	4413      	add	r3, r2
 80033b4:	3361      	adds	r3, #97	; 0x61
 80033b6:	2203      	movs	r2, #3
 80033b8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f004 fcdc 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d6:	461a      	mov	r2, r3
 80033d8:	2310      	movs	r3, #16
 80033da:	6093      	str	r3, [r2, #8]
}
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d11a      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	2304      	movs	r3, #4
 8003424:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	212c      	movs	r1, #44	; 0x2c
 800342c:	fb01 f303 	mul.w	r3, r1, r3
 8003430:	4413      	add	r3, r2
 8003432:	3361      	adds	r3, #97	; 0x61
 8003434:	2206      	movs	r2, #6
 8003436:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fc9d 	bl	8007d82 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003448:	e331      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	4413      	add	r3, r2
 8003452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b20      	cmp	r3, #32
 800345e:	d12e      	bne.n	80034be <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	2320      	movs	r3, #32
 8003470:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	333d      	adds	r3, #61	; 0x3d
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 8313 	bne.w	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	333d      	adds	r3, #61	; 0x3d
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3360      	adds	r3, #96	; 0x60
 80034a8:	2202      	movs	r2, #2
 80034aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f004 fc63 	bl	8007d82 <USB_HC_Halt>
}
 80034bc:	e2f7      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d4:	d112      	bne.n	80034fc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f004 fc44 	bl	8007d82 <USB_HC_Halt>
}
 80034fa:	e2d8      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b01      	cmp	r3, #1
 8003510:	d140      	bne.n	8003594 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	335c      	adds	r3, #92	; 0x5c
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d111      	bne.n	800355e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	333d      	adds	r3, #61	; 0x3d
 8003548:	2201      	movs	r2, #1
 800354a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	461a      	mov	r2, r3
 800355a:	2340      	movs	r3, #64	; 0x40
 800355c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	2301      	movs	r3, #1
 800356e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3361      	adds	r3, #97	; 0x61
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f004 fbf8 	bl	8007d82 <USB_HC_Halt>
}
 8003592:	e28c      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4413      	add	r3, r2
 800359c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b40      	cmp	r3, #64	; 0x40
 80035a8:	d12c      	bne.n	8003604 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3361      	adds	r3, #97	; 0x61
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	212c      	movs	r1, #44	; 0x2c
 80035c2:	fb01 f303 	mul.w	r3, r1, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	333d      	adds	r3, #61	; 0x3d
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f004 fbc9 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	2340      	movs	r3, #64	; 0x40
 8003600:	6093      	str	r3, [r2, #8]
}
 8003602:	e254      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11a      	bne.n	8003650 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	461a      	mov	r2, r3
 8003628:	2308      	movs	r3, #8
 800362a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3361      	adds	r3, #97	; 0x61
 800363a:	2205      	movs	r2, #5
 800363c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fb9a 	bl	8007d82 <USB_HC_Halt>
}
 800364e:	e22e      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b10      	cmp	r3, #16
 8003664:	d140      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	335c      	adds	r3, #92	; 0x5c
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3361      	adds	r3, #97	; 0x61
 8003686:	2203      	movs	r2, #3
 8003688:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	4413      	add	r3, r2
 8003696:	333d      	adds	r3, #61	; 0x3d
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d112      	bne.n	80036c4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	212c      	movs	r1, #44	; 0x2c
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	333c      	adds	r3, #60	; 0x3c
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	333d      	adds	r3, #61	; 0x3d
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fb57 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2310      	movs	r3, #16
 80036e4:	6093      	str	r3, [r2, #8]
}
 80036e6:	e1e2      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b80      	cmp	r3, #128	; 0x80
 80036fc:	d164      	bne.n	80037c8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d111      	bne.n	800372a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3361      	adds	r3, #97	; 0x61
 8003714:	2206      	movs	r2, #6
 8003716:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f004 fb2d 	bl	8007d82 <USB_HC_Halt>
 8003728:	e044      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	335c      	adds	r3, #92	; 0x5c
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	202c      	movs	r0, #44	; 0x2c
 8003742:	fb00 f303 	mul.w	r3, r0, r3
 8003746:	440b      	add	r3, r1
 8003748:	335c      	adds	r3, #92	; 0x5c
 800374a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	335c      	adds	r3, #92	; 0x5c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d920      	bls.n	80037a2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	335c      	adds	r3, #92	; 0x5c
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	3360      	adds	r3, #96	; 0x60
 8003780:	2204      	movs	r2, #4
 8003782:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	b2d9      	uxtb	r1, r3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	202c      	movs	r0, #44	; 0x2c
 800378e:	fb00 f303 	mul.w	r3, r0, r3
 8003792:	4413      	add	r3, r2
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f007 ff16 	bl	800b5cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80037a0:	e008      	b.n	80037b4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	3360      	adds	r3, #96	; 0x60
 80037b0:	2202      	movs	r2, #2
 80037b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	6093      	str	r3, [r2, #8]
}
 80037c6:	e172      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037de:	d11b      	bne.n	8003818 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3361      	adds	r3, #97	; 0x61
 80037ee:	2208      	movs	r2, #8
 80037f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f004 fac0 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	015a      	lsls	r2, r3, #5
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	4413      	add	r3, r2
 800380a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380e:	461a      	mov	r2, r3
 8003810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003814:	6093      	str	r3, [r2, #8]
}
 8003816:	e14a      	b.n	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	f040 813f 	bne.w	8003aae <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3361      	adds	r3, #97	; 0x61
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d17d      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	3360      	adds	r3, #96	; 0x60
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	333f      	adds	r3, #63	; 0x3f
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d00a      	beq.n	8003880 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	212c      	movs	r1, #44	; 0x2c
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	4413      	add	r3, r2
 8003876:	333f      	adds	r3, #63	; 0x3f
 8003878:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800387a:	2b03      	cmp	r3, #3
 800387c:	f040 8100 	bne.w	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d113      	bne.n	80038b0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3355      	adds	r3, #85	; 0x55
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	f083 0301 	eor.w	r3, r3, #1
 800389c:	b2d8      	uxtb	r0, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3355      	adds	r3, #85	; 0x55
 80038ac:	4602      	mov	r2, r0
 80038ae:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 80e3 	bne.w	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	334c      	adds	r3, #76	; 0x4c
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80d8 	beq.w	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	334c      	adds	r3, #76	; 0x4c
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	202c      	movs	r0, #44	; 0x2c
 80038e6:	fb00 f202 	mul.w	r2, r0, r2
 80038ea:	440a      	add	r2, r1
 80038ec:	3240      	adds	r2, #64	; 0x40
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	202c      	movs	r0, #44	; 0x2c
 80038fa:	fb00 f202 	mul.w	r2, r0, r2
 80038fe:	440a      	add	r2, r1
 8003900:	3240      	adds	r2, #64	; 0x40
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	fbb3 f3f2 	udiv	r3, r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80b5 	beq.w	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	212c      	movs	r1, #44	; 0x2c
 800391c:	fb01 f303 	mul.w	r3, r1, r3
 8003920:	4413      	add	r3, r2
 8003922:	3355      	adds	r3, #85	; 0x55
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2d8      	uxtb	r0, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3355      	adds	r3, #85	; 0x55
 800393a:	4602      	mov	r2, r0
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e09f      	b.n	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3361      	adds	r3, #97	; 0x61
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d109      	bne.n	8003968 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3360      	adds	r3, #96	; 0x60
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
 8003966:	e08b      	b.n	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3361      	adds	r3, #97	; 0x61
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d109      	bne.n	8003990 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	212c      	movs	r1, #44	; 0x2c
 8003982:	fb01 f303 	mul.w	r3, r1, r3
 8003986:	4413      	add	r3, r2
 8003988:	3360      	adds	r3, #96	; 0x60
 800398a:	2202      	movs	r2, #2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e077      	b.n	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	212c      	movs	r1, #44	; 0x2c
 8003996:	fb01 f303 	mul.w	r3, r1, r3
 800399a:	4413      	add	r3, r2
 800399c:	3361      	adds	r3, #97	; 0x61
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d109      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	212c      	movs	r1, #44	; 0x2c
 80039aa:	fb01 f303 	mul.w	r3, r1, r3
 80039ae:	4413      	add	r3, r2
 80039b0:	3360      	adds	r3, #96	; 0x60
 80039b2:	2205      	movs	r2, #5
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e063      	b.n	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	212c      	movs	r1, #44	; 0x2c
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	4413      	add	r3, r2
 80039c4:	3361      	adds	r3, #97	; 0x61
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b06      	cmp	r3, #6
 80039ca:	d009      	beq.n	80039e0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3361      	adds	r3, #97	; 0x61
 80039da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d14f      	bne.n	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	335c      	adds	r3, #92	; 0x5c
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	202c      	movs	r0, #44	; 0x2c
 80039f8:	fb00 f303 	mul.w	r3, r0, r3
 80039fc:	440b      	add	r3, r1
 80039fe:	335c      	adds	r3, #92	; 0x5c
 8003a00:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	335c      	adds	r3, #92	; 0x5c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d912      	bls.n	8003a3c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	212c      	movs	r1, #44	; 0x2c
 8003a1c:	fb01 f303 	mul.w	r3, r1, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	335c      	adds	r3, #92	; 0x5c
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	212c      	movs	r1, #44	; 0x2c
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	4413      	add	r3, r2
 8003a34:	3360      	adds	r3, #96	; 0x60
 8003a36:	2204      	movs	r2, #4
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	e021      	b.n	8003a80 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	212c      	movs	r1, #44	; 0x2c
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	3360      	adds	r3, #96	; 0x60
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a64:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a6c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	2302      	movs	r3, #2
 8003a90:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	b2d9      	uxtb	r1, r3
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	202c      	movs	r0, #44	; 0x2c
 8003a9c:	fb00 f303 	mul.w	r3, r0, r3
 8003aa0:	4413      	add	r3, r2
 8003aa2:	3360      	adds	r3, #96	; 0x60
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f007 fd8f 	bl	800b5cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003aae:	bf00      	nop
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b08a      	sub	sp, #40	; 0x28
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	0c5b      	lsrs	r3, r3, #17
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d004      	beq.n	8003afc <HCD_RXQLVL_IRQHandler+0x46>
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	f000 80a9 	beq.w	8003c4c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003afa:	e0aa      	b.n	8003c52 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 80a6 	beq.w	8003c50 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	212c      	movs	r1, #44	; 0x2c
 8003b0a:	fb01 f303 	mul.w	r3, r1, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	3344      	adds	r3, #68	; 0x44
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 809b 	beq.w	8003c50 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	212c      	movs	r1, #44	; 0x2c
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	4413      	add	r3, r2
 8003b26:	3350      	adds	r3, #80	; 0x50
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	441a      	add	r2, r3
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	202c      	movs	r0, #44	; 0x2c
 8003b34:	fb00 f303 	mul.w	r3, r0, r3
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	; 0x4c
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d87a      	bhi.n	8003c38 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3344      	adds	r3, #68	; 0x44
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	b292      	uxth	r2, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	f003 fc68 	bl	8007430 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3344      	adds	r3, #68	; 0x44
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	441a      	add	r2, r3
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	202c      	movs	r0, #44	; 0x2c
 8003b7a:	fb00 f303 	mul.w	r3, r0, r3
 8003b7e:	440b      	add	r3, r1
 8003b80:	3344      	adds	r3, #68	; 0x44
 8003b82:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	3350      	adds	r3, #80	; 0x50
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	441a      	add	r2, r3
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	202c      	movs	r0, #44	; 0x2c
 8003b9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3350      	adds	r3, #80	; 0x50
 8003ba6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	0cdb      	lsrs	r3, r3, #19
 8003bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	212c      	movs	r1, #44	; 0x2c
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	4413      	add	r3, r2
 8003bca:	3340      	adds	r3, #64	; 0x40
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d13c      	bne.n	8003c50 <HCD_RXQLVL_IRQHandler+0x19a>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d039      	beq.n	8003c50 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bf2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bfa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3354      	adds	r3, #84	; 0x54
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	f083 0301 	eor.w	r3, r3, #1
 8003c22:	b2d8      	uxtb	r0, r3
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	212c      	movs	r1, #44	; 0x2c
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	4413      	add	r3, r2
 8003c30:	3354      	adds	r3, #84	; 0x54
 8003c32:	4602      	mov	r2, r0
 8003c34:	701a      	strb	r2, [r3, #0]
      break;
 8003c36:	e00b      	b.n	8003c50 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3360      	adds	r3, #96	; 0x60
 8003c46:	2204      	movs	r2, #4
 8003c48:	701a      	strb	r2, [r3, #0]
      break;
 8003c4a:	e001      	b.n	8003c50 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c50:	bf00      	nop
  }
}
 8003c52:	bf00      	nop
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b086      	sub	sp, #24
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c86:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d10b      	bne.n	8003caa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d102      	bne.n	8003ca2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f007 fc79 	bl	800b594 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f043 0302 	orr.w	r3, r3, #2
 8003ca8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d132      	bne.n	8003d1a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f043 0308 	orr.w	r3, r3, #8
 8003cba:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d126      	bne.n	8003d14 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d113      	bne.n	8003cf6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cd8:	d106      	bne.n	8003ce8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2102      	movs	r1, #2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fd13 	bl	800770c <USB_InitFSLSPClkSel>
 8003ce6:	e011      	b.n	8003d0c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 fd0c 	bl	800770c <USB_InitFSLSPClkSel>
 8003cf4:	e00a      	b.n	8003d0c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d106      	bne.n	8003d0c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d04:	461a      	mov	r2, r3
 8003d06:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d0a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f007 fc6b 	bl	800b5e8 <HAL_HCD_PortEnabled_Callback>
 8003d12:	e002      	b.n	8003d1a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f007 fc75 	bl	800b604 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d103      	bne.n	8003d2c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f043 0320 	orr.w	r3, r3, #32
 8003d2a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d32:	461a      	mov	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e12b      	b.n	8003faa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd fd8a 	bl	8001880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2224      	movs	r2, #36	; 0x24
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003da2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003da4:	f001 fd7a 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8003da8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4a81      	ldr	r2, [pc, #516]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d807      	bhi.n	8003dc4 <HAL_I2C_Init+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a80      	ldr	r2, [pc, #512]	; (8003fb8 <HAL_I2C_Init+0x278>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e006      	b.n	8003dd2 <HAL_I2C_Init+0x92>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <HAL_I2C_Init+0x27c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bf94      	ite	ls
 8003dcc:	2301      	movls	r3, #1
 8003dce:	2300      	movhi	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0e7      	b.n	8003faa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a78      	ldr	r2, [pc, #480]	; (8003fc0 <HAL_I2C_Init+0x280>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0c9b      	lsrs	r3, r3, #18
 8003de4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d802      	bhi.n	8003e14 <HAL_I2C_Init+0xd4>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	3301      	adds	r3, #1
 8003e12:	e009      	b.n	8003e28 <HAL_I2C_Init+0xe8>
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e1a:	fb02 f303 	mul.w	r3, r2, r3
 8003e1e:	4a69      	ldr	r2, [pc, #420]	; (8003fc4 <HAL_I2C_Init+0x284>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	3301      	adds	r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	495c      	ldr	r1, [pc, #368]	; (8003fb4 <HAL_I2C_Init+0x274>)
 8003e44:	428b      	cmp	r3, r1
 8003e46:	d819      	bhi.n	8003e7c <HAL_I2C_Init+0x13c>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e59      	subs	r1, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_I2C_Init+0x138>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e59      	subs	r1, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e76:	e051      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	e04f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <HAL_I2C_Init+0x168>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e58      	subs	r0, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e012      	b.n	8003ece <HAL_I2C_Init+0x18e>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1e58      	subs	r0, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	0099      	lsls	r1, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x196>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e022      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10e      	bne.n	8003efc <HAL_I2C_Init+0x1bc>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1e58      	subs	r0, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	440b      	add	r3, r1
 8003eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	e00f      	b.n	8003f1c <HAL_I2C_Init+0x1dc>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1e58      	subs	r0, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	0099      	lsls	r1, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f12:	3301      	adds	r3, #1
 8003f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	6809      	ldr	r1, [r1, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	6911      	ldr	r1, [r2, #16]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68d2      	ldr	r2, [r2, #12]
 8003f56:	4311      	orrs	r1, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	000186a0 	.word	0x000186a0
 8003fb8:	001e847f 	.word	0x001e847f
 8003fbc:	003d08ff 	.word	0x003d08ff
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	817b      	strh	r3, [r7, #10]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fdc:	f7fd ff52 	bl	8001e84 <HAL_GetTick>
 8003fe0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	f040 80e0 	bne.w	80041b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2319      	movs	r3, #25
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4970      	ldr	r1, [pc, #448]	; (80041bc <HAL_I2C_Master_Transmit+0x1f4>)
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 fd86 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	e0d3      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_I2C_Master_Transmit+0x50>
 8004014:	2302      	movs	r3, #2
 8004016:	e0cc      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d007      	beq.n	800403e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 0201 	orr.w	r2, r2, #1
 800403c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800404c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2221      	movs	r2, #33	; 0x21
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2210      	movs	r2, #16
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	893a      	ldrh	r2, [r7, #8]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4a50      	ldr	r2, [pc, #320]	; (80041c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004080:	8979      	ldrh	r1, [r7, #10]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a3a      	ldr	r2, [r7, #32]
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fbf0 	bl	800486c <I2C_MasterRequestWrite>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e08d      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040ac:	e066      	b.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	6a39      	ldr	r1, [r7, #32]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fe00 	bl	8004cb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00d      	beq.n	80040da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d107      	bne.n	80040d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06b      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b04      	cmp	r3, #4
 8004116:	d11b      	bne.n	8004150 <HAL_I2C_Master_Transmit+0x188>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	d017      	beq.n	8004150 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fdf0 	bl	8004d3a <I2C_WaitOnBTFFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	2b04      	cmp	r3, #4
 8004166:	d107      	bne.n	8004178 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004176:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e01a      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d194      	bne.n	80040ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	00100002 	.word	0x00100002
 80041c0:	ffff0000 	.word	0xffff0000

080041c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	; 0x30
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	460b      	mov	r3, r1
 80041d2:	817b      	strh	r3, [r7, #10]
 80041d4:	4613      	mov	r3, r2
 80041d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7fd fe54 	bl	8001e84 <HAL_GetTick>
 80041dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	f040 820b 	bne.w	8004602 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2319      	movs	r3, #25
 80041f2:	2201      	movs	r2, #1
 80041f4:	497c      	ldr	r1, [pc, #496]	; (80043e8 <HAL_I2C_Master_Receive+0x224>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fc88 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	e1fe      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_I2C_Master_Receive+0x50>
 8004210:	2302      	movs	r3, #2
 8004212:	e1f7      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b01      	cmp	r3, #1
 8004228:	d007      	beq.n	800423a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 0201 	orr.w	r2, r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004248:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2222      	movs	r2, #34	; 0x22
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2210      	movs	r2, #16
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a5c      	ldr	r2, [pc, #368]	; (80043ec <HAL_I2C_Master_Receive+0x228>)
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800427c:	8979      	ldrh	r1, [r7, #10]
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb74 	bl	8004970 <I2C_MasterRequestRead>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1b8      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	d113      	bne.n	80042c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800429a:	2300      	movs	r3, #0
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	623b      	str	r3, [r7, #32]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	623b      	str	r3, [r7, #32]
 80042ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	e18c      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d11b      	bne.n	8004302 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	61fb      	str	r3, [r7, #28]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e16c      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11b      	bne.n	8004342 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004318:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	e14c      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004368:	e138      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436e:	2b03      	cmp	r3, #3
 8004370:	f200 80f1 	bhi.w	8004556 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004378:	2b01      	cmp	r3, #1
 800437a:	d123      	bne.n	80043c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fd1b 	bl	8004dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e139      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043c2:	e10b      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d14e      	bne.n	800446a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d2:	2200      	movs	r2, #0
 80043d4:	4906      	ldr	r1, [pc, #24]	; (80043f0 <HAL_I2C_Master_Receive+0x22c>)
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fb98 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e10e      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002
 80043ec:	ffff0000 	.word	0xffff0000
 80043f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004468:	e0b8      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	4966      	ldr	r1, [pc, #408]	; (800460c <HAL_I2C_Master_Receive+0x448>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 fb49 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0bf      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	494f      	ldr	r1, [pc, #316]	; (800460c <HAL_I2C_Master_Receive+0x448>)
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fb1b 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e091      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004554:	e042      	b.n	80045dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 fc2e 	bl	8004dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e04c      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d118      	bne.n	80045dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f47f aec2 	bne.w	800436a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3728      	adds	r7, #40	; 0x28
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	00010004 	.word	0x00010004

08004610 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af02      	add	r7, sp, #8
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	460b      	mov	r3, r1
 800461e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7fd fc30 	bl	8001e84 <HAL_GetTick>
 8004624:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	f040 8111 	bne.w	800485a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2319      	movs	r3, #25
 800463e:	2201      	movs	r2, #1
 8004640:	4988      	ldr	r1, [pc, #544]	; (8004864 <HAL_I2C_IsDeviceReady+0x254>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fa62 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
 8004650:	e104      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_I2C_IsDeviceReady+0x50>
 800465c:	2302      	movs	r3, #2
 800465e:	e0fd      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b01      	cmp	r3, #1
 8004674:	d007      	beq.n	8004686 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004694:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2224      	movs	r2, #36	; 0x24
 800469a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a70      	ldr	r2, [pc, #448]	; (8004868 <HAL_I2C_IsDeviceReady+0x258>)
 80046a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 fa20 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00d      	beq.n	80046ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e0:	d103      	bne.n	80046ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e0b6      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046ee:	897b      	ldrh	r3, [r7, #10]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80046fe:	f7fd fbc1 	bl	8001e84 <HAL_GetTick>
 8004702:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004732:	e025      	b.n	8004780 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004734:	f7fd fba6 	bl	8001e84 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <HAL_I2C_IsDeviceReady+0x13a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	22a0      	movs	r2, #160	; 0xa0
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2ba0      	cmp	r3, #160	; 0xa0
 800478a:	d005      	beq.n	8004798 <HAL_I2C_IsDeviceReady+0x188>
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <HAL_I2C_IsDeviceReady+0x188>
 8004792:	7dbb      	ldrb	r3, [r7, #22]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0cd      	beq.n	8004734 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d129      	bne.n	8004802 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	4921      	ldr	r1, [pc, #132]	; (8004864 <HAL_I2C_IsDeviceReady+0x254>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f994 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e036      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	e02c      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004810:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800481a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2319      	movs	r3, #25
 8004822:	2201      	movs	r2, #1
 8004824:	490f      	ldr	r1, [pc, #60]	; (8004864 <HAL_I2C_IsDeviceReady+0x254>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f970 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e012      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3301      	adds	r3, #1
 800483a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	f4ff af32 	bcc.w	80046aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e000      	b.n	800485c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	00100002 	.word	0x00100002
 8004868:	ffff0000 	.word	0xffff0000

0800486c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	460b      	mov	r3, r1
 800487a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d006      	beq.n	8004896 <I2C_MasterRequestWrite+0x2a>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d003      	beq.n	8004896 <I2C_MasterRequestWrite+0x2a>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004894:	d108      	bne.n	80048a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e00b      	b.n	80048c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ac:	2b12      	cmp	r3, #18
 80048ae:	d107      	bne.n	80048c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f91d 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d103      	bne.n	80048f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e035      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048fc:	d108      	bne.n	8004910 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800490c:	611a      	str	r2, [r3, #16]
 800490e:	e01b      	b.n	8004948 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004910:	897b      	ldrh	r3, [r7, #10]
 8004912:	11db      	asrs	r3, r3, #7
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f063 030f 	orn	r3, r3, #15
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	490e      	ldr	r1, [pc, #56]	; (8004968 <I2C_MasterRequestWrite+0xfc>)
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f943 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e010      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800493e:	897b      	ldrh	r3, [r7, #10]
 8004940:	b2da      	uxtb	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4907      	ldr	r1, [pc, #28]	; (800496c <I2C_MasterRequestWrite+0x100>)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f933 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	00010008 	.word	0x00010008
 800496c:	00010002 	.word	0x00010002

08004970 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	607a      	str	r2, [r7, #4]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	460b      	mov	r3, r1
 800497e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004994:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d006      	beq.n	80049aa <I2C_MasterRequestRead+0x3a>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d003      	beq.n	80049aa <I2C_MasterRequestRead+0x3a>
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049a8:	d108      	bne.n	80049bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e00b      	b.n	80049d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c0:	2b11      	cmp	r3, #17
 80049c2:	d107      	bne.n	80049d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f893 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fa:	d103      	bne.n	8004a04 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e079      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a10:	d108      	bne.n	8004a24 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]
 8004a22:	e05f      	b.n	8004ae4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a24:	897b      	ldrh	r3, [r7, #10]
 8004a26:	11db      	asrs	r3, r3, #7
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 0306 	and.w	r3, r3, #6
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f063 030f 	orn	r3, r3, #15
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	4930      	ldr	r1, [pc, #192]	; (8004b04 <I2C_MasterRequestRead+0x194>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f8b9 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e054      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a52:	897b      	ldrh	r3, [r7, #10]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4929      	ldr	r1, [pc, #164]	; (8004b08 <I2C_MasterRequestRead+0x198>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 f8a9 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e044      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f831 	bl	8004b0c <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00d      	beq.n	8004acc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abe:	d103      	bne.n	8004ac8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e017      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004acc:	897b      	ldrh	r3, [r7, #10]
 8004ace:	11db      	asrs	r3, r3, #7
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f063 030e 	orn	r3, r3, #14
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4907      	ldr	r1, [pc, #28]	; (8004b08 <I2C_MasterRequestRead+0x198>)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f865 	bl	8004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	00010008 	.word	0x00010008
 8004b08:	00010002 	.word	0x00010002

08004b0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b1c:	e025      	b.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b24:	d021      	beq.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b26:	f7fd f9ad 	bl	8001e84 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d302      	bcc.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d116      	bne.n	8004b6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f043 0220 	orr.w	r2, r3, #32
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e023      	b.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10d      	bne.n	8004b90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bf0c      	ite	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	2300      	movne	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	e00c      	b.n	8004baa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bf0c      	ite	eq
 8004ba2:	2301      	moveq	r3, #1
 8004ba4:	2300      	movne	r3, #0
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	79fb      	ldrb	r3, [r7, #7]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d0b6      	beq.n	8004b1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b084      	sub	sp, #16
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bc8:	e051      	b.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bd8:	d123      	bne.n	8004c22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004be8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0204 	orr.w	r2, r3, #4
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e046      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c28:	d021      	beq.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2a:	f7fd f92b 	bl	8001e84 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d116      	bne.n	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f043 0220 	orr.w	r2, r3, #32
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e020      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d10c      	bne.n	8004c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	4013      	ands	r3, r2
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	e00b      	b.n	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d18d      	bne.n	8004bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc4:	e02d      	b.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f8ce 	bl	8004e68 <I2C_IsAcknowledgeFailed>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e02d      	b.n	8004d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cdc:	d021      	beq.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fd f8d1 	bl	8001e84 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d116      	bne.n	8004d22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e007      	b.n	8004d32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	2b80      	cmp	r3, #128	; 0x80
 8004d2e:	d1ca      	bne.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d46:	e02d      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f88d 	bl	8004e68 <I2C_IsAcknowledgeFailed>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e02d      	b.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d5e:	d021      	beq.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d60:	f7fd f890 	bl	8001e84 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d302      	bcc.n	8004d76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e007      	b.n	8004db4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d1ca      	bne.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc8:	e042      	b.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d119      	bne.n	8004e0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0210 	mvn.w	r2, #16
 8004de0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e029      	b.n	8004e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fd f83a 	bl	8001e84 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d116      	bne.n	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	f043 0220 	orr.w	r2, r3, #32
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e007      	b.n	8004e60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d1b5      	bne.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7e:	d11b      	bne.n	8004eb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	f043 0204 	orr.w	r2, r3, #4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d129      	bne.n	8004f30 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2224      	movs	r2, #36	; 0x24
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0210 	bic.w	r2, r2, #16
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d12a      	bne.n	8004fae <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	; 0x24
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f78:	89fb      	ldrh	r3, [r7, #14]
 8004f7a:	f023 030f 	bic.w	r3, r3, #15
 8004f7e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	89fa      	ldrh	r2, [r7, #14]
 8004f90:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e267      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d075      	beq.n	80050c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fda:	4b88      	ldr	r3, [pc, #544]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d00c      	beq.n	8005000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe6:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d112      	bne.n	8005018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff2:	4b82      	ldr	r3, [pc, #520]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffe:	d10b      	bne.n	8005018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	4b7e      	ldr	r3, [pc, #504]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d05b      	beq.n	80050c4 <HAL_RCC_OscConfig+0x108>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d157      	bne.n	80050c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e242      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d106      	bne.n	8005030 <HAL_RCC_OscConfig+0x74>
 8005022:	4b76      	ldr	r3, [pc, #472]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a75      	ldr	r2, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	e01d      	b.n	800506c <HAL_RCC_OscConfig+0xb0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x98>
 800503a:	4b70      	ldr	r3, [pc, #448]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6f      	ldr	r2, [pc, #444]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	4b6d      	ldr	r3, [pc, #436]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a6c      	ldr	r2, [pc, #432]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e00b      	b.n	800506c <HAL_RCC_OscConfig+0xb0>
 8005054:	4b69      	ldr	r3, [pc, #420]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a68      	ldr	r2, [pc, #416]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	4b66      	ldr	r3, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a65      	ldr	r2, [pc, #404]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d013      	beq.n	800509c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005074:	f7fc ff06 	bl	8001e84 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800507c:	f7fc ff02 	bl	8001e84 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b64      	cmp	r3, #100	; 0x64
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e207      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800508e:	4b5b      	ldr	r3, [pc, #364]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0xc0>
 800509a:	e014      	b.n	80050c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fc fef2 	bl	8001e84 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fc feee 	bl	8001e84 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e1f3      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050b6:	4b51      	ldr	r3, [pc, #324]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <HAL_RCC_OscConfig+0xe8>
 80050c2:	e000      	b.n	80050c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d063      	beq.n	800519a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d2:	4b4a      	ldr	r3, [pc, #296]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d11c      	bne.n	8005124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ea:	4b44      	ldr	r3, [pc, #272]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d116      	bne.n	8005124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f6:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_RCC_OscConfig+0x152>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d001      	beq.n	800510e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e1c7      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4937      	ldr	r1, [pc, #220]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 800511e:	4313      	orrs	r3, r2
 8005120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	e03a      	b.n	800519a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d020      	beq.n	800516e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800512c:	4b34      	ldr	r3, [pc, #208]	; (8005200 <HAL_RCC_OscConfig+0x244>)
 800512e:	2201      	movs	r2, #1
 8005130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	f7fc fea7 	bl	8001e84 <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513a:	f7fc fea3 	bl	8001e84 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e1a8      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005158:	4b28      	ldr	r3, [pc, #160]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4925      	ldr	r1, [pc, #148]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005168:	4313      	orrs	r3, r2
 800516a:	600b      	str	r3, [r1, #0]
 800516c:	e015      	b.n	800519a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_RCC_OscConfig+0x244>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fc fe86 	bl	8001e84 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517c:	f7fc fe82 	bl	8001e84 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e187      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800518e:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d036      	beq.n	8005214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <HAL_RCC_OscConfig+0x248>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fc fe66 	bl	8001e84 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051bc:	f7fc fe62 	bl	8001e84 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e167      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_OscConfig+0x240>)
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f0      	beq.n	80051bc <HAL_RCC_OscConfig+0x200>
 80051da:	e01b      	b.n	8005214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <HAL_RCC_OscConfig+0x248>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e2:	f7fc fe4f 	bl	8001e84 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e8:	e00e      	b.n	8005208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ea:	f7fc fe4b 	bl	8001e84 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d907      	bls.n	8005208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e150      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
 80051fc:	40023800 	.word	0x40023800
 8005200:	42470000 	.word	0x42470000
 8005204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005208:	4b88      	ldr	r3, [pc, #544]	; (800542c <HAL_RCC_OscConfig+0x470>)
 800520a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ea      	bne.n	80051ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8097 	beq.w	8005350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005222:	2300      	movs	r3, #0
 8005224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005226:	4b81      	ldr	r3, [pc, #516]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]
 8005236:	4b7d      	ldr	r3, [pc, #500]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a7c      	ldr	r2, [pc, #496]	; (800542c <HAL_RCC_OscConfig+0x470>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
 8005242:	4b7a      	ldr	r3, [pc, #488]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800524e:	2301      	movs	r3, #1
 8005250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005252:	4b77      	ldr	r3, [pc, #476]	; (8005430 <HAL_RCC_OscConfig+0x474>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d118      	bne.n	8005290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800525e:	4b74      	ldr	r3, [pc, #464]	; (8005430 <HAL_RCC_OscConfig+0x474>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a73      	ldr	r2, [pc, #460]	; (8005430 <HAL_RCC_OscConfig+0x474>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526a:	f7fc fe0b 	bl	8001e84 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fc fe07 	bl	8001e84 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e10c      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005284:	4b6a      	ldr	r3, [pc, #424]	; (8005430 <HAL_RCC_OscConfig+0x474>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d106      	bne.n	80052a6 <HAL_RCC_OscConfig+0x2ea>
 8005298:	4b64      	ldr	r3, [pc, #400]	; (800542c <HAL_RCC_OscConfig+0x470>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a63      	ldr	r2, [pc, #396]	; (800542c <HAL_RCC_OscConfig+0x470>)
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
 80052a4:	e01c      	b.n	80052e0 <HAL_RCC_OscConfig+0x324>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0x30c>
 80052ae:	4b5f      	ldr	r3, [pc, #380]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	4a5e      	ldr	r2, [pc, #376]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052b4:	f043 0304 	orr.w	r3, r3, #4
 80052b8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ba:	4b5c      	ldr	r3, [pc, #368]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	4a5b      	ldr	r2, [pc, #364]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6713      	str	r3, [r2, #112]	; 0x70
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0x324>
 80052c8:	4b58      	ldr	r3, [pc, #352]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	4a57      	ldr	r2, [pc, #348]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052ce:	f023 0301 	bic.w	r3, r3, #1
 80052d2:	6713      	str	r3, [r2, #112]	; 0x70
 80052d4:	4b55      	ldr	r3, [pc, #340]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d8:	4a54      	ldr	r2, [pc, #336]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80052da:	f023 0304 	bic.w	r3, r3, #4
 80052de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fc fdcc 	bl	8001e84 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f0:	f7fc fdc8 	bl	8001e84 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052fe:	4293      	cmp	r3, r2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e0cb      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005306:	4b49      	ldr	r3, [pc, #292]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ee      	beq.n	80052f0 <HAL_RCC_OscConfig+0x334>
 8005312:	e014      	b.n	800533e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005314:	f7fc fdb6 	bl	8001e84 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531a:	e00a      	b.n	8005332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800531c:	f7fc fdb2 	bl	8001e84 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	; 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0b5      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005332:	4b3e      	ldr	r3, [pc, #248]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ee      	bne.n	800531c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800533e:	7dfb      	ldrb	r3, [r7, #23]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	4a38      	ldr	r2, [pc, #224]	; (800542c <HAL_RCC_OscConfig+0x470>)
 800534a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80a1 	beq.w	800549c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800535a:	4b34      	ldr	r3, [pc, #208]	; (800542c <HAL_RCC_OscConfig+0x470>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
 8005362:	2b08      	cmp	r3, #8
 8005364:	d05c      	beq.n	8005420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d141      	bne.n	80053f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	4b31      	ldr	r3, [pc, #196]	; (8005434 <HAL_RCC_OscConfig+0x478>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005374:	f7fc fd86 	bl	8001e84 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537a:	e008      	b.n	800538e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537c:	f7fc fd82 	bl	8001e84 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e087      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538e:	4b27      	ldr	r3, [pc, #156]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f0      	bne.n	800537c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69da      	ldr	r2, [r3, #28]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	085b      	lsrs	r3, r3, #1
 80053b2:	3b01      	subs	r3, #1
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	491b      	ldr	r1, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <HAL_RCC_OscConfig+0x478>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fc fd5b 	bl	8001e84 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fc fd57 	bl	8001e84 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e05c      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <HAL_RCC_OscConfig+0x470>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x416>
 80053f0:	e054      	b.n	800549c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f2:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_OscConfig+0x478>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fc fd44 	bl	8001e84 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005400:	f7fc fd40 	bl	8001e84 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e045      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCC_OscConfig+0x470>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x444>
 800541e:	e03d      	b.n	800549c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d107      	bne.n	8005438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e038      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
 800542c:	40023800 	.word	0x40023800
 8005430:	40007000 	.word	0x40007000
 8005434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005438:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <HAL_RCC_OscConfig+0x4ec>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d028      	beq.n	8005498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d121      	bne.n	8005498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d11a      	bne.n	8005498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005468:	4013      	ands	r3, r2
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800546e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005470:	4293      	cmp	r3, r2
 8005472:	d111      	bne.n	8005498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	085b      	lsrs	r3, r3, #1
 8005480:	3b01      	subs	r3, #1
 8005482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d107      	bne.n	8005498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40023800 	.word	0x40023800

080054ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0cc      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c0:	4b68      	ldr	r3, [pc, #416]	; (8005664 <HAL_RCC_ClockConfig+0x1b8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d90c      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ce:	4b65      	ldr	r3, [pc, #404]	; (8005664 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d6:	4b63      	ldr	r3, [pc, #396]	; (8005664 <HAL_RCC_ClockConfig+0x1b8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d001      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0b8      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d020      	beq.n	8005536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005500:	4b59      	ldr	r3, [pc, #356]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a58      	ldr	r2, [pc, #352]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800550a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005518:	4b53      	ldr	r3, [pc, #332]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4a52      	ldr	r2, [pc, #328]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005524:	4b50      	ldr	r3, [pc, #320]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	494d      	ldr	r1, [pc, #308]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005532:	4313      	orrs	r3, r2
 8005534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d044      	beq.n	80055cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d107      	bne.n	800555a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	4b47      	ldr	r3, [pc, #284]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d119      	bne.n	800558a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e07f      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d003      	beq.n	800556a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005566:	2b03      	cmp	r3, #3
 8005568:	d107      	bne.n	800557a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556a:	4b3f      	ldr	r3, [pc, #252]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e06f      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557a:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e067      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558a:	4b37      	ldr	r3, [pc, #220]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 0203 	bic.w	r2, r3, #3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4934      	ldr	r1, [pc, #208]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800559c:	f7fc fc72 	bl	8001e84 <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	e00a      	b.n	80055ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a4:	f7fc fc6e 	bl	8001e84 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e04f      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ba:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 020c 	and.w	r2, r3, #12
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d1eb      	bne.n	80055a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055cc:	4b25      	ldr	r3, [pc, #148]	; (8005664 <HAL_RCC_ClockConfig+0x1b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d20c      	bcs.n	80055f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055da:	4b22      	ldr	r3, [pc, #136]	; (8005664 <HAL_RCC_ClockConfig+0x1b8>)
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_RCC_ClockConfig+0x1b8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e032      	b.n	800565a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005600:	4b19      	ldr	r3, [pc, #100]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4916      	ldr	r1, [pc, #88]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	4313      	orrs	r3, r2
 8005610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0308 	and.w	r3, r3, #8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	490e      	ldr	r1, [pc, #56]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005632:	f000 f821 	bl	8005678 <HAL_RCC_GetSysClockFreq>
 8005636:	4602      	mov	r2, r0
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	490a      	ldr	r1, [pc, #40]	; (800566c <HAL_RCC_ClockConfig+0x1c0>)
 8005644:	5ccb      	ldrb	r3, [r1, r3]
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	4a09      	ldr	r2, [pc, #36]	; (8005670 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <HAL_RCC_ClockConfig+0x1c8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fc fbd2 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40023c00 	.word	0x40023c00
 8005668:	40023800 	.word	0x40023800
 800566c:	0800bd34 	.word	0x0800bd34
 8005670:	20000004 	.word	0x20000004
 8005674:	20000008 	.word	0x20000008

08005678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800567c:	b094      	sub	sp, #80	; 0x50
 800567e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	647b      	str	r3, [r7, #68]	; 0x44
 8005684:	2300      	movs	r3, #0
 8005686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005688:	2300      	movs	r3, #0
 800568a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005690:	4b79      	ldr	r3, [pc, #484]	; (8005878 <HAL_RCC_GetSysClockFreq+0x200>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b08      	cmp	r3, #8
 800569a:	d00d      	beq.n	80056b8 <HAL_RCC_GetSysClockFreq+0x40>
 800569c:	2b08      	cmp	r3, #8
 800569e:	f200 80e1 	bhi.w	8005864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x34>
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d003      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80056aa:	e0db      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056ac:	4b73      	ldr	r3, [pc, #460]	; (800587c <HAL_RCC_GetSysClockFreq+0x204>)
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056b0:	e0db      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056b2:	4b73      	ldr	r3, [pc, #460]	; (8005880 <HAL_RCC_GetSysClockFreq+0x208>)
 80056b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056b6:	e0d8      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056b8:	4b6f      	ldr	r3, [pc, #444]	; (8005878 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056c2:	4b6d      	ldr	r3, [pc, #436]	; (8005878 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d063      	beq.n	8005796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ce:	4b6a      	ldr	r3, [pc, #424]	; (8005878 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	099b      	lsrs	r3, r3, #6
 80056d4:	2200      	movs	r2, #0
 80056d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e0:	633b      	str	r3, [r7, #48]	; 0x30
 80056e2:	2300      	movs	r3, #0
 80056e4:	637b      	str	r3, [r7, #52]	; 0x34
 80056e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	f04f 0000 	mov.w	r0, #0
 80056f2:	f04f 0100 	mov.w	r1, #0
 80056f6:	0159      	lsls	r1, r3, #5
 80056f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056fc:	0150      	lsls	r0, r2, #5
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4621      	mov	r1, r4
 8005704:	1a51      	subs	r1, r2, r1
 8005706:	6139      	str	r1, [r7, #16]
 8005708:	4629      	mov	r1, r5
 800570a:	eb63 0301 	sbc.w	r3, r3, r1
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800571c:	4659      	mov	r1, fp
 800571e:	018b      	lsls	r3, r1, #6
 8005720:	4651      	mov	r1, sl
 8005722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005726:	4651      	mov	r1, sl
 8005728:	018a      	lsls	r2, r1, #6
 800572a:	4651      	mov	r1, sl
 800572c:	ebb2 0801 	subs.w	r8, r2, r1
 8005730:	4659      	mov	r1, fp
 8005732:	eb63 0901 	sbc.w	r9, r3, r1
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800574a:	4690      	mov	r8, r2
 800574c:	4699      	mov	r9, r3
 800574e:	4623      	mov	r3, r4
 8005750:	eb18 0303 	adds.w	r3, r8, r3
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	462b      	mov	r3, r5
 8005758:	eb49 0303 	adc.w	r3, r9, r3
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800576a:	4629      	mov	r1, r5
 800576c:	024b      	lsls	r3, r1, #9
 800576e:	4621      	mov	r1, r4
 8005770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005774:	4621      	mov	r1, r4
 8005776:	024a      	lsls	r2, r1, #9
 8005778:	4610      	mov	r0, r2
 800577a:	4619      	mov	r1, r3
 800577c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577e:	2200      	movs	r2, #0
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
 8005782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005788:	f7fa fd30 	bl	80001ec <__aeabi_uldivmod>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4613      	mov	r3, r2
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005794:	e058      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005796:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_RCC_GetSysClockFreq+0x200>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	099b      	lsrs	r3, r3, #6
 800579c:	2200      	movs	r2, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	4611      	mov	r1, r2
 80057a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	2300      	movs	r3, #0
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
 80057ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057b0:	4642      	mov	r2, r8
 80057b2:	464b      	mov	r3, r9
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f04f 0100 	mov.w	r1, #0
 80057bc:	0159      	lsls	r1, r3, #5
 80057be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c2:	0150      	lsls	r0, r2, #5
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4641      	mov	r1, r8
 80057ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80057ce:	4649      	mov	r1, r9
 80057d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057e8:	ebb2 040a 	subs.w	r4, r2, sl
 80057ec:	eb63 050b 	sbc.w	r5, r3, fp
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	00eb      	lsls	r3, r5, #3
 80057fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057fe:	00e2      	lsls	r2, r4, #3
 8005800:	4614      	mov	r4, r2
 8005802:	461d      	mov	r5, r3
 8005804:	4643      	mov	r3, r8
 8005806:	18e3      	adds	r3, r4, r3
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	464b      	mov	r3, r9
 800580c:	eb45 0303 	adc.w	r3, r5, r3
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581e:	4629      	mov	r1, r5
 8005820:	028b      	lsls	r3, r1, #10
 8005822:	4621      	mov	r1, r4
 8005824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005828:	4621      	mov	r1, r4
 800582a:	028a      	lsls	r2, r1, #10
 800582c:	4610      	mov	r0, r2
 800582e:	4619      	mov	r1, r3
 8005830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005832:	2200      	movs	r2, #0
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	61fa      	str	r2, [r7, #28]
 8005838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800583c:	f7fa fcd6 	bl	80001ec <__aeabi_uldivmod>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4613      	mov	r3, r2
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_RCC_GetSysClockFreq+0x200>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	0c1b      	lsrs	r3, r3, #16
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	3301      	adds	r3, #1
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800585a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800585c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005862:	e002      	b.n	800586a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005864:	4b05      	ldr	r3, [pc, #20]	; (800587c <HAL_RCC_GetSysClockFreq+0x204>)
 8005866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800586a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800586c:	4618      	mov	r0, r3
 800586e:	3750      	adds	r7, #80	; 0x50
 8005870:	46bd      	mov	sp, r7
 8005872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	00f42400 	.word	0x00f42400
 8005880:	007a1200 	.word	0x007a1200

08005884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005888:	4b03      	ldr	r3, [pc, #12]	; (8005898 <HAL_RCC_GetHCLKFreq+0x14>)
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	20000004 	.word	0x20000004

0800589c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058a0:	f7ff fff0 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80058a4:	4602      	mov	r2, r0
 80058a6:	4b05      	ldr	r3, [pc, #20]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	0a9b      	lsrs	r3, r3, #10
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	4903      	ldr	r1, [pc, #12]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40023800 	.word	0x40023800
 80058c0:	0800bd44 	.word	0x0800bd44

080058c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058c8:	f7ff ffdc 	bl	8005884 <HAL_RCC_GetHCLKFreq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	0b5b      	lsrs	r3, r3, #13
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	4903      	ldr	r1, [pc, #12]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058da:	5ccb      	ldrb	r3, [r1, r3]
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40023800 	.word	0x40023800
 80058e8:	0800bd44 	.word	0x0800bd44

080058ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e025      	b.n	800594c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7fc f997 	bl	8001c48 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3304      	adds	r3, #4
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f001 fb47 	bl	8006fc0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	461a      	mov	r2, r3
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	f001 fb9c 	bl	800707a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e07b      	b.n	8005a5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005976:	d009      	beq.n	800598c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	61da      	str	r2, [r3, #28]
 800597e:	e005      	b.n	800598c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fc f80a 	bl	80019c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a10:	ea42 0103 	orr.w	r1, r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	f003 0104 	and.w	r1, r3, #4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	f003 0210 	and.w	r2, r3, #16
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_SPI_Transmit+0x22>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e126      	b.n	8005cd6 <HAL_SPI_Transmit+0x270>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a90:	f7fc f9f8 	bl	8001e84 <HAL_GetTick>
 8005a94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a96:	88fb      	ldrh	r3, [r7, #6]
 8005a98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d002      	beq.n	8005aac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aaa:	e10b      	b.n	8005cc4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_SPI_Transmit+0x52>
 8005ab2:	88fb      	ldrh	r3, [r7, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005abc:	e102      	b.n	8005cc4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	88fa      	ldrh	r2, [r7, #6]
 8005ad6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	88fa      	ldrh	r2, [r7, #6]
 8005adc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b04:	d10f      	bne.n	8005b26 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d007      	beq.n	8005b44 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b4c:	d14b      	bne.n	8005be6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Transmit+0xf6>
 8005b56:	8afb      	ldrh	r3, [r7, #22]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d13e      	bne.n	8005bda <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	881a      	ldrh	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	1c9a      	adds	r2, r3, #2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b80:	e02b      	b.n	8005bda <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d112      	bne.n	8005bb6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	881a      	ldrh	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	1c9a      	adds	r2, r3, #2
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005bb4:	e011      	b.n	8005bda <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb6:	f7fc f965 	bl	8001e84 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d803      	bhi.n	8005bce <HAL_SPI_Transmit+0x168>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bcc:	d102      	bne.n	8005bd4 <HAL_SPI_Transmit+0x16e>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bd8:	e074      	b.n	8005cc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ce      	bne.n	8005b82 <HAL_SPI_Transmit+0x11c>
 8005be4:	e04c      	b.n	8005c80 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Transmit+0x18e>
 8005bee:	8afb      	ldrh	r3, [r7, #22]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d140      	bne.n	8005c76 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c1a:	e02c      	b.n	8005c76 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 0302 	and.w	r3, r3, #2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d113      	bne.n	8005c52 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	7812      	ldrb	r2, [r2, #0]
 8005c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c50:	e011      	b.n	8005c76 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c52:	f7fc f917 	bl	8001e84 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d803      	bhi.n	8005c6a <HAL_SPI_Transmit+0x204>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c68:	d102      	bne.n	8005c70 <HAL_SPI_Transmit+0x20a>
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c74:	e026      	b.n	8005cc4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1cd      	bne.n	8005c1c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f000 fbcb 	bl	8006420 <SPI_EndRxTxTransaction>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2220      	movs	r2, #32
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	e000      	b.n	8005cc4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005cc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b088      	sub	sp, #32
 8005ce2:	af02      	add	r7, sp, #8
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cfa:	d112      	bne.n	8005d22 <HAL_SPI_Receive+0x44>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10e      	bne.n	8005d22 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2204      	movs	r2, #4
 8005d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d0c:	88fa      	ldrh	r2, [r7, #6]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	9300      	str	r3, [sp, #0]
 8005d12:	4613      	mov	r3, r2
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f8f1 	bl	8005f00 <HAL_SPI_TransmitReceive>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	e0ea      	b.n	8005ef8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_SPI_Receive+0x52>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e0e3      	b.n	8005ef8 <HAL_SPI_Receive+0x21a>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d38:	f7fc f8a4 	bl	8001e84 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d002      	beq.n	8005d50 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d4e:	e0ca      	b.n	8005ee6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <HAL_SPI_Receive+0x7e>
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d60:	e0c1      	b.n	8005ee6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2204      	movs	r2, #4
 8005d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	88fa      	ldrh	r2, [r7, #6]
 8005d7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da8:	d10f      	bne.n	8005dca <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d007      	beq.n	8005de8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005de6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d162      	bne.n	8005eb6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005df0:	e02e      	b.n	8005e50 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d115      	bne.n	8005e2c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f103 020c 	add.w	r2, r3, #12
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e2a:	e011      	b.n	8005e50 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2c:	f7fc f82a 	bl	8001e84 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d803      	bhi.n	8005e44 <HAL_SPI_Receive+0x166>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e42:	d102      	bne.n	8005e4a <HAL_SPI_Receive+0x16c>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e4e:	e04a      	b.n	8005ee6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1cb      	bne.n	8005df2 <HAL_SPI_Receive+0x114>
 8005e5a:	e031      	b.n	8005ec0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d113      	bne.n	8005e92 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	b292      	uxth	r2, r2
 8005e76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	1c9a      	adds	r2, r3, #2
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e90:	e011      	b.n	8005eb6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e92:	f7fb fff7 	bl	8001e84 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d803      	bhi.n	8005eaa <HAL_SPI_Receive+0x1cc>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ea8:	d102      	bne.n	8005eb0 <HAL_SPI_Receive+0x1d2>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005eb4:	e017      	b.n	8005ee6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1cd      	bne.n	8005e5c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	6839      	ldr	r1, [r7, #0]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 fa45 	bl	8006354 <SPI_EndRxTransaction>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
 8005ee2:	e000      	b.n	8005ee6 <HAL_SPI_Receive+0x208>
  }

error :
 8005ee4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3718      	adds	r7, #24
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08c      	sub	sp, #48	; 0x30
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x26>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e18a      	b.n	800623c <HAL_SPI_TransmitReceive+0x33c>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f2e:	f7fb ffa9 	bl	8001e84 <HAL_GetTick>
 8005f32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f44:	887b      	ldrh	r3, [r7, #2]
 8005f46:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d00f      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x70>
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f56:	d107      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d103      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x68>
 8005f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d003      	beq.n	8005f70 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f6e:	e15b      	b.n	8006228 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_SPI_TransmitReceive+0x82>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_SPI_TransmitReceive+0x82>
 8005f7c:	887b      	ldrh	r3, [r7, #2]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f88:	e14e      	b.n	8006228 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d003      	beq.n	8005f9e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2205      	movs	r2, #5
 8005f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	887a      	ldrh	r2, [r7, #2]
 8005fae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	887a      	ldrh	r2, [r7, #2]
 8005fb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	887a      	ldrh	r2, [r7, #2]
 8005fc0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	887a      	ldrh	r2, [r7, #2]
 8005fc6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d007      	beq.n	8005ff2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ff0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffa:	d178      	bne.n	80060ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_TransmitReceive+0x10a>
 8006004:	8b7b      	ldrh	r3, [r7, #26]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d166      	bne.n	80060d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	881a      	ldrh	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	1c9a      	adds	r2, r3, #2
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006024:	b29b      	uxth	r3, r3
 8006026:	3b01      	subs	r3, #1
 8006028:	b29a      	uxth	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602e:	e053      	b.n	80060d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d11b      	bne.n	8006076 <HAL_SPI_TransmitReceive+0x176>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d016      	beq.n	8006076 <HAL_SPI_TransmitReceive+0x176>
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	2b01      	cmp	r3, #1
 800604c:	d113      	bne.n	8006076 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	881a      	ldrh	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	1c9a      	adds	r2, r3, #2
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d119      	bne.n	80060b8 <HAL_SPI_TransmitReceive+0x1b8>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d014      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	b292      	uxth	r2, r2
 800609a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	1c9a      	adds	r2, r3, #2
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060b4:	2301      	movs	r3, #1
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060b8:	f7fb fee4 	bl	8001e84 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d807      	bhi.n	80060d8 <HAL_SPI_TransmitReceive+0x1d8>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060ce:	d003      	beq.n	80060d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80060d6:	e0a7      	b.n	8006228 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1a6      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x130>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1a1      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x130>
 80060ec:	e07c      	b.n	80061e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x1fc>
 80060f6:	8b7b      	ldrh	r3, [r7, #26]
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d16b      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006122:	e057      	b.n	80061d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b02      	cmp	r3, #2
 8006130:	d11c      	bne.n	800616c <HAL_SPI_TransmitReceive+0x26c>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d017      	beq.n	800616c <HAL_SPI_TransmitReceive+0x26c>
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d114      	bne.n	800616c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	330c      	adds	r3, #12
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b01      	cmp	r3, #1
 8006178:	d119      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x2ae>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d014      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061aa:	2301      	movs	r3, #1
 80061ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061ae:	f7fb fe69 	bl	8001e84 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d803      	bhi.n	80061c6 <HAL_SPI_TransmitReceive+0x2c6>
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c4:	d102      	bne.n	80061cc <HAL_SPI_TransmitReceive+0x2cc>
 80061c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d103      	bne.n	80061d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061d2:	e029      	b.n	8006228 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1a2      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x224>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d19d      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f917 	bl	8006420 <SPI_EndRxTxTransaction>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d006      	beq.n	8006206 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2220      	movs	r2, #32
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006204:	e010      	b.n	8006228 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800620e:	2300      	movs	r3, #0
 8006210:	617b      	str	r3, [r7, #20]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	617b      	str	r3, [r7, #20]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	e000      	b.n	8006228 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006226:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800623c:	4618      	mov	r0, r3
 800623e:	3730      	adds	r7, #48	; 0x30
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	4613      	mov	r3, r2
 8006252:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006254:	f7fb fe16 	bl	8001e84 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	4413      	add	r3, r2
 8006262:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006264:	f7fb fe0e 	bl	8001e84 <HAL_GetTick>
 8006268:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800626a:	4b39      	ldr	r3, [pc, #228]	; (8006350 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	015b      	lsls	r3, r3, #5
 8006270:	0d1b      	lsrs	r3, r3, #20
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	fb02 f303 	mul.w	r3, r2, r3
 8006278:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800627a:	e054      	b.n	8006326 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006282:	d050      	beq.n	8006326 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006284:	f7fb fdfe 	bl	8001e84 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	429a      	cmp	r2, r3
 8006292:	d902      	bls.n	800629a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d13d      	bne.n	8006316 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b2:	d111      	bne.n	80062d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062bc:	d004      	beq.n	80062c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062c6:	d107      	bne.n	80062d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d10f      	bne.n	8006302 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006300:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e017      	b.n	8006346 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	3b01      	subs	r3, #1
 8006324:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4013      	ands	r3, r2
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	429a      	cmp	r2, r3
 8006334:	bf0c      	ite	eq
 8006336:	2301      	moveq	r3, #1
 8006338:	2300      	movne	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	429a      	cmp	r2, r3
 8006342:	d19b      	bne.n	800627c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000004 	.word	0x20000004

08006354 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006368:	d111      	bne.n	800638e <SPI_EndRxTransaction+0x3a>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006372:	d004      	beq.n	800637e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637c:	d107      	bne.n	800638e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006396:	d12a      	bne.n	80063ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a0:	d012      	beq.n	80063c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2180      	movs	r1, #128	; 0x80
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff49 	bl	8006244 <SPI_WaitFlagStateUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d02d      	beq.n	8006414 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	f043 0220 	orr.w	r2, r3, #32
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e026      	b.n	8006416 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2200      	movs	r2, #0
 80063d0:	2101      	movs	r1, #1
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff ff36 	bl	8006244 <SPI_WaitFlagStateUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d01a      	beq.n	8006414 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e013      	b.n	8006416 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2101      	movs	r1, #1
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f7ff ff23 	bl	8006244 <SPI_WaitFlagStateUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006408:	f043 0220 	orr.w	r2, r3, #32
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e000      	b.n	8006416 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800642c:	4b1b      	ldr	r3, [pc, #108]	; (800649c <SPI_EndRxTxTransaction+0x7c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a1b      	ldr	r2, [pc, #108]	; (80064a0 <SPI_EndRxTxTransaction+0x80>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	0d5b      	lsrs	r3, r3, #21
 8006438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800643c:	fb02 f303 	mul.w	r3, r2, r3
 8006440:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800644a:	d112      	bne.n	8006472 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	2180      	movs	r1, #128	; 0x80
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff fef4 	bl	8006244 <SPI_WaitFlagStateUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d016      	beq.n	8006490 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006466:	f043 0220 	orr.w	r2, r3, #32
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e00f      	b.n	8006492 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00a      	beq.n	800648e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	3b01      	subs	r3, #1
 800647c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	d0f2      	beq.n	8006472 <SPI_EndRxTxTransaction+0x52>
 800648c:	e000      	b.n	8006490 <SPI_EndRxTxTransaction+0x70>
        break;
 800648e:	bf00      	nop
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000004 	.word	0x20000004
 80064a0:	165e9f81 	.word	0x165e9f81

080064a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e041      	b.n	800653a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fb fac0 	bl	8001a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f000 f8f4 	bl	80066d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_TIM_ConfigClockSource+0x1c>
 800655a:	2302      	movs	r3, #2
 800655c:	e0b4      	b.n	80066c8 <HAL_TIM_ConfigClockSource+0x186>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800657c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006584:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006596:	d03e      	beq.n	8006616 <HAL_TIM_ConfigClockSource+0xd4>
 8006598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659c:	f200 8087 	bhi.w	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a4:	f000 8086 	beq.w	80066b4 <HAL_TIM_ConfigClockSource+0x172>
 80065a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ac:	d87f      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065ae:	2b70      	cmp	r3, #112	; 0x70
 80065b0:	d01a      	beq.n	80065e8 <HAL_TIM_ConfigClockSource+0xa6>
 80065b2:	2b70      	cmp	r3, #112	; 0x70
 80065b4:	d87b      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065b6:	2b60      	cmp	r3, #96	; 0x60
 80065b8:	d050      	beq.n	800665c <HAL_TIM_ConfigClockSource+0x11a>
 80065ba:	2b60      	cmp	r3, #96	; 0x60
 80065bc:	d877      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065be:	2b50      	cmp	r3, #80	; 0x50
 80065c0:	d03c      	beq.n	800663c <HAL_TIM_ConfigClockSource+0xfa>
 80065c2:	2b50      	cmp	r3, #80	; 0x50
 80065c4:	d873      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d058      	beq.n	800667c <HAL_TIM_ConfigClockSource+0x13a>
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d86f      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065ce:	2b30      	cmp	r3, #48	; 0x30
 80065d0:	d064      	beq.n	800669c <HAL_TIM_ConfigClockSource+0x15a>
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d86b      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d060      	beq.n	800669c <HAL_TIM_ConfigClockSource+0x15a>
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d867      	bhi.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d05c      	beq.n	800669c <HAL_TIM_ConfigClockSource+0x15a>
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d05a      	beq.n	800669c <HAL_TIM_ConfigClockSource+0x15a>
 80065e6:	e062      	b.n	80066ae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	6899      	ldr	r1, [r3, #8]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f000 f984 	bl	8006904 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800660a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	609a      	str	r2, [r3, #8]
      break;
 8006614:	e04f      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	6899      	ldr	r1, [r3, #8]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f000 f96d 	bl	8006904 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006638:	609a      	str	r2, [r3, #8]
      break;
 800663a:	e03c      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6859      	ldr	r1, [r3, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	461a      	mov	r2, r3
 800664a:	f000 f8e1 	bl	8006810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2150      	movs	r1, #80	; 0x50
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f93a 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 800665a:	e02c      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	6859      	ldr	r1, [r3, #4]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	461a      	mov	r2, r3
 800666a:	f000 f900 	bl	800686e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2160      	movs	r1, #96	; 0x60
 8006674:	4618      	mov	r0, r3
 8006676:	f000 f92a 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 800667a:	e01c      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6818      	ldr	r0, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	461a      	mov	r2, r3
 800668a:	f000 f8c1 	bl	8006810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2140      	movs	r1, #64	; 0x40
 8006694:	4618      	mov	r0, r3
 8006696:	f000 f91a 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 800669a:	e00c      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f000 f911 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 80066ac:	e003      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
      break;
 80066b2:	e000      	b.n	80066b6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a40      	ldr	r2, [pc, #256]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d013      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ee:	d00f      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a3d      	ldr	r2, [pc, #244]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a3a      	ldr	r2, [pc, #232]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d108      	bne.n	8006722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	4313      	orrs	r3, r2
 8006720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2f      	ldr	r2, [pc, #188]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d02b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006730:	d027      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <TIM_Base_SetConfig+0x118>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d023      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a2b      	ldr	r2, [pc, #172]	; (80067ec <TIM_Base_SetConfig+0x11c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a2a      	ldr	r2, [pc, #168]	; (80067f0 <TIM_Base_SetConfig+0x120>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a29      	ldr	r2, [pc, #164]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d017      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <TIM_Base_SetConfig+0x128>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a27      	ldr	r2, [pc, #156]	; (80067fc <TIM_Base_SetConfig+0x12c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00f      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <TIM_Base_SetConfig+0x130>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00b      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a25      	ldr	r2, [pc, #148]	; (8006804 <TIM_Base_SetConfig+0x134>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <TIM_Base_SetConfig+0x138>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d003      	beq.n	8006782 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a23      	ldr	r2, [pc, #140]	; (800680c <TIM_Base_SetConfig+0x13c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d108      	bne.n	8006794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <TIM_Base_SetConfig+0x114>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_Base_SetConfig+0xf8>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <TIM_Base_SetConfig+0x124>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d103      	bne.n	80067d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	615a      	str	r2, [r3, #20]
}
 80067d6:	bf00      	nop
 80067d8:	3714      	adds	r7, #20
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40010000 	.word	0x40010000
 80067e8:	40000400 	.word	0x40000400
 80067ec:	40000800 	.word	0x40000800
 80067f0:	40000c00 	.word	0x40000c00
 80067f4:	40010400 	.word	0x40010400
 80067f8:	40014000 	.word	0x40014000
 80067fc:	40014400 	.word	0x40014400
 8006800:	40014800 	.word	0x40014800
 8006804:	40001800 	.word	0x40001800
 8006808:	40001c00 	.word	0x40001c00
 800680c:	40002000 	.word	0x40002000

08006810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 030a 	bic.w	r3, r3, #10
 800684c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0210 	bic.w	r2, r3, #16
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f043 0307 	orr.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d101      	bne.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006958:	2302      	movs	r3, #2
 800695a:	e05a      	b.n	8006a12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a21      	ldr	r2, [pc, #132]	; (8006a20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d022      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a8:	d01d      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1d      	ldr	r2, [pc, #116]	; (8006a24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d018      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1b      	ldr	r2, [pc, #108]	; (8006a28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1a      	ldr	r2, [pc, #104]	; (8006a2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00e      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a18      	ldr	r2, [pc, #96]	; (8006a30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d009      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a17      	ldr	r2, [pc, #92]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d004      	beq.n	80069e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d10c      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40010000 	.word	0x40010000
 8006a24:	40000400 	.word	0x40000400
 8006a28:	40000800 	.word	0x40000800
 8006a2c:	40000c00 	.word	0x40000c00
 8006a30:	40010400 	.word	0x40010400
 8006a34:	40014000 	.word	0x40014000
 8006a38:	40001800 	.word	0x40001800

08006a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e03f      	b.n	8006ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fb f816 	bl	8001a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2224      	movs	r2, #36	; 0x24
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f829 	bl	8006ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695a      	ldr	r2, [r3, #20]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006adc:	b0c0      	sub	sp, #256	; 0x100
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	ea40 0301 	orr.w	r3, r0, r1
 8006b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b30:	f021 010c 	bic.w	r1, r1, #12
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b52:	6999      	ldr	r1, [r3, #24]
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	ea40 0301 	orr.w	r3, r0, r1
 8006b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b8f      	ldr	r3, [pc, #572]	; (8006da4 <UART_SetConfig+0x2cc>)
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d005      	beq.n	8006b78 <UART_SetConfig+0xa0>
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b8d      	ldr	r3, [pc, #564]	; (8006da8 <UART_SetConfig+0x2d0>)
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d104      	bne.n	8006b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fe fea4 	bl	80058c4 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b80:	e003      	b.n	8006b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b82:	f7fe fe8b 	bl	800589c <HAL_RCC_GetPCLK1Freq>
 8006b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b94:	f040 810c 	bne.w	8006db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006baa:	4622      	mov	r2, r4
 8006bac:	462b      	mov	r3, r5
 8006bae:	1891      	adds	r1, r2, r2
 8006bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bb2:	415b      	adcs	r3, r3
 8006bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bba:	4621      	mov	r1, r4
 8006bbc:	eb12 0801 	adds.w	r8, r2, r1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	eb43 0901 	adc.w	r9, r3, r1
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bda:	4690      	mov	r8, r2
 8006bdc:	4699      	mov	r9, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	eb18 0303 	adds.w	r3, r8, r3
 8006be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be8:	462b      	mov	r3, r5
 8006bea:	eb49 0303 	adc.w	r3, r9, r3
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c06:	460b      	mov	r3, r1
 8006c08:	18db      	adds	r3, r3, r3
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	eb42 0303 	adc.w	r3, r2, r3
 8006c12:	657b      	str	r3, [r7, #84]	; 0x54
 8006c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c1c:	f7f9 fae6 	bl	80001ec <__aeabi_uldivmod>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <UART_SetConfig+0x2d4>)
 8006c26:	fba3 2302 	umull	r2, r3, r3, r2
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	011c      	lsls	r4, r3, #4
 8006c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	1891      	adds	r1, r2, r2
 8006c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c48:	415b      	adcs	r3, r3
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c50:	4641      	mov	r1, r8
 8006c52:	eb12 0a01 	adds.w	sl, r2, r1
 8006c56:	4649      	mov	r1, r9
 8006c58:	eb43 0b01 	adc.w	fp, r3, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c70:	4692      	mov	sl, r2
 8006c72:	469b      	mov	fp, r3
 8006c74:	4643      	mov	r3, r8
 8006c76:	eb1a 0303 	adds.w	r3, sl, r3
 8006c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	eb4b 0303 	adc.w	r3, fp, r3
 8006c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	18db      	adds	r3, r3, r3
 8006ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	eb42 0303 	adc.w	r3, r2, r3
 8006ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8006caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cb2:	f7f9 fa9b 	bl	80001ec <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <UART_SetConfig+0x2d4>)
 8006cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2264      	movs	r2, #100	; 0x64
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	1acb      	subs	r3, r1, r3
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <UART_SetConfig+0x2d4>)
 8006cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ce0:	441c      	add	r4, r3
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	1891      	adds	r1, r2, r2
 8006cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cfc:	415b      	adcs	r3, r3
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d04:	4641      	mov	r1, r8
 8006d06:	1851      	adds	r1, r2, r1
 8006d08:	6339      	str	r1, [r7, #48]	; 0x30
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	414b      	adcs	r3, r1
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	00cb      	lsls	r3, r1, #3
 8006d20:	4651      	mov	r1, sl
 8006d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d26:	4651      	mov	r1, sl
 8006d28:	00ca      	lsls	r2, r1, #3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4642      	mov	r2, r8
 8006d32:	189b      	adds	r3, r3, r2
 8006d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d38:	464b      	mov	r3, r9
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	eb42 0303 	adc.w	r3, r2, r3
 8006d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d58:	460b      	mov	r3, r1
 8006d5a:	18db      	adds	r3, r3, r3
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5e:	4613      	mov	r3, r2
 8006d60:	eb42 0303 	adc.w	r3, r2, r3
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d6e:	f7f9 fa3d 	bl	80001ec <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <UART_SetConfig+0x2d4>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <UART_SetConfig+0x2d4>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 0207 	and.w	r2, r3, #7
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4422      	add	r2, r4
 8006d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006da0:	e105      	b.n	8006fae <UART_SetConfig+0x4d6>
 8006da2:	bf00      	nop
 8006da4:	40011000 	.word	0x40011000
 8006da8:	40011400 	.word	0x40011400
 8006dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	1891      	adds	r1, r2, r2
 8006dc8:	6239      	str	r1, [r7, #32]
 8006dca:	415b      	adcs	r3, r3
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	1854      	adds	r4, r2, r1
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	eb43 0501 	adc.w	r5, r3, r1
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	00eb      	lsls	r3, r5, #3
 8006de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dea:	00e2      	lsls	r2, r4, #3
 8006dec:	4614      	mov	r4, r2
 8006dee:	461d      	mov	r5, r3
 8006df0:	4643      	mov	r3, r8
 8006df2:	18e3      	adds	r3, r4, r3
 8006df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006df8:	464b      	mov	r3, r9
 8006dfa:	eb45 0303 	adc.w	r3, r5, r3
 8006dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e1e:	4629      	mov	r1, r5
 8006e20:	008b      	lsls	r3, r1, #2
 8006e22:	4621      	mov	r1, r4
 8006e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e28:	4621      	mov	r1, r4
 8006e2a:	008a      	lsls	r2, r1, #2
 8006e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e30:	f7f9 f9dc 	bl	80001ec <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4b60      	ldr	r3, [pc, #384]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	011c      	lsls	r4, r3, #4
 8006e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	1891      	adds	r1, r2, r2
 8006e5a:	61b9      	str	r1, [r7, #24]
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e64:	4641      	mov	r1, r8
 8006e66:	1851      	adds	r1, r2, r1
 8006e68:	6139      	str	r1, [r7, #16]
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	414b      	adcs	r3, r1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	00cb      	lsls	r3, r1, #3
 8006e80:	4651      	mov	r1, sl
 8006e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e86:	4651      	mov	r1, sl
 8006e88:	00ca      	lsls	r2, r1, #3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4642      	mov	r2, r8
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e98:	464b      	mov	r3, r9
 8006e9a:	460a      	mov	r2, r1
 8006e9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	008b      	lsls	r3, r1, #2
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	008a      	lsls	r2, r1, #2
 8006eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ece:	f7f9 f98d 	bl	80001ec <__aeabi_uldivmod>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	2164      	movs	r1, #100	; 0x64
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	3332      	adds	r3, #50	; 0x32
 8006eea:	4a34      	ldr	r2, [pc, #208]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef6:	441c      	add	r4, r3
 8006ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006efc:	2200      	movs	r2, #0
 8006efe:	673b      	str	r3, [r7, #112]	; 0x70
 8006f00:	677a      	str	r2, [r7, #116]	; 0x74
 8006f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	1891      	adds	r1, r2, r2
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f16:	4641      	mov	r1, r8
 8006f18:	1851      	adds	r1, r2, r1
 8006f1a:	6039      	str	r1, [r7, #0]
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	414b      	adcs	r3, r1
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f2e:	4659      	mov	r1, fp
 8006f30:	00cb      	lsls	r3, r1, #3
 8006f32:	4651      	mov	r1, sl
 8006f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f38:	4651      	mov	r1, sl
 8006f3a:	00ca      	lsls	r2, r1, #3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	4642      	mov	r2, r8
 8006f44:	189b      	adds	r3, r3, r2
 8006f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f48:	464b      	mov	r3, r9
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	008b      	lsls	r3, r1, #2
 8006f6e:	4641      	mov	r1, r8
 8006f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f74:	4641      	mov	r1, r8
 8006f76:	008a      	lsls	r2, r1, #2
 8006f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f7c:	f7f9 f936 	bl	80001ec <__aeabi_uldivmod>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006f86:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2164      	movs	r1, #100	; 0x64
 8006f8e:	fb01 f303 	mul.w	r3, r1, r3
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	3332      	adds	r3, #50	; 0x32
 8006f98:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	f003 020f 	and.w	r2, r3, #15
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4422      	add	r2, r4
 8006fac:	609a      	str	r2, [r3, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fba:	bf00      	nop
 8006fbc:	51eb851f 	.word	0x51eb851f

08006fc0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d123      	bne.n	800701a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	6851      	ldr	r1, [r2, #4]
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	6892      	ldr	r2, [r2, #8]
 8006fe6:	4311      	orrs	r1, r2
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	68d2      	ldr	r2, [r2, #12]
 8006fec:	4311      	orrs	r1, r2
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	6912      	ldr	r2, [r2, #16]
 8006ff2:	4311      	orrs	r1, r2
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	6952      	ldr	r2, [r2, #20]
 8006ff8:	4311      	orrs	r1, r2
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	6992      	ldr	r2, [r2, #24]
 8006ffe:	4311      	orrs	r1, r2
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	69d2      	ldr	r2, [r2, #28]
 8007004:	4311      	orrs	r1, r2
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	6a12      	ldr	r2, [r2, #32]
 800700a:	4311      	orrs	r1, r2
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007010:	430a      	orrs	r2, r1
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e028      	b.n	800706c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	69d9      	ldr	r1, [r3, #28]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	4319      	orrs	r1, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	430b      	orrs	r3, r1
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007040:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	6851      	ldr	r1, [r2, #4]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	6892      	ldr	r2, [r2, #8]
 800704c:	4311      	orrs	r1, r2
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	68d2      	ldr	r2, [r2, #12]
 8007052:	4311      	orrs	r1, r2
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	6912      	ldr	r2, [r2, #16]
 8007058:	4311      	orrs	r1, r2
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	6952      	ldr	r2, [r2, #20]
 800705e:	4311      	orrs	r1, r2
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	6992      	ldr	r2, [r2, #24]
 8007064:	430a      	orrs	r2, r1
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800707a:	b480      	push	{r7}
 800707c:	b085      	sub	sp, #20
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d128      	bne.n	80070de <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	1e59      	subs	r1, r3, #1
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	3b01      	subs	r3, #1
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	4319      	orrs	r1, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	4319      	orrs	r1, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	031b      	lsls	r3, r3, #12
 80070b6:	4319      	orrs	r1, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	3b01      	subs	r3, #1
 80070be:	041b      	lsls	r3, r3, #16
 80070c0:	4319      	orrs	r1, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	051b      	lsls	r3, r3, #20
 80070ca:	4319      	orrs	r1, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	061b      	lsls	r3, r3, #24
 80070d4:	430b      	orrs	r3, r1
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	e02f      	b.n	800713e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	68d2      	ldr	r2, [r2, #12]
 80070ee:	3a01      	subs	r2, #1
 80070f0:	0311      	lsls	r1, r2, #12
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	6952      	ldr	r2, [r2, #20]
 80070f6:	3a01      	subs	r2, #1
 80070f8:	0512      	lsls	r2, r2, #20
 80070fa:	430a      	orrs	r2, r1
 80070fc:	431a      	orrs	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	1e59      	subs	r1, r3, #1
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	3b01      	subs	r3, #1
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	4319      	orrs	r1, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	3b01      	subs	r3, #1
 8007120:	021b      	lsls	r3, r3, #8
 8007122:	4319      	orrs	r1, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	3b01      	subs	r3, #1
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	4319      	orrs	r1, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	3b01      	subs	r3, #1
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	430b      	orrs	r3, r1
 8007138:	431a      	orrs	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800714c:	b084      	sub	sp, #16
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	f107 001c 	add.w	r0, r7, #28
 800715a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	2b01      	cmp	r3, #1
 8007162:	d122      	bne.n	80071aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800718c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f9c0 	bl	8007524 <USB_CoreReset>
 80071a4:	4603      	mov	r3, r0
 80071a6:	73fb      	strb	r3, [r7, #15]
 80071a8:	e01a      	b.n	80071e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9b4 	bl	8007524 <USB_CoreReset>
 80071bc:	4603      	mov	r3, r0
 80071be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
 80071d2:	e005      	b.n	80071e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d10b      	bne.n	80071fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f043 0206 	orr.w	r2, r3, #6
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f043 0220 	orr.w	r2, r3, #32
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800720a:	b004      	add	sp, #16
 800720c:	4770      	bx	lr

0800720e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	f043 0201 	orr.w	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f023 0201 	bic.w	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	460b      	mov	r3, r1
 800725c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d115      	bne.n	80072a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007280:	2001      	movs	r0, #1
 8007282:	f7fa fe0b 	bl	8001e9c <HAL_Delay>
      ms++;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f93a 	bl	8007506 <USB_GetMode>
 8007292:	4603      	mov	r3, r0
 8007294:	2b01      	cmp	r3, #1
 8007296:	d01e      	beq.n	80072d6 <USB_SetCurrentMode+0x84>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b31      	cmp	r3, #49	; 0x31
 800729c:	d9f0      	bls.n	8007280 <USB_SetCurrentMode+0x2e>
 800729e:	e01a      	b.n	80072d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d115      	bne.n	80072d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072b2:	2001      	movs	r0, #1
 80072b4:	f7fa fdf2 	bl	8001e9c <HAL_Delay>
      ms++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f921 	bl	8007506 <USB_GetMode>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <USB_SetCurrentMode+0x84>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b31      	cmp	r3, #49	; 0x31
 80072ce:	d9f0      	bls.n	80072b2 <USB_SetCurrentMode+0x60>
 80072d0:	e001      	b.n	80072d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e005      	b.n	80072e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b32      	cmp	r3, #50	; 0x32
 80072da:	d101      	bne.n	80072e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	3301      	adds	r3, #1
 80072fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4a13      	ldr	r2, [pc, #76]	; (8007350 <USB_FlushTxFifo+0x64>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e01b      	b.n	8007344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	daf2      	bge.n	80072fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	019b      	lsls	r3, r3, #6
 800731c:	f043 0220 	orr.w	r2, r3, #32
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a08      	ldr	r2, [pc, #32]	; (8007350 <USB_FlushTxFifo+0x64>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e006      	b.n	8007344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b20      	cmp	r3, #32
 8007340:	d0f0      	beq.n	8007324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	00030d40 	.word	0x00030d40

08007354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	4a11      	ldr	r2, [pc, #68]	; (80073b0 <USB_FlushRxFifo+0x5c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d901      	bls.n	8007372 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e018      	b.n	80073a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	2b00      	cmp	r3, #0
 8007378:	daf2      	bge.n	8007360 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2210      	movs	r2, #16
 8007382:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3301      	adds	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a08      	ldr	r2, [pc, #32]	; (80073b0 <USB_FlushRxFifo+0x5c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d901      	bls.n	8007396 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e006      	b.n	80073a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b10      	cmp	r3, #16
 80073a0:	d0f0      	beq.n	8007384 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	00030d40 	.word	0x00030d40

080073b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b089      	sub	sp, #36	; 0x24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4611      	mov	r1, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	460b      	mov	r3, r1
 80073c4:	71fb      	strb	r3, [r7, #7]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d123      	bne.n	8007422 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073da:	88bb      	ldrh	r3, [r7, #4]
 80073dc:	3303      	adds	r3, #3
 80073de:	089b      	lsrs	r3, r3, #2
 80073e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e018      	b.n	800741a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	031a      	lsls	r2, r3, #12
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073f4:	461a      	mov	r2, r3
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	3301      	adds	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3301      	adds	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	3301      	adds	r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	3301      	adds	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	429a      	cmp	r2, r3
 8007420:	d3e2      	bcc.n	80073e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3724      	adds	r7, #36	; 0x24
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007430:	b480      	push	{r7}
 8007432:	b08b      	sub	sp, #44	; 0x2c
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	089b      	lsrs	r3, r3, #2
 800744a:	b29b      	uxth	r3, r3
 800744c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	f003 0303 	and.w	r3, r3, #3
 8007454:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007456:	2300      	movs	r3, #0
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	e014      	b.n	8007486 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	601a      	str	r2, [r3, #0]
    pDest++;
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	3301      	adds	r3, #1
 800746c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	3301      	adds	r3, #1
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	3301      	adds	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	3301      	adds	r3, #1
 800747e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	3301      	adds	r3, #1
 8007484:	623b      	str	r3, [r7, #32]
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	429a      	cmp	r2, r3
 800748c:	d3e6      	bcc.n	800745c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800748e:	8bfb      	ldrh	r3, [r7, #30]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01e      	beq.n	80074d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800749e:	461a      	mov	r2, r3
 80074a0:	f107 0310 	add.w	r3, r7, #16
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b8:	701a      	strb	r2, [r3, #0]
      i++;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	3301      	adds	r3, #1
 80074be:	623b      	str	r3, [r7, #32]
      pDest++;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	3301      	adds	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80074c6:	8bfb      	ldrh	r3, [r7, #30]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074cc:	8bfb      	ldrh	r3, [r7, #30]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1ea      	bne.n	80074a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	372c      	adds	r7, #44	; 0x2c
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	4013      	ands	r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074f8:	68fb      	ldr	r3, [r7, #12]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	f003 0301 	and.w	r3, r3, #1
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4a13      	ldr	r2, [pc, #76]	; (8007588 <USB_CoreReset+0x64>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d901      	bls.n	8007542 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e01b      	b.n	800757a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	daf2      	bge.n	8007530 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f043 0201 	orr.w	r2, r3, #1
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a09      	ldr	r2, [pc, #36]	; (8007588 <USB_CoreReset+0x64>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d901      	bls.n	800756c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e006      	b.n	800757a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b01      	cmp	r3, #1
 8007576:	d0f0      	beq.n	800755a <USB_CoreReset+0x36>

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	00030d40 	.word	0x00030d40

0800758c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800758c:	b084      	sub	sp, #16
 800758e:	b580      	push	{r7, lr}
 8007590:	b086      	sub	sp, #24
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800759a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075ac:	461a      	mov	r2, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d018      	beq.n	8007614 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d10a      	bne.n	80075fe <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075f6:	f043 0304 	orr.w	r3, r3, #4
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e014      	b.n	8007628 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800760c:	f023 0304 	bic.w	r3, r3, #4
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e009      	b.n	8007628 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007622:	f023 0304 	bic.w	r3, r3, #4
 8007626:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007628:	2110      	movs	r1, #16
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fe5e 	bl	80072ec <USB_FlushTxFifo>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fe8a 	bl	8007354 <USB_FlushRxFifo>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e015      	b.n	800767c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	461a      	mov	r2, r3
 800765e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007662:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007670:	461a      	mov	r2, r3
 8007672:	2300      	movs	r3, #0
 8007674:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3301      	adds	r3, #1
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3e5      	bcc.n	8007650 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007690:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <USB_HostInit+0x16c>)
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a13      	ldr	r2, [pc, #76]	; (80076fc <USB_HostInit+0x170>)
 80076b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80076b4:	e009      	b.n	80076ca <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2280      	movs	r2, #128	; 0x80
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a10      	ldr	r2, [pc, #64]	; (8007700 <USB_HostInit+0x174>)
 80076c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0f      	ldr	r2, [pc, #60]	; (8007704 <USB_HostInit+0x178>)
 80076c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f043 0210 	orr.w	r2, r3, #16
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <USB_HostInit+0x17c>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f4:	b004      	add	sp, #16
 80076f6:	4770      	bx	lr
 80076f8:	01000200 	.word	0x01000200
 80076fc:	00e00300 	.word	0x00e00300
 8007700:	00600080 	.word	0x00600080
 8007704:	004000e0 	.word	0x004000e0
 8007708:	a3200008 	.word	0xa3200008

0800770c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007744:	4313      	orrs	r3, r2
 8007746:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d107      	bne.n	800775e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007754:	461a      	mov	r2, r3
 8007756:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800775a:	6053      	str	r3, [r2, #4]
 800775c:	e009      	b.n	8007772 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d106      	bne.n	8007772 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800776a:	461a      	mov	r2, r3
 800776c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007770:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077b0:	2064      	movs	r0, #100	; 0x64
 80077b2:	f7fa fb73 	bl	8001e9c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077c4:	200a      	movs	r0, #10
 80077c6:	f7fa fb69 	bl	8001e9c <HAL_Delay>

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <USB_DriveVbus+0x44>
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d106      	bne.n	8007818 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007812:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007816:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	d109      	bne.n	8007838 <USB_DriveVbus+0x64>
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007836:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	0c5b      	lsrs	r3, r3, #17
 8007864:	f003 0303 	and.w	r3, r3, #3
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	b29b      	uxth	r3, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	70fb      	strb	r3, [r7, #3]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70bb      	strb	r3, [r7, #2]
 80078ae:	4613      	mov	r3, r2
 80078b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c6:	461a      	mov	r2, r3
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d87e      	bhi.n	80079d4 <USB_HC_Init+0x13c>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USB_HC_Init+0x44>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	08007997 	.word	0x08007997
 80078e4:	080078ed 	.word	0x080078ed
 80078e8:	08007959 	.word	0x08007959
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f8:	461a      	mov	r2, r3
 80078fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80078fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007900:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	da10      	bge.n	800792a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	440a      	add	r2, r1
 800791e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007926:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007928:	e057      	b.n	80079da <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d051      	beq.n	80079da <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	440a      	add	r2, r1
 800794c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007950:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007954:	60d3      	str	r3, [r2, #12]
      break;
 8007956:	e040      	b.n	80079da <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	461a      	mov	r2, r3
 8007966:	f240 639d 	movw	r3, #1693	; 0x69d
 800796a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800796c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	da34      	bge.n	80079de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	440a      	add	r2, r1
 800798a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800798e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007992:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007994:	e023      	b.n	80079de <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	461a      	mov	r2, r3
 80079a4:	f240 2325 	movw	r3, #549	; 0x225
 80079a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da17      	bge.n	80079e2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079d2:	e006      	b.n	80079e2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	77fb      	strb	r3, [r7, #31]
      break;
 80079d8:	e004      	b.n	80079e4 <USB_HC_Init+0x14c>
      break;
 80079da:	bf00      	nop
 80079dc:	e002      	b.n	80079e4 <USB_HC_Init+0x14c>
      break;
 80079de:	bf00      	nop
 80079e0:	e000      	b.n	80079e4 <USB_HC_Init+0x14c>
      break;
 80079e2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079fe:	f043 0302 	orr.w	r3, r3, #2
 8007a02:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	2101      	movs	r1, #1
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	6939      	ldr	r1, [r7, #16]
 8007a1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da03      	bge.n	8007a3e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	e001      	b.n	8007a42 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff feff 	bl	8007846 <USB_GetHostSpeed>
 8007a48:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d106      	bne.n	8007a60 <USB_HC_Init+0x1c8>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d003      	beq.n	8007a60 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e001      	b.n	8007a64 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a64:	787b      	ldrb	r3, [r7, #1]
 8007a66:	059b      	lsls	r3, r3, #22
 8007a68:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a6c:	78bb      	ldrb	r3, [r7, #2]
 8007a6e:	02db      	lsls	r3, r3, #11
 8007a70:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a74:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a7a:	049b      	lsls	r3, r3, #18
 8007a7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	0159      	lsls	r1, r3, #5
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	440b      	add	r3, r1
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007aa0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d003      	beq.n	8007ab2 <USB_HC_Init+0x21a>
 8007aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d10f      	bne.n	8007ad2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	; 0x30
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007af8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02d      	beq.n	8007b62 <USB_HC_StartXfer+0x86>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	791b      	ldrb	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d129      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d117      	bne.n	8007b44 <USB_HC_StartXfer+0x68>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	79db      	ldrb	r3, [r3, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <USB_HC_StartXfer+0x48>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	79db      	ldrb	r3, [r3, #7]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d10f      	bne.n	8007b44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	6a3a      	ldr	r2, [r7, #32]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	795b      	ldrb	r3, [r3, #5]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	4619      	mov	r1, r3
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fa0f 	bl	8007f7c <USB_DoPing>
      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e0f8      	b.n	8007d54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	8912      	ldrh	r2, [r2, #8]
 8007b72:	4413      	add	r3, r2
 8007b74:	3b01      	subs	r3, #1
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	8912      	ldrh	r2, [r2, #8]
 8007b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b82:	8b7b      	ldrh	r3, [r7, #26]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d90b      	bls.n	8007ba0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b88:	8b7b      	ldrh	r3, [r7, #26]
 8007b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	8912      	ldrh	r2, [r2, #8]
 8007b92:	fb03 f202 	mul.w	r2, r3, r2
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	e001      	b.n	8007ba0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	8912      	ldrh	r2, [r2, #8]
 8007bae:	fb03 f202 	mul.w	r2, r3, r2
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	611a      	str	r2, [r3, #16]
 8007bb6:	e003      	b.n	8007bc0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bca:	04d9      	lsls	r1, r3, #19
 8007bcc:	4b63      	ldr	r3, [pc, #396]	; (8007d5c <USB_HC_StartXfer+0x280>)
 8007bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7a9b      	ldrb	r3, [r3, #10]
 8007bd6:	075b      	lsls	r3, r3, #29
 8007bd8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bdc:	69f9      	ldr	r1, [r7, #28]
 8007bde:	0148      	lsls	r0, r1, #5
 8007be0:	6a39      	ldr	r1, [r7, #32]
 8007be2:	4401      	add	r1, r0
 8007be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68d9      	ldr	r1, [r3, #12]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	460a      	mov	r2, r1
 8007c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	7e7b      	ldrb	r3, [r7, #25]
 8007c4e:	075b      	lsls	r3, r3, #29
 8007c50:	69f9      	ldr	r1, [r7, #28]
 8007c52:	0148      	lsls	r0, r1, #5
 8007c54:	6a39      	ldr	r1, [r7, #32]
 8007c56:	4401      	add	r1, r0
 8007c58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	78db      	ldrb	r3, [r3, #3]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	e003      	b.n	8007c92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e04e      	b.n	8007d54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d149      	bne.n	8007d52 <USB_HC_StartXfer+0x276>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d045      	beq.n	8007d52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d830      	bhi.n	8007d30 <USB_HC_StartXfer+0x254>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USB_HC_StartXfer+0x1f8>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007ce5 	.word	0x08007ce5
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007ce5 	.word	0x08007ce5
 8007ce0:	08007d09 	.word	0x08007d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cee:	8afa      	ldrh	r2, [r7, #22]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d91c      	bls.n	8007d34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d06:	e015      	b.n	8007d34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d12:	8afa      	ldrh	r2, [r7, #22]
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d90a      	bls.n	8007d38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d2e:	e003      	b.n	8007d38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007d30:	bf00      	nop
 8007d32:	e002      	b.n	8007d3a <USB_HC_StartXfer+0x25e>
        break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <USB_HC_StartXfer+0x25e>
        break;
 8007d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68d9      	ldr	r1, [r3, #12]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	785a      	ldrb	r2, [r3, #1]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2000      	movs	r0, #0
 8007d4a:	9000      	str	r0, [sp, #0]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fb31 	bl	80073b4 <USB_WritePacket>
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	1ff80000 	.word	0x1ff80000

08007d60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	b29b      	uxth	r3, r3
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b089      	sub	sp, #36	; 0x24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	0c9b      	lsrs	r3, r3, #18
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	0fdb      	lsrs	r3, r3, #31
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d104      	bne.n	8007ddc <USB_HC_Halt+0x5a>
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e0c8      	b.n	8007f6e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <USB_HC_Halt+0x66>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d163      	bne.n	8007eb0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f040 80ab 	bne.w	8007f6c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d133      	bne.n	8007e8a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e60:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e6e:	d81d      	bhi.n	8007eac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e86:	d0ec      	beq.n	8007e62 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e88:	e070      	b.n	8007f6c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eaa:	e05f      	b.n	8007f6c <USB_HC_Halt+0x1ea>
            break;
 8007eac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eae:	e05d      	b.n	8007f6c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ece:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d133      	bne.n	8007f48 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007efe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f2c:	d81d      	bhi.n	8007f6a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f44:	d0ec      	beq.n	8007f20 <USB_HC_Halt+0x19e>
 8007f46:	e011      	b.n	8007f6c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e000      	b.n	8007f6c <USB_HC_Halt+0x1ea>
          break;
 8007f6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3724      	adds	r7, #36	; 0x24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f90:	2301      	movs	r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	04da      	lsls	r2, r3, #19
 8007f98:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <USB_DoPing+0x74>)
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	1ff80000 	.word	0x1ff80000

08007ff4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff f911 	bl	8007230 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800800e:	2110      	movs	r1, #16
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff f96b 	bl	80072ec <USB_FlushTxFifo>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff f997 	bl	8007354 <USB_FlushRxFifo>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008030:	2300      	movs	r3, #0
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	e01f      	b.n	8008076 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008054:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800805c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	461a      	mov	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	3301      	adds	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b0f      	cmp	r3, #15
 800807a:	d9dc      	bls.n	8008036 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	e034      	b.n	80080ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008098:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b6:	461a      	mov	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080c8:	d80c      	bhi.n	80080e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e0:	d0ec      	beq.n	80080bc <USB_StopHost+0xc8>
 80080e2:	e000      	b.n	80080e6 <USB_StopHost+0xf2>
        break;
 80080e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	3301      	adds	r3, #1
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d9c7      	bls.n	8008082 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080f8:	461a      	mov	r2, r3
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008106:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7ff f880 	bl	800720e <USB_EnableGlobalInt>

  return ret;
 800810e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800811c:	4904      	ldr	r1, [pc, #16]	; (8008130 <MX_FATFS_Init+0x18>)
 800811e:	4805      	ldr	r0, [pc, #20]	; (8008134 <MX_FATFS_Init+0x1c>)
 8008120:	f003 f95e 	bl	800b3e0 <FATFS_LinkDriver>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	4b03      	ldr	r3, [pc, #12]	; (8008138 <MX_FATFS_Init+0x20>)
 800812a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800812c:	bf00      	nop
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200031d8 	.word	0x200031d8
 8008134:	0800bd4c 	.word	0x0800bd4c
 8008138:	200031d4 	.word	0x200031d4

0800813c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	4619      	mov	r1, r3
 8008166:	4808      	ldr	r0, [pc, #32]	; (8008188 <USBH_status+0x34>)
 8008168:	f000 fe32 	bl	8008dd0 <USBH_MSC_UnitIsReady>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <USBH_status+0x24>
  {
    res = RES_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	e001      	b.n	800817c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800817c:	7bfb      	ldrb	r3, [r7, #15]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	200031e8 	.word	0x200031e8

0800818c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b094      	sub	sp, #80	; 0x50
 8008190:	af02      	add	r7, sp, #8
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80081a2:	7bf9      	ldrb	r1, [r7, #15]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	4813      	ldr	r0, [pc, #76]	; (80081fc <USBH_read+0x70>)
 80081ae:	f000 fe59 	bl	8008e64 <USBH_MSC_Read>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d103      	bne.n	80081c0 <USBH_read+0x34>
  {
    res = RES_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80081be:	e017      	b.n	80081f0 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80081c0:	f107 0210 	add.w	r2, r7, #16
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4619      	mov	r1, r3
 80081c8:	480c      	ldr	r0, [pc, #48]	; (80081fc <USBH_read+0x70>)
 80081ca:	f000 fe27 	bl	8008e1c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80081ce:	7f7b      	ldrb	r3, [r7, #29]
 80081d0:	2b3a      	cmp	r3, #58	; 0x3a
 80081d2:	d005      	beq.n	80081e0 <USBH_read+0x54>
 80081d4:	2b3a      	cmp	r3, #58	; 0x3a
 80081d6:	dc07      	bgt.n	80081e8 <USBH_read+0x5c>
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d001      	beq.n	80081e0 <USBH_read+0x54>
 80081dc:	2b28      	cmp	r3, #40	; 0x28
 80081de:	d103      	bne.n	80081e8 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80081e0:	2303      	movs	r3, #3
 80081e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80081e6:	e003      	b.n	80081f0 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80081ee:	bf00      	nop
    }
  }

  return res;
 80081f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3748      	adds	r7, #72	; 0x48
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200031e8 	.word	0x200031e8

08008200 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b094      	sub	sp, #80	; 0x50
 8008204:	af02      	add	r7, sp, #8
 8008206:	60b9      	str	r1, [r7, #8]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	4603      	mov	r3, r0
 800820e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008216:	7bf9      	ldrb	r1, [r7, #15]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4817      	ldr	r0, [pc, #92]	; (8008280 <USBH_write+0x80>)
 8008222:	f000 fe88 	bl	8008f36 <USBH_MSC_Write>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d103      	bne.n	8008234 <USBH_write+0x34>
  {
    res = RES_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008232:	e01f      	b.n	8008274 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008234:	f107 0210 	add.w	r2, r7, #16
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	4619      	mov	r1, r3
 800823c:	4810      	ldr	r0, [pc, #64]	; (8008280 <USBH_write+0x80>)
 800823e:	f000 fded 	bl	8008e1c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008242:	7f7b      	ldrb	r3, [r7, #29]
 8008244:	2b3a      	cmp	r3, #58	; 0x3a
 8008246:	d00d      	beq.n	8008264 <USBH_write+0x64>
 8008248:	2b3a      	cmp	r3, #58	; 0x3a
 800824a:	dc0f      	bgt.n	800826c <USBH_write+0x6c>
 800824c:	2b28      	cmp	r3, #40	; 0x28
 800824e:	d009      	beq.n	8008264 <USBH_write+0x64>
 8008250:	2b28      	cmp	r3, #40	; 0x28
 8008252:	dc0b      	bgt.n	800826c <USBH_write+0x6c>
 8008254:	2b04      	cmp	r3, #4
 8008256:	d005      	beq.n	8008264 <USBH_write+0x64>
 8008258:	2b27      	cmp	r3, #39	; 0x27
 800825a:	d107      	bne.n	800826c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800825c:	2302      	movs	r3, #2
 800825e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008262:	e007      	b.n	8008274 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008264:	2303      	movs	r3, #3
 8008266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800826a:	e003      	b.n	8008274 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008272:	bf00      	nop
    }
  }

  return res;
 8008274:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008278:	4618      	mov	r0, r3
 800827a:	3748      	adds	r7, #72	; 0x48
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	200031e8 	.word	0x200031e8

08008284 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b090      	sub	sp, #64	; 0x40
 8008288:	af00      	add	r7, sp, #0
 800828a:	4603      	mov	r3, r0
 800828c:	603a      	str	r2, [r7, #0]
 800828e:	71fb      	strb	r3, [r7, #7]
 8008290:	460b      	mov	r3, r1
 8008292:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800829a:	79bb      	ldrb	r3, [r7, #6]
 800829c:	2b03      	cmp	r3, #3
 800829e:	d852      	bhi.n	8008346 <USBH_ioctl+0xc2>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <USBH_ioctl+0x24>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082c1 	.word	0x080082c1
 80082b0:	080082eb 	.word	0x080082eb
 80082b4:	08008317 	.word	0x08008317
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80082be:	e045      	b.n	800834c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80082c0:	f107 0208 	add.w	r2, r7, #8
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	4619      	mov	r1, r3
 80082c8:	4823      	ldr	r0, [pc, #140]	; (8008358 <USBH_ioctl+0xd4>)
 80082ca:	f000 fda7 	bl	8008e1c <USBH_MSC_GetLUNInfo>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80082e0:	e034      	b.n	800834c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80082e8:	e030      	b.n	800834c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80082ea:	f107 0208 	add.w	r2, r7, #8
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	4619      	mov	r1, r3
 80082f2:	4819      	ldr	r0, [pc, #100]	; (8008358 <USBH_ioctl+0xd4>)
 80082f4:	f000 fd92 	bl	8008e1c <USBH_MSC_GetLUNInfo>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d107      	bne.n	800830e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80082fe:	8a3b      	ldrh	r3, [r7, #16]
 8008300:	461a      	mov	r2, r3
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800830c:	e01e      	b.n	800834c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008314:	e01a      	b.n	800834c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008316:	f107 0208 	add.w	r2, r7, #8
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	4619      	mov	r1, r3
 800831e:	480e      	ldr	r0, [pc, #56]	; (8008358 <USBH_ioctl+0xd4>)
 8008320:	f000 fd7c 	bl	8008e1c <USBH_MSC_GetLUNInfo>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d109      	bne.n	800833e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800832a:	8a3b      	ldrh	r3, [r7, #16]
 800832c:	0a5b      	lsrs	r3, r3, #9
 800832e:	b29b      	uxth	r3, r3
 8008330:	461a      	mov	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800833c:	e006      	b.n	800834c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008344:	e002      	b.n	800834c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008346:	2304      	movs	r3, #4
 8008348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800834c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008350:	4618      	mov	r0, r3
 8008352:	3740      	adds	r7, #64	; 0x40
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	200031e8 	.word	0x200031e8

0800835c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800835c:	b590      	push	{r4, r7, lr}
 800835e:	b089      	sub	sp, #36	; 0x24
 8008360:	af04      	add	r7, sp, #16
 8008362:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800836a:	7919      	ldrb	r1, [r3, #4]
 800836c:	2350      	movs	r3, #80	; 0x50
 800836e:	2206      	movs	r2, #6
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f001 fc6b 	bl	8009c4c <USBH_FindInterface>
 8008376:	4603      	mov	r3, r0
 8008378:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800837a:	7bfb      	ldrb	r3, [r7, #15]
 800837c:	2bff      	cmp	r3, #255	; 0xff
 800837e:	d002      	beq.n	8008386 <USBH_MSC_InterfaceInit+0x2a>
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d901      	bls.n	800838a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008386:	2302      	movs	r3, #2
 8008388:	e106      	b.n	8008598 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	4619      	mov	r1, r3
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f001 fc40 	bl	8009c14 <USBH_SelectInterface>
 8008394:	4603      	mov	r3, r0
 8008396:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	e0fa      	b.n	8008598 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80083a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80083ac:	f003 fb90 	bl	800bad0 <malloc>
 80083b0:	4603      	mov	r3, r0
 80083b2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d101      	bne.n	80083c8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0e7      	b.n	8008598 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80083c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083cc:	2100      	movs	r1, #0
 80083ce:	68b8      	ldr	r0, [r7, #8]
 80083d0:	f003 fb9c 	bl	800bb0c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	211a      	movs	r1, #26
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	b25b      	sxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	da16      	bge.n	800841a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	211a      	movs	r1, #26
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	4413      	add	r3, r2
 80083f8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	211a      	movs	r1, #26
 8008408:	fb01 f303 	mul.w	r3, r1, r3
 800840c:	4413      	add	r3, r2
 800840e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008412:	881a      	ldrh	r2, [r3, #0]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	815a      	strh	r2, [r3, #10]
 8008418:	e015      	b.n	8008446 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	211a      	movs	r1, #26
 8008420:	fb01 f303 	mul.w	r3, r1, r3
 8008424:	4413      	add	r3, r2
 8008426:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800842a:	781a      	ldrb	r2, [r3, #0]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	211a      	movs	r1, #26
 8008436:	fb01 f303 	mul.w	r3, r1, r3
 800843a:	4413      	add	r3, r2
 800843c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008440:	881a      	ldrh	r2, [r3, #0]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	211a      	movs	r1, #26
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	4413      	add	r3, r2
 8008452:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b25b      	sxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	da16      	bge.n	800848c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	211a      	movs	r1, #26
 8008464:	fb01 f303 	mul.w	r3, r1, r3
 8008468:	4413      	add	r3, r2
 800846a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800846e:	781a      	ldrb	r2, [r3, #0]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	211a      	movs	r1, #26
 800847a:	fb01 f303 	mul.w	r3, r1, r3
 800847e:	4413      	add	r3, r2
 8008480:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008484:	881a      	ldrh	r2, [r3, #0]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	815a      	strh	r2, [r3, #10]
 800848a:	e015      	b.n	80084b8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	211a      	movs	r1, #26
 8008492:	fb01 f303 	mul.w	r3, r1, r3
 8008496:	4413      	add	r3, r2
 8008498:	f203 3356 	addw	r3, r3, #854	; 0x356
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	211a      	movs	r1, #26
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80084b2:	881a      	ldrh	r2, [r3, #0]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2200      	movs	r2, #0
 80084c2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2200      	movs	r2, #0
 80084c8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	799b      	ldrb	r3, [r3, #6]
 80084ce:	4619      	mov	r1, r3
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f002 fed6 	bl	800b282 <USBH_AllocPipe>
 80084d6:	4603      	mov	r3, r0
 80084d8:	461a      	mov	r2, r3
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	79db      	ldrb	r3, [r3, #7]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f002 fecc 	bl	800b282 <USBH_AllocPipe>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fdc4 	bl	8009080 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	799b      	ldrb	r3, [r3, #6]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01e      	beq.n	800853e <USBH_MSC_InterfaceInit+0x1e2>
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	891b      	ldrh	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01a      	beq.n	800853e <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	7959      	ldrb	r1, [r3, #5]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	7998      	ldrb	r0, [r3, #6]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	8912      	ldrh	r2, [r2, #8]
 8008520:	9202      	str	r2, [sp, #8]
 8008522:	2202      	movs	r2, #2
 8008524:	9201      	str	r2, [sp, #4]
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	4623      	mov	r3, r4
 800852a:	4602      	mov	r2, r0
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 fe79 	bl	800b224 <USBH_OpenPipe>
 8008532:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	79db      	ldrb	r3, [r3, #7]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d02c      	beq.n	8008596 <USBH_MSC_InterfaceInit+0x23a>
 800853c:	e001      	b.n	8008542 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800853e:	2303      	movs	r3, #3
 8008540:	e02a      	b.n	8008598 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	895b      	ldrh	r3, [r3, #10]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d025      	beq.n	8008596 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	7919      	ldrb	r1, [r3, #4]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	79d8      	ldrb	r0, [r3, #7]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	8952      	ldrh	r2, [r2, #10]
 8008562:	9202      	str	r2, [sp, #8]
 8008564:	2202      	movs	r2, #2
 8008566:	9201      	str	r2, [sp, #4]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	4623      	mov	r3, r4
 800856c:	4602      	mov	r2, r0
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f002 fe58 	bl	800b224 <USBH_OpenPipe>
 8008574:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	791b      	ldrb	r3, [r3, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f003 f9c8 	bl	800b914 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	795b      	ldrb	r3, [r3, #5]
 8008588:	2200      	movs	r2, #0
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f003 f9c1 	bl	800b914 <USBH_LL_SetToggle>

  return USBH_OK;
 8008592:	2300      	movs	r3, #0
 8008594:	e000      	b.n	8008598 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008596:	2303      	movs	r3, #3
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	bd90      	pop	{r4, r7, pc}

080085a0 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	795b      	ldrb	r3, [r3, #5]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00e      	beq.n	80085d8 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	795b      	ldrb	r3, [r3, #5]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f002 fe4e 	bl	800b262 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	795b      	ldrb	r3, [r3, #5]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f002 fe79 	bl	800b2c4 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	791b      	ldrb	r3, [r3, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00e      	beq.n	80085fe <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	791b      	ldrb	r3, [r3, #4]
 80085e4:	4619      	mov	r1, r3
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f002 fe3b 	bl	800b262 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	791b      	ldrb	r3, [r3, #4]
 80085f0:	4619      	mov	r1, r3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fe66 	bl	800b2c4 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	4618      	mov	r0, r3
 8008614:	f003 fa64 	bl	800bae0 <free>
    phost->pActiveClass->pData = 0U;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800861e:	2200      	movs	r2, #0
 8008620:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800863e:	2301      	movs	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	7b9b      	ldrb	r3, [r3, #14]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d041      	beq.n	80086ce <USBH_MSC_ClassRequest+0xa2>
 800864a:	2b03      	cmp	r3, #3
 800864c:	dc4b      	bgt.n	80086e6 <USBH_MSC_ClassRequest+0xba>
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <USBH_MSC_ClassRequest+0x2a>
 8008652:	2b02      	cmp	r3, #2
 8008654:	d147      	bne.n	80086e6 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fcf1 	bl	8009042 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d104      	bne.n	8008674 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d137      	bne.n	80086ea <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d804      	bhi.n	800868c <USBH_MSC_ClassRequest+0x60>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	3301      	adds	r3, #1
 8008688:	b2da      	uxtb	r2, r3
 800868a:	e000      	b.n	800868e <USBH_MSC_ClassRequest+0x62>
 800868c:	2202      	movs	r2, #2
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008692:	2300      	movs	r3, #0
 8008694:	73bb      	strb	r3, [r7, #14]
 8008696:	e014      	b.n	80086c2 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	2134      	movs	r1, #52	; 0x34
 800869e:	fb01 f303 	mul.w	r3, r1, r3
 80086a2:	4413      	add	r3, r2
 80086a4:	3392      	adds	r3, #146	; 0x92
 80086a6:	2202      	movs	r2, #2
 80086a8:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	2134      	movs	r1, #52	; 0x34
 80086b0:	fb01 f303 	mul.w	r3, r1, r3
 80086b4:	4413      	add	r3, r2
 80086b6:	33c1      	adds	r3, #193	; 0xc1
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	3301      	adds	r3, #1
 80086c0:	73bb      	strb	r3, [r7, #14]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	7bba      	ldrb	r2, [r7, #14]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d3e5      	bcc.n	8008698 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80086cc:	e00d      	b.n	80086ea <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80086ce:	2100      	movs	r1, #0
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f002 f888 	bl	800a7e6 <USBH_ClrFeature>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d108      	bne.n	80086ee <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	7bda      	ldrb	r2, [r3, #15]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	739a      	strb	r2, [r3, #14]
      }
      break;
 80086e4:	e003      	b.n	80086ee <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80086e6:	bf00      	nop
 80086e8:	e002      	b.n	80086f0 <USBH_MSC_ClassRequest+0xc4>
      break;
 80086ea:	bf00      	nop
 80086ec:	e000      	b.n	80086f0 <USBH_MSC_ClassRequest+0xc4>
      break;
 80086ee:	bf00      	nop
  }

  return status;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800870e:	2301      	movs	r3, #1
 8008710:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008712:	2301      	movs	r3, #1
 8008714:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008716:	2301      	movs	r3, #1
 8008718:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	7b1b      	ldrb	r3, [r3, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <USBH_MSC_Process+0x2e>
 8008722:	2b01      	cmp	r3, #1
 8008724:	f000 8271 	beq.w	8008c0a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008728:	e272      	b.n	8008c10 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	429a      	cmp	r2, r3
 8008738:	f080 824f 	bcs.w	8008bda <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008742:	4619      	mov	r1, r3
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	2334      	movs	r3, #52	; 0x34
 8008748:	fb01 f303 	mul.w	r3, r1, r3
 800874c:	4413      	add	r3, r2
 800874e:	3391      	adds	r3, #145	; 0x91
 8008750:	2201      	movs	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800875a:	4619      	mov	r1, r3
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	2334      	movs	r3, #52	; 0x34
 8008760:	fb01 f303 	mul.w	r3, r1, r3
 8008764:	4413      	add	r3, r2
 8008766:	3390      	adds	r3, #144	; 0x90
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b08      	cmp	r3, #8
 800876c:	f200 8243 	bhi.w	8008bf6 <USBH_MSC_Process+0x4fa>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <USBH_MSC_Process+0x7c>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	0800879d 	.word	0x0800879d
 800877c:	08008bf7 	.word	0x08008bf7
 8008780:	08008865 	.word	0x08008865
 8008784:	080089e9 	.word	0x080089e9
 8008788:	080087c3 	.word	0x080087c3
 800878c:	08008ab5 	.word	0x08008ab5
 8008790:	08008bf7 	.word	0x08008bf7
 8008794:	08008bf7 	.word	0x08008bf7
 8008798:	08008bc9 	.word	0x08008bc9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087a2:	4619      	mov	r1, r3
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	2334      	movs	r3, #52	; 0x34
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	3390      	adds	r3, #144	; 0x90
 80087b0:	2204      	movs	r2, #4
 80087b2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80087c0:	e222      	b.n	8008c08 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087c8:	b2d9      	uxtb	r1, r3
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087d0:	461a      	mov	r2, r3
 80087d2:	2334      	movs	r3, #52	; 0x34
 80087d4:	fb02 f303 	mul.w	r3, r2, r3
 80087d8:	3398      	adds	r3, #152	; 0x98
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4413      	add	r3, r2
 80087de:	3307      	adds	r3, #7
 80087e0:	461a      	mov	r2, r3
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 ff6a 	bl	80096bc <USBH_MSC_SCSI_Inquiry>
 80087e8:	4603      	mov	r3, r0
 80087ea:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80087f8:	4619      	mov	r1, r3
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	2334      	movs	r3, #52	; 0x34
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	3390      	adds	r3, #144	; 0x90
 8008806:	2202      	movs	r2, #2
 8008808:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d10c      	bne.n	800882a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008816:	4619      	mov	r1, r3
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	2334      	movs	r3, #52	; 0x34
 800881c:	fb01 f303 	mul.w	r3, r1, r3
 8008820:	4413      	add	r3, r2
 8008822:	3390      	adds	r3, #144	; 0x90
 8008824:	2205      	movs	r2, #5
 8008826:	701a      	strb	r2, [r3, #0]
            break;
 8008828:	e1e7      	b.n	8008bfa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b04      	cmp	r3, #4
 800882e:	f040 81e4 	bne.w	8008bfa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008838:	4619      	mov	r1, r3
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	2334      	movs	r3, #52	; 0x34
 800883e:	fb01 f303 	mul.w	r3, r1, r3
 8008842:	4413      	add	r3, r2
 8008844:	3390      	adds	r3, #144	; 0x90
 8008846:	2201      	movs	r2, #1
 8008848:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008850:	4619      	mov	r1, r3
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	2334      	movs	r3, #52	; 0x34
 8008856:	fb01 f303 	mul.w	r3, r1, r3
 800885a:	4413      	add	r3, r2
 800885c:	3391      	adds	r3, #145	; 0x91
 800885e:	2202      	movs	r2, #2
 8008860:	701a      	strb	r2, [r3, #0]
            break;
 8008862:	e1ca      	b.n	8008bfa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800886a:	b2db      	uxtb	r3, r3
 800886c:	4619      	mov	r1, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fe66 	bl	8009540 <USBH_MSC_SCSI_TestUnitReady>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d149      	bne.n	8008912 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008884:	4619      	mov	r1, r3
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	2334      	movs	r3, #52	; 0x34
 800888a:	fb01 f303 	mul.w	r3, r1, r3
 800888e:	4413      	add	r3, r2
 8008890:	3392      	adds	r3, #146	; 0x92
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00c      	beq.n	80088b2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800889e:	4619      	mov	r1, r3
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	2334      	movs	r3, #52	; 0x34
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	33c1      	adds	r3, #193	; 0xc1
 80088ac:	2201      	movs	r2, #1
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e00b      	b.n	80088ca <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088b8:	4619      	mov	r1, r3
 80088ba:	693a      	ldr	r2, [r7, #16]
 80088bc:	2334      	movs	r3, #52	; 0x34
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	4413      	add	r3, r2
 80088c4:	33c1      	adds	r3, #193	; 0xc1
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088d0:	4619      	mov	r1, r3
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	2334      	movs	r3, #52	; 0x34
 80088d6:	fb01 f303 	mul.w	r3, r1, r3
 80088da:	4413      	add	r3, r2
 80088dc:	3390      	adds	r3, #144	; 0x90
 80088de:	2203      	movs	r2, #3
 80088e0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088e8:	4619      	mov	r1, r3
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	2334      	movs	r3, #52	; 0x34
 80088ee:	fb01 f303 	mul.w	r3, r1, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	3391      	adds	r3, #145	; 0x91
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008900:	4619      	mov	r1, r3
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	2334      	movs	r3, #52	; 0x34
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	4413      	add	r3, r2
 800890c:	3392      	adds	r3, #146	; 0x92
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d14a      	bne.n	80089ae <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800891e:	4619      	mov	r1, r3
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	2334      	movs	r3, #52	; 0x34
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	4413      	add	r3, r2
 800892a:	3392      	adds	r3, #146	; 0x92
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d00c      	beq.n	800894c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008938:	4619      	mov	r1, r3
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	2334      	movs	r3, #52	; 0x34
 800893e:	fb01 f303 	mul.w	r3, r1, r3
 8008942:	4413      	add	r3, r2
 8008944:	33c1      	adds	r3, #193	; 0xc1
 8008946:	2201      	movs	r2, #1
 8008948:	701a      	strb	r2, [r3, #0]
 800894a:	e00b      	b.n	8008964 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008952:	4619      	mov	r1, r3
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	2334      	movs	r3, #52	; 0x34
 8008958:	fb01 f303 	mul.w	r3, r1, r3
 800895c:	4413      	add	r3, r2
 800895e:	33c1      	adds	r3, #193	; 0xc1
 8008960:	2200      	movs	r2, #0
 8008962:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800896a:	4619      	mov	r1, r3
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	2334      	movs	r3, #52	; 0x34
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	4413      	add	r3, r2
 8008976:	3390      	adds	r3, #144	; 0x90
 8008978:	2205      	movs	r2, #5
 800897a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008982:	4619      	mov	r1, r3
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	2334      	movs	r3, #52	; 0x34
 8008988:	fb01 f303 	mul.w	r3, r1, r3
 800898c:	4413      	add	r3, r2
 800898e:	3391      	adds	r3, #145	; 0x91
 8008990:	2201      	movs	r2, #1
 8008992:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800899a:	4619      	mov	r1, r3
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	2334      	movs	r3, #52	; 0x34
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	4413      	add	r3, r2
 80089a6:	3392      	adds	r3, #146	; 0x92
 80089a8:	2202      	movs	r2, #2
 80089aa:	701a      	strb	r2, [r3, #0]
            break;
 80089ac:	e127      	b.n	8008bfe <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	f040 8124 	bne.w	8008bfe <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089bc:	4619      	mov	r1, r3
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	2334      	movs	r3, #52	; 0x34
 80089c2:	fb01 f303 	mul.w	r3, r1, r3
 80089c6:	4413      	add	r3, r2
 80089c8:	3390      	adds	r3, #144	; 0x90
 80089ca:	2201      	movs	r2, #1
 80089cc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089d4:	4619      	mov	r1, r3
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	2334      	movs	r3, #52	; 0x34
 80089da:	fb01 f303 	mul.w	r3, r1, r3
 80089de:	4413      	add	r3, r2
 80089e0:	3391      	adds	r3, #145	; 0x91
 80089e2:	2202      	movs	r2, #2
 80089e4:	701a      	strb	r2, [r3, #0]
            break;
 80089e6:	e10a      	b.n	8008bfe <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ee:	b2d9      	uxtb	r1, r3
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089f6:	461a      	mov	r2, r3
 80089f8:	2334      	movs	r3, #52	; 0x34
 80089fa:	fb02 f303 	mul.w	r3, r2, r3
 80089fe:	3390      	adds	r3, #144	; 0x90
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	461a      	mov	r2, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fddc 	bl	80095c6 <USBH_MSC_SCSI_ReadCapacity>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d120      	bne.n	8008a5a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a1e:	4619      	mov	r1, r3
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	2334      	movs	r3, #52	; 0x34
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	4413      	add	r3, r2
 8008a2a:	3390      	adds	r3, #144	; 0x90
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a36:	4619      	mov	r1, r3
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	2334      	movs	r3, #52	; 0x34
 8008a3c:	fb01 f303 	mul.w	r3, r1, r3
 8008a40:	4413      	add	r3, r2
 8008a42:	3391      	adds	r3, #145	; 0x91
 8008a44:	2200      	movs	r2, #0
 8008a46:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a4e:	3301      	adds	r3, #1
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008a58:	e0d3      	b.n	8008c02 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d10c      	bne.n	8008a7a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a66:	4619      	mov	r1, r3
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	2334      	movs	r3, #52	; 0x34
 8008a6c:	fb01 f303 	mul.w	r3, r1, r3
 8008a70:	4413      	add	r3, r2
 8008a72:	3390      	adds	r3, #144	; 0x90
 8008a74:	2205      	movs	r2, #5
 8008a76:	701a      	strb	r2, [r3, #0]
            break;
 8008a78:	e0c3      	b.n	8008c02 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b04      	cmp	r3, #4
 8008a7e:	f040 80c0 	bne.w	8008c02 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a88:	4619      	mov	r1, r3
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	2334      	movs	r3, #52	; 0x34
 8008a8e:	fb01 f303 	mul.w	r3, r1, r3
 8008a92:	4413      	add	r3, r2
 8008a94:	3390      	adds	r3, #144	; 0x90
 8008a96:	2201      	movs	r2, #1
 8008a98:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	2334      	movs	r3, #52	; 0x34
 8008aa6:	fb01 f303 	mul.w	r3, r1, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	3391      	adds	r3, #145	; 0x91
 8008aae:	2202      	movs	r2, #2
 8008ab0:	701a      	strb	r2, [r3, #0]
            break;
 8008ab2:	e0a6      	b.n	8008c02 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aba:	b2d9      	uxtb	r1, r3
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	2334      	movs	r3, #52	; 0x34
 8008ac6:	fb02 f303 	mul.w	r3, r2, r3
 8008aca:	3398      	adds	r3, #152	; 0x98
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fe96 	bl	8009806 <USBH_MSC_SCSI_RequestSense>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d145      	bne.n	8008b70 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aea:	4619      	mov	r1, r3
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	2334      	movs	r3, #52	; 0x34
 8008af0:	fb01 f303 	mul.w	r3, r1, r3
 8008af4:	4413      	add	r3, r2
 8008af6:	339c      	adds	r3, #156	; 0x9c
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b06      	cmp	r3, #6
 8008afc:	d00c      	beq.n	8008b18 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b04:	4619      	mov	r1, r3
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	2334      	movs	r3, #52	; 0x34
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	339c      	adds	r3, #156	; 0x9c
 8008b12:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d117      	bne.n	8008b48 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	f242 720f 	movw	r2, #9999	; 0x270f
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d80c      	bhi.n	8008b48 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b34:	4619      	mov	r1, r3
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	2334      	movs	r3, #52	; 0x34
 8008b3a:	fb01 f303 	mul.w	r3, r1, r3
 8008b3e:	4413      	add	r3, r2
 8008b40:	3390      	adds	r3, #144	; 0x90
 8008b42:	2202      	movs	r2, #2
 8008b44:	701a      	strb	r2, [r3, #0]
                  break;
 8008b46:	e05f      	b.n	8008c08 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b4e:	4619      	mov	r1, r3
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	2334      	movs	r3, #52	; 0x34
 8008b54:	fb01 f303 	mul.w	r3, r1, r3
 8008b58:	4413      	add	r3, r2
 8008b5a:	3390      	adds	r3, #144	; 0x90
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b66:	3301      	adds	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d10c      	bne.n	8008b90 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	2334      	movs	r3, #52	; 0x34
 8008b82:	fb01 f303 	mul.w	r3, r1, r3
 8008b86:	4413      	add	r3, r2
 8008b88:	3390      	adds	r3, #144	; 0x90
 8008b8a:	2208      	movs	r2, #8
 8008b8c:	701a      	strb	r2, [r3, #0]
            break;
 8008b8e:	e03a      	b.n	8008c06 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d137      	bne.n	8008c06 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	2334      	movs	r3, #52	; 0x34
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3390      	adds	r3, #144	; 0x90
 8008baa:	2201      	movs	r2, #1
 8008bac:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	2334      	movs	r3, #52	; 0x34
 8008bba:	fb01 f303 	mul.w	r3, r1, r3
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3391      	adds	r3, #145	; 0x91
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	701a      	strb	r2, [r3, #0]
            break;
 8008bc6:	e01e      	b.n	8008c06 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bce:	3301      	adds	r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008bd8:	e016      	b.n	8008c08 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2201      	movs	r2, #1
 8008be6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bee:	2102      	movs	r1, #2
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
      break;
 8008bf4:	e00c      	b.n	8008c10 <USBH_MSC_Process+0x514>
            break;
 8008bf6:	bf00      	nop
 8008bf8:	e00a      	b.n	8008c10 <USBH_MSC_Process+0x514>
            break;
 8008bfa:	bf00      	nop
 8008bfc:	e008      	b.n	8008c10 <USBH_MSC_Process+0x514>
            break;
 8008bfe:	bf00      	nop
 8008c00:	e006      	b.n	8008c10 <USBH_MSC_Process+0x514>
            break;
 8008c02:	bf00      	nop
 8008c04:	e004      	b.n	8008c10 <USBH_MSC_Process+0x514>
            break;
 8008c06:	bf00      	nop
      break;
 8008c08:	e002      	b.n	8008c10 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0e:	bf00      	nop
  }
  return error;
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop

08008c1c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b088      	sub	sp, #32
 8008c36:	af02      	add	r7, sp, #8
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	2134      	movs	r1, #52	; 0x34
 8008c56:	fb01 f303 	mul.w	r3, r1, r3
 8008c5a:	4413      	add	r3, r2
 8008c5c:	3390      	adds	r3, #144	; 0x90
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b07      	cmp	r3, #7
 8008c62:	d03c      	beq.n	8008cde <USBH_MSC_RdWrProcess+0xac>
 8008c64:	2b07      	cmp	r3, #7
 8008c66:	f300 80a7 	bgt.w	8008db8 <USBH_MSC_RdWrProcess+0x186>
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	d06c      	beq.n	8008d48 <USBH_MSC_RdWrProcess+0x116>
 8008c6e:	2b06      	cmp	r3, #6
 8008c70:	f040 80a2 	bne.w	8008db8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008c74:	78f9      	ldrb	r1, [r7, #3]
 8008c76:	2300      	movs	r3, #0
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fea5 	bl	80099ce <USBH_MSC_SCSI_Read>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10b      	bne.n	8008ca6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	2134      	movs	r1, #52	; 0x34
 8008c94:	fb01 f303 	mul.w	r3, r1, r3
 8008c98:	4413      	add	r3, r2
 8008c9a:	3390      	adds	r3, #144	; 0x90
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ca4:	e08a      	b.n	8008dbc <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d109      	bne.n	8008cc0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	2134      	movs	r1, #52	; 0x34
 8008cb2:	fb01 f303 	mul.w	r3, r1, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3390      	adds	r3, #144	; 0x90
 8008cba:	2205      	movs	r2, #5
 8008cbc:	701a      	strb	r2, [r3, #0]
      break;
 8008cbe:	e07d      	b.n	8008dbc <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d17a      	bne.n	8008dbc <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	2134      	movs	r1, #52	; 0x34
 8008ccc:	fb01 f303 	mul.w	r3, r1, r3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	3390      	adds	r3, #144	; 0x90
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	75fb      	strb	r3, [r7, #23]
      break;
 8008cdc:	e06e      	b.n	8008dbc <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008cde:	78f9      	ldrb	r1, [r7, #3]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fe05 	bl	80098f8 <USBH_MSC_SCSI_Write>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10b      	bne.n	8008d10 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008cf8:	78fb      	ldrb	r3, [r7, #3]
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	2134      	movs	r1, #52	; 0x34
 8008cfe:	fb01 f303 	mul.w	r3, r1, r3
 8008d02:	4413      	add	r3, r2
 8008d04:	3390      	adds	r3, #144	; 0x90
 8008d06:	2201      	movs	r2, #1
 8008d08:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d0e:	e057      	b.n	8008dc0 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d109      	bne.n	8008d2a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	2134      	movs	r1, #52	; 0x34
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	3390      	adds	r3, #144	; 0x90
 8008d24:	2205      	movs	r2, #5
 8008d26:	701a      	strb	r2, [r3, #0]
      break;
 8008d28:	e04a      	b.n	8008dc0 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d147      	bne.n	8008dc0 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	2134      	movs	r1, #52	; 0x34
 8008d36:	fb01 f303 	mul.w	r3, r1, r3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3390      	adds	r3, #144	; 0x90
 8008d3e:	2208      	movs	r2, #8
 8008d40:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008d42:	2302      	movs	r3, #2
 8008d44:	75fb      	strb	r3, [r7, #23]
      break;
 8008d46:	e03b      	b.n	8008dc0 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	2234      	movs	r2, #52	; 0x34
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	3398      	adds	r3, #152	; 0x98
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4413      	add	r3, r2
 8008d56:	1d1a      	adds	r2, r3, #4
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fd52 	bl	8009806 <USBH_MSC_SCSI_RequestSense>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d113      	bne.n	8008d94 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	2134      	movs	r1, #52	; 0x34
 8008d72:	fb01 f303 	mul.w	r3, r1, r3
 8008d76:	4413      	add	r3, r2
 8008d78:	3390      	adds	r3, #144	; 0x90
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	2134      	movs	r1, #52	; 0x34
 8008d84:	fb01 f303 	mul.w	r3, r1, r3
 8008d88:	4413      	add	r3, r2
 8008d8a:	3391      	adds	r3, #145	; 0x91
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008d90:	2302      	movs	r3, #2
 8008d92:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d014      	beq.n	8008dc4 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d111      	bne.n	8008dc4 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	2134      	movs	r1, #52	; 0x34
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	3390      	adds	r3, #144	; 0x90
 8008dae:	2208      	movs	r2, #8
 8008db0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008db2:	2302      	movs	r3, #2
 8008db4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008db6:	e005      	b.n	8008dc4 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8008db8:	bf00      	nop
 8008dba:	e004      	b.n	8008dc6 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e002      	b.n	8008dc6 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008dc0:	bf00      	nop
 8008dc2:	e000      	b.n	8008dc6 <USBH_MSC_RdWrProcess+0x194>
      break;
 8008dc4:	bf00      	nop

  }
  return error;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	460b      	mov	r3, r1
 8008dda:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b0b      	cmp	r3, #11
 8008dee:	d10c      	bne.n	8008e0a <USBH_MSC_UnitIsReady+0x3a>
 8008df0:	78fb      	ldrb	r3, [r7, #3]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	2134      	movs	r1, #52	; 0x34
 8008df6:	fb01 f303 	mul.w	r3, r1, r3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	3391      	adds	r3, #145	; 0x91
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008e04:	2301      	movs	r3, #1
 8008e06:	73fb      	strb	r3, [r7, #15]
 8008e08:	e001      	b.n	8008e0e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	460b      	mov	r3, r1
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e30:	69db      	ldr	r3, [r3, #28]
 8008e32:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b0b      	cmp	r3, #11
 8008e3c:	d10d      	bne.n	8008e5a <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	2234      	movs	r2, #52	; 0x34
 8008e42:	fb02 f303 	mul.w	r3, r2, r3
 8008e46:	3390      	adds	r3, #144	; 0x90
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	2234      	movs	r2, #52	; 0x34
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f002 fe4d 	bl	800baf0 <memcpy>
    return USBH_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	e000      	b.n	8008e5c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008e5a:	2302      	movs	r3, #2
  }
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3718      	adds	r7, #24
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	607a      	str	r2, [r7, #4]
 8008e6e:	603b      	str	r3, [r7, #0]
 8008e70:	460b      	mov	r3, r1
 8008e72:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00e      	beq.n	8008ea8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008e90:	2b0b      	cmp	r3, #11
 8008e92:	d109      	bne.n	8008ea8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008e94:	7afb      	ldrb	r3, [r7, #11]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	2134      	movs	r1, #52	; 0x34
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	3390      	adds	r3, #144	; 0x90
 8008ea2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d001      	beq.n	8008eac <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e040      	b.n	8008f2e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2206      	movs	r2, #6
 8008eb0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	2134      	movs	r1, #52	; 0x34
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	3390      	adds	r3, #144	; 0x90
 8008ec0:	2206      	movs	r2, #6
 8008ec2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008ec4:	7afb      	ldrb	r3, [r7, #11]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008ece:	7af9      	ldrb	r1, [r7, #11]
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fd78 	bl	80099ce <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ee4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008ee6:	e016      	b.n	8008f16 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad2      	subs	r2, r2, r3
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f242 7110 	movw	r1, #10000	; 0x2710
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d805      	bhi.n	8008f0c <USBH_MSC_Read+0xa8>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d104      	bne.n	8008f16 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008f12:	2302      	movs	r3, #2
 8008f14:	e00b      	b.n	8008f2e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008f16:	7afb      	ldrb	r3, [r7, #11]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f7ff fe89 	bl	8008c32 <USBH_MSC_RdWrProcess>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d0e0      	beq.n	8008ee8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b088      	sub	sp, #32
 8008f3a:	af02      	add	r7, sp, #8
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	460b      	mov	r3, r1
 8008f44:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00e      	beq.n	8008f7a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008f62:	2b0b      	cmp	r3, #11
 8008f64:	d109      	bne.n	8008f7a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008f66:	7afb      	ldrb	r3, [r7, #11]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	2134      	movs	r1, #52	; 0x34
 8008f6c:	fb01 f303 	mul.w	r3, r1, r3
 8008f70:	4413      	add	r3, r2
 8008f72:	3390      	adds	r3, #144	; 0x90
 8008f74:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d001      	beq.n	8008f7e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e040      	b.n	8009000 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2207      	movs	r2, #7
 8008f82:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8008f84:	7afb      	ldrb	r3, [r7, #11]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	2134      	movs	r1, #52	; 0x34
 8008f8a:	fb01 f303 	mul.w	r3, r1, r3
 8008f8e:	4413      	add	r3, r2
 8008f90:	3390      	adds	r3, #144	; 0x90
 8008f92:	2207      	movs	r2, #7
 8008f94:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8008f96:	7afb      	ldrb	r3, [r7, #11]
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008fa0:	7af9      	ldrb	r1, [r7, #11]
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 fca4 	bl	80098f8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fb6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008fb8:	e016      	b.n	8008fe8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	1ad2      	subs	r2, r2, r3
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	f242 7110 	movw	r1, #10000	; 0x2710
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d805      	bhi.n	8008fde <USBH_MSC_Write+0xa8>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d104      	bne.n	8008fe8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e00b      	b.n	8009000 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	4619      	mov	r1, r3
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f7ff fe20 	bl	8008c32 <USBH_MSC_RdWrProcess>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d0e0      	beq.n	8008fba <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2221      	movs	r2, #33	; 0x21
 8009014:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	22ff      	movs	r2, #255	; 0xff
 800901a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fea4 	bl	800ad80 <USBH_CtlReq>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	22a1      	movs	r2, #161	; 0xa1
 8009050:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	22fe      	movs	r2, #254	; 0xfe
 8009056:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800906a:	2201      	movs	r2, #1
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fe86 	bl	800ad80 <USBH_CtlReq>
 8009074:	4603      	mov	r3, r0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800908e:	69db      	ldr	r3, [r3, #28]
 8009090:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4a09      	ldr	r2, [pc, #36]	; (80090bc <USBH_MSC_BOT_Init+0x3c>)
 8009096:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <USBH_MSC_BOT_Init+0x40>)
 800909c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	43425355 	.word	0x43425355
 80090c0:	20304050 	.word	0x20304050

080090c4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80090d0:	2301      	movs	r3, #1
 80090d2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80090d4:	2301      	movs	r3, #1
 80090d6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80090d8:	2301      	movs	r3, #1
 80090da:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090dc:	2300      	movs	r3, #0
 80090de:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090f4:	3b01      	subs	r3, #1
 80090f6:	2b0a      	cmp	r3, #10
 80090f8:	f200 819e 	bhi.w	8009438 <USBH_MSC_BOT_Process+0x374>
 80090fc:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <USBH_MSC_BOT_Process+0x40>)
 80090fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009102:	bf00      	nop
 8009104:	08009131 	.word	0x08009131
 8009108:	08009159 	.word	0x08009159
 800910c:	080091c3 	.word	0x080091c3
 8009110:	080091e1 	.word	0x080091e1
 8009114:	08009265 	.word	0x08009265
 8009118:	08009287 	.word	0x08009287
 800911c:	0800931f 	.word	0x0800931f
 8009120:	0800933b 	.word	0x0800933b
 8009124:	0800938d 	.word	0x0800938d
 8009128:	080093bd 	.word	0x080093bd
 800912c:	0800941f 	.word	0x0800941f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	795b      	ldrb	r3, [r3, #5]
 800914a:	2201      	movs	r2, #1
 800914c:	9200      	str	r2, [sp, #0]
 800914e:	221f      	movs	r2, #31
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f002 f824 	bl	800b19e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009156:	e17e      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	795b      	ldrb	r3, [r3, #5]
 800915c:	4619      	mov	r1, r3
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 fbae 	bl	800b8c0 <USBH_LL_GetURBState>
 8009164:	4603      	mov	r3, r0
 8009166:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009168:	7d3b      	ldrb	r3, [r7, #20]
 800916a:	2b01      	cmp	r3, #1
 800916c:	d118      	bne.n	80091a0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00f      	beq.n	8009196 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800917c:	b25b      	sxtb	r3, r3
 800917e:	2b00      	cmp	r3, #0
 8009180:	da04      	bge.n	800918c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2203      	movs	r2, #3
 8009186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800918a:	e157      	b.n	800943c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2205      	movs	r2, #5
 8009190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009194:	e152      	b.n	800943c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	2207      	movs	r2, #7
 800919a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800919e:	e14d      	b.n	800943c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091a0:	7d3b      	ldrb	r3, [r7, #20]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d104      	bne.n	80091b0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80091ae:	e145      	b.n	800943c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80091b0:	7d3b      	ldrb	r3, [r7, #20]
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	f040 8142 	bne.w	800943c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	220a      	movs	r2, #10
 80091bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80091c0:	e13c      	b.n	800943c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	895a      	ldrh	r2, [r3, #10]
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	791b      	ldrb	r3, [r3, #4]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f002 f809 	bl	800b1e8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2204      	movs	r2, #4
 80091da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80091de:	e13a      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	791b      	ldrb	r3, [r3, #4]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f002 fb6a 	bl	800b8c0 <USBH_LL_GetURBState>
 80091ec:	4603      	mov	r3, r0
 80091ee:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80091f0:	7d3b      	ldrb	r3, [r7, #20]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d12d      	bne.n	8009252 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	8952      	ldrh	r2, [r2, #10]
 80091fe:	4293      	cmp	r3, r2
 8009200:	d910      	bls.n	8009224 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	8952      	ldrh	r2, [r2, #10]
 800920c:	441a      	add	r2, r3
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	8952      	ldrh	r2, [r2, #10]
 800921c:	1a9a      	subs	r2, r3, r2
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	65da      	str	r2, [r3, #92]	; 0x5c
 8009222:	e002      	b.n	800922a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	2200      	movs	r2, #0
 8009228:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00a      	beq.n	8009248 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	895a      	ldrh	r2, [r3, #10]
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	791b      	ldrb	r3, [r3, #4]
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 ffd1 	bl	800b1e8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009246:	e0fb      	b.n	8009440 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2207      	movs	r2, #7
 800924c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009250:	e0f6      	b.n	8009440 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8009252:	7d3b      	ldrb	r3, [r7, #20]
 8009254:	2b05      	cmp	r3, #5
 8009256:	f040 80f3 	bne.w	8009440 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	2209      	movs	r2, #9
 800925e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009262:	e0ed      	b.n	8009440 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	891a      	ldrh	r2, [r3, #8]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	795b      	ldrb	r3, [r3, #5]
 8009272:	2001      	movs	r0, #1
 8009274:	9000      	str	r0, [sp, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f001 ff91 	bl	800b19e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	2206      	movs	r2, #6
 8009280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009284:	e0e7      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	795b      	ldrb	r3, [r3, #5]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f002 fb17 	bl	800b8c0 <USBH_LL_GetURBState>
 8009292:	4603      	mov	r3, r0
 8009294:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009296:	7d3b      	ldrb	r3, [r7, #20]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d12f      	bne.n	80092fc <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	8912      	ldrh	r2, [r2, #8]
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d910      	bls.n	80092ca <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	8912      	ldrh	r2, [r2, #8]
 80092b2:	441a      	add	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	8912      	ldrh	r2, [r2, #8]
 80092c2:	1a9a      	subs	r2, r3, r2
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80092c8:	e002      	b.n	80092d0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	2200      	movs	r2, #0
 80092ce:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00c      	beq.n	80092f2 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	891a      	ldrh	r2, [r3, #8]
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	795b      	ldrb	r3, [r3, #5]
 80092e6:	2001      	movs	r0, #1
 80092e8:	9000      	str	r0, [sp, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 ff57 	bl	800b19e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80092f0:	e0a8      	b.n	8009444 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2207      	movs	r2, #7
 80092f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80092fa:	e0a3      	b.n	8009444 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 80092fc:	7d3b      	ldrb	r3, [r7, #20]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d104      	bne.n	800930c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	2205      	movs	r2, #5
 8009306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800930a:	e09b      	b.n	8009444 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800930c:	7d3b      	ldrb	r3, [r7, #20]
 800930e:	2b05      	cmp	r3, #5
 8009310:	f040 8098 	bne.w	8009444 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	220a      	movs	r2, #10
 8009318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800931c:	e092      	b.n	8009444 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	791b      	ldrb	r3, [r3, #4]
 8009328:	220d      	movs	r2, #13
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 ff5c 	bl	800b1e8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2208      	movs	r2, #8
 8009334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009338:	e08d      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	791b      	ldrb	r3, [r3, #4]
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f002 fabd 	bl	800b8c0 <USBH_LL_GetURBState>
 8009346:	4603      	mov	r3, r0
 8009348:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800934a:	7d3b      	ldrb	r3, [r7, #20]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d115      	bne.n	800937c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8a9 	bl	80094b8 <USBH_MSC_DecodeCSW>
 8009366:	4603      	mov	r3, r0
 8009368:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800936a:	7d7b      	ldrb	r3, [r7, #21]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d102      	bne.n	8009376 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009374:	e068      	b.n	8009448 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009376:	2302      	movs	r3, #2
 8009378:	75fb      	strb	r3, [r7, #23]
      break;
 800937a:	e065      	b.n	8009448 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800937c:	7d3b      	ldrb	r3, [r7, #20]
 800937e:	2b05      	cmp	r3, #5
 8009380:	d162      	bne.n	8009448 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	2209      	movs	r2, #9
 8009386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800938a:	e05d      	b.n	8009448 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	2200      	movs	r2, #0
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f864 	bl	8009460 <USBH_MSC_BOT_Abort>
 8009398:	4603      	mov	r3, r0
 800939a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800939c:	7dbb      	ldrb	r3, [r7, #22]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2207      	movs	r2, #7
 80093a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80093aa:	e04f      	b.n	800944c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80093ac:	7dbb      	ldrb	r3, [r7, #22]
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d14c      	bne.n	800944c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	220b      	movs	r2, #11
 80093b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093ba:	e047      	b.n	800944c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80093bc:	78fb      	ldrb	r3, [r7, #3]
 80093be:	2201      	movs	r2, #1
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f84c 	bl	8009460 <USBH_MSC_BOT_Abort>
 80093c8:	4603      	mov	r3, r0
 80093ca:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80093cc:	7dbb      	ldrb	r3, [r7, #22]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d11d      	bne.n	800940e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	795b      	ldrb	r3, [r3, #5]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f002 facb 	bl	800b974 <USBH_LL_GetToggle>
 80093de:	4603      	mov	r3, r0
 80093e0:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	7959      	ldrb	r1, [r3, #5]
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	f1c3 0301 	rsb	r3, r3, #1
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f002 fa8f 	bl	800b914 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	791b      	ldrb	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f002 fa88 	bl	800b914 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2209      	movs	r2, #9
 8009408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800940c:	e020      	b.n	8009450 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800940e:	7dbb      	ldrb	r3, [r7, #22]
 8009410:	2b04      	cmp	r3, #4
 8009412:	d11d      	bne.n	8009450 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	220b      	movs	r2, #11
 8009418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800941c:	e018      	b.n	8009450 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fdf2 	bl	8009008 <USBH_MSC_BOT_REQ_Reset>
 8009424:	4603      	mov	r3, r0
 8009426:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d112      	bne.n	8009454 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009436:	e00d      	b.n	8009454 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009438:	bf00      	nop
 800943a:	e00c      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 800943c:	bf00      	nop
 800943e:	e00a      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 8009440:	bf00      	nop
 8009442:	e008      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 8009444:	bf00      	nop
 8009446:	e006      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 8009448:	bf00      	nop
 800944a:	e004      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 800944c:	bf00      	nop
 800944e:	e002      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 8009450:	bf00      	nop
 8009452:	e000      	b.n	8009456 <USBH_MSC_BOT_Process+0x392>
      break;
 8009454:	bf00      	nop
  }
  return status;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	460b      	mov	r3, r1
 800946a:	70fb      	strb	r3, [r7, #3]
 800946c:	4613      	mov	r3, r2
 800946e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009470:	2302      	movs	r3, #2
 8009472:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800947e:	78bb      	ldrb	r3, [r7, #2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <USBH_MSC_BOT_Abort+0x2a>
 8009484:	2b01      	cmp	r3, #1
 8009486:	d009      	beq.n	800949c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009488:	e011      	b.n	80094ae <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	79db      	ldrb	r3, [r3, #7]
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f001 f9a8 	bl	800a7e6 <USBH_ClrFeature>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]
      break;
 800949a:	e008      	b.n	80094ae <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	799b      	ldrb	r3, [r3, #6]
 80094a0:	4619      	mov	r1, r3
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 f99f 	bl	800a7e6 <USBH_ClrFeature>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
      break;
 80094ac:	bf00      	nop
  }
  return status;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80094ca:	2301      	movs	r3, #1
 80094cc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	791b      	ldrb	r3, [r3, #4]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f002 f961 	bl	800b79c <USBH_LL_GetLastXferSize>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b0d      	cmp	r3, #13
 80094de:	d002      	beq.n	80094e6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 80094e0:	2302      	movs	r3, #2
 80094e2:	73fb      	strb	r3, [r7, #15]
 80094e4:	e024      	b.n	8009530 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ea:	4a14      	ldr	r2, [pc, #80]	; (800953c <USBH_MSC_DecodeCSW+0x84>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d11d      	bne.n	800952c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d119      	bne.n	8009530 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009502:	2b00      	cmp	r3, #0
 8009504:	d102      	bne.n	800950c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	e011      	b.n	8009530 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009512:	2b01      	cmp	r3, #1
 8009514:	d102      	bne.n	800951c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
 800951a:	e009      	b.n	8009530 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009522:	2b02      	cmp	r3, #2
 8009524:	d104      	bne.n	8009530 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009526:	2302      	movs	r3, #2
 8009528:	73fb      	strb	r3, [r7, #15]
 800952a:	e001      	b.n	8009530 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800952c:	2302      	movs	r3, #2
 800952e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	53425355 	.word	0x53425355

08009540 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800954c:	2302      	movs	r3, #2
 800954e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009560:	2b01      	cmp	r3, #1
 8009562:	d002      	beq.n	800956a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009564:	2b02      	cmp	r3, #2
 8009566:	d021      	beq.n	80095ac <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009568:	e028      	b.n	80095bc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2200      	movs	r2, #0
 800956e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	220a      	movs	r2, #10
 800957c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	3363      	adds	r3, #99	; 0x63
 8009584:	2210      	movs	r2, #16
 8009586:	2100      	movs	r1, #0
 8009588:	4618      	mov	r0, r3
 800958a:	f002 fabf 	bl	800bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2202      	movs	r2, #2
 80095a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 80095a6:	2301      	movs	r3, #1
 80095a8:	73fb      	strb	r3, [r7, #15]
      break;
 80095aa:	e007      	b.n	80095bc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff fd87 	bl	80090c4 <USBH_MSC_BOT_Process>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ba:	bf00      	nop
  }

  return error;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	460b      	mov	r3, r1
 80095d0:	607a      	str	r2, [r7, #4]
 80095d2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095de:	69db      	ldr	r3, [r3, #28]
 80095e0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d002      	beq.n	80095f2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 80095ec:	2b02      	cmp	r3, #2
 80095ee:	d027      	beq.n	8009640 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 80095f0:	e05f      	b.n	80096b2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2208      	movs	r2, #8
 80095f6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2280      	movs	r2, #128	; 0x80
 80095fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	220a      	movs	r2, #10
 8009604:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	3363      	adds	r3, #99	; 0x63
 800960c:	2210      	movs	r2, #16
 800960e:	2100      	movs	r1, #0
 8009610:	4618      	mov	r0, r3
 8009612:	f002 fa7b 	bl	800bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2225      	movs	r2, #37	; 0x25
 800961a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	2202      	movs	r2, #2
 800962a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f103 0210 	add.w	r2, r3, #16
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
      break;
 800963e:	e038      	b.n	80096b2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009640:	7afb      	ldrb	r3, [r7, #11]
 8009642:	4619      	mov	r1, r3
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f7ff fd3d 	bl	80090c4 <USBH_MSC_BOT_Process>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d12d      	bne.n	80096b0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800965a:	3303      	adds	r3, #3
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009666:	3302      	adds	r3, #2
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009674:	3301      	adds	r3, #1
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800967a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	061b      	lsls	r3, r3, #24
 8009686:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009692:	3307      	adds	r3, #7
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	b29a      	uxth	r2, r3
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800969e:	3306      	adds	r3, #6
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	809a      	strh	r2, [r3, #4]
      break;
 80096b0:	bf00      	nop
  }

  return error;
 80096b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b086      	sub	sp, #24
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	460b      	mov	r3, r1
 80096c6:	607a      	str	r2, [r7, #4]
 80096c8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80096ca:	2302      	movs	r3, #2
 80096cc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d002      	beq.n	80096e8 <USBH_MSC_SCSI_Inquiry+0x2c>
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d03d      	beq.n	8009762 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 80096e6:	e089      	b.n	80097fc <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2224      	movs	r2, #36	; 0x24
 80096ec:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2280      	movs	r2, #128	; 0x80
 80096f2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	220a      	movs	r2, #10
 80096fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	3363      	adds	r3, #99	; 0x63
 8009702:	220a      	movs	r2, #10
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f002 fa00 	bl	800bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2212      	movs	r2, #18
 8009710:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009714:	7afb      	ldrb	r3, [r7, #11]
 8009716:	015b      	lsls	r3, r3, #5
 8009718:	b2da      	uxtb	r2, r3
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2224      	movs	r2, #36	; 0x24
 8009734:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2202      	movs	r2, #2
 800974c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f103 0210 	add.w	r2, r3, #16
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	75fb      	strb	r3, [r7, #23]
      break;
 8009760:	e04c      	b.n	80097fc <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009762:	7afb      	ldrb	r3, [r7, #11]
 8009764:	4619      	mov	r1, r3
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7ff fcac 	bl	80090c4 <USBH_MSC_BOT_Process>
 800976c:	4603      	mov	r3, r0
 800976e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d141      	bne.n	80097fa <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009776:	2222      	movs	r2, #34	; 0x22
 8009778:	2100      	movs	r1, #0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f002 f9c6 	bl	800bb0c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	f003 031f 	and.w	r3, r3, #31
 800978c:	b2da      	uxtb	r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	b2da      	uxtb	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097a8:	3301      	adds	r3, #1
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	b25b      	sxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	da03      	bge.n	80097ba <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	709a      	strb	r2, [r3, #2]
 80097b8:	e002      	b.n	80097c0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	1cd8      	adds	r0, r3, #3
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ca:	3308      	adds	r3, #8
 80097cc:	2208      	movs	r2, #8
 80097ce:	4619      	mov	r1, r3
 80097d0:	f002 f98e 	bl	800baf0 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f103 000c 	add.w	r0, r3, #12
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e0:	3310      	adds	r3, #16
 80097e2:	2210      	movs	r2, #16
 80097e4:	4619      	mov	r1, r3
 80097e6:	f002 f983 	bl	800baf0 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	331d      	adds	r3, #29
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80097f4:	3220      	adds	r2, #32
 80097f6:	6812      	ldr	r2, [r2, #0]
 80097f8:	601a      	str	r2, [r3, #0]
      break;
 80097fa:	bf00      	nop
  }

  return error;
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3718      	adds	r7, #24
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b086      	sub	sp, #24
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	460b      	mov	r3, r1
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009814:	2302      	movs	r3, #2
 8009816:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009828:	2b01      	cmp	r3, #1
 800982a:	d002      	beq.n	8009832 <USBH_MSC_SCSI_RequestSense+0x2c>
 800982c:	2b02      	cmp	r3, #2
 800982e:	d03d      	beq.n	80098ac <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009830:	e05d      	b.n	80098ee <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	220e      	movs	r2, #14
 8009836:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2280      	movs	r2, #128	; 0x80
 800983c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	220a      	movs	r2, #10
 8009844:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	3363      	adds	r3, #99	; 0x63
 800984c:	2210      	movs	r2, #16
 800984e:	2100      	movs	r1, #0
 8009850:	4618      	mov	r0, r3
 8009852:	f002 f95b 	bl	800bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2203      	movs	r2, #3
 800985a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	015b      	lsls	r3, r3, #5
 8009862:	b2da      	uxtb	r2, r3
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	220e      	movs	r2, #14
 800987e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	2202      	movs	r2, #2
 8009896:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f103 0210 	add.w	r2, r3, #16
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80098a6:	2301      	movs	r3, #1
 80098a8:	75fb      	strb	r3, [r7, #23]
      break;
 80098aa:	e020      	b.n	80098ee <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	4619      	mov	r1, r3
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fc07 	bl	80090c4 <USBH_MSC_BOT_Process>
 80098b6:	4603      	mov	r3, r0
 80098b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d115      	bne.n	80098ec <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098c6:	3302      	adds	r3, #2
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098da:	7b1a      	ldrb	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e6:	7b5a      	ldrb	r2, [r3, #13]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	709a      	strb	r2, [r3, #2]
      break;
 80098ec:	bf00      	nop
  }

  return error;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	607a      	str	r2, [r7, #4]
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	460b      	mov	r3, r1
 8009906:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009908:	2302      	movs	r3, #2
 800990a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800991c:	2b01      	cmp	r3, #1
 800991e:	d002      	beq.n	8009926 <USBH_MSC_SCSI_Write+0x2e>
 8009920:	2b02      	cmp	r3, #2
 8009922:	d047      	beq.n	80099b4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009924:	e04e      	b.n	80099c4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800992c:	461a      	mov	r2, r3
 800992e:	6a3b      	ldr	r3, [r7, #32]
 8009930:	fb03 f202 	mul.w	r2, r3, r2
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	220a      	movs	r2, #10
 8009944:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	3363      	adds	r3, #99	; 0x63
 800994c:	2210      	movs	r2, #16
 800994e:	2100      	movs	r1, #0
 8009950:	4618      	mov	r0, r3
 8009952:	f002 f8db 	bl	800bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	222a      	movs	r2, #42	; 0x2a
 800995a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800995e:	79fa      	ldrb	r2, [r7, #7]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009966:	79ba      	ldrb	r2, [r7, #6]
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800996e:	797a      	ldrb	r2, [r7, #5]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	781a      	ldrb	r2, [r3, #0]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009980:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800998a:	f107 0320 	add.w	r3, r7, #32
 800998e:	781a      	ldrb	r2, [r3, #0]
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80099ae:	2301      	movs	r3, #1
 80099b0:	75fb      	strb	r3, [r7, #23]
      break;
 80099b2:	e007      	b.n	80099c4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80099b4:	7afb      	ldrb	r3, [r7, #11]
 80099b6:	4619      	mov	r1, r3
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f7ff fb83 	bl	80090c4 <USBH_MSC_BOT_Process>
 80099be:	4603      	mov	r3, r0
 80099c0:	75fb      	strb	r3, [r7, #23]
      break;
 80099c2:	bf00      	nop
  }

  return error;
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3718      	adds	r7, #24
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b086      	sub	sp, #24
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	60f8      	str	r0, [r7, #12]
 80099d6:	607a      	str	r2, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
 80099da:	460b      	mov	r3, r1
 80099dc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099de:	2302      	movs	r3, #2
 80099e0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d002      	beq.n	80099fc <USBH_MSC_SCSI_Read+0x2e>
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d047      	beq.n	8009a8a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099fa:	e04e      	b.n	8009a9a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009a02:	461a      	mov	r2, r3
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	fb03 f202 	mul.w	r2, r3, r2
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	2280      	movs	r2, #128	; 0x80
 8009a12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	220a      	movs	r2, #10
 8009a1a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	3363      	adds	r3, #99	; 0x63
 8009a22:	2210      	movs	r2, #16
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 f870 	bl	800bb0c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	2228      	movs	r2, #40	; 0x28
 8009a30:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009a34:	79fa      	ldrb	r2, [r7, #7]
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009a3c:	79ba      	ldrb	r2, [r7, #6]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009a44:	797a      	ldrb	r2, [r7, #5]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009a4c:	1d3b      	adds	r3, r7, #4
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009a56:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009a60:	f107 0320 	add.w	r3, r7, #32
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	2202      	movs	r2, #2
 8009a78:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a84:	2301      	movs	r3, #1
 8009a86:	75fb      	strb	r3, [r7, #23]
      break;
 8009a88:	e007      	b.n	8009a9a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f7ff fb18 	bl	80090c4 <USBH_MSC_BOT_Process>
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]
      break;
 8009a98:	bf00      	nop
  }

  return error;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e029      	b.n	8009b10 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	79fa      	ldrb	r2, [r7, #7]
 8009ac0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f81f 	bl	8009b18 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f001 fd89 	bl	800b620 <USBH_LL_Init>

  return USBH_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e009      	b.n	8009b3e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	33e0      	adds	r3, #224	; 0xe0
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	2200      	movs	r2, #0
 8009b36:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	60fb      	str	r3, [r7, #12]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b0f      	cmp	r3, #15
 8009b42:	d9f2      	bls.n	8009b2a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009b44:	2300      	movs	r3, #0
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e009      	b.n	8009b5e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b64:	d3f1      	bcc.n	8009b4a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2240      	movs	r2, #64	; 0x40
 8009b8a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d016      	beq.n	8009c02 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10e      	bne.n	8009bfc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009be4:	1c59      	adds	r1, r3, #1
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	33de      	adds	r3, #222	; 0xde
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]
 8009bfa:	e004      	b.n	8009c06 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	73fb      	strb	r3, [r7, #15]
 8009c00:	e001      	b.n	8009c06 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009c02:	2302      	movs	r3, #2
 8009c04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009c2a:	78fa      	ldrb	r2, [r7, #3]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d204      	bcs.n	8009c3a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009c38:	e001      	b.n	8009c3e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009c3a:	2302      	movs	r3, #2
 8009c3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	4608      	mov	r0, r1
 8009c56:	4611      	mov	r1, r2
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	70fb      	strb	r3, [r7, #3]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70bb      	strb	r3, [r7, #2]
 8009c62:	4613      	mov	r3, r2
 8009c64:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009c66:	2300      	movs	r3, #0
 8009c68:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009c74:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009c76:	e025      	b.n	8009cc4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	221a      	movs	r2, #26
 8009c7c:	fb02 f303 	mul.w	r3, r2, r3
 8009c80:	3308      	adds	r3, #8
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4413      	add	r3, r2
 8009c86:	3302      	adds	r3, #2
 8009c88:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	795b      	ldrb	r3, [r3, #5]
 8009c8e:	78fa      	ldrb	r2, [r7, #3]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d002      	beq.n	8009c9a <USBH_FindInterface+0x4e>
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	2bff      	cmp	r3, #255	; 0xff
 8009c98:	d111      	bne.n	8009cbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009c9e:	78ba      	ldrb	r2, [r7, #2]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d002      	beq.n	8009caa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ca4:	78bb      	ldrb	r3, [r7, #2]
 8009ca6:	2bff      	cmp	r3, #255	; 0xff
 8009ca8:	d109      	bne.n	8009cbe <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009cae:	787a      	ldrb	r2, [r7, #1]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d002      	beq.n	8009cba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009cb4:	787b      	ldrb	r3, [r7, #1]
 8009cb6:	2bff      	cmp	r3, #255	; 0xff
 8009cb8:	d101      	bne.n	8009cbe <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
 8009cbc:	e006      	b.n	8009ccc <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d9d6      	bls.n	8009c78 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009cca:	23ff      	movs	r3, #255	; 0xff
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	371c      	adds	r7, #28
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 fce3 	bl	800b6ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 fdfc 	bl	800b8e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af04      	add	r7, sp, #16
 8009cfe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009d00:	2302      	movs	r3, #2
 8009d02:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d102      	bne.n	8009d1a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2203      	movs	r2, #3
 8009d18:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b0b      	cmp	r3, #11
 8009d22:	f200 81be 	bhi.w	800a0a2 <USBH_Process+0x3aa>
 8009d26:	a201      	add	r2, pc, #4	; (adr r2, 8009d2c <USBH_Process+0x34>)
 8009d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2c:	08009d5d 	.word	0x08009d5d
 8009d30:	08009d8f 	.word	0x08009d8f
 8009d34:	08009df7 	.word	0x08009df7
 8009d38:	0800a03d 	.word	0x0800a03d
 8009d3c:	0800a0a3 	.word	0x0800a0a3
 8009d40:	08009e9b 	.word	0x08009e9b
 8009d44:	08009fe3 	.word	0x08009fe3
 8009d48:	08009ed1 	.word	0x08009ed1
 8009d4c:	08009ef1 	.word	0x08009ef1
 8009d50:	08009f11 	.word	0x08009f11
 8009d54:	08009f55 	.word	0x08009f55
 8009d58:	0800a025 	.word	0x0800a025
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 819e 	beq.w	800a0a6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009d70:	20c8      	movs	r0, #200	; 0xc8
 8009d72:	f001 fe2f 	bl	800b9d4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 fcf5 	bl	800b766 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d8c:	e18b      	b.n	800a0a6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d107      	bne.n	8009da8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009da6:	e18d      	b.n	800a0c4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009db2:	d914      	bls.n	8009dde <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009dba:	3301      	adds	r3, #1
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	d903      	bls.n	8009dd6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	220d      	movs	r2, #13
 8009dd2:	701a      	strb	r2, [r3, #0]
      break;
 8009dd4:	e176      	b.n	800a0c4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
      break;
 8009ddc:	e172      	b.n	800a0c4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009de4:	f103 020a 	add.w	r2, r3, #10
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009dee:	200a      	movs	r0, #10
 8009df0:	f001 fdf0 	bl	800b9d4 <USBH_Delay>
      break;
 8009df4:	e166      	b.n	800a0c4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d005      	beq.n	8009e0c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009e06:	2104      	movs	r1, #4
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009e0c:	2064      	movs	r0, #100	; 0x64
 8009e0e:	f001 fde1 	bl	800b9d4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 fc80 	bl	800b718 <USBH_LL_GetSpeed>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2205      	movs	r2, #5
 8009e26:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009e28:	2100      	movs	r1, #0
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fa29 	bl	800b282 <USBH_AllocPipe>
 8009e30:	4603      	mov	r3, r0
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009e38:	2180      	movs	r1, #128	; 0x80
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fa21 	bl	800b282 <USBH_AllocPipe>
 8009e40:	4603      	mov	r3, r0
 8009e42:	461a      	mov	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7919      	ldrb	r1, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009e5c:	b292      	uxth	r2, r2
 8009e5e:	9202      	str	r2, [sp, #8]
 8009e60:	2200      	movs	r2, #0
 8009e62:	9201      	str	r2, [sp, #4]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4603      	mov	r3, r0
 8009e68:	2280      	movs	r2, #128	; 0x80
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 f9da 	bl	800b224 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	7959      	ldrb	r1, [r3, #5]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009e84:	b292      	uxth	r2, r2
 8009e86:	9202      	str	r2, [sp, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	9201      	str	r2, [sp, #4]
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2200      	movs	r2, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 f9c6 	bl	800b224 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e98:	e114      	b.n	800a0c4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f918 	bl	800a0d0 <USBH_HandleEnum>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009ea4:	7bbb      	ldrb	r3, [r7, #14]
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f040 80fe 	bne.w	800a0aa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d103      	bne.n	8009ec8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2208      	movs	r2, #8
 8009ec4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ec6:	e0f0      	b.n	800a0aa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2207      	movs	r2, #7
 8009ecc:	701a      	strb	r2, [r3, #0]
      break;
 8009ece:	e0ec      	b.n	800a0aa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 80e9 	beq.w	800a0ae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2208      	movs	r2, #8
 8009eec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009eee:	e0de      	b.n	800a0ae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	4619      	mov	r1, r3
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fc2c 	bl	800a758 <USBH_SetCfg>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f040 80d5 	bne.w	800a0b2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2209      	movs	r2, #9
 8009f0c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f0e:	e0d0      	b.n	800a0b2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009f16:	f003 0320 	and.w	r3, r3, #32
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d016      	beq.n	8009f4c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009f1e:	2101      	movs	r1, #1
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc3c 	bl	800a79e <USBH_SetFeature>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	220a      	movs	r2, #10
 8009f36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f38:	e0bd      	b.n	800a0b6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	f040 80b9 	bne.w	800a0b6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	220a      	movs	r2, #10
 8009f48:	701a      	strb	r2, [r3, #0]
      break;
 8009f4a:	e0b4      	b.n	800a0b6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	220a      	movs	r2, #10
 8009f50:	701a      	strb	r2, [r3, #0]
      break;
 8009f52:	e0b0      	b.n	800a0b6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	f000 80ad 	beq.w	800a0ba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
 8009f6c:	e016      	b.n	8009f9c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	32de      	adds	r2, #222	; 0xde
 8009f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f78:	791a      	ldrb	r2, [r3, #4]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d108      	bne.n	8009f96 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009f84:	7bfa      	ldrb	r2, [r7, #15]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	32de      	adds	r2, #222	; 0xde
 8009f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009f94:	e005      	b.n	8009fa2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009f96:	7bfb      	ldrb	r3, [r7, #15]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	73fb      	strb	r3, [r7, #15]
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d0e5      	beq.n	8009f6e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d016      	beq.n	8009fda <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	4798      	blx	r3
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d109      	bne.n	8009fd2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2206      	movs	r2, #6
 8009fc2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fca:	2103      	movs	r1, #3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fd0:	e073      	b.n	800a0ba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	220d      	movs	r2, #13
 8009fd6:	701a      	strb	r2, [r3, #0]
      break;
 8009fd8:	e06f      	b.n	800a0ba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	220d      	movs	r2, #13
 8009fde:	701a      	strb	r2, [r3, #0]
      break;
 8009fe0:	e06b      	b.n	800a0ba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d017      	beq.n	800a01c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	d103      	bne.n	800a00c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	220b      	movs	r2, #11
 800a008:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a00a:	e058      	b.n	800a0be <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a00c:	7bbb      	ldrb	r3, [r7, #14]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	d154      	bne.n	800a0be <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	220d      	movs	r2, #13
 800a018:	701a      	strb	r2, [r3, #0]
      break;
 800a01a:	e050      	b.n	800a0be <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	220d      	movs	r2, #13
 800a020:	701a      	strb	r2, [r3, #0]
      break;
 800a022:	e04c      	b.n	800a0be <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d049      	beq.n	800a0c2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4798      	blx	r3
      }
      break;
 800a03a:	e042      	b.n	800a0c2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fd67 	bl	8009b18 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a078:	2105      	movs	r1, #5
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b01      	cmp	r3, #1
 800a088:	d107      	bne.n	800a09a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff fe20 	bl	8009cd8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a098:	e014      	b.n	800a0c4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fb06 	bl	800b6ac <USBH_LL_Start>
      break;
 800a0a0:	e010      	b.n	800a0c4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a0a2:	bf00      	nop
 800a0a4:	e00e      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e00c      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0aa:	bf00      	nop
 800a0ac:	e00a      	b.n	800a0c4 <USBH_Process+0x3cc>
    break;
 800a0ae:	bf00      	nop
 800a0b0:	e008      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0b2:	bf00      	nop
 800a0b4:	e006      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0b6:	bf00      	nop
 800a0b8:	e004      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0ba:	bf00      	nop
 800a0bc:	e002      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <USBH_Process+0x3cc>
      break;
 800a0c2:	bf00      	nop
  }
  return USBH_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop

0800a0d0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af04      	add	r7, sp, #16
 800a0d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	785b      	ldrb	r3, [r3, #1]
 800a0e4:	2b07      	cmp	r3, #7
 800a0e6:	f200 81c1 	bhi.w	800a46c <USBH_HandleEnum+0x39c>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <USBH_HandleEnum+0x20>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a111 	.word	0x0800a111
 800a0f4:	0800a1cf 	.word	0x0800a1cf
 800a0f8:	0800a239 	.word	0x0800a239
 800a0fc:	0800a2c7 	.word	0x0800a2c7
 800a100:	0800a331 	.word	0x0800a331
 800a104:	0800a3a1 	.word	0x0800a3a1
 800a108:	0800a3e7 	.word	0x0800a3e7
 800a10c:	0800a42d 	.word	0x0800a42d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a110:	2108      	movs	r1, #8
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa50 	bl	800a5b8 <USBH_Get_DevDesc>
 800a118:	4603      	mov	r3, r0
 800a11a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d130      	bne.n	800a184 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7919      	ldrb	r1, [r3, #4]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a146:	b292      	uxth	r2, r2
 800a148:	9202      	str	r2, [sp, #8]
 800a14a:	2200      	movs	r2, #0
 800a14c:	9201      	str	r2, [sp, #4]
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4603      	mov	r3, r0
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f001 f865 	bl	800b224 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	7959      	ldrb	r1, [r3, #5]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a16e:	b292      	uxth	r2, r2
 800a170:	9202      	str	r2, [sp, #8]
 800a172:	2200      	movs	r2, #0
 800a174:	9201      	str	r2, [sp, #4]
 800a176:	9300      	str	r3, [sp, #0]
 800a178:	4603      	mov	r3, r0
 800a17a:	2200      	movs	r2, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 f851 	bl	800b224 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a182:	e175      	b.n	800a470 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a184:	7bbb      	ldrb	r3, [r7, #14]
 800a186:	2b03      	cmp	r3, #3
 800a188:	f040 8172 	bne.w	800a470 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a192:	3301      	adds	r3, #1
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1a2:	2b03      	cmp	r3, #3
 800a1a4:	d903      	bls.n	800a1ae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220d      	movs	r2, #13
 800a1aa:	701a      	strb	r2, [r3, #0]
      break;
 800a1ac:	e160      	b.n	800a470 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	795b      	ldrb	r3, [r3, #5]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 f885 	bl	800b2c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	791b      	ldrb	r3, [r3, #4]
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f87f 	bl	800b2c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
      break;
 800a1cc:	e150      	b.n	800a470 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a1ce:	2112      	movs	r1, #18
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f9f1 	bl	800a5b8 <USBH_Get_DevDesc>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1da:	7bbb      	ldrb	r3, [r7, #14]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d103      	bne.n	800a1e8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a1e6:	e145      	b.n	800a474 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1e8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	f040 8142 	bne.w	800a474 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a206:	2b03      	cmp	r3, #3
 800a208:	d903      	bls.n	800a212 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	220d      	movs	r2, #13
 800a20e:	701a      	strb	r2, [r3, #0]
      break;
 800a210:	e130      	b.n	800a474 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	795b      	ldrb	r3, [r3, #5]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f853 	bl	800b2c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	791b      	ldrb	r3, [r3, #4]
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 f84d 	bl	800b2c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	701a      	strb	r2, [r3, #0]
      break;
 800a236:	e11d      	b.n	800a474 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a238:	2101      	movs	r1, #1
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fa68 	bl	800a710 <USBH_SetAddress>
 800a240:	4603      	mov	r3, r0
 800a242:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a244:	7bbb      	ldrb	r3, [r7, #14]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d132      	bne.n	800a2b0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a24a:	2002      	movs	r0, #2
 800a24c:	f001 fbc2 	bl	800b9d4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2203      	movs	r2, #3
 800a25c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7919      	ldrb	r1, [r3, #4]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a272:	b292      	uxth	r2, r2
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	2200      	movs	r2, #0
 800a278:	9201      	str	r2, [sp, #4]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4603      	mov	r3, r0
 800a27e:	2280      	movs	r2, #128	; 0x80
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 ffcf 	bl	800b224 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7959      	ldrb	r1, [r3, #5]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a29a:	b292      	uxth	r2, r2
 800a29c:	9202      	str	r2, [sp, #8]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	9201      	str	r2, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 ffbb 	bl	800b224 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a2ae:	e0e3      	b.n	800a478 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	f040 80e0 	bne.w	800a478 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	220d      	movs	r2, #13
 800a2bc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	705a      	strb	r2, [r3, #1]
      break;
 800a2c4:	e0d8      	b.n	800a478 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a2c6:	2109      	movs	r1, #9
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f99d 	bl	800a608 <USBH_Get_CfgDesc>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2d2:	7bbb      	ldrb	r3, [r7, #14]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d103      	bne.n	800a2e0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2204      	movs	r2, #4
 800a2dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a2de:	e0cd      	b.n	800a47c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	f040 80ca 	bne.w	800a47c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d903      	bls.n	800a30a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	220d      	movs	r2, #13
 800a306:	701a      	strb	r2, [r3, #0]
      break;
 800a308:	e0b8      	b.n	800a47c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	795b      	ldrb	r3, [r3, #5]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 ffd7 	bl	800b2c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	791b      	ldrb	r3, [r3, #4]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 ffd1 	bl	800b2c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	701a      	strb	r2, [r3, #0]
      break;
 800a32e:	e0a5      	b.n	800a47c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f965 	bl	800a608 <USBH_Get_CfgDesc>
 800a33e:	4603      	mov	r3, r0
 800a340:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2205      	movs	r2, #5
 800a34c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a34e:	e097      	b.n	800a480 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b03      	cmp	r3, #3
 800a354:	f040 8094 	bne.w	800a480 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a35e:	3301      	adds	r3, #1
 800a360:	b2da      	uxtb	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a36e:	2b03      	cmp	r3, #3
 800a370:	d903      	bls.n	800a37a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220d      	movs	r2, #13
 800a376:	701a      	strb	r2, [r3, #0]
      break;
 800a378:	e082      	b.n	800a480 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	795b      	ldrb	r3, [r3, #5]
 800a37e:	4619      	mov	r1, r3
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 ff9f 	bl	800b2c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	791b      	ldrb	r3, [r3, #4]
 800a38a:	4619      	mov	r1, r3
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 ff99 	bl	800b2c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
      break;
 800a39e:	e06f      	b.n	800a480 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d019      	beq.n	800a3de <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a3b6:	23ff      	movs	r3, #255	; 0xff
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f949 	bl	800a650 <USBH_Get_StringDesc>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d103      	bne.n	800a3d0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2206      	movs	r2, #6
 800a3cc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a3ce:	e059      	b.n	800a484 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3d0:	7bbb      	ldrb	r3, [r7, #14]
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d156      	bne.n	800a484 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2206      	movs	r2, #6
 800a3da:	705a      	strb	r2, [r3, #1]
      break;
 800a3dc:	e052      	b.n	800a484 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2206      	movs	r2, #6
 800a3e2:	705a      	strb	r2, [r3, #1]
      break;
 800a3e4:	e04e      	b.n	800a484 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d019      	beq.n	800a424 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a3fc:	23ff      	movs	r3, #255	; 0xff
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f926 	bl	800a650 <USBH_Get_StringDesc>
 800a404:	4603      	mov	r3, r0
 800a406:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d103      	bne.n	800a416 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2207      	movs	r2, #7
 800a412:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a414:	e038      	b.n	800a488 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a416:	7bbb      	ldrb	r3, [r7, #14]
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d135      	bne.n	800a488 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2207      	movs	r2, #7
 800a420:	705a      	strb	r2, [r3, #1]
      break;
 800a422:	e031      	b.n	800a488 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2207      	movs	r2, #7
 800a428:	705a      	strb	r2, [r3, #1]
      break;
 800a42a:	e02d      	b.n	800a488 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a432:	2b00      	cmp	r3, #0
 800a434:	d017      	beq.n	800a466 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a442:	23ff      	movs	r3, #255	; 0xff
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f903 	bl	800a650 <USBH_Get_StringDesc>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a458:	e018      	b.n	800a48c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b03      	cmp	r3, #3
 800a45e:	d115      	bne.n	800a48c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]
      break;
 800a464:	e012      	b.n	800a48c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]
      break;
 800a46a:	e00f      	b.n	800a48c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a46c:	bf00      	nop
 800a46e:	e00e      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a470:	bf00      	nop
 800a472:	e00c      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a474:	bf00      	nop
 800a476:	e00a      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a478:	bf00      	nop
 800a47a:	e008      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a47c:	bf00      	nop
 800a47e:	e006      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a480:	bf00      	nop
 800a482:	e004      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a484:	bf00      	nop
 800a486:	e002      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a488:	bf00      	nop
 800a48a:	e000      	b.n	800a48e <USBH_HandleEnum+0x3be>
      break;
 800a48c:	bf00      	nop
  }
  return Status;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f804 	bl	800a4da <USBH_HandleSof>
}
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b0b      	cmp	r3, #11
 800a4ea:	d10a      	bne.n	800a502 <USBH_HandleSof+0x28>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d005      	beq.n	800a502 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	4798      	blx	r3
  }
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2201      	movs	r2, #1
 800a516:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a51a:	bf00      	nop
}
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a536:	bf00      	nop
}
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a542:	b480      	push	{r7}
 800a544:	b083      	sub	sp, #12
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 f8a6 	bl	800b6e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	791b      	ldrb	r3, [r3, #4]
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 fe91 	bl	800b2c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	795b      	ldrb	r3, [r3, #5]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fe8b 	bl	800b2c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af02      	add	r7, sp, #8
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	9300      	str	r3, [sp, #0]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f864 	bl	800a6a6 <USBH_GetDescriptor>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d10a      	bne.n	800a5fe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5f4:	78fa      	ldrb	r2, [r7, #3]
 800a5f6:	b292      	uxth	r2, r2
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	f000 f918 	bl	800a82e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	331c      	adds	r3, #28
 800a618:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a61a:	887b      	ldrh	r3, [r7, #2]
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a624:	2100      	movs	r1, #0
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f83d 	bl	800a6a6 <USBH_GetDescriptor>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d107      	bne.n	800a646 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a636:	887b      	ldrh	r3, [r7, #2]
 800a638:	461a      	mov	r2, r3
 800a63a:	68b9      	ldr	r1, [r7, #8]
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 f987 	bl	800a950 <USBH_ParseCfgDesc>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a646:	7bfb      	ldrb	r3, [r7, #15]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b088      	sub	sp, #32
 800a654:	af02      	add	r7, sp, #8
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	607a      	str	r2, [r7, #4]
 800a65a:	461a      	mov	r2, r3
 800a65c:	460b      	mov	r3, r1
 800a65e:	72fb      	strb	r3, [r7, #11]
 800a660:	4613      	mov	r3, r2
 800a662:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a664:	7afb      	ldrb	r3, [r7, #11]
 800a666:	b29b      	uxth	r3, r3
 800a668:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a66c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a674:	893b      	ldrh	r3, [r7, #8]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	460b      	mov	r3, r1
 800a67a:	2100      	movs	r1, #0
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 f812 	bl	800a6a6 <USBH_GetDescriptor>
 800a682:	4603      	mov	r3, r0
 800a684:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d107      	bne.n	800a69c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a692:	893a      	ldrh	r2, [r7, #8]
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 fb24 	bl	800ace4 <USBH_ParseStringDesc>
  }

  return status;
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	60f8      	str	r0, [r7, #12]
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	72fb      	strb	r3, [r7, #11]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	789b      	ldrb	r3, [r3, #2]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d11c      	bne.n	800a6fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a6c0:	7afb      	ldrb	r3, [r7, #11]
 800a6c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2206      	movs	r2, #6
 800a6d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	893a      	ldrh	r2, [r7, #8]
 800a6d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a6d8:	893b      	ldrh	r3, [r7, #8]
 800a6da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a6de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6e2:	d104      	bne.n	800a6ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f240 4209 	movw	r2, #1033	; 0x409
 800a6ea:	829a      	strh	r2, [r3, #20]
 800a6ec:	e002      	b.n	800a6f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	8b3a      	ldrh	r2, [r7, #24]
 800a6f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a6fa:	8b3b      	ldrh	r3, [r7, #24]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fb3d 	bl	800ad80 <USBH_CtlReq>
 800a706:	4603      	mov	r3, r0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3710      	adds	r7, #16
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	789b      	ldrb	r3, [r3, #2]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d10f      	bne.n	800a744 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2205      	movs	r2, #5
 800a72e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	b29a      	uxth	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a744:	2200      	movs	r2, #0
 800a746:	2100      	movs	r1, #0
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fb19 	bl	800ad80 <USBH_CtlReq>
 800a74e:	4603      	mov	r3, r0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	460b      	mov	r3, r1
 800a762:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	789b      	ldrb	r3, [r3, #2]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d10e      	bne.n	800a78a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2209      	movs	r2, #9
 800a776:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	887a      	ldrh	r2, [r7, #2]
 800a77c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 faf6 	bl	800ad80 <USBH_CtlReq>
 800a794:	4603      	mov	r3, r0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3708      	adds	r7, #8
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b082      	sub	sp, #8
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	789b      	ldrb	r3, [r3, #2]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d10f      	bne.n	800a7d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2203      	movs	r2, #3
 800a7bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a7be:	78fb      	ldrb	r3, [r7, #3]
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fad2 	bl	800ad80 <USBH_CtlReq>
 800a7dc:	4603      	mov	r3, r0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b082      	sub	sp, #8
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	789b      	ldrb	r3, [r3, #2]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d10f      	bne.n	800a81a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a80c:	78fb      	ldrb	r3, [r7, #3]
 800a80e:	b29a      	uxth	r2, r3
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a81a:	2200      	movs	r2, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 faae 	bl	800ad80 <USBH_CtlReq>
 800a824:	4603      	mov	r3, r0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a82e:	b480      	push	{r7}
 800a830:	b085      	sub	sp, #20
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	4613      	mov	r3, r2
 800a83a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	785a      	ldrb	r2, [r3, #1]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	3302      	adds	r3, #2
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	b29a      	uxth	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	3303      	adds	r3, #3
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	b29b      	uxth	r3, r3
 800a860:	4313      	orrs	r3, r2
 800a862:	b29a      	uxth	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	791a      	ldrb	r2, [r3, #4]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	795a      	ldrb	r2, [r3, #5]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	799a      	ldrb	r2, [r3, #6]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	79da      	ldrb	r2, [r3, #7]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	79db      	ldrb	r3, [r3, #7]
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	dc11      	bgt.n	800a8b4 <USBH_ParseDevDesc+0x86>
 800a890:	2b08      	cmp	r3, #8
 800a892:	db16      	blt.n	800a8c2 <USBH_ParseDevDesc+0x94>
 800a894:	3b08      	subs	r3, #8
 800a896:	2201      	movs	r2, #1
 800a898:	fa02 f303 	lsl.w	r3, r2, r3
 800a89c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a8a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bf14      	ite	ne
 800a8a8:	2301      	movne	r3, #1
 800a8aa:	2300      	moveq	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d102      	bne.n	800a8b8 <USBH_ParseDevDesc+0x8a>
 800a8b2:	e006      	b.n	800a8c2 <USBH_ParseDevDesc+0x94>
 800a8b4:	2b40      	cmp	r3, #64	; 0x40
 800a8b6:	d104      	bne.n	800a8c2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	79da      	ldrb	r2, [r3, #7]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	71da      	strb	r2, [r3, #7]
      break;
 800a8c0:	e003      	b.n	800a8ca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2240      	movs	r2, #64	; 0x40
 800a8c6:	71da      	strb	r2, [r3, #7]
      break;
 800a8c8:	bf00      	nop
  }

  if (length > 8U)
 800a8ca:	88fb      	ldrh	r3, [r7, #6]
 800a8cc:	2b08      	cmp	r3, #8
 800a8ce:	d939      	bls.n	800a944 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	3308      	adds	r3, #8
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	3309      	adds	r3, #9
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	021b      	lsls	r3, r3, #8
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	330a      	adds	r3, #10
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	330b      	adds	r3, #11
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	021b      	lsls	r3, r3, #8
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	4313      	orrs	r3, r2
 800a902:	b29a      	uxth	r2, r3
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	330c      	adds	r3, #12
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	b29a      	uxth	r2, r3
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	330d      	adds	r3, #13
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	b29b      	uxth	r3, r3
 800a918:	021b      	lsls	r3, r3, #8
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	4313      	orrs	r3, r2
 800a91e:	b29a      	uxth	r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	7b9a      	ldrb	r2, [r3, #14]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	7bda      	ldrb	r2, [r3, #15]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	7c1a      	ldrb	r2, [r3, #16]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	7c5a      	ldrb	r2, [r3, #17]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	745a      	strb	r2, [r3, #17]
  }
}
 800a944:	bf00      	nop
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b08c      	sub	sp, #48	; 0x30
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a964:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a966:	2300      	movs	r3, #0
 800a968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a976:	2300      	movs	r3, #0
 800a978:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	781a      	ldrb	r2, [r3, #0]
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	785a      	ldrb	r2, [r3, #1]
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	3302      	adds	r3, #2
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	b29a      	uxth	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	3303      	adds	r3, #3
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	021b      	lsls	r3, r3, #8
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ac:	bf28      	it	cs
 800a9ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	791a      	ldrb	r2, [r3, #4]
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	795a      	ldrb	r2, [r3, #5]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	799a      	ldrb	r2, [r3, #6]
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	79da      	ldrb	r2, [r3, #7]
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	7a1a      	ldrb	r2, [r3, #8]
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a9e0:	6a3b      	ldr	r3, [r7, #32]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	2b09      	cmp	r3, #9
 800a9e6:	d002      	beq.n	800a9ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a9e8:	6a3b      	ldr	r3, [r7, #32]
 800a9ea:	2209      	movs	r2, #9
 800a9ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a9ee:	88fb      	ldrh	r3, [r7, #6]
 800a9f0:	2b09      	cmp	r3, #9
 800a9f2:	f240 809d 	bls.w	800ab30 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a9f6:	2309      	movs	r3, #9
 800a9f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a9fe:	e081      	b.n	800ab04 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa00:	f107 0316 	add.w	r3, r7, #22
 800aa04:	4619      	mov	r1, r3
 800aa06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa08:	f000 f99f 	bl	800ad4a <USBH_GetNextDesc>
 800aa0c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d176      	bne.n	800ab04 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b09      	cmp	r3, #9
 800aa1c:	d002      	beq.n	800aa24 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	2209      	movs	r2, #9
 800aa22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800aa24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa28:	221a      	movs	r2, #26
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
 800aa2e:	3308      	adds	r3, #8
 800aa30:	6a3a      	ldr	r2, [r7, #32]
 800aa32:	4413      	add	r3, r2
 800aa34:	3302      	adds	r3, #2
 800aa36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aa38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa3a:	69f8      	ldr	r0, [r7, #28]
 800aa3c:	f000 f87e 	bl	800ab3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa4a:	e043      	b.n	800aad4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa4c:	f107 0316 	add.w	r3, r7, #22
 800aa50:	4619      	mov	r1, r3
 800aa52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa54:	f000 f979 	bl	800ad4a <USBH_GetNextDesc>
 800aa58:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5c:	785b      	ldrb	r3, [r3, #1]
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d138      	bne.n	800aad4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	795b      	ldrb	r3, [r3, #5]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10f      	bne.n	800aa8a <USBH_ParseCfgDesc+0x13a>
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	799b      	ldrb	r3, [r3, #6]
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d10b      	bne.n	800aa8a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	79db      	ldrb	r3, [r3, #7]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10f      	bne.n	800aa9a <USBH_ParseCfgDesc+0x14a>
 800aa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	2b09      	cmp	r3, #9
 800aa80:	d00b      	beq.n	800aa9a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800aa82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa84:	2209      	movs	r2, #9
 800aa86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa88:	e007      	b.n	800aa9a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b07      	cmp	r3, #7
 800aa90:	d004      	beq.n	800aa9c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	2207      	movs	r2, #7
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	e000      	b.n	800aa9c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aa9a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaa0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aaa4:	3201      	adds	r2, #1
 800aaa6:	00d2      	lsls	r2, r2, #3
 800aaa8:	211a      	movs	r1, #26
 800aaaa:	fb01 f303 	mul.w	r3, r1, r3
 800aaae:	4413      	add	r3, r2
 800aab0:	3308      	adds	r3, #8
 800aab2:	6a3a      	ldr	r2, [r7, #32]
 800aab4:	4413      	add	r3, r2
 800aab6:	3304      	adds	r3, #4
 800aab8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800aaba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aabc:	69b9      	ldr	r1, [r7, #24]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f86b 	bl	800ab9a <USBH_ParseEPDesc>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800aaca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aace:	3301      	adds	r3, #1
 800aad0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aad4:	69fb      	ldr	r3, [r7, #28]
 800aad6:	791b      	ldrb	r3, [r3, #4]
 800aad8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aadc:	429a      	cmp	r2, r3
 800aade:	d204      	bcs.n	800aaea <USBH_ParseCfgDesc+0x19a>
 800aae0:	6a3b      	ldr	r3, [r7, #32]
 800aae2:	885a      	ldrh	r2, [r3, #2]
 800aae4:	8afb      	ldrh	r3, [r7, #22]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d8b0      	bhi.n	800aa4c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	791b      	ldrb	r3, [r3, #4]
 800aaee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d201      	bcs.n	800aafa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e01c      	b.n	800ab34 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800aafa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aafe:	3301      	adds	r3, #1
 800ab00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d805      	bhi.n	800ab18 <USBH_ParseCfgDesc+0x1c8>
 800ab0c:	6a3b      	ldr	r3, [r7, #32]
 800ab0e:	885a      	ldrh	r2, [r3, #2]
 800ab10:	8afb      	ldrh	r3, [r7, #22]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	f63f af74 	bhi.w	800aa00 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	791b      	ldrb	r3, [r3, #4]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	bf28      	it	cs
 800ab20:	2302      	movcs	r3, #2
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d201      	bcs.n	800ab30 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e001      	b.n	800ab34 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800ab30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3730      	adds	r7, #48	; 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	785a      	ldrb	r2, [r3, #1]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	789a      	ldrb	r2, [r3, #2]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	78da      	ldrb	r2, [r3, #3]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	791a      	ldrb	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	795a      	ldrb	r2, [r3, #5]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	799a      	ldrb	r2, [r3, #6]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	79da      	ldrb	r2, [r3, #7]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	7a1a      	ldrb	r2, [r3, #8]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	721a      	strb	r2, [r3, #8]
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b087      	sub	sp, #28
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	781a      	ldrb	r2, [r3, #0]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	785a      	ldrb	r2, [r3, #1]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	789a      	ldrb	r2, [r3, #2]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	78da      	ldrb	r2, [r3, #3]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	3304      	adds	r3, #4
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3305      	adds	r3, #5
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	b29b      	uxth	r3, r3
 800abda:	021b      	lsls	r3, r3, #8
 800abdc:	b29b      	uxth	r3, r3
 800abde:	4313      	orrs	r3, r2
 800abe0:	b29a      	uxth	r2, r3
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	799a      	ldrb	r2, [r3, #6]
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	889b      	ldrh	r3, [r3, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d102      	bne.n	800abfc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800abf6:	2303      	movs	r3, #3
 800abf8:	75fb      	strb	r3, [r7, #23]
 800abfa:	e033      	b.n	800ac64 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	889b      	ldrh	r3, [r3, #4]
 800ac00:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ac04:	f023 0307 	bic.w	r3, r3, #7
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	889b      	ldrh	r3, [r3, #4]
 800ac12:	b21a      	sxth	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3304      	adds	r3, #4
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b299      	uxth	r1, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3305      	adds	r3, #5
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	021b      	lsls	r3, r3, #8
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	430b      	orrs	r3, r1
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d110      	bne.n	800ac56 <USBH_ParseEPDesc+0xbc>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3304      	adds	r3, #4
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b299      	uxth	r1, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	3305      	adds	r3, #5
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	b21b      	sxth	r3, r3
 800ac4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac52:	b21b      	sxth	r3, r3
 800ac54:	e001      	b.n	800ac5a <USBH_ParseEPDesc+0xc0>
 800ac56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	b21b      	sxth	r3, r3
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d116      	bne.n	800ac9c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	78db      	ldrb	r3, [r3, #3]
 800ac72:	f003 0303 	and.w	r3, r3, #3
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d005      	beq.n	800ac86 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	78db      	ldrb	r3, [r3, #3]
 800ac7e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d127      	bne.n	800acd6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	799b      	ldrb	r3, [r3, #6]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d003      	beq.n	800ac96 <USBH_ParseEPDesc+0xfc>
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	799b      	ldrb	r3, [r3, #6]
 800ac92:	2b10      	cmp	r3, #16
 800ac94:	d91f      	bls.n	800acd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800ac96:	2303      	movs	r3, #3
 800ac98:	75fb      	strb	r3, [r7, #23]
 800ac9a:	e01c      	b.n	800acd6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	78db      	ldrb	r3, [r3, #3]
 800aca0:	f003 0303 	and.w	r3, r3, #3
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d10a      	bne.n	800acbe <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	799b      	ldrb	r3, [r3, #6]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <USBH_ParseEPDesc+0x11e>
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	799b      	ldrb	r3, [r3, #6]
 800acb4:	2b10      	cmp	r3, #16
 800acb6:	d90e      	bls.n	800acd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800acb8:	2303      	movs	r3, #3
 800acba:	75fb      	strb	r3, [r7, #23]
 800acbc:	e00b      	b.n	800acd6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	78db      	ldrb	r3, [r3, #3]
 800acc2:	f003 0303 	and.w	r3, r3, #3
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d105      	bne.n	800acd6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	799b      	ldrb	r3, [r3, #6]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800acd2:	2303      	movs	r3, #3
 800acd4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	371c      	adds	r7, #28
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b087      	sub	sp, #28
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	3301      	adds	r3, #1
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d120      	bne.n	800ad3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	1e9a      	subs	r2, r3, #2
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	4293      	cmp	r3, r2
 800ad06:	bf28      	it	cs
 800ad08:	4613      	movcs	r3, r2
 800ad0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3302      	adds	r3, #2
 800ad10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ad12:	2300      	movs	r3, #0
 800ad14:	82fb      	strh	r3, [r7, #22]
 800ad16:	e00b      	b.n	800ad30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ad18:	8afb      	ldrh	r3, [r7, #22]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	781a      	ldrb	r2, [r3, #0]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	3301      	adds	r3, #1
 800ad28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ad2a:	8afb      	ldrh	r3, [r7, #22]
 800ad2c:	3302      	adds	r3, #2
 800ad2e:	82fb      	strh	r3, [r7, #22]
 800ad30:	8afa      	ldrh	r2, [r7, #22]
 800ad32:	8abb      	ldrh	r3, [r7, #20]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d3ef      	bcc.n	800ad18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
  }
}
 800ad3e:	bf00      	nop
 800ad40:	371c      	adds	r7, #28
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ad4a:	b480      	push	{r7}
 800ad4c:	b085      	sub	sp, #20
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	881a      	ldrh	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4413      	add	r3, r2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4413      	add	r3, r2
 800ad70:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad72:	68fb      	ldr	r3, [r7, #12]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	789b      	ldrb	r3, [r3, #2]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d002      	beq.n	800ada0 <USBH_CtlReq+0x20>
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d00f      	beq.n	800adbe <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ad9e:	e027      	b.n	800adf0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	68ba      	ldr	r2, [r7, #8]
 800ada4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	88fa      	ldrh	r2, [r7, #6]
 800adaa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2201      	movs	r2, #1
 800adb0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2202      	movs	r2, #2
 800adb6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800adb8:	2301      	movs	r3, #1
 800adba:	75fb      	strb	r3, [r7, #23]
      break;
 800adbc:	e018      	b.n	800adf0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f81c 	bl	800adfc <USBH_HandleControl>
 800adc4:	4603      	mov	r3, r0
 800adc6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <USBH_CtlReq+0x54>
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	2b03      	cmp	r3, #3
 800add2:	d106      	bne.n	800ade2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2201      	movs	r2, #1
 800add8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	761a      	strb	r2, [r3, #24]
      break;
 800ade0:	e005      	b.n	800adee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ade2:	7dfb      	ldrb	r3, [r7, #23]
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d102      	bne.n	800adee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2201      	movs	r2, #1
 800adec:	709a      	strb	r2, [r3, #2]
      break;
 800adee:	bf00      	nop
  }
  return status;
 800adf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae04:	2301      	movs	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	7e1b      	ldrb	r3, [r3, #24]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	2b0a      	cmp	r3, #10
 800ae14:	f200 8156 	bhi.w	800b0c4 <USBH_HandleControl+0x2c8>
 800ae18:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <USBH_HandleControl+0x24>)
 800ae1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae1e:	bf00      	nop
 800ae20:	0800ae4d 	.word	0x0800ae4d
 800ae24:	0800ae67 	.word	0x0800ae67
 800ae28:	0800aed1 	.word	0x0800aed1
 800ae2c:	0800aef7 	.word	0x0800aef7
 800ae30:	0800af2f 	.word	0x0800af2f
 800ae34:	0800af59 	.word	0x0800af59
 800ae38:	0800afab 	.word	0x0800afab
 800ae3c:	0800afcd 	.word	0x0800afcd
 800ae40:	0800b009 	.word	0x0800b009
 800ae44:	0800b02f 	.word	0x0800b02f
 800ae48:	0800b06d 	.word	0x0800b06d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f103 0110 	add.w	r1, r3, #16
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	795b      	ldrb	r3, [r3, #5]
 800ae56:	461a      	mov	r2, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f943 	bl	800b0e4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2202      	movs	r2, #2
 800ae62:	761a      	strb	r2, [r3, #24]
      break;
 800ae64:	e139      	b.n	800b0da <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	795b      	ldrb	r3, [r3, #5]
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 fd27 	bl	800b8c0 <USBH_LL_GetURBState>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d11e      	bne.n	800aeba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	7c1b      	ldrb	r3, [r3, #16]
 800ae80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae84:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	8adb      	ldrh	r3, [r3, #22]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae8e:	7b7b      	ldrb	r3, [r7, #13]
 800ae90:	2b80      	cmp	r3, #128	; 0x80
 800ae92:	d103      	bne.n	800ae9c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2203      	movs	r2, #3
 800ae98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae9a:	e115      	b.n	800b0c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2205      	movs	r2, #5
 800aea0:	761a      	strb	r2, [r3, #24]
      break;
 800aea2:	e111      	b.n	800b0c8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800aea4:	7b7b      	ldrb	r3, [r7, #13]
 800aea6:	2b80      	cmp	r3, #128	; 0x80
 800aea8:	d103      	bne.n	800aeb2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2209      	movs	r2, #9
 800aeae:	761a      	strb	r2, [r3, #24]
      break;
 800aeb0:	e10a      	b.n	800b0c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2207      	movs	r2, #7
 800aeb6:	761a      	strb	r2, [r3, #24]
      break;
 800aeb8:	e106      	b.n	800b0c8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800aeba:	7bbb      	ldrb	r3, [r7, #14]
 800aebc:	2b04      	cmp	r3, #4
 800aebe:	d003      	beq.n	800aec8 <USBH_HandleControl+0xcc>
 800aec0:	7bbb      	ldrb	r3, [r7, #14]
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	f040 8100 	bne.w	800b0c8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	220b      	movs	r2, #11
 800aecc:	761a      	strb	r2, [r3, #24]
      break;
 800aece:	e0fb      	b.n	800b0c8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6899      	ldr	r1, [r3, #8]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	899a      	ldrh	r2, [r3, #12]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	791b      	ldrb	r3, [r3, #4]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f93a 	bl	800b162 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2204      	movs	r2, #4
 800aef2:	761a      	strb	r2, [r3, #24]
      break;
 800aef4:	e0f1      	b.n	800b0da <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	791b      	ldrb	r3, [r3, #4]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 fcdf 	bl	800b8c0 <USBH_LL_GetURBState>
 800af02:	4603      	mov	r3, r0
 800af04:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800af06:	7bbb      	ldrb	r3, [r7, #14]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d102      	bne.n	800af12 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2209      	movs	r2, #9
 800af10:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800af12:	7bbb      	ldrb	r3, [r7, #14]
 800af14:	2b05      	cmp	r3, #5
 800af16:	d102      	bne.n	800af1e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800af18:	2303      	movs	r3, #3
 800af1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af1c:	e0d6      	b.n	800b0cc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800af1e:	7bbb      	ldrb	r3, [r7, #14]
 800af20:	2b04      	cmp	r3, #4
 800af22:	f040 80d3 	bne.w	800b0cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	220b      	movs	r2, #11
 800af2a:	761a      	strb	r2, [r3, #24]
      break;
 800af2c:	e0ce      	b.n	800b0cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6899      	ldr	r1, [r3, #8]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	899a      	ldrh	r2, [r3, #12]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	795b      	ldrb	r3, [r3, #5]
 800af3a:	2001      	movs	r0, #1
 800af3c:	9000      	str	r0, [sp, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f8ea 	bl	800b118 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2206      	movs	r2, #6
 800af54:	761a      	strb	r2, [r3, #24]
      break;
 800af56:	e0c0      	b.n	800b0da <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	795b      	ldrb	r3, [r3, #5]
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fcae 	bl	800b8c0 <USBH_LL_GetURBState>
 800af64:	4603      	mov	r3, r0
 800af66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d103      	bne.n	800af76 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2207      	movs	r2, #7
 800af72:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800af74:	e0ac      	b.n	800b0d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800af76:	7bbb      	ldrb	r3, [r7, #14]
 800af78:	2b05      	cmp	r3, #5
 800af7a:	d105      	bne.n	800af88 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	220c      	movs	r2, #12
 800af80:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af82:	2303      	movs	r3, #3
 800af84:	73fb      	strb	r3, [r7, #15]
      break;
 800af86:	e0a3      	b.n	800b0d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d103      	bne.n	800af96 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2205      	movs	r2, #5
 800af92:	761a      	strb	r2, [r3, #24]
      break;
 800af94:	e09c      	b.n	800b0d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800af96:	7bbb      	ldrb	r3, [r7, #14]
 800af98:	2b04      	cmp	r3, #4
 800af9a:	f040 8099 	bne.w	800b0d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	220b      	movs	r2, #11
 800afa2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800afa4:	2302      	movs	r3, #2
 800afa6:	73fb      	strb	r3, [r7, #15]
      break;
 800afa8:	e092      	b.n	800b0d0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	791b      	ldrb	r3, [r3, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	2100      	movs	r1, #0
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f8d5 	bl	800b162 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2208      	movs	r2, #8
 800afc8:	761a      	strb	r2, [r3, #24]

      break;
 800afca:	e086      	b.n	800b0da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	791b      	ldrb	r3, [r3, #4]
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 fc74 	bl	800b8c0 <USBH_LL_GetURBState>
 800afd8:	4603      	mov	r3, r0
 800afda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d105      	bne.n	800afee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	220d      	movs	r2, #13
 800afe6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800afec:	e072      	b.n	800b0d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d103      	bne.n	800affc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	220b      	movs	r2, #11
 800aff8:	761a      	strb	r2, [r3, #24]
      break;
 800affa:	e06b      	b.n	800b0d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	2b05      	cmp	r3, #5
 800b000:	d168      	bne.n	800b0d4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b002:	2303      	movs	r3, #3
 800b004:	73fb      	strb	r3, [r7, #15]
      break;
 800b006:	e065      	b.n	800b0d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	795b      	ldrb	r3, [r3, #5]
 800b00c:	2201      	movs	r2, #1
 800b00e:	9200      	str	r2, [sp, #0]
 800b010:	2200      	movs	r2, #0
 800b012:	2100      	movs	r1, #0
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f87f 	bl	800b118 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b020:	b29a      	uxth	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	220a      	movs	r2, #10
 800b02a:	761a      	strb	r2, [r3, #24]
      break;
 800b02c:	e055      	b.n	800b0da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	795b      	ldrb	r3, [r3, #5]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fc43 	bl	800b8c0 <USBH_LL_GetURBState>
 800b03a:	4603      	mov	r3, r0
 800b03c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d105      	bne.n	800b050 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	220d      	movs	r2, #13
 800b04c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b04e:	e043      	b.n	800b0d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	2b02      	cmp	r3, #2
 800b054:	d103      	bne.n	800b05e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2209      	movs	r2, #9
 800b05a:	761a      	strb	r2, [r3, #24]
      break;
 800b05c:	e03c      	b.n	800b0d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	2b04      	cmp	r3, #4
 800b062:	d139      	bne.n	800b0d8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	220b      	movs	r2, #11
 800b068:	761a      	strb	r2, [r3, #24]
      break;
 800b06a:	e035      	b.n	800b0d8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	7e5b      	ldrb	r3, [r3, #25]
 800b070:	3301      	adds	r3, #1
 800b072:	b2da      	uxtb	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	765a      	strb	r2, [r3, #25]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	7e5b      	ldrb	r3, [r3, #25]
 800b07c:	2b02      	cmp	r3, #2
 800b07e:	d806      	bhi.n	800b08e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b08c:	e025      	b.n	800b0da <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b094:	2106      	movs	r1, #6
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	795b      	ldrb	r3, [r3, #5]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f90c 	bl	800b2c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	791b      	ldrb	r3, [r3, #4]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f906 	bl	800b2c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b0be:	2302      	movs	r3, #2
 800b0c0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c2:	e00a      	b.n	800b0da <USBH_HandleControl+0x2de>

    default:
      break;
 800b0c4:	bf00      	nop
 800b0c6:	e008      	b.n	800b0da <USBH_HandleControl+0x2de>
      break;
 800b0c8:	bf00      	nop
 800b0ca:	e006      	b.n	800b0da <USBH_HandleControl+0x2de>
      break;
 800b0cc:	bf00      	nop
 800b0ce:	e004      	b.n	800b0da <USBH_HandleControl+0x2de>
      break;
 800b0d0:	bf00      	nop
 800b0d2:	e002      	b.n	800b0da <USBH_HandleControl+0x2de>
      break;
 800b0d4:	bf00      	nop
 800b0d6:	e000      	b.n	800b0da <USBH_HandleControl+0x2de>
      break;
 800b0d8:	bf00      	nop
  }

  return status;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b088      	sub	sp, #32
 800b0e8:	af04      	add	r7, sp, #16
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b0f2:	79f9      	ldrb	r1, [r7, #7]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	9303      	str	r3, [sp, #12]
 800b0f8:	2308      	movs	r3, #8
 800b0fa:	9302      	str	r3, [sp, #8]
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	2300      	movs	r3, #0
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	2300      	movs	r3, #0
 800b106:	2200      	movs	r2, #0
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 fba8 	bl	800b85e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af04      	add	r7, sp, #16
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	4611      	mov	r1, r2
 800b124:	461a      	mov	r2, r3
 800b126:	460b      	mov	r3, r1
 800b128:	80fb      	strh	r3, [r7, #6]
 800b12a:	4613      	mov	r3, r2
 800b12c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b13c:	7979      	ldrb	r1, [r7, #5]
 800b13e:	7e3b      	ldrb	r3, [r7, #24]
 800b140:	9303      	str	r3, [sp, #12]
 800b142:	88fb      	ldrh	r3, [r7, #6]
 800b144:	9302      	str	r3, [sp, #8]
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	9301      	str	r3, [sp, #4]
 800b14a:	2301      	movs	r3, #1
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	2300      	movs	r3, #0
 800b150:	2200      	movs	r2, #0
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 fb83 	bl	800b85e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b088      	sub	sp, #32
 800b166:	af04      	add	r7, sp, #16
 800b168:	60f8      	str	r0, [r7, #12]
 800b16a:	60b9      	str	r1, [r7, #8]
 800b16c:	4611      	mov	r1, r2
 800b16e:	461a      	mov	r2, r3
 800b170:	460b      	mov	r3, r1
 800b172:	80fb      	strh	r3, [r7, #6]
 800b174:	4613      	mov	r3, r2
 800b176:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b178:	7979      	ldrb	r1, [r7, #5]
 800b17a:	2300      	movs	r3, #0
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	88fb      	ldrh	r3, [r7, #6]
 800b180:	9302      	str	r3, [sp, #8]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	2301      	movs	r3, #1
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	2201      	movs	r2, #1
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f000 fb65 	bl	800b85e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b194:	2300      	movs	r3, #0

}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b088      	sub	sp, #32
 800b1a2:	af04      	add	r7, sp, #16
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	80fb      	strh	r3, [r7, #6]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1c2:	7979      	ldrb	r1, [r7, #5]
 800b1c4:	7e3b      	ldrb	r3, [r7, #24]
 800b1c6:	9303      	str	r3, [sp, #12]
 800b1c8:	88fb      	ldrh	r3, [r7, #6]
 800b1ca:	9302      	str	r3, [sp, #8]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fb40 	bl	800b85e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b088      	sub	sp, #32
 800b1ec:	af04      	add	r7, sp, #16
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	80fb      	strh	r3, [r7, #6]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b1fe:	7979      	ldrb	r1, [r7, #5]
 800b200:	2300      	movs	r3, #0
 800b202:	9303      	str	r3, [sp, #12]
 800b204:	88fb      	ldrh	r3, [r7, #6]
 800b206:	9302      	str	r3, [sp, #8]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	9301      	str	r3, [sp, #4]
 800b20c:	2301      	movs	r3, #1
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	2302      	movs	r3, #2
 800b212:	2201      	movs	r2, #1
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f000 fb22 	bl	800b85e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b21a:	2300      	movs	r3, #0
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3710      	adds	r7, #16
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af04      	add	r7, sp, #16
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	4608      	mov	r0, r1
 800b22e:	4611      	mov	r1, r2
 800b230:	461a      	mov	r2, r3
 800b232:	4603      	mov	r3, r0
 800b234:	70fb      	strb	r3, [r7, #3]
 800b236:	460b      	mov	r3, r1
 800b238:	70bb      	strb	r3, [r7, #2]
 800b23a:	4613      	mov	r3, r2
 800b23c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b23e:	7878      	ldrb	r0, [r7, #1]
 800b240:	78ba      	ldrb	r2, [r7, #2]
 800b242:	78f9      	ldrb	r1, [r7, #3]
 800b244:	8b3b      	ldrh	r3, [r7, #24]
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	7d3b      	ldrb	r3, [r7, #20]
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	7c3b      	ldrb	r3, [r7, #16]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	4603      	mov	r3, r0
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fab5 	bl	800b7c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	460b      	mov	r3, r1
 800b26c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b26e:	78fb      	ldrb	r3, [r7, #3]
 800b270:	4619      	mov	r1, r3
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fad4 	bl	800b820 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	460b      	mov	r3, r1
 800b28c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 f836 	bl	800b300 <USBH_GetFreePipe>
 800b294:	4603      	mov	r3, r0
 800b296:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b298:	89fb      	ldrh	r3, [r7, #14]
 800b29a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d00a      	beq.n	800b2b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b2a2:	78fa      	ldrb	r2, [r7, #3]
 800b2a4:	89fb      	ldrh	r3, [r7, #14]
 800b2a6:	f003 030f 	and.w	r3, r3, #15
 800b2aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2ae:	6879      	ldr	r1, [r7, #4]
 800b2b0:	33e0      	adds	r3, #224	; 0xe0
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b2b8:	89fb      	ldrh	r3, [r7, #14]
 800b2ba:	b2db      	uxtb	r3, r3
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b2d0:	78fb      	ldrb	r3, [r7, #3]
 800b2d2:	2b0f      	cmp	r3, #15
 800b2d4:	d80d      	bhi.n	800b2f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b2d6:	78fb      	ldrb	r3, [r7, #3]
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	33e0      	adds	r3, #224	; 0xe0
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4413      	add	r3, r2
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	78fb      	ldrb	r3, [r7, #3]
 800b2e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	33e0      	adds	r3, #224	; 0xe0
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	440b      	add	r3, r1
 800b2f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b30c:	2300      	movs	r3, #0
 800b30e:	73fb      	strb	r3, [r7, #15]
 800b310:	e00f      	b.n	800b332 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	33e0      	adds	r3, #224	; 0xe0
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4413      	add	r3, r2
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b322:	2b00      	cmp	r3, #0
 800b324:	d102      	bne.n	800b32c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	e007      	b.n	800b33c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	3301      	adds	r3, #1
 800b330:	73fb      	strb	r3, [r7, #15]
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	2b0f      	cmp	r3, #15
 800b336:	d9ec      	bls.n	800b312 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b338:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3714      	adds	r7, #20
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr

0800b348 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b348:	b480      	push	{r7}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	60b9      	str	r1, [r7, #8]
 800b352:	4613      	mov	r3, r2
 800b354:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b356:	2301      	movs	r3, #1
 800b358:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b35e:	4b1f      	ldr	r3, [pc, #124]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b360:	7a5b      	ldrb	r3, [r3, #9]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	2b00      	cmp	r3, #0
 800b366:	d131      	bne.n	800b3cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b368:	4b1c      	ldr	r3, [pc, #112]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b36a:	7a5b      	ldrb	r3, [r3, #9]
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	461a      	mov	r2, r3
 800b370:	4b1a      	ldr	r3, [pc, #104]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b372:	2100      	movs	r1, #0
 800b374:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b376:	4b19      	ldr	r3, [pc, #100]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b378:	7a5b      	ldrb	r3, [r3, #9]
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	4a17      	ldr	r2, [pc, #92]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b386:	4b15      	ldr	r3, [pc, #84]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b388:	7a5b      	ldrb	r3, [r3, #9]
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b390:	4413      	add	r3, r2
 800b392:	79fa      	ldrb	r2, [r7, #7]
 800b394:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b396:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b398:	7a5b      	ldrb	r3, [r3, #9]
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	b2d1      	uxtb	r1, r2
 800b3a0:	4a0e      	ldr	r2, [pc, #56]	; (800b3dc <FATFS_LinkDriverEx+0x94>)
 800b3a2:	7251      	strb	r1, [r2, #9]
 800b3a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b3a6:	7dbb      	ldrb	r3, [r7, #22]
 800b3a8:	3330      	adds	r3, #48	; 0x30
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	223a      	movs	r2, #58	; 0x3a
 800b3b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	3302      	adds	r3, #2
 800b3bc:	222f      	movs	r2, #47	; 0x2f
 800b3be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	3303      	adds	r3, #3
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	371c      	adds	r7, #28
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	200031dc 	.word	0x200031dc

0800b3e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff ffaa 	bl	800b348 <FATFS_LinkDriverEx>
 800b3f4:	4603      	mov	r3, r0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
	...

0800b400 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b404:	2200      	movs	r2, #0
 800b406:	490e      	ldr	r1, [pc, #56]	; (800b440 <MX_USB_HOST_Init+0x40>)
 800b408:	480e      	ldr	r0, [pc, #56]	; (800b444 <MX_USB_HOST_Init+0x44>)
 800b40a:	f7fe fb4b 	bl	8009aa4 <USBH_Init>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d001      	beq.n	800b418 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b414:	f7f6 f9e4 	bl	80017e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 800b418:	490b      	ldr	r1, [pc, #44]	; (800b448 <MX_USB_HOST_Init+0x48>)
 800b41a:	480a      	ldr	r0, [pc, #40]	; (800b444 <MX_USB_HOST_Init+0x44>)
 800b41c:	f7fe fbd0 	bl	8009bc0 <USBH_RegisterClass>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d001      	beq.n	800b42a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b426:	f7f6 f9db 	bl	80017e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b42a:	4806      	ldr	r0, [pc, #24]	; (800b444 <MX_USB_HOST_Init+0x44>)
 800b42c:	f7fe fc54 	bl	8009cd8 <USBH_Start>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b436:	f7f6 f9d3 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b43a:	bf00      	nop
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	0800b461 	.word	0x0800b461
 800b444:	200031e8 	.word	0x200031e8
 800b448:	20000010 	.word	0x20000010

0800b44c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800b450:	4802      	ldr	r0, [pc, #8]	; (800b45c <MX_USB_HOST_Process+0x10>)
 800b452:	f7fe fc51 	bl	8009cf8 <USBH_Process>
}
 800b456:	bf00      	nop
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	200031e8 	.word	0x200031e8

0800b460 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	3b01      	subs	r3, #1
 800b470:	2b04      	cmp	r3, #4
 800b472:	d819      	bhi.n	800b4a8 <USBH_UserProcess+0x48>
 800b474:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <USBH_UserProcess+0x1c>)
 800b476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47a:	bf00      	nop
 800b47c:	0800b4a9 	.word	0x0800b4a9
 800b480:	0800b499 	.word	0x0800b499
 800b484:	0800b4a9 	.word	0x0800b4a9
 800b488:	0800b4a1 	.word	0x0800b4a1
 800b48c:	0800b491 	.word	0x0800b491
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b490:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <USBH_UserProcess+0x58>)
 800b492:	2203      	movs	r2, #3
 800b494:	701a      	strb	r2, [r3, #0]
  break;
 800b496:	e008      	b.n	800b4aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <USBH_UserProcess+0x58>)
 800b49a:	2202      	movs	r2, #2
 800b49c:	701a      	strb	r2, [r3, #0]
  break;
 800b49e:	e004      	b.n	800b4aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <USBH_UserProcess+0x58>)
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	701a      	strb	r2, [r3, #0]
  break;
 800b4a6:	e000      	b.n	800b4aa <USBH_UserProcess+0x4a>

  default:
  break;
 800b4a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b4aa:	bf00      	nop
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	200035c0 	.word	0x200035c0

0800b4bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08a      	sub	sp, #40	; 0x28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4c4:	f107 0314 	add.w	r3, r7, #20
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	605a      	str	r2, [r3, #4]
 800b4ce:	609a      	str	r2, [r3, #8]
 800b4d0:	60da      	str	r2, [r3, #12]
 800b4d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a24      	ldr	r2, [pc, #144]	; (800b56c <HAL_HCD_MspInit+0xb0>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d141      	bne.n	800b562 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]
 800b4e2:	4b23      	ldr	r3, [pc, #140]	; (800b570 <HAL_HCD_MspInit+0xb4>)
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e6:	4a22      	ldr	r2, [pc, #136]	; (800b570 <HAL_HCD_MspInit+0xb4>)
 800b4e8:	f043 0302 	orr.w	r3, r3, #2
 800b4ec:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ee:	4b20      	ldr	r3, [pc, #128]	; (800b570 <HAL_HCD_MspInit+0xb4>)
 800b4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f2:	f003 0302 	and.w	r3, r3, #2
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800b4fa:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800b4fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b500:	2302      	movs	r3, #2
 800b502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b508:	2300      	movs	r3, #0
 800b50a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b50c:	230c      	movs	r3, #12
 800b50e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b510:	f107 0314 	add.w	r3, r7, #20
 800b514:	4619      	mov	r1, r3
 800b516:	4817      	ldr	r0, [pc, #92]	; (800b574 <HAL_HCD_MspInit+0xb8>)
 800b518:	f7f6 fe12 	bl	8002140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800b51c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b522:	2300      	movs	r3, #0
 800b524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b526:	2300      	movs	r3, #0
 800b528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800b52a:	f107 0314 	add.w	r3, r7, #20
 800b52e:	4619      	mov	r1, r3
 800b530:	4810      	ldr	r0, [pc, #64]	; (800b574 <HAL_HCD_MspInit+0xb8>)
 800b532:	f7f6 fe05 	bl	8002140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b536:	2300      	movs	r3, #0
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	4b0d      	ldr	r3, [pc, #52]	; (800b570 <HAL_HCD_MspInit+0xb4>)
 800b53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53e:	4a0c      	ldr	r2, [pc, #48]	; (800b570 <HAL_HCD_MspInit+0xb4>)
 800b540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b544:	6313      	str	r3, [r2, #48]	; 0x30
 800b546:	4b0a      	ldr	r3, [pc, #40]	; (800b570 <HAL_HCD_MspInit+0xb4>)
 800b548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b54e:	60fb      	str	r3, [r7, #12]
 800b550:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b552:	2200      	movs	r2, #0
 800b554:	2100      	movs	r1, #0
 800b556:	204d      	movs	r0, #77	; 0x4d
 800b558:	f7f6 fd9f 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b55c:	204d      	movs	r0, #77	; 0x4d
 800b55e:	f7f6 fdb8 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b562:	bf00      	nop
 800b564:	3728      	adds	r7, #40	; 0x28
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	40040000 	.word	0x40040000
 800b570:	40023800 	.word	0x40023800
 800b574:	40020400 	.word	0x40020400

0800b578 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b586:	4618      	mov	r0, r3
 800b588:	f7fe ff95 	bl	800a4b6 <USBH_LL_IncTimer>
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fe ffcd 	bl	800a542 <USBH_LL_Connect>
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe ffd6 	bl	800a570 <USBH_LL_Disconnect>
}
 800b5c4:	bf00      	nop
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fe ff87 	bl	800a50a <USBH_LL_PortEnabled>
}
 800b5fc:	bf00      	nop
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe ff87 	bl	800a526 <USBH_LL_PortDisabled>
}
 800b618:	bf00      	nop
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d132      	bne.n	800b698 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b632:	4a1c      	ldr	r2, [pc, #112]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a19      	ldr	r2, [pc, #100]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b63e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b642:	4b18      	ldr	r3, [pc, #96]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b644:	4a18      	ldr	r2, [pc, #96]	; (800b6a8 <USBH_LL_Init+0x88>)
 800b646:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b648:	4b16      	ldr	r3, [pc, #88]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b64a:	220c      	movs	r2, #12
 800b64c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b64e:	4b15      	ldr	r3, [pc, #84]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b650:	2201      	movs	r2, #1
 800b652:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b654:	4b13      	ldr	r3, [pc, #76]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b656:	2200      	movs	r2, #0
 800b658:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b65a:	4b12      	ldr	r3, [pc, #72]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b65c:	2202      	movs	r2, #2
 800b65e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b660:	4b10      	ldr	r3, [pc, #64]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b662:	2200      	movs	r2, #0
 800b664:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b668:	2200      	movs	r2, #0
 800b66a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b66c:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b66e:	2200      	movs	r2, #0
 800b670:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b672:	4b0c      	ldr	r3, [pc, #48]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b674:	2200      	movs	r2, #0
 800b676:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b678:	480a      	ldr	r0, [pc, #40]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b67a:	f7f6 ff57 	bl	800252c <HAL_HCD_Init>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b684:	f7f6 f8ac 	bl	80017e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b688:	4806      	ldr	r0, [pc, #24]	; (800b6a4 <USBH_LL_Init+0x84>)
 800b68a:	f7f7 fb3a 	bl	8002d02 <HAL_HCD_GetCurrentFrame>
 800b68e:	4603      	mov	r3, r0
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fe ff00 	bl	800a498 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3708      	adds	r7, #8
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	200035c4 	.word	0x200035c4
 800b6a8:	40040000 	.word	0x40040000

0800b6ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7f7 faa7 	bl	8002c16 <HAL_HCD_Start>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 f98c 	bl	800b9ec <USBH_Get_USB_Status>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7f7 faaf 	bl	8002c5c <HAL_HCD_Stop>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b702:	7bfb      	ldrb	r3, [r7, #15]
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f971 	bl	800b9ec <USBH_Get_USB_Status>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3710      	adds	r7, #16
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}

0800b718 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b720:	2301      	movs	r3, #1
 800b722:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7f7 faf7 	bl	8002d1e <HAL_HCD_GetCurrentSpeed>
 800b730:	4603      	mov	r3, r0
 800b732:	2b02      	cmp	r3, #2
 800b734:	d00c      	beq.n	800b750 <USBH_LL_GetSpeed+0x38>
 800b736:	2b02      	cmp	r3, #2
 800b738:	d80d      	bhi.n	800b756 <USBH_LL_GetSpeed+0x3e>
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <USBH_LL_GetSpeed+0x2c>
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d003      	beq.n	800b74a <USBH_LL_GetSpeed+0x32>
 800b742:	e008      	b.n	800b756 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b744:	2300      	movs	r3, #0
 800b746:	73fb      	strb	r3, [r7, #15]
    break;
 800b748:	e008      	b.n	800b75c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b74a:	2301      	movs	r3, #1
 800b74c:	73fb      	strb	r3, [r7, #15]
    break;
 800b74e:	e005      	b.n	800b75c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b750:	2302      	movs	r3, #2
 800b752:	73fb      	strb	r3, [r7, #15]
    break;
 800b754:	e002      	b.n	800b75c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b756:	2301      	movs	r3, #1
 800b758:	73fb      	strb	r3, [r7, #15]
    break;
 800b75a:	bf00      	nop
  }
  return  speed;
 800b75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b76e:	2300      	movs	r3, #0
 800b770:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7f7 fa8a 	bl	8002c96 <HAL_HCD_ResetPort>
 800b782:	4603      	mov	r3, r0
 800b784:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 f92f 	bl	800b9ec <USBH_Get_USB_Status>
 800b78e:	4603      	mov	r3, r0
 800b790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b792:	7bbb      	ldrb	r3, [r7, #14]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7ae:	78fa      	ldrb	r2, [r7, #3]
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7f7 fa91 	bl	8002cda <HAL_HCD_HC_GetXferCount>
 800b7b8:	4603      	mov	r3, r0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7c2:	b590      	push	{r4, r7, lr}
 800b7c4:	b089      	sub	sp, #36	; 0x24
 800b7c6:	af04      	add	r7, sp, #16
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	70fb      	strb	r3, [r7, #3]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	70bb      	strb	r3, [r7, #2]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b7ea:	787c      	ldrb	r4, [r7, #1]
 800b7ec:	78ba      	ldrb	r2, [r7, #2]
 800b7ee:	78f9      	ldrb	r1, [r7, #3]
 800b7f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b7f2:	9302      	str	r3, [sp, #8]
 800b7f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	4623      	mov	r3, r4
 800b802:	f7f6 fef5 	bl	80025f0 <HAL_HCD_HC_Init>
 800b806:	4603      	mov	r3, r0
 800b808:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 f8ed 	bl	800b9ec <USBH_Get_USB_Status>
 800b812:	4603      	mov	r3, r0
 800b814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b816:	7bbb      	ldrb	r3, [r7, #14]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd90      	pop	{r4, r7, pc}

0800b820 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	460b      	mov	r3, r1
 800b82a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7f6 ff65 	bl	800270e <HAL_HCD_HC_Halt>
 800b844:	4603      	mov	r3, r0
 800b846:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f8ce 	bl	800b9ec <USBH_Get_USB_Status>
 800b850:	4603      	mov	r3, r0
 800b852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b854:	7bbb      	ldrb	r3, [r7, #14]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b85e:	b590      	push	{r4, r7, lr}
 800b860:	b089      	sub	sp, #36	; 0x24
 800b862:	af04      	add	r7, sp, #16
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	4608      	mov	r0, r1
 800b868:	4611      	mov	r1, r2
 800b86a:	461a      	mov	r2, r3
 800b86c:	4603      	mov	r3, r0
 800b86e:	70fb      	strb	r3, [r7, #3]
 800b870:	460b      	mov	r3, r1
 800b872:	70bb      	strb	r3, [r7, #2]
 800b874:	4613      	mov	r3, r2
 800b876:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b878:	2300      	movs	r3, #0
 800b87a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b886:	787c      	ldrb	r4, [r7, #1]
 800b888:	78ba      	ldrb	r2, [r7, #2]
 800b88a:	78f9      	ldrb	r1, [r7, #3]
 800b88c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b890:	9303      	str	r3, [sp, #12]
 800b892:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b894:	9302      	str	r3, [sp, #8]
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	9301      	str	r3, [sp, #4]
 800b89a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	f7f6 ff57 	bl	8002754 <HAL_HCD_HC_SubmitRequest>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b8aa:	7bfb      	ldrb	r3, [r7, #15]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f000 f89d 	bl	800b9ec <USBH_Get_USB_Status>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3714      	adds	r7, #20
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd90      	pop	{r4, r7, pc}

0800b8c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b8d2:	78fa      	ldrb	r2, [r7, #3]
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f7 f9eb 	bl	8002cb2 <HAL_HCD_HC_GetURBState>
 800b8dc:	4603      	mov	r3, r0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d103      	bne.n	800b904 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 f8a0 	bl	800ba44 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b904:	20c8      	movs	r0, #200	; 0xc8
 800b906:	f7f6 fac9 	bl	8001e9c <HAL_Delay>
  return USBH_OK;
 800b90a:	2300      	movs	r3, #0
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
 800b920:	4613      	mov	r3, r2
 800b922:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b92a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b92c:	78fb      	ldrb	r3, [r7, #3]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	212c      	movs	r1, #44	; 0x2c
 800b932:	fb01 f303 	mul.w	r3, r1, r3
 800b936:	4413      	add	r3, r2
 800b938:	333b      	adds	r3, #59	; 0x3b
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	212c      	movs	r1, #44	; 0x2c
 800b946:	fb01 f303 	mul.w	r3, r1, r3
 800b94a:	4413      	add	r3, r2
 800b94c:	3354      	adds	r3, #84	; 0x54
 800b94e:	78ba      	ldrb	r2, [r7, #2]
 800b950:	701a      	strb	r2, [r3, #0]
 800b952:	e008      	b.n	800b966 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b954:	78fb      	ldrb	r3, [r7, #3]
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	212c      	movs	r1, #44	; 0x2c
 800b95a:	fb01 f303 	mul.w	r3, r1, r3
 800b95e:	4413      	add	r3, r2
 800b960:	3355      	adds	r3, #85	; 0x55
 800b962:	78ba      	ldrb	r2, [r7, #2]
 800b964:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b980:	2300      	movs	r3, #0
 800b982:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b98a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b98c:	78fb      	ldrb	r3, [r7, #3]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	212c      	movs	r1, #44	; 0x2c
 800b992:	fb01 f303 	mul.w	r3, r1, r3
 800b996:	4413      	add	r3, r2
 800b998:	333b      	adds	r3, #59	; 0x3b
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d009      	beq.n	800b9b4 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b9a0:	78fb      	ldrb	r3, [r7, #3]
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	212c      	movs	r1, #44	; 0x2c
 800b9a6:	fb01 f303 	mul.w	r3, r1, r3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	3354      	adds	r3, #84	; 0x54
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	73fb      	strb	r3, [r7, #15]
 800b9b2:	e008      	b.n	800b9c6 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	212c      	movs	r1, #44	; 0x2c
 800b9ba:	fb01 f303 	mul.w	r3, r1, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	3355      	adds	r3, #85	; 0x55
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7f6 fa5d 	bl	8001e9c <HAL_Delay>
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
	...

0800b9ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b9fa:	79fb      	ldrb	r3, [r7, #7]
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	d817      	bhi.n	800ba30 <USBH_Get_USB_Status+0x44>
 800ba00:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <USBH_Get_USB_Status+0x1c>)
 800ba02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba06:	bf00      	nop
 800ba08:	0800ba19 	.word	0x0800ba19
 800ba0c:	0800ba1f 	.word	0x0800ba1f
 800ba10:	0800ba25 	.word	0x0800ba25
 800ba14:	0800ba2b 	.word	0x0800ba2b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba1c:	e00b      	b.n	800ba36 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	73fb      	strb	r3, [r7, #15]
    break;
 800ba22:	e008      	b.n	800ba36 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba24:	2301      	movs	r3, #1
 800ba26:	73fb      	strb	r3, [r7, #15]
    break;
 800ba28:	e005      	b.n	800ba36 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba2e:	e002      	b.n	800ba36 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ba30:	2302      	movs	r3, #2
 800ba32:	73fb      	strb	r3, [r7, #15]
    break;
 800ba34:	bf00      	nop
  }
  return usb_status;
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ba4e:	79fb      	ldrb	r3, [r7, #7]
 800ba50:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ba52:	79fb      	ldrb	r3, [r7, #7]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d102      	bne.n	800ba5e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	73fb      	strb	r3, [r7, #15]
 800ba5c:	e001      	b.n	800ba62 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ba62:	7bfb      	ldrb	r3, [r7, #15]
 800ba64:	461a      	mov	r2, r3
 800ba66:	2110      	movs	r1, #16
 800ba68:	4803      	ldr	r0, [pc, #12]	; (800ba78 <MX_DriverVbusHS+0x34>)
 800ba6a:	f7f6 fd2d 	bl	80024c8 <HAL_GPIO_WritePin>
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	40020800 	.word	0x40020800

0800ba7c <__errno>:
 800ba7c:	4b01      	ldr	r3, [pc, #4]	; (800ba84 <__errno+0x8>)
 800ba7e:	6818      	ldr	r0, [r3, #0]
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20000030 	.word	0x20000030

0800ba88 <__libc_init_array>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	4d0d      	ldr	r5, [pc, #52]	; (800bac0 <__libc_init_array+0x38>)
 800ba8c:	4c0d      	ldr	r4, [pc, #52]	; (800bac4 <__libc_init_array+0x3c>)
 800ba8e:	1b64      	subs	r4, r4, r5
 800ba90:	10a4      	asrs	r4, r4, #2
 800ba92:	2600      	movs	r6, #0
 800ba94:	42a6      	cmp	r6, r4
 800ba96:	d109      	bne.n	800baac <__libc_init_array+0x24>
 800ba98:	4d0b      	ldr	r5, [pc, #44]	; (800bac8 <__libc_init_array+0x40>)
 800ba9a:	4c0c      	ldr	r4, [pc, #48]	; (800bacc <__libc_init_array+0x44>)
 800ba9c:	f000 f93c 	bl	800bd18 <_init>
 800baa0:	1b64      	subs	r4, r4, r5
 800baa2:	10a4      	asrs	r4, r4, #2
 800baa4:	2600      	movs	r6, #0
 800baa6:	42a6      	cmp	r6, r4
 800baa8:	d105      	bne.n	800bab6 <__libc_init_array+0x2e>
 800baaa:	bd70      	pop	{r4, r5, r6, pc}
 800baac:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab0:	4798      	blx	r3
 800bab2:	3601      	adds	r6, #1
 800bab4:	e7ee      	b.n	800ba94 <__libc_init_array+0xc>
 800bab6:	f855 3b04 	ldr.w	r3, [r5], #4
 800baba:	4798      	blx	r3
 800babc:	3601      	adds	r6, #1
 800babe:	e7f2      	b.n	800baa6 <__libc_init_array+0x1e>
 800bac0:	0800bd68 	.word	0x0800bd68
 800bac4:	0800bd68 	.word	0x0800bd68
 800bac8:	0800bd68 	.word	0x0800bd68
 800bacc:	0800bd6c 	.word	0x0800bd6c

0800bad0 <malloc>:
 800bad0:	4b02      	ldr	r3, [pc, #8]	; (800badc <malloc+0xc>)
 800bad2:	4601      	mov	r1, r0
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	f000 b88d 	b.w	800bbf4 <_malloc_r>
 800bada:	bf00      	nop
 800badc:	20000030 	.word	0x20000030

0800bae0 <free>:
 800bae0:	4b02      	ldr	r3, [pc, #8]	; (800baec <free+0xc>)
 800bae2:	4601      	mov	r1, r0
 800bae4:	6818      	ldr	r0, [r3, #0]
 800bae6:	f000 b819 	b.w	800bb1c <_free_r>
 800baea:	bf00      	nop
 800baec:	20000030 	.word	0x20000030

0800baf0 <memcpy>:
 800baf0:	440a      	add	r2, r1
 800baf2:	4291      	cmp	r1, r2
 800baf4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800baf8:	d100      	bne.n	800bafc <memcpy+0xc>
 800bafa:	4770      	bx	lr
 800bafc:	b510      	push	{r4, lr}
 800bafe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb06:	4291      	cmp	r1, r2
 800bb08:	d1f9      	bne.n	800bafe <memcpy+0xe>
 800bb0a:	bd10      	pop	{r4, pc}

0800bb0c <memset>:
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d100      	bne.n	800bb16 <memset+0xa>
 800bb14:	4770      	bx	lr
 800bb16:	f803 1b01 	strb.w	r1, [r3], #1
 800bb1a:	e7f9      	b.n	800bb10 <memset+0x4>

0800bb1c <_free_r>:
 800bb1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb1e:	2900      	cmp	r1, #0
 800bb20:	d044      	beq.n	800bbac <_free_r+0x90>
 800bb22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb26:	9001      	str	r0, [sp, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f1a1 0404 	sub.w	r4, r1, #4
 800bb2e:	bfb8      	it	lt
 800bb30:	18e4      	addlt	r4, r4, r3
 800bb32:	f000 f8e3 	bl	800bcfc <__malloc_lock>
 800bb36:	4a1e      	ldr	r2, [pc, #120]	; (800bbb0 <_free_r+0x94>)
 800bb38:	9801      	ldr	r0, [sp, #4]
 800bb3a:	6813      	ldr	r3, [r2, #0]
 800bb3c:	b933      	cbnz	r3, 800bb4c <_free_r+0x30>
 800bb3e:	6063      	str	r3, [r4, #4]
 800bb40:	6014      	str	r4, [r2, #0]
 800bb42:	b003      	add	sp, #12
 800bb44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb48:	f000 b8de 	b.w	800bd08 <__malloc_unlock>
 800bb4c:	42a3      	cmp	r3, r4
 800bb4e:	d908      	bls.n	800bb62 <_free_r+0x46>
 800bb50:	6825      	ldr	r5, [r4, #0]
 800bb52:	1961      	adds	r1, r4, r5
 800bb54:	428b      	cmp	r3, r1
 800bb56:	bf01      	itttt	eq
 800bb58:	6819      	ldreq	r1, [r3, #0]
 800bb5a:	685b      	ldreq	r3, [r3, #4]
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	e7ed      	b.n	800bb3e <_free_r+0x22>
 800bb62:	461a      	mov	r2, r3
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	b10b      	cbz	r3, 800bb6c <_free_r+0x50>
 800bb68:	42a3      	cmp	r3, r4
 800bb6a:	d9fa      	bls.n	800bb62 <_free_r+0x46>
 800bb6c:	6811      	ldr	r1, [r2, #0]
 800bb6e:	1855      	adds	r5, r2, r1
 800bb70:	42a5      	cmp	r5, r4
 800bb72:	d10b      	bne.n	800bb8c <_free_r+0x70>
 800bb74:	6824      	ldr	r4, [r4, #0]
 800bb76:	4421      	add	r1, r4
 800bb78:	1854      	adds	r4, r2, r1
 800bb7a:	42a3      	cmp	r3, r4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	d1e0      	bne.n	800bb42 <_free_r+0x26>
 800bb80:	681c      	ldr	r4, [r3, #0]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	6053      	str	r3, [r2, #4]
 800bb86:	4421      	add	r1, r4
 800bb88:	6011      	str	r1, [r2, #0]
 800bb8a:	e7da      	b.n	800bb42 <_free_r+0x26>
 800bb8c:	d902      	bls.n	800bb94 <_free_r+0x78>
 800bb8e:	230c      	movs	r3, #12
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	e7d6      	b.n	800bb42 <_free_r+0x26>
 800bb94:	6825      	ldr	r5, [r4, #0]
 800bb96:	1961      	adds	r1, r4, r5
 800bb98:	428b      	cmp	r3, r1
 800bb9a:	bf04      	itt	eq
 800bb9c:	6819      	ldreq	r1, [r3, #0]
 800bb9e:	685b      	ldreq	r3, [r3, #4]
 800bba0:	6063      	str	r3, [r4, #4]
 800bba2:	bf04      	itt	eq
 800bba4:	1949      	addeq	r1, r1, r5
 800bba6:	6021      	streq	r1, [r4, #0]
 800bba8:	6054      	str	r4, [r2, #4]
 800bbaa:	e7ca      	b.n	800bb42 <_free_r+0x26>
 800bbac:	b003      	add	sp, #12
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	200038c8 	.word	0x200038c8

0800bbb4 <sbrk_aligned>:
 800bbb4:	b570      	push	{r4, r5, r6, lr}
 800bbb6:	4e0e      	ldr	r6, [pc, #56]	; (800bbf0 <sbrk_aligned+0x3c>)
 800bbb8:	460c      	mov	r4, r1
 800bbba:	6831      	ldr	r1, [r6, #0]
 800bbbc:	4605      	mov	r5, r0
 800bbbe:	b911      	cbnz	r1, 800bbc6 <sbrk_aligned+0x12>
 800bbc0:	f000 f88c 	bl	800bcdc <_sbrk_r>
 800bbc4:	6030      	str	r0, [r6, #0]
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f000 f887 	bl	800bcdc <_sbrk_r>
 800bbce:	1c43      	adds	r3, r0, #1
 800bbd0:	d00a      	beq.n	800bbe8 <sbrk_aligned+0x34>
 800bbd2:	1cc4      	adds	r4, r0, #3
 800bbd4:	f024 0403 	bic.w	r4, r4, #3
 800bbd8:	42a0      	cmp	r0, r4
 800bbda:	d007      	beq.n	800bbec <sbrk_aligned+0x38>
 800bbdc:	1a21      	subs	r1, r4, r0
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 f87c 	bl	800bcdc <_sbrk_r>
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d101      	bne.n	800bbec <sbrk_aligned+0x38>
 800bbe8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bbec:	4620      	mov	r0, r4
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	200038cc 	.word	0x200038cc

0800bbf4 <_malloc_r>:
 800bbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf8:	1ccd      	adds	r5, r1, #3
 800bbfa:	f025 0503 	bic.w	r5, r5, #3
 800bbfe:	3508      	adds	r5, #8
 800bc00:	2d0c      	cmp	r5, #12
 800bc02:	bf38      	it	cc
 800bc04:	250c      	movcc	r5, #12
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	4607      	mov	r7, r0
 800bc0a:	db01      	blt.n	800bc10 <_malloc_r+0x1c>
 800bc0c:	42a9      	cmp	r1, r5
 800bc0e:	d905      	bls.n	800bc1c <_malloc_r+0x28>
 800bc10:	230c      	movs	r3, #12
 800bc12:	603b      	str	r3, [r7, #0]
 800bc14:	2600      	movs	r6, #0
 800bc16:	4630      	mov	r0, r6
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	4e2e      	ldr	r6, [pc, #184]	; (800bcd8 <_malloc_r+0xe4>)
 800bc1e:	f000 f86d 	bl	800bcfc <__malloc_lock>
 800bc22:	6833      	ldr	r3, [r6, #0]
 800bc24:	461c      	mov	r4, r3
 800bc26:	bb34      	cbnz	r4, 800bc76 <_malloc_r+0x82>
 800bc28:	4629      	mov	r1, r5
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f7ff ffc2 	bl	800bbb4 <sbrk_aligned>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	4604      	mov	r4, r0
 800bc34:	d14d      	bne.n	800bcd2 <_malloc_r+0xde>
 800bc36:	6834      	ldr	r4, [r6, #0]
 800bc38:	4626      	mov	r6, r4
 800bc3a:	2e00      	cmp	r6, #0
 800bc3c:	d140      	bne.n	800bcc0 <_malloc_r+0xcc>
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	4631      	mov	r1, r6
 800bc42:	4638      	mov	r0, r7
 800bc44:	eb04 0803 	add.w	r8, r4, r3
 800bc48:	f000 f848 	bl	800bcdc <_sbrk_r>
 800bc4c:	4580      	cmp	r8, r0
 800bc4e:	d13a      	bne.n	800bcc6 <_malloc_r+0xd2>
 800bc50:	6821      	ldr	r1, [r4, #0]
 800bc52:	3503      	adds	r5, #3
 800bc54:	1a6d      	subs	r5, r5, r1
 800bc56:	f025 0503 	bic.w	r5, r5, #3
 800bc5a:	3508      	adds	r5, #8
 800bc5c:	2d0c      	cmp	r5, #12
 800bc5e:	bf38      	it	cc
 800bc60:	250c      	movcc	r5, #12
 800bc62:	4629      	mov	r1, r5
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff ffa5 	bl	800bbb4 <sbrk_aligned>
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	d02b      	beq.n	800bcc6 <_malloc_r+0xd2>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	442b      	add	r3, r5
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	e00e      	b.n	800bc94 <_malloc_r+0xa0>
 800bc76:	6822      	ldr	r2, [r4, #0]
 800bc78:	1b52      	subs	r2, r2, r5
 800bc7a:	d41e      	bmi.n	800bcba <_malloc_r+0xc6>
 800bc7c:	2a0b      	cmp	r2, #11
 800bc7e:	d916      	bls.n	800bcae <_malloc_r+0xba>
 800bc80:	1961      	adds	r1, r4, r5
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	6025      	str	r5, [r4, #0]
 800bc86:	bf18      	it	ne
 800bc88:	6059      	strne	r1, [r3, #4]
 800bc8a:	6863      	ldr	r3, [r4, #4]
 800bc8c:	bf08      	it	eq
 800bc8e:	6031      	streq	r1, [r6, #0]
 800bc90:	5162      	str	r2, [r4, r5]
 800bc92:	604b      	str	r3, [r1, #4]
 800bc94:	4638      	mov	r0, r7
 800bc96:	f104 060b 	add.w	r6, r4, #11
 800bc9a:	f000 f835 	bl	800bd08 <__malloc_unlock>
 800bc9e:	f026 0607 	bic.w	r6, r6, #7
 800bca2:	1d23      	adds	r3, r4, #4
 800bca4:	1af2      	subs	r2, r6, r3
 800bca6:	d0b6      	beq.n	800bc16 <_malloc_r+0x22>
 800bca8:	1b9b      	subs	r3, r3, r6
 800bcaa:	50a3      	str	r3, [r4, r2]
 800bcac:	e7b3      	b.n	800bc16 <_malloc_r+0x22>
 800bcae:	6862      	ldr	r2, [r4, #4]
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	bf0c      	ite	eq
 800bcb4:	6032      	streq	r2, [r6, #0]
 800bcb6:	605a      	strne	r2, [r3, #4]
 800bcb8:	e7ec      	b.n	800bc94 <_malloc_r+0xa0>
 800bcba:	4623      	mov	r3, r4
 800bcbc:	6864      	ldr	r4, [r4, #4]
 800bcbe:	e7b2      	b.n	800bc26 <_malloc_r+0x32>
 800bcc0:	4634      	mov	r4, r6
 800bcc2:	6876      	ldr	r6, [r6, #4]
 800bcc4:	e7b9      	b.n	800bc3a <_malloc_r+0x46>
 800bcc6:	230c      	movs	r3, #12
 800bcc8:	603b      	str	r3, [r7, #0]
 800bcca:	4638      	mov	r0, r7
 800bccc:	f000 f81c 	bl	800bd08 <__malloc_unlock>
 800bcd0:	e7a1      	b.n	800bc16 <_malloc_r+0x22>
 800bcd2:	6025      	str	r5, [r4, #0]
 800bcd4:	e7de      	b.n	800bc94 <_malloc_r+0xa0>
 800bcd6:	bf00      	nop
 800bcd8:	200038c8 	.word	0x200038c8

0800bcdc <_sbrk_r>:
 800bcdc:	b538      	push	{r3, r4, r5, lr}
 800bcde:	4d06      	ldr	r5, [pc, #24]	; (800bcf8 <_sbrk_r+0x1c>)
 800bce0:	2300      	movs	r3, #0
 800bce2:	4604      	mov	r4, r0
 800bce4:	4608      	mov	r0, r1
 800bce6:	602b      	str	r3, [r5, #0]
 800bce8:	f7f5 fff4 	bl	8001cd4 <_sbrk>
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	d102      	bne.n	800bcf6 <_sbrk_r+0x1a>
 800bcf0:	682b      	ldr	r3, [r5, #0]
 800bcf2:	b103      	cbz	r3, 800bcf6 <_sbrk_r+0x1a>
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	bd38      	pop	{r3, r4, r5, pc}
 800bcf8:	200038d0 	.word	0x200038d0

0800bcfc <__malloc_lock>:
 800bcfc:	4801      	ldr	r0, [pc, #4]	; (800bd04 <__malloc_lock+0x8>)
 800bcfe:	f000 b809 	b.w	800bd14 <__retarget_lock_acquire_recursive>
 800bd02:	bf00      	nop
 800bd04:	200038d4 	.word	0x200038d4

0800bd08 <__malloc_unlock>:
 800bd08:	4801      	ldr	r0, [pc, #4]	; (800bd10 <__malloc_unlock+0x8>)
 800bd0a:	f000 b804 	b.w	800bd16 <__retarget_lock_release_recursive>
 800bd0e:	bf00      	nop
 800bd10:	200038d4 	.word	0x200038d4

0800bd14 <__retarget_lock_acquire_recursive>:
 800bd14:	4770      	bx	lr

0800bd16 <__retarget_lock_release_recursive>:
 800bd16:	4770      	bx	lr

0800bd18 <_init>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	bf00      	nop
 800bd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd1e:	bc08      	pop	{r3}
 800bd20:	469e      	mov	lr, r3
 800bd22:	4770      	bx	lr

0800bd24 <_fini>:
 800bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd26:	bf00      	nop
 800bd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd2a:	bc08      	pop	{r3}
 800bd2c:	469e      	mov	lr, r3
 800bd2e:	4770      	bx	lr
