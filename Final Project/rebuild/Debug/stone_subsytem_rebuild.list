
stone_subsytem_rebuild.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012680  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc8  08012830  08012830  00022830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134f8  080134f8  0003017c  2**0
                  CONTENTS
  4 .ARM          00000008  080134f8  080134f8  000234f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013500  08013500  0003017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013500  08013500  00023500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013504  08013504  00023504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08013508  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003017c  2**0
                  CONTENTS
 10 .bss          00003dcc  2000017c  2000017c  0003017c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003f48  20003f48  0003017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002df0f  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a31  00000000  00000000  0005e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002278  00000000  00000000  00064af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fb8  00000000  00000000  00066d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ed67  00000000  00000000  00068d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032aa0  00000000  00000000  00097a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edb4e  00000000  00000000  000ca527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b8075  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098d4  00000000  00000000  001b80c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012818 	.word	0x08012818

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000180 	.word	0x20000180
 80001ec:	08012818 	.word	0x08012818

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	440b      	add	r3, r1
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	d114      	bne.n	80005e4 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
		i++;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80005c4:	e00e      	b.n	80005e4 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4413      	add	r3, r2
 80005cc:	781a      	ldrb	r2, [r3, #0]
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	440b      	add	r3, r1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d11a      	bne.n	8000620 <ConsoleCommandMatch+0x8c>
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	2b09      	cmp	r3, #9
 80005ee:	d817      	bhi.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005f0:	683a      	ldr	r2, [r7, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005f8:	2b20      	cmp	r3, #32
 80005fa:	d011      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005fc:	683a      	ldr	r2, [r7, #0]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	4413      	add	r3, r2
 8000602:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000604:	2b0a      	cmp	r3, #10
 8000606:	d00b      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0d      	cmp	r3, #13
 8000612:	d005      	beq.n	8000620 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1d2      	bne.n	80005c6 <ConsoleCommandMatch+0x32>
	}

	return result;
 8000620:	68bb      	ldr	r3, [r7, #8]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 800062e:	b480      	push	{r7}
 8000630:	b087      	sub	sp, #28
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 8000646:	e00d      	b.n	8000664 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	441a      	add	r2, r3
 800064e:	68f9      	ldr	r1, [r7, #12]
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	440b      	add	r3, r1
 8000654:	7812      	ldrb	r2, [r2, #0]
 8000656:	701a      	strb	r2, [r3, #0]
		i++;
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	429a      	cmp	r2, r3
 800066a:	d3ed      	bcc.n	8000648 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800066c:	e007      	b.n	800067e <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	3301      	adds	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	2b3f      	cmp	r3, #63	; 0x3f
 8000682:	d9f4      	bls.n	800066e <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000684:	693b      	ldr	r3, [r7, #16]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80006a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a4:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006a6:	e002      	b.n	80006ae <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b0d      	cmp	r3, #13
 80006b8:	d009      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b0a      	cmp	r3, #10
 80006c4:	d003      	beq.n	80006ce <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d3ec      	bcc.n	80006a8 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d201      	bcs.n	80006da <ConsoleCommandEndline+0x48>
	{
		result = i;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80006da:	68bb      	ldr	r3, [r7, #8]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(UART_HandleTypeDef *huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	uint32_t i;

	ConsoleIoInit(huart);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 fc89 	bl	8001008 <ConsoleIoInit>
	ConsoleIoSendString("Stone subsytem CLI ");
 80006f6:	480f      	ldr	r0, [pc, #60]	; (8000734 <ConsoleInit+0x4c>)
 80006f8:	f000 fcda 	bl	80010b0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <ConsoleInit+0x50>)
 80006fe:	f000 fcd7 	bl	80010b0 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <ConsoleInit+0x54>)
 8000704:	f000 fcd4 	bl	80010b0 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000708:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <ConsoleInit+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	e007      	b.n	8000724 <ConsoleInit+0x3c>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <ConsoleInit+0x5c>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	3301      	adds	r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	2b3f      	cmp	r3, #63	; 0x3f
 8000728:	d9f4      	bls.n	8000714 <ConsoleInit+0x2c>
	}

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08012830 	.word	0x08012830
 8000738:	08012844 	.word	0x08012844
 800073c:	08012848 	.word	0x08012848
 8000740:	200001d8 	.word	0x200001d8
 8000744:	20000198 	.word	0x20000198

08000748 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 800074e:	4b54      	ldr	r3, [pc, #336]	; (80008a0 <ConsoleProcess+0x158>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a54      	ldr	r2, [pc, #336]	; (80008a4 <ConsoleProcess+0x15c>)
 8000754:	1898      	adds	r0, r3, r2
 8000756:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <ConsoleProcess+0x158>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800075e:	463a      	mov	r2, r7
 8000760:	4619      	mov	r1, r3
 8000762:	f000 fc69 	bl	8001038 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d104      	bne.n	8000776 <ConsoleProcess+0x2e>
 800076c:	4b4e      	ldr	r3, [pc, #312]	; (80008a8 <ConsoleProcess+0x160>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	f000 8091 	beq.w	8000898 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000776:	4b4c      	ldr	r3, [pc, #304]	; (80008a8 <ConsoleProcess+0x160>)
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 800077c:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <ConsoleProcess+0x158>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a46      	ldr	r2, [pc, #280]	; (80008a0 <ConsoleProcess+0x158>)
 8000786:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000788:	4b45      	ldr	r3, [pc, #276]	; (80008a0 <ConsoleProcess+0x158>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4845      	ldr	r0, [pc, #276]	; (80008a4 <ConsoleProcess+0x15c>)
 8000790:	f7ff ff7f 	bl	8000692 <ConsoleCommandEndline>
 8000794:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db7d      	blt.n	8000898 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 800079c:	f000 fb76 	bl	8000e8c <ConsoleCommandsGetTable>
 80007a0:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007aa:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007ac:	e03d      	b.n	800082a <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4613      	mov	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <ConsoleProcess+0x15c>)
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee6 	bl	8000594 <ConsoleCommandMatch>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d02a      	beq.n	8000824 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 80007ce:	697a      	ldr	r2, [r7, #20]
 80007d0:	4613      	mov	r3, r2
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	461a      	mov	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4413      	add	r3, r2
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <ConsoleProcess+0x15c>)
 80007e2:	4798      	blx	r3
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d017      	beq.n	800081e <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 80007ee:	482f      	ldr	r0, [pc, #188]	; (80008ac <ConsoleProcess+0x164>)
 80007f0:	f000 fc5e 	bl	80010b0 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <ConsoleProcess+0x15c>)
 80007f6:	f000 fc5b 	bl	80010b0 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007fa:	482d      	ldr	r0, [pc, #180]	; (80008b0 <ConsoleProcess+0x168>)
 80007fc:	f000 fc58 	bl	80010b0 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	4613      	mov	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4413      	add	r3, r2
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4413      	add	r3, r2
 8000810:	3308      	adds	r3, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f000 fc4c 	bl	80010b0 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <ConsoleProcess+0x16c>)
 800081a:	f000 fc49 	bl	80010b0 <ConsoleIoSendString>

					}
					found = cmdIndex;
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	e002      	b.n	800082a <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	3301      	adds	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 800082a:	697a      	ldr	r2, [r7, #20]
 800082c:	4613      	mov	r3, r2
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	461a      	mov	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4413      	add	r3, r2
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d003      	beq.n	8000848 <ConsoleProcess+0x100>
 8000840:	693b      	ldr	r3, [r7, #16]
 8000842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000846:	d0b2      	beq.n	80007ae <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d00d      	beq.n	800086a <ConsoleProcess+0x122>
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000854:	d109      	bne.n	800086a <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <ConsoleProcess+0x158>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b02      	cmp	r3, #2
 800085c:	d905      	bls.n	800086a <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 800085e:	4816      	ldr	r0, [pc, #88]	; (80008b8 <ConsoleProcess+0x170>)
 8000860:	f000 fc26 	bl	80010b0 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000864:	4813      	ldr	r0, [pc, #76]	; (80008b4 <ConsoleProcess+0x16c>)
 8000866:	f000 fc23 	bl	80010b0 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <ConsoleProcess+0x158>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	461a      	mov	r2, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <ConsoleProcess+0x15c>)
 8000876:	f7ff feda 	bl	800062e <ConsoleResetBuffer>
 800087a:	4603      	mov	r3, r0
 800087c:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <ConsoleProcess+0x158>)
 800087e:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <ConsoleProcess+0x158>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <ConsoleProcess+0x160>)
 8000890:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000892:	480a      	ldr	r0, [pc, #40]	; (80008bc <ConsoleProcess+0x174>)
 8000894:	f000 fc0c 	bl	80010b0 <ConsoleIoSendString>
		}
	}
}
 8000898:	bf00      	nop
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001d8 	.word	0x200001d8
 80008a4:	20000198 	.word	0x20000198
 80008a8:	200001dc 	.word	0x200001dc
 80008ac:	0801284c 	.word	0x0801284c
 80008b0:	08012854 	.word	0x08012854
 80008b4:	08012844 	.word	0x08012844
 80008b8:	0801285c 	.word	0x0801285c
 80008bc:	08012848 	.word	0x08012848

080008c0 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	460b      	mov	r3, r1
 80008ca:	607a      	str	r2, [r7, #4]
 80008cc:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008da:	e00b      	b.n	80008f4 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d102      	bne.n	80008ee <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	3301      	adds	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3301      	adds	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 80008f4:	7afb      	ldrb	r3, [r7, #11]
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d002      	beq.n	8000902 <ConsoleParamFindN+0x42>
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000900:	d9ec      	bls.n	80008dc <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	2b40      	cmp	r3, #64	; 0x40
 8000906:	d102      	bne.n	800090e <ConsoleParamFindN+0x4e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000908:	2310      	movs	r3, #16
 800090a:	75fb      	strb	r3, [r7, #23]
 800090c:	e002      	b.n	8000914 <ConsoleParamFindN+0x54>
	}
	else
	{
		*startLocation = bufferIndex;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	69fa      	ldr	r2, [r7, #28]
 8000912:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000914:	7dfb      	ldrb	r3, [r7, #23]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	; 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b08a      	sub	sp, #40	; 0x28
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	460b      	mov	r3, r1
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000934:	f107 021c 	add.w	r2, r7, #28
 8000938:	7afb      	ldrb	r3, [r7, #11]
 800093a:	4619      	mov	r1, r3
 800093c:	68f8      	ldr	r0, [r7, #12]
 800093e:	f7ff ffbf 	bl	80008c0 <ConsoleParamFindN>
 8000942:	4603      	mov	r3, r0
 8000944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	4413      	add	r3, r2
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 800095c:	e011      	b.n	8000982 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 800095e:	f107 0214 	add.w	r2, r7, #20
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800096a:	701a      	strb	r2, [r3, #0]
		i++;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	3301      	adds	r3, #1
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	4413      	add	r3, r2
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000982:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d00a      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
 800098a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800098e:	2b0d      	cmp	r3, #13
 8000990:	d006      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000992:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000996:	2b20      	cmp	r3, #32
 8000998:	d002      	beq.n	80009a0 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099c:	2b07      	cmp	r3, #7
 800099e:	d9de      	bls.n	800095e <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d102      	bne.n	80009ac <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 80009a6:	2310      	movs	r3, #16
 80009a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 80009ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10e      	bne.n	80009d2 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 80009b4:	f107 0214 	add.w	r2, r7, #20
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f010 fbc7 	bl	8011158 <atoi>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b08a      	sub	sp, #40	; 0x28
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	460b      	mov	r3, r1
 80009e8:	607a      	str	r2, [r7, #4]
 80009ea:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80009f4:	f107 0218 	add.w	r2, r7, #24
 80009f8:	7afb      	ldrb	r3, [r7, #11]
 80009fa:	4619      	mov	r1, r3
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff ff5f 	bl	80008c0 <ConsoleParamFindN>
 8000a02:	4603      	mov	r3, r0
 8000a04:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a06:	7ffb      	ldrb	r3, [r7, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12c      	bne.n	8000a66 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
 8000a10:	e01e      	b.n	8000a50 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a12:	7ffb      	ldrb	r3, [r7, #31]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10d      	bne.n	8000a34 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	f107 0217 	add.w	r2, r7, #23
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f8c5 	bl	8000bba <ConsoleUtilHexCharToInt>
 8000a30:	4603      	mov	r3, r0
 8000a32:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000a34:	7ffb      	ldrb	r3, [r7, #31]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d107      	bne.n	8000a4a <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000a40:	7dfb      	ldrb	r3, [r7, #23]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000a46:	4413      	add	r3, r2
 8000a48:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
 8000a50:	6a3b      	ldr	r3, [r7, #32]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d9dd      	bls.n	8000a12 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000a56:	7ffb      	ldrb	r3, [r7, #31]
 8000a58:	2b11      	cmp	r3, #17
 8000a5a:	d101      	bne.n	8000a60 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000a64:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3728      	adds	r7, #40	; 0x28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e01b      	b.n	8000abc <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a84:	7cfb      	ldrb	r3, [r7, #19]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d115      	bne.n	8000ab6 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a8a:	88fa      	ldrh	r2, [r7, #6]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	f1c3 0303 	rsb	r3, r3, #3
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	fa42 f303 	asr.w	r3, r2, r3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 030f 	and.w	r3, r3, #15
 8000a9e:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000aa0:	f107 020c 	add.w	r2, r7, #12
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	441a      	add	r2, r3
 8000aa8:	7cbb      	ldrb	r3, [r7, #18]
 8000aaa:	4611      	mov	r1, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8c5 	bl	8000c3c <ConsoleUtilsIntToHexChar>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	2b03      	cmp	r3, #3
 8000ac0:	d9e0      	bls.n	8000a84 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 faec 	bl	80010b0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b089      	sub	sp, #36	; 0x24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	60f8      	str	r0, [r7, #12]
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000aee:	2300      	movs	r3, #0
 8000af0:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da07      	bge.n	8000b0c <smallItoa+0x2a>
		isNegative = true;
 8000afc:	2301      	movs	r3, #1
 8000afe:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	425b      	negs	r3, r3
 8000b04:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b10:	e007      	b.n	8000b22 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b1a:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000b22:	69ba      	ldr	r2, [r7, #24]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1f1      	bne.n	8000b12 <smallItoa+0x30>
	}

    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	4413      	add	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	fb93 f2f2 	sdiv	r2, r3, r2
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	fb01 f202 	mul.w	r2, r1, r2
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	440b      	add	r3, r1
 8000b5a:	3230      	adds	r2, #48	; 0x30
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b68:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	617a      	str	r2, [r7, #20]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1e6      	bne.n	8000b42 <smallItoa+0x60>

	if (isNegative) {
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	222d      	movs	r2, #45	; 0x2d
 8000b7e:	701a      	strb	r2, [r3, #0]
	}
}
 8000b80:	bf00      	nop
 8000b82:	3724      	adds	r7, #36	; 0x24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	f107 0108 	add.w	r1, r7, #8
 8000b9e:	220a      	movs	r2, #10
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ff9e 	bl	8000ae2 <smallItoa>
	ConsoleIoSendString(out);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fa80 	bl	80010b0 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b085      	sub	sp, #20
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	6039      	str	r1, [r7, #0]
 8000bc4:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b2f      	cmp	r3, #47	; 0x2f
 8000bce:	d908      	bls.n	8000be2 <ConsoleUtilHexCharToInt+0x28>
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b39      	cmp	r3, #57	; 0x39
 8000bd4:	d805      	bhi.n	8000be2 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3b30      	subs	r3, #48	; 0x30
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e025      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b40      	cmp	r3, #64	; 0x40
 8000be6:	d908      	bls.n	8000bfa <ConsoleUtilHexCharToInt+0x40>
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b46      	cmp	r3, #70	; 0x46
 8000bec:	d805      	bhi.n	8000bfa <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3b37      	subs	r3, #55	; 0x37
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e019      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b60      	cmp	r3, #96	; 0x60
 8000bfe:	d908      	bls.n	8000c12 <ConsoleUtilHexCharToInt+0x58>
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b66      	cmp	r3, #102	; 0x66
 8000c04:	d805      	bhi.n	8000c12 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3b57      	subs	r3, #87	; 0x57
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e00d      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b0a      	cmp	r3, #10
 8000c16:	d105      	bne.n	8000c24 <ConsoleUtilHexCharToInt+0x6a>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b0d      	cmp	r3, #13
 8000c1c:	d102      	bne.n	8000c24 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	d102      	bne.n	8000c2a <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000c24:	2311      	movs	r3, #17
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e001      	b.n	8000c2e <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	6039      	str	r1, [r7, #0]
 8000c46:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d805      	bhi.n	8000c5e <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	3330      	adds	r3, #48	; 0x30
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e00d      	b.n	8000c7a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b09      	cmp	r3, #9
 8000c62:	d908      	bls.n	8000c76 <ConsoleUtilsIntToHexChar+0x3a>
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b0f      	cmp	r3, #15
 8000c68:	d805      	bhi.n	8000c76 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3337      	adds	r3, #55	; 0x37
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e001      	b.n	8000c7a <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c76:	2310      	movs	r3, #16
 8000c78:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <ConsoleReceiveParamString>:
{
	ConsoleIoSendString(buffer);
	ConsoleIoSendString(STR_ENDLINE);
	return COMMAND_SUCCESS;
}
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterChar){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	460b      	mov	r3, r1
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	72fb      	strb	r3, [r7, #11]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c96:	2300      	movs	r3, #0
 8000c98:	77fb      	strb	r3, [r7, #31]
	uint32_t startIndex = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
	uint16_t value = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	82bb      	strh	r3, [r7, #20]
	uint32_t i =0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
	char charVal;


	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000ca6:	f107 0210 	add.w	r2, r7, #16
 8000caa:	7afb      	ldrb	r3, [r7, #11]
 8000cac:	4619      	mov	r1, r3
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	f7ff fe06 	bl	80008c0 <ConsoleParamFindN>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	77fb      	strb	r3, [r7, #31]
	i = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
	charVal = buffer[startIndex + i];
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cca:	e00e      	b.n	8000cea <ConsoleReceiveParamString+0x62>
				&& ( PARAMETER_SEPARATER != charVal )
			&& ( i < INT16_MAX_STR_LENGTH ) )
		{
		parameterChar[i] = charVal;					// copy the relevant part
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	7dfa      	ldrb	r2, [r7, #23]
 8000cd4:	701a      	strb	r2, [r3, #0]
			i++;
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
			charVal = buffer[startIndex + i];
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	75fb      	strb	r3, [r7, #23]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
 8000cec:	2b0a      	cmp	r3, #10
 8000cee:	d008      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	2b0d      	cmp	r3, #13
 8000cf4:	d005      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
				&& ( PARAMETER_SEPARATER != charVal )
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d002      	beq.n	8000d02 <ConsoleReceiveParamString+0x7a>
			&& ( i < INT16_MAX_STR_LENGTH ) )
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d9e4      	bls.n	8000ccc <ConsoleReceiveParamString+0x44>
		}
		if ( i == INT16_MAX_STR_LENGTH)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d101      	bne.n	8000d0c <ConsoleReceiveParamString+0x84>
		{
			result = COMMAND_PARAMETER_ERROR;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	77fb      	strb	r3, [r7, #31]
		}
		if ( COMMAND_SUCCESS == result )
 8000d0c:	7ffb      	ldrb	r3, [r7, #31]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <ConsoleReceiveParamString+0x94>
		{
			parameterChar[i] = NULL_CHAR;
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	4413      	add	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
		}
	return result;
 8000d1c:	7ffb      	ldrb	r3, [r7, #31]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d44:	2300      	movs	r3, #0
 8000d46:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d48:	230d      	movs	r3, #13
 8000d4a:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	e01e      	b.n	8000d90 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d52:	4914      	ldr	r1, [pc, #80]	; (8000da4 <ConsoleCommandHelp+0x68>)
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f9a4 	bl	80010b0 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d68:	480f      	ldr	r0, [pc, #60]	; (8000da8 <ConsoleCommandHelp+0x6c>)
 8000d6a:	f000 f9a1 	bl	80010b0 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	3308      	adds	r3, #8
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <ConsoleCommandHelp+0x68>)
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f996 	bl	80010b0 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <ConsoleCommandHelp+0x70>)
 8000d86:	f000 f993 	bl	80010b0 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3db      	bcc.n	8000d52 <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	08012f00 	.word	0x08012f00
 8000da8:	080128e0 	.word	0x080128e0
 8000dac:	080128e4 	.word	0x080128e4

08000db0 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000db8:	f107 030c 	add.w	r3, r7, #12
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff fdae 	bl	8000922 <ConsoleReceiveParamInt16>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d116      	bne.n	8000dfe <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <ConsoleCommandParamExampleInt16+0x58>)
 8000dd2:	f000 f96d 	bl	80010b0 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dd6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fed6 	bl	8000b8c <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <ConsoleCommandParamExampleInt16+0x5c>)
 8000de2:	f000 f965 	bl	80010b0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000de6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe3f 	bl	8000a70 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <ConsoleCommandParamExampleInt16+0x60>)
 8000df4:	f000 f95c 	bl	80010b0 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <ConsoleCommandParamExampleInt16+0x64>)
 8000dfa:	f000 f959 	bl	80010b0 <ConsoleIoSendString>
	}
	return result;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	080128e8 	.word	0x080128e8
 8000e0c:	080128f8 	.word	0x080128f8
 8000e10:	08012900 	.word	0x08012900
 8000e14:	080128e4 	.word	0x080128e4

08000e18 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	461a      	mov	r2, r3
 8000e26:	2101      	movs	r1, #1
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fdd8 	bl	80009de <ConsoleReceiveParamHexUint16>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d109      	bne.n	8000e4c <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <ConsoleCommandParamExampleHexUint16+0x40>)
 8000e3a:	f000 f939 	bl	80010b0 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000e3e:	89bb      	ldrh	r3, [r7, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe15 	bl	8000a70 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <ConsoleCommandParamExampleHexUint16+0x44>)
 8000e48:	f000 f932 	bl	80010b0 <ConsoleIoSendString>
	}
	return result;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	08012904 	.word	0x08012904
 8000e5c:	080128e4 	.word	0x080128e4

08000e60 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <ConsoleCommandVer+0x24>)
 8000e6e:	f000 f91f 	bl	80010b0 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <ConsoleCommandVer+0x28>)
 8000e74:	f000 f91c 	bl	80010b0 <ConsoleIoSendString>
	return result;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	08012914 	.word	0x08012914
 8000e88:	080128e4 	.word	0x080128e4

08000e8c <ConsoleCommandsGetTable>:


const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <ConsoleCommandsGetTable+0x10>)
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	08012f00 	.word	0x08012f00

08000ea0 <ConsoleCommandDebugPrint>:

static eCommandResult_T ConsoleCommandDebugPrint(const char buffer[])
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
	// All though it's great input sanitisation it's okay for this.
	char command[5] ={0};
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	461a      	mov	r2, r3
 8000eba:	2101      	movs	r1, #1
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fee3 	bl	8000c88 <ConsoleReceiveParamString>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
	char trigger = command[1];
 8000ec6:	7a7b      	ldrb	r3, [r7, #9]
 8000ec8:	73bb      	strb	r3, [r7, #14]
	if ('n'==trigger)
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	2b6e      	cmp	r3, #110	; 0x6e
 8000ece:	d103      	bne.n	8000ed8 <ConsoleCommandDebugPrint+0x38>
	{
		// trigger is on
		SetUserDebugLogging(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f002 fc39 	bl	8003748 <SetUserDebugLogging>
 8000ed6:	e008      	b.n	8000eea <ConsoleCommandDebugPrint+0x4a>
	}
	else if('f'== trigger){
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b66      	cmp	r3, #102	; 0x66
 8000edc:	d103      	bne.n	8000ee6 <ConsoleCommandDebugPrint+0x46>

		// trigger is off.
		SetUserDebugLogging(0);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f002 fc32 	bl	8003748 <SetUserDebugLogging>
 8000ee4:	e001      	b.n	8000eea <ConsoleCommandDebugPrint+0x4a>
	}
	else
	{
		//the inputs bad output guide text.
		return COMMAND_ERROR;
 8000ee6:	23ff      	movs	r3, #255	; 0xff
 8000ee8:	e000      	b.n	8000eec <ConsoleCommandDebugPrint+0x4c>
	}

	return result;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]

}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <ConsoleCommandSetMode>:
static eCommandResult_T ConsoleCommandSetMode(const char buffer[]){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	eCommandResult_T result = COMMAND_SUCCESS;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	2300      	movs	r3, #0
 8000f06:	733b      	strb	r3, [r7, #12]
	// get the mode they want to set.
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	2101      	movs	r1, #1
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff feb9 	bl	8000c88 <ConsoleReceiveParamString>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <ConsoleCommandSetState>:
static eCommandResult_T ConsoleCommandSetState(const char buffer[]){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
	char command[5] ={0};
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	2300      	movs	r3, #0
 8000f36:	733b      	strb	r3, [r7, #12]
	result = ConsoleReceiveParamString(buffer, 1, command);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	2101      	movs	r1, #1
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff fea1 	bl	8000c88 <ConsoleReceiveParamString>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]

	return result;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <ConsoleCommandSetStateTimeout>:
static eCommandResult_T ConsoleCommandSetStateTimeout(const char buffer[]){
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
	return result;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <ConsoleCommandSetLogging>:
static eCommandResult_T ConsoleCommandSetLogging(const char buffer[]){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
		// this makes funciton about the expected input. values that have n as the second letter will also trigger debug on.
		// All though it's great input sanitisation it's okay for this.
		char command[5] ={0};
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	733b      	strb	r3, [r7, #12]
		result = ConsoleReceiveParamString(buffer, 1, command);
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	461a      	mov	r2, r3
 8000f88:	2101      	movs	r1, #1
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fe7c 	bl	8000c88 <ConsoleReceiveParamString>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
		char trigger = command[1];
 8000f94:	7a7b      	ldrb	r3, [r7, #9]
 8000f96:	73bb      	strb	r3, [r7, #14]
		if ('n'==trigger)
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	2b6e      	cmp	r3, #110	; 0x6e
 8000f9c:	d103      	bne.n	8000fa6 <ConsoleCommandSetLogging+0x38>
		{
			// trigger is on
			SetMovementUSBLogging(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f002 fbe2 	bl	8003768 <SetMovementUSBLogging>
 8000fa4:	e008      	b.n	8000fb8 <ConsoleCommandSetLogging+0x4a>
		}
		else if('f'== trigger){
 8000fa6:	7bbb      	ldrb	r3, [r7, #14]
 8000fa8:	2b66      	cmp	r3, #102	; 0x66
 8000faa:	d103      	bne.n	8000fb4 <ConsoleCommandSetLogging+0x46>

			// trigger is off.
			SetMovementUSBLogging(0);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f002 fbdb 	bl	8003768 <SetMovementUSBLogging>
 8000fb2:	e001      	b.n	8000fb8 <ConsoleCommandSetLogging+0x4a>
		}
		else
		{
			//the inputs bad output guide text.
			return COMMAND_ERROR;
 8000fb4:	23ff      	movs	r3, #255	; 0xff
 8000fb6:	e000      	b.n	8000fba <ConsoleCommandSetLogging+0x4c>
		}

		return result;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <ConsoleCommandsetMainColour>:

static eCommandResult_T ConsoleCommandsetMainColour(const char buffer[]){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	75fb      	strb	r3, [r7, #23]
	int r,g,b;
	SetUserMainColour(r,g,b);
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	68f9      	ldr	r1, [r7, #12]
 8000fd2:	6938      	ldr	r0, [r7, #16]
 8000fd4:	f002 fb8c 	bl	80036f0 <SetUserMainColour>
	return result;
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <reset>:
int readComplete = 0;
int charCount = 0;
// Buffer to hold command
uint8_t tempBuffer[10];
uint8_t byte;
void reset(){
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
	charCount = 0;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <reset+0x1c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	readComplete =0;
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <reset+0x20>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200001e8 	.word	0x200001e8
 8001004:	200001e4 	.word	0x200001e4

08001008 <ConsoleIoInit>:

eConsoleError ConsoleIoInit(UART_HandleTypeDef *huart)

{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	consoleHuart = huart;
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <ConsoleIoInit+0x28>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
	// So that we start the call back
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <ConsoleIoInit+0x28>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2201      	movs	r2, #1
 800101c:	4905      	ldr	r1, [pc, #20]	; (8001034 <ConsoleIoInit+0x2c>)
 800101e:	4618      	mov	r0, r3
 8001020:	f008 fa3b 	bl	800949a <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200001e0 	.word	0x200001e0
 8001034:	200001f6 	.word	0x200001f6

08001038 <ConsoleIoReceive>:
// This is modified for the Wokwi RPi Pico simulator. It works fine
// but that's partially because the serial terminal sends all of the
// characters at a time without losing any of them. What if this function
// wasn't called fast enough?
eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]


	///HAL_UART_Receive_IT(consoleHuart,byte,1);
	if( readComplete==1)
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <ConsoleIoReceive+0x68>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d11f      	bne.n	8001090 <ConsoleIoReceive+0x58>
	{
		// copy the command to the buffer
		// set the length
		//return console_success
		while(i<charCount+1){
 8001050:	e00a      	b.n	8001068 <ConsoleIoReceive+0x30>
			buffer[i] = tempBuffer[i];
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4413      	add	r3, r2
 8001058:	4912      	ldr	r1, [pc, #72]	; (80010a4 <ConsoleIoReceive+0x6c>)
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	440a      	add	r2, r1
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	701a      	strb	r2, [r3, #0]
			i++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
		while(i<charCount+1){
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <ConsoleIoReceive+0x70>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	461a      	mov	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4293      	cmp	r3, r2
 8001074:	d3ed      	bcc.n	8001052 <ConsoleIoReceive+0x1a>
		}
		*readLength = charCount;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <ConsoleIoReceive+0x70>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
		printf("%s", tempBuffer);
 8001080:	4908      	ldr	r1, [pc, #32]	; (80010a4 <ConsoleIoReceive+0x6c>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <ConsoleIoReceive+0x74>)
 8001084:	f010 f99c 	bl	80113c0 <iprintf>
		// reset counts
		reset();
 8001088:	f7ff ffac 	bl	8000fe4 <reset>
		//return console_success

		return CONSOLE_SUCCESS;
 800108c:	2300      	movs	r3, #0
 800108e:	e003      	b.n	8001098 <ConsoleIoReceive+0x60>

	}


	*readLength = i;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	601a      	str	r2, [r3, #0]
	return CONSOLE_SUCCESS;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200001e4 	.word	0x200001e4
 80010a4:	200001ec 	.word	0x200001ec
 80010a8:	200001e8 	.word	0x200001e8
 80010ac:	08012928 	.word	0x08012928

080010b0 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	printf("%s", buffer);
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4804      	ldr	r0, [pc, #16]	; (80010cc <ConsoleIoSendString+0x1c>)
 80010bc:	f010 f980 	bl	80113c0 <iprintf>
	return CONSOLE_SUCCESS;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	08012928 	.word	0x08012928

080010d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]


	//uint8_t lastChar = *(huart->pRxBuffPtr);
	tempBuffer[charCount] = byte;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HAL_UART_RxCpltCallback+0x44>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_UART_RxCpltCallback+0x48>)
 80010de:	7811      	ldrb	r1, [r2, #0]
 80010e0:	4a0e      	ldr	r2, [pc, #56]	; (800111c <HAL_UART_RxCpltCallback+0x4c>)
 80010e2:	54d1      	strb	r1, [r2, r3]

	charCount ++;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <HAL_UART_RxCpltCallback+0x44>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_UART_RxCpltCallback+0x44>)
 80010ec:	6013      	str	r3, [r2, #0]

	if( byte == '\n'){
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_UART_RxCpltCallback+0x48>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d102      	bne.n	80010fc <HAL_UART_RxCpltCallback+0x2c>
	readComplete = 1;
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_UART_RxCpltCallback+0x50>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	601a      	str	r2, [r3, #0]

	}
	HAL_UART_Receive_IT(consoleHuart,&byte,1);
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <HAL_UART_RxCpltCallback+0x54>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	4905      	ldr	r1, [pc, #20]	; (8001118 <HAL_UART_RxCpltCallback+0x48>)
 8001104:	4618      	mov	r0, r3
 8001106:	f008 f9c8 	bl	800949a <HAL_UART_Receive_IT>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001e8 	.word	0x200001e8
 8001118:	200001f6 	.word	0x200001f6
 800111c:	200001ec 	.word	0x200001ec
 8001120:	200001e4 	.word	0x200001e4
 8001124:	200001e0 	.word	0x200001e0

08001128 <FileControllerInit>:
#include "usb_host.h"
#include "user.h"

int logMovement = 0;

stoneError_t FileControllerInit(){
 8001128:	b580      	push	{r7, lr}
 800112a:	b098      	sub	sp, #96	; 0x60
 800112c:	af00      	add	r7, sp, #0
	stoneError_t ret = NO_ERROR;
 800112e:	2304      	movs	r3, #4
 8001130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// wait for the USB to be ready to mount.
	while (GetUSBState()!=APPLICATION_READY){
 8001134:	e001      	b.n	800113a <FileControllerInit+0x12>
		   MX_USB_HOST_Process();
 8001136:	f00f fcf7 	bl	8010b28 <MX_USB_HOST_Process>
	while (GetUSBState()!=APPLICATION_READY){
 800113a:	f00f fcc3 	bl	8010ac4 <GetUSBState>
 800113e:	4603      	mov	r3, r0
 8001140:	2b02      	cmp	r3, #2
 8001142:	d1f8      	bne.n	8001136 <FileControllerInit+0xe>

	}
	Mount_USB();
 8001144:	f000 fcaa 	bl	8001a9c <Mount_USB>
	// check to see if a dir for this user already exists.
	char path[80]={0};
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	224c      	movs	r2, #76	; 0x4c
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f010 f84b 	bl	80111f0 <memset>
	int userID = GetUserID();
 800115a:	f002 fabd 	bl	80036d8 <GetUserID>
 800115e:	65b8      	str	r0, [r7, #88]	; 0x58
	sprintf(path,"/%d/%user_prefs.txt\n",userID,userID);
 8001160:	1d38      	adds	r0, r7, #4
 8001162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001166:	4917      	ldr	r1, [pc, #92]	; (80011c4 <FileControllerInit+0x9c>)
 8001168:	f010 fa2e 	bl	80115c8 <siprintf>
	FRESULT res = Check_File( path );
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fcb6 	bl	8001ae0 <Check_File>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if(FR_NO_PATH == res)
 800117a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117e:	2b05      	cmp	r3, #5
 8001180:	d119      	bne.n	80011b6 <FileControllerInit+0x8e>
	{
		sprintf(path,"/%d",userID);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001186:	4910      	ldr	r1, [pc, #64]	; (80011c8 <FileControllerInit+0xa0>)
 8001188:	4618      	mov	r0, r3
 800118a:	f010 fa1d 	bl	80115c8 <siprintf>
		res = Create_Dir(path);
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fd57 	bl	8001c44 <Create_Dir>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		sprintf(path,"/%d/prefs.txt",userID);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80011a0:	490a      	ldr	r1, [pc, #40]	; (80011cc <FileControllerInit+0xa4>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f010 fa10 	bl	80115c8 <siprintf>
		res = Create_File(path);
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fcae 	bl	8001b0c <Create_File>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	}

	// if not make a directory for that user

	return ret;
 80011b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3760      	adds	r7, #96	; 0x60
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	0801292c 	.word	0x0801292c
 80011c8:	08012944 	.word	0x08012944
 80011cc:	08012948 	.word	0x08012948

080011d0 <MovementControllerInit>:
#define ACC_TO_G(acceleration)          (((double)(acceleration) / 100.0f) / 9.80665f) // convert acceleration m/s² to gravity 9,80665 m/s²

// running average buffer
// thresholds for basic gestures.

void MovementControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	// Accelrometor Init
	Lis3dhInit(I2Cxhandle);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa4c 	bl	8001678 <Lis3dhInit>

	I3G450D_Init(SPIxHandle);
 80011e0:	6838      	ldr	r0, [r7, #0]
 80011e2:	f000 fd6f 	bl	8001cc4 <I3G450D_Init>



}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <MovementControllerProcess>:
int MovementControllerProcess(){
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
	// Gets for the gyroscope.
	 I3G450D_loop();
 80011f4:	f000 fe2e 	bl	8001e54 <I3G450D_loop>
	 Lis3dhGetAcc();
 80011f8:	f000 fadc 	bl	80017b4 <Lis3dhGetAcc>
	int16_t acelX,acelY,acelZ;
	AccelGetData(&acelX, &acelY, &acelZ);
 80011fc:	1dba      	adds	r2, r7, #6
 80011fe:	f107 0108 	add.w	r1, r7, #8
 8001202:	f107 030a 	add.w	r3, r7, #10
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb56 	bl	80018b8 <AccelGetData>
	//printf("%d,%d,%d \n",acelX,acelY,acelZ);
	int interrupt = PollInterrupt();
 800120c:	f000 fc04 	bl	8001a18 <PollInterrupt>
 8001210:	60f8      	str	r0, [r7, #12]

	return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <GetInterruptType>:
gesture_t GetInterruptType( sensor_t sensor ){
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]


}
 8001226:	bf00      	nop
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <GetLastGesture>:
gesture_t GetLastGesture(){
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	return lastGesture;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <GetLastGesture+0x14>)
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001f7 	.word	0x200001f7

0800124c <GetLast>:

void GetLast( sensor_t sensor,  movementData_t * data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
	if(ACCELEROMETER == sensor)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d114      	bne.n	8001288 <GetLast+0x3c>
	{
		int16_t acelX,acelY,acelZ;
		AccelGetData(&acelX, &acelY, &acelZ);
 800125e:	f107 0212 	add.w	r2, r7, #18
 8001262:	f107 0114 	add.w	r1, r7, #20
 8001266:	f107 0316 	add.w	r3, r7, #22
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fb24 	bl	80018b8 <AccelGetData>
		data->x = acelX;
 8001270:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	801a      	strh	r2, [r3, #0]
		data->y = acelY;
 8001278:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	805a      	strh	r2, [r3, #2]
		data->z = acelZ;
 8001280:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	809a      	strh	r2, [r3, #4]

	}
	if(GYROSCOPE == sensor)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d114      	bne.n	80012b8 <GetLast+0x6c>
		{
			int16_t gyroX,gyroY,gyroZ;
			GyroGetData(&gyroX, &gyroY, &gyroZ);
 800128e:	f107 020c 	add.w	r2, r7, #12
 8001292:	f107 010e 	add.w	r1, r7, #14
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4618      	mov	r0, r3
 800129c:	f001 f9b0 	bl	8002600 <GyroGetData>
			data->x = gyroX;
 80012a0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	801a      	strh	r2, [r3, #0]
			data->y = gyroY;
 80012a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	805a      	strh	r2, [r3, #2]
			data->z = gyroZ;
 80012b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	809a      	strh	r2, [r3, #4]

		}

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SessionControllerInit>:




void SessionControllerInit(I2C_HandleTypeDef *I2Cxhandle,SPI_HandleTypeDef *SPIxHandle,UART_HandleTypeDef * HUARTxHandler)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]


	MovementControllerInit(I2Cxhandle,SPIxHandle);
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	f7ff ff7e 	bl	80011d0 <MovementControllerInit>
	ConsoleInit(HUARTxHandler);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fa07 	bl	80006e8 <ConsoleInit>
	FileControllerInit();
 80012da:	f7ff ff25 	bl	8001128 <FileControllerInit>
	currentState = START;
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <SessionControllerInit+0x3c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80012e4:	f002 fb34 	bl	8003950 <HAL_GetTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SessionControllerInit+0x40>)
 80012ec:	6013      	str	r3, [r2, #0]
	ConsoleProcess();
 80012ee:	f7ff fa2b 	bl	8000748 <ConsoleProcess>




}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f8 	.word	0x200001f8
 8001300:	2000020c 	.word	0x2000020c

08001304 <SessionControllerProcess>:
void SessionControllerProcess()
{
 8001304:	b5b0      	push	{r4, r5, r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0



// check to see if current state has reached it time out.
	stateTableEntry_t current = stateTabel[currentState];
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <SessionControllerProcess+0x98>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <SessionControllerProcess+0x9c>)
 8001312:	460b      	mov	r3, r1
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	f107 0414 	add.w	r4, r7, #20
 8001320:	461d      	mov	r5, r3
 8001322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001324:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001326:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800132a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint32_t timeout = current.timeout;
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
	movementData_t accel;
	movementData_t gyro;

	//out put for training model
	MovementControllerProcess();
 8001332:	f7ff ff5c 	bl	80011ee <MovementControllerProcess>
	// if we are logging the data.
	if(1 == GetMovementUSBLogging())
 8001336:	f002 fa27 	bl	8003788 <GetMovementUSBLogging>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10a      	bne.n	8001356 <SessionControllerProcess+0x52>
	{
		GetLast( ACCELEROMETER,  &accel);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4619      	mov	r1, r3
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff ff80 	bl	800124c <GetLast>
		GetLast(GYROSCOPE, &gyro);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	2001      	movs	r0, #1
 8001352:	f7ff ff7b 	bl	800124c <GetLast>


	//MovementControllerProcess();


	if ( HAL_GetTick() - timeStateStarted > timeout )
 8001356:	f002 fafb 	bl	8003950 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <SessionControllerProcess+0xa0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001364:	429a      	cmp	r2, r3
 8001366:	d201      	bcs.n	800136c <SessionControllerProcess+0x68>
	{

		current.onEnd();
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	4798      	blx	r3

	}
	if ( 1 == buttonPressed )
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <SessionControllerProcess+0xa4>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <SessionControllerProcess+0x74>
	{

		current.onButtonPress();
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4798      	blx	r3
	}

	if( 1 == accelerometorInterrupt)
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <SessionControllerProcess+0xa8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d106      	bne.n	800138e <SessionControllerProcess+0x8a>
	{
		// The interrupt has been triggered.
		// get what interrupted it from movementController.
		gesture_t gesture =  GetInterruptType( ACCELEROMETER );
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff ff4b 	bl	800121c <GetInterruptType>
 8001386:	4603      	mov	r3, r0
 8001388:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		// run proccess for current state.
		current.stateProcess();
	}


}
 800138c:	e001      	b.n	8001392 <SessionControllerProcess+0x8e>
		current.stateProcess();
 800138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001390:	4798      	blx	r3
}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	; 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
 800139a:	bf00      	nop
 800139c:	200001f8 	.word	0x200001f8
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000020c 	.word	0x2000020c
 80013a8:	20000210 	.word	0x20000210
 80013ac:	20000214 	.word	0x20000214

080013b0 <IdleAwake>:
int Start(){
	timeStateStarted = HAL_GetTick();
	DebugPrint(" State = starting");
	return 0;
}
int IdleAwake(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <IdleAwake+0x28>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <IdleAwake+0x2c>)
 80013ba:	701a      	strb	r2, [r3, #0]
	currentState = IDLE_AWAKE;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <IdleAwake+0x28>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80013c2:	f002 fac5 	bl	8003950 <HAL_GetTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <IdleAwake+0x30>)
 80013ca:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = IdleAwake");
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <IdleAwake+0x34>)
 80013ce:	f002 f99b 	bl	8003708 <DebugPrint>
	return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	200001f8 	.word	0x200001f8
 80013dc:	200001f9 	.word	0x200001f9
 80013e0:	2000020c 	.word	0x2000020c
 80013e4:	0801296c 	.word	0x0801296c

080013e8 <DeepSleep>:
int DeepSleep(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	previouseState = currentState;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <DeepSleep+0x28>)
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <DeepSleep+0x2c>)
 80013f2:	701a      	strb	r2, [r3, #0]
	currentState = DEEP_SLEEP;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <DeepSleep+0x28>)
 80013f6:	2202      	movs	r2, #2
 80013f8:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 80013fa:	f002 faa9 	bl	8003950 <HAL_GetTick>
 80013fe:	4603      	mov	r3, r0
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <DeepSleep+0x30>)
 8001402:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = DeepSleep");
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <DeepSleep+0x34>)
 8001406:	f002 f97f 	bl	8003708 <DebugPrint>
	return 0;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200001f8 	.word	0x200001f8
 8001414:	200001f9 	.word	0x200001f9
 8001418:	2000020c 	.word	0x2000020c
 800141c:	08012980 	.word	0x08012980

08001420 <WaitingForSelection>:
int WaitingForSelection(){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	previouseState = currentState;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <WaitingForSelection+0x28>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <WaitingForSelection+0x2c>)
 800142a:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <WaitingForSelection+0x28>)
 800142e:	2203      	movs	r2, #3
 8001430:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 8001432:	f002 fa8d 	bl	8003950 <HAL_GetTick>
 8001436:	4603      	mov	r3, r0
 8001438:	4a05      	ldr	r2, [pc, #20]	; (8001450 <WaitingForSelection+0x30>)
 800143a:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = WaitingForSelection");
 800143c:	4805      	ldr	r0, [pc, #20]	; (8001454 <WaitingForSelection+0x34>)
 800143e:	f002 f963 	bl	8003708 <DebugPrint>
	return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001f8 	.word	0x200001f8
 800144c:	200001f9 	.word	0x200001f9
 8001450:	2000020c 	.word	0x2000020c
 8001454:	08012994 	.word	0x08012994

08001458 <LoadMode>:
int LoadMode(){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	previouseState = currentState;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <LoadMode+0x28>)
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LoadMode+0x2c>)
 8001462:	701a      	strb	r2, [r3, #0]
	currentState = WAITING_FOR_SELECTION;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <LoadMode+0x28>)
 8001466:	2203      	movs	r2, #3
 8001468:	701a      	strb	r2, [r3, #0]
	timeStateStarted = HAL_GetTick();
 800146a:	f002 fa71 	bl	8003950 <HAL_GetTick>
 800146e:	4603      	mov	r3, r0
 8001470:	4a05      	ldr	r2, [pc, #20]	; (8001488 <LoadMode+0x30>)
 8001472:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = LoadMode");
 8001474:	4805      	ldr	r0, [pc, #20]	; (800148c <LoadMode+0x34>)
 8001476:	f002 f947 	bl	8003708 <DebugPrint>
	return 0;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200001f8 	.word	0x200001f8
 8001484:	200001f9 	.word	0x200001f9
 8001488:	2000020c 	.word	0x2000020c
 800148c:	080129b4 	.word	0x080129b4

08001490 <CliMode>:
int CliMode(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

	previouseState = currentState;
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <CliMode+0x34>)
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <CliMode+0x38>)
 800149a:	701a      	strb	r2, [r3, #0]
	currentState = CLI_MODE;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <CliMode+0x34>)
 800149e:	2206      	movs	r2, #6
 80014a0:	701a      	strb	r2, [r3, #0]
	// clear the button press
	buttonPressed = 0;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <CliMode+0x3c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	// in climode we want the debug output off while we are waiting for input.
	PauseDebugLogging();
 80014a8:	f002 f97a 	bl	80037a0 <PauseDebugLogging>

	timeStateStarted = HAL_GetTick();
 80014ac:	f002 fa50 	bl	8003950 <HAL_GetTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <CliMode+0x40>)
 80014b4:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = CliMode");
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <CliMode+0x44>)
 80014b8:	f002 f926 	bl	8003708 <DebugPrint>

	return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200001f8 	.word	0x200001f8
 80014c8:	200001f9 	.word	0x200001f9
 80014cc:	20000210 	.word	0x20000210
 80014d0:	2000020c 	.word	0x2000020c
 80014d4:	080129c8 	.word	0x080129c8

080014d8 <StartPreviouseMode>:
int StartPreviouseMode(){
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	currentState = previouseState;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <StartPreviouseMode+0x2c>)
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <StartPreviouseMode+0x30>)
 80014e2:	701a      	strb	r2, [r3, #0]
	previouseState = CLI_MODE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <StartPreviouseMode+0x2c>)
 80014e6:	2206      	movs	r2, #6
 80014e8:	701a      	strb	r2, [r3, #0]
	// we also reset to our currentDebugMode
	ResumeDebugLogging();
 80014ea:	f002 f965 	bl	80037b8 <ResumeDebugLogging>

	timeStateStarted = HAL_GetTick();
 80014ee:	f002 fa2f 	bl	8003950 <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a05      	ldr	r2, [pc, #20]	; (800150c <StartPreviouseMode+0x34>)
 80014f6:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = StartPreviouseMode");
 80014f8:	4805      	ldr	r0, [pc, #20]	; (8001510 <StartPreviouseMode+0x38>)
 80014fa:	f002 f905 	bl	8003708 <DebugPrint>
	return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200001f9 	.word	0x200001f9
 8001508:	200001f8 	.word	0x200001f8
 800150c:	2000020c 	.word	0x2000020c
 8001510:	080129dc 	.word	0x080129dc

08001514 <InMode>:
int InMode()
{
 8001514:	b598      	push	{r3, r4, r7, lr}
 8001516:	af00      	add	r7, sp, #0
	currentState = IN_MODE;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <InMode+0x34>)
 800151a:	2205      	movs	r2, #5
 800151c:	701a      	strb	r2, [r3, #0]
	selectedMode = modeTable[currentMode];
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <InMode+0x38>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	490b      	ldr	r1, [pc, #44]	; (8001550 <InMode+0x3c>)
 8001524:	4a0b      	ldr	r2, [pc, #44]	; (8001554 <InMode+0x40>)
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	460c      	mov	r4, r1
 800152c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	timeStateStarted = HAL_GetTick();
 8001532:	f002 fa0d 	bl	8003950 <HAL_GetTick>
 8001536:	4603      	mov	r3, r0
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <InMode+0x44>)
 800153a:	6013      	str	r3, [r2, #0]
	DebugPrint(" State = InMode");
 800153c:	4807      	ldr	r0, [pc, #28]	; (800155c <InMode+0x48>)
 800153e:	f002 f8e3 	bl	8003708 <DebugPrint>
	return 0;
 8001542:	2300      	movs	r3, #0

}
 8001544:	4618      	mov	r0, r3
 8001546:	bd98      	pop	{r3, r4, r7, pc}
 8001548:	200001f8 	.word	0x200001f8
 800154c:	200001fa 	.word	0x200001fa
 8001550:	200001fc 	.word	0x200001fc
 8001554:	200000c4 	.word	0x200000c4
 8001558:	2000020c 	.word	0x2000020c
 800155c:	080129f8 	.word	0x080129f8

08001560 <StartProcess>:
int SleepOutput(){return 0;}
int WaitingForInputOutput(){return 0;}
int CliModeOutput(){return 0;}
int ModeLoading(){return 0;}

int StartProcess(){return 0;}
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
 8001564:	2300      	movs	r3, #0
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <IdleAwakeProcess>:

int IdleAwakeProcess(){return 0;}
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
 8001574:	2300      	movs	r3, #0
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <DeepSleepProcess>:

int DeepSleepProcess(){return 0;}
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
 8001584:	2300      	movs	r3, #0
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <WaitingForSelectionProcess>:

int WaitingForSelectionProcess(){
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
	// check to see if we had any control gestures.
		gesture_t lastGesture  = GetLastGesture();
 8001596:	f7ff fe4d 	bl	8001234 <GetLastGesture>
 800159a:	4603      	mov	r3, r0
 800159c:	77fb      	strb	r3, [r7, #31]

		if( NO_GESTURE != lastGesture ){
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d01e      	beq.n	80015e2 <WaitingForSelectionProcess+0x52>
			// gesture recognized response.

			if(TWIST_Y == lastGesture )
 80015a4:	7ffb      	ldrb	r3, [r7, #31]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d102      	bne.n	80015b0 <WaitingForSelectionProcess+0x20>
			{ currentMode = COLOUR_CHANGE; }
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <WaitingForSelectionProcess+0x5c>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	701a      	strb	r2, [r3, #0]
			if(SUDDEN_UP == lastGesture)
 80015b0:	7ffb      	ldrb	r3, [r7, #31]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <WaitingForSelectionProcess+0x2c>
			{currentMode = BREATHING_TRAINER;}
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <WaitingForSelectionProcess+0x5c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
			stateTableEntry_t current = stateTabel[currentState];
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <WaitingForSelectionProcess+0x60>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <WaitingForSelectionProcess+0x64>)
 80015c4:	460b      	mov	r3, r1
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	1a5b      	subs	r3, r3, r1
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	463c      	mov	r4, r7
 80015d0:	461d      	mov	r5, r3
 80015d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			current.onGestureRecognize();
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4798      	blx	r3

		}



	return 0;}
 80015e2:	2300      	movs	r3, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	200001fa 	.word	0x200001fa
 80015f0:	200001f8 	.word	0x200001f8
 80015f4:	20000000 	.word	0x20000000

080015f8 <LoadModeProcess>:

int LoadModeProcess(){return 0;}
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	2300      	movs	r3, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <CliModeProcess>:

int CliModeProcess(){
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	ConsoleProcess();
 800160c:	f7ff f89c 	bl	8000748 <ConsoleProcess>

	return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <InModeProcess>:
int StartPreviouseModeProcess(){return 0;}

int InModeProcess(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	selectedMode.modeProcess();
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <InModeProcess+0x10>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4798      	blx	r3
	return 0;}
 8001622:	2300      	movs	r3, #0
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001fc 	.word	0x200001fc

0800162c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
	uint16_t userButtonPin = GPIO_PIN_0;
 8001636:	2301      	movs	r3, #1
 8001638:	81fb      	strh	r3, [r7, #14]
	GPIO_TypeDef *userButtonPort = GPIOA;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_GPIO_EXTI_Callback+0x40>)
 800163c:	60bb      	str	r3, [r7, #8]

	// make sure we are  using the right pin for the user button.



	if(HAL_GPIO_ReadPin (userButtonPort, userButtonPin)==GPIO_PIN_SET){
 800163e:	89fb      	ldrh	r3, [r7, #14]
 8001640:	4619      	mov	r1, r3
 8001642:	68b8      	ldr	r0, [r7, #8]
 8001644:	f003 f80a 	bl	800465c <HAL_GPIO_ReadPin>
 8001648:	4603      	mov	r3, r0
 800164a:	2b01      	cmp	r3, #1
 800164c:	d102      	bne.n	8001654 <HAL_GPIO_EXTI_Callback+0x28>

		buttonPressed = 1;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_GPIO_EXTI_Callback+0x44>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
	}
	if( GPIO_Pin == GPIO_PIN_8)
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165a:	d102      	bne.n	8001662 <HAL_GPIO_EXTI_Callback+0x36>
	{
		accelerometorInterrupt = 1;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_GPIO_EXTI_Callback+0x48>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]
	}

}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40020000 	.word	0x40020000
 8001670:	20000210 	.word	0x20000210
 8001674:	20000214 	.word	0x20000214

08001678 <Lis3dhInit>:

}



HAL_StatusTypeDef Lis3dhInit(I2C_HandleTypeDef *I2Cxhandle){
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af02      	add	r7, sp, #8
 800167e:	6078      	str	r0, [r7, #4]

	 HAL_StatusTypeDef ret;

	    uint8_t sendBuff[2];
	    uint8_t reciveBuff[12];
	    I2Cx = I2Cxhandle;
 8001680:	4a4b      	ldr	r2, [pc, #300]	; (80017b0 <Lis3dhInit+0x138>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]

	    sendBuff[0] = WHO_AM_I|LIS3DH_READ;
 8001686:	238f      	movs	r3, #143	; 0x8f
 8001688:	753b      	strb	r3, [r7, #20]
	    ret = HAL_I2C_IsDeviceReady(I2Cx,LIS3DH_ADDR,1, HAL_MAX_DELAY);
 800168a:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <Lis3dhInit+0x138>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	2130      	movs	r1, #48	; 0x30
 8001690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001694:	2201      	movs	r2, #1
 8001696:	f005 f89d 	bl	80067d4 <HAL_I2C_IsDeviceReady>
 800169a:	4603      	mov	r3, r0
 800169c:	75fb      	strb	r3, [r7, #23]

	    ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800169e:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <Lis3dhInit+0x138>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	2130      	movs	r1, #48	; 0x30
 80016a4:	f107 0214 	add.w	r2, r7, #20
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	f004 fd6c 	bl	800618c <HAL_I2C_Master_Transmit>
 80016b4:	4603      	mov	r3, r0
 80016b6:	75fb      	strb	r3, [r7, #23]
	    if(ret != HAL_OK) {
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <Lis3dhInit+0x4c>
	        //Handle Error
	    	errorHandler();
 80016be:	f000 f9db 	bl	8001a78 <errorHandler>
 80016c2:	e070      	b.n	80017a6 <Lis3dhInit+0x12e>

	    } else {

	        ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80016c4:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <Lis3dhInit+0x138>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	2130      	movs	r1, #48	; 0x30
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2302      	movs	r3, #2
 80016d6:	f004 fe57 	bl	8006388 <HAL_I2C_Master_Receive>
 80016da:	4603      	mov	r3, r0
 80016dc:	75fb      	strb	r3, [r7, #23]
	        if(ret != HAL_OK) {
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <Lis3dhInit+0x72>

	        	//Handle error.
	        	errorHandler();
 80016e4:	f000 f9c8 	bl	8001a78 <errorHandler>
 80016e8:	e05d      	b.n	80017a6 <Lis3dhInit+0x12e>
	        } else {

	        	// configure the sensor.
	        	// Setting our resolution 400HZ so that we can use double interrupts
	        	// and that we will read all three axis
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 80016ea:	23a0      	movs	r3, #160	; 0xa0
 80016ec:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <Lis3dhInit+0x138>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	2130      	movs	r1, #48	; 0x30
 80016f4:	f107 0214 	add.w	r2, r7, #20
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2301      	movs	r3, #1
 8001700:	f004 fd44 	bl	800618c <HAL_I2C_Master_Transmit>
 8001704:	4603      	mov	r3, r0
 8001706:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <Lis3dhInit+0x138>)
 800170a:	6818      	ldr	r0, [r3, #0]
 800170c:	2130      	movs	r1, #48	; 0x30
 800170e:	f107 0208 	add.w	r2, r7, #8
 8001712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2302      	movs	r3, #2
 800171a:	f004 fe35 	bl	8006388 <HAL_I2C_Master_Receive>
 800171e:	4603      	mov	r3, r0
 8001720:	75fb      	strb	r3, [r7, #23]

				sendBuff[0] = LIS3DH_REG_CTRL1|LIS3DH_WRITE;
 8001722:	2320      	movs	r3, #32
 8001724:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_400HZ;
 8001726:	2377      	movs	r3, #119	; 0x77
 8001728:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800172a:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <Lis3dhInit+0x138>)
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	2130      	movs	r1, #48	; 0x30
 8001730:	f107 0214 	add.w	r2, r7, #20
 8001734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	f004 fd26 	bl	800618c <HAL_I2C_Master_Transmit>
 8001740:	4603      	mov	r3, r0
 8001742:	75fb      	strb	r3, [r7, #23]

				// set high resolution output
				sendBuff[0] = LIS3DH_REG_CTRL4|LIS3DH_WRITE;
 8001744:	2323      	movs	r3, #35	; 0x23
 8001746:	753b      	strb	r3, [r7, #20]
				sendBuff[1] = LIS3DH_ON_400HZ;
 8001748:	2377      	movs	r3, #119	; 0x77
 800174a:	757b      	strb	r3, [r7, #21]
				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <Lis3dhInit+0x138>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	2130      	movs	r1, #48	; 0x30
 8001752:	f107 0214 	add.w	r2, r7, #20
 8001756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2302      	movs	r3, #2
 800175e:	f004 fd15 	bl	800618c <HAL_I2C_Master_Transmit>
 8001762:	4603      	mov	r3, r0
 8001764:	75fb      	strb	r3, [r7, #23]


				//Read to make sure the write worked.
				sendBuff[0]  = LIS3DH_REG_CTRL1  |LIS3DH_READ;
 8001766:	23a0      	movs	r3, #160	; 0xa0
 8001768:	753b      	strb	r3, [r7, #20]

				ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <Lis3dhInit+0x138>)
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	2130      	movs	r1, #48	; 0x30
 8001770:	f107 0214 	add.w	r2, r7, #20
 8001774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2301      	movs	r3, #1
 800177c:	f004 fd06 	bl	800618c <HAL_I2C_Master_Transmit>
 8001780:	4603      	mov	r3, r0
 8001782:	75fb      	strb	r3, [r7, #23]
				ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <Lis3dhInit+0x138>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	2130      	movs	r1, #48	; 0x30
 800178a:	f107 0208 	add.w	r2, r7, #8
 800178e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2302      	movs	r3, #2
 8001796:	f004 fdf7 	bl	8006388 <HAL_I2C_Master_Receive>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]

				ret = Lis3dhInteruptSetup();
 800179e:	f000 f8ad 	bl	80018fc <Lis3dhInteruptSetup>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
	        }

	    }


return ret;
 80017a6:	7dfb      	ldrb	r3, [r7, #23]




}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000218 	.word	0x20000218

080017b4 <Lis3dhGetAcc>:
HAL_StatusTypeDef Lis3dhGetAcc(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af02      	add	r7, sp, #8
	uint8_t reciveBuff[12];

	HAL_StatusTypeDef ret;

	//1. Read STATUS_REG
	 sendBuff[0]  = LIS3DH_REG_STATUS  | LIS3DH_READ;
 80017ba:	23a7      	movs	r3, #167	; 0xa7
 80017bc:	753b      	strb	r3, [r7, #20]
		ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <Lis3dhGetAcc+0xf4>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	2130      	movs	r1, #48	; 0x30
 80017c4:	f107 0214 	add.w	r2, r7, #20
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	f004 fcdc 	bl	800618c <HAL_I2C_Master_Transmit>
 80017d4:	4603      	mov	r3, r0
 80017d6:	75fb      	strb	r3, [r7, #23]
		ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <Lis3dhGetAcc+0xf4>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	2130      	movs	r1, #48	; 0x30
 80017de:	f107 0208 	add.w	r2, r7, #8
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2302      	movs	r3, #2
 80017ea:	f004 fdcd 	bl	8006388 <HAL_I2C_Master_Receive>
 80017ee:	4603      	mov	r3, r0
 80017f0:	75fb      	strb	r3, [r7, #23]

	// if there is new data on any axis proceed ZYXDA,ZDA,YDA = 1 in the status_reg.

	// else do nothing. this isn't ideal maybe we should hang out here till there is new data.
	sendBuff[0] = LIS3DH_REG_OUT_X_L  | LIS3DH_READ;
 80017f2:	23a8      	movs	r3, #168	; 0xa8
 80017f4:	753b      	strb	r3, [r7, #20]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <Lis3dhGetAcc+0xf4>)
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	2130      	movs	r1, #48	; 0x30
 80017fc:	f107 0214 	add.w	r2, r7, #20
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	f004 fcc0 	bl	800618c <HAL_I2C_Master_Transmit>
 800180c:	4603      	mov	r3, r0
 800180e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 6 , HAL_MAX_DELAY);
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <Lis3dhGetAcc+0xf4>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	2130      	movs	r1, #48	; 0x30
 8001816:	f107 0208 	add.w	r2, r7, #8
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2306      	movs	r3, #6
 8001822:	f004 fdb1 	bl	8006388 <HAL_I2C_Master_Receive>
 8001826:	4603      	mov	r3, r0
 8001828:	75fb      	strb	r3, [r7, #23]

	 int16_t val[3];

	 val[0] = (int16_t)reciveBuff[1];
 800182a:	7a7b      	ldrb	r3, [r7, #9]
 800182c:	b21b      	sxth	r3, r3
 800182e:	803b      	strh	r3, [r7, #0]
	  val[0] = (val[0] * 256) + (int16_t)reciveBuff[0];
 8001830:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001834:	b29b      	uxth	r3, r3
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	b29a      	uxth	r2, r3
 800183a:	7a3b      	ldrb	r3, [r7, #8]
 800183c:	b29b      	uxth	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	b29b      	uxth	r3, r3
 8001842:	b21b      	sxth	r3, r3
 8001844:	803b      	strh	r3, [r7, #0]
	  val[1] = (int16_t)reciveBuff[3];
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	b21b      	sxth	r3, r3
 800184a:	807b      	strh	r3, [r7, #2]
	  val[1] = (val[1] * 256) + (int16_t)reciveBuff[2];
 800184c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001850:	b29b      	uxth	r3, r3
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b29a      	uxth	r2, r3
 8001856:	7abb      	ldrb	r3, [r7, #10]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4413      	add	r3, r2
 800185c:	b29b      	uxth	r3, r3
 800185e:	b21b      	sxth	r3, r3
 8001860:	807b      	strh	r3, [r7, #2]
	  val[2] = (int16_t)reciveBuff[5];
 8001862:	7b7b      	ldrb	r3, [r7, #13]
 8001864:	b21b      	sxth	r3, r3
 8001866:	80bb      	strh	r3, [r7, #4]
	  val[2] = (val[2] * 256) + (int16_t)reciveBuff[4];
 8001868:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800186c:	b29b      	uxth	r3, r3
 800186e:	021b      	lsls	r3, r3, #8
 8001870:	b29a      	uxth	r2, r3
 8001872:	7b3b      	ldrb	r3, [r7, #12]
 8001874:	b29b      	uxth	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21b      	sxth	r3, r3
 800187c:	80bb      	strh	r3, [r7, #4]

	  LastXAcel = val[0];
 800187e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <Lis3dhGetAcc+0xf8>)
 8001886:	801a      	strh	r2, [r3, #0]
	  LastYAcel = val[1];
 8001888:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <Lis3dhGetAcc+0xfc>)
 8001890:	801a      	strh	r2, [r3, #0]
	  LastZAcel = val[2];
 8001892:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001896:	b29a      	uxth	r2, r3
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <Lis3dhGetAcc+0x100>)
 800189a:	801a      	strh	r2, [r3, #0]

	return ret;
 800189c:	7dfb      	ldrb	r3, [r7, #23]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000218 	.word	0x20000218
 80018ac:	2000021c 	.word	0x2000021c
 80018b0:	2000021e 	.word	0x2000021e
 80018b4:	20000220 	.word	0x20000220

080018b8 <AccelGetData>:
void Lis3dhSetRange(int8_t range){}

void AccelGetData(int16_t *acelX, int16_t*acelY, int16_t*acelZ)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	*acelX = LastXAcel;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <AccelGetData+0x38>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	801a      	strh	r2, [r3, #0]
	*acelY = LastYAcel;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <AccelGetData+0x3c>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	801a      	strh	r2, [r3, #0]
	*acelZ = LastZAcel;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <AccelGetData+0x40>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b21a      	sxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	801a      	strh	r2, [r3, #0]

}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000021c 	.word	0x2000021c
 80018f4:	2000021e 	.word	0x2000021e
 80018f8:	20000220 	.word	0x20000220

080018fc <Lis3dhInteruptSetup>:
HAL_StatusTypeDef Lis3dhInteruptSetup()
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
	// default to  unlatched.
	HAL_StatusTypeDef ret = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	// set the double tap interrupt

	// turn the click interrupt on.
	sendBuff[0] = LIS3DH_REG_CTRL3 | LIS3DH_WRITE;
 8001906:	2322      	movs	r3, #34	; 0x22
 8001908:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x80;//il_click
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	2130      	movs	r1, #48	; 0x30
 8001914:	f107 020c 	add.w	r2, r7, #12
 8001918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2302      	movs	r3, #2
 8001920:	f004 fc34 	bl	800618c <HAL_I2C_Master_Transmit>
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]


	// turn double click on for all axis
	sendBuff[0] = LIS3DH_CLICK_CFG | LIS3DH_WRITE;
 8001928:	2338      	movs	r3, #56	; 0x38
 800192a:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 0x2A;// enable double click on all axes.
 800192c:	232a      	movs	r3, #42	; 0x2a
 800192e:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001930:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	2130      	movs	r1, #48	; 0x30
 8001936:	f107 020c 	add.w	r2, r7, #12
 800193a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2302      	movs	r3, #2
 8001942:	f004 fc23 	bl	800618c <HAL_I2C_Master_Transmit>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
	// configure threshold.
	sendBuff[0] = LIS3DH_CLICK_THS | LIS3DH_WRITE;
 800194a:	233a      	movs	r3, #58	; 0x3a
 800194c:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 60;// recomended from adafruit.
 800194e:	233c      	movs	r3, #60	; 0x3c
 8001950:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	2130      	movs	r1, #48	; 0x30
 8001958:	f107 020c 	add.w	r2, r7, #12
 800195c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2302      	movs	r3, #2
 8001964:	f004 fc12 	bl	800618c <HAL_I2C_Master_Transmit>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
	// set Time Limit
	sendBuff[0] = LIS3DH_TIMELIMIT | LIS3DH_WRITE;
 800196c:	233b      	movs	r3, #59	; 0x3b
 800196e:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 10;// recomended from adafruit.
 8001970:	230a      	movs	r3, #10
 8001972:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	2130      	movs	r1, #48	; 0x30
 800197a:	f107 020c 	add.w	r2, r7, #12
 800197e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2302      	movs	r3, #2
 8001986:	f004 fc01 	bl	800618c <HAL_I2C_Master_Transmit>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]

	// set time latency
	sendBuff[0] = LIS3DH_TIME_LATENCY | LIS3DH_WRITE;
 800198e:	233c      	movs	r3, #60	; 0x3c
 8001990:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 20;// recomended from adafruit.
 8001992:	2314      	movs	r3, #20
 8001994:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 8001996:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	2130      	movs	r1, #48	; 0x30
 800199c:	f107 020c 	add.w	r2, r7, #12
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2302      	movs	r3, #2
 80019a8:	f004 fbf0 	bl	800618c <HAL_I2C_Master_Transmit>
 80019ac:	4603      	mov	r3, r0
 80019ae:	73fb      	strb	r3, [r7, #15]
	// set time window
	sendBuff[0] = LIS3DH_TIME_WINDOW | LIS3DH_WRITE;
 80019b0:	233d      	movs	r3, #61	; 0x3d
 80019b2:	733b      	strb	r3, [r7, #12]
	sendBuff[1] = 255;// recomended from adafruit.
 80019b4:	23ff      	movs	r3, #255	; 0xff
 80019b6:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 2, HAL_MAX_DELAY);
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 80019ba:	6818      	ldr	r0, [r3, #0]
 80019bc:	2130      	movs	r1, #48	; 0x30
 80019be:	f107 020c 	add.w	r2, r7, #12
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2302      	movs	r3, #2
 80019ca:	f004 fbdf 	bl	800618c <HAL_I2C_Master_Transmit>
 80019ce:	4603      	mov	r3, r0
 80019d0:	73fb      	strb	r3, [r7, #15]

	// read last set to make sure it worked?
	sendBuff[0]  = LIS3DH_CLICK_SRC  |LIS3DH_READ;
 80019d2:	23b9      	movs	r3, #185	; 0xb9
 80019d4:	733b      	strb	r3, [r7, #12]

	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	2130      	movs	r1, #48	; 0x30
 80019dc:	f107 020c 	add.w	r2, r7, #12
 80019e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2301      	movs	r3, #1
 80019e8:	f004 fbd0 	bl	800618c <HAL_I2C_Master_Transmit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <Lis3dhInteruptSetup+0x118>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	2130      	movs	r1, #48	; 0x30
 80019f6:	463a      	mov	r2, r7
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2302      	movs	r3, #2
 8001a00:	f004 fcc2 	bl	8006388 <HAL_I2C_Master_Receive>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]

}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000218 	.word	0x20000218

08001a18 <PollInterrupt>:
int PollInterrupt()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef ret = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75fb      	strb	r3, [r7, #23]
	uint8_t sendBuff[2];
	uint8_t reciveBuff[12];
	uint8_t regValues=0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75bb      	strb	r3, [r7, #22]
	sendBuff[0]  = LIS3DH_CLICK_SRC  |LIS3DH_READ;
 8001a26:	23b9      	movs	r3, #185	; 0xb9
 8001a28:	733b      	strb	r3, [r7, #12]
	ret = HAL_I2C_Master_Transmit(I2Cx, LIS3DH_ADDR, sendBuff, 1, HAL_MAX_DELAY);
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <PollInterrupt+0x5c>)
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	2130      	movs	r1, #48	; 0x30
 8001a30:	f107 020c 	add.w	r2, r7, #12
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f004 fba6 	bl	800618c <HAL_I2C_Master_Transmit>
 8001a40:	4603      	mov	r3, r0
 8001a42:	75fb      	strb	r3, [r7, #23]
	ret = HAL_I2C_Master_Receive(I2Cx, LIS3DH_ADDR, reciveBuff, 2, HAL_MAX_DELAY);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <PollInterrupt+0x5c>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	2130      	movs	r1, #48	; 0x30
 8001a4a:	463a      	mov	r2, r7
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2302      	movs	r3, #2
 8001a54:	f004 fc98 	bl	8006388 <HAL_I2C_Master_Receive>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	75fb      	strb	r3, [r7, #23]
	regValues = reciveBuff[0];
 8001a5c:	783b      	ldrb	r3, [r7, #0]
 8001a5e:	75bb      	strb	r3, [r7, #22]
	if(regValues > 0)
 8001a60:	7dbb      	ldrb	r3, [r7, #22]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <PollInterrupt+0x52>
	{
		int i =0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
	}

}
 8001a6a:	bf00      	nop
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000218 	.word	0x20000218

08001a78 <errorHandler>:
void errorHandler()
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
	// handle the error
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <Send_USB_Console_Message>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_USB_Console_Message (char *string)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	DebugPrint(string);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f001 fe3a 	bl	8003708 <DebugPrint>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <Mount_USB>:



void Mount_USB (void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0

	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	490a      	ldr	r1, [pc, #40]	; (8001acc <Mount_USB+0x30>)
 8001aa4:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <Mount_USB+0x34>)
 8001aa6:	f00e fbc5 	bl	8010234 <f_mount>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <Mount_USB+0x38>)
 8001ab0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_USB_Console_Message ("ERROR!!! in mounting USB ...\n\n");
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <Mount_USB+0x38>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <Mount_USB+0x26>
 8001aba:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <Mount_USB+0x3c>)
 8001abc:	f7ff ffe3 	bl	8001a86 <Send_USB_Console_Message>
	else Send_USB_Console_Message("USB mounted successfully...\n");
}
 8001ac0:	e002      	b.n	8001ac8 <Mount_USB+0x2c>
	else Send_USB_Console_Message("USB mounted successfully...\n");
 8001ac2:	4806      	ldr	r0, [pc, #24]	; (8001adc <Mount_USB+0x40>)
 8001ac4:	f7ff ffdf 	bl	8001a86 <Send_USB_Console_Message>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200033c0 	.word	0x200033c0
 8001ad0:	200033c4 	.word	0x200033c4
 8001ad4:	2000023c 	.word	0x2000023c
 8001ad8:	08012a08 	.word	0x08012a08
 8001adc:	08012a28 	.word	0x08012a28

08001ae0 <Check_File>:
    free(path);
    return fresult;
}

FRESULT Check_File(char *name )
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001ae8:	4906      	ldr	r1, [pc, #24]	; (8001b04 <Check_File+0x24>)
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f00e fe4e 	bl	801078c <f_stat>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <Check_File+0x28>)
 8001af6:	701a      	strb	r2, [r3, #0]
	return fresult;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <Check_File+0x28>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000224 	.word	0x20000224
 8001b08:	2000023c 	.word	0x2000023c

08001b0c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8001b14:	4943      	ldr	r1, [pc, #268]	; (8001c24 <Create_File+0x118>)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f00e fe38 	bl	801078c <f_stat>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <Create_File+0x11c>)
 8001b22:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001b24:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <Create_File+0x11c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d112      	bne.n	8001b52 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001b2c:	2064      	movs	r0, #100	; 0x64
 8001b2e:	f00f fb41 	bl	80111b4 <malloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	493c      	ldr	r1, [pc, #240]	; (8001c2c <Create_File+0x120>)
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f00f fd44 	bl	80115c8 <siprintf>
		Send_USB_Console_Message(buf);
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff ffa0 	bl	8001a86 <Send_USB_Console_Message>
		free(buf);
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f00f fb3c 	bl	80111c4 <free>
	    return fresult;
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <Create_File+0x11c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	e063      	b.n	8001c1a <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001b52:	220b      	movs	r2, #11
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4836      	ldr	r0, [pc, #216]	; (8001c30 <Create_File+0x124>)
 8001b58:	f00e fbb2 	bl	80102c0 <f_open>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <Create_File+0x11c>)
 8001b62:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001b64:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <Create_File+0x11c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f00f fb21 	bl	80111b4 <malloc>
 8001b72:	4603      	mov	r3, r0
 8001b74:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001b76:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <Create_File+0x11c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	492d      	ldr	r1, [pc, #180]	; (8001c34 <Create_File+0x128>)
 8001b80:	6938      	ldr	r0, [r7, #16]
 8001b82:	f00f fd21 	bl	80115c8 <siprintf>
			Send_USB_Console_Message(buf);
 8001b86:	6938      	ldr	r0, [r7, #16]
 8001b88:	f7ff ff7d 	bl	8001a86 <Send_USB_Console_Message>
			free(buf);
 8001b8c:	6938      	ldr	r0, [r7, #16]
 8001b8e:	f00f fb19 	bl	80111c4 <free>
		    return fresult;
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <Create_File+0x11c>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	e040      	b.n	8001c1a <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f00f fb0b 	bl	80111b4 <malloc>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4924      	ldr	r1, [pc, #144]	; (8001c38 <Create_File+0x12c>)
 8001ba6:	69f8      	ldr	r0, [r7, #28]
 8001ba8:	f00f fd0e 	bl	80115c8 <siprintf>
			Send_USB_Console_Message(buf);
 8001bac:	69f8      	ldr	r0, [r7, #28]
 8001bae:	f7ff ff6a 	bl	8001a86 <Send_USB_Console_Message>
			free(buf);
 8001bb2:	69f8      	ldr	r0, [r7, #28]
 8001bb4:	f00f fb06 	bl	80111c4 <free>
		}

		fresult = f_close(&USBHFile);
 8001bb8:	481d      	ldr	r0, [pc, #116]	; (8001c30 <Create_File+0x124>)
 8001bba:	f00e fdbd 	bl	8010738 <f_close>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <Create_File+0x11c>)
 8001bc4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <Create_File+0x11c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d013      	beq.n	8001bf6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001bce:	2064      	movs	r0, #100	; 0x64
 8001bd0:	f00f faf0 	bl	80111b4 <malloc>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <Create_File+0x11c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <Create_File+0x130>)
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f00f fcf0 	bl	80115c8 <siprintf>
			Send_USB_Console_Message(buf);
 8001be8:	6978      	ldr	r0, [r7, #20]
 8001bea:	f7ff ff4c 	bl	8001a86 <Send_USB_Console_Message>
			free(buf);
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f00f fae8 	bl	80111c4 <free>
 8001bf4:	e00f      	b.n	8001c16 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001bf6:	2064      	movs	r0, #100	; 0x64
 8001bf8:	f00f fadc 	bl	80111b4 <malloc>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	490f      	ldr	r1, [pc, #60]	; (8001c40 <Create_File+0x134>)
 8001c04:	69b8      	ldr	r0, [r7, #24]
 8001c06:	f00f fcdf 	bl	80115c8 <siprintf>
			Send_USB_Console_Message(buf);
 8001c0a:	69b8      	ldr	r0, [r7, #24]
 8001c0c:	f7ff ff3b 	bl	8001a86 <Send_USB_Console_Message>
			free(buf);
 8001c10:	69b8      	ldr	r0, [r7, #24]
 8001c12:	f00f fad7 	bl	80111c4 <free>
		}
	}
    return fresult;
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <Create_File+0x11c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000224 	.word	0x20000224
 8001c28:	2000023c 	.word	0x2000023c
 8001c2c:	08012cb0 	.word	0x08012cb0
 8001c30:	200035f4 	.word	0x200035f4
 8001c34:	08012ce8 	.word	0x08012ce8
 8001c38:	08012d10 	.word	0x08012d10
 8001c3c:	08012d50 	.word	0x08012d50
 8001c40:	08012c90 	.word	0x08012c90

08001c44 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f00e fdd6 	bl	80107fe <f_mkdir>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <Create_Dir+0x74>)
 8001c58:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <Create_Dir+0x74>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d110      	bne.n	8001c84 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8001c62:	2064      	movs	r0, #100	; 0x64
 8001c64:	f00f faa6 	bl	80111b4 <malloc>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4913      	ldr	r1, [pc, #76]	; (8001cbc <Create_Dir+0x78>)
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f00f fca9 	bl	80115c8 <siprintf>
    	Send_USB_Console_Message (buf);
 8001c76:	68b8      	ldr	r0, [r7, #8]
 8001c78:	f7ff ff05 	bl	8001a86 <Send_USB_Console_Message>
    	free(buf);
 8001c7c:	68b8      	ldr	r0, [r7, #8]
 8001c7e:	f00f faa1 	bl	80111c4 <free>
 8001c82:	e012      	b.n	8001caa <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001c84:	2064      	movs	r0, #100	; 0x64
 8001c86:	f00f fa95 	bl	80111b4 <malloc>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <Create_Dir+0x74>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	490a      	ldr	r1, [pc, #40]	; (8001cc0 <Create_Dir+0x7c>)
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f00f fc95 	bl	80115c8 <siprintf>
    	Send_USB_Console_Message(buf);
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7ff fef1 	bl	8001a86 <Send_USB_Console_Message>
    	free(buf);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f00f fa8d 	bl	80111c4 <free>
    }
    return fresult;
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <Create_Dir+0x74>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000023c 	.word	0x2000023c
 8001cbc:	08012e30 	.word	0x08012e30
 8001cc0:	08012e58 	.word	0x08012e58

08001cc4 <I3G450D_Init>:
static uint8_t spiRxBuf[7];

SPI_HandleTypeDef * spiHandle;

void I3G450D_Init(SPI_HandleTypeDef * xSPI)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

	spiHandle = xSPI;
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <I3G450D_Init+0x180>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	485c      	ldr	r0, [pc, #368]	; (8001e48 <I3G450D_Init+0x184>)
 8001cd8:	f002 fcd8 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001cdc:	2014      	movs	r0, #20
 8001cde:	f001 fe43 	bl	8003968 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4858      	ldr	r0, [pc, #352]	; (8001e48 <I3G450D_Init+0x184>)
 8001ce8:	f002 fcd0 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001cec:	2014      	movs	r0, #20
 8001cee:	f001 fe3b 	bl	8003968 <HAL_Delay>
	spiTxBuf[0]=0x20;
 8001cf2:	4b56      	ldr	r3, [pc, #344]	; (8001e4c <I3G450D_Init+0x188>)
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0xff;
 8001cf8:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <I3G450D_Init+0x188>)
 8001cfa:	22ff      	movs	r2, #255	; 0xff
 8001cfc:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <I3G450D_Init+0x180>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	2332      	movs	r3, #50	; 0x32
 8001d04:	2202      	movs	r2, #2
 8001d06:	4951      	ldr	r1, [pc, #324]	; (8001e4c <I3G450D_Init+0x188>)
 8001d08:	f005 ff8f 	bl	8007c2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2102      	movs	r1, #2
 8001d10:	484d      	ldr	r0, [pc, #308]	; (8001e48 <I3G450D_Init+0x184>)
 8001d12:	f002 fcbb 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d16:	2014      	movs	r0, #20
 8001d18:	f001 fe26 	bl	8003968 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4849      	ldr	r0, [pc, #292]	; (8001e48 <I3G450D_Init+0x184>)
 8001d22:	f002 fcb3 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d26:	2014      	movs	r0, #20
 8001d28:	f001 fe1e 	bl	8003968 <HAL_Delay>
	spiTxBuf[0]=0x21;
 8001d2c:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <I3G450D_Init+0x188>)
 8001d2e:	2221      	movs	r2, #33	; 0x21
 8001d30:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001d32:	4b46      	ldr	r3, [pc, #280]	; (8001e4c <I3G450D_Init+0x188>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <I3G450D_Init+0x180>)
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	2332      	movs	r3, #50	; 0x32
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4942      	ldr	r1, [pc, #264]	; (8001e4c <I3G450D_Init+0x188>)
 8001d42:	f005 ff72 	bl	8007c2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001d46:	2201      	movs	r2, #1
 8001d48:	2102      	movs	r1, #2
 8001d4a:	483f      	ldr	r0, [pc, #252]	; (8001e48 <I3G450D_Init+0x184>)
 8001d4c:	f002 fc9e 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d50:	2014      	movs	r0, #20
 8001d52:	f001 fe09 	bl	8003968 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2102      	movs	r1, #2
 8001d5a:	483b      	ldr	r0, [pc, #236]	; (8001e48 <I3G450D_Init+0x184>)
 8001d5c:	f002 fc96 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d60:	2014      	movs	r0, #20
 8001d62:	f001 fe01 	bl	8003968 <HAL_Delay>
	spiTxBuf[0]=0x22;
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <I3G450D_Init+0x188>)
 8001d68:	2222      	movs	r2, #34	; 0x22
 8001d6a:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x00;
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <I3G450D_Init+0x188>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <I3G450D_Init+0x180>)
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	2332      	movs	r3, #50	; 0x32
 8001d78:	2202      	movs	r2, #2
 8001d7a:	4934      	ldr	r1, [pc, #208]	; (8001e4c <I3G450D_Init+0x188>)
 8001d7c:	f005 ff55 	bl	8007c2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2102      	movs	r1, #2
 8001d84:	4830      	ldr	r0, [pc, #192]	; (8001e48 <I3G450D_Init+0x184>)
 8001d86:	f002 fc81 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d8a:	2014      	movs	r0, #20
 8001d8c:	f001 fdec 	bl	8003968 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2102      	movs	r1, #2
 8001d94:	482c      	ldr	r0, [pc, #176]	; (8001e48 <I3G450D_Init+0x184>)
 8001d96:	f002 fc79 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001d9a:	2014      	movs	r0, #20
 8001d9c:	f001 fde4 	bl	8003968 <HAL_Delay>
	spiTxBuf[0]=0x23;
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <I3G450D_Init+0x188>)
 8001da2:	2223      	movs	r2, #35	; 0x23
 8001da4:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x20;
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <I3G450D_Init+0x188>)
 8001da8:	2220      	movs	r2, #32
 8001daa:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <I3G450D_Init+0x180>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	2332      	movs	r3, #50	; 0x32
 8001db2:	2202      	movs	r2, #2
 8001db4:	4925      	ldr	r1, [pc, #148]	; (8001e4c <I3G450D_Init+0x188>)
 8001db6:	f005 ff38 	bl	8007c2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	4822      	ldr	r0, [pc, #136]	; (8001e48 <I3G450D_Init+0x184>)
 8001dc0:	f002 fc64 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001dc4:	2014      	movs	r0, #20
 8001dc6:	f001 fdcf 	bl	8003968 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2102      	movs	r1, #2
 8001dce:	481e      	ldr	r0, [pc, #120]	; (8001e48 <I3G450D_Init+0x184>)
 8001dd0:	f002 fc5c 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	f001 fdc7 	bl	8003968 <HAL_Delay>
	spiTxBuf[0]=0x24;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <I3G450D_Init+0x188>)
 8001ddc:	2224      	movs	r2, #36	; 0x24
 8001dde:	701a      	strb	r2, [r3, #0]
	spiTxBuf[1]=0x10;
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <I3G450D_Init+0x188>)
 8001de2:	2210      	movs	r2, #16
 8001de4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,2,50);
 8001de6:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <I3G450D_Init+0x180>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	2332      	movs	r3, #50	; 0x32
 8001dec:	2202      	movs	r2, #2
 8001dee:	4917      	ldr	r1, [pc, #92]	; (8001e4c <I3G450D_Init+0x188>)
 8001df0:	f005 ff1b 	bl	8007c2a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2102      	movs	r1, #2
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <I3G450D_Init+0x184>)
 8001dfa:	f002 fc47 	bl	800468c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001dfe:	2014      	movs	r0, #20
 8001e00:	f001 fdb2 	bl	8003968 <HAL_Delay>
	// read who am i register
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2102      	movs	r1, #2
 8001e08:	480f      	ldr	r0, [pc, #60]	; (8001e48 <I3G450D_Init+0x184>)
 8001e0a:	f002 fc3f 	bl	800468c <HAL_GPIO_WritePin>
	spiTxBuf[0]=0x0F|0x80;
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <I3G450D_Init+0x188>)
 8001e10:	228f      	movs	r2, #143	; 0x8f
 8001e12:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <I3G450D_Init+0x180>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	2332      	movs	r3, #50	; 0x32
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	490b      	ldr	r1, [pc, #44]	; (8001e4c <I3G450D_Init+0x188>)
 8001e1e:	f005 ff04 	bl	8007c2a <HAL_SPI_Transmit>
	HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <I3G450D_Init+0x180>)
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	2332      	movs	r3, #50	; 0x32
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4909      	ldr	r1, [pc, #36]	; (8001e50 <I3G450D_Init+0x18c>)
 8001e2c:	f006 f839 	bl	8007ea2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001e30:	2201      	movs	r2, #1
 8001e32:	2102      	movs	r1, #2
 8001e34:	4804      	ldr	r0, [pc, #16]	; (8001e48 <I3G450D_Init+0x184>)
 8001e36:	f002 fc29 	bl	800468c <HAL_GPIO_WritePin>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20003180 	.word	0x20003180
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	20003174 	.word	0x20003174
 8001e50:	20003179 	.word	0x20003179

08001e54 <I3G450D_loop>:

void I3G450D_loop(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b098      	sub	sp, #96	; 0x60
 8001e58:	af00      	add	r7, sp, #0
		volatile int16_t Raw_x=0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		volatile int16_t Raw_y=0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		volatile int16_t Raw_z=0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	87fb      	strh	r3, [r7, #62]	; 0x3e

		float difftime=0;
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44

		int16_t averageWindow_X[AVERAGE_WINDOW_SIZE] = {0};
 8001e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Y[AVERAGE_WINDOW_SIZE] = {0};
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
		int16_t averageWindow_Z[AVERAGE_WINDOW_SIZE] = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

		uint32_t windowPosition = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
		int32_t tempSum_X = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	65bb      	str	r3, [r7, #88]	; 0x58
		int32_t tempSum_Y = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	657b      	str	r3, [r7, #84]	; 0x54
		int32_t tempSum_Z = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	653b      	str	r3, [r7, #80]	; 0x50

		switch(currentState)
 8001eae:	4b5b      	ldr	r3, [pc, #364]	; (800201c <I3G450D_loop+0x1c8>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <I3G450D_loop+0x6a>
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	f000 80c6 	beq.w	8002048 <I3G450D_loop+0x1f4>
			currentState=L3GD20_fisrt;
			dataReadyFlag=L3GD20_DATA_READY;
			break;

					default:
						break;
 8001ebc:	e379      	b.n	80025b2 <I3G450D_loop+0x75e>
				if(dataReadyFlag==L3GD20_DATA_READY)
 8001ebe:	4b58      	ldr	r3, [pc, #352]	; (8002020 <I3G450D_loop+0x1cc>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	f040 8374 	bne.w	80025b0 <I3G450D_loop+0x75c>
					HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4855      	ldr	r0, [pc, #340]	; (8002024 <I3G450D_loop+0x1d0>)
 8001ece:	f002 fbdd 	bl	800468c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x28|0x80;
 8001ed2:	4b55      	ldr	r3, [pc, #340]	; (8002028 <I3G450D_loop+0x1d4>)
 8001ed4:	22a8      	movs	r2, #168	; 0xa8
 8001ed6:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001ed8:	4b54      	ldr	r3, [pc, #336]	; (800202c <I3G450D_loop+0x1d8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	2332      	movs	r3, #50	; 0x32
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4951      	ldr	r1, [pc, #324]	; (8002028 <I3G450D_loop+0x1d4>)
 8001ee2:	f005 fea2 	bl	8007c2a <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[1],1,50);
 8001ee6:	4b51      	ldr	r3, [pc, #324]	; (800202c <I3G450D_loop+0x1d8>)
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	2332      	movs	r3, #50	; 0x32
 8001eec:	2201      	movs	r2, #1
 8001eee:	4950      	ldr	r1, [pc, #320]	; (8002030 <I3G450D_loop+0x1dc>)
 8001ef0:	f005 ffd7 	bl	8007ea2 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	484a      	ldr	r0, [pc, #296]	; (8002024 <I3G450D_loop+0x1d0>)
 8001efa:	f002 fbc7 	bl	800468c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2102      	movs	r1, #2
 8001f02:	4848      	ldr	r0, [pc, #288]	; (8002024 <I3G450D_loop+0x1d0>)
 8001f04:	f002 fbc2 	bl	800468c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x29|0x80;
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <I3G450D_loop+0x1d4>)
 8001f0a:	22a9      	movs	r2, #169	; 0xa9
 8001f0c:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001f0e:	4b47      	ldr	r3, [pc, #284]	; (800202c <I3G450D_loop+0x1d8>)
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	2332      	movs	r3, #50	; 0x32
 8001f14:	2201      	movs	r2, #1
 8001f16:	4944      	ldr	r1, [pc, #272]	; (8002028 <I3G450D_loop+0x1d4>)
 8001f18:	f005 fe87 	bl	8007c2a <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[2],1,50);
 8001f1c:	4b43      	ldr	r3, [pc, #268]	; (800202c <I3G450D_loop+0x1d8>)
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	2332      	movs	r3, #50	; 0x32
 8001f22:	2201      	movs	r2, #1
 8001f24:	4943      	ldr	r1, [pc, #268]	; (8002034 <I3G450D_loop+0x1e0>)
 8001f26:	f005 ffbc 	bl	8007ea2 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	483d      	ldr	r0, [pc, #244]	; (8002024 <I3G450D_loop+0x1d0>)
 8001f30:	f002 fbac 	bl	800468c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2102      	movs	r1, #2
 8001f38:	483a      	ldr	r0, [pc, #232]	; (8002024 <I3G450D_loop+0x1d0>)
 8001f3a:	f002 fba7 	bl	800468c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2a|0x80;
 8001f3e:	4b3a      	ldr	r3, [pc, #232]	; (8002028 <I3G450D_loop+0x1d4>)
 8001f40:	22aa      	movs	r2, #170	; 0xaa
 8001f42:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001f44:	4b39      	ldr	r3, [pc, #228]	; (800202c <I3G450D_loop+0x1d8>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	2332      	movs	r3, #50	; 0x32
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4936      	ldr	r1, [pc, #216]	; (8002028 <I3G450D_loop+0x1d4>)
 8001f4e:	f005 fe6c 	bl	8007c2a <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[3],1,50);
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <I3G450D_loop+0x1d8>)
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	2332      	movs	r3, #50	; 0x32
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4937      	ldr	r1, [pc, #220]	; (8002038 <I3G450D_loop+0x1e4>)
 8001f5c:	f005 ffa1 	bl	8007ea2 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2102      	movs	r1, #2
 8001f64:	482f      	ldr	r0, [pc, #188]	; (8002024 <I3G450D_loop+0x1d0>)
 8001f66:	f002 fb91 	bl	800468c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	482d      	ldr	r0, [pc, #180]	; (8002024 <I3G450D_loop+0x1d0>)
 8001f70:	f002 fb8c 	bl	800468c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2b|0x80;
 8001f74:	4b2c      	ldr	r3, [pc, #176]	; (8002028 <I3G450D_loop+0x1d4>)
 8001f76:	22ab      	movs	r2, #171	; 0xab
 8001f78:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001f7a:	4b2c      	ldr	r3, [pc, #176]	; (800202c <I3G450D_loop+0x1d8>)
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	2332      	movs	r3, #50	; 0x32
 8001f80:	2201      	movs	r2, #1
 8001f82:	4929      	ldr	r1, [pc, #164]	; (8002028 <I3G450D_loop+0x1d4>)
 8001f84:	f005 fe51 	bl	8007c2a <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[4],1,50);
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <I3G450D_loop+0x1d8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	2332      	movs	r3, #50	; 0x32
 8001f8e:	2201      	movs	r2, #1
 8001f90:	492a      	ldr	r1, [pc, #168]	; (800203c <I3G450D_loop+0x1e8>)
 8001f92:	f005 ff86 	bl	8007ea2 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4822      	ldr	r0, [pc, #136]	; (8002024 <I3G450D_loop+0x1d0>)
 8001f9c:	f002 fb76 	bl	800468c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	481f      	ldr	r0, [pc, #124]	; (8002024 <I3G450D_loop+0x1d0>)
 8001fa6:	f002 fb71 	bl	800468c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2c|0x80;
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <I3G450D_loop+0x1d4>)
 8001fac:	22ac      	movs	r2, #172	; 0xac
 8001fae:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <I3G450D_loop+0x1d8>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	2332      	movs	r3, #50	; 0x32
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	491b      	ldr	r1, [pc, #108]	; (8002028 <I3G450D_loop+0x1d4>)
 8001fba:	f005 fe36 	bl	8007c2a <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[5],1,50);
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <I3G450D_loop+0x1d8>)
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	2332      	movs	r3, #50	; 0x32
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	491e      	ldr	r1, [pc, #120]	; (8002040 <I3G450D_loop+0x1ec>)
 8001fc8:	f005 ff6b 	bl	8007ea2 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4814      	ldr	r0, [pc, #80]	; (8002024 <I3G450D_loop+0x1d0>)
 8001fd2:	f002 fb5b 	bl	800468c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2102      	movs	r1, #2
 8001fda:	4812      	ldr	r0, [pc, #72]	; (8002024 <I3G450D_loop+0x1d0>)
 8001fdc:	f002 fb56 	bl	800468c <HAL_GPIO_WritePin>
						spiTxBuf[0]=0x2d|0x80;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <I3G450D_loop+0x1d4>)
 8001fe2:	22ad      	movs	r2, #173	; 0xad
 8001fe4:	701a      	strb	r2, [r3, #0]
						HAL_SPI_Transmit(spiHandle,spiTxBuf,1,50);
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <I3G450D_loop+0x1d8>)
 8001fe8:	6818      	ldr	r0, [r3, #0]
 8001fea:	2332      	movs	r3, #50	; 0x32
 8001fec:	2201      	movs	r2, #1
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <I3G450D_loop+0x1d4>)
 8001ff0:	f005 fe1b 	bl	8007c2a <HAL_SPI_Transmit>
						HAL_SPI_Receive(spiHandle,&spiRxBuf[6],1,50);
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <I3G450D_loop+0x1d8>)
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	2332      	movs	r3, #50	; 0x32
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4911      	ldr	r1, [pc, #68]	; (8002044 <I3G450D_loop+0x1f0>)
 8001ffe:	f005 ff50 	bl	8007ea2 <HAL_SPI_Receive>
						HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	2102      	movs	r1, #2
 8002006:	4807      	ldr	r0, [pc, #28]	; (8002024 <I3G450D_loop+0x1d0>)
 8002008:	f002 fb40 	bl	800468c <HAL_GPIO_WritePin>
						currentState=L3GD20_second;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <I3G450D_loop+0x1c8>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
						dataReadyFlag=L3GD20_DATA_NOT_READY;
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <I3G450D_loop+0x1cc>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
				break;
 8002018:	e2ca      	b.n	80025b0 <I3G450D_loop+0x75c>
 800201a:	bf00      	nop
 800201c:	2000023e 	.word	0x2000023e
 8002020:	200000e4 	.word	0x200000e4
 8002024:	40020800 	.word	0x40020800
 8002028:	20003174 	.word	0x20003174
 800202c:	20003180 	.word	0x20003180
 8002030:	20003179 	.word	0x20003179
 8002034:	2000317a 	.word	0x2000317a
 8002038:	2000317b 	.word	0x2000317b
 800203c:	2000317c 	.word	0x2000317c
 8002040:	2000317d 	.word	0x2000317d
 8002044:	2000317e 	.word	0x2000317e
				Raw_x=(spiRxBuf[2]<<8)|spiRxBuf[1];
 8002048:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <I3G450D_loop+0x478>)
 800204a:	789b      	ldrb	r3, [r3, #2]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
 8002050:	4b9e      	ldr	r3, [pc, #632]	; (80022cc <I3G450D_loop+0x478>)
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	b21b      	sxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Raw_y=(spiRxBuf[4]<<8)|spiRxBuf[3];
 800205e:	4b9b      	ldr	r3, [pc, #620]	; (80022cc <I3G450D_loop+0x478>)
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b21a      	sxth	r2, r3
 8002066:	4b99      	ldr	r3, [pc, #612]	; (80022cc <I3G450D_loop+0x478>)
 8002068:	78db      	ldrb	r3, [r3, #3]
 800206a:	b21b      	sxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b21b      	sxth	r3, r3
 8002070:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				Raw_z=(spiRxBuf[6]<<8)|spiRxBuf[5];
 8002074:	4b95      	ldr	r3, [pc, #596]	; (80022cc <I3G450D_loop+0x478>)
 8002076:	799b      	ldrb	r3, [r3, #6]
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	b21a      	sxth	r2, r3
 800207c:	4b93      	ldr	r3, [pc, #588]	; (80022cc <I3G450D_loop+0x478>)
 800207e:	795b      	ldrb	r3, [r3, #5]
 8002080:	b21b      	sxth	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b21b      	sxth	r3, r3
 8002086:	87fb      	strh	r3, [r7, #62]	; 0x3e
				test_Raw_x = Raw_x;
 8002088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800208c:	b21a      	sxth	r2, r3
 800208e:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <I3G450D_loop+0x47c>)
 8002090:	801a      	strh	r2, [r3, #0]
				test_Raw_y = Raw_y;
 8002092:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002096:	b21a      	sxth	r2, r3
 8002098:	4b8e      	ldr	r3, [pc, #568]	; (80022d4 <I3G450D_loop+0x480>)
 800209a:	801a      	strh	r2, [r3, #0]
				test_Raw_z = Raw_z;
 800209c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <I3G450D_loop+0x484>)
 80020a2:	801a      	strh	r2, [r3, #0]
			if(currentcalistate==L3GD20_calibrated)
 80020a4:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <I3G450D_loop+0x488>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 80d5 	bne.w	8002258 <I3G450D_loop+0x404>
				angleRate_x=(float) (Raw_x - (offset_x))*L3GD20_SENSITIVITY;
 80020ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b8a      	ldr	r3, [pc, #552]	; (80022e0 <I3G450D_loop+0x48c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c4:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80022e4 <I3G450D_loop+0x490>
 80020c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020cc:	4b86      	ldr	r3, [pc, #536]	; (80022e8 <I3G450D_loop+0x494>)
 80020ce:	edc3 7a00 	vstr	s15, [r3]
				angleRate_y=(float) (Raw_y - (offset_y))*L3GD20_SENSITIVITY;
 80020d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4b84      	ldr	r3, [pc, #528]	; (80022ec <I3G450D_loop+0x498>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80022e4 <I3G450D_loop+0x490>
 80020ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f0:	4b7f      	ldr	r3, [pc, #508]	; (80022f0 <I3G450D_loop+0x49c>)
 80020f2:	edc3 7a00 	vstr	s15, [r3]
				angleRate_z=(float) (Raw_z - (offset_z))*L3GD20_SENSITIVITY;
 80020f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	4b7d      	ldr	r3, [pc, #500]	; (80022f4 <I3G450D_loop+0x4a0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80022e4 <I3G450D_loop+0x490>
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <I3G450D_loop+0x4a4>)
 8002114:	edc3 7a00 	vstr	s15, [r3]
				difftime=0.003f;
 8002118:	4b78      	ldr	r3, [pc, #480]	; (80022fc <I3G450D_loop+0x4a8>)
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
				if((angleRate_x>Noise_X)||(angleRate_x<-Noise_X))
 800211c:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <I3G450D_loop+0x494>)
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	4b77      	ldr	r3, [pc, #476]	; (8002300 <I3G450D_loop+0x4ac>)
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	dc0c      	bgt.n	800214c <I3G450D_loop+0x2f8>
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <I3G450D_loop+0x4ac>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eeb1 7a67 	vneg.f32	s14, s15
 800213c:	4b6a      	ldr	r3, [pc, #424]	; (80022e8 <I3G450D_loop+0x494>)
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	dd1b      	ble.n	8002184 <I3G450D_loop+0x330>
					Angle_X+=((angleRate_x+LastAngleRate_X)*difftime)/(2.0f);
 800214c:	4b66      	ldr	r3, [pc, #408]	; (80022e8 <I3G450D_loop+0x494>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <I3G450D_loop+0x4b0>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002164:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002168:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <I3G450D_loop+0x4b4>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002176:	4b64      	ldr	r3, [pc, #400]	; (8002308 <I3G450D_loop+0x4b4>)
 8002178:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_X=angleRate_x;
 800217c:	4b5a      	ldr	r3, [pc, #360]	; (80022e8 <I3G450D_loop+0x494>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a60      	ldr	r2, [pc, #384]	; (8002304 <I3G450D_loop+0x4b0>)
 8002182:	6013      	str	r3, [r2, #0]
				if((angleRate_y>Noise_Y)||(angleRate_y<-Noise_Y))
 8002184:	4b5a      	ldr	r3, [pc, #360]	; (80022f0 <I3G450D_loop+0x49c>)
 8002186:	ed93 7a00 	vldr	s14, [r3]
 800218a:	4b60      	ldr	r3, [pc, #384]	; (800230c <I3G450D_loop+0x4b8>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002198:	dc0c      	bgt.n	80021b4 <I3G450D_loop+0x360>
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <I3G450D_loop+0x4b8>)
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	eeb1 7a67 	vneg.f32	s14, s15
 80021a4:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <I3G450D_loop+0x49c>)
 80021a6:	edd3 7a00 	vldr	s15, [r3]
 80021aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dd1b      	ble.n	80021ec <I3G450D_loop+0x398>
					Angle_Y+=((angleRate_y+LastAngleRate_Y)*difftime)/(2.0f);
 80021b4:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <I3G450D_loop+0x49c>)
 80021b6:	ed93 7a00 	vldr	s14, [r3]
 80021ba:	4b55      	ldr	r3, [pc, #340]	; (8002310 <I3G450D_loop+0x4bc>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <I3G450D_loop+0x4c0>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021de:	4b4d      	ldr	r3, [pc, #308]	; (8002314 <I3G450D_loop+0x4c0>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Y=angleRate_y;
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <I3G450D_loop+0x49c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a49      	ldr	r2, [pc, #292]	; (8002310 <I3G450D_loop+0x4bc>)
 80021ea:	6013      	str	r3, [r2, #0]
				if((angleRate_z>Noise_Z)||(angleRate_z<-Noise_Z))
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <I3G450D_loop+0x4a4>)
 80021ee:	ed93 7a00 	vldr	s14, [r3]
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <I3G450D_loop+0x4c4>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	dc0d      	bgt.n	800221e <I3G450D_loop+0x3ca>
 8002202:	4b45      	ldr	r3, [pc, #276]	; (8002318 <I3G450D_loop+0x4c4>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eeb1 7a67 	vneg.f32	s14, s15
 800220c:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <I3G450D_loop+0x4a4>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	f340 81c2 	ble.w	80025a2 <I3G450D_loop+0x74e>
					Angle_Z+=((angleRate_z+LastAngleRate_Z)*difftime)/(2.0f);
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <I3G450D_loop+0x4a4>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <I3G450D_loop+0x4c8>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800222e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800223a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800223e:	4b38      	ldr	r3, [pc, #224]	; (8002320 <I3G450D_loop+0x4cc>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <I3G450D_loop+0x4cc>)
 800224a:	edc3 7a00 	vstr	s15, [r3]
					LastAngleRate_Z=angleRate_z;
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <I3G450D_loop+0x4a4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a32      	ldr	r2, [pc, #200]	; (800231c <I3G450D_loop+0x4c8>)
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e1a4      	b.n	80025a2 <I3G450D_loop+0x74e>
				switch(currentcalistate)
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <I3G450D_loop+0x488>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	f000 819b 	beq.w	8002598 <I3G450D_loop+0x744>
 8002262:	2b02      	cmp	r3, #2
 8002264:	f300 819a 	bgt.w	800259c <I3G450D_loop+0x748>
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <I3G450D_loop+0x41e>
 800226c:	2b01      	cmp	r3, #1
 800226e:	d029      	beq.n	80022c4 <I3G450D_loop+0x470>
						break;
 8002270:	e194      	b.n	800259c <I3G450D_loop+0x748>
						calibrationBuffer_X[caliCounter]=Raw_x;
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <I3G450D_loop+0x4d0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800227a:	b211      	sxth	r1, r2
 800227c:	4a2a      	ldr	r2, [pc, #168]	; (8002328 <I3G450D_loop+0x4d4>)
 800227e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Y[caliCounter]=Raw_y;
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <I3G450D_loop+0x4d0>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800228a:	b211      	sxth	r1, r2
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <I3G450D_loop+0x4d8>)
 800228e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						calibrationBuffer_Z[caliCounter]=Raw_z;
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <I3G450D_loop+0x4d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002298:	b211      	sxth	r1, r2
 800229a:	4a25      	ldr	r2, [pc, #148]	; (8002330 <I3G450D_loop+0x4dc>)
 800229c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						caliCounter++;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <I3G450D_loop+0x4d0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <I3G450D_loop+0x4d0>)
 80022a8:	6013      	str	r3, [r2, #0]
						if(caliCounter>=CALIBRATION_BUFFER_LENGTH)
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <I3G450D_loop+0x4d0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80022b2:	f0c0 8175 	bcc.w	80025a0 <I3G450D_loop+0x74c>
							caliCounter=0;
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <I3G450D_loop+0x4d0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
							currentcalistate=L3GD20_process_calibration_samples;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <I3G450D_loop+0x488>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
						break;
 80022c2:	e16d      	b.n	80025a0 <I3G450D_loop+0x74c>
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c8:	e0a5      	b.n	8002416 <I3G450D_loop+0x5c2>
 80022ca:	bf00      	nop
 80022cc:	20003178 	.word	0x20003178
 80022d0:	20000288 	.word	0x20000288
 80022d4:	2000028a 	.word	0x2000028a
 80022d8:	2000028c 	.word	0x2000028c
 80022dc:	2000023d 	.word	0x2000023d
 80022e0:	2000024c 	.word	0x2000024c
 80022e4:	3d8f5c29 	.word	0x3d8f5c29
 80022e8:	20000240 	.word	0x20000240
 80022ec:	20000250 	.word	0x20000250
 80022f0:	20000244 	.word	0x20000244
 80022f4:	20000254 	.word	0x20000254
 80022f8:	20000248 	.word	0x20000248
 80022fc:	3b449ba6 	.word	0x3b449ba6
 8002300:	20000258 	.word	0x20000258
 8002304:	20000270 	.word	0x20000270
 8002308:	20000264 	.word	0x20000264
 800230c:	2000025c 	.word	0x2000025c
 8002310:	20000274 	.word	0x20000274
 8002314:	20000268 	.word	0x20000268
 8002318:	20000260 	.word	0x20000260
 800231c:	20000278 	.word	0x20000278
 8002320:	2000026c 	.word	0x2000026c
 8002324:	20000290 	.word	0x20000290
 8002328:	20000294 	.word	0x20000294
 800232c:	20001234 	.word	0x20001234
 8002330:	200021d4 	.word	0x200021d4
								tempSum_X=tempSum_X-averageWindow_X[windowPosition]+calibrationBuffer_X[idx];
 8002334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	443b      	add	r3, r7
 800233c:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8002340:	461a      	mov	r2, r3
 8002342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	499d      	ldr	r1, [pc, #628]	; (80025bc <I3G450D_loop+0x768>)
 8002348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800234a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800234e:	4413      	add	r3, r2
 8002350:	65bb      	str	r3, [r7, #88]	; 0x58
								tempSum_Y=tempSum_Y-averageWindow_Y[windowPosition]+calibrationBuffer_Y[idx];
 8002352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	3360      	adds	r3, #96	; 0x60
 8002358:	443b      	add	r3, r7
 800235a:	f933 3c4c 	ldrsh.w	r3, [r3, #-76]
 800235e:	461a      	mov	r2, r3
 8002360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	4996      	ldr	r1, [pc, #600]	; (80025c0 <I3G450D_loop+0x76c>)
 8002366:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002368:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800236c:	4413      	add	r3, r2
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
								tempSum_Z=tempSum_Z-averageWindow_Z[windowPosition]+calibrationBuffer_Z[idx];
 8002370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	3360      	adds	r3, #96	; 0x60
 8002376:	443b      	add	r3, r7
 8002378:	f933 3c60 	ldrsh.w	r3, [r3, #-96]
 800237c:	461a      	mov	r2, r3
 800237e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	4990      	ldr	r1, [pc, #576]	; (80025c4 <I3G450D_loop+0x770>)
 8002384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002386:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800238a:	4413      	add	r3, r2
 800238c:	653b      	str	r3, [r7, #80]	; 0x50
								averageWindow_X[windowPosition]=calibrationBuffer_X[idx];
 800238e:	4a8b      	ldr	r2, [pc, #556]	; (80025bc <I3G450D_loop+0x768>)
 8002390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002392:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8002396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	443b      	add	r3, r7
 800239e:	f823 2c38 	strh.w	r2, [r3, #-56]
								averageWindow_Y[windowPosition]=calibrationBuffer_Y[idx];
 80023a2:	4a87      	ldr	r2, [pc, #540]	; (80025c0 <I3G450D_loop+0x76c>)
 80023a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80023aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	443b      	add	r3, r7
 80023b2:	f823 2c4c 	strh.w	r2, [r3, #-76]
								averageWindow_Z[windowPosition]=calibrationBuffer_Z[idx];
 80023b6:	4a83      	ldr	r2, [pc, #524]	; (80025c4 <I3G450D_loop+0x770>)
 80023b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ba:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80023be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	3360      	adds	r3, #96	; 0x60
 80023c4:	443b      	add	r3, r7
 80023c6:	f823 2c60 	strh.w	r2, [r3, #-96]
								offset_x=tempSum_X/(int32_t)AVERAGE_WINDOW_SIZE;
 80023ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023cc:	4a7e      	ldr	r2, [pc, #504]	; (80025c8 <I3G450D_loop+0x774>)
 80023ce:	fb82 1203 	smull	r1, r2, r2, r3
 80023d2:	1092      	asrs	r2, r2, #2
 80023d4:	17db      	asrs	r3, r3, #31
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a7c      	ldr	r2, [pc, #496]	; (80025cc <I3G450D_loop+0x778>)
 80023da:	6013      	str	r3, [r2, #0]
								offset_y=tempSum_Y/(int32_t)AVERAGE_WINDOW_SIZE;
 80023dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023de:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <I3G450D_loop+0x774>)
 80023e0:	fb82 1203 	smull	r1, r2, r2, r3
 80023e4:	1092      	asrs	r2, r2, #2
 80023e6:	17db      	asrs	r3, r3, #31
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	4a79      	ldr	r2, [pc, #484]	; (80025d0 <I3G450D_loop+0x77c>)
 80023ec:	6013      	str	r3, [r2, #0]
								offset_z=tempSum_Z/(int32_t)AVERAGE_WINDOW_SIZE;
 80023ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f0:	4a75      	ldr	r2, [pc, #468]	; (80025c8 <I3G450D_loop+0x774>)
 80023f2:	fb82 1203 	smull	r1, r2, r2, r3
 80023f6:	1092      	asrs	r2, r2, #2
 80023f8:	17db      	asrs	r3, r3, #31
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	4a75      	ldr	r2, [pc, #468]	; (80025d4 <I3G450D_loop+0x780>)
 80023fe:	6013      	str	r3, [r2, #0]
								windowPosition++;
 8002400:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002402:	3301      	adds	r3, #1
 8002404:	65fb      	str	r3, [r7, #92]	; 0x5c
								if(windowPosition>=AVERAGE_WINDOW_SIZE)
 8002406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002408:	2b09      	cmp	r3, #9
 800240a:	d901      	bls.n	8002410 <I3G450D_loop+0x5bc>
									windowPosition=0;
 800240c:	2300      	movs	r3, #0
 800240e:	65fb      	str	r3, [r7, #92]	; 0x5c
						for(uint32_t idx=0; idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002412:	3301      	adds	r3, #1
 8002414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002418:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800241c:	d38a      	bcc.n	8002334 <I3G450D_loop+0x4e0>
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 800241e:	2300      	movs	r3, #0
 8002420:	64bb      	str	r3, [r7, #72]	; 0x48
 8002422:	e089      	b.n	8002538 <I3G450D_loop+0x6e4>
								if(((int32_t)calibrationBuffer_X[idx]-offset_x)>TempNoise_X)
 8002424:	4a65      	ldr	r2, [pc, #404]	; (80025bc <I3G450D_loop+0x768>)
 8002426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002428:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800242c:	461a      	mov	r2, r3
 800242e:	4b67      	ldr	r3, [pc, #412]	; (80025cc <I3G450D_loop+0x778>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1ad2      	subs	r2, r2, r3
 8002434:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <I3G450D_loop+0x784>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	dd0a      	ble.n	8002452 <I3G450D_loop+0x5fe>
									TempNoise_X=(int32_t)calibrationBuffer_X[idx]-offset_x;
 800243c:	4a5f      	ldr	r2, [pc, #380]	; (80025bc <I3G450D_loop+0x768>)
 800243e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002440:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002444:	461a      	mov	r2, r3
 8002446:	4b61      	ldr	r3, [pc, #388]	; (80025cc <I3G450D_loop+0x778>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	4a62      	ldr	r2, [pc, #392]	; (80025d8 <I3G450D_loop+0x784>)
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e015      	b.n	800247e <I3G450D_loop+0x62a>
								else if(((int32_t)calibrationBuffer_X[idx]-offset_x)<-TempNoise_X)
 8002452:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <I3G450D_loop+0x768>)
 8002454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002456:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800245a:	461a      	mov	r2, r3
 800245c:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <I3G450D_loop+0x778>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1ad2      	subs	r2, r2, r3
 8002462:	4b5d      	ldr	r3, [pc, #372]	; (80025d8 <I3G450D_loop+0x784>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	425b      	negs	r3, r3
 8002468:	429a      	cmp	r2, r3
 800246a:	da08      	bge.n	800247e <I3G450D_loop+0x62a>
									TempNoise_X=-((int32_t)calibrationBuffer_X[idx]-offset_x);
 800246c:	4b57      	ldr	r3, [pc, #348]	; (80025cc <I3G450D_loop+0x778>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4952      	ldr	r1, [pc, #328]	; (80025bc <I3G450D_loop+0x768>)
 8002472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002474:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <I3G450D_loop+0x784>)
 800247c:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Y[idx]-offset_y)>TempNoise_Y)
 800247e:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <I3G450D_loop+0x76c>)
 8002480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002482:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002486:	461a      	mov	r2, r3
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <I3G450D_loop+0x77c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	1ad2      	subs	r2, r2, r3
 800248e:	4b53      	ldr	r3, [pc, #332]	; (80025dc <I3G450D_loop+0x788>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	dd0a      	ble.n	80024ac <I3G450D_loop+0x658>
									TempNoise_Y=(int32_t)calibrationBuffer_Y[idx]-offset_y;
 8002496:	4a4a      	ldr	r2, [pc, #296]	; (80025c0 <I3G450D_loop+0x76c>)
 8002498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800249e:	461a      	mov	r2, r3
 80024a0:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <I3G450D_loop+0x77c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	4a4d      	ldr	r2, [pc, #308]	; (80025dc <I3G450D_loop+0x788>)
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e015      	b.n	80024d8 <I3G450D_loop+0x684>
								else if(((int32_t)calibrationBuffer_Y[idx]-offset_y)<-TempNoise_Y)
 80024ac:	4a44      	ldr	r2, [pc, #272]	; (80025c0 <I3G450D_loop+0x76c>)
 80024ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024b0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <I3G450D_loop+0x77c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	4b47      	ldr	r3, [pc, #284]	; (80025dc <I3G450D_loop+0x788>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	425b      	negs	r3, r3
 80024c2:	429a      	cmp	r2, r3
 80024c4:	da08      	bge.n	80024d8 <I3G450D_loop+0x684>
									TempNoise_Y=-((int32_t)calibrationBuffer_Y[idx]-offset_y);
 80024c6:	4b42      	ldr	r3, [pc, #264]	; (80025d0 <I3G450D_loop+0x77c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	493d      	ldr	r1, [pc, #244]	; (80025c0 <I3G450D_loop+0x76c>)
 80024cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024ce:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	4a41      	ldr	r2, [pc, #260]	; (80025dc <I3G450D_loop+0x788>)
 80024d6:	6013      	str	r3, [r2, #0]
								if(((int32_t)calibrationBuffer_Z[idx]-offset_z)>TempNoise_Z)
 80024d8:	4a3a      	ldr	r2, [pc, #232]	; (80025c4 <I3G450D_loop+0x770>)
 80024da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b3c      	ldr	r3, [pc, #240]	; (80025d4 <I3G450D_loop+0x780>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1ad2      	subs	r2, r2, r3
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <I3G450D_loop+0x78c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dd0a      	ble.n	8002506 <I3G450D_loop+0x6b2>
									TempNoise_Z=(int32_t)calibrationBuffer_Z[idx]-offset_z;
 80024f0:	4a34      	ldr	r2, [pc, #208]	; (80025c4 <I3G450D_loop+0x770>)
 80024f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <I3G450D_loop+0x780>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <I3G450D_loop+0x78c>)
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e015      	b.n	8002532 <I3G450D_loop+0x6de>
								else if(((int32_t)calibrationBuffer_Z[idx]-offset_z)<-TempNoise_Z)
 8002506:	4a2f      	ldr	r2, [pc, #188]	; (80025c4 <I3G450D_loop+0x770>)
 8002508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800250e:	461a      	mov	r2, r3
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <I3G450D_loop+0x780>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1ad2      	subs	r2, r2, r3
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <I3G450D_loop+0x78c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	425b      	negs	r3, r3
 800251c:	429a      	cmp	r2, r3
 800251e:	da08      	bge.n	8002532 <I3G450D_loop+0x6de>
									TempNoise_Z=-((int32_t)calibrationBuffer_Z[idx]-offset_z);
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <I3G450D_loop+0x780>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4927      	ldr	r1, [pc, #156]	; (80025c4 <I3G450D_loop+0x770>)
 8002526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002528:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	4a2c      	ldr	r2, [pc, #176]	; (80025e0 <I3G450D_loop+0x78c>)
 8002530:	6013      	str	r3, [r2, #0]
							for(uint32_t idx=0;idx<CALIBRATION_BUFFER_LENGTH;idx++)
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002534:	3301      	adds	r3, #1
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
 8002538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800253a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800253e:	f4ff af71 	bcc.w	8002424 <I3G450D_loop+0x5d0>
							Noise_X=(float)TempNoise_X*L3GD20_SENSITIVITY;
 8002542:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <I3G450D_loop+0x784>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80025e4 <I3G450D_loop+0x790>
 8002552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <I3G450D_loop+0x794>)
 8002558:	edc3 7a00 	vstr	s15, [r3]
							Noise_Y=(float)TempNoise_Y*L3GD20_SENSITIVITY;
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <I3G450D_loop+0x788>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002568:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80025e4 <I3G450D_loop+0x790>
 800256c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <I3G450D_loop+0x798>)
 8002572:	edc3 7a00 	vstr	s15, [r3]
							Noise_Z=(float)TempNoise_Z*L3GD20_SENSITIVITY;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <I3G450D_loop+0x78c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002582:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80025e4 <I3G450D_loop+0x790>
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <I3G450D_loop+0x79c>)
 800258c:	edc3 7a00 	vstr	s15, [r3]
							currentcalistate=L3GD20_calibrated;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <I3G450D_loop+0x7a0>)
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]
							break;
 8002596:	e004      	b.n	80025a2 <I3G450D_loop+0x74e>
						break;
 8002598:	bf00      	nop
 800259a:	e002      	b.n	80025a2 <I3G450D_loop+0x74e>
						break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <I3G450D_loop+0x74e>
						break;
 80025a0:	bf00      	nop
			currentState=L3GD20_fisrt;
 80025a2:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <I3G450D_loop+0x7a4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
			dataReadyFlag=L3GD20_DATA_READY;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <I3G450D_loop+0x7a8>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
			break;
 80025ae:	e000      	b.n	80025b2 <I3G450D_loop+0x75e>
				break;
 80025b0:	bf00      	nop

		}
}
 80025b2:	bf00      	nop
 80025b4:	3760      	adds	r7, #96	; 0x60
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000294 	.word	0x20000294
 80025c0:	20001234 	.word	0x20001234
 80025c4:	200021d4 	.word	0x200021d4
 80025c8:	66666667 	.word	0x66666667
 80025cc:	2000024c 	.word	0x2000024c
 80025d0:	20000250 	.word	0x20000250
 80025d4:	20000254 	.word	0x20000254
 80025d8:	2000027c 	.word	0x2000027c
 80025dc:	20000280 	.word	0x20000280
 80025e0:	20000284 	.word	0x20000284
 80025e4:	3d8f5c29 	.word	0x3d8f5c29
 80025e8:	20000258 	.word	0x20000258
 80025ec:	2000025c 	.word	0x2000025c
 80025f0:	20000260 	.word	0x20000260
 80025f4:	2000023d 	.word	0x2000023d
 80025f8:	2000023e 	.word	0x2000023e
 80025fc:	200000e4 	.word	0x200000e4

08002600 <GyroGetData>:
void GyroGetData(int16_t *x, int16_t*y, int16_t*z)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
	*x = Angle_X;
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <GyroGetData+0x54>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002616:	ee17 3a90 	vmov	r3, s15
 800261a:	b21a      	sxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	801a      	strh	r2, [r3, #0]
	*y = Angle_Y;
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <GyroGetData+0x58>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800262a:	ee17 3a90 	vmov	r3, s15
 800262e:	b21a      	sxth	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	801a      	strh	r2, [r3, #0]
	*z = Angle_Z;
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <GyroGetData+0x5c>)
 8002636:	edd3 7a00 	vldr	s15, [r3]
 800263a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800263e:	ee17 3a90 	vmov	r3, s15
 8002642:	b21a      	sxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	801a      	strh	r2, [r3, #0]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	20000264 	.word	0x20000264
 8002658:	20000268 	.word	0x20000268
 800265c:	2000026c 	.word	0x2000026c

08002660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002664:	f001 f90e 	bl	8003884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002668:	f000 f828 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800266c:	f000 fa7a 	bl	8002b64 <MX_GPIO_Init>
  MX_CRC_Init();
 8002670:	f000 f88e 	bl	8002790 <MX_CRC_Init>
  MX_FMC_Init();
 8002674:	f000 fa26 	bl	8002ac4 <MX_FMC_Init>
  MX_SPI5_Init();
 8002678:	f000 f8de 	bl	8002838 <MX_SPI5_Init>
  MX_TIM1_Init();
 800267c:	f000 f912 	bl	80028a4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002680:	f000 f9d6 	bl	8002a30 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8002684:	f00e fa2a 	bl	8010adc <MX_USB_HOST_Init>
  MX_DMA_Init();
 8002688:	f000 f9fc 	bl	8002a84 <MX_DMA_Init>
  MX_I2C3_Init();
 800268c:	f000 f894 	bl	80027b8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002690:	f000 f958 	bl	8002944 <MX_TIM2_Init>
  MX_FATFS_Init();
 8002694:	f008 ff46 	bl	800b524 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8002698:	4805      	ldr	r0, [pc, #20]	; (80026b0 <main+0x50>)
 800269a:	f000 fc2f 	bl	8002efc <RetargetInit>
  SessionControllerInit(&hi2c3,&hspi5,&huart1);
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <main+0x50>)
 80026a0:	4904      	ldr	r1, [pc, #16]	; (80026b4 <main+0x54>)
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <main+0x58>)
 80026a4:	f7fe fe0c 	bl	80012c0 <SessionControllerInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SessionControllerProcess();
 80026a8:	f7fe fe2c 	bl	8001304 <SessionControllerProcess>
 80026ac:	e7fc      	b.n	80026a8 <main+0x48>
 80026ae:	bf00      	nop
 80026b0:	20003328 	.word	0x20003328
 80026b4:	200031e0 	.word	0x200031e0
 80026b8:	2000318c 	.word	0x2000318c

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	; 0x50
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	2230      	movs	r2, #48	; 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f00e fd90 	bl	80111f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	4b28      	ldr	r3, [pc, #160]	; (8002788 <SystemClock_Config+0xcc>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <SystemClock_Config+0xcc>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	; 0x40
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <SystemClock_Config+0xcc>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026fc:	2300      	movs	r3, #0
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	4b22      	ldr	r3, [pc, #136]	; (800278c <SystemClock_Config+0xd0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002708:	4a20      	ldr	r2, [pc, #128]	; (800278c <SystemClock_Config+0xd0>)
 800270a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b1e      	ldr	r3, [pc, #120]	; (800278c <SystemClock_Config+0xd0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800271c:	2301      	movs	r3, #1
 800271e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002726:	2302      	movs	r3, #2
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800272a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800272e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002730:	2304      	movs	r3, #4
 8002732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002734:	2348      	movs	r3, #72	; 0x48
 8002736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002738:	2302      	movs	r3, #2
 800273a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800273c:	2303      	movs	r3, #3
 800273e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002740:	f107 0320 	add.w	r3, r7, #32
 8002744:	4618      	mov	r0, r3
 8002746:	f004 fd1b 	bl	8007180 <HAL_RCC_OscConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002750:	f000 fbce 	bl	8002ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002754:	230f      	movs	r3, #15
 8002756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002758:	2302      	movs	r3, #2
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800276a:	f107 030c 	add.w	r3, r7, #12
 800276e:	2102      	movs	r1, #2
 8002770:	4618      	mov	r0, r3
 8002772:	f004 ff7d 	bl	8007670 <HAL_RCC_ClockConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800277c:	f000 fbb8 	bl	8002ef0 <Error_Handler>
  }
}
 8002780:	bf00      	nop
 8002782:	3750      	adds	r7, #80	; 0x50
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	40007000 	.word	0x40007000

08002790 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <MX_CRC_Init+0x20>)
 8002796:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <MX_CRC_Init+0x24>)
 8002798:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800279a:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_CRC_Init+0x20>)
 800279c:	f001 fa19 	bl	8003bd2 <HAL_CRC_Init>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80027a6:	f000 fba3 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20003184 	.word	0x20003184
 80027b4:	40023000 	.word	0x40023000

080027b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <MX_I2C3_Init+0x74>)
 80027be:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <MX_I2C3_Init+0x78>)
 80027c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_I2C3_Init+0x74>)
 80027c4:	4a1b      	ldr	r2, [pc, #108]	; (8002834 <MX_I2C3_Init+0x7c>)
 80027c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <MX_I2C3_Init+0x74>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <MX_I2C3_Init+0x74>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027d4:	4b15      	ldr	r3, [pc, #84]	; (800282c <MX_I2C3_Init+0x74>)
 80027d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <MX_I2C3_Init+0x74>)
 80027de:	2200      	movs	r2, #0
 80027e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80027e2:	4b12      	ldr	r3, [pc, #72]	; (800282c <MX_I2C3_Init+0x74>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027e8:	4b10      	ldr	r3, [pc, #64]	; (800282c <MX_I2C3_Init+0x74>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027ee:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_I2C3_Init+0x74>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80027f4:	480d      	ldr	r0, [pc, #52]	; (800282c <MX_I2C3_Init+0x74>)
 80027f6:	f003 fb85 	bl	8005f04 <HAL_I2C_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002800:	f000 fb76 	bl	8002ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002804:	2100      	movs	r1, #0
 8002806:	4809      	ldr	r0, [pc, #36]	; (800282c <MX_I2C3_Init+0x74>)
 8002808:	f004 fc3f 	bl	800708a <HAL_I2CEx_ConfigAnalogFilter>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002812:	f000 fb6d 	bl	8002ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002816:	2100      	movs	r1, #0
 8002818:	4804      	ldr	r0, [pc, #16]	; (800282c <MX_I2C3_Init+0x74>)
 800281a:	f004 fc72 	bl	8007102 <HAL_I2CEx_ConfigDigitalFilter>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002824:	f000 fb64 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	2000318c 	.word	0x2000318c
 8002830:	40005c00 	.word	0x40005c00
 8002834:	000186a0 	.word	0x000186a0

08002838 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <MX_SPI5_Init+0x64>)
 800283e:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <MX_SPI5_Init+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <MX_SPI5_Init+0x64>)
 8002844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002848:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <MX_SPI5_Init+0x64>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <MX_SPI5_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <MX_SPI5_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <MX_SPI5_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <MX_SPI5_Init+0x64>)
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MX_SPI5_Init+0x64>)
 800286c:	2218      	movs	r2, #24
 800286e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <MX_SPI5_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <MX_SPI5_Init+0x64>)
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <MX_SPI5_Init+0x64>)
 800287e:	2200      	movs	r2, #0
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002882:	4b06      	ldr	r3, [pc, #24]	; (800289c <MX_SPI5_Init+0x64>)
 8002884:	220a      	movs	r2, #10
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002888:	4804      	ldr	r0, [pc, #16]	; (800289c <MX_SPI5_Init+0x64>)
 800288a:	f005 f945 	bl	8007b18 <HAL_SPI_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002894:	f000 fb2c 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200031e0 	.word	0x200031e0
 80028a0:	40015000 	.word	0x40015000

080028a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0308 	add.w	r3, r7, #8
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	463b      	mov	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028c0:	4b1e      	ldr	r3, [pc, #120]	; (800293c <MX_TIM1_Init+0x98>)
 80028c2:	4a1f      	ldr	r2, [pc, #124]	; (8002940 <MX_TIM1_Init+0x9c>)
 80028c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <MX_TIM1_Init+0x98>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <MX_TIM1_Init+0x98>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_TIM1_Init+0x98>)
 80028d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028da:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_TIM1_Init+0x98>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_TIM1_Init+0x98>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_TIM1_Init+0x98>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028ec:	4813      	ldr	r0, [pc, #76]	; (800293c <MX_TIM1_Init+0x98>)
 80028ee:	f005 febb 	bl	8008668 <HAL_TIM_Base_Init>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80028f8:	f000 fafa 	bl	8002ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	4619      	mov	r1, r3
 8002908:	480c      	ldr	r0, [pc, #48]	; (800293c <MX_TIM1_Init+0x98>)
 800290a:	f006 f817 	bl	800893c <HAL_TIM_ConfigClockSource>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002914:	f000 faec 	bl	8002ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002920:	463b      	mov	r3, r7
 8002922:	4619      	mov	r1, r3
 8002924:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_TIM1_Init+0x98>)
 8002926:	f006 fbbb 	bl	80090a0 <HAL_TIMEx_MasterConfigSynchronization>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002930:	f000 fade 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20003238 	.word	0x20003238
 8002940:	40010000 	.word	0x40010000

08002944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002958:	f107 0320 	add.w	r3, r7, #32
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]
 8002972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002974:	4b2d      	ldr	r3, [pc, #180]	; (8002a2c <MX_TIM2_Init+0xe8>)
 8002976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800297a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <MX_TIM2_Init+0xe8>)
 800297e:	2259      	movs	r2, #89	; 0x59
 8002980:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <MX_TIM2_Init+0xe8>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <MX_TIM2_Init+0xe8>)
 800298a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800298e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <MX_TIM2_Init+0xe8>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002996:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <MX_TIM2_Init+0xe8>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800299c:	4823      	ldr	r0, [pc, #140]	; (8002a2c <MX_TIM2_Init+0xe8>)
 800299e:	f005 fe63 	bl	8008668 <HAL_TIM_Base_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029a8:	f000 faa2 	bl	8002ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b6:	4619      	mov	r1, r3
 80029b8:	481c      	ldr	r0, [pc, #112]	; (8002a2c <MX_TIM2_Init+0xe8>)
 80029ba:	f005 ffbf 	bl	800893c <HAL_TIM_ConfigClockSource>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80029c4:	f000 fa94 	bl	8002ef0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80029c8:	4818      	ldr	r0, [pc, #96]	; (8002a2c <MX_TIM2_Init+0xe8>)
 80029ca:	f005 fe9c 	bl	8008706 <HAL_TIM_PWM_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80029d4:	f000 fa8c 	bl	8002ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029e0:	f107 0320 	add.w	r3, r7, #32
 80029e4:	4619      	mov	r1, r3
 80029e6:	4811      	ldr	r0, [pc, #68]	; (8002a2c <MX_TIM2_Init+0xe8>)
 80029e8:	f006 fb5a 	bl	80090a0 <HAL_TIMEx_MasterConfigSynchronization>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80029f2:	f000 fa7d 	bl	8002ef0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f6:	2360      	movs	r3, #96	; 0x60
 80029f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4807      	ldr	r0, [pc, #28]	; (8002a2c <MX_TIM2_Init+0xe8>)
 8002a0e:	f005 fed3 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002a18:	f000 fa6a 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <MX_TIM2_Init+0xe8>)
 8002a1e:	f000 fc97 	bl	8003350 <HAL_TIM_MspPostInit>

}
 8002a22:	bf00      	nop
 8002a24:	3738      	adds	r7, #56	; 0x38
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20003280 	.word	0x20003280

08002a30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_USART1_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_USART1_UART_Init+0x4c>)
 8002a68:	f006 fb96 	bl	8009198 <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a72:	f000 fa3d 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20003328 	.word	0x20003328
 8002a80:	40011000 	.word	0x40011000

08002a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <MX_DMA_Init+0x3c>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a0b      	ldr	r2, [pc, #44]	; (8002ac0 <MX_DMA_Init+0x3c>)
 8002a94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <MX_DMA_Init+0x3c>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	2010      	movs	r0, #16
 8002aac:	f001 f85b 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ab0:	2010      	movs	r0, #16
 8002ab2:	f001 f874 	bl	8003b9e <HAL_NVIC_EnableIRQ>

}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
 8002ad8:	615a      	str	r2, [r3, #20]
 8002ada:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <MX_FMC_Init+0x98>)
 8002ade:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <MX_FMC_Init+0x9c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <MX_FMC_Init+0x98>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <MX_FMC_Init+0x98>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002aee:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_FMC_Init+0x98>)
 8002af0:	2204      	movs	r2, #4
 8002af2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <MX_FMC_Init+0x98>)
 8002af6:	2210      	movs	r2, #16
 8002af8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_FMC_Init+0x98>)
 8002afc:	2240      	movs	r2, #64	; 0x40
 8002afe:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <MX_FMC_Init+0x98>)
 8002b02:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002b06:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_FMC_Init+0x98>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <MX_FMC_Init+0x98>)
 8002b10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b14:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_FMC_Init+0x98>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_FMC_Init+0x98>)
 8002b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002b24:	2302      	movs	r3, #2
 8002b26:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8002b28:	2307      	movs	r3, #7
 8002b2a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002b30:	2307      	movs	r3, #7
 8002b32:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002b34:	2303      	movs	r3, #3
 8002b36:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_FMC_Init+0x98>)
 8002b46:	f004 ffb3 	bl	8007ab0 <HAL_SDRAM_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002b50:	f000 f9ce 	bl	8002ef0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	2000336c 	.word	0x2000336c
 8002b60:	a0000140 	.word	0xa0000140

08002b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]
 8002b76:	60da      	str	r2, [r3, #12]
 8002b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
 8002b7e:	4bb2      	ldr	r3, [pc, #712]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4ab1      	ldr	r2, [pc, #708]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4baf      	ldr	r3, [pc, #700]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	4bab      	ldr	r3, [pc, #684]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4aaa      	ldr	r2, [pc, #680]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002ba0:	f043 0320 	orr.w	r3, r3, #32
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4ba8      	ldr	r3, [pc, #672]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	4ba4      	ldr	r3, [pc, #656]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4aa3      	ldr	r2, [pc, #652]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4ba1      	ldr	r3, [pc, #644]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	4b9d      	ldr	r3, [pc, #628]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a9c      	ldr	r2, [pc, #624]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b9a      	ldr	r3, [pc, #616]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b96      	ldr	r3, [pc, #600]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a95      	ldr	r2, [pc, #596]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b93      	ldr	r3, [pc, #588]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b8f      	ldr	r3, [pc, #572]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a8e      	ldr	r2, [pc, #568]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b8c      	ldr	r3, [pc, #560]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b88      	ldr	r3, [pc, #544]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a87      	ldr	r2, [pc, #540]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c2c:	f043 0310 	orr.w	r3, r3, #16
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b85      	ldr	r3, [pc, #532]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	4b81      	ldr	r3, [pc, #516]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4a80      	ldr	r2, [pc, #512]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4e:	4b7e      	ldr	r3, [pc, #504]	; (8002e48 <MX_GPIO_Init+0x2e4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2116      	movs	r1, #22
 8002c5e:	487b      	ldr	r0, [pc, #492]	; (8002e4c <MX_GPIO_Init+0x2e8>)
 8002c60:	f001 fd14 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2180      	movs	r1, #128	; 0x80
 8002c68:	4879      	ldr	r0, [pc, #484]	; (8002e50 <MX_GPIO_Init+0x2ec>)
 8002c6a:	f001 fd0f 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002c74:	4877      	ldr	r0, [pc, #476]	; (8002e54 <MX_GPIO_Init+0x2f0>)
 8002c76:	f001 fd09 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002c80:	4875      	ldr	r0, [pc, #468]	; (8002e58 <MX_GPIO_Init+0x2f4>)
 8002c82:	f001 fd03 	bl	800468c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8002c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c98:	230e      	movs	r3, #14
 8002c9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	486e      	ldr	r0, [pc, #440]	; (8002e5c <MX_GPIO_Init+0x2f8>)
 8002ca4:	f001 fb2e 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002ca8:	2316      	movs	r3, #22
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cac:	2301      	movs	r3, #1
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4863      	ldr	r0, [pc, #396]	; (8002e4c <MX_GPIO_Init+0x2e8>)
 8002cc0:	f001 fb20 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	485d      	ldr	r0, [pc, #372]	; (8002e50 <MX_GPIO_Init+0x2ec>)
 8002cda:	f001 fb13 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002cde:	f248 0306 	movw	r3, #32774	; 0x8006
 8002ce2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ce4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4856      	ldr	r0, [pc, #344]	; (8002e50 <MX_GPIO_Init+0x2ec>)
 8002cf6:	f001 fb05 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin;
 8002cfa:	2358      	movs	r3, #88	; 0x58
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d06:	2300      	movs	r3, #0
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d0a:	230e      	movs	r3, #14
 8002d0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d12:	4619      	mov	r1, r3
 8002d14:	484e      	ldr	r0, [pc, #312]	; (8002e50 <MX_GPIO_Init+0x2ec>)
 8002d16:	f001 faf5 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4847      	ldr	r0, [pc, #284]	; (8002e50 <MX_GPIO_Init+0x2ec>)
 8002d32:	f001 fae7 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002d36:	2320      	movs	r3, #32
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d3a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4840      	ldr	r0, [pc, #256]	; (8002e4c <MX_GPIO_Init+0x2e8>)
 8002d4c:	f001 fada 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002d50:	2303      	movs	r3, #3
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002d60:	2309      	movs	r3, #9
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	4619      	mov	r1, r3
 8002d6a:	483d      	ldr	r0, [pc, #244]	; (8002e60 <MX_GPIO_Init+0x2fc>)
 8002d6c:	f001 faca 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002d70:	2304      	movs	r3, #4
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d80:	4619      	mov	r1, r3
 8002d82:	4837      	ldr	r0, [pc, #220]	; (8002e60 <MX_GPIO_Init+0x2fc>)
 8002d84:	f001 fabe 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin;
 8002d88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d92:	2300      	movs	r3, #0
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d96:	2300      	movs	r3, #0
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002d9a:	230e      	movs	r3, #14
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da2:	4619      	mov	r1, r3
 8002da4:	482e      	ldr	r0, [pc, #184]	; (8002e60 <MX_GPIO_Init+0x2fc>)
 8002da6:	f001 faad 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002daa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4825      	ldr	r0, [pc, #148]	; (8002e54 <MX_GPIO_Init+0x2f0>)
 8002dc0:	f001 faa0 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002dc4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	481d      	ldr	r0, [pc, #116]	; (8002e54 <MX_GPIO_Init+0x2f0>)
 8002dde:	f001 fa91 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin;
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002df2:	230e      	movs	r3, #14
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4816      	ldr	r0, [pc, #88]	; (8002e58 <MX_GPIO_Init+0x2f4>)
 8002dfe:	f001 fa81 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002e02:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e14:	230e      	movs	r3, #14
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480b      	ldr	r0, [pc, #44]	; (8002e4c <MX_GPIO_Init+0x2e8>)
 8002e20:	f001 fa70 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4804      	ldr	r0, [pc, #16]	; (8002e4c <MX_GPIO_Init+0x2e8>)
 8002e3c:	f001 fa62 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002e40:	2348      	movs	r3, #72	; 0x48
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	e00d      	b.n	8002e64 <MX_GPIO_Init+0x300>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	40021800 	.word	0x40021800
 8002e5c:	40021400 	.word	0x40021400
 8002e60:	40020400 	.word	0x40020400
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e6e:	230e      	movs	r3, #14
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e76:	4619      	mov	r1, r3
 8002e78:	481b      	ldr	r0, [pc, #108]	; (8002ee8 <MX_GPIO_Init+0x384>)
 8002e7a:	f001 fa43 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pin : G3_Pin */
  GPIO_InitStruct.Pin = G3_Pin;
 8002e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002e90:	2309      	movs	r3, #9
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G3_GPIO_Port, &GPIO_InitStruct);
 8002e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4814      	ldr	r0, [pc, #80]	; (8002eec <MX_GPIO_Init+0x388>)
 8002e9c:	f001 fa32 	bl	8004304 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002ea0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <MX_GPIO_Init+0x388>)
 8002eba:	f001 fa23 	bl	8004304 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2006      	movs	r0, #6
 8002ec4:	f000 fe4f 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ec8:	2006      	movs	r0, #6
 8002eca:	f000 fe68 	bl	8003b9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2017      	movs	r0, #23
 8002ed4:	f000 fe47 	bl	8003b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ed8:	2017      	movs	r0, #23
 8002eda:	f000 fe60 	bl	8003b9e <HAL_NVIC_EnableIRQ>

}
 8002ede:	bf00      	nop
 8002ee0:	3738      	adds	r7, #56	; 0x38
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40020c00 	.word	0x40020c00
 8002eec:	40021800 	.word	0x40021800

08002ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ef4:	b672      	cpsid	i
}
 8002ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <Error_Handler+0x8>
	...

08002efc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <RetargetInit+0x28>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <RetargetInit+0x2c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6898      	ldr	r0, [r3, #8]
 8002f10:	2300      	movs	r3, #0
 8002f12:	2202      	movs	r2, #2
 8002f14:	2100      	movs	r1, #0
 8002f16:	f00e fa91 	bl	801143c <setvbuf>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200033a0 	.word	0x200033a0
 8002f28:	20000118 	.word	0x20000118

08002f2c <_isatty>:

int _isatty(int fd) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db04      	blt.n	8002f44 <_isatty+0x18>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	dc01      	bgt.n	8002f44 <_isatty+0x18>
    return 1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e005      	b.n	8002f50 <_isatty+0x24>

  errno = EBADF;
 8002f44:	f00e f90c 	bl	8011160 <__errno>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2209      	movs	r2, #9
 8002f4c:	601a      	str	r2, [r3, #0]
  return 0;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_write>:

int _write(int fd, char* ptr, int len) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d002      	beq.n	8002f70 <_write+0x18>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d111      	bne.n	8002f94 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <_write+0x54>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	f006 f958 	bl	8009232 <HAL_UART_Transmit>
 8002f82:	4603      	mov	r3, r0
 8002f84:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <_write+0x38>
      return len;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	e008      	b.n	8002fa2 <_write+0x4a>
    else
      return EIO;
 8002f90:	2305      	movs	r3, #5
 8002f92:	e006      	b.n	8002fa2 <_write+0x4a>
  }
  errno = EBADF;
 8002f94:	f00e f8e4 	bl	8011160 <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2209      	movs	r2, #9
 8002f9c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200033a0 	.word	0x200033a0

08002fb0 <_close>:

int _close(int fd) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db04      	blt.n	8002fc8 <_close+0x18>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	dc01      	bgt.n	8002fc8 <_close+0x18>
    return 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e006      	b.n	8002fd6 <_close+0x26>

  errno = EBADF;
 8002fc8:	f00e f8ca 	bl	8011160 <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2209      	movs	r2, #9
 8002fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b084      	sub	sp, #16
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002fea:	f00e f8b9 	bl	8011160 <__errno>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2209      	movs	r2, #9
 8002ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_read>:

int _read(int fd, char* ptr, int len) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d110      	bne.n	8003034 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <_read+0x4c>)
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800301a:	2201      	movs	r2, #1
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	f006 f99a 	bl	8009356 <HAL_UART_Receive>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <_read+0x30>
      return 1;
 800302c:	2301      	movs	r3, #1
 800302e:	e008      	b.n	8003042 <_read+0x42>
    else
      return EIO;
 8003030:	2305      	movs	r3, #5
 8003032:	e006      	b.n	8003042 <_read+0x42>
  }
  errno = EBADF;
 8003034:	f00e f894 	bl	8011160 <__errno>
 8003038:	4603      	mov	r3, r0
 800303a:	2209      	movs	r2, #9
 800303c:	601a      	str	r2, [r3, #0]
  return -1;
 800303e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200033a0 	.word	0x200033a0

08003050 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db08      	blt.n	8003072 <_fstat+0x22>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	dc05      	bgt.n	8003072 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800306c:	605a      	str	r2, [r3, #4]
    return 0;
 800306e:	2300      	movs	r3, #0
 8003070:	e005      	b.n	800307e <_fstat+0x2e>
  }

  errno = EBADF;
 8003072:	f00e f875 	bl	8011160 <__errno>
 8003076:	4603      	mov	r3, r0
 8003078:	2209      	movs	r2, #9
 800307a:	601a      	str	r2, [r3, #0]
  return 0;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_MspInit+0x4c>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	4a0f      	ldr	r2, [pc, #60]	; (80030d4 <HAL_MspInit+0x4c>)
 8003098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800309c:	6453      	str	r3, [r2, #68]	; 0x44
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <HAL_MspInit+0x4c>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <HAL_MspInit+0x4c>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <HAL_MspInit+0x4c>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_MspInit+0x4c>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0b      	ldr	r2, [pc, #44]	; (8003114 <HAL_CRC_MspInit+0x3c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10d      	bne.n	8003106 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_CRC_MspInit+0x40>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_CRC_MspInit+0x40>)
 80030f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_CRC_MspInit+0x40>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003102:	60fb      	str	r3, [r7, #12]
 8003104:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023000 	.word	0x40023000
 8003118:	40023800 	.word	0x40023800

0800311c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <HAL_I2C_MspInit+0xc4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d14b      	bne.n	80031d6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800317a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800317c:	2312      	movs	r3, #18
 800317e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003180:	2301      	movs	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003184:	2300      	movs	r3, #0
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003188:	2304      	movs	r3, #4
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800318c:	f107 0314 	add.w	r3, r7, #20
 8003190:	4619      	mov	r1, r3
 8003192:	4815      	ldr	r0, [pc, #84]	; (80031e8 <HAL_I2C_MspInit+0xcc>)
 8003194:	f001 f8b6 	bl	8004304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319e:	2312      	movs	r3, #18
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a6:	2303      	movs	r3, #3
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80031aa:	2304      	movs	r3, #4
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ae:	f107 0314 	add.w	r3, r7, #20
 80031b2:	4619      	mov	r1, r3
 80031b4:	480d      	ldr	r0, [pc, #52]	; (80031ec <HAL_I2C_MspInit+0xd0>)
 80031b6:	f001 f8a5 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a08      	ldr	r2, [pc, #32]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 80031c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_I2C_MspInit+0xc8>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d2:	60bb      	str	r3, [r7, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40005c00 	.word	0x40005c00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020000 	.word	0x40020000

080031f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <HAL_SPI_MspInit+0x84>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d12c      	bne.n	800326c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_SPI_MspInit+0x88>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	4a17      	ldr	r2, [pc, #92]	; (8003278 <HAL_SPI_MspInit+0x88>)
 800321c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003220:	6453      	str	r3, [r2, #68]	; 0x44
 8003222:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_SPI_MspInit+0x88>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_SPI_MspInit+0x88>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_SPI_MspInit+0x88>)
 8003238:	f043 0320 	orr.w	r3, r3, #32
 800323c:	6313      	str	r3, [r2, #48]	; 0x30
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <HAL_SPI_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800324a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800324e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800325c:	2305      	movs	r3, #5
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4619      	mov	r1, r3
 8003266:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_SPI_MspInit+0x8c>)
 8003268:	f001 f84c 	bl	8004304 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800326c:	bf00      	nop
 800326e:	3728      	adds	r7, #40	; 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40015000 	.word	0x40015000
 8003278:	40023800 	.word	0x40023800
 800327c:	40021400 	.word	0x40021400

08003280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <HAL_TIM_Base_MspInit+0xc0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_TIM_Base_MspInit+0xc4>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <HAL_TIM_Base_MspInit+0xc4>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6453      	str	r3, [r2, #68]	; 0x44
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_TIM_Base_MspInit+0xc4>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80032ae:	e042      	b.n	8003336 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d13d      	bne.n	8003336 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_TIM_Base_MspInit+0xc4>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_TIM_Base_MspInit+0xc4>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_TIM_Base_MspInit+0xc4>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_TIM_Base_MspInit+0xcc>)
 80032da:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 80032de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80032e2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032e4:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 80032e6:	2240      	movs	r2, #64	; 0x40
 80032e8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80032f0:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 80032f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 80032fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032fe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003300:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 8003302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003306:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003308:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800331a:	480b      	ldr	r0, [pc, #44]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 800331c:	f000 fc76 	bl	8003c0c <HAL_DMA_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8003326:	f7ff fde3 	bl	8002ef0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a06      	ldr	r2, [pc, #24]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 800332e:	625a      	str	r2, [r3, #36]	; 0x24
 8003330:	4a05      	ldr	r2, [pc, #20]	; (8003348 <HAL_TIM_Base_MspInit+0xc8>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40010000 	.word	0x40010000
 8003344:	40023800 	.word	0x40023800
 8003348:	200032c8 	.word	0x200032c8
 800334c:	40026088 	.word	0x40026088

08003350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b088      	sub	sp, #32
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003370:	d11d      	bne.n	80033ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_TIM_MspPostInit+0x68>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_TIM_MspPostInit+0x68>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_TIM_MspPostInit+0x68>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	60bb      	str	r3, [r7, #8]
 800338c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800338e:	2320      	movs	r3, #32
 8003390:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	4619      	mov	r1, r3
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <HAL_TIM_MspPostInit+0x6c>)
 80033aa:	f000 ffab 	bl	8004304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033ae:	bf00      	nop
 80033b0:	3720      	adds	r7, #32
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
 80033bc:	40020000 	.word	0x40020000

080033c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <HAL_UART_MspInit+0x94>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d134      	bne.n	800344c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_UART_MspInit+0x98>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_UART_MspInit+0x98>)
 80033ec:	f043 0310 	orr.w	r3, r3, #16
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_UART_MspInit+0x98>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	4b15      	ldr	r3, [pc, #84]	; (8003458 <HAL_UART_MspInit+0x98>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a14      	ldr	r2, [pc, #80]	; (8003458 <HAL_UART_MspInit+0x98>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <HAL_UART_MspInit+0x98>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800341a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800341e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800342c:	2307      	movs	r3, #7
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	4619      	mov	r1, r3
 8003436:	4809      	ldr	r0, [pc, #36]	; (800345c <HAL_UART_MspInit+0x9c>)
 8003438:	f000 ff64 	bl	8004304 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800343c:	2200      	movs	r2, #0
 800343e:	2100      	movs	r1, #0
 8003440:	2025      	movs	r0, #37	; 0x25
 8003442:	f000 fb90 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003446:	2025      	movs	r0, #37	; 0x25
 8003448:	f000 fba9 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800344c:	bf00      	nop
 800344e:	3728      	adds	r7, #40	; 0x28
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40011000 	.word	0x40011000
 8003458:	40023800 	.word	0x40023800
 800345c:	40020000 	.word	0x40020000

08003460 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003474:	4b3b      	ldr	r3, [pc, #236]	; (8003564 <HAL_FMC_MspInit+0x104>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d16f      	bne.n	800355c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800347c:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_FMC_MspInit+0x104>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <HAL_FMC_MspInit+0x108>)
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	4a37      	ldr	r2, [pc, #220]	; (8003568 <HAL_FMC_MspInit+0x108>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6393      	str	r3, [r2, #56]	; 0x38
 8003492:	4b35      	ldr	r3, [pc, #212]	; (8003568 <HAL_FMC_MspInit+0x108>)
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800349e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80034a2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034b0:	230c      	movs	r3, #12
 80034b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	482c      	ldr	r0, [pc, #176]	; (800356c <HAL_FMC_MspInit+0x10c>)
 80034ba:	f000 ff23 	bl	8004304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80034be:	2301      	movs	r3, #1
 80034c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	2303      	movs	r3, #3
 80034cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034ce:	230c      	movs	r3, #12
 80034d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4826      	ldr	r0, [pc, #152]	; (8003570 <HAL_FMC_MspInit+0x110>)
 80034d8:	f000 ff14 	bl	8004304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80034dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80034e0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ea:	2303      	movs	r3, #3
 80034ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034ee:	230c      	movs	r3, #12
 80034f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	481f      	ldr	r0, [pc, #124]	; (8003574 <HAL_FMC_MspInit+0x114>)
 80034f8:	f000 ff04 	bl	8004304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80034fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003500:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800350e:	230c      	movs	r3, #12
 8003510:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003512:	1d3b      	adds	r3, r7, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4818      	ldr	r0, [pc, #96]	; (8003578 <HAL_FMC_MspInit+0x118>)
 8003518:	f000 fef4 	bl	8004304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800351c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003520:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352a:	2303      	movs	r3, #3
 800352c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800352e:	230c      	movs	r3, #12
 8003530:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4811      	ldr	r0, [pc, #68]	; (800357c <HAL_FMC_MspInit+0x11c>)
 8003538:	f000 fee4 	bl	8004304 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800353c:	2360      	movs	r3, #96	; 0x60
 800353e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003548:	2303      	movs	r3, #3
 800354a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800354c:	230c      	movs	r3, #12
 800354e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003550:	1d3b      	adds	r3, r7, #4
 8003552:	4619      	mov	r1, r3
 8003554:	480a      	ldr	r0, [pc, #40]	; (8003580 <HAL_FMC_MspInit+0x120>)
 8003556:	f000 fed5 	bl	8004304 <HAL_GPIO_Init>
 800355a:	e000      	b.n	800355e <HAL_FMC_MspInit+0xfe>
    return;
 800355c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200033a4 	.word	0x200033a4
 8003568:	40023800 	.word	0x40023800
 800356c:	40021400 	.word	0x40021400
 8003570:	40020800 	.word	0x40020800
 8003574:	40021800 	.word	0x40021800
 8003578:	40021000 	.word	0x40021000
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40020400 	.word	0x40020400

08003584 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800358c:	f7ff ff68 	bl	8003460 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800359c:	e7fe      	b.n	800359c <NMI_Handler+0x4>

0800359e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800359e:	b480      	push	{r7}
 80035a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a2:	e7fe      	b.n	80035a2 <HardFault_Handler+0x4>

080035a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <MemManage_Handler+0x4>

080035aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ae:	e7fe      	b.n	80035ae <BusFault_Handler+0x4>

080035b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <UsageFault_Handler+0x4>

080035b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035e4:	f000 f9a0 	bl	8003928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	bd80      	pop	{r7, pc}

080035ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80035f0:	2001      	movs	r0, #1
 80035f2:	f001 f865 	bl	80046c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <DMA1_Stream5_IRQHandler+0x10>)
 8003602:	f000 fc43 	bl	8003e8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200032c8 	.word	0x200032c8

08003610 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003614:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003618:	f001 f852 	bl	80046c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}

08003620 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <USART1_IRQHandler+0x10>)
 8003626:	f005 ff69 	bl	80094fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20003328 	.word	0x20003328

08003634 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <OTG_HS_IRQHandler+0x10>)
 800363a:	f001 fac3 	bl	8004bc4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20003c34 	.word	0x20003c34

08003648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <_sbrk+0x5c>)
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <_sbrk+0x60>)
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003664:	4b11      	ldr	r3, [pc, #68]	; (80036ac <_sbrk+0x64>)
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <_sbrk+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366a:	4b10      	ldr	r3, [pc, #64]	; (80036ac <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003678:	f00d fd72 	bl	8011160 <__errno>
 800367c:	4603      	mov	r3, r0
 800367e:	220c      	movs	r2, #12
 8003680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003686:	e009      	b.n	800369c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003688:	4b08      	ldr	r3, [pc, #32]	; (80036ac <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	4a05      	ldr	r2, [pc, #20]	; (80036ac <_sbrk+0x64>)
 8003698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20030000 	.word	0x20030000
 80036a8:	00000400 	.word	0x00000400
 80036ac:	200033a8 	.word	0x200033a8
 80036b0:	20003f48 	.word	0x20003f48

080036b4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and External memory 
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void){
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <SystemInit+0x20>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <SystemInit+0x20>)
 80036c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <GetUserID>:
// change which userID is used in saving activity & usage data.
void ChangeUser(uint8_t newUserID ){
	userID = newUserID;
}
int GetUserID()
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
	return userID;
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <GetUserID+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	200000ec 	.word	0x200000ec

080036f0 <SetUserMainColour>:
void SetUserMainColour(int Red, int Green, int Blue)
{}
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <DebugPrint>:
int debugLogging = 0;
int paused = 0;
int logMovementData = 0;
// system and user debugging need to be on to actually print.
void DebugPrint(char * buffer)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	if(debugLogging&!paused)
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <DebugPrint+0x38>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <DebugPrint+0x3c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4013      	ands	r3, r2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <DebugPrint+0x2e>
	{
		printf(buffer);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f00d fe48 	bl	80113c0 <iprintf>
		printf("\n");
 8003730:	200a      	movs	r0, #10
 8003732:	f00d fe5d 	bl	80113f0 <putchar>
	}
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	200033b0 	.word	0x200033b0
 8003744:	200033ac 	.word	0x200033ac

08003748 <SetUserDebugLogging>:
// user debugging
void SetUserDebugLogging ( int set )
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	debugLogging = set;
 8003750:	4a04      	ldr	r2, [pc, #16]	; (8003764 <SetUserDebugLogging+0x1c>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6013      	str	r3, [r2, #0]
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	200033ac 	.word	0x200033ac

08003768 <SetMovementUSBLogging>:
int GetDebugLogging( )
{
	return debugLogging;
}
stoneError_t SetMovementUSBLogging(int flag){
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	logMovementData = 1;
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <SetMovementUSBLogging+0x1c>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	200033b4 	.word	0x200033b4

08003788 <GetMovementUSBLogging>:
int GetMovementUSBLogging(){
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
	return logMovementData;
 800378c:	4b03      	ldr	r3, [pc, #12]	; (800379c <GetMovementUSBLogging+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200033b4 	.word	0x200033b4

080037a0 <PauseDebugLogging>:
//  system debugging.
void PauseDebugLogging(){paused = 1;}
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <PauseDebugLogging+0x14>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	bf00      	nop
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	200033b0 	.word	0x200033b0

080037b8 <ResumeDebugLogging>:
void ResumeDebugLogging(){paused = 0;}
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <ResumeDebugLogging+0x14>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	200033b0 	.word	0x200033b0

080037d0 <colourChangeInit>:
void breathHoldOutput();
void breaingOutOutput();

// internal state table
//static stateTableEntry_t  stateTabel[]={};
int colourChangeInit(){
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0

	return 0;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <colourChangeProcess>:
int colourChangeProcess(){
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
	return 0;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <colourChangeOnEnd>:
int colourChangeOnEnd(){
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
	return 0;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <meditationBreathingInit>:
 */


#include "util.h"

int meditationBreathingInit(){}
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
 8003804:	bf00      	nop
 8003806:	4618      	mov	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <meditationBreathingProcess>:
int meditationBreathingProcess(){}
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
 8003814:	bf00      	nop
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <meditationBreathingOnEnd>:
int meditationBreathingOnEnd(){}
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
 8003824:	bf00      	nop
 8003826:	4618      	mov	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003868 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003836:	490e      	ldr	r1, [pc, #56]	; (8003870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003838:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800383a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800383c:	e002      	b.n	8003844 <LoopCopyDataInit>

0800383e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800383e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003842:	3304      	adds	r3, #4

08003844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003848:	d3f9      	bcc.n	800383e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800384a:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800384c:	4c0b      	ldr	r4, [pc, #44]	; (800387c <LoopFillZerobss+0x26>)
  movs r3, #0
 800384e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003850:	e001      	b.n	8003856 <LoopFillZerobss>

08003852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003854:	3204      	adds	r2, #4

08003856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003858:	d3fb      	bcc.n	8003852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800385a:	f7ff ff2b 	bl	80036b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800385e:	f00d fc85 	bl	801116c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003862:	f7fe fefd 	bl	8002660 <main>
  bx  lr    
 8003866:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003868:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800386c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003870:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8003874:	08013508 	.word	0x08013508
  ldr r2, =_sbss
 8003878:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 800387c:	20003f48 	.word	0x20003f48

08003880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003880:	e7fe      	b.n	8003880 <ADC_IRQHandler>
	...

08003884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <HAL_Init+0x40>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0d      	ldr	r2, [pc, #52]	; (80038c4 <HAL_Init+0x40>)
 800388e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <HAL_Init+0x40>)
 800389a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800389e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <HAL_Init+0x40>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a07      	ldr	r2, [pc, #28]	; (80038c4 <HAL_Init+0x40>)
 80038a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ac:	2003      	movs	r0, #3
 80038ae:	f000 f94f 	bl	8003b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038b2:	200f      	movs	r0, #15
 80038b4:	f000 f808 	bl	80038c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038b8:	f7ff fbe6 	bl	8003088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023c00 	.word	0x40023c00

080038c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_InitTick+0x54>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <HAL_InitTick+0x58>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	4619      	mov	r1, r3
 80038da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038de:	fbb3 f3f1 	udiv	r3, r3, r1
 80038e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f967 	bl	8003bba <HAL_SYSTICK_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e00e      	b.n	8003914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d80a      	bhi.n	8003912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038fc:	2200      	movs	r2, #0
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003904:	f000 f92f 	bl	8003b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003908:	4a06      	ldr	r2, [pc, #24]	; (8003924 <HAL_InitTick+0x5c>)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200000e8 	.word	0x200000e8
 8003920:	200000f4 	.word	0x200000f4
 8003924:	200000f0 	.word	0x200000f0

08003928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_IncTick+0x20>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_IncTick+0x24>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4413      	add	r3, r2
 8003938:	4a04      	ldr	r2, [pc, #16]	; (800394c <HAL_IncTick+0x24>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	200000f4 	.word	0x200000f4
 800394c:	200033b8 	.word	0x200033b8

08003950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return uwTick;
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_GetTick+0x14>)
 8003956:	681b      	ldr	r3, [r3, #0]
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	200033b8 	.word	0x200033b8

08003968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003970:	f7ff ffee 	bl	8003950 <HAL_GetTick>
 8003974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003980:	d005      	beq.n	800398e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_Delay+0x44>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800398e:	bf00      	nop
 8003990:	f7ff ffde 	bl	8003950 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d8f7      	bhi.n	8003990 <HAL_Delay+0x28>
  {
  }
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	200000f4 	.word	0x200000f4

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b1c:	d301      	bcc.n	8003b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00f      	b.n	8003b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <SysTick_Config+0x40>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b30:	f7ff ff8e 	bl	8003a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <SysTick_Config+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <SysTick_Config+0x40>)
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000e010 	.word	0xe000e010

08003b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff29 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b78:	f7ff ff3e 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ff8e 	bl	8003aa4 <NVIC_EncodePriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff5d 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff31 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffa2 	bl	8003b0c <SysTick_Config>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e00e      	b.n	8003c02 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	795b      	ldrb	r3, [r3, #5]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fa6f 	bl	80030d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff fe9a 	bl	8003950 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e099      	b.n	8003d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c48:	e00f      	b.n	8003c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c4a:	f7ff fe81 	bl	8003950 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d908      	bls.n	8003c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e078      	b.n	8003d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e8      	bne.n	8003c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <HAL_DMA_Init+0x158>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d107      	bne.n	8003cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d117      	bne.n	8003d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fa7b 	bl	800420c <DMA_CheckFifoParam>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2240      	movs	r2, #64	; 0x40
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e016      	b.n	8003d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa32 	bl	80041a0 <DMA_CalcBaseAndBitshift>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	f010803f 	.word	0xf010803f

08003d68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d76:	f7ff fdeb 	bl	8003950 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d008      	beq.n	8003d9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e052      	b.n	8003e40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0216 	bic.w	r2, r2, #22
 8003da8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003db8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_DMA_Abort+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0208 	bic.w	r2, r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0201 	bic.w	r2, r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dea:	e013      	b.n	8003e14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dec:	f7ff fdb0 	bl	8003950 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d90c      	bls.n	8003e14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2203      	movs	r2, #3
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e015      	b.n	8003e40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e4      	bne.n	8003dec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	223f      	movs	r2, #63	; 0x3f
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d004      	beq.n	8003e66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2280      	movs	r2, #128	; 0x80
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e00c      	b.n	8003e80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2205      	movs	r2, #5
 8003e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e98:	4b8e      	ldr	r3, [pc, #568]	; (80040d4 <HAL_DMA_IRQHandler+0x248>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a8e      	ldr	r2, [pc, #568]	; (80040d8 <HAL_DMA_IRQHandler+0x24c>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	0a9b      	lsrs	r3, r3, #10
 8003ea4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	2208      	movs	r2, #8
 8003eb8:	409a      	lsls	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0204 	bic.w	r2, r2, #4
 8003ede:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	f043 0201 	orr.w	r2, r3, #1
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4013      	ands	r3, r2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d012      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	2204      	movs	r2, #4
 8003f34:	409a      	lsls	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d012      	beq.n	8003f64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	2204      	movs	r2, #4
 8003f52:	409a      	lsls	r2, r3
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	2210      	movs	r2, #16
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d043      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d03c      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f86:	2210      	movs	r2, #16
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d018      	beq.n	8003fce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d024      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
 8003fba:	e01f      	b.n	8003ffc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	4798      	blx	r3
 8003fcc:	e016      	b.n	8003ffc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0208 	bic.w	r2, r2, #8
 8003fea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	2220      	movs	r2, #32
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 808f 	beq.w	800412c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 8087 	beq.w	800412c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	2220      	movs	r2, #32
 8004024:	409a      	lsls	r2, r3
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b05      	cmp	r3, #5
 8004034:	d136      	bne.n	80040a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0216 	bic.w	r2, r2, #22
 8004044:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004054:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_DMA_IRQHandler+0x1da>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004062:	2b00      	cmp	r3, #0
 8004064:	d007      	beq.n	8004076 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0208 	bic.w	r2, r2, #8
 8004074:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407a:	223f      	movs	r2, #63	; 0x3f
 800407c:	409a      	lsls	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	2b00      	cmp	r3, #0
 8004098:	d07e      	beq.n	8004198 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
        }
        return;
 80040a2:	e079      	b.n	8004198 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01d      	beq.n	80040ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10d      	bne.n	80040dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d031      	beq.n	800412c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
 80040d0:	e02c      	b.n	800412c <HAL_DMA_IRQHandler+0x2a0>
 80040d2:	bf00      	nop
 80040d4:	200000e8 	.word	0x200000e8
 80040d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d023      	beq.n	800412c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	4798      	blx	r3
 80040ec:	e01e      	b.n	800412c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10f      	bne.n	800411c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0210 	bic.w	r2, r2, #16
 800410a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	2b00      	cmp	r3, #0
 8004132:	d032      	beq.n	800419a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d022      	beq.n	8004186 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2205      	movs	r2, #5
 8004144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	3301      	adds	r3, #1
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	429a      	cmp	r2, r3
 8004162:	d307      	bcc.n	8004174 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f2      	bne.n	8004158 <HAL_DMA_IRQHandler+0x2cc>
 8004172:	e000      	b.n	8004176 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004174:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
 8004196:	e000      	b.n	800419a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004198:	bf00      	nop
    }
  }
}
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	3b10      	subs	r3, #16
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <DMA_CalcBaseAndBitshift+0x64>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <DMA_CalcBaseAndBitshift+0x68>)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d909      	bls.n	80041e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
 80041e0:	e007      	b.n	80041f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	aaaaaaab 	.word	0xaaaaaaab
 8004208:	080132c0 	.word	0x080132c0

0800420c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d11f      	bne.n	8004266 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d856      	bhi.n	80042da <DMA_CheckFifoParam+0xce>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <DMA_CheckFifoParam+0x28>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004245 	.word	0x08004245
 8004238:	08004257 	.word	0x08004257
 800423c:	08004245 	.word	0x08004245
 8004240:	080042db 	.word	0x080042db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d046      	beq.n	80042de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004254:	e043      	b.n	80042de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800425e:	d140      	bne.n	80042e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e03d      	b.n	80042e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	d121      	bne.n	80042b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d837      	bhi.n	80042e6 <DMA_CheckFifoParam+0xda>
 8004276:	a201      	add	r2, pc, #4	; (adr r2, 800427c <DMA_CheckFifoParam+0x70>)
 8004278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427c:	0800428d 	.word	0x0800428d
 8004280:	08004293 	.word	0x08004293
 8004284:	0800428d 	.word	0x0800428d
 8004288:	080042a5 	.word	0x080042a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      break;
 8004290:	e030      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d025      	beq.n	80042ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a2:	e022      	b.n	80042ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ac:	d11f      	bne.n	80042ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042b2:	e01c      	b.n	80042ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d903      	bls.n	80042c2 <DMA_CheckFifoParam+0xb6>
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d003      	beq.n	80042c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c0:	e018      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
      break;
 80042c6:	e015      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00e      	beq.n	80042f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	e00b      	b.n	80042f2 <DMA_CheckFifoParam+0xe6>
      break;
 80042da:	bf00      	nop
 80042dc:	e00a      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      break;
 80042de:	bf00      	nop
 80042e0:	e008      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      break;
 80042e2:	bf00      	nop
 80042e4:	e006      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e004      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
    }
  } 
  
  return status; 
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop

08004304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800430e:	2300      	movs	r3, #0
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004312:	2300      	movs	r3, #0
 8004314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800431a:	2300      	movs	r3, #0
 800431c:	61fb      	str	r3, [r7, #28]
 800431e:	e177      	b.n	8004610 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004320:	2201      	movs	r2, #1
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4013      	ands	r3, r2
 8004332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	429a      	cmp	r2, r3
 800433a:	f040 8166 	bne.w	800460a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d005      	beq.n	8004356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004352:	2b02      	cmp	r3, #2
 8004354:	d130      	bne.n	80043b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800438c:	2201      	movs	r2, #1
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 0201 	and.w	r2, r3, #1
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d017      	beq.n	80043f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	2203      	movs	r2, #3
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d123      	bne.n	8004448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	08da      	lsrs	r2, r3, #3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3208      	adds	r2, #8
 8004408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	220f      	movs	r2, #15
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	08da      	lsrs	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3208      	adds	r2, #8
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	2203      	movs	r2, #3
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 0203 	and.w	r2, r3, #3
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80c0 	beq.w	800460a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b66      	ldr	r3, [pc, #408]	; (8004628 <HAL_GPIO_Init+0x324>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a65      	ldr	r2, [pc, #404]	; (8004628 <HAL_GPIO_Init+0x324>)
 8004494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_GPIO_Init+0x324>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044a6:	4a61      	ldr	r2, [pc, #388]	; (800462c <HAL_GPIO_Init+0x328>)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	089b      	lsrs	r3, r3, #2
 80044ac:	3302      	adds	r3, #2
 80044ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	220f      	movs	r2, #15
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a58      	ldr	r2, [pc, #352]	; (8004630 <HAL_GPIO_Init+0x32c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d037      	beq.n	8004542 <HAL_GPIO_Init+0x23e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a57      	ldr	r2, [pc, #348]	; (8004634 <HAL_GPIO_Init+0x330>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d031      	beq.n	800453e <HAL_GPIO_Init+0x23a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a56      	ldr	r2, [pc, #344]	; (8004638 <HAL_GPIO_Init+0x334>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d02b      	beq.n	800453a <HAL_GPIO_Init+0x236>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a55      	ldr	r2, [pc, #340]	; (800463c <HAL_GPIO_Init+0x338>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d025      	beq.n	8004536 <HAL_GPIO_Init+0x232>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a54      	ldr	r2, [pc, #336]	; (8004640 <HAL_GPIO_Init+0x33c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <HAL_GPIO_Init+0x22e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a53      	ldr	r2, [pc, #332]	; (8004644 <HAL_GPIO_Init+0x340>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d019      	beq.n	800452e <HAL_GPIO_Init+0x22a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a52      	ldr	r2, [pc, #328]	; (8004648 <HAL_GPIO_Init+0x344>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_GPIO_Init+0x226>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a51      	ldr	r2, [pc, #324]	; (800464c <HAL_GPIO_Init+0x348>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00d      	beq.n	8004526 <HAL_GPIO_Init+0x222>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a50      	ldr	r2, [pc, #320]	; (8004650 <HAL_GPIO_Init+0x34c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <HAL_GPIO_Init+0x21e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4f      	ldr	r2, [pc, #316]	; (8004654 <HAL_GPIO_Init+0x350>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_GPIO_Init+0x21a>
 800451a:	2309      	movs	r3, #9
 800451c:	e012      	b.n	8004544 <HAL_GPIO_Init+0x240>
 800451e:	230a      	movs	r3, #10
 8004520:	e010      	b.n	8004544 <HAL_GPIO_Init+0x240>
 8004522:	2308      	movs	r3, #8
 8004524:	e00e      	b.n	8004544 <HAL_GPIO_Init+0x240>
 8004526:	2307      	movs	r3, #7
 8004528:	e00c      	b.n	8004544 <HAL_GPIO_Init+0x240>
 800452a:	2306      	movs	r3, #6
 800452c:	e00a      	b.n	8004544 <HAL_GPIO_Init+0x240>
 800452e:	2305      	movs	r3, #5
 8004530:	e008      	b.n	8004544 <HAL_GPIO_Init+0x240>
 8004532:	2304      	movs	r3, #4
 8004534:	e006      	b.n	8004544 <HAL_GPIO_Init+0x240>
 8004536:	2303      	movs	r3, #3
 8004538:	e004      	b.n	8004544 <HAL_GPIO_Init+0x240>
 800453a:	2302      	movs	r3, #2
 800453c:	e002      	b.n	8004544 <HAL_GPIO_Init+0x240>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_GPIO_Init+0x240>
 8004542:	2300      	movs	r3, #0
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	f002 0203 	and.w	r2, r2, #3
 800454a:	0092      	lsls	r2, r2, #2
 800454c:	4093      	lsls	r3, r2
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004554:	4935      	ldr	r1, [pc, #212]	; (800462c <HAL_GPIO_Init+0x328>)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	3302      	adds	r3, #2
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004562:	4b3d      	ldr	r3, [pc, #244]	; (8004658 <HAL_GPIO_Init+0x354>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004586:	4a34      	ldr	r2, [pc, #208]	; (8004658 <HAL_GPIO_Init+0x354>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800458c:	4b32      	ldr	r3, [pc, #200]	; (8004658 <HAL_GPIO_Init+0x354>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b0:	4a29      	ldr	r2, [pc, #164]	; (8004658 <HAL_GPIO_Init+0x354>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045b6:	4b28      	ldr	r3, [pc, #160]	; (8004658 <HAL_GPIO_Init+0x354>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045da:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <HAL_GPIO_Init+0x354>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_GPIO_Init+0x354>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_GPIO_Init+0x354>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3301      	adds	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b0f      	cmp	r3, #15
 8004614:	f67f ae84 	bls.w	8004320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3724      	adds	r7, #36	; 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800
 800462c:	40013800 	.word	0x40013800
 8004630:	40020000 	.word	0x40020000
 8004634:	40020400 	.word	0x40020400
 8004638:	40020800 	.word	0x40020800
 800463c:	40020c00 	.word	0x40020c00
 8004640:	40021000 	.word	0x40021000
 8004644:	40021400 	.word	0x40021400
 8004648:	40021800 	.word	0x40021800
 800464c:	40021c00 	.word	0x40021c00
 8004650:	40022000 	.word	0x40022000
 8004654:	40022400 	.word	0x40022400
 8004658:	40013c00 	.word	0x40013c00

0800465c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	887b      	ldrh	r3, [r7, #2]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004674:	2301      	movs	r3, #1
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e001      	b.n	800467e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800467e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	807b      	strh	r3, [r7, #2]
 8004698:	4613      	mov	r3, r2
 800469a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800469c:	787b      	ldrb	r3, [r7, #1]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a8:	e003      	b.n	80046b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046aa:	887b      	ldrh	r3, [r7, #2]
 80046ac:	041a      	lsls	r2, r3, #16
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	619a      	str	r2, [r3, #24]
}
 80046b2:	bf00      	nop
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
	...

080046c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046d6:	4a05      	ldr	r2, [pc, #20]	; (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc ffa4 	bl	800162c <HAL_GPIO_EXTI_Callback>
  }
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40013c00 	.word	0x40013c00

080046f0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80046f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046f2:	b08f      	sub	sp, #60	; 0x3c
 80046f4:	af0a      	add	r7, sp, #40	; 0x28
 80046f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e054      	b.n	80047ac <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f00c fa3b 	bl	8010b98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d102      	bne.n	800473c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4618      	mov	r0, r3
 8004742:	f005 ff7b 	bl	800a63c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	687e      	ldr	r6, [r7, #4]
 800474e:	466d      	mov	r5, sp
 8004750:	f106 0410 	add.w	r4, r6, #16
 8004754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800475c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004760:	e885 0003 	stmia.w	r5, {r0, r1}
 8004764:	1d33      	adds	r3, r6, #4
 8004766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004768:	6838      	ldr	r0, [r7, #0]
 800476a:	f005 fef5 	bl	800a558 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	4618      	mov	r0, r3
 8004776:	f005 ff72 	bl	800a65e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	687e      	ldr	r6, [r7, #4]
 8004782:	466d      	mov	r5, sp
 8004784:	f106 0410 	add.w	r4, r6, #16
 8004788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800478a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800478c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800478e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004790:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004794:	e885 0003 	stmia.w	r5, {r0, r1}
 8004798:	1d33      	adds	r3, r6, #4
 800479a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800479c:	6838      	ldr	r0, [r7, #0]
 800479e:	f006 f8fb 	bl	800a998 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047b4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b089      	sub	sp, #36	; 0x24
 80047b8:	af04      	add	r7, sp, #16
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	70fb      	strb	r3, [r7, #3]
 80047c6:	460b      	mov	r3, r1
 80047c8:	70bb      	strb	r3, [r7, #2]
 80047ca:	4613      	mov	r3, r2
 80047cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_HCD_HC_Init+0x28>
 80047d8:	2302      	movs	r3, #2
 80047da:	e076      	b.n	80048ca <HAL_HCD_HC_Init+0x116>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	212c      	movs	r1, #44	; 0x2c
 80047ea:	fb01 f303 	mul.w	r3, r1, r3
 80047ee:	4413      	add	r3, r2
 80047f0:	333d      	adds	r3, #61	; 0x3d
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	212c      	movs	r1, #44	; 0x2c
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	4413      	add	r3, r2
 8004802:	3338      	adds	r3, #56	; 0x38
 8004804:	787a      	ldrb	r2, [r7, #1]
 8004806:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	212c      	movs	r1, #44	; 0x2c
 800480e:	fb01 f303 	mul.w	r3, r1, r3
 8004812:	4413      	add	r3, r2
 8004814:	3340      	adds	r3, #64	; 0x40
 8004816:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004818:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	212c      	movs	r1, #44	; 0x2c
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	4413      	add	r3, r2
 8004826:	3339      	adds	r3, #57	; 0x39
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	212c      	movs	r1, #44	; 0x2c
 8004832:	fb01 f303 	mul.w	r3, r1, r3
 8004836:	4413      	add	r3, r2
 8004838:	333f      	adds	r3, #63	; 0x3f
 800483a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800483e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	78ba      	ldrb	r2, [r7, #2]
 8004844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004848:	b2d0      	uxtb	r0, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	212c      	movs	r1, #44	; 0x2c
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	4413      	add	r3, r2
 8004854:	333a      	adds	r3, #58	; 0x3a
 8004856:	4602      	mov	r2, r0
 8004858:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800485a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800485e:	2b00      	cmp	r3, #0
 8004860:	da09      	bge.n	8004876 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	212c      	movs	r1, #44	; 0x2c
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	333b      	adds	r3, #59	; 0x3b
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e008      	b.n	8004888 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004876:	78fb      	ldrb	r3, [r7, #3]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	212c      	movs	r1, #44	; 0x2c
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	4413      	add	r3, r2
 8004882:	333b      	adds	r3, #59	; 0x3b
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	212c      	movs	r1, #44	; 0x2c
 800488e:	fb01 f303 	mul.w	r3, r1, r3
 8004892:	4413      	add	r3, r2
 8004894:	333c      	adds	r3, #60	; 0x3c
 8004896:	f897 2020 	ldrb.w	r2, [r7, #32]
 800489a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	787c      	ldrb	r4, [r7, #1]
 80048a2:	78ba      	ldrb	r2, [r7, #2]
 80048a4:	78f9      	ldrb	r1, [r7, #3]
 80048a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	4623      	mov	r3, r4
 80048b8:	f006 f9f4 	bl	800aca4 <USB_HC_Init>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}

080048d2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_HCD_HC_Halt+0x1e>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e00f      	b.n	8004910 <HAL_HCD_HC_Halt+0x3e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f006 fc44 	bl	800b18e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	461a      	mov	r2, r3
 8004926:	4603      	mov	r3, r0
 8004928:	70fb      	strb	r3, [r7, #3]
 800492a:	460b      	mov	r3, r1
 800492c:	70bb      	strb	r3, [r7, #2]
 800492e:	4613      	mov	r3, r2
 8004930:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	333b      	adds	r3, #59	; 0x3b
 8004940:	78ba      	ldrb	r2, [r7, #2]
 8004942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004944:	78fb      	ldrb	r3, [r7, #3]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	212c      	movs	r1, #44	; 0x2c
 800494a:	fb01 f303 	mul.w	r3, r1, r3
 800494e:	4413      	add	r3, r2
 8004950:	333f      	adds	r3, #63	; 0x3f
 8004952:	787a      	ldrb	r2, [r7, #1]
 8004954:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004956:	7c3b      	ldrb	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d112      	bne.n	8004982 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	212c      	movs	r1, #44	; 0x2c
 8004962:	fb01 f303 	mul.w	r3, r1, r3
 8004966:	4413      	add	r3, r2
 8004968:	3342      	adds	r3, #66	; 0x42
 800496a:	2203      	movs	r2, #3
 800496c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	333d      	adds	r3, #61	; 0x3d
 800497c:	7f3a      	ldrb	r2, [r7, #28]
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e008      	b.n	8004994 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	212c      	movs	r1, #44	; 0x2c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3342      	adds	r3, #66	; 0x42
 8004990:	2202      	movs	r2, #2
 8004992:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004994:	787b      	ldrb	r3, [r7, #1]
 8004996:	2b03      	cmp	r3, #3
 8004998:	f200 80c6 	bhi.w	8004b28 <HAL_HCD_HC_SubmitRequest+0x210>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	08004b15 	.word	0x08004b15
 80049ac:	08004a19 	.word	0x08004a19
 80049b0:	08004a97 	.word	0x08004a97
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80049b4:	7c3b      	ldrb	r3, [r7, #16]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	f040 80b8 	bne.w	8004b2c <HAL_HCD_HC_SubmitRequest+0x214>
 80049bc:	78bb      	ldrb	r3, [r7, #2]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 80b4 	bne.w	8004b2c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80049c4:	8b3b      	ldrh	r3, [r7, #24]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	212c      	movs	r1, #44	; 0x2c
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	4413      	add	r3, r2
 80049d6:	3355      	adds	r3, #85	; 0x55
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	212c      	movs	r1, #44	; 0x2c
 80049e2:	fb01 f303 	mul.w	r3, r1, r3
 80049e6:	4413      	add	r3, r2
 80049e8:	3355      	adds	r3, #85	; 0x55
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	212c      	movs	r1, #44	; 0x2c
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	3342      	adds	r3, #66	; 0x42
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004a02:	e093      	b.n	8004b2c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	212c      	movs	r1, #44	; 0x2c
 8004a0a:	fb01 f303 	mul.w	r3, r1, r3
 8004a0e:	4413      	add	r3, r2
 8004a10:	3342      	adds	r3, #66	; 0x42
 8004a12:	2202      	movs	r2, #2
 8004a14:	701a      	strb	r2, [r3, #0]
      break;
 8004a16:	e089      	b.n	8004b2c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a18:	78bb      	ldrb	r3, [r7, #2]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d11d      	bne.n	8004a5a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3355      	adds	r3, #85	; 0x55
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d109      	bne.n	8004a46 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	212c      	movs	r1, #44	; 0x2c
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3342      	adds	r3, #66	; 0x42
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a44:	e073      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	212c      	movs	r1, #44	; 0x2c
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	4413      	add	r3, r2
 8004a52:	3342      	adds	r3, #66	; 0x42
 8004a54:	2202      	movs	r2, #2
 8004a56:	701a      	strb	r2, [r3, #0]
      break;
 8004a58:	e069      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	212c      	movs	r1, #44	; 0x2c
 8004a60:	fb01 f303 	mul.w	r3, r1, r3
 8004a64:	4413      	add	r3, r2
 8004a66:	3354      	adds	r3, #84	; 0x54
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	212c      	movs	r1, #44	; 0x2c
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	3342      	adds	r3, #66	; 0x42
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
      break;
 8004a80:	e055      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3342      	adds	r3, #66	; 0x42
 8004a90:	2202      	movs	r2, #2
 8004a92:	701a      	strb	r2, [r3, #0]
      break;
 8004a94:	e04b      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004a96:	78bb      	ldrb	r3, [r7, #2]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11d      	bne.n	8004ad8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	212c      	movs	r1, #44	; 0x2c
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	3355      	adds	r3, #85	; 0x55
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	212c      	movs	r1, #44	; 0x2c
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	3342      	adds	r3, #66	; 0x42
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004ac2:	e034      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	212c      	movs	r1, #44	; 0x2c
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	4413      	add	r3, r2
 8004ad0:	3342      	adds	r3, #66	; 0x42
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	701a      	strb	r2, [r3, #0]
      break;
 8004ad6:	e02a      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	212c      	movs	r1, #44	; 0x2c
 8004ade:	fb01 f303 	mul.w	r3, r1, r3
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3354      	adds	r3, #84	; 0x54
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d109      	bne.n	8004b00 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	212c      	movs	r1, #44	; 0x2c
 8004af2:	fb01 f303 	mul.w	r3, r1, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	3342      	adds	r3, #66	; 0x42
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
      break;
 8004afe:	e016      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3342      	adds	r3, #66	; 0x42
 8004b0e:	2202      	movs	r2, #2
 8004b10:	701a      	strb	r2, [r3, #0]
      break;
 8004b12:	e00c      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	212c      	movs	r1, #44	; 0x2c
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	4413      	add	r3, r2
 8004b20:	3342      	adds	r3, #66	; 0x42
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004b28:	bf00      	nop
 8004b2a:	e000      	b.n	8004b2e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004b2c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	212c      	movs	r1, #44	; 0x2c
 8004b34:	fb01 f303 	mul.w	r3, r1, r3
 8004b38:	4413      	add	r3, r2
 8004b3a:	3344      	adds	r3, #68	; 0x44
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	8b3a      	ldrh	r2, [r7, #24]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	202c      	movs	r0, #44	; 0x2c
 8004b48:	fb00 f303 	mul.w	r3, r0, r3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	334c      	adds	r3, #76	; 0x4c
 8004b50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3360      	adds	r3, #96	; 0x60
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	212c      	movs	r1, #44	; 0x2c
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	3350      	adds	r3, #80	; 0x50
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	212c      	movs	r1, #44	; 0x2c
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	3339      	adds	r3, #57	; 0x39
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	212c      	movs	r1, #44	; 0x2c
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	3361      	adds	r3, #97	; 0x61
 8004b96:	2200      	movs	r2, #0
 8004b98:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	222c      	movs	r2, #44	; 0x2c
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	3338      	adds	r3, #56	; 0x38
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	18d1      	adds	r1, r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f006 f998 	bl	800aee8 <USB_HC_StartXfer>
 8004bb8:	4603      	mov	r3, r0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop

08004bc4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f005 fe99 	bl	800a912 <USB_GetMode>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	f040 80f6 	bne.w	8004dd4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f005 fe7d 	bl	800a8ec <USB_ReadInterrupts>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80ec 	beq.w	8004dd2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f005 fe74 	bl	800a8ec <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c0e:	d104      	bne.n	8004c1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f005 fe64 	bl	800a8ec <USB_ReadInterrupts>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2e:	d104      	bne.n	8004c3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f005 fe54 	bl	800a8ec <USB_ReadInterrupts>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c4e:	d104      	bne.n	8004c5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004c58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f005 fe44 	bl	800a8ec <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d103      	bne.n	8004c76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2202      	movs	r2, #2
 8004c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f005 fe36 	bl	800a8ec <USB_ReadInterrupts>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	d11c      	bne.n	8004cc6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004c94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10f      	bne.n	8004cc6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004ca6:	2110      	movs	r1, #16
 8004ca8:	6938      	ldr	r0, [r7, #16]
 8004caa:	f005 fd25 	bl	800a6f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004cae:	6938      	ldr	r0, [r7, #16]
 8004cb0:	f005 fd56 	bl	800a760 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f005 ff2c 	bl	800ab18 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f00b ffe3 	bl	8010c8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f005 fe0e 	bl	800a8ec <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cda:	d102      	bne.n	8004ce2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f001 f89e 	bl	8005e1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f005 fe00 	bl	800a8ec <USB_ReadInterrupts>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d106      	bne.n	8004d04 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f00b ffac 	bl	8010c54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2208      	movs	r2, #8
 8004d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f005 fdef 	bl	800a8ec <USB_ReadInterrupts>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b10      	cmp	r3, #16
 8004d16:	d101      	bne.n	8004d1c <HAL_HCD_IRQHandler+0x158>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_HCD_IRQHandler+0x15a>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d012      	beq.n	8004d48 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0210 	bic.w	r2, r2, #16
 8004d30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 ffa1 	bl	8005c7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0210 	orr.w	r2, r2, #16
 8004d46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f005 fdcd 	bl	800a8ec <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d5c:	d13a      	bne.n	8004dd4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f006 fa02 	bl	800b16c <USB_HC_ReadInterrupt>
 8004d68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e025      	b.n	8004dbc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9a:	d106      	bne.n	8004daa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	4619      	mov	r1, r3
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f8ab 	bl	8004efe <HCD_HC_IN_IRQHandler>
 8004da8:	e005      	b.n	8004db6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fbf9 	bl	80055a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	3301      	adds	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d3d4      	bcc.n	8004d70 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dce:	615a      	str	r2, [r3, #20]
 8004dd0:	e000      	b.n	8004dd4 <HAL_HCD_IRQHandler+0x210>
      return;
 8004dd2:	bf00      	nop
    }
  }
}
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_HCD_Start+0x16>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e013      	b.n	8004e18 <HAL_HCD_Start+0x3e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f005 feee 	bl	800abe0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f005 fc06 	bl	800a61a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_HCD_Stop+0x16>
 8004e32:	2302      	movs	r3, #2
 8004e34:	e00d      	b.n	8004e52 <HAL_HCD_Stop+0x32>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f006 fadc 	bl	800b400 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f005 fe90 	bl	800ab8c <USB_ResetPort>
 8004e6c:	4603      	mov	r3, r0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	212c      	movs	r1, #44	; 0x2c
 8004e88:	fb01 f303 	mul.w	r3, r1, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3360      	adds	r3, #96	; 0x60
 8004e90:	781b      	ldrb	r3, [r3, #0]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	212c      	movs	r1, #44	; 0x2c
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	3350      	adds	r3, #80	; 0x50
 8004eb8:	681b      	ldr	r3, [r3, #0]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f005 fed4 	bl	800ac80 <USB_GetCurrentFrame>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f005 feaf 	bl	800ac52 <USB_GetHostSpeed>
 8004ef4:	4603      	mov	r3, r0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b086      	sub	sp, #24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0304 	and.w	r3, r3, #4
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d11a      	bne.n	8004f64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	212c      	movs	r1, #44	; 0x2c
 8004f46:	fb01 f303 	mul.w	r3, r1, r3
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3361      	adds	r3, #97	; 0x61
 8004f4e:	2206      	movs	r2, #6
 8004f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f006 f916 	bl	800b18e <USB_HC_Halt>
 8004f62:	e0af      	b.n	80050c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7a:	d11b      	bne.n	8004fb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	212c      	movs	r1, #44	; 0x2c
 8004f96:	fb01 f303 	mul.w	r3, r1, r3
 8004f9a:	4413      	add	r3, r2
 8004f9c:	3361      	adds	r3, #97	; 0x61
 8004f9e:	2207      	movs	r2, #7
 8004fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f006 f8ee 	bl	800b18e <USB_HC_Halt>
 8004fb2:	e087      	b.n	80050c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d109      	bne.n	8004fde <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2320      	movs	r3, #32
 8004fda:	6093      	str	r3, [r2, #8]
 8004fdc:	e072      	b.n	80050c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d11a      	bne.n	800502a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	461a      	mov	r2, r3
 8005002:	2308      	movs	r3, #8
 8005004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	212c      	movs	r1, #44	; 0x2c
 800500c:	fb01 f303 	mul.w	r3, r1, r3
 8005010:	4413      	add	r3, r2
 8005012:	3361      	adds	r3, #97	; 0x61
 8005014:	2205      	movs	r2, #5
 8005016:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f006 f8b3 	bl	800b18e <USB_HC_Halt>
 8005028:	e04c      	b.n	80050c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	4413      	add	r3, r2
 8005032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d11b      	bne.n	800507a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4413      	add	r3, r2
 800504a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800504e:	461a      	mov	r2, r3
 8005050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005054:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	212c      	movs	r1, #44	; 0x2c
 800505c:	fb01 f303 	mul.w	r3, r1, r3
 8005060:	4413      	add	r3, r2
 8005062:	3361      	adds	r3, #97	; 0x61
 8005064:	2208      	movs	r2, #8
 8005066:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	4611      	mov	r1, r2
 8005072:	4618      	mov	r0, r3
 8005074:	f006 f88b 	bl	800b18e <USB_HC_Halt>
 8005078:	e024      	b.n	80050c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508c:	2b80      	cmp	r3, #128	; 0x80
 800508e:	d119      	bne.n	80050c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509c:	461a      	mov	r2, r3
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	212c      	movs	r1, #44	; 0x2c
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	4413      	add	r3, r2
 80050ae:	3361      	adds	r3, #97	; 0x61
 80050b0:	2206      	movs	r2, #6
 80050b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f006 f865 	bl	800b18e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d112      	bne.n	8005102 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f006 f851 	bl	800b18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	461a      	mov	r2, r3
 80050fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005100:	e24e      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 80df 	bne.w	80052d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d019      	beq.n	8005156 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	212c      	movs	r1, #44	; 0x2c
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	4413      	add	r3, r2
 800512e:	3348      	adds	r3, #72	; 0x48
 8005130:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	0159      	lsls	r1, r3, #5
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	440b      	add	r3, r1
 800513a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	202c      	movs	r0, #44	; 0x2c
 800514c:	fb00 f303 	mul.w	r3, r0, r3
 8005150:	440b      	add	r3, r1
 8005152:	3350      	adds	r3, #80	; 0x50
 8005154:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	3361      	adds	r3, #97	; 0x61
 8005164:	2201      	movs	r2, #1
 8005166:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	335c      	adds	r3, #92	; 0x5c
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	461a      	mov	r2, r3
 8005188:	2301      	movs	r3, #1
 800518a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	333f      	adds	r3, #63	; 0x3f
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	212c      	movs	r1, #44	; 0x2c
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	333f      	adds	r3, #63	; 0x3f
 80051ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d111      	bne.n	80051d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f005 ffe5 	bl	800b18e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	461a      	mov	r2, r3
 80051d2:	2310      	movs	r3, #16
 80051d4:	6093      	str	r3, [r2, #8]
 80051d6:	e03a      	b.n	800524e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	333f      	adds	r3, #63	; 0x3f
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d009      	beq.n	8005200 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	212c      	movs	r1, #44	; 0x2c
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	333f      	adds	r3, #63	; 0x3f
 80051fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d126      	bne.n	800524e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	440a      	add	r2, r1
 8005216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800521e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	212c      	movs	r1, #44	; 0x2c
 8005226:	fb01 f303 	mul.w	r3, r1, r3
 800522a:	4413      	add	r3, r2
 800522c:	3360      	adds	r3, #96	; 0x60
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	b2d9      	uxtb	r1, r3
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	202c      	movs	r0, #44	; 0x2c
 800523c:	fb00 f303 	mul.w	r3, r0, r3
 8005240:	4413      	add	r3, r2
 8005242:	3360      	adds	r3, #96	; 0x60
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f00b fd2d 	bl	8010ca8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d12b      	bne.n	80052ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	212c      	movs	r1, #44	; 0x2c
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	4413      	add	r3, r2
 8005262:	3348      	adds	r3, #72	; 0x48
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	202c      	movs	r0, #44	; 0x2c
 800526c:	fb00 f202 	mul.w	r2, r0, r2
 8005270:	440a      	add	r2, r1
 8005272:	3240      	adds	r2, #64	; 0x40
 8005274:	8812      	ldrh	r2, [r2, #0]
 8005276:	fbb3 f3f2 	udiv	r3, r3, r2
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 818e 	beq.w	80055a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	212c      	movs	r1, #44	; 0x2c
 800528a:	fb01 f303 	mul.w	r3, r1, r3
 800528e:	4413      	add	r3, r2
 8005290:	3354      	adds	r3, #84	; 0x54
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2d8      	uxtb	r0, r3
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	212c      	movs	r1, #44	; 0x2c
 80052a0:	fb01 f303 	mul.w	r3, r1, r3
 80052a4:	4413      	add	r3, r2
 80052a6:	3354      	adds	r3, #84	; 0x54
 80052a8:	4602      	mov	r2, r0
 80052aa:	701a      	strb	r2, [r3, #0]
}
 80052ac:	e178      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	212c      	movs	r1, #44	; 0x2c
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	4413      	add	r3, r2
 80052ba:	3354      	adds	r3, #84	; 0x54
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f083 0301 	eor.w	r3, r3, #1
 80052c2:	b2d8      	uxtb	r0, r3
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	212c      	movs	r1, #44	; 0x2c
 80052ca:	fb01 f303 	mul.w	r3, r1, r3
 80052ce:	4413      	add	r3, r2
 80052d0:	3354      	adds	r3, #84	; 0x54
 80052d2:	4602      	mov	r2, r0
 80052d4:	701a      	strb	r2, [r3, #0]
}
 80052d6:	e163      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	f040 80f6 	bne.w	80054dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	212c      	movs	r1, #44	; 0x2c
 80052f6:	fb01 f303 	mul.w	r3, r1, r3
 80052fa:	4413      	add	r3, r2
 80052fc:	3361      	adds	r3, #97	; 0x61
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d109      	bne.n	8005318 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	212c      	movs	r1, #44	; 0x2c
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	4413      	add	r3, r2
 8005310:	3360      	adds	r3, #96	; 0x60
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e0c9      	b.n	80054ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3361      	adds	r3, #97	; 0x61
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b05      	cmp	r3, #5
 800532a:	d109      	bne.n	8005340 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	212c      	movs	r1, #44	; 0x2c
 8005332:	fb01 f303 	mul.w	r3, r1, r3
 8005336:	4413      	add	r3, r2
 8005338:	3360      	adds	r3, #96	; 0x60
 800533a:	2205      	movs	r2, #5
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e0b5      	b.n	80054ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	212c      	movs	r1, #44	; 0x2c
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	3361      	adds	r3, #97	; 0x61
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b06      	cmp	r3, #6
 8005352:	d009      	beq.n	8005368 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	3361      	adds	r3, #97	; 0x61
 8005362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005364:	2b08      	cmp	r3, #8
 8005366:	d150      	bne.n	800540a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	212c      	movs	r1, #44	; 0x2c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	335c      	adds	r3, #92	; 0x5c
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	202c      	movs	r0, #44	; 0x2c
 8005380:	fb00 f303 	mul.w	r3, r0, r3
 8005384:	440b      	add	r3, r1
 8005386:	335c      	adds	r3, #92	; 0x5c
 8005388:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	212c      	movs	r1, #44	; 0x2c
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	4413      	add	r3, r2
 8005396:	335c      	adds	r3, #92	; 0x5c
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d912      	bls.n	80053c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	212c      	movs	r1, #44	; 0x2c
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	4413      	add	r3, r2
 80053aa:	335c      	adds	r3, #92	; 0x5c
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	212c      	movs	r1, #44	; 0x2c
 80053b6:	fb01 f303 	mul.w	r3, r1, r3
 80053ba:	4413      	add	r3, r2
 80053bc:	3360      	adds	r3, #96	; 0x60
 80053be:	2204      	movs	r2, #4
 80053c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053c2:	e073      	b.n	80054ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	212c      	movs	r1, #44	; 0x2c
 80053ca:	fb01 f303 	mul.w	r3, r1, r3
 80053ce:	4413      	add	r3, r2
 80053d0:	3360      	adds	r3, #96	; 0x60
 80053d2:	2202      	movs	r2, #2
 80053d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005402:	461a      	mov	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005408:	e050      	b.n	80054ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	212c      	movs	r1, #44	; 0x2c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	3361      	adds	r3, #97	; 0x61
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d122      	bne.n	8005464 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	212c      	movs	r1, #44	; 0x2c
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	4413      	add	r3, r2
 800542a:	3360      	adds	r3, #96	; 0x60
 800542c:	2202      	movs	r2, #2
 800542e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	4413      	add	r3, r2
 8005438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005446:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800544e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	4413      	add	r3, r2
 8005458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e023      	b.n	80054ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	3361      	adds	r3, #97	; 0x61
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b07      	cmp	r3, #7
 8005476:	d119      	bne.n	80054ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	335c      	adds	r3, #92	; 0x5c
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	202c      	movs	r0, #44	; 0x2c
 8005490:	fb00 f303 	mul.w	r3, r0, r3
 8005494:	440b      	add	r3, r1
 8005496:	335c      	adds	r3, #92	; 0x5c
 8005498:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	212c      	movs	r1, #44	; 0x2c
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	3360      	adds	r3, #96	; 0x60
 80054a8:	2204      	movs	r2, #4
 80054aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b8:	461a      	mov	r2, r3
 80054ba:	2302      	movs	r3, #2
 80054bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	b2d9      	uxtb	r1, r3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	202c      	movs	r0, #44	; 0x2c
 80054c8:	fb00 f303 	mul.w	r3, r0, r3
 80054cc:	4413      	add	r3, r2
 80054ce:	3360      	adds	r3, #96	; 0x60
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f00b fbe7 	bl	8010ca8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80054da:	e061      	b.n	80055a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b10      	cmp	r3, #16
 80054f0:	d156      	bne.n	80055a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	212c      	movs	r1, #44	; 0x2c
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	333f      	adds	r3, #63	; 0x3f
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d111      	bne.n	800552a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	335c      	adds	r3, #92	; 0x5c
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	4611      	mov	r1, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f005 fe33 	bl	800b18e <USB_HC_Halt>
 8005528:	e031      	b.n	800558e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	212c      	movs	r1, #44	; 0x2c
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	333f      	adds	r3, #63	; 0x3f
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	212c      	movs	r1, #44	; 0x2c
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	4413      	add	r3, r2
 800554a:	333f      	adds	r3, #63	; 0x3f
 800554c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800554e:	2b02      	cmp	r3, #2
 8005550:	d11d      	bne.n	800558e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	212c      	movs	r1, #44	; 0x2c
 8005558:	fb01 f303 	mul.w	r3, r1, r3
 800555c:	4413      	add	r3, r2
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d110      	bne.n	800558e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	212c      	movs	r1, #44	; 0x2c
 8005572:	fb01 f303 	mul.w	r3, r1, r3
 8005576:	4413      	add	r3, r2
 8005578:	3361      	adds	r3, #97	; 0x61
 800557a:	2203      	movs	r2, #3
 800557c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	4611      	mov	r1, r2
 8005588:	4618      	mov	r0, r3
 800558a:	f005 fe00 	bl	800b18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	461a      	mov	r2, r3
 800559c:	2310      	movs	r3, #16
 800559e:	6093      	str	r3, [r2, #8]
}
 80055a0:	bf00      	nop
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d11a      	bne.n	800560e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e4:	461a      	mov	r2, r3
 80055e6:	2304      	movs	r3, #4
 80055e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	212c      	movs	r1, #44	; 0x2c
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	4413      	add	r3, r2
 80055f6:	3361      	adds	r3, #97	; 0x61
 80055f8:	2206      	movs	r2, #6
 80055fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f005 fdc1 	bl	800b18e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800560c:	e331      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	4413      	add	r3, r2
 8005616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b20      	cmp	r3, #32
 8005622:	d12e      	bne.n	8005682 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005630:	461a      	mov	r2, r3
 8005632:	2320      	movs	r3, #32
 8005634:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	212c      	movs	r1, #44	; 0x2c
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	333d      	adds	r3, #61	; 0x3d
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	2b01      	cmp	r3, #1
 8005648:	f040 8313 	bne.w	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	212c      	movs	r1, #44	; 0x2c
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	333d      	adds	r3, #61	; 0x3d
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	212c      	movs	r1, #44	; 0x2c
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	4413      	add	r3, r2
 800566a:	3360      	adds	r3, #96	; 0x60
 800566c:	2202      	movs	r2, #2
 800566e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	b2d2      	uxtb	r2, r2
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f005 fd87 	bl	800b18e <USB_HC_Halt>
}
 8005680:	e2f7      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	4413      	add	r3, r2
 800568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005698:	d112      	bne.n	80056c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a6:	461a      	mov	r2, r3
 80056a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f005 fd68 	bl	800b18e <USB_HC_Halt>
}
 80056be:	e2d8      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d140      	bne.n	8005758 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	212c      	movs	r1, #44	; 0x2c
 80056dc:	fb01 f303 	mul.w	r3, r1, r3
 80056e0:	4413      	add	r3, r2
 80056e2:	335c      	adds	r3, #92	; 0x5c
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d111      	bne.n	8005722 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	212c      	movs	r1, #44	; 0x2c
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	333d      	adds	r3, #61	; 0x3d
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571c:	461a      	mov	r2, r3
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	4413      	add	r3, r2
 800572a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572e:	461a      	mov	r2, r3
 8005730:	2301      	movs	r3, #1
 8005732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	212c      	movs	r1, #44	; 0x2c
 800573a:	fb01 f303 	mul.w	r3, r1, r3
 800573e:	4413      	add	r3, r2
 8005740:	3361      	adds	r3, #97	; 0x61
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f005 fd1c 	bl	800b18e <USB_HC_Halt>
}
 8005756:	e28c      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b40      	cmp	r3, #64	; 0x40
 800576c:	d12c      	bne.n	80057c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	212c      	movs	r1, #44	; 0x2c
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	4413      	add	r3, r2
 800577a:	3361      	adds	r3, #97	; 0x61
 800577c:	2204      	movs	r2, #4
 800577e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	212c      	movs	r1, #44	; 0x2c
 8005786:	fb01 f303 	mul.w	r3, r1, r3
 800578a:	4413      	add	r3, r2
 800578c:	333d      	adds	r3, #61	; 0x3d
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	335c      	adds	r3, #92	; 0x5c
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f005 fced 	bl	800b18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c0:	461a      	mov	r2, r3
 80057c2:	2340      	movs	r3, #64	; 0x40
 80057c4:	6093      	str	r3, [r2, #8]
}
 80057c6:	e254      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b08      	cmp	r3, #8
 80057dc:	d11a      	bne.n	8005814 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	461a      	mov	r2, r3
 80057ec:	2308      	movs	r3, #8
 80057ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	212c      	movs	r1, #44	; 0x2c
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	3361      	adds	r3, #97	; 0x61
 80057fe:	2205      	movs	r2, #5
 8005800:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f005 fcbe 	bl	800b18e <USB_HC_Halt>
}
 8005812:	e22e      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b10      	cmp	r3, #16
 8005828:	d140      	bne.n	80058ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	212c      	movs	r1, #44	; 0x2c
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	335c      	adds	r3, #92	; 0x5c
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	212c      	movs	r1, #44	; 0x2c
 8005842:	fb01 f303 	mul.w	r3, r1, r3
 8005846:	4413      	add	r3, r2
 8005848:	3361      	adds	r3, #97	; 0x61
 800584a:	2203      	movs	r2, #3
 800584c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	212c      	movs	r1, #44	; 0x2c
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	333d      	adds	r3, #61	; 0x3d
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d112      	bne.n	8005888 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	212c      	movs	r1, #44	; 0x2c
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	4413      	add	r3, r2
 800586e:	333c      	adds	r3, #60	; 0x3c
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d108      	bne.n	8005888 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	212c      	movs	r1, #44	; 0x2c
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	333d      	adds	r3, #61	; 0x3d
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f005 fc7b 	bl	800b18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a4:	461a      	mov	r2, r3
 80058a6:	2310      	movs	r3, #16
 80058a8:	6093      	str	r3, [r2, #8]
}
 80058aa:	e1e2      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058be:	2b80      	cmp	r3, #128	; 0x80
 80058c0:	d164      	bne.n	800598c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d111      	bne.n	80058ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	212c      	movs	r1, #44	; 0x2c
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	3361      	adds	r3, #97	; 0x61
 80058d8:	2206      	movs	r2, #6
 80058da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f005 fc51 	bl	800b18e <USB_HC_Halt>
 80058ec:	e044      	b.n	8005978 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	212c      	movs	r1, #44	; 0x2c
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	335c      	adds	r3, #92	; 0x5c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	202c      	movs	r0, #44	; 0x2c
 8005906:	fb00 f303 	mul.w	r3, r0, r3
 800590a:	440b      	add	r3, r1
 800590c:	335c      	adds	r3, #92	; 0x5c
 800590e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	212c      	movs	r1, #44	; 0x2c
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	4413      	add	r3, r2
 800591c:	335c      	adds	r3, #92	; 0x5c
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d920      	bls.n	8005966 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	212c      	movs	r1, #44	; 0x2c
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	4413      	add	r3, r2
 8005930:	335c      	adds	r3, #92	; 0x5c
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	212c      	movs	r1, #44	; 0x2c
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	4413      	add	r3, r2
 8005942:	3360      	adds	r3, #96	; 0x60
 8005944:	2204      	movs	r2, #4
 8005946:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	b2d9      	uxtb	r1, r3
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	202c      	movs	r0, #44	; 0x2c
 8005952:	fb00 f303 	mul.w	r3, r0, r3
 8005956:	4413      	add	r3, r2
 8005958:	3360      	adds	r3, #96	; 0x60
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f00b f9a2 	bl	8010ca8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005964:	e008      	b.n	8005978 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	212c      	movs	r1, #44	; 0x2c
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	4413      	add	r3, r2
 8005972:	3360      	adds	r3, #96	; 0x60
 8005974:	2202      	movs	r2, #2
 8005976:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	461a      	mov	r2, r3
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	6093      	str	r3, [r2, #8]
}
 800598a:	e172      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	015a      	lsls	r2, r3, #5
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	4413      	add	r3, r2
 8005994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a2:	d11b      	bne.n	80059dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	212c      	movs	r1, #44	; 0x2c
 80059aa:	fb01 f303 	mul.w	r3, r1, r3
 80059ae:	4413      	add	r3, r2
 80059b0:	3361      	adds	r3, #97	; 0x61
 80059b2:	2208      	movs	r2, #8
 80059b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f005 fbe4 	bl	800b18e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d2:	461a      	mov	r2, r3
 80059d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d8:	6093      	str	r3, [r2, #8]
}
 80059da:	e14a      	b.n	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	f040 813f 	bne.w	8005c72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	212c      	movs	r1, #44	; 0x2c
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	4413      	add	r3, r2
 8005a00:	3361      	adds	r3, #97	; 0x61
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d17d      	bne.n	8005b04 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	212c      	movs	r1, #44	; 0x2c
 8005a0e:	fb01 f303 	mul.w	r3, r1, r3
 8005a12:	4413      	add	r3, r2
 8005a14:	3360      	adds	r3, #96	; 0x60
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	212c      	movs	r1, #44	; 0x2c
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	4413      	add	r3, r2
 8005a26:	333f      	adds	r3, #63	; 0x3f
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d00a      	beq.n	8005a44 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	212c      	movs	r1, #44	; 0x2c
 8005a34:	fb01 f303 	mul.w	r3, r1, r3
 8005a38:	4413      	add	r3, r2
 8005a3a:	333f      	adds	r3, #63	; 0x3f
 8005a3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	f040 8100 	bne.w	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d113      	bne.n	8005a74 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	212c      	movs	r1, #44	; 0x2c
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	3355      	adds	r3, #85	; 0x55
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f083 0301 	eor.w	r3, r3, #1
 8005a60:	b2d8      	uxtb	r0, r3
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	212c      	movs	r1, #44	; 0x2c
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3355      	adds	r3, #85	; 0x55
 8005a70:	4602      	mov	r2, r0
 8005a72:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f040 80e3 	bne.w	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	212c      	movs	r1, #44	; 0x2c
 8005a84:	fb01 f303 	mul.w	r3, r1, r3
 8005a88:	4413      	add	r3, r2
 8005a8a:	334c      	adds	r3, #76	; 0x4c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80d8 	beq.w	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	212c      	movs	r1, #44	; 0x2c
 8005a9a:	fb01 f303 	mul.w	r3, r1, r3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	334c      	adds	r3, #76	; 0x4c
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	202c      	movs	r0, #44	; 0x2c
 8005aaa:	fb00 f202 	mul.w	r2, r0, r2
 8005aae:	440a      	add	r2, r1
 8005ab0:	3240      	adds	r2, #64	; 0x40
 8005ab2:	8812      	ldrh	r2, [r2, #0]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	202c      	movs	r0, #44	; 0x2c
 8005abe:	fb00 f202 	mul.w	r2, r0, r2
 8005ac2:	440a      	add	r2, r1
 8005ac4:	3240      	adds	r2, #64	; 0x40
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80b5 	beq.w	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	212c      	movs	r1, #44	; 0x2c
 8005ae0:	fb01 f303 	mul.w	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3355      	adds	r3, #85	; 0x55
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f083 0301 	eor.w	r3, r3, #1
 8005aee:	b2d8      	uxtb	r0, r3
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	3355      	adds	r3, #85	; 0x55
 8005afe:	4602      	mov	r2, r0
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e09f      	b.n	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	212c      	movs	r1, #44	; 0x2c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3361      	adds	r3, #97	; 0x61
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d109      	bne.n	8005b2c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	212c      	movs	r1, #44	; 0x2c
 8005b1e:	fb01 f303 	mul.w	r3, r1, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	3360      	adds	r3, #96	; 0x60
 8005b26:	2202      	movs	r2, #2
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e08b      	b.n	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	212c      	movs	r1, #44	; 0x2c
 8005b32:	fb01 f303 	mul.w	r3, r1, r3
 8005b36:	4413      	add	r3, r2
 8005b38:	3361      	adds	r3, #97	; 0x61
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d109      	bne.n	8005b54 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	212c      	movs	r1, #44	; 0x2c
 8005b46:	fb01 f303 	mul.w	r3, r1, r3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	3360      	adds	r3, #96	; 0x60
 8005b4e:	2202      	movs	r2, #2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e077      	b.n	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	212c      	movs	r1, #44	; 0x2c
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	3361      	adds	r3, #97	; 0x61
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b05      	cmp	r3, #5
 8005b66:	d109      	bne.n	8005b7c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	212c      	movs	r1, #44	; 0x2c
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	4413      	add	r3, r2
 8005b74:	3360      	adds	r3, #96	; 0x60
 8005b76:	2205      	movs	r2, #5
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	e063      	b.n	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	212c      	movs	r1, #44	; 0x2c
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	3361      	adds	r3, #97	; 0x61
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d009      	beq.n	8005ba4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	212c      	movs	r1, #44	; 0x2c
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3361      	adds	r3, #97	; 0x61
 8005b9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d14f      	bne.n	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	212c      	movs	r1, #44	; 0x2c
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	335c      	adds	r3, #92	; 0x5c
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	202c      	movs	r0, #44	; 0x2c
 8005bbc:	fb00 f303 	mul.w	r3, r0, r3
 8005bc0:	440b      	add	r3, r1
 8005bc2:	335c      	adds	r3, #92	; 0x5c
 8005bc4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	212c      	movs	r1, #44	; 0x2c
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	335c      	adds	r3, #92	; 0x5c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d912      	bls.n	8005c00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	212c      	movs	r1, #44	; 0x2c
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	335c      	adds	r3, #92	; 0x5c
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3360      	adds	r3, #96	; 0x60
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e021      	b.n	8005c44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	212c      	movs	r1, #44	; 0x2c
 8005c06:	fb01 f303 	mul.w	r3, r1, r3
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3360      	adds	r3, #96	; 0x60
 8005c0e:	2202      	movs	r2, #2
 8005c10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3e:	461a      	mov	r2, r3
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c50:	461a      	mov	r2, r3
 8005c52:	2302      	movs	r3, #2
 8005c54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	b2d9      	uxtb	r1, r3
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	202c      	movs	r0, #44	; 0x2c
 8005c60:	fb00 f303 	mul.w	r3, r0, r3
 8005c64:	4413      	add	r3, r2
 8005c66:	3360      	adds	r3, #96	; 0x60
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f00b f81b 	bl	8010ca8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c72:	bf00      	nop
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b08a      	sub	sp, #40	; 0x28
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	0c5b      	lsrs	r3, r3, #17
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d004      	beq.n	8005cc0 <HCD_RXQLVL_IRQHandler+0x46>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	f000 80a9 	beq.w	8005e10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005cbe:	e0aa      	b.n	8005e16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 80a6 	beq.w	8005e14 <HCD_RXQLVL_IRQHandler+0x19a>
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	212c      	movs	r1, #44	; 0x2c
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3344      	adds	r3, #68	; 0x44
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 809b 	beq.w	8005e14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	212c      	movs	r1, #44	; 0x2c
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	4413      	add	r3, r2
 8005cea:	3350      	adds	r3, #80	; 0x50
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	441a      	add	r2, r3
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	202c      	movs	r0, #44	; 0x2c
 8005cf8:	fb00 f303 	mul.w	r3, r0, r3
 8005cfc:	440b      	add	r3, r1
 8005cfe:	334c      	adds	r3, #76	; 0x4c
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d87a      	bhi.n	8005dfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	212c      	movs	r1, #44	; 0x2c
 8005d10:	fb01 f303 	mul.w	r3, r1, r3
 8005d14:	4413      	add	r3, r2
 8005d16:	3344      	adds	r3, #68	; 0x44
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f004 fd8c 	bl	800a83c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	212c      	movs	r1, #44	; 0x2c
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	3344      	adds	r3, #68	; 0x44
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	441a      	add	r2, r3
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	202c      	movs	r0, #44	; 0x2c
 8005d3e:	fb00 f303 	mul.w	r3, r0, r3
 8005d42:	440b      	add	r3, r1
 8005d44:	3344      	adds	r3, #68	; 0x44
 8005d46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	212c      	movs	r1, #44	; 0x2c
 8005d4e:	fb01 f303 	mul.w	r3, r1, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	3350      	adds	r3, #80	; 0x50
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	441a      	add	r2, r3
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	202c      	movs	r0, #44	; 0x2c
 8005d62:	fb00 f303 	mul.w	r3, r0, r3
 8005d66:	440b      	add	r3, r1
 8005d68:	3350      	adds	r3, #80	; 0x50
 8005d6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	0cdb      	lsrs	r3, r3, #19
 8005d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	212c      	movs	r1, #44	; 0x2c
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3340      	adds	r3, #64	; 0x40
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d13c      	bne.n	8005e14 <HCD_RXQLVL_IRQHandler+0x19a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d039      	beq.n	8005e14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	212c      	movs	r1, #44	; 0x2c
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	4413      	add	r3, r2
 8005dde:	3354      	adds	r3, #84	; 0x54
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	f083 0301 	eor.w	r3, r3, #1
 8005de6:	b2d8      	uxtb	r0, r3
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	212c      	movs	r1, #44	; 0x2c
 8005dee:	fb01 f303 	mul.w	r3, r1, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	3354      	adds	r3, #84	; 0x54
 8005df6:	4602      	mov	r2, r0
 8005df8:	701a      	strb	r2, [r3, #0]
      break;
 8005dfa:	e00b      	b.n	8005e14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	212c      	movs	r1, #44	; 0x2c
 8005e02:	fb01 f303 	mul.w	r3, r1, r3
 8005e06:	4413      	add	r3, r2
 8005e08:	3360      	adds	r3, #96	; 0x60
 8005e0a:	2204      	movs	r2, #4
 8005e0c:	701a      	strb	r2, [r3, #0]
      break;
 8005e0e:	e001      	b.n	8005e14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005e14:	bf00      	nop
  }
}
 8005e16:	bf00      	nop
 8005e18:	3728      	adds	r7, #40	; 0x28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b086      	sub	sp, #24
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d10b      	bne.n	8005e6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f00a ff05 	bl	8010c70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f043 0302 	orr.w	r3, r3, #2
 8005e6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d132      	bne.n	8005ede <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f043 0308 	orr.w	r3, r3, #8
 8005e7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d126      	bne.n	8005ed8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d113      	bne.n	8005eba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e9c:	d106      	bne.n	8005eac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f004 fe37 	bl	800ab18 <USB_InitFSLSPClkSel>
 8005eaa:	e011      	b.n	8005ed0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f004 fe30 	bl	800ab18 <USB_InitFSLSPClkSel>
 8005eb8:	e00a      	b.n	8005ed0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d106      	bne.n	8005ed0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005ece:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f00a fef7 	bl	8010cc4 <HAL_HCD_PortEnabled_Callback>
 8005ed6:	e002      	b.n	8005ede <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f00a ff01 	bl	8010ce0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d103      	bne.n	8005ef0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6013      	str	r3, [r2, #0]
}
 8005efc:	bf00      	nop
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e12b      	b.n	800616e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fd f8f6 	bl	800311c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2224      	movs	r2, #36	; 0x24
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f68:	f001 fd7a 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8005f6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	4a81      	ldr	r2, [pc, #516]	; (8006178 <HAL_I2C_Init+0x274>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d807      	bhi.n	8005f88 <HAL_I2C_Init+0x84>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a80      	ldr	r2, [pc, #512]	; (800617c <HAL_I2C_Init+0x278>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	bf94      	ite	ls
 8005f80:	2301      	movls	r3, #1
 8005f82:	2300      	movhi	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	e006      	b.n	8005f96 <HAL_I2C_Init+0x92>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4a7d      	ldr	r2, [pc, #500]	; (8006180 <HAL_I2C_Init+0x27c>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	bf94      	ite	ls
 8005f90:	2301      	movls	r3, #1
 8005f92:	2300      	movhi	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e0e7      	b.n	800616e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a78      	ldr	r2, [pc, #480]	; (8006184 <HAL_I2C_Init+0x280>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	0c9b      	lsrs	r3, r3, #18
 8005fa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4a6a      	ldr	r2, [pc, #424]	; (8006178 <HAL_I2C_Init+0x274>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d802      	bhi.n	8005fd8 <HAL_I2C_Init+0xd4>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	e009      	b.n	8005fec <HAL_I2C_Init+0xe8>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
 8005fe2:	4a69      	ldr	r2, [pc, #420]	; (8006188 <HAL_I2C_Init+0x284>)
 8005fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe8:	099b      	lsrs	r3, r3, #6
 8005fea:	3301      	adds	r3, #1
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6812      	ldr	r2, [r2, #0]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ffe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	495c      	ldr	r1, [pc, #368]	; (8006178 <HAL_I2C_Init+0x274>)
 8006008:	428b      	cmp	r3, r1
 800600a:	d819      	bhi.n	8006040 <HAL_I2C_Init+0x13c>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	1e59      	subs	r1, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	fbb1 f3f3 	udiv	r3, r1, r3
 800601a:	1c59      	adds	r1, r3, #1
 800601c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006020:	400b      	ands	r3, r1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_I2C_Init+0x138>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1e59      	subs	r1, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	fbb1 f3f3 	udiv	r3, r1, r3
 8006034:	3301      	adds	r3, #1
 8006036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603a:	e051      	b.n	80060e0 <HAL_I2C_Init+0x1dc>
 800603c:	2304      	movs	r3, #4
 800603e:	e04f      	b.n	80060e0 <HAL_I2C_Init+0x1dc>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d111      	bne.n	800606c <HAL_I2C_Init+0x168>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	1e58      	subs	r0, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6859      	ldr	r1, [r3, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	440b      	add	r3, r1
 8006056:	fbb0 f3f3 	udiv	r3, r0, r3
 800605a:	3301      	adds	r3, #1
 800605c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf0c      	ite	eq
 8006064:	2301      	moveq	r3, #1
 8006066:	2300      	movne	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e012      	b.n	8006092 <HAL_I2C_Init+0x18e>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	1e58      	subs	r0, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6859      	ldr	r1, [r3, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	440b      	add	r3, r1
 800607a:	0099      	lsls	r1, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006082:	3301      	adds	r3, #1
 8006084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006088:	2b00      	cmp	r3, #0
 800608a:	bf0c      	ite	eq
 800608c:	2301      	moveq	r3, #1
 800608e:	2300      	movne	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_Init+0x196>
 8006096:	2301      	movs	r3, #1
 8006098:	e022      	b.n	80060e0 <HAL_I2C_Init+0x1dc>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10e      	bne.n	80060c0 <HAL_I2C_Init+0x1bc>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	1e58      	subs	r0, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6859      	ldr	r1, [r3, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	440b      	add	r3, r1
 80060b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b4:	3301      	adds	r3, #1
 80060b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060be:	e00f      	b.n	80060e0 <HAL_I2C_Init+0x1dc>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	1e58      	subs	r0, r3, #1
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6859      	ldr	r1, [r3, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	0099      	lsls	r1, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80060d6:	3301      	adds	r3, #1
 80060d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	6809      	ldr	r1, [r1, #0]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800610e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6911      	ldr	r1, [r2, #16]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68d2      	ldr	r2, [r2, #12]
 800611a:	4311      	orrs	r1, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6812      	ldr	r2, [r2, #0]
 8006120:	430b      	orrs	r3, r1
 8006122:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	695a      	ldr	r2, [r3, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	431a      	orrs	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	000186a0 	.word	0x000186a0
 800617c:	001e847f 	.word	0x001e847f
 8006180:	003d08ff 	.word	0x003d08ff
 8006184:	431bde83 	.word	0x431bde83
 8006188:	10624dd3 	.word	0x10624dd3

0800618c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	461a      	mov	r2, r3
 8006198:	460b      	mov	r3, r1
 800619a:	817b      	strh	r3, [r7, #10]
 800619c:	4613      	mov	r3, r2
 800619e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061a0:	f7fd fbd6 	bl	8003950 <HAL_GetTick>
 80061a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	f040 80e0 	bne.w	8006374 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	2319      	movs	r3, #25
 80061ba:	2201      	movs	r2, #1
 80061bc:	4970      	ldr	r1, [pc, #448]	; (8006380 <HAL_I2C_Master_Transmit+0x1f4>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fd86 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
 80061cc:	e0d3      	b.n	8006376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_I2C_Master_Transmit+0x50>
 80061d8:	2302      	movs	r3, #2
 80061da:	e0cc      	b.n	8006376 <HAL_I2C_Master_Transmit+0x1ea>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d007      	beq.n	8006202 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006210:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2221      	movs	r2, #33	; 0x21
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2210      	movs	r2, #16
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	893a      	ldrh	r2, [r7, #8]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4a50      	ldr	r2, [pc, #320]	; (8006384 <HAL_I2C_Master_Transmit+0x1f8>)
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006244:	8979      	ldrh	r1, [r7, #10]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	6a3a      	ldr	r2, [r7, #32]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fbf0 	bl	8006a30 <I2C_MasterRequestWrite>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e08d      	b.n	8006376 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006270:	e066      	b.n	8006340 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	6a39      	ldr	r1, [r7, #32]
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fe00 	bl	8006e7c <I2C_WaitOnTXEFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	2b04      	cmp	r3, #4
 8006288:	d107      	bne.n	800629a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e06b      	b.n	8006376 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d11b      	bne.n	8006314 <HAL_I2C_Master_Transmit+0x188>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d017      	beq.n	8006314 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	781a      	ldrb	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	6a39      	ldr	r1, [r7, #32]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 fdf0 	bl	8006efe <I2C_WaitOnBTFFlagUntilTimeout>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00d      	beq.n	8006340 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	2b04      	cmp	r3, #4
 800632a:	d107      	bne.n	800633c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e01a      	b.n	8006376 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006344:	2b00      	cmp	r3, #0
 8006346:	d194      	bne.n	8006272 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2220      	movs	r2, #32
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	00100002 	.word	0x00100002
 8006384:	ffff0000 	.word	0xffff0000

08006388 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	; 0x30
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	461a      	mov	r2, r3
 8006394:	460b      	mov	r3, r1
 8006396:	817b      	strh	r3, [r7, #10]
 8006398:	4613      	mov	r3, r2
 800639a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800639c:	f7fd fad8 	bl	8003950 <HAL_GetTick>
 80063a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	f040 820b 	bne.w	80067c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	2319      	movs	r3, #25
 80063b6:	2201      	movs	r2, #1
 80063b8:	497c      	ldr	r1, [pc, #496]	; (80065ac <HAL_I2C_Master_Receive+0x224>)
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fc88 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80063c6:	2302      	movs	r3, #2
 80063c8:	e1fe      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_I2C_Master_Receive+0x50>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e1f7      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d007      	beq.n	80063fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800640c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2222      	movs	r2, #34	; 0x22
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2210      	movs	r2, #16
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	893a      	ldrh	r2, [r7, #8]
 800642e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a5c      	ldr	r2, [pc, #368]	; (80065b0 <HAL_I2C_Master_Receive+0x228>)
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006440:	8979      	ldrh	r1, [r7, #10]
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fb74 	bl	8006b34 <I2C_MasterRequestRead>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e1b8      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d113      	bne.n	8006486 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645e:	2300      	movs	r3, #0
 8006460:	623b      	str	r3, [r7, #32]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	623b      	str	r3, [r7, #32]
 8006472:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e18c      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648a:	2b01      	cmp	r3, #1
 800648c:	d11b      	bne.n	80064c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649e:	2300      	movs	r3, #0
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	61fb      	str	r3, [r7, #28]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	e16c      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d11b      	bne.n	8006506 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	e14c      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006516:	2300      	movs	r3, #0
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800652c:	e138      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	2b03      	cmp	r3, #3
 8006534:	f200 80f1 	bhi.w	800671a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653c:	2b01      	cmp	r3, #1
 800653e:	d123      	bne.n	8006588 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fd1b 	bl	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e139      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006586:	e10b      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658c:	2b02      	cmp	r3, #2
 800658e:	d14e      	bne.n	800662e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	2200      	movs	r2, #0
 8006598:	4906      	ldr	r1, [pc, #24]	; (80065b4 <HAL_I2C_Master_Receive+0x22c>)
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fb98 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e10e      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
 80065aa:	bf00      	nop
 80065ac:	00100002 	.word	0x00100002
 80065b0:	ffff0000 	.word	0xffff0000
 80065b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e4:	3b01      	subs	r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800662c:	e0b8      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	2200      	movs	r2, #0
 8006636:	4966      	ldr	r1, [pc, #408]	; (80067d0 <HAL_I2C_Master_Receive+0x448>)
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 fb49 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0bf      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2200      	movs	r2, #0
 8006692:	494f      	ldr	r1, [pc, #316]	; (80067d0 <HAL_I2C_Master_Receive+0x448>)
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fb1b 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e091      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	1c5a      	adds	r2, r3, #1
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	3b01      	subs	r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	3b01      	subs	r3, #1
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006702:	3b01      	subs	r3, #1
 8006704:	b29a      	uxth	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006718:	e042      	b.n	80067a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800671a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fc2e 	bl	8006f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e04c      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	691a      	ldr	r2, [r3, #16]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b04      	cmp	r3, #4
 800676c:	d118      	bne.n	80067a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006796:	b29b      	uxth	r3, r3
 8006798:	3b01      	subs	r3, #1
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f47f aec2 	bne.w	800652e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	00010004 	.word	0x00010004

080067d4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08a      	sub	sp, #40	; 0x28
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	460b      	mov	r3, r1
 80067e2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80067e4:	f7fd f8b4 	bl	8003950 <HAL_GetTick>
 80067e8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b20      	cmp	r3, #32
 80067f8:	f040 8111 	bne.w	8006a1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2319      	movs	r3, #25
 8006802:	2201      	movs	r2, #1
 8006804:	4988      	ldr	r1, [pc, #544]	; (8006a28 <HAL_I2C_IsDeviceReady+0x254>)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fa62 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006812:	2302      	movs	r3, #2
 8006814:	e104      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_I2C_IsDeviceReady+0x50>
 8006820:	2302      	movs	r3, #2
 8006822:	e0fd      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b01      	cmp	r3, #1
 8006838:	d007      	beq.n	800684a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0201 	orr.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2224      	movs	r2, #36	; 0x24
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4a70      	ldr	r2, [pc, #448]	; (8006a2c <HAL_I2C_IsDeviceReady+0x258>)
 800686c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800687c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2200      	movs	r2, #0
 8006886:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fa20 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a4:	d103      	bne.n	80068ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e0b6      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80068c2:	f7fd f845 	bl	8003950 <HAL_GetTick>
 80068c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	bf0c      	ite	eq
 80068d6:	2301      	moveq	r3, #1
 80068d8:	2300      	movne	r3, #0
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80068f6:	e025      	b.n	8006944 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068f8:	f7fd f82a 	bl	8003950 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <HAL_I2C_IsDeviceReady+0x13a>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d103      	bne.n	8006916 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	22a0      	movs	r2, #160	; 0xa0
 8006912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2ba0      	cmp	r3, #160	; 0xa0
 800694e:	d005      	beq.n	800695c <HAL_I2C_IsDeviceReady+0x188>
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <HAL_I2C_IsDeviceReady+0x188>
 8006956:	7dbb      	ldrb	r3, [r7, #22]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0cd      	beq.n	80068f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d129      	bne.n	80069c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006980:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2319      	movs	r3, #25
 800699e:	2201      	movs	r2, #1
 80069a0:	4921      	ldr	r1, [pc, #132]	; (8006a28 <HAL_I2C_IsDeviceReady+0x254>)
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f994 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e036      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e02c      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2319      	movs	r3, #25
 80069e6:	2201      	movs	r2, #1
 80069e8:	490f      	ldr	r1, [pc, #60]	; (8006a28 <HAL_I2C_IsDeviceReady+0x254>)
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f970 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e012      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	3301      	adds	r3, #1
 80069fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	f4ff af32 	bcc.w	800686e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006a1e:	2302      	movs	r3, #2
  }
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3720      	adds	r7, #32
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	00100002 	.word	0x00100002
 8006a2c:	ffff0000 	.word	0xffff0000

08006a30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d006      	beq.n	8006a5a <I2C_MasterRequestWrite+0x2a>
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d003      	beq.n	8006a5a <I2C_MasterRequestWrite+0x2a>
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a58:	d108      	bne.n	8006a6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e00b      	b.n	8006a84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	2b12      	cmp	r3, #18
 8006a72:	d107      	bne.n	8006a84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f91d 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aaa:	d103      	bne.n	8006ab4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e035      	b.n	8006b24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ac0:	d108      	bne.n	8006ad4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ad0:	611a      	str	r2, [r3, #16]
 8006ad2:	e01b      	b.n	8006b0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ad4:	897b      	ldrh	r3, [r7, #10]
 8006ad6:	11db      	asrs	r3, r3, #7
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0306 	and.w	r3, r3, #6
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	f063 030f 	orn	r3, r3, #15
 8006ae4:	b2da      	uxtb	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	490e      	ldr	r1, [pc, #56]	; (8006b2c <I2C_MasterRequestWrite+0xfc>)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f943 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e010      	b.n	8006b24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b02:	897b      	ldrh	r3, [r7, #10]
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4907      	ldr	r1, [pc, #28]	; (8006b30 <I2C_MasterRequestWrite+0x100>)
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f933 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	00010008 	.word	0x00010008
 8006b30:	00010002 	.word	0x00010002

08006b34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	607a      	str	r2, [r7, #4]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	460b      	mov	r3, r1
 8006b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d006      	beq.n	8006b6e <I2C_MasterRequestRead+0x3a>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d003      	beq.n	8006b6e <I2C_MasterRequestRead+0x3a>
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b6c:	d108      	bne.n	8006b80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	e00b      	b.n	8006b98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	2b11      	cmp	r3, #17
 8006b86:	d107      	bne.n	8006b98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f893 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00d      	beq.n	8006bcc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bbe:	d103      	bne.n	8006bc8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e079      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd4:	d108      	bne.n	8006be8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bd6:	897b      	ldrh	r3, [r7, #10]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	b2da      	uxtb	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	611a      	str	r2, [r3, #16]
 8006be6:	e05f      	b.n	8006ca8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006be8:	897b      	ldrh	r3, [r7, #10]
 8006bea:	11db      	asrs	r3, r3, #7
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0306 	and.w	r3, r3, #6
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	f063 030f 	orn	r3, r3, #15
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	4930      	ldr	r1, [pc, #192]	; (8006cc8 <I2C_MasterRequestRead+0x194>)
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 f8b9 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e054      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	4929      	ldr	r1, [pc, #164]	; (8006ccc <I2C_MasterRequestRead+0x198>)
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 f8a9 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e044      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f831 	bl	8006cd0 <I2C_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c82:	d103      	bne.n	8006c8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e017      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c90:	897b      	ldrh	r3, [r7, #10]
 8006c92:	11db      	asrs	r3, r3, #7
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f003 0306 	and.w	r3, r3, #6
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f063 030e 	orn	r3, r3, #14
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4907      	ldr	r1, [pc, #28]	; (8006ccc <I2C_MasterRequestRead+0x198>)
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f000 f865 	bl	8006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	00010008 	.word	0x00010008
 8006ccc:	00010002 	.word	0x00010002

08006cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce0:	e025      	b.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ce8:	d021      	beq.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cea:	f7fc fe31 	bl	8003950 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d302      	bcc.n	8006d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d116      	bne.n	8006d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e023      	b.n	8006d76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	0c1b      	lsrs	r3, r3, #16
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10d      	bne.n	8006d54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	43da      	mvns	r2, r3
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4013      	ands	r3, r2
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf0c      	ite	eq
 8006d4a:	2301      	moveq	r3, #1
 8006d4c:	2300      	movne	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	e00c      	b.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	43da      	mvns	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4013      	ands	r3, r2
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bf0c      	ite	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	2300      	movne	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	79fb      	ldrb	r3, [r7, #7]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d0b6      	beq.n	8006ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d8c:	e051      	b.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9c:	d123      	bne.n	8006de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006db6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f043 0204 	orr.w	r2, r3, #4
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e046      	b.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dec:	d021      	beq.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fc fdaf 	bl	8003950 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d116      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	f043 0220 	orr.w	r2, r3, #32
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e020      	b.n	8006e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10c      	bne.n	8006e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	43da      	mvns	r2, r3
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	4013      	ands	r3, r2
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	e00b      	b.n	8006e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	43da      	mvns	r2, r3
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	4013      	ands	r3, r2
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bf14      	ite	ne
 8006e68:	2301      	movne	r3, #1
 8006e6a:	2300      	moveq	r3, #0
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d18d      	bne.n	8006d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e88:	e02d      	b.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f8ce 	bl	800702c <I2C_IsAcknowledgeFailed>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e02d      	b.n	8006ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea0:	d021      	beq.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fc fd55 	bl	8003950 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d116      	bne.n	8006ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f043 0220 	orr.w	r2, r3, #32
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e007      	b.n	8006ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d1ca      	bne.n	8006e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	60f8      	str	r0, [r7, #12]
 8006f06:	60b9      	str	r1, [r7, #8]
 8006f08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f0a:	e02d      	b.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f88d 	bl	800702c <I2C_IsAcknowledgeFailed>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e02d      	b.n	8006f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f22:	d021      	beq.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f24:	f7fc fd14 	bl	8003950 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d302      	bcc.n	8006f3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d116      	bne.n	8006f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	f043 0220 	orr.w	r2, r3, #32
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e007      	b.n	8006f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695b      	ldr	r3, [r3, #20]
 8006f6e:	f003 0304 	and.w	r3, r3, #4
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d1ca      	bne.n	8006f0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f8c:	e042      	b.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d119      	bne.n	8006fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f06f 0210 	mvn.w	r2, #16
 8006fa4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e029      	b.n	8007024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd0:	f7fc fcbe 	bl	8003950 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d302      	bcc.n	8006fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d116      	bne.n	8007014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f043 0220 	orr.w	r2, r3, #32
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e007      	b.n	8007024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d1b5      	bne.n	8006f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800703e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007042:	d11b      	bne.n	800707c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800704c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	f043 0204 	orr.w	r2, r3, #4
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b20      	cmp	r3, #32
 800709e:	d129      	bne.n	80070f4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2224      	movs	r2, #36	; 0x24
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 0201 	bic.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0210 	bic.w	r2, r2, #16
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f042 0201 	orr.w	r2, r2, #1
 80070e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	e000      	b.n	80070f6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80070f4:	2302      	movs	r3, #2
  }
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b20      	cmp	r3, #32
 800711a:	d12a      	bne.n	8007172 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2224      	movs	r2, #36	; 0x24
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0201 	bic.w	r2, r2, #1
 8007132:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800713c:	89fb      	ldrh	r3, [r7, #14]
 800713e:	f023 030f 	bic.w	r3, r3, #15
 8007142:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	b29a      	uxth	r2, r3
 8007148:	89fb      	ldrh	r3, [r7, #14]
 800714a:	4313      	orrs	r3, r2
 800714c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	89fa      	ldrh	r2, [r7, #14]
 8007154:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	e000      	b.n	8007174 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007172:	2302      	movs	r3, #2
  }
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e267      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d075      	beq.n	800728a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800719e:	4b88      	ldr	r3, [pc, #544]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 030c 	and.w	r3, r3, #12
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d00c      	beq.n	80071c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071aa:	4b85      	ldr	r3, [pc, #532]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d112      	bne.n	80071dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071b6:	4b82      	ldr	r3, [pc, #520]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071c2:	d10b      	bne.n	80071dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071c4:	4b7e      	ldr	r3, [pc, #504]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d05b      	beq.n	8007288 <HAL_RCC_OscConfig+0x108>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d157      	bne.n	8007288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e242      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071e4:	d106      	bne.n	80071f4 <HAL_RCC_OscConfig+0x74>
 80071e6:	4b76      	ldr	r3, [pc, #472]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a75      	ldr	r2, [pc, #468]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80071ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e01d      	b.n	8007230 <HAL_RCC_OscConfig+0xb0>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071fc:	d10c      	bne.n	8007218 <HAL_RCC_OscConfig+0x98>
 80071fe:	4b70      	ldr	r3, [pc, #448]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6f      	ldr	r2, [pc, #444]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	4b6d      	ldr	r3, [pc, #436]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a6c      	ldr	r2, [pc, #432]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	e00b      	b.n	8007230 <HAL_RCC_OscConfig+0xb0>
 8007218:	4b69      	ldr	r3, [pc, #420]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a68      	ldr	r2, [pc, #416]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800721e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	4b66      	ldr	r3, [pc, #408]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a65      	ldr	r2, [pc, #404]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800722a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800722e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d013      	beq.n	8007260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007238:	f7fc fb8a 	bl	8003950 <HAL_GetTick>
 800723c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007240:	f7fc fb86 	bl	8003950 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b64      	cmp	r3, #100	; 0x64
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e207      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007252:	4b5b      	ldr	r3, [pc, #364]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0xc0>
 800725e:	e014      	b.n	800728a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007260:	f7fc fb76 	bl	8003950 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007268:	f7fc fb72 	bl	8003950 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b64      	cmp	r3, #100	; 0x64
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e1f3      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800727a:	4b51      	ldr	r3, [pc, #324]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0xe8>
 8007286:	e000      	b.n	800728a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d063      	beq.n	800735e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007296:	4b4a      	ldr	r3, [pc, #296]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 030c 	and.w	r3, r3, #12
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072a2:	4b47      	ldr	r3, [pc, #284]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	d11c      	bne.n	80072e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072ae:	4b44      	ldr	r3, [pc, #272]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ba:	4b41      	ldr	r3, [pc, #260]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_RCC_OscConfig+0x152>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d001      	beq.n	80072d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e1c7      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d2:	4b3b      	ldr	r3, [pc, #236]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4937      	ldr	r1, [pc, #220]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072e6:	e03a      	b.n	800735e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d020      	beq.n	8007332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072f0:	4b34      	ldr	r3, [pc, #208]	; (80073c4 <HAL_RCC_OscConfig+0x244>)
 80072f2:	2201      	movs	r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fc fb2b 	bl	8003950 <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072fc:	e008      	b.n	8007310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072fe:	f7fc fb27 	bl	8003950 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e1a8      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007310:	4b2b      	ldr	r3, [pc, #172]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800731c:	4b28      	ldr	r3, [pc, #160]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	4925      	ldr	r1, [pc, #148]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
 8007330:	e015      	b.n	800735e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <HAL_RCC_OscConfig+0x244>)
 8007334:	2200      	movs	r2, #0
 8007336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007338:	f7fc fb0a 	bl	8003950 <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007340:	f7fc fb06 	bl	8003950 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e187      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007352:	4b1b      	ldr	r3, [pc, #108]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f0      	bne.n	8007340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	2b00      	cmp	r3, #0
 8007368:	d036      	beq.n	80073d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <HAL_RCC_OscConfig+0x248>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007378:	f7fc faea 	bl	8003950 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007380:	f7fc fae6 	bl	8003950 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e167      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007392:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <HAL_RCC_OscConfig+0x240>)
 8007394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007396:	f003 0302 	and.w	r3, r3, #2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d0f0      	beq.n	8007380 <HAL_RCC_OscConfig+0x200>
 800739e:	e01b      	b.n	80073d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <HAL_RCC_OscConfig+0x248>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073a6:	f7fc fad3 	bl	8003950 <HAL_GetTick>
 80073aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ac:	e00e      	b.n	80073cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073ae:	f7fc facf 	bl	8003950 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d907      	bls.n	80073cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	e150      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
 80073c0:	40023800 	.word	0x40023800
 80073c4:	42470000 	.word	0x42470000
 80073c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073cc:	4b88      	ldr	r3, [pc, #544]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80073ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ea      	bne.n	80073ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8097 	beq.w	8007514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073e6:	2300      	movs	r3, #0
 80073e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ea:	4b81      	ldr	r3, [pc, #516]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073f6:	2300      	movs	r3, #0
 80073f8:	60bb      	str	r3, [r7, #8]
 80073fa:	4b7d      	ldr	r3, [pc, #500]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	4a7c      	ldr	r2, [pc, #496]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007404:	6413      	str	r3, [r2, #64]	; 0x40
 8007406:	4b7a      	ldr	r3, [pc, #488]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800740e:	60bb      	str	r3, [r7, #8]
 8007410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007416:	4b77      	ldr	r3, [pc, #476]	; (80075f4 <HAL_RCC_OscConfig+0x474>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d118      	bne.n	8007454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007422:	4b74      	ldr	r3, [pc, #464]	; (80075f4 <HAL_RCC_OscConfig+0x474>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a73      	ldr	r2, [pc, #460]	; (80075f4 <HAL_RCC_OscConfig+0x474>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800742c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800742e:	f7fc fa8f 	bl	8003950 <HAL_GetTick>
 8007432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007434:	e008      	b.n	8007448 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007436:	f7fc fa8b 	bl	8003950 <HAL_GetTick>
 800743a:	4602      	mov	r2, r0
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	1ad3      	subs	r3, r2, r3
 8007440:	2b02      	cmp	r3, #2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e10c      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007448:	4b6a      	ldr	r3, [pc, #424]	; (80075f4 <HAL_RCC_OscConfig+0x474>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0f0      	beq.n	8007436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d106      	bne.n	800746a <HAL_RCC_OscConfig+0x2ea>
 800745c:	4b64      	ldr	r3, [pc, #400]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 800745e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007460:	4a63      	ldr	r2, [pc, #396]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007462:	f043 0301 	orr.w	r3, r3, #1
 8007466:	6713      	str	r3, [r2, #112]	; 0x70
 8007468:	e01c      	b.n	80074a4 <HAL_RCC_OscConfig+0x324>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	2b05      	cmp	r3, #5
 8007470:	d10c      	bne.n	800748c <HAL_RCC_OscConfig+0x30c>
 8007472:	4b5f      	ldr	r3, [pc, #380]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	4a5e      	ldr	r2, [pc, #376]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007478:	f043 0304 	orr.w	r3, r3, #4
 800747c:	6713      	str	r3, [r2, #112]	; 0x70
 800747e:	4b5c      	ldr	r3, [pc, #368]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	4a5b      	ldr	r2, [pc, #364]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6713      	str	r3, [r2, #112]	; 0x70
 800748a:	e00b      	b.n	80074a4 <HAL_RCC_OscConfig+0x324>
 800748c:	4b58      	ldr	r3, [pc, #352]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	4a57      	ldr	r2, [pc, #348]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007492:	f023 0301 	bic.w	r3, r3, #1
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
 8007498:	4b55      	ldr	r3, [pc, #340]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 800749a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749c:	4a54      	ldr	r2, [pc, #336]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 800749e:	f023 0304 	bic.w	r3, r3, #4
 80074a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d015      	beq.n	80074d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ac:	f7fc fa50 	bl	8003950 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b2:	e00a      	b.n	80074ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074b4:	f7fc fa4c 	bl	8003950 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e0cb      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ca:	4b49      	ldr	r3, [pc, #292]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0ee      	beq.n	80074b4 <HAL_RCC_OscConfig+0x334>
 80074d6:	e014      	b.n	8007502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074d8:	f7fc fa3a 	bl	8003950 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074de:	e00a      	b.n	80074f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e0:	f7fc fa36 	bl	8003950 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0b5      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074f6:	4b3e      	ldr	r3, [pc, #248]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1ee      	bne.n	80074e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d105      	bne.n	8007514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007508:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 800750e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 80a1 	beq.w	8007660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800751e:	4b34      	ldr	r3, [pc, #208]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 030c 	and.w	r3, r3, #12
 8007526:	2b08      	cmp	r3, #8
 8007528:	d05c      	beq.n	80075e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d141      	bne.n	80075b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007532:	4b31      	ldr	r3, [pc, #196]	; (80075f8 <HAL_RCC_OscConfig+0x478>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007538:	f7fc fa0a 	bl	8003950 <HAL_GetTick>
 800753c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800753e:	e008      	b.n	8007552 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007540:	f7fc fa06 	bl	8003950 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d901      	bls.n	8007552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e087      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007552:	4b27      	ldr	r3, [pc, #156]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	019b      	lsls	r3, r3, #6
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	085b      	lsrs	r3, r3, #1
 8007576:	3b01      	subs	r3, #1
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	431a      	orrs	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	061b      	lsls	r3, r3, #24
 8007582:	491b      	ldr	r1, [pc, #108]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 8007584:	4313      	orrs	r3, r2
 8007586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007588:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <HAL_RCC_OscConfig+0x478>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758e:	f7fc f9df 	bl	8003950 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007596:	f7fc f9db 	bl	8003950 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e05c      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075a8:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0f0      	beq.n	8007596 <HAL_RCC_OscConfig+0x416>
 80075b4:	e054      	b.n	8007660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <HAL_RCC_OscConfig+0x478>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075bc:	f7fc f9c8 	bl	8003950 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c4:	f7fc f9c4 	bl	8003950 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e045      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075d6:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <HAL_RCC_OscConfig+0x470>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f0      	bne.n	80075c4 <HAL_RCC_OscConfig+0x444>
 80075e2:	e03d      	b.n	8007660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d107      	bne.n	80075fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	e038      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
 80075f0:	40023800 	.word	0x40023800
 80075f4:	40007000 	.word	0x40007000
 80075f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075fc:	4b1b      	ldr	r3, [pc, #108]	; (800766c <HAL_RCC_OscConfig+0x4ec>)
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d028      	beq.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007614:	429a      	cmp	r2, r3
 8007616:	d121      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007622:	429a      	cmp	r2, r3
 8007624:	d11a      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007626:	68fa      	ldr	r2, [r7, #12]
 8007628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800762c:	4013      	ands	r3, r2
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007634:	4293      	cmp	r3, r2
 8007636:	d111      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	3b01      	subs	r3, #1
 8007646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007648:	429a      	cmp	r2, r3
 800764a:	d107      	bne.n	800765c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007658:	429a      	cmp	r2, r3
 800765a:	d001      	beq.n	8007660 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	40023800 	.word	0x40023800

08007670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e0cc      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007684:	4b68      	ldr	r3, [pc, #416]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	429a      	cmp	r2, r3
 8007690:	d90c      	bls.n	80076ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007692:	4b65      	ldr	r3, [pc, #404]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800769a:	4b63      	ldr	r3, [pc, #396]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 030f 	and.w	r3, r3, #15
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d001      	beq.n	80076ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e0b8      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d020      	beq.n	80076fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d005      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076c4:	4b59      	ldr	r3, [pc, #356]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	4a58      	ldr	r2, [pc, #352]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0308 	and.w	r3, r3, #8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076dc:	4b53      	ldr	r3, [pc, #332]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	4a52      	ldr	r2, [pc, #328]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80076e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076e8:	4b50      	ldr	r3, [pc, #320]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	494d      	ldr	r1, [pc, #308]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	2b00      	cmp	r3, #0
 8007704:	d044      	beq.n	8007790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d107      	bne.n	800771e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770e:	4b47      	ldr	r3, [pc, #284]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d119      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e07f      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2b02      	cmp	r3, #2
 8007724:	d003      	beq.n	800772e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800772a:	2b03      	cmp	r3, #3
 800772c:	d107      	bne.n	800773e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772e:	4b3f      	ldr	r3, [pc, #252]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e06f      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800773e:	4b3b      	ldr	r3, [pc, #236]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e067      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800774e:	4b37      	ldr	r3, [pc, #220]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f023 0203 	bic.w	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4934      	ldr	r1, [pc, #208]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 800775c:	4313      	orrs	r3, r2
 800775e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007760:	f7fc f8f6 	bl	8003950 <HAL_GetTick>
 8007764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007766:	e00a      	b.n	800777e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007768:	f7fc f8f2 	bl	8003950 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	f241 3288 	movw	r2, #5000	; 0x1388
 8007776:	4293      	cmp	r3, r2
 8007778:	d901      	bls.n	800777e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e04f      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777e:	4b2b      	ldr	r3, [pc, #172]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 020c 	and.w	r2, r3, #12
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	429a      	cmp	r2, r3
 800778e:	d1eb      	bne.n	8007768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007790:	4b25      	ldr	r3, [pc, #148]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	429a      	cmp	r2, r3
 800779c:	d20c      	bcs.n	80077b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800779e:	4b22      	ldr	r3, [pc, #136]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <HAL_RCC_ClockConfig+0x1b8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d001      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e032      	b.n	800781e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d008      	beq.n	80077d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077c4:	4b19      	ldr	r3, [pc, #100]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	4916      	ldr	r1, [pc, #88]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077e2:	4b12      	ldr	r3, [pc, #72]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	490e      	ldr	r1, [pc, #56]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077f6:	f000 f821 	bl	800783c <HAL_RCC_GetSysClockFreq>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	091b      	lsrs	r3, r3, #4
 8007802:	f003 030f 	and.w	r3, r3, #15
 8007806:	490a      	ldr	r1, [pc, #40]	; (8007830 <HAL_RCC_ClockConfig+0x1c0>)
 8007808:	5ccb      	ldrb	r3, [r1, r3]
 800780a:	fa22 f303 	lsr.w	r3, r2, r3
 800780e:	4a09      	ldr	r2, [pc, #36]	; (8007834 <HAL_RCC_ClockConfig+0x1c4>)
 8007810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <HAL_RCC_ClockConfig+0x1c8>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7fc f856 	bl	80038c8 <HAL_InitTick>

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	40023c00 	.word	0x40023c00
 800782c:	40023800 	.word	0x40023800
 8007830:	080132a8 	.word	0x080132a8
 8007834:	200000e8 	.word	0x200000e8
 8007838:	200000f0 	.word	0x200000f0

0800783c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800783c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007840:	b094      	sub	sp, #80	; 0x50
 8007842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	647b      	str	r3, [r7, #68]	; 0x44
 8007848:	2300      	movs	r3, #0
 800784a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800784c:	2300      	movs	r3, #0
 800784e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007854:	4b79      	ldr	r3, [pc, #484]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 030c 	and.w	r3, r3, #12
 800785c:	2b08      	cmp	r3, #8
 800785e:	d00d      	beq.n	800787c <HAL_RCC_GetSysClockFreq+0x40>
 8007860:	2b08      	cmp	r3, #8
 8007862:	f200 80e1 	bhi.w	8007a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x34>
 800786a:	2b04      	cmp	r3, #4
 800786c:	d003      	beq.n	8007876 <HAL_RCC_GetSysClockFreq+0x3a>
 800786e:	e0db      	b.n	8007a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007870:	4b73      	ldr	r3, [pc, #460]	; (8007a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8007872:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007874:	e0db      	b.n	8007a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007876:	4b73      	ldr	r3, [pc, #460]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8007878:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800787a:	e0d8      	b.n	8007a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800787c:	4b6f      	ldr	r3, [pc, #444]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007884:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007886:	4b6d      	ldr	r3, [pc, #436]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d063      	beq.n	800795a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007892:	4b6a      	ldr	r3, [pc, #424]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	2200      	movs	r2, #0
 800789a:	63bb      	str	r3, [r7, #56]	; 0x38
 800789c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a4:	633b      	str	r3, [r7, #48]	; 0x30
 80078a6:	2300      	movs	r3, #0
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
 80078aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078ae:	4622      	mov	r2, r4
 80078b0:	462b      	mov	r3, r5
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f04f 0100 	mov.w	r1, #0
 80078ba:	0159      	lsls	r1, r3, #5
 80078bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078c0:	0150      	lsls	r0, r2, #5
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4621      	mov	r1, r4
 80078c8:	1a51      	subs	r1, r2, r1
 80078ca:	6139      	str	r1, [r7, #16]
 80078cc:	4629      	mov	r1, r5
 80078ce:	eb63 0301 	sbc.w	r3, r3, r1
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078e0:	4659      	mov	r1, fp
 80078e2:	018b      	lsls	r3, r1, #6
 80078e4:	4651      	mov	r1, sl
 80078e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078ea:	4651      	mov	r1, sl
 80078ec:	018a      	lsls	r2, r1, #6
 80078ee:	4651      	mov	r1, sl
 80078f0:	ebb2 0801 	subs.w	r8, r2, r1
 80078f4:	4659      	mov	r1, fp
 80078f6:	eb63 0901 	sbc.w	r9, r3, r1
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800790a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800790e:	4690      	mov	r8, r2
 8007910:	4699      	mov	r9, r3
 8007912:	4623      	mov	r3, r4
 8007914:	eb18 0303 	adds.w	r3, r8, r3
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	462b      	mov	r3, r5
 800791c:	eb49 0303 	adc.w	r3, r9, r3
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	f04f 0200 	mov.w	r2, #0
 8007926:	f04f 0300 	mov.w	r3, #0
 800792a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800792e:	4629      	mov	r1, r5
 8007930:	024b      	lsls	r3, r1, #9
 8007932:	4621      	mov	r1, r4
 8007934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007938:	4621      	mov	r1, r4
 800793a:	024a      	lsls	r2, r1, #9
 800793c:	4610      	mov	r0, r2
 800793e:	4619      	mov	r1, r3
 8007940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007942:	2200      	movs	r2, #0
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28
 8007946:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800794c:	f7f8 fca0 	bl	8000290 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4613      	mov	r3, r2
 8007956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007958:	e058      	b.n	8007a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800795a:	4b38      	ldr	r3, [pc, #224]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	099b      	lsrs	r3, r3, #6
 8007960:	2200      	movs	r2, #0
 8007962:	4618      	mov	r0, r3
 8007964:	4611      	mov	r1, r2
 8007966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800796a:	623b      	str	r3, [r7, #32]
 800796c:	2300      	movs	r3, #0
 800796e:	627b      	str	r3, [r7, #36]	; 0x24
 8007970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007974:	4642      	mov	r2, r8
 8007976:	464b      	mov	r3, r9
 8007978:	f04f 0000 	mov.w	r0, #0
 800797c:	f04f 0100 	mov.w	r1, #0
 8007980:	0159      	lsls	r1, r3, #5
 8007982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007986:	0150      	lsls	r0, r2, #5
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4641      	mov	r1, r8
 800798e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007992:	4649      	mov	r1, r9
 8007994:	eb63 0b01 	sbc.w	fp, r3, r1
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079ac:	ebb2 040a 	subs.w	r4, r2, sl
 80079b0:	eb63 050b 	sbc.w	r5, r3, fp
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	00eb      	lsls	r3, r5, #3
 80079be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079c2:	00e2      	lsls	r2, r4, #3
 80079c4:	4614      	mov	r4, r2
 80079c6:	461d      	mov	r5, r3
 80079c8:	4643      	mov	r3, r8
 80079ca:	18e3      	adds	r3, r4, r3
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	464b      	mov	r3, r9
 80079d0:	eb45 0303 	adc.w	r3, r5, r3
 80079d4:	607b      	str	r3, [r7, #4]
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	f04f 0300 	mov.w	r3, #0
 80079de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80079e2:	4629      	mov	r1, r5
 80079e4:	028b      	lsls	r3, r1, #10
 80079e6:	4621      	mov	r1, r4
 80079e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80079ec:	4621      	mov	r1, r4
 80079ee:	028a      	lsls	r2, r1, #10
 80079f0:	4610      	mov	r0, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f6:	2200      	movs	r2, #0
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	61fa      	str	r2, [r7, #28]
 80079fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a00:	f7f8 fc46 	bl	8000290 <__aeabi_uldivmod>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4613      	mov	r3, r2
 8007a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	3301      	adds	r3, #1
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a26:	e002      	b.n	8007a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3750      	adds	r7, #80	; 0x50
 8007a34:	46bd      	mov	sp, r7
 8007a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	00f42400 	.word	0x00f42400
 8007a44:	007a1200 	.word	0x007a1200

08007a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	; (8007a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	200000e8 	.word	0x200000e8

08007a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a64:	f7ff fff0 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	0a9b      	lsrs	r3, r3, #10
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	4903      	ldr	r1, [pc, #12]	; (8007a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a76:	5ccb      	ldrb	r3, [r1, r3]
 8007a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40023800 	.word	0x40023800
 8007a84:	080132b8 	.word	0x080132b8

08007a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a8c:	f7ff ffdc 	bl	8007a48 <HAL_RCC_GetHCLKFreq>
 8007a90:	4602      	mov	r2, r0
 8007a92:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	0b5b      	lsrs	r3, r3, #13
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	4903      	ldr	r1, [pc, #12]	; (8007aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a9e:	5ccb      	ldrb	r3, [r1, r3]
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	080132b8 	.word	0x080132b8

08007ab0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e025      	b.n	8007b10 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d106      	bne.n	8007ade <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fb fd53 	bl	8003584 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4619      	mov	r1, r3
 8007af0:	4610      	mov	r0, r2
 8007af2:	f002 fc6b 	bl	800a3cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	461a      	mov	r2, r3
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	f002 fcc0 	bl	800a486 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e07b      	b.n	8007c22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d108      	bne.n	8007b44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b3a:	d009      	beq.n	8007b50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	61da      	str	r2, [r3, #28]
 8007b42:	e005      	b.n	8007b50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fb fb40 	bl	80031f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f003 0302 	and.w	r3, r3, #2
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	695b      	ldr	r3, [r3, #20]
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd4:	ea42 0103 	orr.w	r1, r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	0c1b      	lsrs	r3, r3, #16
 8007bee:	f003 0104 	and.w	r1, r3, #4
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	f003 0210 	and.w	r2, r3, #16
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b088      	sub	sp, #32
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_SPI_Transmit+0x22>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e126      	b.n	8007e9a <HAL_SPI_Transmit+0x270>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c54:	f7fb fe7c 	bl	8003950 <HAL_GetTick>
 8007c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d002      	beq.n	8007c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c6a:	2302      	movs	r3, #2
 8007c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c6e:	e10b      	b.n	8007e88 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_SPI_Transmit+0x52>
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d102      	bne.n	8007c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c80:	e102      	b.n	8007e88 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2203      	movs	r2, #3
 8007c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	88fa      	ldrh	r2, [r7, #6]
 8007c9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	88fa      	ldrh	r2, [r7, #6]
 8007ca0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	d10f      	bne.n	8007cea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ce8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d007      	beq.n	8007d08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d10:	d14b      	bne.n	8007daa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <HAL_SPI_Transmit+0xf6>
 8007d1a:	8afb      	ldrh	r3, [r7, #22]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d13e      	bne.n	8007d9e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	881a      	ldrh	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	1c9a      	adds	r2, r3, #2
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d44:	e02b      	b.n	8007d9e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d112      	bne.n	8007d7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	881a      	ldrh	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d64:	1c9a      	adds	r2, r3, #2
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	86da      	strh	r2, [r3, #54]	; 0x36
 8007d78:	e011      	b.n	8007d9e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d7a:	f7fb fde9 	bl	8003950 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d803      	bhi.n	8007d92 <HAL_SPI_Transmit+0x168>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d90:	d102      	bne.n	8007d98 <HAL_SPI_Transmit+0x16e>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d9c:	e074      	b.n	8007e88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1ce      	bne.n	8007d46 <HAL_SPI_Transmit+0x11c>
 8007da8:	e04c      	b.n	8007e44 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <HAL_SPI_Transmit+0x18e>
 8007db2:	8afb      	ldrh	r3, [r7, #22]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d140      	bne.n	8007e3a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	7812      	ldrb	r2, [r2, #0]
 8007dc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007dde:	e02c      	b.n	8007e3a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d113      	bne.n	8007e16 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	7812      	ldrb	r2, [r2, #0]
 8007dfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e14:	e011      	b.n	8007e3a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e16:	f7fb fd9b 	bl	8003950 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	683a      	ldr	r2, [r7, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d803      	bhi.n	8007e2e <HAL_SPI_Transmit+0x204>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e2c:	d102      	bne.n	8007e34 <HAL_SPI_Transmit+0x20a>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d102      	bne.n	8007e3a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e38:	e026      	b.n	8007e88 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1cd      	bne.n	8007de0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fbcb 	bl	80085e4 <SPI_EndRxTxTransaction>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10a      	bne.n	8007e78 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e62:	2300      	movs	r3, #0
 8007e64:	613b      	str	r3, [r7, #16]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	77fb      	strb	r3, [r7, #31]
 8007e84:	e000      	b.n	8007e88 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007e86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b088      	sub	sp, #32
 8007ea6:	af02      	add	r7, sp, #8
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ebe:	d112      	bne.n	8007ee6 <HAL_SPI_Receive+0x44>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10e      	bne.n	8007ee6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2204      	movs	r2, #4
 8007ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007ed0:	88fa      	ldrh	r2, [r7, #6]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f8f1 	bl	80080c4 <HAL_SPI_TransmitReceive>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	e0ea      	b.n	80080bc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_SPI_Receive+0x52>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e0e3      	b.n	80080bc <HAL_SPI_Receive+0x21a>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007efc:	f7fb fd28 	bl	8003950 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d002      	beq.n	8007f14 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f12:	e0ca      	b.n	80080aa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <HAL_SPI_Receive+0x7e>
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f24:	e0c1      	b.n	80080aa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	88fa      	ldrh	r2, [r7, #6]
 8007f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f6c:	d10f      	bne.n	8007f8e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f98:	2b40      	cmp	r3, #64	; 0x40
 8007f9a:	d007      	beq.n	8007fac <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007faa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d162      	bne.n	800807a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007fb4:	e02e      	b.n	8008014 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d115      	bne.n	8007ff0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f103 020c 	add.w	r2, r3, #12
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	7812      	ldrb	r2, [r2, #0]
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	1c5a      	adds	r2, r3, #1
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007fee:	e011      	b.n	8008014 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ff0:	f7fb fcae 	bl	8003950 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d803      	bhi.n	8008008 <HAL_SPI_Receive+0x166>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008006:	d102      	bne.n	800800e <HAL_SPI_Receive+0x16c>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008012:	e04a      	b.n	80080aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1cb      	bne.n	8007fb6 <HAL_SPI_Receive+0x114>
 800801e:	e031      	b.n	8008084 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b01      	cmp	r3, #1
 800802c:	d113      	bne.n	8008056 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	b292      	uxth	r2, r2
 800803a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	1c9a      	adds	r2, r3, #2
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800804a:	b29b      	uxth	r3, r3
 800804c:	3b01      	subs	r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008054:	e011      	b.n	800807a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008056:	f7fb fc7b 	bl	8003950 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d803      	bhi.n	800806e <HAL_SPI_Receive+0x1cc>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800806c:	d102      	bne.n	8008074 <HAL_SPI_Receive+0x1d2>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008078:	e017      	b.n	80080aa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807e:	b29b      	uxth	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1cd      	bne.n	8008020 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fa45 	bl	8008518 <SPI_EndRxTransaction>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2220      	movs	r2, #32
 8008098:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	75fb      	strb	r3, [r7, #23]
 80080a6:	e000      	b.n	80080aa <HAL_SPI_Receive+0x208>
  }

error :
 80080a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08c      	sub	sp, #48	; 0x30
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080d2:	2301      	movs	r3, #1
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d101      	bne.n	80080ea <HAL_SPI_TransmitReceive+0x26>
 80080e6:	2302      	movs	r3, #2
 80080e8:	e18a      	b.n	8008400 <HAL_SPI_TransmitReceive+0x33c>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080f2:	f7fb fc2d 	bl	8003950 <HAL_GetTick>
 80080f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008108:	887b      	ldrh	r3, [r7, #2]
 800810a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800810c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008110:	2b01      	cmp	r3, #1
 8008112:	d00f      	beq.n	8008134 <HAL_SPI_TransmitReceive+0x70>
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800811a:	d107      	bne.n	800812c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d103      	bne.n	800812c <HAL_SPI_TransmitReceive+0x68>
 8008124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008128:	2b04      	cmp	r3, #4
 800812a:	d003      	beq.n	8008134 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800812c:	2302      	movs	r3, #2
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008132:	e15b      	b.n	80083ec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_SPI_TransmitReceive+0x82>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <HAL_SPI_TransmitReceive+0x82>
 8008140:	887b      	ldrh	r3, [r7, #2]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d103      	bne.n	800814e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800814c:	e14e      	b.n	80083ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b04      	cmp	r3, #4
 8008158:	d003      	beq.n	8008162 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2205      	movs	r2, #5
 800815e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	887a      	ldrh	r2, [r7, #2]
 8008172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	887a      	ldrh	r2, [r7, #2]
 8008178:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	887a      	ldrh	r2, [r7, #2]
 8008184:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	887a      	ldrh	r2, [r7, #2]
 800818a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d007      	beq.n	80081b6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081be:	d178      	bne.n	80082b2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <HAL_SPI_TransmitReceive+0x10a>
 80081c8:	8b7b      	ldrh	r3, [r7, #26]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d166      	bne.n	800829c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	1c9a      	adds	r2, r3, #2
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081f2:	e053      	b.n	800829c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d11b      	bne.n	800823a <HAL_SPI_TransmitReceive+0x176>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d016      	beq.n	800823a <HAL_SPI_TransmitReceive+0x176>
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	2b01      	cmp	r3, #1
 8008210:	d113      	bne.n	800823a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	881a      	ldrh	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	1c9a      	adds	r2, r3, #2
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b29a      	uxth	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b01      	cmp	r3, #1
 8008246:	d119      	bne.n	800827c <HAL_SPI_TransmitReceive+0x1b8>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800824c:	b29b      	uxth	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d014      	beq.n	800827c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	b292      	uxth	r2, r2
 800825e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008264:	1c9a      	adds	r2, r3, #2
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008278:	2301      	movs	r3, #1
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800827c:	f7fb fb68 	bl	8003950 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008288:	429a      	cmp	r2, r3
 800828a:	d807      	bhi.n	800829c <HAL_SPI_TransmitReceive+0x1d8>
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008292:	d003      	beq.n	800829c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800829a:	e0a7      	b.n	80083ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1a6      	bne.n	80081f4 <HAL_SPI_TransmitReceive+0x130>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1a1      	bne.n	80081f4 <HAL_SPI_TransmitReceive+0x130>
 80082b0:	e07c      	b.n	80083ac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_SPI_TransmitReceive+0x1fc>
 80082ba:	8b7b      	ldrh	r3, [r7, #26]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d16b      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	330c      	adds	r3, #12
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082e6:	e057      	b.n	8008398 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d11c      	bne.n	8008330 <HAL_SPI_TransmitReceive+0x26c>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d017      	beq.n	8008330 <HAL_SPI_TransmitReceive+0x26c>
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d114      	bne.n	8008330 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	330c      	adds	r3, #12
 8008310:	7812      	ldrb	r2, [r2, #0]
 8008312:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008322:	b29b      	uxth	r3, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	b29a      	uxth	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800832c:	2300      	movs	r3, #0
 800832e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b01      	cmp	r3, #1
 800833c:	d119      	bne.n	8008372 <HAL_SPI_TransmitReceive+0x2ae>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d014      	beq.n	8008372 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800836e:	2301      	movs	r3, #1
 8008370:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008372:	f7fb faed 	bl	8003950 <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800837e:	429a      	cmp	r2, r3
 8008380:	d803      	bhi.n	800838a <HAL_SPI_TransmitReceive+0x2c6>
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008388:	d102      	bne.n	8008390 <HAL_SPI_TransmitReceive+0x2cc>
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	2b00      	cmp	r3, #0
 800838e:	d103      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008396:	e029      	b.n	80083ec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1a2      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x224>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d19d      	bne.n	80082e8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 f917 	bl	80085e4 <SPI_EndRxTxTransaction>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d006      	beq.n	80083ca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2220      	movs	r2, #32
 80083c6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80083c8:	e010      	b.n	80083ec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083d2:	2300      	movs	r3, #0
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	617b      	str	r3, [r7, #20]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	e000      	b.n	80083ec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80083ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008400:	4618      	mov	r0, r3
 8008402:	3730      	adds	r7, #48	; 0x30
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	4613      	mov	r3, r2
 8008416:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008418:	f7fb fa9a 	bl	8003950 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	4413      	add	r3, r2
 8008426:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008428:	f7fb fa92 	bl	8003950 <HAL_GetTick>
 800842c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800842e:	4b39      	ldr	r3, [pc, #228]	; (8008514 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	015b      	lsls	r3, r3, #5
 8008434:	0d1b      	lsrs	r3, r3, #20
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800843e:	e054      	b.n	80084ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008446:	d050      	beq.n	80084ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008448:	f7fb fa82 	bl	8003950 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	69fa      	ldr	r2, [r7, #28]
 8008454:	429a      	cmp	r2, r3
 8008456:	d902      	bls.n	800845e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d13d      	bne.n	80084da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800846c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008476:	d111      	bne.n	800849c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008480:	d004      	beq.n	800848c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848a:	d107      	bne.n	800849c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800849a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084a4:	d10f      	bne.n	80084c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e017      	b.n	800850a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d101      	bne.n	80084e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	689a      	ldr	r2, [r3, #8]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	4013      	ands	r3, r2
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	bf0c      	ite	eq
 80084fa:	2301      	moveq	r3, #1
 80084fc:	2300      	movne	r3, #0
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	79fb      	ldrb	r3, [r7, #7]
 8008504:	429a      	cmp	r2, r3
 8008506:	d19b      	bne.n	8008440 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	200000e8 	.word	0x200000e8

08008518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af02      	add	r7, sp, #8
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800852c:	d111      	bne.n	8008552 <SPI_EndRxTransaction+0x3a>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008536:	d004      	beq.n	8008542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008540:	d107      	bne.n	8008552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008550:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800855a:	d12a      	bne.n	80085b2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008564:	d012      	beq.n	800858c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2200      	movs	r2, #0
 800856e:	2180      	movs	r1, #128	; 0x80
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff ff49 	bl	8008408 <SPI_WaitFlagStateUntilTimeout>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02d      	beq.n	80085d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008580:	f043 0220 	orr.w	r2, r3, #32
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e026      	b.n	80085da <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2200      	movs	r2, #0
 8008594:	2101      	movs	r1, #1
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff ff36 	bl	8008408 <SPI_WaitFlagStateUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01a      	beq.n	80085d8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	f043 0220 	orr.w	r2, r3, #32
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e013      	b.n	80085da <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2200      	movs	r2, #0
 80085ba:	2101      	movs	r1, #1
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff ff23 	bl	8008408 <SPI_WaitFlagStateUntilTimeout>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e000      	b.n	80085da <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b088      	sub	sp, #32
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085f0:	4b1b      	ldr	r3, [pc, #108]	; (8008660 <SPI_EndRxTxTransaction+0x7c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1b      	ldr	r2, [pc, #108]	; (8008664 <SPI_EndRxTxTransaction+0x80>)
 80085f6:	fba2 2303 	umull	r2, r3, r2, r3
 80085fa:	0d5b      	lsrs	r3, r3, #21
 80085fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008600:	fb02 f303 	mul.w	r3, r2, r3
 8008604:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800860e:	d112      	bne.n	8008636 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2200      	movs	r2, #0
 8008618:	2180      	movs	r1, #128	; 0x80
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f7ff fef4 	bl	8008408 <SPI_WaitFlagStateUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d016      	beq.n	8008654 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	f043 0220 	orr.w	r2, r3, #32
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e00f      	b.n	8008656 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	3b01      	subs	r3, #1
 8008640:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d0f2      	beq.n	8008636 <SPI_EndRxTxTransaction+0x52>
 8008650:	e000      	b.n	8008654 <SPI_EndRxTxTransaction+0x70>
        break;
 8008652:	bf00      	nop
  }

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3718      	adds	r7, #24
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200000e8 	.word	0x200000e8
 8008664:	165e9f81 	.word	0x165e9f81

08008668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e041      	b.n	80086fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d106      	bne.n	8008694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fa fdf6 	bl	8003280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2202      	movs	r2, #2
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4619      	mov	r1, r3
 80086a6:	4610      	mov	r0, r2
 80086a8:	f000 fa10 	bl	8008acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e041      	b.n	800879c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d106      	bne.n	8008732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f839 	bl	80087a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	3304      	adds	r3, #4
 8008742:	4619      	mov	r1, r3
 8008744:	4610      	mov	r0, r2
 8008746:	f000 f9c1 	bl	8008acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e0ae      	b.n	8008934 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b0c      	cmp	r3, #12
 80087e2:	f200 809f 	bhi.w	8008924 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008821 	.word	0x08008821
 80087f0:	08008925 	.word	0x08008925
 80087f4:	08008925 	.word	0x08008925
 80087f8:	08008925 	.word	0x08008925
 80087fc:	08008861 	.word	0x08008861
 8008800:	08008925 	.word	0x08008925
 8008804:	08008925 	.word	0x08008925
 8008808:	08008925 	.word	0x08008925
 800880c:	080088a3 	.word	0x080088a3
 8008810:	08008925 	.word	0x08008925
 8008814:	08008925 	.word	0x08008925
 8008818:	08008925 	.word	0x08008925
 800881c:	080088e3 	.word	0x080088e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f9f0 	bl	8008c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0208 	orr.w	r2, r2, #8
 800883a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0204 	bic.w	r2, r2, #4
 800884a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6999      	ldr	r1, [r3, #24]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691a      	ldr	r2, [r3, #16]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	619a      	str	r2, [r3, #24]
      break;
 800885e:	e064      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 fa40 	bl	8008cec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699a      	ldr	r2, [r3, #24]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800887a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	6999      	ldr	r1, [r3, #24]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	021a      	lsls	r2, r3, #8
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	619a      	str	r2, [r3, #24]
      break;
 80088a0:	e043      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fa95 	bl	8008dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0208 	orr.w	r2, r2, #8
 80088bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0204 	bic.w	r2, r2, #4
 80088cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69d9      	ldr	r1, [r3, #28]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	61da      	str	r2, [r3, #28]
      break;
 80088e0:	e023      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68b9      	ldr	r1, [r7, #8]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 fae9 	bl	8008ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800890c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69d9      	ldr	r1, [r3, #28]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	021a      	lsls	r2, r3, #8
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	61da      	str	r2, [r3, #28]
      break;
 8008922:	e002      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
      break;
 8008928:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008932:	7dfb      	ldrb	r3, [r7, #23]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3718      	adds	r7, #24
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_TIM_ConfigClockSource+0x1c>
 8008954:	2302      	movs	r3, #2
 8008956:	e0b4      	b.n	8008ac2 <HAL_TIM_ConfigClockSource+0x186>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800897e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008990:	d03e      	beq.n	8008a10 <HAL_TIM_ConfigClockSource+0xd4>
 8008992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008996:	f200 8087 	bhi.w	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800899a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899e:	f000 8086 	beq.w	8008aae <HAL_TIM_ConfigClockSource+0x172>
 80089a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a6:	d87f      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089a8:	2b70      	cmp	r3, #112	; 0x70
 80089aa:	d01a      	beq.n	80089e2 <HAL_TIM_ConfigClockSource+0xa6>
 80089ac:	2b70      	cmp	r3, #112	; 0x70
 80089ae:	d87b      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089b0:	2b60      	cmp	r3, #96	; 0x60
 80089b2:	d050      	beq.n	8008a56 <HAL_TIM_ConfigClockSource+0x11a>
 80089b4:	2b60      	cmp	r3, #96	; 0x60
 80089b6:	d877      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089b8:	2b50      	cmp	r3, #80	; 0x50
 80089ba:	d03c      	beq.n	8008a36 <HAL_TIM_ConfigClockSource+0xfa>
 80089bc:	2b50      	cmp	r3, #80	; 0x50
 80089be:	d873      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d058      	beq.n	8008a76 <HAL_TIM_ConfigClockSource+0x13a>
 80089c4:	2b40      	cmp	r3, #64	; 0x40
 80089c6:	d86f      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089c8:	2b30      	cmp	r3, #48	; 0x30
 80089ca:	d064      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x15a>
 80089cc:	2b30      	cmp	r3, #48	; 0x30
 80089ce:	d86b      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d060      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x15a>
 80089d4:	2b20      	cmp	r3, #32
 80089d6:	d867      	bhi.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d05c      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x15a>
 80089dc:	2b10      	cmp	r3, #16
 80089de:	d05a      	beq.n	8008a96 <HAL_TIM_ConfigClockSource+0x15a>
 80089e0:	e062      	b.n	8008aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	6899      	ldr	r1, [r3, #8]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685a      	ldr	r2, [r3, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f000 fb35 	bl	8009060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68ba      	ldr	r2, [r7, #8]
 8008a0c:	609a      	str	r2, [r3, #8]
      break;
 8008a0e:	e04f      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	6899      	ldr	r1, [r3, #8]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f000 fb1e 	bl	8009060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a32:	609a      	str	r2, [r3, #8]
      break;
 8008a34:	e03c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6818      	ldr	r0, [r3, #0]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6859      	ldr	r1, [r3, #4]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	461a      	mov	r2, r3
 8008a44:	f000 fa92 	bl	8008f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2150      	movs	r1, #80	; 0x50
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 faeb 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008a54:	e02c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6818      	ldr	r0, [r3, #0]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	6859      	ldr	r1, [r3, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f000 fab1 	bl	8008fca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2160      	movs	r1, #96	; 0x60
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 fadb 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008a74:	e01c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	6859      	ldr	r1, [r3, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f000 fa72 	bl	8008f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2140      	movs	r1, #64	; 0x40
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 facb 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008a94:	e00c      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	f000 fac2 	bl	800902a <TIM_ITRx_SetConfig>
      break;
 8008aa6:	e003      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8008aac:	e000      	b.n	8008ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a40      	ldr	r2, [pc, #256]	; (8008be0 <TIM_Base_SetConfig+0x114>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <TIM_Base_SetConfig+0x40>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aea:	d00f      	beq.n	8008b0c <TIM_Base_SetConfig+0x40>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a3d      	ldr	r2, [pc, #244]	; (8008be4 <TIM_Base_SetConfig+0x118>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_Base_SetConfig+0x40>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a3c      	ldr	r2, [pc, #240]	; (8008be8 <TIM_Base_SetConfig+0x11c>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_Base_SetConfig+0x40>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a3b      	ldr	r2, [pc, #236]	; (8008bec <TIM_Base_SetConfig+0x120>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_Base_SetConfig+0x40>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a3a      	ldr	r2, [pc, #232]	; (8008bf0 <TIM_Base_SetConfig+0x124>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d108      	bne.n	8008b1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a2f      	ldr	r2, [pc, #188]	; (8008be0 <TIM_Base_SetConfig+0x114>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d02b      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2c:	d027      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a2c      	ldr	r2, [pc, #176]	; (8008be4 <TIM_Base_SetConfig+0x118>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d023      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a2b      	ldr	r2, [pc, #172]	; (8008be8 <TIM_Base_SetConfig+0x11c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d01f      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a2a      	ldr	r2, [pc, #168]	; (8008bec <TIM_Base_SetConfig+0x120>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d01b      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a29      	ldr	r2, [pc, #164]	; (8008bf0 <TIM_Base_SetConfig+0x124>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d017      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a28      	ldr	r2, [pc, #160]	; (8008bf4 <TIM_Base_SetConfig+0x128>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d013      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a27      	ldr	r2, [pc, #156]	; (8008bf8 <TIM_Base_SetConfig+0x12c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d00f      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a26      	ldr	r2, [pc, #152]	; (8008bfc <TIM_Base_SetConfig+0x130>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00b      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a25      	ldr	r2, [pc, #148]	; (8008c00 <TIM_Base_SetConfig+0x134>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d007      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a24      	ldr	r2, [pc, #144]	; (8008c04 <TIM_Base_SetConfig+0x138>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d003      	beq.n	8008b7e <TIM_Base_SetConfig+0xb2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a23      	ldr	r2, [pc, #140]	; (8008c08 <TIM_Base_SetConfig+0x13c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d108      	bne.n	8008b90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	68fa      	ldr	r2, [r7, #12]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a0a      	ldr	r2, [pc, #40]	; (8008be0 <TIM_Base_SetConfig+0x114>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d003      	beq.n	8008bc4 <TIM_Base_SetConfig+0xf8>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a0c      	ldr	r2, [pc, #48]	; (8008bf0 <TIM_Base_SetConfig+0x124>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d103      	bne.n	8008bcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	691a      	ldr	r2, [r3, #16]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	615a      	str	r2, [r3, #20]
}
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800
 8008c00:	40001800 	.word	0x40001800
 8008c04:	40001c00 	.word	0x40001c00
 8008c08:	40002000 	.word	0x40002000

08008c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b087      	sub	sp, #28
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f023 0303 	bic.w	r3, r3, #3
 8008c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f023 0302 	bic.w	r3, r3, #2
 8008c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a20      	ldr	r2, [pc, #128]	; (8008ce4 <TIM_OC1_SetConfig+0xd8>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d003      	beq.n	8008c70 <TIM_OC1_SetConfig+0x64>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ce8 <TIM_OC1_SetConfig+0xdc>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d10c      	bne.n	8008c8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	f023 0308 	bic.w	r3, r3, #8
 8008c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f023 0304 	bic.w	r3, r3, #4
 8008c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a15      	ldr	r2, [pc, #84]	; (8008ce4 <TIM_OC1_SetConfig+0xd8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d003      	beq.n	8008c9a <TIM_OC1_SetConfig+0x8e>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a14      	ldr	r2, [pc, #80]	; (8008ce8 <TIM_OC1_SetConfig+0xdc>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d111      	bne.n	8008cbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	621a      	str	r2, [r3, #32]
}
 8008cd8:	bf00      	nop
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr
 8008ce4:	40010000 	.word	0x40010000
 8008ce8:	40010400 	.word	0x40010400

08008cec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b087      	sub	sp, #28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	f023 0210 	bic.w	r2, r3, #16
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	f023 0320 	bic.w	r3, r3, #32
 8008d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a22      	ldr	r2, [pc, #136]	; (8008dd0 <TIM_OC2_SetConfig+0xe4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_OC2_SetConfig+0x68>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a21      	ldr	r2, [pc, #132]	; (8008dd4 <TIM_OC2_SetConfig+0xe8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d10d      	bne.n	8008d70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a17      	ldr	r2, [pc, #92]	; (8008dd0 <TIM_OC2_SetConfig+0xe4>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_OC2_SetConfig+0x94>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a16      	ldr	r2, [pc, #88]	; (8008dd4 <TIM_OC2_SetConfig+0xe8>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d113      	bne.n	8008da8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	697a      	ldr	r2, [r7, #20]
 8008dc0:	621a      	str	r2, [r3, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f023 0303 	bic.w	r3, r3, #3
 8008e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <TIM_OC3_SetConfig+0xe0>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d003      	beq.n	8008e3e <TIM_OC3_SetConfig+0x66>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <TIM_OC3_SetConfig+0xe4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d10d      	bne.n	8008e5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a16      	ldr	r2, [pc, #88]	; (8008eb8 <TIM_OC3_SetConfig+0xe0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d003      	beq.n	8008e6a <TIM_OC3_SetConfig+0x92>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a15      	ldr	r2, [pc, #84]	; (8008ebc <TIM_OC3_SetConfig+0xe4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d113      	bne.n	8008e92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	621a      	str	r2, [r3, #32]
}
 8008eac:	bf00      	nop
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	40010400 	.word	0x40010400

08008ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	021b      	lsls	r3, r3, #8
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	031b      	lsls	r3, r3, #12
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a12      	ldr	r2, [pc, #72]	; (8008f64 <TIM_OC4_SetConfig+0xa4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d003      	beq.n	8008f28 <TIM_OC4_SetConfig+0x68>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a11      	ldr	r2, [pc, #68]	; (8008f68 <TIM_OC4_SetConfig+0xa8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d109      	bne.n	8008f3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	019b      	lsls	r3, r3, #6
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	621a      	str	r2, [r3, #32]
}
 8008f56:	bf00      	nop
 8008f58:	371c      	adds	r7, #28
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40010400 	.word	0x40010400

08008f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	f023 0201 	bic.w	r2, r3, #1
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	011b      	lsls	r3, r3, #4
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f023 030a 	bic.w	r3, r3, #10
 8008fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	621a      	str	r2, [r3, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	371c      	adds	r7, #28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fca:	b480      	push	{r7}
 8008fcc:	b087      	sub	sp, #28
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	60f8      	str	r0, [r7, #12]
 8008fd2:	60b9      	str	r1, [r7, #8]
 8008fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	f023 0210 	bic.w	r2, r3, #16
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	031b      	lsls	r3, r3, #12
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	621a      	str	r2, [r3, #32]
}
 800901e:	bf00      	nop
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr

0800902a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	f043 0307 	orr.w	r3, r3, #7
 800904c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	609a      	str	r2, [r3, #8]
}
 8009054:	bf00      	nop
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr

08009060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	60f8      	str	r0, [r7, #12]
 8009068:	60b9      	str	r1, [r7, #8]
 800906a:	607a      	str	r2, [r7, #4]
 800906c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800907a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	021a      	lsls	r2, r3, #8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	431a      	orrs	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4313      	orrs	r3, r2
 8009088:	697a      	ldr	r2, [r7, #20]
 800908a:	4313      	orrs	r3, r2
 800908c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	697a      	ldr	r2, [r7, #20]
 8009092:	609a      	str	r2, [r3, #8]
}
 8009094:	bf00      	nop
 8009096:	371c      	adds	r7, #28
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e05a      	b.n	800916e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a21      	ldr	r2, [pc, #132]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d022      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009104:	d01d      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d018      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a1a      	ldr	r2, [pc, #104]	; (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d00e      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a18      	ldr	r2, [pc, #96]	; (800918c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d009      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a17      	ldr	r2, [pc, #92]	; (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d004      	beq.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a15      	ldr	r2, [pc, #84]	; (8009194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d10c      	bne.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4313      	orrs	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40010000 	.word	0x40010000
 8009180:	40000400 	.word	0x40000400
 8009184:	40000800 	.word	0x40000800
 8009188:	40000c00 	.word	0x40000c00
 800918c:	40010400 	.word	0x40010400
 8009190:	40014000 	.word	0x40014000
 8009194:	40001800 	.word	0x40001800

08009198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e03f      	b.n	800922a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7fa f8fe 	bl	80033c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2224      	movs	r2, #36	; 0x24
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 fe81 	bl	8009ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	691a      	ldr	r2, [r3, #16]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b08a      	sub	sp, #40	; 0x28
 8009236:	af02      	add	r7, sp, #8
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	603b      	str	r3, [r7, #0]
 800923e:	4613      	mov	r3, r2
 8009240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009242:	2300      	movs	r3, #0
 8009244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b20      	cmp	r3, #32
 8009250:	d17c      	bne.n	800934c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <HAL_UART_Transmit+0x2c>
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e075      	b.n	800934e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <HAL_UART_Transmit+0x3e>
 800926c:	2302      	movs	r3, #2
 800926e:	e06e      	b.n	800934e <HAL_UART_Transmit+0x11c>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2221      	movs	r2, #33	; 0x21
 8009282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009286:	f7fa fb63 	bl	8003950 <HAL_GetTick>
 800928a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	88fa      	ldrh	r2, [r7, #6]
 8009290:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a0:	d108      	bne.n	80092b4 <HAL_UART_Transmit+0x82>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d104      	bne.n	80092b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	61bb      	str	r3, [r7, #24]
 80092b2:	e003      	b.n	80092bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80092c4:	e02a      	b.n	800931c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2200      	movs	r2, #0
 80092ce:	2180      	movs	r1, #128	; 0x80
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 fbc1 	bl	8009a58 <UART_WaitOnFlagUntilTimeout>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e036      	b.n	800934e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10b      	bne.n	80092fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	3302      	adds	r3, #2
 80092fa:	61bb      	str	r3, [r7, #24]
 80092fc:	e007      	b.n	800930e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	781a      	ldrb	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	3301      	adds	r3, #1
 800930c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009312:	b29b      	uxth	r3, r3
 8009314:	3b01      	subs	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009320:	b29b      	uxth	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1cf      	bne.n	80092c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2200      	movs	r2, #0
 800932e:	2140      	movs	r1, #64	; 0x40
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 fb91 	bl	8009a58 <UART_WaitOnFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e006      	b.n	800934e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2220      	movs	r2, #32
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	e000      	b.n	800934e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800934c:	2302      	movs	r3, #2
  }
}
 800934e:	4618      	mov	r0, r3
 8009350:	3720      	adds	r7, #32
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b08a      	sub	sp, #40	; 0x28
 800935a:	af02      	add	r7, sp, #8
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	603b      	str	r3, [r7, #0]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009366:	2300      	movs	r3, #0
 8009368:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b20      	cmp	r3, #32
 8009374:	f040 808c 	bne.w	8009490 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_UART_Receive+0x2e>
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e084      	b.n	8009492 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_UART_Receive+0x40>
 8009392:	2302      	movs	r3, #2
 8009394:	e07d      	b.n	8009492 <HAL_UART_Receive+0x13c>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2222      	movs	r2, #34	; 0x22
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093b2:	f7fa facd 	bl	8003950 <HAL_GetTick>
 80093b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	88fa      	ldrh	r2, [r7, #6]
 80093c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093cc:	d108      	bne.n	80093e0 <HAL_UART_Receive+0x8a>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e003      	b.n	80093e8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80093f0:	e043      	b.n	800947a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2200      	movs	r2, #0
 80093fa:	2120      	movs	r1, #32
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 fb2b 	bl	8009a58 <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e042      	b.n	8009492 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10c      	bne.n	800942c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	b29b      	uxth	r3, r3
 800941a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941e:	b29a      	uxth	r2, r3
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	3302      	adds	r3, #2
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	e01f      	b.n	800946c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009434:	d007      	beq.n	8009446 <HAL_UART_Receive+0xf0>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <HAL_UART_Receive+0xfe>
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	b2da      	uxtb	r2, r3
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	e008      	b.n	8009466 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009460:	b2da      	uxtb	r2, r3
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	3301      	adds	r3, #1
 800946a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1b6      	bne.n	80093f2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2220      	movs	r2, #32
 8009488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	e000      	b.n	8009492 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009490:	2302      	movs	r3, #2
  }
}
 8009492:	4618      	mov	r0, r3
 8009494:	3720      	adds	r7, #32
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	60f8      	str	r0, [r7, #12]
 80094a2:	60b9      	str	r1, [r7, #8]
 80094a4:	4613      	mov	r3, r2
 80094a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d11d      	bne.n	80094f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_UART_Receive_IT+0x26>
 80094ba:	88fb      	ldrh	r3, [r7, #6]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e016      	b.n	80094f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UART_Receive_IT+0x38>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e00f      	b.n	80094f2 <HAL_UART_Receive_IT+0x58>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094e0:	88fb      	ldrh	r3, [r7, #6]
 80094e2:	461a      	mov	r2, r3
 80094e4:	68b9      	ldr	r1, [r7, #8]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fb24 	bl	8009b34 <UART_Start_Receive_IT>
 80094ec:	4603      	mov	r3, r0
 80094ee:	e000      	b.n	80094f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80094f0:	2302      	movs	r3, #2
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b0ba      	sub	sp, #232	; 0xe8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009522:	2300      	movs	r3, #0
 8009524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009528:	2300      	movs	r3, #0
 800952a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800952e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800953a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10f      	bne.n	8009562 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009546:	f003 0320 	and.w	r3, r3, #32
 800954a:	2b00      	cmp	r3, #0
 800954c:	d009      	beq.n	8009562 <HAL_UART_IRQHandler+0x66>
 800954e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009552:	f003 0320 	and.w	r3, r3, #32
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fc07 	bl	8009d6e <UART_Receive_IT>
      return;
 8009560:	e256      	b.n	8009a10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009566:	2b00      	cmp	r3, #0
 8009568:	f000 80de 	beq.w	8009728 <HAL_UART_IRQHandler+0x22c>
 800956c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800957c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 80d1 	beq.w	8009728 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00b      	beq.n	80095aa <HAL_UART_IRQHandler+0xae>
 8009592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d005      	beq.n	80095aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a2:	f043 0201 	orr.w	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ae:	f003 0304 	and.w	r3, r3, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <HAL_UART_IRQHandler+0xd2>
 80095b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d005      	beq.n	80095ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f043 0202 	orr.w	r2, r3, #2
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00b      	beq.n	80095f2 <HAL_UART_IRQHandler+0xf6>
 80095da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ea:	f043 0204 	orr.w	r2, r3, #4
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d011      	beq.n	8009622 <HAL_UART_IRQHandler+0x126>
 80095fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b00      	cmp	r3, #0
 8009608:	d105      	bne.n	8009616 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800960a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961a:	f043 0208 	orr.w	r2, r3, #8
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 81ed 	beq.w	8009a06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800962c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d008      	beq.n	800964a <HAL_UART_IRQHandler+0x14e>
 8009638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800963c:	f003 0320 	and.w	r3, r3, #32
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fb92 	bl	8009d6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	695b      	ldr	r3, [r3, #20]
 8009650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009654:	2b40      	cmp	r3, #64	; 0x40
 8009656:	bf0c      	ite	eq
 8009658:	2301      	moveq	r3, #1
 800965a:	2300      	movne	r3, #0
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	f003 0308 	and.w	r3, r3, #8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d103      	bne.n	8009676 <HAL_UART_IRQHandler+0x17a>
 800966e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009672:	2b00      	cmp	r3, #0
 8009674:	d04f      	beq.n	8009716 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa9a 	bl	8009bb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009686:	2b40      	cmp	r3, #64	; 0x40
 8009688:	d141      	bne.n	800970e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3314      	adds	r3, #20
 8009690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009698:	e853 3f00 	ldrex	r3, [r3]
 800969c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3314      	adds	r3, #20
 80096b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1d9      	bne.n	800968a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d013      	beq.n	8009706 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e2:	4a7d      	ldr	r2, [pc, #500]	; (80098d8 <HAL_UART_IRQHandler+0x3dc>)
 80096e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fa fbac 	bl	8003e48 <HAL_DMA_Abort_IT>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d016      	beq.n	8009724 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009704:	e00e      	b.n	8009724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f990 	bl	8009a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800970c:	e00a      	b.n	8009724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f98c 	bl	8009a2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	e006      	b.n	8009724 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f988 	bl	8009a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009722:	e170      	b.n	8009a06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009724:	bf00      	nop
    return;
 8009726:	e16e      	b.n	8009a06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	2b01      	cmp	r3, #1
 800972e:	f040 814a 	bne.w	80099c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 8143 	beq.w	80099c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 813c 	beq.w	80099c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800974e:	2300      	movs	r3, #0
 8009750:	60bb      	str	r3, [r7, #8]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60bb      	str	r3, [r7, #8]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	60bb      	str	r3, [r7, #8]
 8009762:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976e:	2b40      	cmp	r3, #64	; 0x40
 8009770:	f040 80b4 	bne.w	80098dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009780:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 8140 	beq.w	8009a0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800978e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009792:	429a      	cmp	r2, r3
 8009794:	f080 8139 	bcs.w	8009a0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800979e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a4:	69db      	ldr	r3, [r3, #28]
 80097a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097aa:	f000 8088 	beq.w	80098be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	330c      	adds	r3, #12
 80097d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1d9      	bne.n	80097ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3314      	adds	r3, #20
 8009800:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009804:	e853 3f00 	ldrex	r3, [r3]
 8009808:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800980a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800980c:	f023 0301 	bic.w	r3, r3, #1
 8009810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3314      	adds	r3, #20
 800981a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800981e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009822:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009826:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e1      	bne.n	80097fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	3314      	adds	r3, #20
 800983c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800984c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3314      	adds	r3, #20
 8009856:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800985a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800985c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009860:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e3      	bne.n	8009836 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	330c      	adds	r3, #12
 8009882:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009886:	e853 3f00 	ldrex	r3, [r3]
 800988a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800988c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800988e:	f023 0310 	bic.w	r3, r3, #16
 8009892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	330c      	adds	r3, #12
 800989c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80098a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80098a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098a8:	e841 2300 	strex	r3, r2, [r1]
 80098ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1e3      	bne.n	800987c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fa fa55 	bl	8003d68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f8b6 	bl	8009a40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098d4:	e099      	b.n	8009a0a <HAL_UART_IRQHandler+0x50e>
 80098d6:	bf00      	nop
 80098d8:	08009c77 	.word	0x08009c77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f000 808b 	beq.w	8009a0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80098f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8086 	beq.w	8009a0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	330c      	adds	r3, #12
 8009908:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	330c      	adds	r3, #12
 8009922:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009926:	647a      	str	r2, [r7, #68]	; 0x44
 8009928:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800992c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e3      	bne.n	8009902 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3314      	adds	r3, #20
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	623b      	str	r3, [r7, #32]
   return(result);
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	f023 0301 	bic.w	r3, r3, #1
 8009950:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	3314      	adds	r3, #20
 800995a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800995e:	633a      	str	r2, [r7, #48]	; 0x30
 8009960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e3      	bne.n	800993a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0310 	bic.w	r3, r3, #16
 8009996:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	330c      	adds	r3, #12
 80099a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80099a4:	61fa      	str	r2, [r7, #28]
 80099a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	69b9      	ldr	r1, [r7, #24]
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	617b      	str	r3, [r7, #20]
   return(result);
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e3      	bne.n	8009980 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f83e 	bl	8009a40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099c4:	e023      	b.n	8009a0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <HAL_UART_IRQHandler+0x4ea>
 80099d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d003      	beq.n	80099e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f95d 	bl	8009c9e <UART_Transmit_IT>
    return;
 80099e4:	e014      	b.n	8009a10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d00e      	beq.n	8009a10 <HAL_UART_IRQHandler+0x514>
 80099f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f99d 	bl	8009d3e <UART_EndTransmit_IT>
    return;
 8009a04:	e004      	b.n	8009a10 <HAL_UART_IRQHandler+0x514>
    return;
 8009a06:	bf00      	nop
 8009a08:	e002      	b.n	8009a10 <HAL_UART_IRQHandler+0x514>
      return;
 8009a0a:	bf00      	nop
 8009a0c:	e000      	b.n	8009a10 <HAL_UART_IRQHandler+0x514>
      return;
 8009a0e:	bf00      	nop
  }
}
 8009a10:	37e8      	adds	r7, #232	; 0xe8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop

08009a18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b090      	sub	sp, #64	; 0x40
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	4613      	mov	r3, r2
 8009a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a68:	e050      	b.n	8009b0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a70:	d04c      	beq.n	8009b0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d007      	beq.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a78:	f7f9 ff6a 	bl	8003950 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d241      	bcs.n	8009b0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009aa8:	637a      	str	r2, [r7, #52]	; 0x34
 8009aaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e5      	bne.n	8009a88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	613b      	str	r3, [r7, #16]
   return(result);
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3314      	adds	r3, #20
 8009ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009adc:	623a      	str	r2, [r7, #32]
 8009ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	69f9      	ldr	r1, [r7, #28]
 8009ae2:	6a3a      	ldr	r2, [r7, #32]
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e5      	bne.n	8009abc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2220      	movs	r2, #32
 8009af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e00f      	b.n	8009b2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4013      	ands	r3, r2
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2301      	moveq	r3, #1
 8009b1e:	2300      	movne	r3, #0
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d09f      	beq.n	8009a6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3740      	adds	r7, #64	; 0x40
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	88fa      	ldrh	r2, [r7, #6]
 8009b4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	88fa      	ldrh	r2, [r7, #6]
 8009b52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2222      	movs	r2, #34	; 0x22
 8009b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695a      	ldr	r2, [r3, #20]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f042 0201 	orr.w	r2, r2, #1
 8009b90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f042 0220 	orr.w	r2, r2, #32
 8009ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b095      	sub	sp, #84	; 0x54
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	330c      	adds	r3, #12
 8009bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc2:	e853 3f00 	ldrex	r3, [r3]
 8009bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	330c      	adds	r3, #12
 8009bd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8009bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009be0:	e841 2300 	strex	r3, r2, [r1]
 8009be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1e5      	bne.n	8009bb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3314      	adds	r3, #20
 8009bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3314      	adds	r3, #20
 8009c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e5      	bne.n	8009bec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d119      	bne.n	8009c5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	330c      	adds	r3, #12
 8009c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	e853 3f00 	ldrex	r3, [r3]
 8009c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f023 0310 	bic.w	r3, r3, #16
 8009c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	330c      	adds	r3, #12
 8009c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c48:	61ba      	str	r2, [r7, #24]
 8009c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4c:	6979      	ldr	r1, [r7, #20]
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	e841 2300 	strex	r3, r2, [r1]
 8009c54:	613b      	str	r3, [r7, #16]
   return(result);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1e5      	bne.n	8009c28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2220      	movs	r2, #32
 8009c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009c6a:	bf00      	nop
 8009c6c:	3754      	adds	r7, #84	; 0x54
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7ff fecb 	bl	8009a2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b085      	sub	sp, #20
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b21      	cmp	r3, #33	; 0x21
 8009cb0:	d13e      	bne.n	8009d30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cba:	d114      	bne.n	8009ce6 <UART_Transmit_IT+0x48>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d110      	bne.n	8009ce6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a1b      	ldr	r3, [r3, #32]
 8009cc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	1c9a      	adds	r2, r3, #2
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	621a      	str	r2, [r3, #32]
 8009ce4:	e008      	b.n	8009cf8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	1c59      	adds	r1, r3, #1
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	6211      	str	r1, [r2, #32]
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	3b01      	subs	r3, #1
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	4619      	mov	r1, r3
 8009d06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10f      	bne.n	8009d2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68da      	ldr	r2, [r3, #12]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fe5a 	bl	8009a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b08c      	sub	sp, #48	; 0x30
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b22      	cmp	r3, #34	; 0x22
 8009d80:	f040 80ab 	bne.w	8009eda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8c:	d117      	bne.n	8009dbe <UART_Receive_IT+0x50>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d113      	bne.n	8009dbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d96:	2300      	movs	r3, #0
 8009d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	1c9a      	adds	r2, r3, #2
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	629a      	str	r2, [r3, #40]	; 0x28
 8009dbc:	e026      	b.n	8009e0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd0:	d007      	beq.n	8009de2 <UART_Receive_IT+0x74>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10a      	bne.n	8009df0 <UART_Receive_IT+0x82>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d106      	bne.n	8009df0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dec:	701a      	strb	r2, [r3, #0]
 8009dee:	e008      	b.n	8009e02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	3b01      	subs	r3, #1
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d15a      	bne.n	8009ed6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f022 0220 	bic.w	r2, r2, #32
 8009e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68da      	ldr	r2, [r3, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	695a      	ldr	r2, [r3, #20]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0201 	bic.w	r2, r2, #1
 8009e4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d135      	bne.n	8009ecc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	613b      	str	r3, [r7, #16]
   return(result);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f023 0310 	bic.w	r3, r3, #16
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	330c      	adds	r3, #12
 8009e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e86:	623a      	str	r2, [r7, #32]
 8009e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8a:	69f9      	ldr	r1, [r7, #28]
 8009e8c:	6a3a      	ldr	r2, [r7, #32]
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e5      	bne.n	8009e66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 0310 	and.w	r3, r3, #16
 8009ea4:	2b10      	cmp	r3, #16
 8009ea6:	d10a      	bne.n	8009ebe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	60fb      	str	r3, [r7, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff fdbb 	bl	8009a40 <HAL_UARTEx_RxEventCallback>
 8009eca:	e002      	b.n	8009ed2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7f7 f8ff 	bl	80010d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e002      	b.n	8009edc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e000      	b.n	8009edc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009eda:	2302      	movs	r3, #2
  }
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3730      	adds	r7, #48	; 0x30
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ee8:	b0c0      	sub	sp, #256	; 0x100
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f00:	68d9      	ldr	r1, [r3, #12]
 8009f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	ea40 0301 	orr.w	r3, r0, r1
 8009f0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f12:	689a      	ldr	r2, [r3, #8]
 8009f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	431a      	orrs	r2, r3
 8009f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009f3c:	f021 010c 	bic.w	r1, r1, #12
 8009f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f5e:	6999      	ldr	r1, [r3, #24]
 8009f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	ea40 0301 	orr.w	r3, r0, r1
 8009f6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4b8f      	ldr	r3, [pc, #572]	; (800a1b0 <UART_SetConfig+0x2cc>)
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d005      	beq.n	8009f84 <UART_SetConfig+0xa0>
 8009f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b8d      	ldr	r3, [pc, #564]	; (800a1b4 <UART_SetConfig+0x2d0>)
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d104      	bne.n	8009f8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f84:	f7fd fd80 	bl	8007a88 <HAL_RCC_GetPCLK2Freq>
 8009f88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009f8c:	e003      	b.n	8009f96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f8e:	f7fd fd67 	bl	8007a60 <HAL_RCC_GetPCLK1Freq>
 8009f92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fa0:	f040 810c 	bne.w	800a1bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009fb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	462b      	mov	r3, r5
 8009fba:	1891      	adds	r1, r2, r2
 8009fbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8009fbe:	415b      	adcs	r3, r3
 8009fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	eb12 0801 	adds.w	r8, r2, r1
 8009fcc:	4629      	mov	r1, r5
 8009fce:	eb43 0901 	adc.w	r9, r3, r1
 8009fd2:	f04f 0200 	mov.w	r2, #0
 8009fd6:	f04f 0300 	mov.w	r3, #0
 8009fda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009fde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009fe2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009fe6:	4690      	mov	r8, r2
 8009fe8:	4699      	mov	r9, r3
 8009fea:	4623      	mov	r3, r4
 8009fec:	eb18 0303 	adds.w	r3, r8, r3
 8009ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009ff4:	462b      	mov	r3, r5
 8009ff6:	eb49 0303 	adc.w	r3, r9, r3
 8009ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a00a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a00e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a012:	460b      	mov	r3, r1
 800a014:	18db      	adds	r3, r3, r3
 800a016:	653b      	str	r3, [r7, #80]	; 0x50
 800a018:	4613      	mov	r3, r2
 800a01a:	eb42 0303 	adc.w	r3, r2, r3
 800a01e:	657b      	str	r3, [r7, #84]	; 0x54
 800a020:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a024:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a028:	f7f6 f932 	bl	8000290 <__aeabi_uldivmod>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4b61      	ldr	r3, [pc, #388]	; (800a1b8 <UART_SetConfig+0x2d4>)
 800a032:	fba3 2302 	umull	r2, r3, r3, r2
 800a036:	095b      	lsrs	r3, r3, #5
 800a038:	011c      	lsls	r4, r3, #4
 800a03a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a044:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a048:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a04c:	4642      	mov	r2, r8
 800a04e:	464b      	mov	r3, r9
 800a050:	1891      	adds	r1, r2, r2
 800a052:	64b9      	str	r1, [r7, #72]	; 0x48
 800a054:	415b      	adcs	r3, r3
 800a056:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a058:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a05c:	4641      	mov	r1, r8
 800a05e:	eb12 0a01 	adds.w	sl, r2, r1
 800a062:	4649      	mov	r1, r9
 800a064:	eb43 0b01 	adc.w	fp, r3, r1
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	f04f 0300 	mov.w	r3, #0
 800a070:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a074:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a078:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a07c:	4692      	mov	sl, r2
 800a07e:	469b      	mov	fp, r3
 800a080:	4643      	mov	r3, r8
 800a082:	eb1a 0303 	adds.w	r3, sl, r3
 800a086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a08a:	464b      	mov	r3, r9
 800a08c:	eb4b 0303 	adc.w	r3, fp, r3
 800a090:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a0a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	18db      	adds	r3, r3, r3
 800a0ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	eb42 0303 	adc.w	r3, r2, r3
 800a0b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a0b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a0ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a0be:	f7f6 f8e7 	bl	8000290 <__aeabi_uldivmod>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	4b3b      	ldr	r3, [pc, #236]	; (800a1b8 <UART_SetConfig+0x2d4>)
 800a0ca:	fba3 2301 	umull	r2, r3, r3, r1
 800a0ce:	095b      	lsrs	r3, r3, #5
 800a0d0:	2264      	movs	r2, #100	; 0x64
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
 800a0d6:	1acb      	subs	r3, r1, r3
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a0de:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <UART_SetConfig+0x2d4>)
 800a0e0:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e4:	095b      	lsrs	r3, r3, #5
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a0ec:	441c      	add	r4, r3
 800a0ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a0fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a100:	4642      	mov	r2, r8
 800a102:	464b      	mov	r3, r9
 800a104:	1891      	adds	r1, r2, r2
 800a106:	63b9      	str	r1, [r7, #56]	; 0x38
 800a108:	415b      	adcs	r3, r3
 800a10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a10c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a110:	4641      	mov	r1, r8
 800a112:	1851      	adds	r1, r2, r1
 800a114:	6339      	str	r1, [r7, #48]	; 0x30
 800a116:	4649      	mov	r1, r9
 800a118:	414b      	adcs	r3, r1
 800a11a:	637b      	str	r3, [r7, #52]	; 0x34
 800a11c:	f04f 0200 	mov.w	r2, #0
 800a120:	f04f 0300 	mov.w	r3, #0
 800a124:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a128:	4659      	mov	r1, fp
 800a12a:	00cb      	lsls	r3, r1, #3
 800a12c:	4651      	mov	r1, sl
 800a12e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a132:	4651      	mov	r1, sl
 800a134:	00ca      	lsls	r2, r1, #3
 800a136:	4610      	mov	r0, r2
 800a138:	4619      	mov	r1, r3
 800a13a:	4603      	mov	r3, r0
 800a13c:	4642      	mov	r2, r8
 800a13e:	189b      	adds	r3, r3, r2
 800a140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a144:	464b      	mov	r3, r9
 800a146:	460a      	mov	r2, r1
 800a148:	eb42 0303 	adc.w	r3, r2, r3
 800a14c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a15c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a160:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a164:	460b      	mov	r3, r1
 800a166:	18db      	adds	r3, r3, r3
 800a168:	62bb      	str	r3, [r7, #40]	; 0x28
 800a16a:	4613      	mov	r3, r2
 800a16c:	eb42 0303 	adc.w	r3, r2, r3
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a176:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a17a:	f7f6 f889 	bl	8000290 <__aeabi_uldivmod>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <UART_SetConfig+0x2d4>)
 800a184:	fba3 1302 	umull	r1, r3, r3, r2
 800a188:	095b      	lsrs	r3, r3, #5
 800a18a:	2164      	movs	r1, #100	; 0x64
 800a18c:	fb01 f303 	mul.w	r3, r1, r3
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	3332      	adds	r3, #50	; 0x32
 800a196:	4a08      	ldr	r2, [pc, #32]	; (800a1b8 <UART_SetConfig+0x2d4>)
 800a198:	fba2 2303 	umull	r2, r3, r2, r3
 800a19c:	095b      	lsrs	r3, r3, #5
 800a19e:	f003 0207 	and.w	r2, r3, #7
 800a1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4422      	add	r2, r4
 800a1aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1ac:	e105      	b.n	800a3ba <UART_SetConfig+0x4d6>
 800a1ae:	bf00      	nop
 800a1b0:	40011000 	.word	0x40011000
 800a1b4:	40011400 	.word	0x40011400
 800a1b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a1c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a1ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a1ce:	4642      	mov	r2, r8
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	1891      	adds	r1, r2, r2
 800a1d4:	6239      	str	r1, [r7, #32]
 800a1d6:	415b      	adcs	r3, r3
 800a1d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a1de:	4641      	mov	r1, r8
 800a1e0:	1854      	adds	r4, r2, r1
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	eb43 0501 	adc.w	r5, r3, r1
 800a1e8:	f04f 0200 	mov.w	r2, #0
 800a1ec:	f04f 0300 	mov.w	r3, #0
 800a1f0:	00eb      	lsls	r3, r5, #3
 800a1f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a1f6:	00e2      	lsls	r2, r4, #3
 800a1f8:	4614      	mov	r4, r2
 800a1fa:	461d      	mov	r5, r3
 800a1fc:	4643      	mov	r3, r8
 800a1fe:	18e3      	adds	r3, r4, r3
 800a200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a204:	464b      	mov	r3, r9
 800a206:	eb45 0303 	adc.w	r3, r5, r3
 800a20a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a21a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a21e:	f04f 0200 	mov.w	r2, #0
 800a222:	f04f 0300 	mov.w	r3, #0
 800a226:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a22a:	4629      	mov	r1, r5
 800a22c:	008b      	lsls	r3, r1, #2
 800a22e:	4621      	mov	r1, r4
 800a230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a234:	4621      	mov	r1, r4
 800a236:	008a      	lsls	r2, r1, #2
 800a238:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a23c:	f7f6 f828 	bl	8000290 <__aeabi_uldivmod>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4b60      	ldr	r3, [pc, #384]	; (800a3c8 <UART_SetConfig+0x4e4>)
 800a246:	fba3 2302 	umull	r2, r3, r3, r2
 800a24a:	095b      	lsrs	r3, r3, #5
 800a24c:	011c      	lsls	r4, r3, #4
 800a24e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a252:	2200      	movs	r2, #0
 800a254:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a258:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a25c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a260:	4642      	mov	r2, r8
 800a262:	464b      	mov	r3, r9
 800a264:	1891      	adds	r1, r2, r2
 800a266:	61b9      	str	r1, [r7, #24]
 800a268:	415b      	adcs	r3, r3
 800a26a:	61fb      	str	r3, [r7, #28]
 800a26c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a270:	4641      	mov	r1, r8
 800a272:	1851      	adds	r1, r2, r1
 800a274:	6139      	str	r1, [r7, #16]
 800a276:	4649      	mov	r1, r9
 800a278:	414b      	adcs	r3, r1
 800a27a:	617b      	str	r3, [r7, #20]
 800a27c:	f04f 0200 	mov.w	r2, #0
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a288:	4659      	mov	r1, fp
 800a28a:	00cb      	lsls	r3, r1, #3
 800a28c:	4651      	mov	r1, sl
 800a28e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a292:	4651      	mov	r1, sl
 800a294:	00ca      	lsls	r2, r1, #3
 800a296:	4610      	mov	r0, r2
 800a298:	4619      	mov	r1, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	4642      	mov	r2, r8
 800a29e:	189b      	adds	r3, r3, r2
 800a2a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	460a      	mov	r2, r1
 800a2a8:	eb42 0303 	adc.w	r3, r2, r3
 800a2ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	f04f 0300 	mov.w	r3, #0
 800a2c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a2c8:	4649      	mov	r1, r9
 800a2ca:	008b      	lsls	r3, r1, #2
 800a2cc:	4641      	mov	r1, r8
 800a2ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2d2:	4641      	mov	r1, r8
 800a2d4:	008a      	lsls	r2, r1, #2
 800a2d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a2da:	f7f5 ffd9 	bl	8000290 <__aeabi_uldivmod>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4b39      	ldr	r3, [pc, #228]	; (800a3c8 <UART_SetConfig+0x4e4>)
 800a2e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2e8:	095b      	lsrs	r3, r3, #5
 800a2ea:	2164      	movs	r1, #100	; 0x64
 800a2ec:	fb01 f303 	mul.w	r3, r1, r3
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	011b      	lsls	r3, r3, #4
 800a2f4:	3332      	adds	r3, #50	; 0x32
 800a2f6:	4a34      	ldr	r2, [pc, #208]	; (800a3c8 <UART_SetConfig+0x4e4>)
 800a2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fc:	095b      	lsrs	r3, r3, #5
 800a2fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a302:	441c      	add	r4, r3
 800a304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a308:	2200      	movs	r2, #0
 800a30a:	673b      	str	r3, [r7, #112]	; 0x70
 800a30c:	677a      	str	r2, [r7, #116]	; 0x74
 800a30e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a312:	4642      	mov	r2, r8
 800a314:	464b      	mov	r3, r9
 800a316:	1891      	adds	r1, r2, r2
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	415b      	adcs	r3, r3
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a322:	4641      	mov	r1, r8
 800a324:	1851      	adds	r1, r2, r1
 800a326:	6039      	str	r1, [r7, #0]
 800a328:	4649      	mov	r1, r9
 800a32a:	414b      	adcs	r3, r1
 800a32c:	607b      	str	r3, [r7, #4]
 800a32e:	f04f 0200 	mov.w	r2, #0
 800a332:	f04f 0300 	mov.w	r3, #0
 800a336:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a33a:	4659      	mov	r1, fp
 800a33c:	00cb      	lsls	r3, r1, #3
 800a33e:	4651      	mov	r1, sl
 800a340:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a344:	4651      	mov	r1, sl
 800a346:	00ca      	lsls	r2, r1, #3
 800a348:	4610      	mov	r0, r2
 800a34a:	4619      	mov	r1, r3
 800a34c:	4603      	mov	r3, r0
 800a34e:	4642      	mov	r2, r8
 800a350:	189b      	adds	r3, r3, r2
 800a352:	66bb      	str	r3, [r7, #104]	; 0x68
 800a354:	464b      	mov	r3, r9
 800a356:	460a      	mov	r2, r1
 800a358:	eb42 0303 	adc.w	r3, r2, r3
 800a35c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	663b      	str	r3, [r7, #96]	; 0x60
 800a368:	667a      	str	r2, [r7, #100]	; 0x64
 800a36a:	f04f 0200 	mov.w	r2, #0
 800a36e:	f04f 0300 	mov.w	r3, #0
 800a372:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a376:	4649      	mov	r1, r9
 800a378:	008b      	lsls	r3, r1, #2
 800a37a:	4641      	mov	r1, r8
 800a37c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a380:	4641      	mov	r1, r8
 800a382:	008a      	lsls	r2, r1, #2
 800a384:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a388:	f7f5 ff82 	bl	8000290 <__aeabi_uldivmod>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <UART_SetConfig+0x4e4>)
 800a392:	fba3 1302 	umull	r1, r3, r3, r2
 800a396:	095b      	lsrs	r3, r3, #5
 800a398:	2164      	movs	r1, #100	; 0x64
 800a39a:	fb01 f303 	mul.w	r3, r1, r3
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	3332      	adds	r3, #50	; 0x32
 800a3a4:	4a08      	ldr	r2, [pc, #32]	; (800a3c8 <UART_SetConfig+0x4e4>)
 800a3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3aa:	095b      	lsrs	r3, r3, #5
 800a3ac:	f003 020f 	and.w	r2, r3, #15
 800a3b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4422      	add	r2, r4
 800a3b8:	609a      	str	r2, [r3, #8]
}
 800a3ba:	bf00      	nop
 800a3bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3c6:	bf00      	nop
 800a3c8:	51eb851f 	.word	0x51eb851f

0800a3cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d123      	bne.n	800a426 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a3e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	6851      	ldr	r1, [r2, #4]
 800a3ee:	683a      	ldr	r2, [r7, #0]
 800a3f0:	6892      	ldr	r2, [r2, #8]
 800a3f2:	4311      	orrs	r1, r2
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	68d2      	ldr	r2, [r2, #12]
 800a3f8:	4311      	orrs	r1, r2
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	6912      	ldr	r2, [r2, #16]
 800a3fe:	4311      	orrs	r1, r2
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	6952      	ldr	r2, [r2, #20]
 800a404:	4311      	orrs	r1, r2
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	6992      	ldr	r2, [r2, #24]
 800a40a:	4311      	orrs	r1, r2
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	69d2      	ldr	r2, [r2, #28]
 800a410:	4311      	orrs	r1, r2
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	6a12      	ldr	r2, [r2, #32]
 800a416:	4311      	orrs	r1, r2
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a41c:	430a      	orrs	r2, r1
 800a41e:	431a      	orrs	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e028      	b.n	800a478 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	69d9      	ldr	r1, [r3, #28]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	4319      	orrs	r1, r3
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	430b      	orrs	r3, r1
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a44c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	6851      	ldr	r1, [r2, #4]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	6892      	ldr	r2, [r2, #8]
 800a458:	4311      	orrs	r1, r2
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	68d2      	ldr	r2, [r2, #12]
 800a45e:	4311      	orrs	r1, r2
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	6912      	ldr	r2, [r2, #16]
 800a464:	4311      	orrs	r1, r2
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	6952      	ldr	r2, [r2, #20]
 800a46a:	4311      	orrs	r1, r2
 800a46c:	683a      	ldr	r2, [r7, #0]
 800a46e:	6992      	ldr	r2, [r2, #24]
 800a470:	430a      	orrs	r2, r1
 800a472:	431a      	orrs	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d128      	bne.n	800a4ea <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	1e59      	subs	r1, r3, #1
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	011b      	lsls	r3, r3, #4
 800a4ae:	4319      	orrs	r1, r3
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	021b      	lsls	r3, r3, #8
 800a4b8:	4319      	orrs	r1, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	031b      	lsls	r3, r3, #12
 800a4c2:	4319      	orrs	r1, r3
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	041b      	lsls	r3, r3, #16
 800a4cc:	4319      	orrs	r1, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	051b      	lsls	r3, r3, #20
 800a4d6:	4319      	orrs	r1, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	061b      	lsls	r3, r3, #24
 800a4e0:	430b      	orrs	r3, r1
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	609a      	str	r2, [r3, #8]
 800a4e8:	e02f      	b.n	800a54a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	68d2      	ldr	r2, [r2, #12]
 800a4fa:	3a01      	subs	r2, #1
 800a4fc:	0311      	lsls	r1, r2, #12
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	6952      	ldr	r2, [r2, #20]
 800a502:	3a01      	subs	r2, #1
 800a504:	0512      	lsls	r2, r2, #20
 800a506:	430a      	orrs	r2, r1
 800a508:	431a      	orrs	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	1e59      	subs	r1, r3, #1
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	3b01      	subs	r3, #1
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	4319      	orrs	r1, r3
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	4319      	orrs	r1, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	3b01      	subs	r3, #1
 800a536:	041b      	lsls	r3, r3, #16
 800a538:	4319      	orrs	r1, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	3b01      	subs	r3, #1
 800a540:	061b      	lsls	r3, r3, #24
 800a542:	430b      	orrs	r3, r1
 800a544:	431a      	orrs	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3714      	adds	r7, #20
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a558:	b084      	sub	sp, #16
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	f107 001c 	add.w	r0, r7, #28
 800a566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d122      	bne.n	800a5b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d105      	bne.n	800a5aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f9c0 	bl	800a930 <USB_CoreReset>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]
 800a5b4:	e01a      	b.n	800a5ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f9b4 	bl	800a930 <USB_CoreReset>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	639a      	str	r2, [r3, #56]	; 0x38
 800a5de:	e005      	b.n	800a5ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d10b      	bne.n	800a60a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f043 0206 	orr.w	r2, r3, #6
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f043 0220 	orr.w	r2, r3, #32
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a616:	b004      	add	sp, #16
 800a618:	4770      	bx	lr

0800a61a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f043 0201 	orr.w	r2, r3, #1
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f023 0201 	bic.w	r2, r3, #1
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	460b      	mov	r3, r1
 800a668:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d115      	bne.n	800a6ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a68c:	2001      	movs	r0, #1
 800a68e:	f7f9 f96b 	bl	8003968 <HAL_Delay>
      ms++;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3301      	adds	r3, #1
 800a696:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f93a 	bl	800a912 <USB_GetMode>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d01e      	beq.n	800a6e2 <USB_SetCurrentMode+0x84>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b31      	cmp	r3, #49	; 0x31
 800a6a8:	d9f0      	bls.n	800a68c <USB_SetCurrentMode+0x2e>
 800a6aa:	e01a      	b.n	800a6e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d115      	bne.n	800a6de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f7f9 f952 	bl	8003968 <HAL_Delay>
      ms++;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f921 	bl	800a912 <USB_GetMode>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d005      	beq.n	800a6e2 <USB_SetCurrentMode+0x84>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2b31      	cmp	r3, #49	; 0x31
 800a6da:	d9f0      	bls.n	800a6be <USB_SetCurrentMode+0x60>
 800a6dc:	e001      	b.n	800a6e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e005      	b.n	800a6ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b32      	cmp	r3, #50	; 0x32
 800a6e6:	d101      	bne.n	800a6ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
	...

0800a6f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a702:	2300      	movs	r3, #0
 800a704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3301      	adds	r3, #1
 800a70a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4a13      	ldr	r2, [pc, #76]	; (800a75c <USB_FlushTxFifo+0x64>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d901      	bls.n	800a718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e01b      	b.n	800a750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	daf2      	bge.n	800a706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a720:	2300      	movs	r3, #0
 800a722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	019b      	lsls	r3, r3, #6
 800a728:	f043 0220 	orr.w	r2, r3, #32
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	3301      	adds	r3, #1
 800a734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4a08      	ldr	r2, [pc, #32]	; (800a75c <USB_FlushTxFifo+0x64>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d901      	bls.n	800a742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e006      	b.n	800a750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	d0f0      	beq.n	800a730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3714      	adds	r7, #20
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	00030d40 	.word	0x00030d40

0800a760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4a11      	ldr	r2, [pc, #68]	; (800a7bc <USB_FlushRxFifo+0x5c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d901      	bls.n	800a77e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e018      	b.n	800a7b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	daf2      	bge.n	800a76c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2210      	movs	r2, #16
 800a78e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4a08      	ldr	r2, [pc, #32]	; (800a7bc <USB_FlushRxFifo+0x5c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d901      	bls.n	800a7a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e006      	b.n	800a7b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f003 0310 	and.w	r3, r3, #16
 800a7aa:	2b10      	cmp	r3, #16
 800a7ac:	d0f0      	beq.n	800a790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	00030d40 	.word	0x00030d40

0800a7c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b089      	sub	sp, #36	; 0x24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	71fb      	strb	r3, [r7, #7]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a7de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d123      	bne.n	800a82e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a7e6:	88bb      	ldrh	r3, [r7, #4]
 800a7e8:	3303      	adds	r3, #3
 800a7ea:	089b      	lsrs	r3, r3, #2
 800a7ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	61bb      	str	r3, [r7, #24]
 800a7f2:	e018      	b.n	800a826 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	031a      	lsls	r2, r3, #12
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a800:	461a      	mov	r2, r3
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	3301      	adds	r3, #1
 800a812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	3301      	adds	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	3301      	adds	r3, #1
 800a81e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	3301      	adds	r3, #1
 800a824:	61bb      	str	r3, [r7, #24]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d3e2      	bcc.n	800a7f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3724      	adds	r7, #36	; 0x24
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b08b      	sub	sp, #44	; 0x2c
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a852:	88fb      	ldrh	r3, [r7, #6]
 800a854:	089b      	lsrs	r3, r3, #2
 800a856:	b29b      	uxth	r3, r3
 800a858:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a85a:	88fb      	ldrh	r3, [r7, #6]
 800a85c:	f003 0303 	and.w	r3, r3, #3
 800a860:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a862:	2300      	movs	r3, #0
 800a864:	623b      	str	r3, [r7, #32]
 800a866:	e014      	b.n	800a892 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	601a      	str	r2, [r3, #0]
    pDest++;
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	3301      	adds	r3, #1
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	3301      	adds	r3, #1
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	3301      	adds	r3, #1
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	3301      	adds	r3, #1
 800a88a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	3301      	adds	r3, #1
 800a890:	623b      	str	r3, [r7, #32]
 800a892:	6a3a      	ldr	r2, [r7, #32]
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	429a      	cmp	r2, r3
 800a898:	d3e6      	bcc.n	800a868 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a89a:	8bfb      	ldrh	r3, [r7, #30]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01e      	beq.n	800a8de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f107 0310 	add.w	r3, r7, #16
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	701a      	strb	r2, [r3, #0]
      i++;
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a8d2:	8bfb      	ldrh	r3, [r7, #30]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a8d8:	8bfb      	ldrh	r3, [r7, #30]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1ea      	bne.n	800a8b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	372c      	adds	r7, #44	; 0x2c
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	4013      	ands	r3, r2
 800a902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a904:	68fb      	ldr	r3, [r7, #12]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr

0800a912 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a912:	b480      	push	{r7}
 800a914:	b083      	sub	sp, #12
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	f003 0301 	and.w	r3, r3, #1
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
	...

0800a930 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3301      	adds	r3, #1
 800a940:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4a13      	ldr	r2, [pc, #76]	; (800a994 <USB_CoreReset+0x64>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d901      	bls.n	800a94e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a94a:	2303      	movs	r3, #3
 800a94c:	e01b      	b.n	800a986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	daf2      	bge.n	800a93c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	f043 0201 	orr.w	r2, r3, #1
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4a09      	ldr	r2, [pc, #36]	; (800a994 <USB_CoreReset+0x64>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d901      	bls.n	800a978 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e006      	b.n	800a986 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b01      	cmp	r3, #1
 800a982:	d0f0      	beq.n	800a966 <USB_CoreReset+0x36>

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	00030d40 	.word	0x00030d40

0800a998 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a998:	b084      	sub	sp, #16
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b086      	sub	sp, #24
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
 800a9a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a9a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d018      	beq.n	800aa20 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d10a      	bne.n	800aa0a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa02:	f043 0304 	orr.w	r3, r3, #4
 800aa06:	6013      	str	r3, [r2, #0]
 800aa08:	e014      	b.n	800aa34 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa18:	f023 0304 	bic.w	r3, r3, #4
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	e009      	b.n	800aa34 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aa2e:	f023 0304 	bic.w	r3, r3, #4
 800aa32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aa34:	2110      	movs	r1, #16
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7ff fe5e 	bl	800a6f8 <USB_FlushTxFifo>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff fe8a 	bl	800a760 <USB_FlushRxFifo>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800aa52:	2301      	movs	r3, #1
 800aa54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800aa56:	2300      	movs	r3, #0
 800aa58:	613b      	str	r3, [r7, #16]
 800aa5a:	e015      	b.n	800aa88 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa68:	461a      	mov	r2, r3
 800aa6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	3301      	adds	r3, #1
 800aa86:	613b      	str	r3, [r7, #16]
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d3e5      	bcc.n	800aa5c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00b      	beq.n	800aac2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aab0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a13      	ldr	r2, [pc, #76]	; (800ab04 <USB_HostInit+0x16c>)
 800aab6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a13      	ldr	r2, [pc, #76]	; (800ab08 <USB_HostInit+0x170>)
 800aabc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800aac0:	e009      	b.n	800aad6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2280      	movs	r2, #128	; 0x80
 800aac6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a10      	ldr	r2, [pc, #64]	; (800ab0c <USB_HostInit+0x174>)
 800aacc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a0f      	ldr	r2, [pc, #60]	; (800ab10 <USB_HostInit+0x178>)
 800aad2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d105      	bne.n	800aae8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	f043 0210 	orr.w	r2, r3, #16
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	699a      	ldr	r2, [r3, #24]
 800aaec:	4b09      	ldr	r3, [pc, #36]	; (800ab14 <USB_HostInit+0x17c>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab00:	b004      	add	sp, #16
 800ab02:	4770      	bx	lr
 800ab04:	01000200 	.word	0x01000200
 800ab08:	00e00300 	.word	0x00e00300
 800ab0c:	00600080 	.word	0x00600080
 800ab10:	004000e0 	.word	0x004000e0
 800ab14:	a3200008 	.word	0xa3200008

0800ab18 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ab36:	f023 0303 	bic.w	r3, r3, #3
 800ab3a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab50:	4313      	orrs	r3, r2
 800ab52:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d107      	bne.n	800ab6a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab60:	461a      	mov	r2, r3
 800ab62:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ab66:	6053      	str	r3, [r2, #4]
 800ab68:	e009      	b.n	800ab7e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d106      	bne.n	800ab7e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab76:	461a      	mov	r2, r3
 800ab78:	f241 7370 	movw	r3, #6000	; 0x1770
 800ab7c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800abac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800abb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800abbc:	2064      	movs	r0, #100	; 0x64
 800abbe:	f7f8 fed3 	bl	8003968 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800abca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800abd0:	200a      	movs	r0, #10
 800abd2:	f7f8 fec9 	bl	8003968 <HAL_Delay>

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ac04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d109      	bne.n	800ac24 <USB_DriveVbus+0x44>
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d106      	bne.n	800ac24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ac22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac2e:	d109      	bne.n	800ac44 <USB_DriveVbus+0x64>
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d106      	bne.n	800ac44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ac3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b085      	sub	sp, #20
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	0c5b      	lsrs	r3, r3, #17
 800ac70:	f003 0303 	and.w	r3, r3, #3
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	b29b      	uxth	r3, r3
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
	...

0800aca4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b088      	sub	sp, #32
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	461a      	mov	r2, r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	70fb      	strb	r3, [r7, #3]
 800acb6:	460b      	mov	r3, r1
 800acb8:	70bb      	strb	r3, [r7, #2]
 800acba:	4613      	mov	r3, r2
 800acbc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800acc6:	78fb      	ldrb	r3, [r7, #3]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	4413      	add	r3, r2
 800acce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd2:	461a      	mov	r2, r3
 800acd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acd8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800acda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acde:	2b03      	cmp	r3, #3
 800ace0:	d87e      	bhi.n	800ade0 <USB_HC_Init+0x13c>
 800ace2:	a201      	add	r2, pc, #4	; (adr r2, 800ace8 <USB_HC_Init+0x44>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800acf9 	.word	0x0800acf9
 800acec:	0800ada3 	.word	0x0800ada3
 800acf0:	0800acf9 	.word	0x0800acf9
 800acf4:	0800ad65 	.word	0x0800ad65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	015a      	lsls	r2, r3, #5
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	4413      	add	r3, r2
 800ad00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad04:	461a      	mov	r2, r3
 800ad06:	f240 439d 	movw	r3, #1181	; 0x49d
 800ad0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ad0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	da10      	bge.n	800ad36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	015a      	lsls	r2, r3, #5
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	78fa      	ldrb	r2, [r7, #3]
 800ad24:	0151      	lsls	r1, r2, #5
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	440a      	add	r2, r1
 800ad2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad32:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ad34:	e057      	b.n	800ade6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d051      	beq.n	800ade6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	78fa      	ldrb	r2, [r7, #3]
 800ad52:	0151      	lsls	r1, r2, #5
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	440a      	add	r2, r1
 800ad58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ad60:	60d3      	str	r3, [r2, #12]
      break;
 800ad62:	e040      	b.n	800ade6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad70:	461a      	mov	r2, r3
 800ad72:	f240 639d 	movw	r3, #1693	; 0x69d
 800ad76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ad78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	da34      	bge.n	800adea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	78fa      	ldrb	r2, [r7, #3]
 800ad90:	0151      	lsls	r1, r2, #5
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	440a      	add	r2, r1
 800ad96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ada0:	e023      	b.n	800adea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adae:	461a      	mov	r2, r3
 800adb0:	f240 2325 	movw	r3, #549	; 0x225
 800adb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800adb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	da17      	bge.n	800adee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	78fa      	ldrb	r2, [r7, #3]
 800adce:	0151      	lsls	r1, r2, #5
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	440a      	add	r2, r1
 800add4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800add8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800addc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800adde:	e006      	b.n	800adee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	77fb      	strb	r3, [r7, #31]
      break;
 800ade4:	e004      	b.n	800adf0 <USB_HC_Init+0x14c>
      break;
 800ade6:	bf00      	nop
 800ade8:	e002      	b.n	800adf0 <USB_HC_Init+0x14c>
      break;
 800adea:	bf00      	nop
 800adec:	e000      	b.n	800adf0 <USB_HC_Init+0x14c>
      break;
 800adee:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	78fa      	ldrb	r2, [r7, #3]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	693a      	ldr	r2, [r7, #16]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae0a:	f043 0302 	orr.w	r3, r3, #2
 800ae0e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae16:	699a      	ldr	r2, [r3, #24]
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	f003 030f 	and.w	r3, r3, #15
 800ae1e:	2101      	movs	r1, #1
 800ae20:	fa01 f303 	lsl.w	r3, r1, r3
 800ae24:	6939      	ldr	r1, [r7, #16]
 800ae26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ae3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	da03      	bge.n	800ae4a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ae42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae46:	61bb      	str	r3, [r7, #24]
 800ae48:	e001      	b.n	800ae4e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff feff 	bl	800ac52 <USB_GetHostSpeed>
 800ae54:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800ae56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d106      	bne.n	800ae6c <USB_HC_Init+0x1c8>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d003      	beq.n	800ae6c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ae64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e001      	b.n	800ae70 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae70:	787b      	ldrb	r3, [r7, #1]
 800ae72:	059b      	lsls	r3, r3, #22
 800ae74:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae78:	78bb      	ldrb	r3, [r7, #2]
 800ae7a:	02db      	lsls	r3, r3, #11
 800ae7c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae80:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae86:	049b      	lsls	r3, r3, #18
 800ae88:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ae8c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ae90:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ae94:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	0159      	lsls	r1, r3, #5
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	440b      	add	r3, r1
 800aea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aea6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aeac:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800aeae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d003      	beq.n	800aebe <USB_HC_Init+0x21a>
 800aeb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d10f      	bne.n	800aede <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800aebe:	78fb      	ldrb	r3, [r7, #3]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	0151      	lsls	r1, r2, #5
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	440a      	add	r2, r1
 800aed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aed8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aedc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800aede:	7ffb      	ldrb	r3, [r7, #31]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08c      	sub	sp, #48	; 0x30
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	785b      	ldrb	r3, [r3, #1]
 800aefe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800af00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af04:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d02d      	beq.n	800af6e <USB_HC_StartXfer+0x86>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	791b      	ldrb	r3, [r3, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d129      	bne.n	800af6e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d117      	bne.n	800af50 <USB_HC_StartXfer+0x68>
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	79db      	ldrb	r3, [r3, #7]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <USB_HC_StartXfer+0x48>
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	79db      	ldrb	r3, [r3, #7]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d10f      	bne.n	800af50 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	4413      	add	r3, r2
 800af38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	69fa      	ldr	r2, [r7, #28]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	6a3a      	ldr	r2, [r7, #32]
 800af44:	440a      	add	r2, r1
 800af46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800af50:	79fb      	ldrb	r3, [r7, #7]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10b      	bne.n	800af6e <USB_HC_StartXfer+0x86>
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	795b      	ldrb	r3, [r3, #5]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d107      	bne.n	800af6e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	785b      	ldrb	r3, [r3, #1]
 800af62:	4619      	mov	r1, r3
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 fa0f 	bl	800b388 <USB_DoPing>
      return HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e0f8      	b.n	800b160 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d018      	beq.n	800afa8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	8912      	ldrh	r2, [r2, #8]
 800af7e:	4413      	add	r3, r2
 800af80:	3b01      	subs	r3, #1
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	8912      	ldrh	r2, [r2, #8]
 800af86:	fbb3 f3f2 	udiv	r3, r3, r2
 800af8a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800af8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af8e:	8b7b      	ldrh	r3, [r7, #26]
 800af90:	429a      	cmp	r2, r3
 800af92:	d90b      	bls.n	800afac <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800af94:	8b7b      	ldrh	r3, [r7, #26]
 800af96:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800af98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	8912      	ldrh	r2, [r2, #8]
 800af9e:	fb03 f202 	mul.w	r2, r3, r2
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	611a      	str	r2, [r3, #16]
 800afa6:	e001      	b.n	800afac <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800afa8:	2301      	movs	r3, #1
 800afaa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	78db      	ldrb	r3, [r3, #3]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d007      	beq.n	800afc4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800afb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	8912      	ldrh	r2, [r2, #8]
 800afba:	fb03 f202 	mul.w	r2, r3, r2
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	611a      	str	r2, [r3, #16]
 800afc2:	e003      	b.n	800afcc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	695a      	ldr	r2, [r3, #20]
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800afd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afd6:	04d9      	lsls	r1, r3, #19
 800afd8:	4b63      	ldr	r3, [pc, #396]	; (800b168 <USB_HC_StartXfer+0x280>)
 800afda:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afdc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	7a9b      	ldrb	r3, [r3, #10]
 800afe2:	075b      	lsls	r3, r3, #29
 800afe4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800afe8:	69f9      	ldr	r1, [r7, #28]
 800afea:	0148      	lsls	r0, r1, #5
 800afec:	6a39      	ldr	r1, [r7, #32]
 800afee:	4401      	add	r1, r0
 800aff0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aff4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800aff6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d009      	beq.n	800b012 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	68d9      	ldr	r1, [r3, #12]
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b00e:	460a      	mov	r2, r1
 800b010:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f003 0301 	and.w	r3, r3, #1
 800b01e:	2b00      	cmp	r3, #0
 800b020:	bf0c      	ite	eq
 800b022:	2301      	moveq	r3, #1
 800b024:	2300      	movne	r3, #0
 800b026:	b2db      	uxtb	r3, r3
 800b028:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	4413      	add	r3, r2
 800b032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	69fa      	ldr	r2, [r7, #28]
 800b03a:	0151      	lsls	r1, r2, #5
 800b03c:	6a3a      	ldr	r2, [r7, #32]
 800b03e:	440a      	add	r2, r1
 800b040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b044:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b048:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	015a      	lsls	r2, r3, #5
 800b04e:	6a3b      	ldr	r3, [r7, #32]
 800b050:	4413      	add	r3, r2
 800b052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	7e7b      	ldrb	r3, [r7, #25]
 800b05a:	075b      	lsls	r3, r3, #29
 800b05c:	69f9      	ldr	r1, [r7, #28]
 800b05e:	0148      	lsls	r0, r1, #5
 800b060:	6a39      	ldr	r1, [r7, #32]
 800b062:	4401      	add	r1, r0
 800b064:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b068:	4313      	orrs	r3, r2
 800b06a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	6a3b      	ldr	r3, [r7, #32]
 800b072:	4413      	add	r3, r2
 800b074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b082:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	78db      	ldrb	r3, [r3, #3]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	e003      	b.n	800b09e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b09c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0a4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b0b8:	79fb      	ldrb	r3, [r7, #7]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e04e      	b.n	800b160 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	78db      	ldrb	r3, [r3, #3]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d149      	bne.n	800b15e <USB_HC_StartXfer+0x276>
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d045      	beq.n	800b15e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	79db      	ldrb	r3, [r3, #7]
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d830      	bhi.n	800b13c <USB_HC_StartXfer+0x254>
 800b0da:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <USB_HC_StartXfer+0x1f8>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b0f1 	.word	0x0800b0f1
 800b0e4:	0800b115 	.word	0x0800b115
 800b0e8:	0800b0f1 	.word	0x0800b0f1
 800b0ec:	0800b115 	.word	0x0800b115
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	3303      	adds	r3, #3
 800b0f6:	089b      	lsrs	r3, r3, #2
 800b0f8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b0fa:	8afa      	ldrh	r2, [r7, #22]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b100:	b29b      	uxth	r3, r3
 800b102:	429a      	cmp	r2, r3
 800b104:	d91c      	bls.n	800b140 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	f043 0220 	orr.w	r2, r3, #32
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	619a      	str	r2, [r3, #24]
        }
        break;
 800b112:	e015      	b.n	800b140 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	3303      	adds	r3, #3
 800b11a:	089b      	lsrs	r3, r3, #2
 800b11c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b11e:	8afa      	ldrh	r2, [r7, #22]
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	b29b      	uxth	r3, r3
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d90a      	bls.n	800b144 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	619a      	str	r2, [r3, #24]
        }
        break;
 800b13a:	e003      	b.n	800b144 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b13c:	bf00      	nop
 800b13e:	e002      	b.n	800b146 <USB_HC_StartXfer+0x25e>
        break;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <USB_HC_StartXfer+0x25e>
        break;
 800b144:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	68d9      	ldr	r1, [r3, #12]
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	785a      	ldrb	r2, [r3, #1]
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	b29b      	uxth	r3, r3
 800b154:	2000      	movs	r0, #0
 800b156:	9000      	str	r0, [sp, #0]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f7ff fb31 	bl	800a7c0 <USB_WritePacket>
  }

  return HAL_OK;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3728      	adds	r7, #40	; 0x28
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	1ff80000 	.word	0x1ff80000

0800b16c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b17e:	695b      	ldr	r3, [r3, #20]
 800b180:	b29b      	uxth	r3, r3
}
 800b182:	4618      	mov	r0, r3
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b18e:	b480      	push	{r7}
 800b190:	b089      	sub	sp, #36	; 0x24
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
 800b196:	460b      	mov	r3, r1
 800b198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	0c9b      	lsrs	r3, r3, #18
 800b1b6:	f003 0303 	and.w	r3, r3, #3
 800b1ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	015a      	lsls	r2, r3, #5
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	0fdb      	lsrs	r3, r3, #31
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b20      	cmp	r3, #32
 800b1dc:	d104      	bne.n	800b1e8 <USB_HC_Halt+0x5a>
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e0c8      	b.n	800b37a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d002      	beq.n	800b1f4 <USB_HC_Halt+0x66>
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d163      	bne.n	800b2bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	0151      	lsls	r1, r2, #5
 800b206:	69fa      	ldr	r2, [r7, #28]
 800b208:	440a      	add	r2, r1
 800b20a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b20e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b212:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f003 0320 	and.w	r3, r3, #32
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f040 80ab 	bne.w	800b378 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d133      	bne.n	800b296 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b22e:	69bb      	ldr	r3, [r7, #24]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	4413      	add	r3, r2
 800b236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	69ba      	ldr	r2, [r7, #24]
 800b23e:	0151      	lsls	r1, r2, #5
 800b240:	69fa      	ldr	r2, [r7, #28]
 800b242:	440a      	add	r2, r1
 800b244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b24c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	4413      	add	r3, r2
 800b256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	69fa      	ldr	r2, [r7, #28]
 800b262:	440a      	add	r2, r1
 800b264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b26c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b27a:	d81d      	bhi.n	800b2b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	4413      	add	r3, r2
 800b284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b28e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b292:	d0ec      	beq.n	800b26e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b294:	e070      	b.n	800b378 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	015a      	lsls	r2, r3, #5
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	69ba      	ldr	r2, [r7, #24]
 800b2a6:	0151      	lsls	r1, r2, #5
 800b2a8:	69fa      	ldr	r2, [r7, #28]
 800b2aa:	440a      	add	r2, r1
 800b2ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b2b6:	e05f      	b.n	800b378 <USB_HC_Halt+0x1ea>
            break;
 800b2b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b2ba:	e05d      	b.n	800b378 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	0151      	lsls	r1, r2, #5
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	440a      	add	r2, r1
 800b2d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b2d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d133      	bne.n	800b354 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	015a      	lsls	r2, r3, #5
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	0151      	lsls	r1, r2, #5
 800b2fe:	69fa      	ldr	r2, [r7, #28]
 800b300:	440a      	add	r2, r1
 800b302:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b306:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b30a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	4413      	add	r3, r2
 800b314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	0151      	lsls	r1, r2, #5
 800b31e:	69fa      	ldr	r2, [r7, #28]
 800b320:	440a      	add	r2, r1
 800b322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b32a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3301      	adds	r3, #1
 800b330:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b338:	d81d      	bhi.n	800b376 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	015a      	lsls	r2, r3, #5
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	4413      	add	r3, r2
 800b342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b34c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b350:	d0ec      	beq.n	800b32c <USB_HC_Halt+0x19e>
 800b352:	e011      	b.n	800b378 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	015a      	lsls	r2, r3, #5
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	69ba      	ldr	r2, [r7, #24]
 800b364:	0151      	lsls	r1, r2, #5
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	440a      	add	r2, r1
 800b36a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b36e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	e000      	b.n	800b378 <USB_HC_Halt+0x1ea>
          break;
 800b376:	bf00      	nop
    }
  }

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3724      	adds	r7, #36	; 0x24
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
	...

0800b388 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b398:	78fb      	ldrb	r3, [r7, #3]
 800b39a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b39c:	2301      	movs	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	04da      	lsls	r2, r3, #19
 800b3a4:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <USB_DoPing+0x74>)
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	0151      	lsls	r1, r2, #5
 800b3ac:	697a      	ldr	r2, [r7, #20]
 800b3ae:	440a      	add	r2, r1
 800b3b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b3d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	371c      	adds	r7, #28
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	1ff80000 	.word	0x1ff80000

0800b400 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b408:	2300      	movs	r3, #0
 800b40a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff f911 	bl	800a63c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b41a:	2110      	movs	r1, #16
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7ff f96b 	bl	800a6f8 <USB_FlushTxFifo>
 800b422:	4603      	mov	r3, r0
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff f997 	bl	800a760 <USB_FlushRxFifo>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b43c:	2300      	movs	r3, #0
 800b43e:	61bb      	str	r3, [r7, #24]
 800b440:	e01f      	b.n	800b482 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	015a      	lsls	r2, r3, #5
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	4413      	add	r3, r2
 800b44a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b458:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b468:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	4413      	add	r3, r2
 800b472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b476:	461a      	mov	r2, r3
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	3301      	adds	r3, #1
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	2b0f      	cmp	r3, #15
 800b486:	d9dc      	bls.n	800b442 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b488:	2300      	movs	r3, #0
 800b48a:	61bb      	str	r3, [r7, #24]
 800b48c:	e034      	b.n	800b4f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	4413      	add	r3, r2
 800b496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b4b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800b4b6:	69bb      	ldr	r3, [r7, #24]
 800b4b8:	015a      	lsls	r2, r3, #5
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4d4:	d80c      	bhi.n	800b4f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ec:	d0ec      	beq.n	800b4c8 <USB_StopHost+0xc8>
 800b4ee:	e000      	b.n	800b4f2 <USB_StopHost+0xf2>
        break;
 800b4f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	2b0f      	cmp	r3, #15
 800b4fc:	d9c7      	bls.n	800b48e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b504:	461a      	mov	r2, r3
 800b506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b50a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b512:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f7ff f880 	bl	800a61a <USB_EnableGlobalInt>

  return ret;
 800b51a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3720      	adds	r7, #32
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b528:	4904      	ldr	r1, [pc, #16]	; (800b53c <MX_FATFS_Init+0x18>)
 800b52a:	4805      	ldr	r0, [pc, #20]	; (800b540 <MX_FATFS_Init+0x1c>)
 800b52c:	f005 faba 	bl	8010aa4 <FATFS_LinkDriver>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	4b03      	ldr	r3, [pc, #12]	; (800b544 <MX_FATFS_Init+0x20>)
 800b536:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b538:	bf00      	nop
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	200033c0 	.word	0x200033c0
 800b540:	080132c8 	.word	0x080132c8
 800b544:	200033bc 	.word	0x200033bc

0800b548 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b548:	b480      	push	{r7}
 800b54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b54c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b54e:	4618      	mov	r0, r3
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	4619      	mov	r1, r3
 800b582:	4808      	ldr	r0, [pc, #32]	; (800b5a4 <USBH_status+0x34>)
 800b584:	f000 fe32 	bl	800c1ec <USBH_MSC_UnitIsReady>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d002      	beq.n	800b594 <USBH_status+0x24>
  {
    res = RES_OK;
 800b58e:	2300      	movs	r3, #0
 800b590:	73fb      	strb	r3, [r7, #15]
 800b592:	e001      	b.n	800b598 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b598:	7bfb      	ldrb	r3, [r7, #15]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20003858 	.word	0x20003858

0800b5a8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b094      	sub	sp, #80	; 0x50
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60b9      	str	r1, [r7, #8]
 800b5b0:	607a      	str	r2, [r7, #4]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b5be:	7bf9      	ldrb	r1, [r7, #15]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	4813      	ldr	r0, [pc, #76]	; (800b618 <USBH_read+0x70>)
 800b5ca:	f000 fe59 	bl	800c280 <USBH_MSC_Read>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d103      	bne.n	800b5dc <USBH_read+0x34>
  {
    res = RES_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b5da:	e017      	b.n	800b60c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b5dc:	f107 0210 	add.w	r2, r7, #16
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	480c      	ldr	r0, [pc, #48]	; (800b618 <USBH_read+0x70>)
 800b5e6:	f000 fe27 	bl	800c238 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b5ea:	7f7b      	ldrb	r3, [r7, #29]
 800b5ec:	2b3a      	cmp	r3, #58	; 0x3a
 800b5ee:	d005      	beq.n	800b5fc <USBH_read+0x54>
 800b5f0:	2b3a      	cmp	r3, #58	; 0x3a
 800b5f2:	dc07      	bgt.n	800b604 <USBH_read+0x5c>
 800b5f4:	2b04      	cmp	r3, #4
 800b5f6:	d001      	beq.n	800b5fc <USBH_read+0x54>
 800b5f8:	2b28      	cmp	r3, #40	; 0x28
 800b5fa:	d103      	bne.n	800b604 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b602:	e003      	b.n	800b60c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b604:	2301      	movs	r3, #1
 800b606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b60a:	bf00      	nop
    }
  }

  return res;
 800b60c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b610:	4618      	mov	r0, r3
 800b612:	3748      	adds	r7, #72	; 0x48
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	20003858 	.word	0x20003858

0800b61c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b094      	sub	sp, #80	; 0x50
 800b620:	af02      	add	r7, sp, #8
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	607a      	str	r2, [r7, #4]
 800b626:	603b      	str	r3, [r7, #0]
 800b628:	4603      	mov	r3, r0
 800b62a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b632:	7bf9      	ldrb	r1, [r7, #15]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	4817      	ldr	r0, [pc, #92]	; (800b69c <USBH_write+0x80>)
 800b63e:	f000 fe88 	bl	800c352 <USBH_MSC_Write>
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d103      	bne.n	800b650 <USBH_write+0x34>
  {
    res = RES_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b64e:	e01f      	b.n	800b690 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b650:	f107 0210 	add.w	r2, r7, #16
 800b654:	7bfb      	ldrb	r3, [r7, #15]
 800b656:	4619      	mov	r1, r3
 800b658:	4810      	ldr	r0, [pc, #64]	; (800b69c <USBH_write+0x80>)
 800b65a:	f000 fded 	bl	800c238 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b65e:	7f7b      	ldrb	r3, [r7, #29]
 800b660:	2b3a      	cmp	r3, #58	; 0x3a
 800b662:	d00d      	beq.n	800b680 <USBH_write+0x64>
 800b664:	2b3a      	cmp	r3, #58	; 0x3a
 800b666:	dc0f      	bgt.n	800b688 <USBH_write+0x6c>
 800b668:	2b28      	cmp	r3, #40	; 0x28
 800b66a:	d009      	beq.n	800b680 <USBH_write+0x64>
 800b66c:	2b28      	cmp	r3, #40	; 0x28
 800b66e:	dc0b      	bgt.n	800b688 <USBH_write+0x6c>
 800b670:	2b04      	cmp	r3, #4
 800b672:	d005      	beq.n	800b680 <USBH_write+0x64>
 800b674:	2b27      	cmp	r3, #39	; 0x27
 800b676:	d107      	bne.n	800b688 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b678:	2302      	movs	r3, #2
 800b67a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b67e:	e007      	b.n	800b690 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b680:	2303      	movs	r3, #3
 800b682:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b686:	e003      	b.n	800b690 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b68e:	bf00      	nop
    }
  }

  return res;
 800b690:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b694:	4618      	mov	r0, r3
 800b696:	3748      	adds	r7, #72	; 0x48
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	20003858 	.word	0x20003858

0800b6a0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b090      	sub	sp, #64	; 0x40
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	603a      	str	r2, [r7, #0]
 800b6aa:	71fb      	strb	r3, [r7, #7]
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b6b6:	79bb      	ldrb	r3, [r7, #6]
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d852      	bhi.n	800b762 <USBH_ioctl+0xc2>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <USBH_ioctl+0x24>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b6dd 	.word	0x0800b6dd
 800b6cc:	0800b707 	.word	0x0800b707
 800b6d0:	0800b733 	.word	0x0800b733
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b6da:	e045      	b.n	800b768 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b6dc:	f107 0208 	add.w	r2, r7, #8
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4823      	ldr	r0, [pc, #140]	; (800b774 <USBH_ioctl+0xd4>)
 800b6e6:	f000 fda7 	bl	800c238 <USBH_MSC_GetLUNInfo>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b6fc:	e034      	b.n	800b768 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b704:	e030      	b.n	800b768 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b706:	f107 0208 	add.w	r2, r7, #8
 800b70a:	79fb      	ldrb	r3, [r7, #7]
 800b70c:	4619      	mov	r1, r3
 800b70e:	4819      	ldr	r0, [pc, #100]	; (800b774 <USBH_ioctl+0xd4>)
 800b710:	f000 fd92 	bl	800c238 <USBH_MSC_GetLUNInfo>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d107      	bne.n	800b72a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b71a:	8a3b      	ldrh	r3, [r7, #16]
 800b71c:	461a      	mov	r2, r3
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b722:	2300      	movs	r3, #0
 800b724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b728:	e01e      	b.n	800b768 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b730:	e01a      	b.n	800b768 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b732:	f107 0208 	add.w	r2, r7, #8
 800b736:	79fb      	ldrb	r3, [r7, #7]
 800b738:	4619      	mov	r1, r3
 800b73a:	480e      	ldr	r0, [pc, #56]	; (800b774 <USBH_ioctl+0xd4>)
 800b73c:	f000 fd7c 	bl	800c238 <USBH_MSC_GetLUNInfo>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d109      	bne.n	800b75a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b746:	8a3b      	ldrh	r3, [r7, #16]
 800b748:	0a5b      	lsrs	r3, r3, #9
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b758:	e006      	b.n	800b768 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b760:	e002      	b.n	800b768 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b762:	2304      	movs	r3, #4
 800b764:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3740      	adds	r7, #64	; 0x40
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20003858 	.word	0x20003858

0800b778 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b778:	b590      	push	{r4, r7, lr}
 800b77a:	b089      	sub	sp, #36	; 0x24
 800b77c:	af04      	add	r7, sp, #16
 800b77e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b786:	7919      	ldrb	r1, [r3, #4]
 800b788:	2350      	movs	r3, #80	; 0x50
 800b78a:	2206      	movs	r2, #6
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f001 fc6b 	bl	800d068 <USBH_FindInterface>
 800b792:	4603      	mov	r3, r0
 800b794:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b796:	7bfb      	ldrb	r3, [r7, #15]
 800b798:	2bff      	cmp	r3, #255	; 0xff
 800b79a:	d002      	beq.n	800b7a2 <USBH_MSC_InterfaceInit+0x2a>
 800b79c:	7bfb      	ldrb	r3, [r7, #15]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d901      	bls.n	800b7a6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	e106      	b.n	800b9b4 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800b7a6:	7bfb      	ldrb	r3, [r7, #15]
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f001 fc40 	bl	800d030 <USBH_SelectInterface>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e0fa      	b.n	800b9b4 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b7c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b7c8:	f005 fcf4 	bl	80111b4 <malloc>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	e0e7      	b.n	800b9b4 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b7e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	68b8      	ldr	r0, [r7, #8]
 800b7ec:	f005 fd00 	bl	80111f0 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800b7f0:	7bfb      	ldrb	r3, [r7, #15]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	211a      	movs	r1, #26
 800b7f6:	fb01 f303 	mul.w	r3, r1, r3
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	b25b      	sxtb	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	da16      	bge.n	800b836 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	211a      	movs	r1, #26
 800b80e:	fb01 f303 	mul.w	r3, r1, r3
 800b812:	4413      	add	r3, r2
 800b814:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b818:	781a      	ldrb	r2, [r3, #0]
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b81e:	7bfb      	ldrb	r3, [r7, #15]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	211a      	movs	r1, #26
 800b824:	fb01 f303 	mul.w	r3, r1, r3
 800b828:	4413      	add	r3, r2
 800b82a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b82e:	881a      	ldrh	r2, [r3, #0]
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	815a      	strh	r2, [r3, #10]
 800b834:	e015      	b.n	800b862 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b836:	7bfb      	ldrb	r3, [r7, #15]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	211a      	movs	r1, #26
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	4413      	add	r3, r2
 800b842:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	211a      	movs	r1, #26
 800b852:	fb01 f303 	mul.w	r3, r1, r3
 800b856:	4413      	add	r3, r2
 800b858:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b85c:	881a      	ldrh	r2, [r3, #0]
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800b862:	7bfb      	ldrb	r3, [r7, #15]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	211a      	movs	r1, #26
 800b868:	fb01 f303 	mul.w	r3, r1, r3
 800b86c:	4413      	add	r3, r2
 800b86e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	b25b      	sxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	da16      	bge.n	800b8a8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	211a      	movs	r1, #26
 800b880:	fb01 f303 	mul.w	r3, r1, r3
 800b884:	4413      	add	r3, r2
 800b886:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b88a:	781a      	ldrb	r2, [r3, #0]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	211a      	movs	r1, #26
 800b896:	fb01 f303 	mul.w	r3, r1, r3
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b8a0:	881a      	ldrh	r2, [r3, #0]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	815a      	strh	r2, [r3, #10]
 800b8a6:	e015      	b.n	800b8d4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b8a8:	7bfb      	ldrb	r3, [r7, #15]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	211a      	movs	r1, #26
 800b8ae:	fb01 f303 	mul.w	r3, r1, r3
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b8b8:	781a      	ldrb	r2, [r3, #0]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	211a      	movs	r1, #26
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b8ce:	881a      	ldrh	r2, [r3, #0]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	799b      	ldrb	r3, [r3, #6]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f002 fed6 	bl	800e69e <USBH_AllocPipe>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	79db      	ldrb	r3, [r3, #7]
 800b8fe:	4619      	mov	r1, r3
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f002 fecc 	bl	800e69e <USBH_AllocPipe>
 800b906:	4603      	mov	r3, r0
 800b908:	461a      	mov	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fdc4 	bl	800c49c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	799b      	ldrb	r3, [r3, #6]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01e      	beq.n	800b95a <USBH_MSC_InterfaceInit+0x1e2>
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	891b      	ldrh	r3, [r3, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d01a      	beq.n	800b95a <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	7959      	ldrb	r1, [r3, #5]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	7998      	ldrb	r0, [r3, #6]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	8912      	ldrh	r2, [r2, #8]
 800b93c:	9202      	str	r2, [sp, #8]
 800b93e:	2202      	movs	r2, #2
 800b940:	9201      	str	r2, [sp, #4]
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	4623      	mov	r3, r4
 800b946:	4602      	mov	r2, r0
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f002 fe79 	bl	800e640 <USBH_OpenPipe>
 800b94e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	79db      	ldrb	r3, [r3, #7]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d02c      	beq.n	800b9b2 <USBH_MSC_InterfaceInit+0x23a>
 800b958:	e001      	b.n	800b95e <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e02a      	b.n	800b9b4 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	895b      	ldrh	r3, [r3, #10]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d025      	beq.n	800b9b2 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	7919      	ldrb	r1, [r3, #4]
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	79d8      	ldrb	r0, [r3, #7]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	8952      	ldrh	r2, [r2, #10]
 800b97e:	9202      	str	r2, [sp, #8]
 800b980:	2202      	movs	r2, #2
 800b982:	9201      	str	r2, [sp, #4]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4623      	mov	r3, r4
 800b988:	4602      	mov	r2, r0
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f002 fe58 	bl	800e640 <USBH_OpenPipe>
 800b990:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	791b      	ldrb	r3, [r3, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f005 fb28 	bl	8010ff0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	795b      	ldrb	r3, [r3, #5]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f005 fb21 	bl	8010ff0 <USBH_LL_SetToggle>

  return USBH_OK;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	e000      	b.n	800b9b4 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800b9b2:	2303      	movs	r3, #3
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3714      	adds	r7, #20
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd90      	pop	{r4, r7, pc}

0800b9bc <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	795b      	ldrb	r3, [r3, #5]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00e      	beq.n	800b9f4 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	795b      	ldrb	r3, [r3, #5]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f002 fe4e 	bl	800e67e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	795b      	ldrb	r3, [r3, #5]
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f002 fe79 	bl	800e6e0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	791b      	ldrb	r3, [r3, #4]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00e      	beq.n	800ba1a <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	791b      	ldrb	r3, [r3, #4]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f002 fe3b 	bl	800e67e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	791b      	ldrb	r3, [r3, #4]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f002 fe66 	bl	800e6e0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00b      	beq.n	800ba3e <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f005 fbc8 	bl	80111c4 <free>
    phost->pActiveClass->pData = 0U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3710      	adds	r7, #16
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	7b9b      	ldrb	r3, [r3, #14]
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d041      	beq.n	800baea <USBH_MSC_ClassRequest+0xa2>
 800ba66:	2b03      	cmp	r3, #3
 800ba68:	dc4b      	bgt.n	800bb02 <USBH_MSC_ClassRequest+0xba>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <USBH_MSC_ClassRequest+0x2a>
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d147      	bne.n	800bb02 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fcf1 	bl	800c45e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b03      	cmp	r3, #3
 800ba84:	d104      	bne.n	800ba90 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d137      	bne.n	800bb06 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	d804      	bhi.n	800baa8 <USBH_MSC_ClassRequest+0x60>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	e000      	b.n	800baaa <USBH_MSC_ClassRequest+0x62>
 800baa8:	2202      	movs	r2, #2
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800baae:	2300      	movs	r3, #0
 800bab0:	73bb      	strb	r3, [r7, #14]
 800bab2:	e014      	b.n	800bade <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
 800bab6:	68ba      	ldr	r2, [r7, #8]
 800bab8:	2134      	movs	r1, #52	; 0x34
 800baba:	fb01 f303 	mul.w	r3, r1, r3
 800babe:	4413      	add	r3, r2
 800bac0:	3392      	adds	r3, #146	; 0x92
 800bac2:	2202      	movs	r2, #2
 800bac4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800bac6:	7bbb      	ldrb	r3, [r7, #14]
 800bac8:	68ba      	ldr	r2, [r7, #8]
 800baca:	2134      	movs	r1, #52	; 0x34
 800bacc:	fb01 f303 	mul.w	r3, r1, r3
 800bad0:	4413      	add	r3, r2
 800bad2:	33c1      	adds	r3, #193	; 0xc1
 800bad4:	2200      	movs	r2, #0
 800bad6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	3301      	adds	r3, #1
 800badc:	73bb      	strb	r3, [r7, #14]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	7bba      	ldrb	r2, [r7, #14]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d3e5      	bcc.n	800bab4 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800bae8:	e00d      	b.n	800bb06 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800baea:	2100      	movs	r1, #0
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f002 f888 	bl	800dc02 <USBH_ClrFeature>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d108      	bne.n	800bb0a <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	7bda      	ldrb	r2, [r3, #15]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	739a      	strb	r2, [r3, #14]
      }
      break;
 800bb00:	e003      	b.n	800bb0a <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800bb02:	bf00      	nop
 800bb04:	e002      	b.n	800bb0c <USBH_MSC_ClassRequest+0xc4>
      break;
 800bb06:	bf00      	nop
 800bb08:	e000      	b.n	800bb0c <USBH_MSC_ClassRequest+0xc4>
      break;
 800bb0a:	bf00      	nop
  }

  return status;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb26:	69db      	ldr	r3, [r3, #28]
 800bb28:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800bb32:	2301      	movs	r3, #1
 800bb34:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	7b1b      	ldrb	r3, [r3, #12]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <USBH_MSC_Process+0x2e>
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	f000 8271 	beq.w	800c026 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800bb44:	e272      	b.n	800c02c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	429a      	cmp	r2, r3
 800bb54:	f080 824f 	bcs.w	800bff6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb5e:	4619      	mov	r1, r3
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	2334      	movs	r3, #52	; 0x34
 800bb64:	fb01 f303 	mul.w	r3, r1, r3
 800bb68:	4413      	add	r3, r2
 800bb6a:	3391      	adds	r3, #145	; 0x91
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb76:	4619      	mov	r1, r3
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	2334      	movs	r3, #52	; 0x34
 800bb7c:	fb01 f303 	mul.w	r3, r1, r3
 800bb80:	4413      	add	r3, r2
 800bb82:	3390      	adds	r3, #144	; 0x90
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b08      	cmp	r3, #8
 800bb88:	f200 8243 	bhi.w	800c012 <USBH_MSC_Process+0x4fa>
 800bb8c:	a201      	add	r2, pc, #4	; (adr r2, 800bb94 <USBH_MSC_Process+0x7c>)
 800bb8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb92:	bf00      	nop
 800bb94:	0800bbb9 	.word	0x0800bbb9
 800bb98:	0800c013 	.word	0x0800c013
 800bb9c:	0800bc81 	.word	0x0800bc81
 800bba0:	0800be05 	.word	0x0800be05
 800bba4:	0800bbdf 	.word	0x0800bbdf
 800bba8:	0800bed1 	.word	0x0800bed1
 800bbac:	0800c013 	.word	0x0800c013
 800bbb0:	0800c013 	.word	0x0800c013
 800bbb4:	0800bfe5 	.word	0x0800bfe5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	2334      	movs	r3, #52	; 0x34
 800bbc4:	fb01 f303 	mul.w	r3, r1, r3
 800bbc8:	4413      	add	r3, r2
 800bbca:	3390      	adds	r3, #144	; 0x90
 800bbcc:	2204      	movs	r2, #4
 800bbce:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800bbdc:	e222      	b.n	800c024 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbe4:	b2d9      	uxtb	r1, r3
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbec:	461a      	mov	r2, r3
 800bbee:	2334      	movs	r3, #52	; 0x34
 800bbf0:	fb02 f303 	mul.w	r3, r2, r3
 800bbf4:	3398      	adds	r3, #152	; 0x98
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	3307      	adds	r3, #7
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 ff6a 	bl	800cad8 <USBH_MSC_SCSI_Inquiry>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10b      	bne.n	800bc26 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc14:	4619      	mov	r1, r3
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	2334      	movs	r3, #52	; 0x34
 800bc1a:	fb01 f303 	mul.w	r3, r1, r3
 800bc1e:	4413      	add	r3, r2
 800bc20:	3390      	adds	r3, #144	; 0x90
 800bc22:	2202      	movs	r2, #2
 800bc24:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d10c      	bne.n	800bc46 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc32:	4619      	mov	r1, r3
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	2334      	movs	r3, #52	; 0x34
 800bc38:	fb01 f303 	mul.w	r3, r1, r3
 800bc3c:	4413      	add	r3, r2
 800bc3e:	3390      	adds	r3, #144	; 0x90
 800bc40:	2205      	movs	r2, #5
 800bc42:	701a      	strb	r2, [r3, #0]
            break;
 800bc44:	e1e7      	b.n	800c016 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	f040 81e4 	bne.w	800c016 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc54:	4619      	mov	r1, r3
 800bc56:	693a      	ldr	r2, [r7, #16]
 800bc58:	2334      	movs	r3, #52	; 0x34
 800bc5a:	fb01 f303 	mul.w	r3, r1, r3
 800bc5e:	4413      	add	r3, r2
 800bc60:	3390      	adds	r3, #144	; 0x90
 800bc62:	2201      	movs	r2, #1
 800bc64:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	2334      	movs	r3, #52	; 0x34
 800bc72:	fb01 f303 	mul.w	r3, r1, r3
 800bc76:	4413      	add	r3, r2
 800bc78:	3391      	adds	r3, #145	; 0x91
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	701a      	strb	r2, [r3, #0]
            break;
 800bc7e:	e1ca      	b.n	800c016 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 fe66 	bl	800c95c <USBH_MSC_SCSI_TestUnitReady>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d149      	bne.n	800bd2e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bca0:	4619      	mov	r1, r3
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	2334      	movs	r3, #52	; 0x34
 800bca6:	fb01 f303 	mul.w	r3, r1, r3
 800bcaa:	4413      	add	r3, r2
 800bcac:	3392      	adds	r3, #146	; 0x92
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00c      	beq.n	800bcce <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcba:	4619      	mov	r1, r3
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	2334      	movs	r3, #52	; 0x34
 800bcc0:	fb01 f303 	mul.w	r3, r1, r3
 800bcc4:	4413      	add	r3, r2
 800bcc6:	33c1      	adds	r3, #193	; 0xc1
 800bcc8:	2201      	movs	r2, #1
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	e00b      	b.n	800bce6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	2334      	movs	r3, #52	; 0x34
 800bcda:	fb01 f303 	mul.w	r3, r1, r3
 800bcde:	4413      	add	r3, r2
 800bce0:	33c1      	adds	r3, #193	; 0xc1
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcec:	4619      	mov	r1, r3
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	2334      	movs	r3, #52	; 0x34
 800bcf2:	fb01 f303 	mul.w	r3, r1, r3
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3390      	adds	r3, #144	; 0x90
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd04:	4619      	mov	r1, r3
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	2334      	movs	r3, #52	; 0x34
 800bd0a:	fb01 f303 	mul.w	r3, r1, r3
 800bd0e:	4413      	add	r3, r2
 800bd10:	3391      	adds	r3, #145	; 0x91
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	2334      	movs	r3, #52	; 0x34
 800bd22:	fb01 f303 	mul.w	r3, r1, r3
 800bd26:	4413      	add	r3, r2
 800bd28:	3392      	adds	r3, #146	; 0x92
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d14a      	bne.n	800bdca <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	2334      	movs	r3, #52	; 0x34
 800bd40:	fb01 f303 	mul.w	r3, r1, r3
 800bd44:	4413      	add	r3, r2
 800bd46:	3392      	adds	r3, #146	; 0x92
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d00c      	beq.n	800bd68 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd54:	4619      	mov	r1, r3
 800bd56:	693a      	ldr	r2, [r7, #16]
 800bd58:	2334      	movs	r3, #52	; 0x34
 800bd5a:	fb01 f303 	mul.w	r3, r1, r3
 800bd5e:	4413      	add	r3, r2
 800bd60:	33c1      	adds	r3, #193	; 0xc1
 800bd62:	2201      	movs	r2, #1
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	e00b      	b.n	800bd80 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd6e:	4619      	mov	r1, r3
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	2334      	movs	r3, #52	; 0x34
 800bd74:	fb01 f303 	mul.w	r3, r1, r3
 800bd78:	4413      	add	r3, r2
 800bd7a:	33c1      	adds	r3, #193	; 0xc1
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd86:	4619      	mov	r1, r3
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	2334      	movs	r3, #52	; 0x34
 800bd8c:	fb01 f303 	mul.w	r3, r1, r3
 800bd90:	4413      	add	r3, r2
 800bd92:	3390      	adds	r3, #144	; 0x90
 800bd94:	2205      	movs	r2, #5
 800bd96:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd9e:	4619      	mov	r1, r3
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	2334      	movs	r3, #52	; 0x34
 800bda4:	fb01 f303 	mul.w	r3, r1, r3
 800bda8:	4413      	add	r3, r2
 800bdaa:	3391      	adds	r3, #145	; 0x91
 800bdac:	2201      	movs	r2, #1
 800bdae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	2334      	movs	r3, #52	; 0x34
 800bdbc:	fb01 f303 	mul.w	r3, r1, r3
 800bdc0:	4413      	add	r3, r2
 800bdc2:	3392      	adds	r3, #146	; 0x92
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	701a      	strb	r2, [r3, #0]
            break;
 800bdc8:	e127      	b.n	800c01a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800bdca:	7bbb      	ldrb	r3, [r7, #14]
 800bdcc:	2b04      	cmp	r3, #4
 800bdce:	f040 8124 	bne.w	800c01a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdd8:	4619      	mov	r1, r3
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	2334      	movs	r3, #52	; 0x34
 800bdde:	fb01 f303 	mul.w	r3, r1, r3
 800bde2:	4413      	add	r3, r2
 800bde4:	3390      	adds	r3, #144	; 0x90
 800bde6:	2201      	movs	r2, #1
 800bde8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	2334      	movs	r3, #52	; 0x34
 800bdf6:	fb01 f303 	mul.w	r3, r1, r3
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3391      	adds	r3, #145	; 0x91
 800bdfe:	2202      	movs	r2, #2
 800be00:	701a      	strb	r2, [r3, #0]
            break;
 800be02:	e10a      	b.n	800c01a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be0a:	b2d9      	uxtb	r1, r3
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be12:	461a      	mov	r2, r3
 800be14:	2334      	movs	r3, #52	; 0x34
 800be16:	fb02 f303 	mul.w	r3, r2, r3
 800be1a:	3390      	adds	r3, #144	; 0x90
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	4413      	add	r3, r2
 800be20:	3304      	adds	r3, #4
 800be22:	461a      	mov	r2, r3
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fddc 	bl	800c9e2 <USBH_MSC_SCSI_ReadCapacity>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800be2e:	7bfb      	ldrb	r3, [r7, #15]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d120      	bne.n	800be76 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be3a:	4619      	mov	r1, r3
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	2334      	movs	r3, #52	; 0x34
 800be40:	fb01 f303 	mul.w	r3, r1, r3
 800be44:	4413      	add	r3, r2
 800be46:	3390      	adds	r3, #144	; 0x90
 800be48:	2201      	movs	r2, #1
 800be4a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be52:	4619      	mov	r1, r3
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	2334      	movs	r3, #52	; 0x34
 800be58:	fb01 f303 	mul.w	r3, r1, r3
 800be5c:	4413      	add	r3, r2
 800be5e:	3391      	adds	r3, #145	; 0x91
 800be60:	2200      	movs	r2, #0
 800be62:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be6a:	3301      	adds	r3, #1
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800be74:	e0d3      	b.n	800c01e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d10c      	bne.n	800be96 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800be82:	4619      	mov	r1, r3
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	2334      	movs	r3, #52	; 0x34
 800be88:	fb01 f303 	mul.w	r3, r1, r3
 800be8c:	4413      	add	r3, r2
 800be8e:	3390      	adds	r3, #144	; 0x90
 800be90:	2205      	movs	r2, #5
 800be92:	701a      	strb	r2, [r3, #0]
            break;
 800be94:	e0c3      	b.n	800c01e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800be96:	7bfb      	ldrb	r3, [r7, #15]
 800be98:	2b04      	cmp	r3, #4
 800be9a:	f040 80c0 	bne.w	800c01e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bea4:	4619      	mov	r1, r3
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	2334      	movs	r3, #52	; 0x34
 800beaa:	fb01 f303 	mul.w	r3, r1, r3
 800beae:	4413      	add	r3, r2
 800beb0:	3390      	adds	r3, #144	; 0x90
 800beb2:	2201      	movs	r2, #1
 800beb4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bebc:	4619      	mov	r1, r3
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	2334      	movs	r3, #52	; 0x34
 800bec2:	fb01 f303 	mul.w	r3, r1, r3
 800bec6:	4413      	add	r3, r2
 800bec8:	3391      	adds	r3, #145	; 0x91
 800beca:	2202      	movs	r2, #2
 800becc:	701a      	strb	r2, [r3, #0]
            break;
 800bece:	e0a6      	b.n	800c01e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bed6:	b2d9      	uxtb	r1, r3
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bede:	461a      	mov	r2, r3
 800bee0:	2334      	movs	r3, #52	; 0x34
 800bee2:	fb02 f303 	mul.w	r3, r2, r3
 800bee6:	3398      	adds	r3, #152	; 0x98
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	4413      	add	r3, r2
 800beec:	3304      	adds	r3, #4
 800beee:	461a      	mov	r2, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fe96 	bl	800cc22 <USBH_MSC_SCSI_RequestSense>
 800bef6:	4603      	mov	r3, r0
 800bef8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d145      	bne.n	800bf8c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf06:	4619      	mov	r1, r3
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	2334      	movs	r3, #52	; 0x34
 800bf0c:	fb01 f303 	mul.w	r3, r1, r3
 800bf10:	4413      	add	r3, r2
 800bf12:	339c      	adds	r3, #156	; 0x9c
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	2b06      	cmp	r3, #6
 800bf18:	d00c      	beq.n	800bf34 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf20:	4619      	mov	r1, r3
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	2334      	movs	r3, #52	; 0x34
 800bf26:	fb01 f303 	mul.w	r3, r1, r3
 800bf2a:	4413      	add	r3, r2
 800bf2c:	339c      	adds	r3, #156	; 0x9c
 800bf2e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d117      	bne.n	800bf64 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	f242 720f 	movw	r2, #9999	; 0x270f
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d80c      	bhi.n	800bf64 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf50:	4619      	mov	r1, r3
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	2334      	movs	r3, #52	; 0x34
 800bf56:	fb01 f303 	mul.w	r3, r1, r3
 800bf5a:	4413      	add	r3, r2
 800bf5c:	3390      	adds	r3, #144	; 0x90
 800bf5e:	2202      	movs	r2, #2
 800bf60:	701a      	strb	r2, [r3, #0]
                  break;
 800bf62:	e05f      	b.n	800c024 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	2334      	movs	r3, #52	; 0x34
 800bf70:	fb01 f303 	mul.w	r3, r1, r3
 800bf74:	4413      	add	r3, r2
 800bf76:	3390      	adds	r3, #144	; 0x90
 800bf78:	2201      	movs	r2, #1
 800bf7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf82:	3301      	adds	r3, #1
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800bf8c:	7bfb      	ldrb	r3, [r7, #15]
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d10c      	bne.n	800bfac <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bf98:	4619      	mov	r1, r3
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	2334      	movs	r3, #52	; 0x34
 800bf9e:	fb01 f303 	mul.w	r3, r1, r3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	3390      	adds	r3, #144	; 0x90
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	701a      	strb	r2, [r3, #0]
            break;
 800bfaa:	e03a      	b.n	800c022 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bfac:	7bfb      	ldrb	r3, [r7, #15]
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d137      	bne.n	800c022 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfb8:	4619      	mov	r1, r3
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	2334      	movs	r3, #52	; 0x34
 800bfbe:	fb01 f303 	mul.w	r3, r1, r3
 800bfc2:	4413      	add	r3, r2
 800bfc4:	3390      	adds	r3, #144	; 0x90
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	2334      	movs	r3, #52	; 0x34
 800bfd6:	fb01 f303 	mul.w	r3, r1, r3
 800bfda:	4413      	add	r3, r2
 800bfdc:	3391      	adds	r3, #145	; 0x91
 800bfde:	2202      	movs	r2, #2
 800bfe0:	701a      	strb	r2, [r3, #0]
            break;
 800bfe2:	e01e      	b.n	800c022 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bfea:	3301      	adds	r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bff4:	e016      	b.n	800c024 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	2201      	movs	r2, #1
 800c002:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c00a:	2102      	movs	r1, #2
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	4798      	blx	r3
      break;
 800c010:	e00c      	b.n	800c02c <USBH_MSC_Process+0x514>
            break;
 800c012:	bf00      	nop
 800c014:	e00a      	b.n	800c02c <USBH_MSC_Process+0x514>
            break;
 800c016:	bf00      	nop
 800c018:	e008      	b.n	800c02c <USBH_MSC_Process+0x514>
            break;
 800c01a:	bf00      	nop
 800c01c:	e006      	b.n	800c02c <USBH_MSC_Process+0x514>
            break;
 800c01e:	bf00      	nop
 800c020:	e004      	b.n	800c02c <USBH_MSC_Process+0x514>
            break;
 800c022:	bf00      	nop
      break;
 800c024:	e002      	b.n	800c02c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	75fb      	strb	r3, [r7, #23]
      break;
 800c02a:	bf00      	nop
  }
  return error;
 800c02c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop

0800c038 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b088      	sub	sp, #32
 800c052:	af02      	add	r7, sp, #8
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800c064:	2301      	movs	r3, #1
 800c066:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800c068:	2301      	movs	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800c06c:	78fb      	ldrb	r3, [r7, #3]
 800c06e:	693a      	ldr	r2, [r7, #16]
 800c070:	2134      	movs	r1, #52	; 0x34
 800c072:	fb01 f303 	mul.w	r3, r1, r3
 800c076:	4413      	add	r3, r2
 800c078:	3390      	adds	r3, #144	; 0x90
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b07      	cmp	r3, #7
 800c07e:	d03c      	beq.n	800c0fa <USBH_MSC_RdWrProcess+0xac>
 800c080:	2b07      	cmp	r3, #7
 800c082:	f300 80a7 	bgt.w	800c1d4 <USBH_MSC_RdWrProcess+0x186>
 800c086:	2b05      	cmp	r3, #5
 800c088:	d06c      	beq.n	800c164 <USBH_MSC_RdWrProcess+0x116>
 800c08a:	2b06      	cmp	r3, #6
 800c08c:	f040 80a2 	bne.w	800c1d4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800c090:	78f9      	ldrb	r1, [r7, #3]
 800c092:	2300      	movs	r3, #0
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	2200      	movs	r2, #0
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fea5 	bl	800cdea <USBH_MSC_SCSI_Read>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c0a4:	7bfb      	ldrb	r3, [r7, #15]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d10b      	bne.n	800c0c2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	2134      	movs	r1, #52	; 0x34
 800c0b0:	fb01 f303 	mul.w	r3, r1, r3
 800c0b4:	4413      	add	r3, r2
 800c0b6:	3390      	adds	r3, #144	; 0x90
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c0c0:	e08a      	b.n	800c1d8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d109      	bne.n	800c0dc <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	2134      	movs	r1, #52	; 0x34
 800c0ce:	fb01 f303 	mul.w	r3, r1, r3
 800c0d2:	4413      	add	r3, r2
 800c0d4:	3390      	adds	r3, #144	; 0x90
 800c0d6:	2205      	movs	r2, #5
 800c0d8:	701a      	strb	r2, [r3, #0]
      break;
 800c0da:	e07d      	b.n	800c1d8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c0dc:	7bfb      	ldrb	r3, [r7, #15]
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	d17a      	bne.n	800c1d8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c0e2:	78fb      	ldrb	r3, [r7, #3]
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	2134      	movs	r1, #52	; 0x34
 800c0e8:	fb01 f303 	mul.w	r3, r1, r3
 800c0ec:	4413      	add	r3, r2
 800c0ee:	3390      	adds	r3, #144	; 0x90
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c0f4:	2302      	movs	r3, #2
 800c0f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c0f8:	e06e      	b.n	800c1d8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800c0fa:	78f9      	ldrb	r1, [r7, #3]
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	2300      	movs	r3, #0
 800c102:	2200      	movs	r2, #0
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fe05 	bl	800cd14 <USBH_MSC_SCSI_Write>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10b      	bne.n	800c12c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	2134      	movs	r1, #52	; 0x34
 800c11a:	fb01 f303 	mul.w	r3, r1, r3
 800c11e:	4413      	add	r3, r2
 800c120:	3390      	adds	r3, #144	; 0x90
 800c122:	2201      	movs	r2, #1
 800c124:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c12a:	e057      	b.n	800c1dc <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800c12c:	7bfb      	ldrb	r3, [r7, #15]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d109      	bne.n	800c146 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800c132:	78fb      	ldrb	r3, [r7, #3]
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	2134      	movs	r1, #52	; 0x34
 800c138:	fb01 f303 	mul.w	r3, r1, r3
 800c13c:	4413      	add	r3, r2
 800c13e:	3390      	adds	r3, #144	; 0x90
 800c140:	2205      	movs	r2, #5
 800c142:	701a      	strb	r2, [r3, #0]
      break;
 800c144:	e04a      	b.n	800c1dc <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	2b04      	cmp	r3, #4
 800c14a:	d147      	bne.n	800c1dc <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c14c:	78fb      	ldrb	r3, [r7, #3]
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	2134      	movs	r1, #52	; 0x34
 800c152:	fb01 f303 	mul.w	r3, r1, r3
 800c156:	4413      	add	r3, r2
 800c158:	3390      	adds	r3, #144	; 0x90
 800c15a:	2208      	movs	r2, #8
 800c15c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c15e:	2302      	movs	r3, #2
 800c160:	75fb      	strb	r3, [r7, #23]
      break;
 800c162:	e03b      	b.n	800c1dc <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800c164:	78fb      	ldrb	r3, [r7, #3]
 800c166:	2234      	movs	r2, #52	; 0x34
 800c168:	fb02 f303 	mul.w	r3, r2, r3
 800c16c:	3398      	adds	r3, #152	; 0x98
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	4413      	add	r3, r2
 800c172:	1d1a      	adds	r2, r3, #4
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f000 fd52 	bl	800cc22 <USBH_MSC_SCSI_RequestSense>
 800c17e:	4603      	mov	r3, r0
 800c180:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d113      	bne.n	800c1b0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	693a      	ldr	r2, [r7, #16]
 800c18c:	2134      	movs	r1, #52	; 0x34
 800c18e:	fb01 f303 	mul.w	r3, r1, r3
 800c192:	4413      	add	r3, r2
 800c194:	3390      	adds	r3, #144	; 0x90
 800c196:	2201      	movs	r2, #1
 800c198:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	2134      	movs	r1, #52	; 0x34
 800c1a0:	fb01 f303 	mul.w	r3, r1, r3
 800c1a4:	4413      	add	r3, r2
 800c1a6:	3391      	adds	r3, #145	; 0x91
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800c1ac:	2302      	movs	r3, #2
 800c1ae:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800c1b0:	7bfb      	ldrb	r3, [r7, #15]
 800c1b2:	2b02      	cmp	r3, #2
 800c1b4:	d014      	beq.n	800c1e0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800c1b6:	7bfb      	ldrb	r3, [r7, #15]
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d111      	bne.n	800c1e0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800c1bc:	78fb      	ldrb	r3, [r7, #3]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	2134      	movs	r1, #52	; 0x34
 800c1c2:	fb01 f303 	mul.w	r3, r1, r3
 800c1c6:	4413      	add	r3, r2
 800c1c8:	3390      	adds	r3, #144	; 0x90
 800c1ca:	2208      	movs	r2, #8
 800c1cc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800c1ce:	2302      	movs	r3, #2
 800c1d0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c1d2:	e005      	b.n	800c1e0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800c1d4:	bf00      	nop
 800c1d6:	e004      	b.n	800c1e2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800c1d8:	bf00      	nop
 800c1da:	e002      	b.n	800c1e2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800c1dc:	bf00      	nop
 800c1de:	e000      	b.n	800c1e2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800c1e0:	bf00      	nop

  }
  return error;
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3718      	adds	r7, #24
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c1fe:	69db      	ldr	r3, [r3, #28]
 800c200:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	2b0b      	cmp	r3, #11
 800c20a:	d10c      	bne.n	800c226 <USBH_MSC_UnitIsReady+0x3a>
 800c20c:	78fb      	ldrb	r3, [r7, #3]
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	2134      	movs	r1, #52	; 0x34
 800c212:	fb01 f303 	mul.w	r3, r1, r3
 800c216:	4413      	add	r3, r2
 800c218:	3391      	adds	r3, #145	; 0x91
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c220:	2301      	movs	r3, #1
 800c222:	73fb      	strb	r3, [r7, #15]
 800c224:	e001      	b.n	800c22a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c226:	2300      	movs	r3, #0
 800c228:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	460b      	mov	r3, r1
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	b2db      	uxtb	r3, r3
 800c256:	2b0b      	cmp	r3, #11
 800c258:	d10d      	bne.n	800c276 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c25a:	7afb      	ldrb	r3, [r7, #11]
 800c25c:	2234      	movs	r2, #52	; 0x34
 800c25e:	fb02 f303 	mul.w	r3, r2, r3
 800c262:	3390      	adds	r3, #144	; 0x90
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	4413      	add	r3, r2
 800c268:	2234      	movs	r2, #52	; 0x34
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f004 ffb1 	bl	80111d4 <memcpy>
    return USBH_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	e000      	b.n	800c278 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c276:	2302      	movs	r3, #2
  }
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3718      	adds	r7, #24
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af02      	add	r7, sp, #8
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	607a      	str	r2, [r7, #4]
 800c28a:	603b      	str	r3, [r7, #0]
 800c28c:	460b      	mov	r3, r1
 800c28e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c2a0:	b2db      	uxtb	r3, r3
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00e      	beq.n	800c2c4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c2ac:	2b0b      	cmp	r3, #11
 800c2ae:	d109      	bne.n	800c2c4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c2b0:	7afb      	ldrb	r3, [r7, #11]
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	2134      	movs	r1, #52	; 0x34
 800c2b6:	fb01 f303 	mul.w	r3, r1, r3
 800c2ba:	4413      	add	r3, r2
 800c2bc:	3390      	adds	r3, #144	; 0x90
 800c2be:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d001      	beq.n	800c2c8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e040      	b.n	800c34a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	2206      	movs	r2, #6
 800c2cc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c2ce:	7afb      	ldrb	r3, [r7, #11]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	2134      	movs	r1, #52	; 0x34
 800c2d4:	fb01 f303 	mul.w	r3, r1, r3
 800c2d8:	4413      	add	r3, r2
 800c2da:	3390      	adds	r3, #144	; 0x90
 800c2dc:	2206      	movs	r2, #6
 800c2de:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c2ea:	7af9      	ldrb	r1, [r7, #11]
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	9300      	str	r3, [sp, #0]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f000 fd78 	bl	800cdea <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c300:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c302:	e016      	b.n	800c332 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	1ad2      	subs	r2, r2, r3
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	f242 7110 	movw	r1, #10000	; 0x2710
 800c314:	fb01 f303 	mul.w	r3, r1, r3
 800c318:	429a      	cmp	r2, r3
 800c31a:	d805      	bhi.n	800c328 <USBH_MSC_Read+0xa8>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c322:	b2db      	uxtb	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d104      	bne.n	800c332 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2201      	movs	r2, #1
 800c32c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c32e:	2302      	movs	r3, #2
 800c330:	e00b      	b.n	800c34a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c332:	7afb      	ldrb	r3, [r7, #11]
 800c334:	4619      	mov	r1, r3
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f7ff fe89 	bl	800c04e <USBH_MSC_RdWrProcess>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d0e0      	beq.n	800c304 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	2201      	movs	r2, #1
 800c346:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3718      	adds	r7, #24
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b088      	sub	sp, #32
 800c356:	af02      	add	r7, sp, #8
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
 800c35e:	460b      	mov	r3, r1
 800c360:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c368:	69db      	ldr	r3, [r3, #28]
 800c36a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c372:	b2db      	uxtb	r3, r3
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00e      	beq.n	800c396 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c37e:	2b0b      	cmp	r3, #11
 800c380:	d109      	bne.n	800c396 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c382:	7afb      	ldrb	r3, [r7, #11]
 800c384:	697a      	ldr	r2, [r7, #20]
 800c386:	2134      	movs	r1, #52	; 0x34
 800c388:	fb01 f303 	mul.w	r3, r1, r3
 800c38c:	4413      	add	r3, r2
 800c38e:	3390      	adds	r3, #144	; 0x90
 800c390:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c392:	2b01      	cmp	r3, #1
 800c394:	d001      	beq.n	800c39a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c396:	2302      	movs	r3, #2
 800c398:	e040      	b.n	800c41c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	2207      	movs	r2, #7
 800c39e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c3a0:	7afb      	ldrb	r3, [r7, #11]
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	2134      	movs	r1, #52	; 0x34
 800c3a6:	fb01 f303 	mul.w	r3, r1, r3
 800c3aa:	4413      	add	r3, r2
 800c3ac:	3390      	adds	r3, #144	; 0x90
 800c3ae:	2207      	movs	r2, #7
 800c3b0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c3b2:	7afb      	ldrb	r3, [r7, #11]
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c3bc:	7af9      	ldrb	r1, [r7, #11]
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f000 fca4 	bl	800cd14 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3d2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c3d4:	e016      	b.n	800c404 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	1ad2      	subs	r2, r2, r3
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	f242 7110 	movw	r1, #10000	; 0x2710
 800c3e6:	fb01 f303 	mul.w	r3, r1, r3
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d805      	bhi.n	800c3fa <USBH_MSC_Write+0xa8>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d104      	bne.n	800c404 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c400:	2302      	movs	r3, #2
 800c402:	e00b      	b.n	800c41c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	4619      	mov	r1, r3
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7ff fe20 	bl	800c04e <USBH_MSC_RdWrProcess>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b01      	cmp	r3, #1
 800c412:	d0e0      	beq.n	800c3d6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	2201      	movs	r2, #1
 800c418:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2221      	movs	r2, #33	; 0x21
 800c430:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	22ff      	movs	r2, #255	; 0xff
 800c436:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800c44a:	2200      	movs	r2, #0
 800c44c:	2100      	movs	r1, #0
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f001 fea4 	bl	800e19c <USBH_CtlReq>
 800c454:	4603      	mov	r3, r0
}
 800c456:	4618      	mov	r0, r3
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	22a1      	movs	r2, #161	; 0xa1
 800c46c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	22fe      	movs	r2, #254	; 0xfe
 800c472:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2201      	movs	r2, #1
 800c484:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c486:	2201      	movs	r2, #1
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f001 fe86 	bl	800e19c <USBH_CtlReq>
 800c490:	4603      	mov	r3, r0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3708      	adds	r7, #8
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b085      	sub	sp, #20
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4aa:	69db      	ldr	r3, [r3, #28]
 800c4ac:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	4a09      	ldr	r2, [pc, #36]	; (800c4d8 <USBH_MSC_BOT_Init+0x3c>)
 800c4b2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4a09      	ldr	r2, [pc, #36]	; (800c4dc <USBH_MSC_BOT_Init+0x40>)
 800c4b8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	43425355 	.word	0x43425355
 800c4dc:	20304050 	.word	0x20304050

0800c4e0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af02      	add	r7, sp, #8
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c502:	69db      	ldr	r3, [r3, #28]
 800c504:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c506:	2300      	movs	r3, #0
 800c508:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c510:	3b01      	subs	r3, #1
 800c512:	2b0a      	cmp	r3, #10
 800c514:	f200 819e 	bhi.w	800c854 <USBH_MSC_BOT_Process+0x374>
 800c518:	a201      	add	r2, pc, #4	; (adr r2, 800c520 <USBH_MSC_BOT_Process+0x40>)
 800c51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c51e:	bf00      	nop
 800c520:	0800c54d 	.word	0x0800c54d
 800c524:	0800c575 	.word	0x0800c575
 800c528:	0800c5df 	.word	0x0800c5df
 800c52c:	0800c5fd 	.word	0x0800c5fd
 800c530:	0800c681 	.word	0x0800c681
 800c534:	0800c6a3 	.word	0x0800c6a3
 800c538:	0800c73b 	.word	0x0800c73b
 800c53c:	0800c757 	.word	0x0800c757
 800c540:	0800c7a9 	.word	0x0800c7a9
 800c544:	0800c7d9 	.word	0x0800c7d9
 800c548:	0800c83b 	.word	0x0800c83b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	78fa      	ldrb	r2, [r7, #3]
 800c550:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	795b      	ldrb	r3, [r3, #5]
 800c566:	2201      	movs	r2, #1
 800c568:	9200      	str	r2, [sp, #0]
 800c56a:	221f      	movs	r2, #31
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f002 f824 	bl	800e5ba <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c572:	e17e      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	795b      	ldrb	r3, [r3, #5]
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f004 fd0e 	bl	8010f9c <USBH_LL_GetURBState>
 800c580:	4603      	mov	r3, r0
 800c582:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c584:	7d3b      	ldrb	r3, [r7, #20]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d118      	bne.n	800c5bc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00f      	beq.n	800c5b2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c598:	b25b      	sxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	da04      	bge.n	800c5a8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	2203      	movs	r2, #3
 800c5a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c5a6:	e157      	b.n	800c858 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2205      	movs	r2, #5
 800c5ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5b0:	e152      	b.n	800c858 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2207      	movs	r2, #7
 800c5b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5ba:	e14d      	b.n	800c858 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c5bc:	7d3b      	ldrb	r3, [r7, #20]
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d104      	bne.n	800c5cc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5ca:	e145      	b.n	800c858 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c5cc:	7d3b      	ldrb	r3, [r7, #20]
 800c5ce:	2b05      	cmp	r3, #5
 800c5d0:	f040 8142 	bne.w	800c858 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	220a      	movs	r2, #10
 800c5d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5dc:	e13c      	b.n	800c858 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	895a      	ldrh	r2, [r3, #10]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	791b      	ldrb	r3, [r3, #4]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f002 f809 	bl	800e604 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2204      	movs	r2, #4
 800c5f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c5fa:	e13a      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	791b      	ldrb	r3, [r3, #4]
 800c600:	4619      	mov	r1, r3
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f004 fcca 	bl	8010f9c <USBH_LL_GetURBState>
 800c608:	4603      	mov	r3, r0
 800c60a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c60c:	7d3b      	ldrb	r3, [r7, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d12d      	bne.n	800c66e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	8952      	ldrh	r2, [r2, #10]
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d910      	bls.n	800c640 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	8952      	ldrh	r2, [r2, #10]
 800c628:	441a      	add	r2, r3
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	8952      	ldrh	r2, [r2, #10]
 800c638:	1a9a      	subs	r2, r3, r2
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c63e:	e002      	b.n	800c646 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	2200      	movs	r2, #0
 800c644:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00a      	beq.n	800c664 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	895a      	ldrh	r2, [r3, #10]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	791b      	ldrb	r3, [r3, #4]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f001 ffd1 	bl	800e604 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c662:	e0fb      	b.n	800c85c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	2207      	movs	r2, #7
 800c668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c66c:	e0f6      	b.n	800c85c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c66e:	7d3b      	ldrb	r3, [r7, #20]
 800c670:	2b05      	cmp	r3, #5
 800c672:	f040 80f3 	bne.w	800c85c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2209      	movs	r2, #9
 800c67a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c67e:	e0ed      	b.n	800c85c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	891a      	ldrh	r2, [r3, #8]
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	795b      	ldrb	r3, [r3, #5]
 800c68e:	2001      	movs	r0, #1
 800c690:	9000      	str	r0, [sp, #0]
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f001 ff91 	bl	800e5ba <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2206      	movs	r2, #6
 800c69c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c6a0:	e0e7      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	795b      	ldrb	r3, [r3, #5]
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f004 fc77 	bl	8010f9c <USBH_LL_GetURBState>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c6b2:	7d3b      	ldrb	r3, [r7, #20]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d12f      	bne.n	800c718 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	8912      	ldrh	r2, [r2, #8]
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d910      	bls.n	800c6e6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	8912      	ldrh	r2, [r2, #8]
 800c6ce:	441a      	add	r2, r3
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	8912      	ldrh	r2, [r2, #8]
 800c6de:	1a9a      	subs	r2, r3, r2
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	65da      	str	r2, [r3, #92]	; 0x5c
 800c6e4:	e002      	b.n	800c6ec <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00c      	beq.n	800c70e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	891a      	ldrh	r2, [r3, #8]
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	795b      	ldrb	r3, [r3, #5]
 800c702:	2001      	movs	r0, #1
 800c704:	9000      	str	r0, [sp, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f001 ff57 	bl	800e5ba <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c70c:	e0a8      	b.n	800c860 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	2207      	movs	r2, #7
 800c712:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c716:	e0a3      	b.n	800c860 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c718:	7d3b      	ldrb	r3, [r7, #20]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d104      	bne.n	800c728 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2205      	movs	r2, #5
 800c722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c726:	e09b      	b.n	800c860 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c728:	7d3b      	ldrb	r3, [r7, #20]
 800c72a:	2b05      	cmp	r3, #5
 800c72c:	f040 8098 	bne.w	800c860 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	220a      	movs	r2, #10
 800c734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c738:	e092      	b.n	800c860 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	791b      	ldrb	r3, [r3, #4]
 800c744:	220d      	movs	r2, #13
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f001 ff5c 	bl	800e604 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	2208      	movs	r2, #8
 800c750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c754:	e08d      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	791b      	ldrb	r3, [r3, #4]
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f004 fc1d 	bl	8010f9c <USBH_LL_GetURBState>
 800c762:	4603      	mov	r3, r0
 800c764:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c766:	7d3b      	ldrb	r3, [r7, #20]
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d115      	bne.n	800c798 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f8a9 	bl	800c8d4 <USBH_MSC_DecodeCSW>
 800c782:	4603      	mov	r3, r0
 800c784:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c786:	7d7b      	ldrb	r3, [r7, #21]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d102      	bne.n	800c792 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c790:	e068      	b.n	800c864 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c792:	2302      	movs	r3, #2
 800c794:	75fb      	strb	r3, [r7, #23]
      break;
 800c796:	e065      	b.n	800c864 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c798:	7d3b      	ldrb	r3, [r7, #20]
 800c79a:	2b05      	cmp	r3, #5
 800c79c:	d162      	bne.n	800c864 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2209      	movs	r2, #9
 800c7a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c7a6:	e05d      	b.n	800c864 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c7a8:	78fb      	ldrb	r3, [r7, #3]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f000 f864 	bl	800c87c <USBH_MSC_BOT_Abort>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c7b8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d104      	bne.n	800c7c8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	2207      	movs	r2, #7
 800c7c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c7c6:	e04f      	b.n	800c868 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c7c8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ca:	2b04      	cmp	r3, #4
 800c7cc:	d14c      	bne.n	800c868 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	220b      	movs	r2, #11
 800c7d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c7d6:	e047      	b.n	800c868 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c7d8:	78fb      	ldrb	r3, [r7, #3]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f84c 	bl	800c87c <USBH_MSC_BOT_Abort>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c7e8:	7dbb      	ldrb	r3, [r7, #22]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d11d      	bne.n	800c82a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	795b      	ldrb	r3, [r3, #5]
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f004 fc2b 	bl	8011050 <USBH_LL_GetToggle>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	7959      	ldrb	r1, [r3, #5]
 800c802:	7bfb      	ldrb	r3, [r7, #15]
 800c804:	f1c3 0301 	rsb	r3, r3, #1
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	461a      	mov	r2, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f004 fbef 	bl	8010ff0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	791b      	ldrb	r3, [r3, #4]
 800c816:	2200      	movs	r2, #0
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f004 fbe8 	bl	8010ff0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	2209      	movs	r2, #9
 800c824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c828:	e020      	b.n	800c86c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c82a:	7dbb      	ldrb	r3, [r7, #22]
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	d11d      	bne.n	800c86c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	220b      	movs	r2, #11
 800c834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c838:	e018      	b.n	800c86c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff fdf2 	bl	800c424 <USBH_MSC_BOT_REQ_Reset>
 800c840:	4603      	mov	r3, r0
 800c842:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c844:	7dfb      	ldrb	r3, [r7, #23]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d112      	bne.n	800c870 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c852:	e00d      	b.n	800c870 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c854:	bf00      	nop
 800c856:	e00c      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c858:	bf00      	nop
 800c85a:	e00a      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c85c:	bf00      	nop
 800c85e:	e008      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c860:	bf00      	nop
 800c862:	e006      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c864:	bf00      	nop
 800c866:	e004      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c868:	bf00      	nop
 800c86a:	e002      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c86c:	bf00      	nop
 800c86e:	e000      	b.n	800c872 <USBH_MSC_BOT_Process+0x392>
      break;
 800c870:	bf00      	nop
  }
  return status;
 800c872:	7dfb      	ldrb	r3, [r7, #23]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	460b      	mov	r3, r1
 800c886:	70fb      	strb	r3, [r7, #3]
 800c888:	4613      	mov	r3, r2
 800c88a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c88c:	2302      	movs	r3, #2
 800c88e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c89a:	78bb      	ldrb	r3, [r7, #2]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <USBH_MSC_BOT_Abort+0x2a>
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d009      	beq.n	800c8b8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c8a4:	e011      	b.n	800c8ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	79db      	ldrb	r3, [r3, #7]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 f9a8 	bl	800dc02 <USBH_ClrFeature>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c8b6:	e008      	b.n	800c8ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	799b      	ldrb	r3, [r3, #6]
 800c8bc:	4619      	mov	r1, r3
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f001 f99f 	bl	800dc02 <USBH_ClrFeature>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c8c8:	bf00      	nop
  }
  return status;
 800c8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3710      	adds	r7, #16
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8e2:	69db      	ldr	r3, [r3, #28]
 800c8e4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	791b      	ldrb	r3, [r3, #4]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f004 fac1 	bl	8010e78 <USBH_LL_GetLastXferSize>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b0d      	cmp	r3, #13
 800c8fa:	d002      	beq.n	800c902 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c8fc:	2302      	movs	r3, #2
 800c8fe:	73fb      	strb	r3, [r7, #15]
 800c900:	e024      	b.n	800c94c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c906:	4a14      	ldr	r2, [pc, #80]	; (800c958 <USBH_MSC_DecodeCSW+0x84>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d11d      	bne.n	800c948 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c914:	429a      	cmp	r2, r3
 800c916:	d119      	bne.n	800c94c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d102      	bne.n	800c928 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c922:	2300      	movs	r3, #0
 800c924:	73fb      	strb	r3, [r7, #15]
 800c926:	e011      	b.n	800c94c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d102      	bne.n	800c938 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c932:	2301      	movs	r3, #1
 800c934:	73fb      	strb	r3, [r7, #15]
 800c936:	e009      	b.n	800c94c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d104      	bne.n	800c94c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c942:	2302      	movs	r3, #2
 800c944:	73fb      	strb	r3, [r7, #15]
 800c946:	e001      	b.n	800c94c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c948:	2302      	movs	r3, #2
 800c94a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	53425355 	.word	0x53425355

0800c95c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	460b      	mov	r3, r1
 800c966:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c968:	2302      	movs	r3, #2
 800c96a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d002      	beq.n	800c986 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c980:	2b02      	cmp	r3, #2
 800c982:	d021      	beq.n	800c9c8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c984:	e028      	b.n	800c9d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	2200      	movs	r2, #0
 800c98a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	220a      	movs	r2, #10
 800c998:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	3363      	adds	r3, #99	; 0x63
 800c9a0:	2210      	movs	r2, #16
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f004 fc23 	bl	80111f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c6:	e007      	b.n	800c9d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c9c8:	78fb      	ldrb	r3, [r7, #3]
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff fd87 	bl	800c4e0 <USBH_MSC_BOT_Process>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c9d6:	bf00      	nop
  }

  return error;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b086      	sub	sp, #24
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	607a      	str	r2, [r7, #4]
 800c9ee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9fa:	69db      	ldr	r3, [r3, #28]
 800c9fc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d002      	beq.n	800ca0e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800ca08:	2b02      	cmp	r3, #2
 800ca0a:	d027      	beq.n	800ca5c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800ca0c:	e05f      	b.n	800cace <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2208      	movs	r2, #8
 800ca12:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	2280      	movs	r2, #128	; 0x80
 800ca18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	220a      	movs	r2, #10
 800ca20:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	3363      	adds	r3, #99	; 0x63
 800ca28:	2210      	movs	r2, #16
 800ca2a:	2100      	movs	r1, #0
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f004 fbdf 	bl	80111f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2225      	movs	r2, #37	; 0x25
 800ca36:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	2202      	movs	r2, #2
 800ca46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	f103 0210 	add.w	r2, r3, #16
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ca56:	2301      	movs	r3, #1
 800ca58:	75fb      	strb	r3, [r7, #23]
      break;
 800ca5a:	e038      	b.n	800cace <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ca5c:	7afb      	ldrb	r3, [r7, #11]
 800ca5e:	4619      	mov	r1, r3
 800ca60:	68f8      	ldr	r0, [r7, #12]
 800ca62:	f7ff fd3d 	bl	800c4e0 <USBH_MSC_BOT_Process>
 800ca66:	4603      	mov	r3, r0
 800ca68:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d12d      	bne.n	800cacc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca76:	3303      	adds	r3, #3
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	693b      	ldr	r3, [r7, #16]
 800ca7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca82:	3302      	adds	r3, #2
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca90:	3301      	adds	r3, #1
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ca96:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	061b      	lsls	r3, r3, #24
 800caa2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caae:	3307      	adds	r3, #7
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	b29a      	uxth	r2, r3
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caba:	3306      	adds	r3, #6
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	021b      	lsls	r3, r3, #8
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	4313      	orrs	r3, r2
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	809a      	strh	r2, [r3, #4]
      break;
 800cacc:	bf00      	nop
  }

  return error;
 800cace:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3718      	adds	r7, #24
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	460b      	mov	r3, r1
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800cae6:	2302      	movs	r3, #2
 800cae8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d002      	beq.n	800cb04 <USBH_MSC_SCSI_Inquiry+0x2c>
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d03d      	beq.n	800cb7e <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800cb02:	e089      	b.n	800cc18 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	2224      	movs	r2, #36	; 0x24
 800cb08:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	2280      	movs	r2, #128	; 0x80
 800cb0e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	220a      	movs	r2, #10
 800cb16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3363      	adds	r3, #99	; 0x63
 800cb1e:	220a      	movs	r2, #10
 800cb20:	2100      	movs	r1, #0
 800cb22:	4618      	mov	r0, r3
 800cb24:	f004 fb64 	bl	80111f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	2212      	movs	r2, #18
 800cb2c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800cb30:	7afb      	ldrb	r3, [r7, #11]
 800cb32:	015b      	lsls	r3, r3, #5
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	2224      	movs	r2, #36	; 0x24
 800cb50:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	2202      	movs	r2, #2
 800cb68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	f103 0210 	add.w	r2, r3, #16
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	75fb      	strb	r3, [r7, #23]
      break;
 800cb7c:	e04c      	b.n	800cc18 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cb7e:	7afb      	ldrb	r3, [r7, #11]
 800cb80:	4619      	mov	r1, r3
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f7ff fcac 	bl	800c4e0 <USBH_MSC_BOT_Process>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800cb8c:	7dfb      	ldrb	r3, [r7, #23]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d141      	bne.n	800cc16 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800cb92:	2222      	movs	r2, #34	; 0x22
 800cb94:	2100      	movs	r1, #0
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f004 fb2a 	bl	80111f0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	f003 031f 	and.w	r3, r3, #31
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	b25b      	sxtb	r3, r3
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	da03      	bge.n	800cbd6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	709a      	strb	r2, [r3, #2]
 800cbd4:	e002      	b.n	800cbdc <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	1cd8      	adds	r0, r3, #3
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbe6:	3308      	adds	r3, #8
 800cbe8:	2208      	movs	r2, #8
 800cbea:	4619      	mov	r1, r3
 800cbec:	f004 faf2 	bl	80111d4 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f103 000c 	add.w	r0, r3, #12
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbfc:	3310      	adds	r3, #16
 800cbfe:	2210      	movs	r2, #16
 800cc00:	4619      	mov	r1, r3
 800cc02:	f004 fae7 	bl	80111d4 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	331d      	adds	r3, #29
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800cc10:	3220      	adds	r2, #32
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	601a      	str	r2, [r3, #0]
      break;
 800cc16:	bf00      	nop
  }

  return error;
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3718      	adds	r7, #24
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b086      	sub	sp, #24
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	607a      	str	r2, [r7, #4]
 800cc2e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cc30:	2302      	movs	r3, #2
 800cc32:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc3a:	69db      	ldr	r3, [r3, #28]
 800cc3c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d002      	beq.n	800cc4e <USBH_MSC_SCSI_RequestSense+0x2c>
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d03d      	beq.n	800ccc8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800cc4c:	e05d      	b.n	800cd0a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	220e      	movs	r2, #14
 800cc52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2280      	movs	r2, #128	; 0x80
 800cc58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	220a      	movs	r2, #10
 800cc60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	3363      	adds	r3, #99	; 0x63
 800cc68:	2210      	movs	r2, #16
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f004 fabf 	bl	80111f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2203      	movs	r2, #3
 800cc76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800cc7a:	7afb      	ldrb	r3, [r7, #11]
 800cc7c:	015b      	lsls	r3, r3, #5
 800cc7e:	b2da      	uxtb	r2, r3
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	220e      	movs	r2, #14
 800cc9a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	2202      	movs	r2, #2
 800ccb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	f103 0210 	add.w	r2, r3, #16
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc6:	e020      	b.n	800cd0a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ccc8:	7afb      	ldrb	r3, [r7, #11]
 800ccca:	4619      	mov	r1, r3
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff fc07 	bl	800c4e0 <USBH_MSC_BOT_Process>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d115      	bne.n	800cd08 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cce2:	3302      	adds	r3, #2
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	f003 030f 	and.w	r3, r3, #15
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccf6:	7b1a      	ldrb	r2, [r3, #12]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd02:	7b5a      	ldrb	r2, [r3, #13]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	709a      	strb	r2, [r3, #2]
      break;
 800cd08:	bf00      	nop
  }

  return error;
 800cd0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b086      	sub	sp, #24
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	607a      	str	r2, [r7, #4]
 800cd1e:	603b      	str	r3, [r7, #0]
 800cd20:	460b      	mov	r3, r1
 800cd22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cd24:	2302      	movs	r3, #2
 800cd26:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d002      	beq.n	800cd42 <USBH_MSC_SCSI_Write+0x2e>
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d047      	beq.n	800cdd0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cd40:	e04e      	b.n	800cde0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6a3b      	ldr	r3, [r7, #32]
 800cd4c:	fb03 f202 	mul.w	r2, r3, r2
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	220a      	movs	r2, #10
 800cd60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	3363      	adds	r3, #99	; 0x63
 800cd68:	2210      	movs	r2, #16
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f004 fa3f 	bl	80111f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	222a      	movs	r2, #42	; 0x2a
 800cd76:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cd7a:	79fa      	ldrb	r2, [r7, #7]
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cd82:	79ba      	ldrb	r2, [r7, #6]
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cd8a:	797a      	ldrb	r2, [r7, #5]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cd92:	1d3b      	adds	r3, r7, #4
 800cd94:	781a      	ldrb	r2, [r3, #0]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cd9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cda6:	f107 0320 	add.w	r3, r7, #32
 800cdaa:	781a      	ldrb	r2, [r3, #0]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	2202      	movs	r2, #2
 800cdbe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	75fb      	strb	r3, [r7, #23]
      break;
 800cdce:	e007      	b.n	800cde0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cdd0:	7afb      	ldrb	r3, [r7, #11]
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7ff fb83 	bl	800c4e0 <USBH_MSC_BOT_Process>
 800cdda:	4603      	mov	r3, r0
 800cddc:	75fb      	strb	r3, [r7, #23]
      break;
 800cdde:	bf00      	nop
  }

  return error;
 800cde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3718      	adds	r7, #24
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b086      	sub	sp, #24
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	603b      	str	r3, [r7, #0]
 800cdf6:	460b      	mov	r3, r1
 800cdf8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d002      	beq.n	800ce18 <USBH_MSC_SCSI_Read+0x2e>
 800ce12:	2b02      	cmp	r3, #2
 800ce14:	d047      	beq.n	800cea6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ce16:	e04e      	b.n	800ceb6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800ce1e:	461a      	mov	r2, r3
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	fb03 f202 	mul.w	r2, r3, r2
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	2280      	movs	r2, #128	; 0x80
 800ce2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	220a      	movs	r2, #10
 800ce36:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	3363      	adds	r3, #99	; 0x63
 800ce3e:	2210      	movs	r2, #16
 800ce40:	2100      	movs	r1, #0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f004 f9d4 	bl	80111f0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	2228      	movs	r2, #40	; 0x28
 800ce4c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ce50:	79fa      	ldrb	r2, [r7, #7]
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ce58:	79ba      	ldrb	r2, [r7, #6]
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ce60:	797a      	ldrb	r2, [r7, #5]
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ce68:	1d3b      	adds	r3, r7, #4
 800ce6a:	781a      	ldrb	r2, [r3, #0]
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ce72:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ce7c:	f107 0320 	add.w	r3, r7, #32
 800ce80:	781a      	ldrb	r2, [r3, #0]
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	2202      	movs	r2, #2
 800ce94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	683a      	ldr	r2, [r7, #0]
 800ce9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cea0:	2301      	movs	r3, #1
 800cea2:	75fb      	strb	r3, [r7, #23]
      break;
 800cea4:	e007      	b.n	800ceb6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cea6:	7afb      	ldrb	r3, [r7, #11]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f7ff fb18 	bl	800c4e0 <USBH_MSC_BOT_Process>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	75fb      	strb	r3, [r7, #23]
      break;
 800ceb4:	bf00      	nop
  }

  return error;
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3718      	adds	r7, #24
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	4613      	mov	r3, r2
 800cecc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ced4:	2302      	movs	r3, #2
 800ced6:	e029      	b.n	800cf2c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	79fa      	ldrb	r2, [r7, #7]
 800cedc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800cef0:	68f8      	ldr	r0, [r7, #12]
 800cef2:	f000 f81f 	bl	800cf34 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d003      	beq.n	800cf24 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f003 fee9 	bl	8010cfc <USBH_LL_Init>

  return USBH_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cf40:	2300      	movs	r3, #0
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	e009      	b.n	800cf5a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	33e0      	adds	r3, #224	; 0xe0
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	2200      	movs	r2, #0
 800cf52:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	3301      	adds	r3, #1
 800cf58:	60fb      	str	r3, [r7, #12]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2b0f      	cmp	r3, #15
 800cf5e:	d9f2      	bls.n	800cf46 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cf60:	2300      	movs	r3, #0
 800cf62:	60fb      	str	r3, [r7, #12]
 800cf64:	e009      	b.n	800cf7a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cf70:	2200      	movs	r2, #0
 800cf72:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf80:	d3f1      	bcc.n	800cf66 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2240      	movs	r2, #64	; 0x40
 800cfa6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cfce:	2300      	movs	r3, #0
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b085      	sub	sp, #20
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d016      	beq.n	800d01e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10e      	bne.n	800d018 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d000:	1c59      	adds	r1, r3, #1
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	33de      	adds	r3, #222	; 0xde
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]
 800d016:	e004      	b.n	800d022 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d018:	2302      	movs	r3, #2
 800d01a:	73fb      	strb	r3, [r7, #15]
 800d01c:	e001      	b.n	800d022 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d01e:	2302      	movs	r3, #2
 800d020:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d022:	7bfb      	ldrb	r3, [r7, #15]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d046:	78fa      	ldrb	r2, [r7, #3]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d204      	bcs.n	800d056 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	78fa      	ldrb	r2, [r7, #3]
 800d050:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d054:	e001      	b.n	800d05a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d056:	2302      	movs	r3, #2
 800d058:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d068:	b480      	push	{r7}
 800d06a:	b087      	sub	sp, #28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	4608      	mov	r0, r1
 800d072:	4611      	mov	r1, r2
 800d074:	461a      	mov	r2, r3
 800d076:	4603      	mov	r3, r0
 800d078:	70fb      	strb	r3, [r7, #3]
 800d07a:	460b      	mov	r3, r1
 800d07c:	70bb      	strb	r3, [r7, #2]
 800d07e:	4613      	mov	r3, r2
 800d080:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d082:	2300      	movs	r3, #0
 800d084:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d086:	2300      	movs	r3, #0
 800d088:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d090:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d092:	e025      	b.n	800d0e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d094:	7dfb      	ldrb	r3, [r7, #23]
 800d096:	221a      	movs	r2, #26
 800d098:	fb02 f303 	mul.w	r3, r2, r3
 800d09c:	3308      	adds	r3, #8
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	3302      	adds	r3, #2
 800d0a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	795b      	ldrb	r3, [r3, #5]
 800d0aa:	78fa      	ldrb	r2, [r7, #3]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d002      	beq.n	800d0b6 <USBH_FindInterface+0x4e>
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	2bff      	cmp	r3, #255	; 0xff
 800d0b4:	d111      	bne.n	800d0da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d0ba:	78ba      	ldrb	r2, [r7, #2]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d002      	beq.n	800d0c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0c0:	78bb      	ldrb	r3, [r7, #2]
 800d0c2:	2bff      	cmp	r3, #255	; 0xff
 800d0c4:	d109      	bne.n	800d0da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0ca:	787a      	ldrb	r2, [r7, #1]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d002      	beq.n	800d0d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d0d0:	787b      	ldrb	r3, [r7, #1]
 800d0d2:	2bff      	cmp	r3, #255	; 0xff
 800d0d4:	d101      	bne.n	800d0da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d0d6:	7dfb      	ldrb	r3, [r7, #23]
 800d0d8:	e006      	b.n	800d0e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d9d6      	bls.n	800d094 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d0e6:	23ff      	movs	r3, #255	; 0xff
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	371c      	adds	r7, #28
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f003 fe43 	bl	8010d88 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d102:	2101      	movs	r1, #1
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f003 ff5c 	bl	8010fc2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b088      	sub	sp, #32
 800d118:	af04      	add	r7, sp, #16
 800d11a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d11c:	2302      	movs	r3, #2
 800d11e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d102      	bne.n	800d136 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2203      	movs	r2, #3
 800d134:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	b2db      	uxtb	r3, r3
 800d13c:	2b0b      	cmp	r3, #11
 800d13e:	f200 81be 	bhi.w	800d4be <USBH_Process+0x3aa>
 800d142:	a201      	add	r2, pc, #4	; (adr r2, 800d148 <USBH_Process+0x34>)
 800d144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d148:	0800d179 	.word	0x0800d179
 800d14c:	0800d1ab 	.word	0x0800d1ab
 800d150:	0800d213 	.word	0x0800d213
 800d154:	0800d459 	.word	0x0800d459
 800d158:	0800d4bf 	.word	0x0800d4bf
 800d15c:	0800d2b7 	.word	0x0800d2b7
 800d160:	0800d3ff 	.word	0x0800d3ff
 800d164:	0800d2ed 	.word	0x0800d2ed
 800d168:	0800d30d 	.word	0x0800d30d
 800d16c:	0800d32d 	.word	0x0800d32d
 800d170:	0800d371 	.word	0x0800d371
 800d174:	0800d441 	.word	0x0800d441
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 819e 	beq.w	800d4c2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2201      	movs	r2, #1
 800d18a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d18c:	20c8      	movs	r0, #200	; 0xc8
 800d18e:	f003 ff8f 	bl	80110b0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f003 fe55 	bl	8010e42 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d1a8:	e18b      	b.n	800d4c2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d107      	bne.n	800d1c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2202      	movs	r2, #2
 800d1c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d1c2:	e18d      	b.n	800d4e0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d1ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1ce:	d914      	bls.n	800d1fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d903      	bls.n	800d1f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	220d      	movs	r2, #13
 800d1ee:	701a      	strb	r2, [r3, #0]
      break;
 800d1f0:	e176      	b.n	800d4e0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	701a      	strb	r2, [r3, #0]
      break;
 800d1f8:	e172      	b.n	800d4e0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d200:	f103 020a 	add.w	r2, r3, #10
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d20a:	200a      	movs	r0, #10
 800d20c:	f003 ff50 	bl	80110b0 <USBH_Delay>
      break;
 800d210:	e166      	b.n	800d4e0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d005      	beq.n	800d228 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d222:	2104      	movs	r1, #4
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d228:	2064      	movs	r0, #100	; 0x64
 800d22a:	f003 ff41 	bl	80110b0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f003 fde0 	bl	8010df4 <USBH_LL_GetSpeed>
 800d234:	4603      	mov	r3, r0
 800d236:	461a      	mov	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2205      	movs	r2, #5
 800d242:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d244:	2100      	movs	r1, #0
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f001 fa29 	bl	800e69e <USBH_AllocPipe>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d254:	2180      	movs	r1, #128	; 0x80
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 fa21 	bl	800e69e <USBH_AllocPipe>
 800d25c:	4603      	mov	r3, r0
 800d25e:	461a      	mov	r2, r3
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	7919      	ldrb	r1, [r3, #4]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d278:	b292      	uxth	r2, r2
 800d27a:	9202      	str	r2, [sp, #8]
 800d27c:	2200      	movs	r2, #0
 800d27e:	9201      	str	r2, [sp, #4]
 800d280:	9300      	str	r3, [sp, #0]
 800d282:	4603      	mov	r3, r0
 800d284:	2280      	movs	r2, #128	; 0x80
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 f9da 	bl	800e640 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7959      	ldrb	r1, [r3, #5]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2a0:	b292      	uxth	r2, r2
 800d2a2:	9202      	str	r2, [sp, #8]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	9201      	str	r2, [sp, #4]
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f001 f9c6 	bl	800e640 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d2b4:	e114      	b.n	800d4e0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f918 	bl	800d4ec <USBH_HandleEnum>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d2c0:	7bbb      	ldrb	r3, [r7, #14]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f040 80fe 	bne.w	800d4c6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d103      	bne.n	800d2e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2208      	movs	r2, #8
 800d2e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d2e2:	e0f0      	b.n	800d4c6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2207      	movs	r2, #7
 800d2e8:	701a      	strb	r2, [r3, #0]
      break;
 800d2ea:	e0ec      	b.n	800d4c6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 80e9 	beq.w	800d4ca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2fe:	2101      	movs	r1, #1
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2208      	movs	r2, #8
 800d308:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d30a:	e0de      	b.n	800d4ca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d312:	b29b      	uxth	r3, r3
 800d314:	4619      	mov	r1, r3
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fc2c 	bl	800db74 <USBH_SetCfg>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f040 80d5 	bne.w	800d4ce <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2209      	movs	r2, #9
 800d328:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d32a:	e0d0      	b.n	800d4ce <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d332:	f003 0320 	and.w	r3, r3, #32
 800d336:	2b00      	cmp	r3, #0
 800d338:	d016      	beq.n	800d368 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d33a:	2101      	movs	r1, #1
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fc3c 	bl	800dbba <USBH_SetFeature>
 800d342:	4603      	mov	r3, r0
 800d344:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d103      	bne.n	800d356 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	220a      	movs	r2, #10
 800d352:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d354:	e0bd      	b.n	800d4d2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	f040 80b9 	bne.w	800d4d2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	220a      	movs	r2, #10
 800d364:	701a      	strb	r2, [r3, #0]
      break;
 800d366:	e0b4      	b.n	800d4d2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	220a      	movs	r2, #10
 800d36c:	701a      	strb	r2, [r3, #0]
      break;
 800d36e:	e0b0      	b.n	800d4d2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d376:	2b00      	cmp	r3, #0
 800d378:	f000 80ad 	beq.w	800d4d6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]
 800d388:	e016      	b.n	800d3b8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d38a:	7bfa      	ldrb	r2, [r7, #15]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	32de      	adds	r2, #222	; 0xde
 800d390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d394:	791a      	ldrb	r2, [r3, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d108      	bne.n	800d3b2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d3a0:	7bfa      	ldrb	r2, [r7, #15]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	32de      	adds	r2, #222	; 0xde
 800d3a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d3b0:	e005      	b.n	800d3be <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	73fb      	strb	r3, [r7, #15]
 800d3b8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0e5      	beq.n	800d38a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d016      	beq.n	800d3f6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3ce:	689b      	ldr	r3, [r3, #8]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	4798      	blx	r3
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d109      	bne.n	800d3ee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2206      	movs	r2, #6
 800d3de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3e6:	2103      	movs	r1, #3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d3ec:	e073      	b.n	800d4d6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	220d      	movs	r2, #13
 800d3f2:	701a      	strb	r2, [r3, #0]
      break;
 800d3f4:	e06f      	b.n	800d4d6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	220d      	movs	r2, #13
 800d3fa:	701a      	strb	r2, [r3, #0]
      break;
 800d3fc:	e06b      	b.n	800d4d6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d404:	2b00      	cmp	r3, #0
 800d406:	d017      	beq.n	800d438 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	4798      	blx	r3
 800d414:	4603      	mov	r3, r0
 800d416:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d418:	7bbb      	ldrb	r3, [r7, #14]
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d103      	bne.n	800d428 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	220b      	movs	r2, #11
 800d424:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d426:	e058      	b.n	800d4da <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b02      	cmp	r3, #2
 800d42e:	d154      	bne.n	800d4da <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	220d      	movs	r2, #13
 800d434:	701a      	strb	r2, [r3, #0]
      break;
 800d436:	e050      	b.n	800d4da <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	220d      	movs	r2, #13
 800d43c:	701a      	strb	r2, [r3, #0]
      break;
 800d43e:	e04c      	b.n	800d4da <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d049      	beq.n	800d4de <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	4798      	blx	r3
      }
      break;
 800d456:	e042      	b.n	800d4de <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff fd67 	bl	800cf34 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d009      	beq.n	800d484 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d005      	beq.n	800d49a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d494:	2105      	movs	r1, #5
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d107      	bne.n	800d4b6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff fe20 	bl	800d0f4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d4b4:	e014      	b.n	800d4e0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f003 fc66 	bl	8010d88 <USBH_LL_Start>
      break;
 800d4bc:	e010      	b.n	800d4e0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d4be:	bf00      	nop
 800d4c0:	e00e      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4c2:	bf00      	nop
 800d4c4:	e00c      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4c6:	bf00      	nop
 800d4c8:	e00a      	b.n	800d4e0 <USBH_Process+0x3cc>
    break;
 800d4ca:	bf00      	nop
 800d4cc:	e008      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4ce:	bf00      	nop
 800d4d0:	e006      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4d2:	bf00      	nop
 800d4d4:	e004      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4d6:	bf00      	nop
 800d4d8:	e002      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4da:	bf00      	nop
 800d4dc:	e000      	b.n	800d4e0 <USBH_Process+0x3cc>
      break;
 800d4de:	bf00      	nop
  }
  return USBH_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop

0800d4ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b088      	sub	sp, #32
 800d4f0:	af04      	add	r7, sp, #16
 800d4f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	785b      	ldrb	r3, [r3, #1]
 800d500:	2b07      	cmp	r3, #7
 800d502:	f200 81c1 	bhi.w	800d888 <USBH_HandleEnum+0x39c>
 800d506:	a201      	add	r2, pc, #4	; (adr r2, 800d50c <USBH_HandleEnum+0x20>)
 800d508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50c:	0800d52d 	.word	0x0800d52d
 800d510:	0800d5eb 	.word	0x0800d5eb
 800d514:	0800d655 	.word	0x0800d655
 800d518:	0800d6e3 	.word	0x0800d6e3
 800d51c:	0800d74d 	.word	0x0800d74d
 800d520:	0800d7bd 	.word	0x0800d7bd
 800d524:	0800d803 	.word	0x0800d803
 800d528:	0800d849 	.word	0x0800d849
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d52c:	2108      	movs	r1, #8
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 fa50 	bl	800d9d4 <USBH_Get_DevDesc>
 800d534:	4603      	mov	r3, r0
 800d536:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d538:	7bbb      	ldrb	r3, [r7, #14]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d130      	bne.n	800d5a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	7919      	ldrb	r1, [r3, #4]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d562:	b292      	uxth	r2, r2
 800d564:	9202      	str	r2, [sp, #8]
 800d566:	2200      	movs	r2, #0
 800d568:	9201      	str	r2, [sp, #4]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	4603      	mov	r3, r0
 800d56e:	2280      	movs	r2, #128	; 0x80
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f001 f865 	bl	800e640 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7959      	ldrb	r1, [r3, #5]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d58a:	b292      	uxth	r2, r2
 800d58c:	9202      	str	r2, [sp, #8]
 800d58e:	2200      	movs	r2, #0
 800d590:	9201      	str	r2, [sp, #4]
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4603      	mov	r3, r0
 800d596:	2200      	movs	r2, #0
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f001 f851 	bl	800e640 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d59e:	e175      	b.n	800d88c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5a0:	7bbb      	ldrb	r3, [r7, #14]
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	f040 8172 	bne.w	800d88c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	d903      	bls.n	800d5ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	220d      	movs	r2, #13
 800d5c6:	701a      	strb	r2, [r3, #0]
      break;
 800d5c8:	e160      	b.n	800d88c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	795b      	ldrb	r3, [r3, #5]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f001 f885 	bl	800e6e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	791b      	ldrb	r3, [r3, #4]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f001 f87f 	bl	800e6e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
      break;
 800d5e8:	e150      	b.n	800d88c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d5ea:	2112      	movs	r1, #18
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f9f1 	bl	800d9d4 <USBH_Get_DevDesc>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d5f6:	7bbb      	ldrb	r3, [r7, #14]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d103      	bne.n	800d604 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2202      	movs	r2, #2
 800d600:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d602:	e145      	b.n	800d890 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d604:	7bbb      	ldrb	r3, [r7, #14]
 800d606:	2b03      	cmp	r3, #3
 800d608:	f040 8142 	bne.w	800d890 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d612:	3301      	adds	r3, #1
 800d614:	b2da      	uxtb	r2, r3
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d622:	2b03      	cmp	r3, #3
 800d624:	d903      	bls.n	800d62e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	220d      	movs	r2, #13
 800d62a:	701a      	strb	r2, [r3, #0]
      break;
 800d62c:	e130      	b.n	800d890 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	795b      	ldrb	r3, [r3, #5]
 800d632:	4619      	mov	r1, r3
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f001 f853 	bl	800e6e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	791b      	ldrb	r3, [r3, #4]
 800d63e:	4619      	mov	r1, r3
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f001 f84d 	bl	800e6e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2200      	movs	r2, #0
 800d64a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2200      	movs	r2, #0
 800d650:	701a      	strb	r2, [r3, #0]
      break;
 800d652:	e11d      	b.n	800d890 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d654:	2101      	movs	r1, #1
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 fa68 	bl	800db2c <USBH_SetAddress>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d132      	bne.n	800d6cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d666:	2002      	movs	r0, #2
 800d668:	f003 fd22 	bl	80110b0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2203      	movs	r2, #3
 800d678:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7919      	ldrb	r1, [r3, #4]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d68e:	b292      	uxth	r2, r2
 800d690:	9202      	str	r2, [sp, #8]
 800d692:	2200      	movs	r2, #0
 800d694:	9201      	str	r2, [sp, #4]
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	4603      	mov	r3, r0
 800d69a:	2280      	movs	r2, #128	; 0x80
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 ffcf 	bl	800e640 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	7959      	ldrb	r1, [r3, #5]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6b6:	b292      	uxth	r2, r2
 800d6b8:	9202      	str	r2, [sp, #8]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	9201      	str	r2, [sp, #4]
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 ffbb 	bl	800e640 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d6ca:	e0e3      	b.n	800d894 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	2b03      	cmp	r3, #3
 800d6d0:	f040 80e0 	bne.w	800d894 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	220d      	movs	r2, #13
 800d6d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	705a      	strb	r2, [r3, #1]
      break;
 800d6e0:	e0d8      	b.n	800d894 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d6e2:	2109      	movs	r1, #9
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f99d 	bl	800da24 <USBH_Get_CfgDesc>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d6ee:	7bbb      	ldrb	r3, [r7, #14]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d103      	bne.n	800d6fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2204      	movs	r2, #4
 800d6f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d6fa:	e0cd      	b.n	800d898 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6fc:	7bbb      	ldrb	r3, [r7, #14]
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	f040 80ca 	bne.w	800d898 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d70a:	3301      	adds	r3, #1
 800d70c:	b2da      	uxtb	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d903      	bls.n	800d726 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	220d      	movs	r2, #13
 800d722:	701a      	strb	r2, [r3, #0]
      break;
 800d724:	e0b8      	b.n	800d898 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	795b      	ldrb	r3, [r3, #5]
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f000 ffd7 	bl	800e6e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 ffd1 	bl	800e6e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2200      	movs	r2, #0
 800d748:	701a      	strb	r2, [r3, #0]
      break;
 800d74a:	e0a5      	b.n	800d898 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d752:	4619      	mov	r1, r3
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 f965 	bl	800da24 <USBH_Get_CfgDesc>
 800d75a:	4603      	mov	r3, r0
 800d75c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d75e:	7bbb      	ldrb	r3, [r7, #14]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d103      	bne.n	800d76c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2205      	movs	r2, #5
 800d768:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d76a:	e097      	b.n	800d89c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2b03      	cmp	r3, #3
 800d770:	f040 8094 	bne.w	800d89c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d77a:	3301      	adds	r3, #1
 800d77c:	b2da      	uxtb	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d903      	bls.n	800d796 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	220d      	movs	r2, #13
 800d792:	701a      	strb	r2, [r3, #0]
      break;
 800d794:	e082      	b.n	800d89c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	795b      	ldrb	r3, [r3, #5]
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 ff9f 	bl	800e6e0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	791b      	ldrb	r3, [r3, #4]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 ff99 	bl	800e6e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	701a      	strb	r2, [r3, #0]
      break;
 800d7ba:	e06f      	b.n	800d89c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d019      	beq.n	800d7fa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d7d2:	23ff      	movs	r3, #255	; 0xff
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 f949 	bl	800da6c <USBH_Get_StringDesc>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d103      	bne.n	800d7ec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d7ea:	e059      	b.n	800d8a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7ec:	7bbb      	ldrb	r3, [r7, #14]
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	d156      	bne.n	800d8a0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2206      	movs	r2, #6
 800d7f6:	705a      	strb	r2, [r3, #1]
      break;
 800d7f8:	e052      	b.n	800d8a0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2206      	movs	r2, #6
 800d7fe:	705a      	strb	r2, [r3, #1]
      break;
 800d800:	e04e      	b.n	800d8a0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d019      	beq.n	800d840 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d818:	23ff      	movs	r3, #255	; 0xff
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f926 	bl	800da6c <USBH_Get_StringDesc>
 800d820:	4603      	mov	r3, r0
 800d822:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d824:	7bbb      	ldrb	r3, [r7, #14]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d103      	bne.n	800d832 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2207      	movs	r2, #7
 800d82e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d830:	e038      	b.n	800d8a4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d832:	7bbb      	ldrb	r3, [r7, #14]
 800d834:	2b03      	cmp	r3, #3
 800d836:	d135      	bne.n	800d8a4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2207      	movs	r2, #7
 800d83c:	705a      	strb	r2, [r3, #1]
      break;
 800d83e:	e031      	b.n	800d8a4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2207      	movs	r2, #7
 800d844:	705a      	strb	r2, [r3, #1]
      break;
 800d846:	e02d      	b.n	800d8a4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d017      	beq.n	800d882 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d85e:	23ff      	movs	r3, #255	; 0xff
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f903 	bl	800da6c <USBH_Get_StringDesc>
 800d866:	4603      	mov	r3, r0
 800d868:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d86a:	7bbb      	ldrb	r3, [r7, #14]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d874:	e018      	b.n	800d8a8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d876:	7bbb      	ldrb	r3, [r7, #14]
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d115      	bne.n	800d8a8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	73fb      	strb	r3, [r7, #15]
      break;
 800d880:	e012      	b.n	800d8a8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	73fb      	strb	r3, [r7, #15]
      break;
 800d886:	e00f      	b.n	800d8a8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d888:	bf00      	nop
 800d88a:	e00e      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d88c:	bf00      	nop
 800d88e:	e00c      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d890:	bf00      	nop
 800d892:	e00a      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d894:	bf00      	nop
 800d896:	e008      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d898:	bf00      	nop
 800d89a:	e006      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d89c:	bf00      	nop
 800d89e:	e004      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d8a0:	bf00      	nop
 800d8a2:	e002      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d8a4:	bf00      	nop
 800d8a6:	e000      	b.n	800d8aa <USBH_HandleEnum+0x3be>
      break;
 800d8a8:	bf00      	nop
  }
  return Status;
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	683a      	ldr	r2, [r7, #0]
 800d8c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d8c6:	bf00      	nop
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b082      	sub	sp, #8
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d8e0:	1c5a      	adds	r2, r3, #1
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f000 f804 	bl	800d8f6 <USBH_HandleSof>
}
 800d8ee:	bf00      	nop
 800d8f0:	3708      	adds	r7, #8
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}

0800d8f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d8f6:	b580      	push	{r7, lr}
 800d8f8:	b082      	sub	sp, #8
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	2b0b      	cmp	r3, #11
 800d906:	d10a      	bne.n	800d91e <USBH_HandleSof+0x28>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d005      	beq.n	800d91e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d918:	699b      	ldr	r3, [r3, #24]
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	4798      	blx	r3
  }
}
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d926:	b480      	push	{r7}
 800d928:	b083      	sub	sp, #12
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d936:	bf00      	nop
}
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d952:	bf00      	nop
}
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d97e:	2300      	movs	r3, #0
}
 800d980:	4618      	mov	r0, r3
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2201      	movs	r2, #1
 800d998:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f003 fa06 	bl	8010dbe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	791b      	ldrb	r3, [r3, #4]
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fe91 	bl	800e6e0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	795b      	ldrb	r3, [r3, #5]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fe8b 	bl	800e6e0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800d9e6:	78fb      	ldrb	r3, [r7, #3]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f864 	bl	800dac2 <USBH_GetDescriptor>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800d9fe:	7bfb      	ldrb	r3, [r7, #15]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10a      	bne.n	800da1a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f203 3026 	addw	r0, r3, #806	; 0x326
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800da10:	78fa      	ldrb	r2, [r7, #3]
 800da12:	b292      	uxth	r2, r2
 800da14:	4619      	mov	r1, r3
 800da16:	f000 f918 	bl	800dc4a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}

0800da24 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af02      	add	r7, sp, #8
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	460b      	mov	r3, r1
 800da2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	331c      	adds	r3, #28
 800da34:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800da36:	887b      	ldrh	r3, [r7, #2]
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da40:	2100      	movs	r1, #0
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f83d 	bl	800dac2 <USBH_GetDescriptor>
 800da48:	4603      	mov	r3, r0
 800da4a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d107      	bne.n	800da62 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800da52:	887b      	ldrh	r3, [r7, #2]
 800da54:	461a      	mov	r2, r3
 800da56:	68b9      	ldr	r1, [r7, #8]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 f987 	bl	800dd6c <USBH_ParseCfgDesc>
 800da5e:	4603      	mov	r3, r0
 800da60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800da62:	7bfb      	ldrb	r3, [r7, #15]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af02      	add	r7, sp, #8
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	607a      	str	r2, [r7, #4]
 800da76:	461a      	mov	r2, r3
 800da78:	460b      	mov	r3, r1
 800da7a:	72fb      	strb	r3, [r7, #11]
 800da7c:	4613      	mov	r3, r2
 800da7e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800da80:	7afb      	ldrb	r3, [r7, #11]
 800da82:	b29b      	uxth	r3, r3
 800da84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800da88:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800da90:	893b      	ldrh	r3, [r7, #8]
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	460b      	mov	r3, r1
 800da96:	2100      	movs	r1, #0
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f000 f812 	bl	800dac2 <USBH_GetDescriptor>
 800da9e:	4603      	mov	r3, r0
 800daa0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800daa2:	7dfb      	ldrb	r3, [r7, #23]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d107      	bne.n	800dab8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800daae:	893a      	ldrh	r2, [r7, #8]
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	4618      	mov	r0, r3
 800dab4:	f000 fb24 	bl	800e100 <USBH_ParseStringDesc>
  }

  return status;
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	607b      	str	r3, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	72fb      	strb	r3, [r7, #11]
 800dad0:	4613      	mov	r3, r2
 800dad2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	789b      	ldrb	r3, [r3, #2]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d11c      	bne.n	800db16 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dadc:	7afb      	ldrb	r3, [r7, #11]
 800dade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dae2:	b2da      	uxtb	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2206      	movs	r2, #6
 800daec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	893a      	ldrh	r2, [r7, #8]
 800daf2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800daf4:	893b      	ldrh	r3, [r7, #8]
 800daf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dafa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dafe:	d104      	bne.n	800db0a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f240 4209 	movw	r2, #1033	; 0x409
 800db06:	829a      	strh	r2, [r3, #20]
 800db08:	e002      	b.n	800db10 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2200      	movs	r2, #0
 800db0e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	8b3a      	ldrh	r2, [r7, #24]
 800db14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800db16:	8b3b      	ldrh	r3, [r7, #24]
 800db18:	461a      	mov	r2, r3
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f000 fb3d 	bl	800e19c <USBH_CtlReq>
 800db22:	4603      	mov	r3, r0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	789b      	ldrb	r3, [r3, #2]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d10f      	bne.n	800db60 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2205      	movs	r2, #5
 800db4a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800db4c:	78fb      	ldrb	r3, [r7, #3]
 800db4e:	b29a      	uxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800db60:	2200      	movs	r2, #0
 800db62:	2100      	movs	r1, #0
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 fb19 	bl	800e19c <USBH_CtlReq>
 800db6a:	4603      	mov	r3, r0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	789b      	ldrb	r3, [r3, #2]
 800db84:	2b01      	cmp	r3, #1
 800db86:	d10e      	bne.n	800dba6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2200      	movs	r2, #0
 800db8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2209      	movs	r2, #9
 800db92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	887a      	ldrh	r2, [r7, #2]
 800db98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dba6:	2200      	movs	r2, #0
 800dba8:	2100      	movs	r1, #0
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 faf6 	bl	800e19c <USBH_CtlReq>
 800dbb0:	4603      	mov	r3, r0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3708      	adds	r7, #8
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b082      	sub	sp, #8
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6078      	str	r0, [r7, #4]
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	789b      	ldrb	r3, [r3, #2]
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d10f      	bne.n	800dbee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2203      	movs	r2, #3
 800dbd8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dbda:	78fb      	ldrb	r3, [r7, #3]
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fad2 	bl	800e19c <USBH_CtlReq>
 800dbf8:	4603      	mov	r3, r0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3708      	adds	r7, #8
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b082      	sub	sp, #8
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	789b      	ldrb	r3, [r3, #2]
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d10f      	bne.n	800dc36 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2202      	movs	r2, #2
 800dc1a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2201      	movs	r2, #1
 800dc20:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2200      	movs	r2, #0
 800dc26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dc28:	78fb      	ldrb	r3, [r7, #3]
 800dc2a:	b29a      	uxth	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800dc36:	2200      	movs	r2, #0
 800dc38:	2100      	movs	r1, #0
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 faae 	bl	800e19c <USBH_CtlReq>
 800dc40:	4603      	mov	r3, r0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b085      	sub	sp, #20
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	60f8      	str	r0, [r7, #12]
 800dc52:	60b9      	str	r1, [r7, #8]
 800dc54:	4613      	mov	r3, r2
 800dc56:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	781a      	ldrb	r2, [r3, #0]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	785a      	ldrb	r2, [r3, #1]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	3302      	adds	r3, #2
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	3303      	adds	r3, #3
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	021b      	lsls	r3, r3, #8
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	b29a      	uxth	r2, r3
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	791a      	ldrb	r2, [r3, #4]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	795a      	ldrb	r2, [r3, #5]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	799a      	ldrb	r2, [r3, #6]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	79da      	ldrb	r2, [r3, #7]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	79db      	ldrb	r3, [r3, #7]
 800dca8:	2b20      	cmp	r3, #32
 800dcaa:	dc11      	bgt.n	800dcd0 <USBH_ParseDevDesc+0x86>
 800dcac:	2b08      	cmp	r3, #8
 800dcae:	db16      	blt.n	800dcde <USBH_ParseDevDesc+0x94>
 800dcb0:	3b08      	subs	r3, #8
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800dcb8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800dcbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	bf14      	ite	ne
 800dcc4:	2301      	movne	r3, #1
 800dcc6:	2300      	moveq	r3, #0
 800dcc8:	b2db      	uxtb	r3, r3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d102      	bne.n	800dcd4 <USBH_ParseDevDesc+0x8a>
 800dcce:	e006      	b.n	800dcde <USBH_ParseDevDesc+0x94>
 800dcd0:	2b40      	cmp	r3, #64	; 0x40
 800dcd2:	d104      	bne.n	800dcde <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	79da      	ldrb	r2, [r3, #7]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	71da      	strb	r2, [r3, #7]
      break;
 800dcdc:	e003      	b.n	800dce6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2240      	movs	r2, #64	; 0x40
 800dce2:	71da      	strb	r2, [r3, #7]
      break;
 800dce4:	bf00      	nop
  }

  if (length > 8U)
 800dce6:	88fb      	ldrh	r3, [r7, #6]
 800dce8:	2b08      	cmp	r3, #8
 800dcea:	d939      	bls.n	800dd60 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	3308      	adds	r3, #8
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	3309      	adds	r3, #9
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	4313      	orrs	r3, r2
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	330a      	adds	r3, #10
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	330b      	adds	r3, #11
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	021b      	lsls	r3, r3, #8
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	330c      	adds	r3, #12
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	330d      	adds	r3, #13
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	021b      	lsls	r3, r3, #8
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	7b9a      	ldrb	r2, [r3, #14]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	7bda      	ldrb	r2, [r3, #15]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	7c1a      	ldrb	r2, [r3, #16]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	7c5a      	ldrb	r2, [r3, #17]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	745a      	strb	r2, [r3, #17]
  }
}
 800dd60:	bf00      	nop
 800dd62:	3714      	adds	r7, #20
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	; 0x30
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	4613      	mov	r3, r2
 800dd78:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dd80:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	781a      	ldrb	r2, [r3, #0]
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	785a      	ldrb	r2, [r3, #1]
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	3302      	adds	r3, #2
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	b29a      	uxth	r2, r3
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	3303      	adds	r3, #3
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	b29b      	uxth	r3, r3
 800ddbc:	021b      	lsls	r3, r3, #8
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddc8:	bf28      	it	cs
 800ddca:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	791a      	ldrb	r2, [r3, #4]
 800ddd8:	6a3b      	ldr	r3, [r7, #32]
 800ddda:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	795a      	ldrb	r2, [r3, #5]
 800dde0:	6a3b      	ldr	r3, [r7, #32]
 800dde2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	799a      	ldrb	r2, [r3, #6]
 800dde8:	6a3b      	ldr	r3, [r7, #32]
 800ddea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	79da      	ldrb	r2, [r3, #7]
 800ddf0:	6a3b      	ldr	r3, [r7, #32]
 800ddf2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	7a1a      	ldrb	r2, [r3, #8]
 800ddf8:	6a3b      	ldr	r3, [r7, #32]
 800ddfa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	2b09      	cmp	r3, #9
 800de02:	d002      	beq.n	800de0a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	2209      	movs	r2, #9
 800de08:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800de0a:	88fb      	ldrh	r3, [r7, #6]
 800de0c:	2b09      	cmp	r3, #9
 800de0e:	f240 809d 	bls.w	800df4c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800de12:	2309      	movs	r3, #9
 800de14:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800de1a:	e081      	b.n	800df20 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de1c:	f107 0316 	add.w	r3, r7, #22
 800de20:	4619      	mov	r1, r3
 800de22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de24:	f000 f99f 	bl	800e166 <USBH_GetNextDesc>
 800de28:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800de2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de2c:	785b      	ldrb	r3, [r3, #1]
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d176      	bne.n	800df20 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800de32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b09      	cmp	r3, #9
 800de38:	d002      	beq.n	800de40 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800de3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3c:	2209      	movs	r2, #9
 800de3e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800de40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de44:	221a      	movs	r2, #26
 800de46:	fb02 f303 	mul.w	r3, r2, r3
 800de4a:	3308      	adds	r3, #8
 800de4c:	6a3a      	ldr	r2, [r7, #32]
 800de4e:	4413      	add	r3, r2
 800de50:	3302      	adds	r3, #2
 800de52:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800de54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de56:	69f8      	ldr	r0, [r7, #28]
 800de58:	f000 f87e 	bl	800df58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800de5c:	2300      	movs	r3, #0
 800de5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800de66:	e043      	b.n	800def0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800de68:	f107 0316 	add.w	r3, r7, #22
 800de6c:	4619      	mov	r1, r3
 800de6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de70:	f000 f979 	bl	800e166 <USBH_GetNextDesc>
 800de74:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	785b      	ldrb	r3, [r3, #1]
 800de7a:	2b05      	cmp	r3, #5
 800de7c:	d138      	bne.n	800def0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	795b      	ldrb	r3, [r3, #5]
 800de82:	2b01      	cmp	r3, #1
 800de84:	d10f      	bne.n	800dea6 <USBH_ParseCfgDesc+0x13a>
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	799b      	ldrb	r3, [r3, #6]
 800de8a:	2b02      	cmp	r3, #2
 800de8c:	d10b      	bne.n	800dea6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	79db      	ldrb	r3, [r3, #7]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d10f      	bne.n	800deb6 <USBH_ParseCfgDesc+0x14a>
 800de96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b09      	cmp	r3, #9
 800de9c:	d00b      	beq.n	800deb6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	2209      	movs	r2, #9
 800dea2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dea4:	e007      	b.n	800deb6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b07      	cmp	r3, #7
 800deac:	d004      	beq.n	800deb8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800deae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb0:	2207      	movs	r2, #7
 800deb2:	701a      	strb	r2, [r3, #0]
 800deb4:	e000      	b.n	800deb8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800deb6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800deb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800debc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dec0:	3201      	adds	r2, #1
 800dec2:	00d2      	lsls	r2, r2, #3
 800dec4:	211a      	movs	r1, #26
 800dec6:	fb01 f303 	mul.w	r3, r1, r3
 800deca:	4413      	add	r3, r2
 800decc:	3308      	adds	r3, #8
 800dece:	6a3a      	ldr	r2, [r7, #32]
 800ded0:	4413      	add	r3, r2
 800ded2:	3304      	adds	r3, #4
 800ded4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ded6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ded8:	69b9      	ldr	r1, [r7, #24]
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f000 f86b 	bl	800dfb6 <USBH_ParseEPDesc>
 800dee0:	4603      	mov	r3, r0
 800dee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800dee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deea:	3301      	adds	r3, #1
 800deec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	791b      	ldrb	r3, [r3, #4]
 800def4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800def8:	429a      	cmp	r2, r3
 800defa:	d204      	bcs.n	800df06 <USBH_ParseCfgDesc+0x19a>
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	885a      	ldrh	r2, [r3, #2]
 800df00:	8afb      	ldrh	r3, [r7, #22]
 800df02:	429a      	cmp	r2, r3
 800df04:	d8b0      	bhi.n	800de68 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	791b      	ldrb	r3, [r3, #4]
 800df0a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df0e:	429a      	cmp	r2, r3
 800df10:	d201      	bcs.n	800df16 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800df12:	2303      	movs	r3, #3
 800df14:	e01c      	b.n	800df50 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800df16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df1a:	3301      	adds	r3, #1
 800df1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df24:	2b01      	cmp	r3, #1
 800df26:	d805      	bhi.n	800df34 <USBH_ParseCfgDesc+0x1c8>
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	885a      	ldrh	r2, [r3, #2]
 800df2c:	8afb      	ldrh	r3, [r7, #22]
 800df2e:	429a      	cmp	r2, r3
 800df30:	f63f af74 	bhi.w	800de1c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	791b      	ldrb	r3, [r3, #4]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	bf28      	it	cs
 800df3c:	2302      	movcs	r3, #2
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800df44:	429a      	cmp	r2, r3
 800df46:	d201      	bcs.n	800df4c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800df48:	2303      	movs	r3, #3
 800df4a:	e001      	b.n	800df50 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800df4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800df50:	4618      	mov	r0, r3
 800df52:	3730      	adds	r7, #48	; 0x30
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781a      	ldrb	r2, [r3, #0]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	785a      	ldrb	r2, [r3, #1]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	789a      	ldrb	r2, [r3, #2]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	78da      	ldrb	r2, [r3, #3]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	791a      	ldrb	r2, [r3, #4]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	795a      	ldrb	r2, [r3, #5]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	799a      	ldrb	r2, [r3, #6]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	79da      	ldrb	r2, [r3, #7]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	7a1a      	ldrb	r2, [r3, #8]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	721a      	strb	r2, [r3, #8]
}
 800dfaa:	bf00      	nop
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b087      	sub	sp, #28
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	60b9      	str	r1, [r7, #8]
 800dfc0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	781a      	ldrb	r2, [r3, #0]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	785a      	ldrb	r2, [r3, #1]
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	789a      	ldrb	r2, [r3, #2]
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	78da      	ldrb	r2, [r3, #3]
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3304      	adds	r3, #4
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3305      	adds	r3, #5
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	021b      	lsls	r3, r3, #8
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	4313      	orrs	r3, r2
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	799a      	ldrb	r2, [r3, #6]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	889b      	ldrh	r3, [r3, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d102      	bne.n	800e018 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e012:	2303      	movs	r3, #3
 800e014:	75fb      	strb	r3, [r7, #23]
 800e016:	e033      	b.n	800e080 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	889b      	ldrh	r3, [r3, #4]
 800e01c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e020:	f023 0307 	bic.w	r3, r3, #7
 800e024:	b29a      	uxth	r2, r3
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	889b      	ldrh	r3, [r3, #4]
 800e02e:	b21a      	sxth	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3304      	adds	r3, #4
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	b299      	uxth	r1, r3
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	3305      	adds	r3, #5
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	b29b      	uxth	r3, r3
 800e040:	021b      	lsls	r3, r3, #8
 800e042:	b29b      	uxth	r3, r3
 800e044:	430b      	orrs	r3, r1
 800e046:	b29b      	uxth	r3, r3
 800e048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d110      	bne.n	800e072 <USBH_ParseEPDesc+0xbc>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3304      	adds	r3, #4
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	b299      	uxth	r1, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	3305      	adds	r3, #5
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	b29b      	uxth	r3, r3
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	b29b      	uxth	r3, r3
 800e064:	430b      	orrs	r3, r1
 800e066:	b29b      	uxth	r3, r3
 800e068:	b21b      	sxth	r3, r3
 800e06a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e06e:	b21b      	sxth	r3, r3
 800e070:	e001      	b.n	800e076 <USBH_ParseEPDesc+0xc0>
 800e072:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e076:	4313      	orrs	r3, r2
 800e078:	b21b      	sxth	r3, r3
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e086:	2b00      	cmp	r3, #0
 800e088:	d116      	bne.n	800e0b8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	78db      	ldrb	r3, [r3, #3]
 800e08e:	f003 0303 	and.w	r3, r3, #3
 800e092:	2b01      	cmp	r3, #1
 800e094:	d005      	beq.n	800e0a2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	78db      	ldrb	r3, [r3, #3]
 800e09a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e09e:	2b03      	cmp	r3, #3
 800e0a0:	d127      	bne.n	800e0f2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	799b      	ldrb	r3, [r3, #6]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d003      	beq.n	800e0b2 <USBH_ParseEPDesc+0xfc>
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	799b      	ldrb	r3, [r3, #6]
 800e0ae:	2b10      	cmp	r3, #16
 800e0b0:	d91f      	bls.n	800e0f2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e0b2:	2303      	movs	r3, #3
 800e0b4:	75fb      	strb	r3, [r7, #23]
 800e0b6:	e01c      	b.n	800e0f2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	78db      	ldrb	r3, [r3, #3]
 800e0bc:	f003 0303 	and.w	r3, r3, #3
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d10a      	bne.n	800e0da <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	799b      	ldrb	r3, [r3, #6]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <USBH_ParseEPDesc+0x11e>
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	799b      	ldrb	r3, [r3, #6]
 800e0d0:	2b10      	cmp	r3, #16
 800e0d2:	d90e      	bls.n	800e0f2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	75fb      	strb	r3, [r7, #23]
 800e0d8:	e00b      	b.n	800e0f2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	78db      	ldrb	r3, [r3, #3]
 800e0de:	f003 0303 	and.w	r3, r3, #3
 800e0e2:	2b03      	cmp	r3, #3
 800e0e4:	d105      	bne.n	800e0f2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	799b      	ldrb	r3, [r3, #6]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e0ee:	2303      	movs	r3, #3
 800e0f0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	371c      	adds	r7, #28
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e100:	b480      	push	{r7}
 800e102:	b087      	sub	sp, #28
 800e104:	af00      	add	r7, sp, #0
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	4613      	mov	r3, r2
 800e10c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	2b03      	cmp	r3, #3
 800e116:	d120      	bne.n	800e15a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	1e9a      	subs	r2, r3, #2
 800e11e:	88fb      	ldrh	r3, [r7, #6]
 800e120:	4293      	cmp	r3, r2
 800e122:	bf28      	it	cs
 800e124:	4613      	movcs	r3, r2
 800e126:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3302      	adds	r3, #2
 800e12c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e12e:	2300      	movs	r3, #0
 800e130:	82fb      	strh	r3, [r7, #22]
 800e132:	e00b      	b.n	800e14c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e134:	8afb      	ldrh	r3, [r7, #22]
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	4413      	add	r3, r2
 800e13a:	781a      	ldrb	r2, [r3, #0]
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	3301      	adds	r3, #1
 800e144:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e146:	8afb      	ldrh	r3, [r7, #22]
 800e148:	3302      	adds	r3, #2
 800e14a:	82fb      	strh	r3, [r7, #22]
 800e14c:	8afa      	ldrh	r2, [r7, #22]
 800e14e:	8abb      	ldrh	r3, [r7, #20]
 800e150:	429a      	cmp	r2, r3
 800e152:	d3ef      	bcc.n	800e134 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	2200      	movs	r2, #0
 800e158:	701a      	strb	r2, [r3, #0]
  }
}
 800e15a:	bf00      	nop
 800e15c:	371c      	adds	r7, #28
 800e15e:	46bd      	mov	sp, r7
 800e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e164:	4770      	bx	lr

0800e166 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e166:	b480      	push	{r7}
 800e168:	b085      	sub	sp, #20
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	881a      	ldrh	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	b29b      	uxth	r3, r3
 800e17a:	4413      	add	r3, r2
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4413      	add	r3, r2
 800e18c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e18e:	68fb      	ldr	r3, [r7, #12]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3714      	adds	r7, #20
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	789b      	ldrb	r3, [r3, #2]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d002      	beq.n	800e1bc <USBH_CtlReq+0x20>
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d00f      	beq.n	800e1da <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e1ba:	e027      	b.n	800e20c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	88fa      	ldrh	r2, [r7, #6]
 800e1c6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2202      	movs	r2, #2
 800e1d2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	75fb      	strb	r3, [r7, #23]
      break;
 800e1d8:	e018      	b.n	800e20c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f000 f81c 	bl	800e218 <USBH_HandleControl>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d002      	beq.n	800e1f0 <USBH_CtlReq+0x54>
 800e1ea:	7dfb      	ldrb	r3, [r7, #23]
 800e1ec:	2b03      	cmp	r3, #3
 800e1ee:	d106      	bne.n	800e1fe <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	761a      	strb	r2, [r3, #24]
      break;
 800e1fc:	e005      	b.n	800e20a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e1fe:	7dfb      	ldrb	r3, [r7, #23]
 800e200:	2b02      	cmp	r3, #2
 800e202:	d102      	bne.n	800e20a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2201      	movs	r2, #1
 800e208:	709a      	strb	r2, [r3, #2]
      break;
 800e20a:	bf00      	nop
  }
  return status;
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3718      	adds	r7, #24
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af02      	add	r7, sp, #8
 800e21e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e220:	2301      	movs	r3, #1
 800e222:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e224:	2300      	movs	r3, #0
 800e226:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7e1b      	ldrb	r3, [r3, #24]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	2b0a      	cmp	r3, #10
 800e230:	f200 8156 	bhi.w	800e4e0 <USBH_HandleControl+0x2c8>
 800e234:	a201      	add	r2, pc, #4	; (adr r2, 800e23c <USBH_HandleControl+0x24>)
 800e236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e23a:	bf00      	nop
 800e23c:	0800e269 	.word	0x0800e269
 800e240:	0800e283 	.word	0x0800e283
 800e244:	0800e2ed 	.word	0x0800e2ed
 800e248:	0800e313 	.word	0x0800e313
 800e24c:	0800e34b 	.word	0x0800e34b
 800e250:	0800e375 	.word	0x0800e375
 800e254:	0800e3c7 	.word	0x0800e3c7
 800e258:	0800e3e9 	.word	0x0800e3e9
 800e25c:	0800e425 	.word	0x0800e425
 800e260:	0800e44b 	.word	0x0800e44b
 800e264:	0800e489 	.word	0x0800e489
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f103 0110 	add.w	r1, r3, #16
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	795b      	ldrb	r3, [r3, #5]
 800e272:	461a      	mov	r2, r3
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 f943 	bl	800e500 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2202      	movs	r2, #2
 800e27e:	761a      	strb	r2, [r3, #24]
      break;
 800e280:	e139      	b.n	800e4f6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	795b      	ldrb	r3, [r3, #5]
 800e286:	4619      	mov	r1, r3
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f002 fe87 	bl	8010f9c <USBH_LL_GetURBState>
 800e28e:	4603      	mov	r3, r0
 800e290:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e292:	7bbb      	ldrb	r3, [r7, #14]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d11e      	bne.n	800e2d6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7c1b      	ldrb	r3, [r3, #16]
 800e29c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e2a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	8adb      	ldrh	r3, [r3, #22]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00a      	beq.n	800e2c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e2aa:	7b7b      	ldrb	r3, [r7, #13]
 800e2ac:	2b80      	cmp	r3, #128	; 0x80
 800e2ae:	d103      	bne.n	800e2b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2203      	movs	r2, #3
 800e2b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e2b6:	e115      	b.n	800e4e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2205      	movs	r2, #5
 800e2bc:	761a      	strb	r2, [r3, #24]
      break;
 800e2be:	e111      	b.n	800e4e4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e2c0:	7b7b      	ldrb	r3, [r7, #13]
 800e2c2:	2b80      	cmp	r3, #128	; 0x80
 800e2c4:	d103      	bne.n	800e2ce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2209      	movs	r2, #9
 800e2ca:	761a      	strb	r2, [r3, #24]
      break;
 800e2cc:	e10a      	b.n	800e4e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2207      	movs	r2, #7
 800e2d2:	761a      	strb	r2, [r3, #24]
      break;
 800e2d4:	e106      	b.n	800e4e4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e2d6:	7bbb      	ldrb	r3, [r7, #14]
 800e2d8:	2b04      	cmp	r3, #4
 800e2da:	d003      	beq.n	800e2e4 <USBH_HandleControl+0xcc>
 800e2dc:	7bbb      	ldrb	r3, [r7, #14]
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	f040 8100 	bne.w	800e4e4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	220b      	movs	r2, #11
 800e2e8:	761a      	strb	r2, [r3, #24]
      break;
 800e2ea:	e0fb      	b.n	800e4e4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6899      	ldr	r1, [r3, #8]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	899a      	ldrh	r2, [r3, #12]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	791b      	ldrb	r3, [r3, #4]
 800e304:	6878      	ldr	r0, [r7, #4]
 800e306:	f000 f93a 	bl	800e57e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2204      	movs	r2, #4
 800e30e:	761a      	strb	r2, [r3, #24]
      break;
 800e310:	e0f1      	b.n	800e4f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	791b      	ldrb	r3, [r3, #4]
 800e316:	4619      	mov	r1, r3
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f002 fe3f 	bl	8010f9c <USBH_LL_GetURBState>
 800e31e:	4603      	mov	r3, r0
 800e320:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e322:	7bbb      	ldrb	r3, [r7, #14]
 800e324:	2b01      	cmp	r3, #1
 800e326:	d102      	bne.n	800e32e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2209      	movs	r2, #9
 800e32c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e32e:	7bbb      	ldrb	r3, [r7, #14]
 800e330:	2b05      	cmp	r3, #5
 800e332:	d102      	bne.n	800e33a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e334:	2303      	movs	r3, #3
 800e336:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e338:	e0d6      	b.n	800e4e8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e33a:	7bbb      	ldrb	r3, [r7, #14]
 800e33c:	2b04      	cmp	r3, #4
 800e33e:	f040 80d3 	bne.w	800e4e8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	220b      	movs	r2, #11
 800e346:	761a      	strb	r2, [r3, #24]
      break;
 800e348:	e0ce      	b.n	800e4e8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6899      	ldr	r1, [r3, #8]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	899a      	ldrh	r2, [r3, #12]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	795b      	ldrb	r3, [r3, #5]
 800e356:	2001      	movs	r0, #1
 800e358:	9000      	str	r0, [sp, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f8ea 	bl	800e534 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e366:	b29a      	uxth	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2206      	movs	r2, #6
 800e370:	761a      	strb	r2, [r3, #24]
      break;
 800e372:	e0c0      	b.n	800e4f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	795b      	ldrb	r3, [r3, #5]
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f002 fe0e 	bl	8010f9c <USBH_LL_GetURBState>
 800e380:	4603      	mov	r3, r0
 800e382:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e384:	7bbb      	ldrb	r3, [r7, #14]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d103      	bne.n	800e392 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2207      	movs	r2, #7
 800e38e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e390:	e0ac      	b.n	800e4ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e392:	7bbb      	ldrb	r3, [r7, #14]
 800e394:	2b05      	cmp	r3, #5
 800e396:	d105      	bne.n	800e3a4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	220c      	movs	r2, #12
 800e39c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e39e:	2303      	movs	r3, #3
 800e3a0:	73fb      	strb	r3, [r7, #15]
      break;
 800e3a2:	e0a3      	b.n	800e4ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d103      	bne.n	800e3b2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2205      	movs	r2, #5
 800e3ae:	761a      	strb	r2, [r3, #24]
      break;
 800e3b0:	e09c      	b.n	800e4ec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e3b2:	7bbb      	ldrb	r3, [r7, #14]
 800e3b4:	2b04      	cmp	r3, #4
 800e3b6:	f040 8099 	bne.w	800e4ec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	220b      	movs	r2, #11
 800e3be:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e3c0:	2302      	movs	r3, #2
 800e3c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e3c4:	e092      	b.n	800e4ec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	791b      	ldrb	r3, [r3, #4]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 f8d5 	bl	800e57e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2208      	movs	r2, #8
 800e3e4:	761a      	strb	r2, [r3, #24]

      break;
 800e3e6:	e086      	b.n	800e4f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	791b      	ldrb	r3, [r3, #4]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f002 fdd4 	bl	8010f9c <USBH_LL_GetURBState>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e3f8:	7bbb      	ldrb	r3, [r7, #14]
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d105      	bne.n	800e40a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	220d      	movs	r2, #13
 800e402:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e404:	2300      	movs	r3, #0
 800e406:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e408:	e072      	b.n	800e4f0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	2b04      	cmp	r3, #4
 800e40e:	d103      	bne.n	800e418 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	220b      	movs	r2, #11
 800e414:	761a      	strb	r2, [r3, #24]
      break;
 800e416:	e06b      	b.n	800e4f0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e418:	7bbb      	ldrb	r3, [r7, #14]
 800e41a:	2b05      	cmp	r3, #5
 800e41c:	d168      	bne.n	800e4f0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e41e:	2303      	movs	r3, #3
 800e420:	73fb      	strb	r3, [r7, #15]
      break;
 800e422:	e065      	b.n	800e4f0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	795b      	ldrb	r3, [r3, #5]
 800e428:	2201      	movs	r2, #1
 800e42a:	9200      	str	r2, [sp, #0]
 800e42c:	2200      	movs	r2, #0
 800e42e:	2100      	movs	r1, #0
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f87f 	bl	800e534 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	220a      	movs	r2, #10
 800e446:	761a      	strb	r2, [r3, #24]
      break;
 800e448:	e055      	b.n	800e4f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	795b      	ldrb	r3, [r3, #5]
 800e44e:	4619      	mov	r1, r3
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f002 fda3 	bl	8010f9c <USBH_LL_GetURBState>
 800e456:	4603      	mov	r3, r0
 800e458:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e45a:	7bbb      	ldrb	r3, [r7, #14]
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d105      	bne.n	800e46c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	220d      	movs	r2, #13
 800e468:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e46a:	e043      	b.n	800e4f4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e46c:	7bbb      	ldrb	r3, [r7, #14]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d103      	bne.n	800e47a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2209      	movs	r2, #9
 800e476:	761a      	strb	r2, [r3, #24]
      break;
 800e478:	e03c      	b.n	800e4f4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e47a:	7bbb      	ldrb	r3, [r7, #14]
 800e47c:	2b04      	cmp	r3, #4
 800e47e:	d139      	bne.n	800e4f4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	220b      	movs	r2, #11
 800e484:	761a      	strb	r2, [r3, #24]
      break;
 800e486:	e035      	b.n	800e4f4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	7e5b      	ldrb	r3, [r3, #25]
 800e48c:	3301      	adds	r3, #1
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	765a      	strb	r2, [r3, #25]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7e5b      	ldrb	r3, [r3, #25]
 800e498:	2b02      	cmp	r3, #2
 800e49a:	d806      	bhi.n	800e4aa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e4a8:	e025      	b.n	800e4f6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e4b0:	2106      	movs	r1, #6
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	795b      	ldrb	r3, [r3, #5]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f90c 	bl	800e6e0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	791b      	ldrb	r3, [r3, #4]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 f906 	bl	800e6e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e4da:	2302      	movs	r3, #2
 800e4dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e4de:	e00a      	b.n	800e4f6 <USBH_HandleControl+0x2de>

    default:
      break;
 800e4e0:	bf00      	nop
 800e4e2:	e008      	b.n	800e4f6 <USBH_HandleControl+0x2de>
      break;
 800e4e4:	bf00      	nop
 800e4e6:	e006      	b.n	800e4f6 <USBH_HandleControl+0x2de>
      break;
 800e4e8:	bf00      	nop
 800e4ea:	e004      	b.n	800e4f6 <USBH_HandleControl+0x2de>
      break;
 800e4ec:	bf00      	nop
 800e4ee:	e002      	b.n	800e4f6 <USBH_HandleControl+0x2de>
      break;
 800e4f0:	bf00      	nop
 800e4f2:	e000      	b.n	800e4f6 <USBH_HandleControl+0x2de>
      break;
 800e4f4:	bf00      	nop
  }

  return status;
 800e4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b088      	sub	sp, #32
 800e504:	af04      	add	r7, sp, #16
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	4613      	mov	r3, r2
 800e50c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e50e:	79f9      	ldrb	r1, [r7, #7]
 800e510:	2300      	movs	r3, #0
 800e512:	9303      	str	r3, [sp, #12]
 800e514:	2308      	movs	r3, #8
 800e516:	9302      	str	r3, [sp, #8]
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	2300      	movs	r3, #0
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	2300      	movs	r3, #0
 800e522:	2200      	movs	r2, #0
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f002 fd08 	bl	8010f3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	3710      	adds	r7, #16
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}

0800e534 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b088      	sub	sp, #32
 800e538:	af04      	add	r7, sp, #16
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	60b9      	str	r1, [r7, #8]
 800e53e:	4611      	mov	r1, r2
 800e540:	461a      	mov	r2, r3
 800e542:	460b      	mov	r3, r1
 800e544:	80fb      	strh	r3, [r7, #6]
 800e546:	4613      	mov	r3, r2
 800e548:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e554:	2300      	movs	r3, #0
 800e556:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e558:	7979      	ldrb	r1, [r7, #5]
 800e55a:	7e3b      	ldrb	r3, [r7, #24]
 800e55c:	9303      	str	r3, [sp, #12]
 800e55e:	88fb      	ldrh	r3, [r7, #6]
 800e560:	9302      	str	r3, [sp, #8]
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	2301      	movs	r3, #1
 800e568:	9300      	str	r3, [sp, #0]
 800e56a:	2300      	movs	r3, #0
 800e56c:	2200      	movs	r2, #0
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f002 fce3 	bl	8010f3a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b088      	sub	sp, #32
 800e582:	af04      	add	r7, sp, #16
 800e584:	60f8      	str	r0, [r7, #12]
 800e586:	60b9      	str	r1, [r7, #8]
 800e588:	4611      	mov	r1, r2
 800e58a:	461a      	mov	r2, r3
 800e58c:	460b      	mov	r3, r1
 800e58e:	80fb      	strh	r3, [r7, #6]
 800e590:	4613      	mov	r3, r2
 800e592:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e594:	7979      	ldrb	r1, [r7, #5]
 800e596:	2300      	movs	r3, #0
 800e598:	9303      	str	r3, [sp, #12]
 800e59a:	88fb      	ldrh	r3, [r7, #6]
 800e59c:	9302      	str	r3, [sp, #8]
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	9301      	str	r3, [sp, #4]
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f002 fcc5 	bl	8010f3a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e5b0:	2300      	movs	r3, #0

}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e5ba:	b580      	push	{r7, lr}
 800e5bc:	b088      	sub	sp, #32
 800e5be:	af04      	add	r7, sp, #16
 800e5c0:	60f8      	str	r0, [r7, #12]
 800e5c2:	60b9      	str	r1, [r7, #8]
 800e5c4:	4611      	mov	r1, r2
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	80fb      	strh	r3, [r7, #6]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d001      	beq.n	800e5de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e5de:	7979      	ldrb	r1, [r7, #5]
 800e5e0:	7e3b      	ldrb	r3, [r7, #24]
 800e5e2:	9303      	str	r3, [sp, #12]
 800e5e4:	88fb      	ldrh	r3, [r7, #6]
 800e5e6:	9302      	str	r3, [sp, #8]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	9301      	str	r3, [sp, #4]
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	9300      	str	r3, [sp, #0]
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f002 fca0 	bl	8010f3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af04      	add	r7, sp, #16
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	4611      	mov	r1, r2
 800e610:	461a      	mov	r2, r3
 800e612:	460b      	mov	r3, r1
 800e614:	80fb      	strh	r3, [r7, #6]
 800e616:	4613      	mov	r3, r2
 800e618:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e61a:	7979      	ldrb	r1, [r7, #5]
 800e61c:	2300      	movs	r3, #0
 800e61e:	9303      	str	r3, [sp, #12]
 800e620:	88fb      	ldrh	r3, [r7, #6]
 800e622:	9302      	str	r3, [sp, #8]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	2301      	movs	r3, #1
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	2302      	movs	r3, #2
 800e62e:	2201      	movs	r2, #1
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f002 fc82 	bl	8010f3a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b086      	sub	sp, #24
 800e644:	af04      	add	r7, sp, #16
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	4608      	mov	r0, r1
 800e64a:	4611      	mov	r1, r2
 800e64c:	461a      	mov	r2, r3
 800e64e:	4603      	mov	r3, r0
 800e650:	70fb      	strb	r3, [r7, #3]
 800e652:	460b      	mov	r3, r1
 800e654:	70bb      	strb	r3, [r7, #2]
 800e656:	4613      	mov	r3, r2
 800e658:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e65a:	7878      	ldrb	r0, [r7, #1]
 800e65c:	78ba      	ldrb	r2, [r7, #2]
 800e65e:	78f9      	ldrb	r1, [r7, #3]
 800e660:	8b3b      	ldrh	r3, [r7, #24]
 800e662:	9302      	str	r3, [sp, #8]
 800e664:	7d3b      	ldrb	r3, [r7, #20]
 800e666:	9301      	str	r3, [sp, #4]
 800e668:	7c3b      	ldrb	r3, [r7, #16]
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	4603      	mov	r3, r0
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f002 fc15 	bl	8010e9e <USBH_LL_OpenPipe>

  return USBH_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
 800e686:	460b      	mov	r3, r1
 800e688:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e68a:	78fb      	ldrb	r3, [r7, #3]
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f002 fc34 	bl	8010efc <USBH_LL_ClosePipe>

  return USBH_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e69e:	b580      	push	{r7, lr}
 800e6a0:	b084      	sub	sp, #16
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f836 	bl	800e71c <USBH_GetFreePipe>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e6b4:	89fb      	ldrh	r3, [r7, #14]
 800e6b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d00a      	beq.n	800e6d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e6be:	78fa      	ldrb	r2, [r7, #3]
 800e6c0:	89fb      	ldrh	r3, [r7, #14]
 800e6c2:	f003 030f 	and.w	r3, r3, #15
 800e6c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	33e0      	adds	r3, #224	; 0xe0
 800e6ce:	009b      	lsls	r3, r3, #2
 800e6d0:	440b      	add	r3, r1
 800e6d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e6d4:	89fb      	ldrh	r3, [r7, #14]
 800e6d6:	b2db      	uxtb	r3, r3
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e6ec:	78fb      	ldrb	r3, [r7, #3]
 800e6ee:	2b0f      	cmp	r3, #15
 800e6f0:	d80d      	bhi.n	800e70e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e6f2:	78fb      	ldrb	r3, [r7, #3]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	33e0      	adds	r3, #224	; 0xe0
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	685a      	ldr	r2, [r3, #4]
 800e6fe:	78fb      	ldrb	r3, [r7, #3]
 800e700:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e704:	6879      	ldr	r1, [r7, #4]
 800e706:	33e0      	adds	r3, #224	; 0xe0
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	440b      	add	r3, r1
 800e70c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b085      	sub	sp, #20
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e728:	2300      	movs	r3, #0
 800e72a:	73fb      	strb	r3, [r7, #15]
 800e72c:	e00f      	b.n	800e74e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e72e:	7bfb      	ldrb	r3, [r7, #15]
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	33e0      	adds	r3, #224	; 0xe0
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d102      	bne.n	800e748 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e742:	7bfb      	ldrb	r3, [r7, #15]
 800e744:	b29b      	uxth	r3, r3
 800e746:	e007      	b.n	800e758 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	3301      	adds	r3, #1
 800e74c:	73fb      	strb	r3, [r7, #15]
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	2b0f      	cmp	r3, #15
 800e752:	d9ec      	bls.n	800e72e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e754:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	4a08      	ldr	r2, [pc, #32]	; (800e794 <disk_status+0x30>)
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	4413      	add	r3, r2
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	79fa      	ldrb	r2, [r7, #7]
 800e77c:	4905      	ldr	r1, [pc, #20]	; (800e794 <disk_status+0x30>)
 800e77e:	440a      	add	r2, r1
 800e780:	7a12      	ldrb	r2, [r2, #8]
 800e782:	4610      	mov	r0, r2
 800e784:	4798      	blx	r3
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e78c:	4618      	mov	r0, r3
 800e78e:	3710      	adds	r7, #16
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	2000384c 	.word	0x2000384c

0800e798 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	4a0d      	ldr	r2, [pc, #52]	; (800e7e0 <disk_initialize+0x48>)
 800e7aa:	5cd3      	ldrb	r3, [r2, r3]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d111      	bne.n	800e7d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	4a0b      	ldr	r2, [pc, #44]	; (800e7e0 <disk_initialize+0x48>)
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	4a09      	ldr	r2, [pc, #36]	; (800e7e0 <disk_initialize+0x48>)
 800e7bc:	009b      	lsls	r3, r3, #2
 800e7be:	4413      	add	r3, r2
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	79fa      	ldrb	r2, [r7, #7]
 800e7c6:	4906      	ldr	r1, [pc, #24]	; (800e7e0 <disk_initialize+0x48>)
 800e7c8:	440a      	add	r2, r1
 800e7ca:	7a12      	ldrb	r2, [r2, #8]
 800e7cc:	4610      	mov	r0, r2
 800e7ce:	4798      	blx	r3
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	2000384c 	.word	0x2000384c

0800e7e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e7e4:	b590      	push	{r4, r7, lr}
 800e7e6:	b087      	sub	sp, #28
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60b9      	str	r1, [r7, #8]
 800e7ec:	607a      	str	r2, [r7, #4]
 800e7ee:	603b      	str	r3, [r7, #0]
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	4a0a      	ldr	r2, [pc, #40]	; (800e820 <disk_read+0x3c>)
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	4413      	add	r3, r2
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	689c      	ldr	r4, [r3, #8]
 800e800:	7bfb      	ldrb	r3, [r7, #15]
 800e802:	4a07      	ldr	r2, [pc, #28]	; (800e820 <disk_read+0x3c>)
 800e804:	4413      	add	r3, r2
 800e806:	7a18      	ldrb	r0, [r3, #8]
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	68b9      	ldr	r1, [r7, #8]
 800e80e:	47a0      	blx	r4
 800e810:	4603      	mov	r3, r0
 800e812:	75fb      	strb	r3, [r7, #23]
  return res;
 800e814:	7dfb      	ldrb	r3, [r7, #23]
}
 800e816:	4618      	mov	r0, r3
 800e818:	371c      	adds	r7, #28
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd90      	pop	{r4, r7, pc}
 800e81e:	bf00      	nop
 800e820:	2000384c 	.word	0x2000384c

0800e824 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e824:	b590      	push	{r4, r7, lr}
 800e826:	b087      	sub	sp, #28
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60b9      	str	r1, [r7, #8]
 800e82c:	607a      	str	r2, [r7, #4]
 800e82e:	603b      	str	r3, [r7, #0]
 800e830:	4603      	mov	r3, r0
 800e832:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e834:	7bfb      	ldrb	r3, [r7, #15]
 800e836:	4a0a      	ldr	r2, [pc, #40]	; (800e860 <disk_write+0x3c>)
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	68dc      	ldr	r4, [r3, #12]
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	4a07      	ldr	r2, [pc, #28]	; (800e860 <disk_write+0x3c>)
 800e844:	4413      	add	r3, r2
 800e846:	7a18      	ldrb	r0, [r3, #8]
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	68b9      	ldr	r1, [r7, #8]
 800e84e:	47a0      	blx	r4
 800e850:	4603      	mov	r3, r0
 800e852:	75fb      	strb	r3, [r7, #23]
  return res;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
}
 800e856:	4618      	mov	r0, r3
 800e858:	371c      	adds	r7, #28
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd90      	pop	{r4, r7, pc}
 800e85e:	bf00      	nop
 800e860:	2000384c 	.word	0x2000384c

0800e864 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	4603      	mov	r3, r0
 800e86c:	603a      	str	r2, [r7, #0]
 800e86e:	71fb      	strb	r3, [r7, #7]
 800e870:	460b      	mov	r3, r1
 800e872:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e874:	79fb      	ldrb	r3, [r7, #7]
 800e876:	4a09      	ldr	r2, [pc, #36]	; (800e89c <disk_ioctl+0x38>)
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	79fa      	ldrb	r2, [r7, #7]
 800e882:	4906      	ldr	r1, [pc, #24]	; (800e89c <disk_ioctl+0x38>)
 800e884:	440a      	add	r2, r1
 800e886:	7a10      	ldrb	r0, [r2, #8]
 800e888:	79b9      	ldrb	r1, [r7, #6]
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	4798      	blx	r3
 800e88e:	4603      	mov	r3, r0
 800e890:	73fb      	strb	r3, [r7, #15]
  return res;
 800e892:	7bfb      	ldrb	r3, [r7, #15]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	2000384c 	.word	0x2000384c

0800e8a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e8b0:	89fb      	ldrh	r3, [r7, #14]
 800e8b2:	021b      	lsls	r3, r3, #8
 800e8b4:	b21a      	sxth	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	b21b      	sxth	r3, r3
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	b21b      	sxth	r3, r3
 800e8c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e8c2:	89fb      	ldrh	r3, [r7, #14]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3714      	adds	r7, #20
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	3303      	adds	r3, #3
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	021b      	lsls	r3, r3, #8
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	3202      	adds	r2, #2
 800e8e8:	7812      	ldrb	r2, [r2, #0]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	021b      	lsls	r3, r3, #8
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	3201      	adds	r2, #1
 800e8f6:	7812      	ldrb	r2, [r2, #0]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	021b      	lsls	r3, r3, #8
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	7812      	ldrb	r2, [r2, #0]
 800e904:	4313      	orrs	r3, r2
 800e906:	60fb      	str	r3, [r7, #12]
	return rv;
 800e908:	68fb      	ldr	r3, [r7, #12]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3714      	adds	r7, #20
 800e90e:	46bd      	mov	sp, r7
 800e910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e914:	4770      	bx	lr

0800e916 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e916:	b480      	push	{r7}
 800e918:	b083      	sub	sp, #12
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	460b      	mov	r3, r1
 800e920:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	1c5a      	adds	r2, r3, #1
 800e926:	607a      	str	r2, [r7, #4]
 800e928:	887a      	ldrh	r2, [r7, #2]
 800e92a:	b2d2      	uxtb	r2, r2
 800e92c:	701a      	strb	r2, [r3, #0]
 800e92e:	887b      	ldrh	r3, [r7, #2]
 800e930:	0a1b      	lsrs	r3, r3, #8
 800e932:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	1c5a      	adds	r2, r3, #1
 800e938:	607a      	str	r2, [r7, #4]
 800e93a:	887a      	ldrh	r2, [r7, #2]
 800e93c:	b2d2      	uxtb	r2, r2
 800e93e:	701a      	strb	r2, [r3, #0]
}
 800e940:	bf00      	nop
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	607a      	str	r2, [r7, #4]
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	b2d2      	uxtb	r2, r2
 800e960:	701a      	strb	r2, [r3, #0]
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	0a1b      	lsrs	r3, r3, #8
 800e966:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	1c5a      	adds	r2, r3, #1
 800e96c:	607a      	str	r2, [r7, #4]
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	b2d2      	uxtb	r2, r2
 800e972:	701a      	strb	r2, [r3, #0]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	0a1b      	lsrs	r3, r3, #8
 800e978:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	1c5a      	adds	r2, r3, #1
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	b2d2      	uxtb	r2, r2
 800e984:	701a      	strb	r2, [r3, #0]
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	0a1b      	lsrs	r3, r3, #8
 800e98a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	1c5a      	adds	r2, r3, #1
 800e990:	607a      	str	r2, [r7, #4]
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	b2d2      	uxtb	r2, r2
 800e996:	701a      	strb	r2, [r3, #0]
}
 800e998:	bf00      	nop
 800e99a:	370c      	adds	r7, #12
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr

0800e9a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00d      	beq.n	800e9da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e9be:	693a      	ldr	r2, [r7, #16]
 800e9c0:	1c53      	adds	r3, r2, #1
 800e9c2:	613b      	str	r3, [r7, #16]
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	1c59      	adds	r1, r3, #1
 800e9c8:	6179      	str	r1, [r7, #20]
 800e9ca:	7812      	ldrb	r2, [r2, #0]
 800e9cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3b01      	subs	r3, #1
 800e9d2:	607b      	str	r3, [r7, #4]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1f1      	bne.n	800e9be <mem_cpy+0x1a>
	}
}
 800e9da:	bf00      	nop
 800e9dc:	371c      	adds	r7, #28
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e9e6:	b480      	push	{r7}
 800e9e8:	b087      	sub	sp, #28
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	60f8      	str	r0, [r7, #12]
 800e9ee:	60b9      	str	r1, [r7, #8]
 800e9f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	1c5a      	adds	r2, r3, #1
 800e9fa:	617a      	str	r2, [r7, #20]
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	b2d2      	uxtb	r2, r2
 800ea00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	3b01      	subs	r3, #1
 800ea06:	607b      	str	r3, [r7, #4]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d1f3      	bne.n	800e9f6 <mem_set+0x10>
}
 800ea0e:	bf00      	nop
 800ea10:	bf00      	nop
 800ea12:	371c      	adds	r7, #28
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ea1c:	b480      	push	{r7}
 800ea1e:	b089      	sub	sp, #36	; 0x24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	61fb      	str	r3, [r7, #28]
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	61fa      	str	r2, [r7, #28]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	4619      	mov	r1, r3
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	61ba      	str	r2, [r7, #24]
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	1acb      	subs	r3, r1, r3
 800ea48:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	3b01      	subs	r3, #1
 800ea4e:	607b      	str	r3, [r7, #4]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <mem_cmp+0x40>
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d0eb      	beq.n	800ea34 <mem_cmp+0x18>

	return r;
 800ea5c:	697b      	ldr	r3, [r7, #20]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3724      	adds	r7, #36	; 0x24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr

0800ea6a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ea6a:	b480      	push	{r7}
 800ea6c:	b083      	sub	sp, #12
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	6078      	str	r0, [r7, #4]
 800ea72:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ea74:	e002      	b.n	800ea7c <chk_chr+0x12>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	3301      	adds	r3, #1
 800ea7a:	607b      	str	r3, [r7, #4]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d005      	beq.n	800ea90 <chk_chr+0x26>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	781b      	ldrb	r3, [r3, #0]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	4293      	cmp	r3, r2
 800ea8e:	d1f2      	bne.n	800ea76 <chk_chr+0xc>
	return *str;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	781b      	ldrb	r3, [r3, #0]
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eaaa:	2300      	movs	r3, #0
 800eaac:	60bb      	str	r3, [r7, #8]
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	60fb      	str	r3, [r7, #12]
 800eab2:	e029      	b.n	800eb08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eab4:	4a27      	ldr	r2, [pc, #156]	; (800eb54 <chk_lock+0xb4>)
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	011b      	lsls	r3, r3, #4
 800eaba:	4413      	add	r3, r2
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d01d      	beq.n	800eafe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eac2:	4a24      	ldr	r2, [pc, #144]	; (800eb54 <chk_lock+0xb4>)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	011b      	lsls	r3, r3, #4
 800eac8:	4413      	add	r3, r2
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d116      	bne.n	800eb02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ead4:	4a1f      	ldr	r2, [pc, #124]	; (800eb54 <chk_lock+0xb4>)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	011b      	lsls	r3, r3, #4
 800eada:	4413      	add	r3, r2
 800eadc:	3304      	adds	r3, #4
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d10c      	bne.n	800eb02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eae8:	4a1a      	ldr	r2, [pc, #104]	; (800eb54 <chk_lock+0xb4>)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	011b      	lsls	r3, r3, #4
 800eaee:	4413      	add	r3, r2
 800eaf0:	3308      	adds	r3, #8
 800eaf2:	681a      	ldr	r2, [r3, #0]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d102      	bne.n	800eb02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800eafc:	e007      	b.n	800eb0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800eafe:	2301      	movs	r3, #1
 800eb00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	3301      	adds	r3, #1
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d9d2      	bls.n	800eab4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b02      	cmp	r3, #2
 800eb12:	d109      	bne.n	800eb28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d102      	bne.n	800eb20 <chk_lock+0x80>
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	2b02      	cmp	r3, #2
 800eb1e:	d101      	bne.n	800eb24 <chk_lock+0x84>
 800eb20:	2300      	movs	r3, #0
 800eb22:	e010      	b.n	800eb46 <chk_lock+0xa6>
 800eb24:	2312      	movs	r3, #18
 800eb26:	e00e      	b.n	800eb46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d108      	bne.n	800eb40 <chk_lock+0xa0>
 800eb2e:	4a09      	ldr	r2, [pc, #36]	; (800eb54 <chk_lock+0xb4>)
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	011b      	lsls	r3, r3, #4
 800eb34:	4413      	add	r3, r2
 800eb36:	330c      	adds	r3, #12
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb3e:	d101      	bne.n	800eb44 <chk_lock+0xa4>
 800eb40:	2310      	movs	r3, #16
 800eb42:	e000      	b.n	800eb46 <chk_lock+0xa6>
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3714      	adds	r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	2000382c 	.word	0x2000382c

0800eb58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	607b      	str	r3, [r7, #4]
 800eb62:	e002      	b.n	800eb6a <enq_lock+0x12>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	3301      	adds	r3, #1
 800eb68:	607b      	str	r3, [r7, #4]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d806      	bhi.n	800eb7e <enq_lock+0x26>
 800eb70:	4a09      	ldr	r2, [pc, #36]	; (800eb98 <enq_lock+0x40>)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	011b      	lsls	r3, r3, #4
 800eb76:	4413      	add	r3, r2
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1f2      	bne.n	800eb64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	bf14      	ite	ne
 800eb84:	2301      	movne	r3, #1
 800eb86:	2300      	moveq	r3, #0
 800eb88:	b2db      	uxtb	r3, r3
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	370c      	adds	r7, #12
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	2000382c 	.word	0x2000382c

0800eb9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eba6:	2300      	movs	r3, #0
 800eba8:	60fb      	str	r3, [r7, #12]
 800ebaa:	e01f      	b.n	800ebec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ebac:	4a41      	ldr	r2, [pc, #260]	; (800ecb4 <inc_lock+0x118>)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	011b      	lsls	r3, r3, #4
 800ebb2:	4413      	add	r3, r2
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d113      	bne.n	800ebe6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ebbe:	4a3d      	ldr	r2, [pc, #244]	; (800ecb4 <inc_lock+0x118>)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	011b      	lsls	r3, r3, #4
 800ebc4:	4413      	add	r3, r2
 800ebc6:	3304      	adds	r3, #4
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	d109      	bne.n	800ebe6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ebd2:	4a38      	ldr	r2, [pc, #224]	; (800ecb4 <inc_lock+0x118>)
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	011b      	lsls	r3, r3, #4
 800ebd8:	4413      	add	r3, r2
 800ebda:	3308      	adds	r3, #8
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d006      	beq.n	800ebf4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	60fb      	str	r3, [r7, #12]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d9dc      	bls.n	800ebac <inc_lock+0x10>
 800ebf2:	e000      	b.n	800ebf6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ebf4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2b02      	cmp	r3, #2
 800ebfa:	d132      	bne.n	800ec62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	60fb      	str	r3, [r7, #12]
 800ec00:	e002      	b.n	800ec08 <inc_lock+0x6c>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3301      	adds	r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d806      	bhi.n	800ec1c <inc_lock+0x80>
 800ec0e:	4a29      	ldr	r2, [pc, #164]	; (800ecb4 <inc_lock+0x118>)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	011b      	lsls	r3, r3, #4
 800ec14:	4413      	add	r3, r2
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1f2      	bne.n	800ec02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2b02      	cmp	r3, #2
 800ec20:	d101      	bne.n	800ec26 <inc_lock+0x8a>
 800ec22:	2300      	movs	r3, #0
 800ec24:	e040      	b.n	800eca8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681a      	ldr	r2, [r3, #0]
 800ec2a:	4922      	ldr	r1, [pc, #136]	; (800ecb4 <inc_lock+0x118>)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	011b      	lsls	r3, r3, #4
 800ec30:	440b      	add	r3, r1
 800ec32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689a      	ldr	r2, [r3, #8]
 800ec38:	491e      	ldr	r1, [pc, #120]	; (800ecb4 <inc_lock+0x118>)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	011b      	lsls	r3, r3, #4
 800ec3e:	440b      	add	r3, r1
 800ec40:	3304      	adds	r3, #4
 800ec42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	695a      	ldr	r2, [r3, #20]
 800ec48:	491a      	ldr	r1, [pc, #104]	; (800ecb4 <inc_lock+0x118>)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	011b      	lsls	r3, r3, #4
 800ec4e:	440b      	add	r3, r1
 800ec50:	3308      	adds	r3, #8
 800ec52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ec54:	4a17      	ldr	r2, [pc, #92]	; (800ecb4 <inc_lock+0x118>)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	011b      	lsls	r3, r3, #4
 800ec5a:	4413      	add	r3, r2
 800ec5c:	330c      	adds	r3, #12
 800ec5e:	2200      	movs	r2, #0
 800ec60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d009      	beq.n	800ec7c <inc_lock+0xe0>
 800ec68:	4a12      	ldr	r2, [pc, #72]	; (800ecb4 <inc_lock+0x118>)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	4413      	add	r3, r2
 800ec70:	330c      	adds	r3, #12
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <inc_lock+0xe0>
 800ec78:	2300      	movs	r3, #0
 800ec7a:	e015      	b.n	800eca8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d108      	bne.n	800ec94 <inc_lock+0xf8>
 800ec82:	4a0c      	ldr	r2, [pc, #48]	; (800ecb4 <inc_lock+0x118>)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	011b      	lsls	r3, r3, #4
 800ec88:	4413      	add	r3, r2
 800ec8a:	330c      	adds	r3, #12
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	e001      	b.n	800ec98 <inc_lock+0xfc>
 800ec94:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec98:	4906      	ldr	r1, [pc, #24]	; (800ecb4 <inc_lock+0x118>)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	011b      	lsls	r3, r3, #4
 800ec9e:	440b      	add	r3, r1
 800eca0:	330c      	adds	r3, #12
 800eca2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	3301      	adds	r3, #1
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	4770      	bx	lr
 800ecb4:	2000382c 	.word	0x2000382c

0800ecb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d825      	bhi.n	800ed18 <dec_lock+0x60>
		n = Files[i].ctr;
 800eccc:	4a17      	ldr	r2, [pc, #92]	; (800ed2c <dec_lock+0x74>)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	011b      	lsls	r3, r3, #4
 800ecd2:	4413      	add	r3, r2
 800ecd4:	330c      	adds	r3, #12
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ecda:	89fb      	ldrh	r3, [r7, #14]
 800ecdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ece0:	d101      	bne.n	800ece6 <dec_lock+0x2e>
 800ece2:	2300      	movs	r3, #0
 800ece4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ece6:	89fb      	ldrh	r3, [r7, #14]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <dec_lock+0x3a>
 800ecec:	89fb      	ldrh	r3, [r7, #14]
 800ecee:	3b01      	subs	r3, #1
 800ecf0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ecf2:	4a0e      	ldr	r2, [pc, #56]	; (800ed2c <dec_lock+0x74>)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	4413      	add	r3, r2
 800ecfa:	330c      	adds	r3, #12
 800ecfc:	89fa      	ldrh	r2, [r7, #14]
 800ecfe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ed00:	89fb      	ldrh	r3, [r7, #14]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d105      	bne.n	800ed12 <dec_lock+0x5a>
 800ed06:	4a09      	ldr	r2, [pc, #36]	; (800ed2c <dec_lock+0x74>)
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	011b      	lsls	r3, r3, #4
 800ed0c:	4413      	add	r3, r2
 800ed0e:	2200      	movs	r2, #0
 800ed10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ed12:	2300      	movs	r3, #0
 800ed14:	737b      	strb	r3, [r7, #13]
 800ed16:	e001      	b.n	800ed1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ed18:	2302      	movs	r3, #2
 800ed1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ed1c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3714      	adds	r7, #20
 800ed22:	46bd      	mov	sp, r7
 800ed24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	2000382c 	.word	0x2000382c

0800ed30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b085      	sub	sp, #20
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ed38:	2300      	movs	r3, #0
 800ed3a:	60fb      	str	r3, [r7, #12]
 800ed3c:	e010      	b.n	800ed60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ed3e:	4a0d      	ldr	r2, [pc, #52]	; (800ed74 <clear_lock+0x44>)
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	011b      	lsls	r3, r3, #4
 800ed44:	4413      	add	r3, r2
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d105      	bne.n	800ed5a <clear_lock+0x2a>
 800ed4e:	4a09      	ldr	r2, [pc, #36]	; (800ed74 <clear_lock+0x44>)
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	011b      	lsls	r3, r3, #4
 800ed54:	4413      	add	r3, r2
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	60fb      	str	r3, [r7, #12]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d9eb      	bls.n	800ed3e <clear_lock+0xe>
	}
}
 800ed66:	bf00      	nop
 800ed68:	bf00      	nop
 800ed6a:	3714      	adds	r7, #20
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr
 800ed74:	2000382c 	.word	0x2000382c

0800ed78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	78db      	ldrb	r3, [r3, #3]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d034      	beq.n	800edf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	7858      	ldrb	r0, [r3, #1]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	f7ff fd40 	bl	800e824 <disk_write>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d002      	beq.n	800edb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800edaa:	2301      	movs	r3, #1
 800edac:	73fb      	strb	r3, [r7, #15]
 800edae:	e022      	b.n	800edf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	1ad2      	subs	r2, r2, r3
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	699b      	ldr	r3, [r3, #24]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d217      	bcs.n	800edf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	789b      	ldrb	r3, [r3, #2]
 800edca:	613b      	str	r3, [r7, #16]
 800edcc:	e010      	b.n	800edf0 <sync_window+0x78>
					wsect += fs->fsize;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	699b      	ldr	r3, [r3, #24]
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	4413      	add	r3, r2
 800edd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7858      	ldrb	r0, [r3, #1]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ede2:	2301      	movs	r3, #1
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	f7ff fd1d 	bl	800e824 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	3b01      	subs	r3, #1
 800edee:	613b      	str	r3, [r7, #16]
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d8eb      	bhi.n	800edce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3718      	adds	r7, #24
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee12:	683a      	ldr	r2, [r7, #0]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d01b      	beq.n	800ee50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f7ff ffad 	bl	800ed78 <sync_window>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ee22:	7bfb      	ldrb	r3, [r7, #15]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d113      	bne.n	800ee50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7858      	ldrb	r0, [r3, #1]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee32:	2301      	movs	r3, #1
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	f7ff fcd5 	bl	800e7e4 <disk_read>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ee40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ee46:	2301      	movs	r3, #1
 800ee48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	683a      	ldr	r2, [r7, #0]
 800ee4e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3710      	adds	r7, #16
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b084      	sub	sp, #16
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff ff87 	bl	800ed78 <sync_window>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ee6e:	7bfb      	ldrb	r3, [r7, #15]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d158      	bne.n	800ef26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	d148      	bne.n	800ef0e <sync_fs+0xb2>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	791b      	ldrb	r3, [r3, #4]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d144      	bne.n	800ef0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	3330      	adds	r3, #48	; 0x30
 800ee88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7ff fda9 	bl	800e9e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	3330      	adds	r3, #48	; 0x30
 800ee98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ee9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff fd38 	bl	800e916 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	3330      	adds	r3, #48	; 0x30
 800eeaa:	4921      	ldr	r1, [pc, #132]	; (800ef30 <sync_fs+0xd4>)
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7ff fd4d 	bl	800e94c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	3330      	adds	r3, #48	; 0x30
 800eeb6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eeba:	491e      	ldr	r1, [pc, #120]	; (800ef34 <sync_fs+0xd8>)
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff fd45 	bl	800e94c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3330      	adds	r3, #48	; 0x30
 800eec6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	691b      	ldr	r3, [r3, #16]
 800eece:	4619      	mov	r1, r3
 800eed0:	4610      	mov	r0, r2
 800eed2:	f7ff fd3b 	bl	800e94c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	3330      	adds	r3, #48	; 0x30
 800eeda:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	4619      	mov	r1, r3
 800eee4:	4610      	mov	r0, r2
 800eee6:	f7ff fd31 	bl	800e94c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	69db      	ldr	r3, [r3, #28]
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	7858      	ldrb	r0, [r3, #1]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef02:	2301      	movs	r3, #1
 800ef04:	f7ff fc8e 	bl	800e824 <disk_write>
			fs->fsi_flag = 0;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	785b      	ldrb	r3, [r3, #1]
 800ef12:	2200      	movs	r2, #0
 800ef14:	2100      	movs	r1, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff fca4 	bl	800e864 <disk_ioctl>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <sync_fs+0xca>
 800ef22:	2301      	movs	r3, #1
 800ef24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ef26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3710      	adds	r7, #16
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	41615252 	.word	0x41615252
 800ef34:	61417272 	.word	0x61417272

0800ef38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	3b02      	subs	r3, #2
 800ef46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	695b      	ldr	r3, [r3, #20]
 800ef4c:	3b02      	subs	r3, #2
 800ef4e:	683a      	ldr	r2, [r7, #0]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d301      	bcc.n	800ef58 <clust2sect+0x20>
 800ef54:	2300      	movs	r3, #0
 800ef56:	e008      	b.n	800ef6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	895b      	ldrh	r3, [r3, #10]
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	fb03 f202 	mul.w	r2, r3, r2
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef68:	4413      	add	r3, r2
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	370c      	adds	r7, #12
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr

0800ef76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b086      	sub	sp, #24
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
 800ef7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	d904      	bls.n	800ef96 <get_fat+0x20>
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	695b      	ldr	r3, [r3, #20]
 800ef90:	683a      	ldr	r2, [r7, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d302      	bcc.n	800ef9c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ef96:	2301      	movs	r3, #1
 800ef98:	617b      	str	r3, [r7, #20]
 800ef9a:	e08f      	b.n	800f0bc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ef9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efa0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d062      	beq.n	800f070 <get_fat+0xfa>
 800efaa:	2b03      	cmp	r3, #3
 800efac:	dc7c      	bgt.n	800f0a8 <get_fat+0x132>
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d002      	beq.n	800efb8 <get_fat+0x42>
 800efb2:	2b02      	cmp	r3, #2
 800efb4:	d042      	beq.n	800f03c <get_fat+0xc6>
 800efb6:	e077      	b.n	800f0a8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	60fb      	str	r3, [r7, #12]
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	085b      	lsrs	r3, r3, #1
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	4413      	add	r3, r2
 800efc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	6a1a      	ldr	r2, [r3, #32]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	0a5b      	lsrs	r3, r3, #9
 800efce:	4413      	add	r3, r2
 800efd0:	4619      	mov	r1, r3
 800efd2:	6938      	ldr	r0, [r7, #16]
 800efd4:	f7ff ff14 	bl	800ee00 <move_window>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d167      	bne.n	800f0ae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	60fa      	str	r2, [r7, #12]
 800efe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	4413      	add	r3, r2
 800efec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eff0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	6a1a      	ldr	r2, [r3, #32]
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	0a5b      	lsrs	r3, r3, #9
 800effa:	4413      	add	r3, r2
 800effc:	4619      	mov	r1, r3
 800effe:	6938      	ldr	r0, [r7, #16]
 800f000:	f7ff fefe 	bl	800ee00 <move_window>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d153      	bne.n	800f0b2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f010:	693a      	ldr	r2, [r7, #16]
 800f012:	4413      	add	r3, r2
 800f014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f018:	021b      	lsls	r3, r3, #8
 800f01a:	461a      	mov	r2, r3
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	4313      	orrs	r3, r2
 800f020:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	f003 0301 	and.w	r3, r3, #1
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d002      	beq.n	800f032 <get_fat+0xbc>
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	091b      	lsrs	r3, r3, #4
 800f030:	e002      	b.n	800f038 <get_fat+0xc2>
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f038:	617b      	str	r3, [r7, #20]
			break;
 800f03a:	e03f      	b.n	800f0bc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	6a1a      	ldr	r2, [r3, #32]
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	0a1b      	lsrs	r3, r3, #8
 800f044:	4413      	add	r3, r2
 800f046:	4619      	mov	r1, r3
 800f048:	6938      	ldr	r0, [r7, #16]
 800f04a:	f7ff fed9 	bl	800ee00 <move_window>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d130      	bne.n	800f0b6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f054:	693b      	ldr	r3, [r7, #16]
 800f056:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f062:	4413      	add	r3, r2
 800f064:	4618      	mov	r0, r3
 800f066:	f7ff fc1b 	bl	800e8a0 <ld_word>
 800f06a:	4603      	mov	r3, r0
 800f06c:	617b      	str	r3, [r7, #20]
			break;
 800f06e:	e025      	b.n	800f0bc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	6a1a      	ldr	r2, [r3, #32]
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	09db      	lsrs	r3, r3, #7
 800f078:	4413      	add	r3, r2
 800f07a:	4619      	mov	r1, r3
 800f07c:	6938      	ldr	r0, [r7, #16]
 800f07e:	f7ff febf 	bl	800ee00 <move_window>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d118      	bne.n	800f0ba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	009b      	lsls	r3, r3, #2
 800f092:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f096:	4413      	add	r3, r2
 800f098:	4618      	mov	r0, r3
 800f09a:	f7ff fc19 	bl	800e8d0 <ld_dword>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f0a4:	617b      	str	r3, [r7, #20]
			break;
 800f0a6:	e009      	b.n	800f0bc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	617b      	str	r3, [r7, #20]
 800f0ac:	e006      	b.n	800f0bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0ae:	bf00      	nop
 800f0b0:	e004      	b.n	800f0bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f0b2:	bf00      	nop
 800f0b4:	e002      	b.n	800f0bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f0b6:	bf00      	nop
 800f0b8:	e000      	b.n	800f0bc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f0ba:	bf00      	nop
		}
	}

	return val;
 800f0bc:	697b      	ldr	r3, [r7, #20]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f0c6:	b590      	push	{r4, r7, lr}
 800f0c8:	b089      	sub	sp, #36	; 0x24
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	60f8      	str	r0, [r7, #12]
 800f0ce:	60b9      	str	r1, [r7, #8]
 800f0d0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f0d2:	2302      	movs	r3, #2
 800f0d4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	f240 80d2 	bls.w	800f282 <put_fat+0x1bc>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	695b      	ldr	r3, [r3, #20]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	f080 80cc 	bcs.w	800f282 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	f000 8096 	beq.w	800f220 <put_fat+0x15a>
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	f300 80cd 	bgt.w	800f294 <put_fat+0x1ce>
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d002      	beq.n	800f104 <put_fat+0x3e>
 800f0fe:	2b02      	cmp	r3, #2
 800f100:	d06e      	beq.n	800f1e0 <put_fat+0x11a>
 800f102:	e0c7      	b.n	800f294 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	61bb      	str	r3, [r7, #24]
 800f108:	69bb      	ldr	r3, [r7, #24]
 800f10a:	085b      	lsrs	r3, r3, #1
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	4413      	add	r3, r2
 800f110:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6a1a      	ldr	r2, [r3, #32]
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	0a5b      	lsrs	r3, r3, #9
 800f11a:	4413      	add	r3, r2
 800f11c:	4619      	mov	r1, r3
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff fe6e 	bl	800ee00 <move_window>
 800f124:	4603      	mov	r3, r0
 800f126:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f128:	7ffb      	ldrb	r3, [r7, #31]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f040 80ab 	bne.w	800f286 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f136:	69bb      	ldr	r3, [r7, #24]
 800f138:	1c59      	adds	r1, r3, #1
 800f13a:	61b9      	str	r1, [r7, #24]
 800f13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f140:	4413      	add	r3, r2
 800f142:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f003 0301 	and.w	r3, r3, #1
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00d      	beq.n	800f16a <put_fat+0xa4>
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	b25b      	sxtb	r3, r3
 800f154:	f003 030f 	and.w	r3, r3, #15
 800f158:	b25a      	sxtb	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	011b      	lsls	r3, r3, #4
 800f160:	b25b      	sxtb	r3, r3
 800f162:	4313      	orrs	r3, r2
 800f164:	b25b      	sxtb	r3, r3
 800f166:	b2db      	uxtb	r3, r3
 800f168:	e001      	b.n	800f16e <put_fat+0xa8>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	697a      	ldr	r2, [r7, #20]
 800f170:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	2201      	movs	r2, #1
 800f176:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	6a1a      	ldr	r2, [r3, #32]
 800f17c:	69bb      	ldr	r3, [r7, #24]
 800f17e:	0a5b      	lsrs	r3, r3, #9
 800f180:	4413      	add	r3, r2
 800f182:	4619      	mov	r1, r3
 800f184:	68f8      	ldr	r0, [r7, #12]
 800f186:	f7ff fe3b 	bl	800ee00 <move_window>
 800f18a:	4603      	mov	r3, r0
 800f18c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f18e:	7ffb      	ldrb	r3, [r7, #31]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d17a      	bne.n	800f28a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f19a:	69bb      	ldr	r3, [r7, #24]
 800f19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1a0:	4413      	add	r3, r2
 800f1a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d003      	beq.n	800f1b6 <put_fat+0xf0>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	091b      	lsrs	r3, r3, #4
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	e00e      	b.n	800f1d4 <put_fat+0x10e>
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	b25b      	sxtb	r3, r3
 800f1bc:	f023 030f 	bic.w	r3, r3, #15
 800f1c0:	b25a      	sxtb	r2, r3
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	0a1b      	lsrs	r3, r3, #8
 800f1c6:	b25b      	sxtb	r3, r3
 800f1c8:	f003 030f 	and.w	r3, r3, #15
 800f1cc:	b25b      	sxtb	r3, r3
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	b25b      	sxtb	r3, r3
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	697a      	ldr	r2, [r7, #20]
 800f1d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	70da      	strb	r2, [r3, #3]
			break;
 800f1de:	e059      	b.n	800f294 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6a1a      	ldr	r2, [r3, #32]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	0a1b      	lsrs	r3, r3, #8
 800f1e8:	4413      	add	r3, r2
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	68f8      	ldr	r0, [r7, #12]
 800f1ee:	f7ff fe07 	bl	800ee00 <move_window>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1f6:	7ffb      	ldrb	r3, [r7, #31]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d148      	bne.n	800f28e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f20a:	4413      	add	r3, r2
 800f20c:	687a      	ldr	r2, [r7, #4]
 800f20e:	b292      	uxth	r2, r2
 800f210:	4611      	mov	r1, r2
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff fb7f 	bl	800e916 <st_word>
			fs->wflag = 1;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2201      	movs	r2, #1
 800f21c:	70da      	strb	r2, [r3, #3]
			break;
 800f21e:	e039      	b.n	800f294 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6a1a      	ldr	r2, [r3, #32]
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	09db      	lsrs	r3, r3, #7
 800f228:	4413      	add	r3, r2
 800f22a:	4619      	mov	r1, r3
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff fde7 	bl	800ee00 <move_window>
 800f232:	4603      	mov	r3, r0
 800f234:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f236:	7ffb      	ldrb	r3, [r7, #31]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d12a      	bne.n	800f292 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f250:	4413      	add	r3, r2
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fb3c 	bl	800e8d0 <ld_dword>
 800f258:	4603      	mov	r3, r0
 800f25a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f25e:	4323      	orrs	r3, r4
 800f260:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f270:	4413      	add	r3, r2
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	4618      	mov	r0, r3
 800f276:	f7ff fb69 	bl	800e94c <st_dword>
			fs->wflag = 1;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2201      	movs	r2, #1
 800f27e:	70da      	strb	r2, [r3, #3]
			break;
 800f280:	e008      	b.n	800f294 <put_fat+0x1ce>
		}
	}
 800f282:	bf00      	nop
 800f284:	e006      	b.n	800f294 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f286:	bf00      	nop
 800f288:	e004      	b.n	800f294 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f28a:	bf00      	nop
 800f28c:	e002      	b.n	800f294 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f28e:	bf00      	nop
 800f290:	e000      	b.n	800f294 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f292:	bf00      	nop
	return res;
 800f294:	7ffb      	ldrb	r3, [r7, #31]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3724      	adds	r7, #36	; 0x24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd90      	pop	{r4, r7, pc}

0800f29e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b088      	sub	sp, #32
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	60f8      	str	r0, [r7, #12]
 800f2a6:	60b9      	str	r1, [r7, #8]
 800f2a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d904      	bls.n	800f2c4 <remove_chain+0x26>
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	695b      	ldr	r3, [r3, #20]
 800f2be:	68ba      	ldr	r2, [r7, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d301      	bcc.n	800f2c8 <remove_chain+0x2a>
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e04b      	b.n	800f360 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00c      	beq.n	800f2e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f2ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2d2:	6879      	ldr	r1, [r7, #4]
 800f2d4:	69b8      	ldr	r0, [r7, #24]
 800f2d6:	f7ff fef6 	bl	800f0c6 <put_fat>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f2de:	7ffb      	ldrb	r3, [r7, #31]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <remove_chain+0x4a>
 800f2e4:	7ffb      	ldrb	r3, [r7, #31]
 800f2e6:	e03b      	b.n	800f360 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f2e8:	68b9      	ldr	r1, [r7, #8]
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fe43 	bl	800ef76 <get_fat>
 800f2f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d031      	beq.n	800f35c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d101      	bne.n	800f302 <remove_chain+0x64>
 800f2fe:	2302      	movs	r3, #2
 800f300:	e02e      	b.n	800f360 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f308:	d101      	bne.n	800f30e <remove_chain+0x70>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e028      	b.n	800f360 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f30e:	2200      	movs	r2, #0
 800f310:	68b9      	ldr	r1, [r7, #8]
 800f312:	69b8      	ldr	r0, [r7, #24]
 800f314:	f7ff fed7 	bl	800f0c6 <put_fat>
 800f318:	4603      	mov	r3, r0
 800f31a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f31c:	7ffb      	ldrb	r3, [r7, #31]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <remove_chain+0x88>
 800f322:	7ffb      	ldrb	r3, [r7, #31]
 800f324:	e01c      	b.n	800f360 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	691a      	ldr	r2, [r3, #16]
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	695b      	ldr	r3, [r3, #20]
 800f32e:	3b02      	subs	r3, #2
 800f330:	429a      	cmp	r2, r3
 800f332:	d20b      	bcs.n	800f34c <remove_chain+0xae>
			fs->free_clst++;
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	791b      	ldrb	r3, [r3, #4]
 800f342:	f043 0301 	orr.w	r3, r3, #1
 800f346:	b2da      	uxtb	r2, r3
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	695b      	ldr	r3, [r3, #20]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	429a      	cmp	r2, r3
 800f358:	d3c6      	bcc.n	800f2e8 <remove_chain+0x4a>
 800f35a:	e000      	b.n	800f35e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f35c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3720      	adds	r7, #32
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10d      	bne.n	800f39a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d004      	beq.n	800f394 <create_chain+0x2c>
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	695b      	ldr	r3, [r3, #20]
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	429a      	cmp	r2, r3
 800f392:	d31b      	bcc.n	800f3cc <create_chain+0x64>
 800f394:	2301      	movs	r3, #1
 800f396:	61bb      	str	r3, [r7, #24]
 800f398:	e018      	b.n	800f3cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff fdea 	bl	800ef76 <get_fat>
 800f3a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d801      	bhi.n	800f3ae <create_chain+0x46>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e070      	b.n	800f490 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3b4:	d101      	bne.n	800f3ba <create_chain+0x52>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	e06a      	b.n	800f490 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d201      	bcs.n	800f3c8 <create_chain+0x60>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	e063      	b.n	800f490 <create_chain+0x128>
		scl = clst;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	695b      	ldr	r3, [r3, #20]
 800f3da:	69fa      	ldr	r2, [r7, #28]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d307      	bcc.n	800f3f0 <create_chain+0x88>
				ncl = 2;
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d901      	bls.n	800f3f0 <create_chain+0x88>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e04f      	b.n	800f490 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f3f0:	69f9      	ldr	r1, [r7, #28]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff fdbf 	bl	800ef76 <get_fat>
 800f3f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00e      	beq.n	800f41e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d003      	beq.n	800f40e <create_chain+0xa6>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f40c:	d101      	bne.n	800f412 <create_chain+0xaa>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	e03e      	b.n	800f490 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	429a      	cmp	r2, r3
 800f418:	d1da      	bne.n	800f3d0 <create_chain+0x68>
 800f41a:	2300      	movs	r3, #0
 800f41c:	e038      	b.n	800f490 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f41e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f424:	69f9      	ldr	r1, [r7, #28]
 800f426:	6938      	ldr	r0, [r7, #16]
 800f428:	f7ff fe4d 	bl	800f0c6 <put_fat>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <create_chain+0xe2>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d006      	beq.n	800f44a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f43c:	69fa      	ldr	r2, [r7, #28]
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6938      	ldr	r0, [r7, #16]
 800f442:	f7ff fe40 	bl	800f0c6 <put_fat>
 800f446:	4603      	mov	r3, r0
 800f448:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d116      	bne.n	800f47e <create_chain+0x116>
		fs->last_clst = ncl;
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	69fa      	ldr	r2, [r7, #28]
 800f454:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	691a      	ldr	r2, [r3, #16]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	3b02      	subs	r3, #2
 800f460:	429a      	cmp	r2, r3
 800f462:	d804      	bhi.n	800f46e <create_chain+0x106>
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	691b      	ldr	r3, [r3, #16]
 800f468:	1e5a      	subs	r2, r3, #1
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	791b      	ldrb	r3, [r3, #4]
 800f472:	f043 0301 	orr.w	r3, r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	711a      	strb	r2, [r3, #4]
 800f47c:	e007      	b.n	800f48e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f47e:	7dfb      	ldrb	r3, [r7, #23]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d102      	bne.n	800f48a <create_chain+0x122>
 800f484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f488:	e000      	b.n	800f48c <create_chain+0x124>
 800f48a:	2301      	movs	r3, #1
 800f48c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f48e:	69fb      	ldr	r3, [r7, #28]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3720      	adds	r7, #32
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4ae:	d204      	bcs.n	800f4ba <dir_sdi+0x22>
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	f003 031f 	and.w	r3, r3, #31
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <dir_sdi+0x26>
		return FR_INT_ERR;
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	e063      	b.n	800f586 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d106      	bne.n	800f4de <dir_sdi+0x46>
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d902      	bls.n	800f4de <dir_sdi+0x46>
		clst = fs->dirbase;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d10c      	bne.n	800f4fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	095b      	lsrs	r3, r3, #5
 800f4e8:	693a      	ldr	r2, [r7, #16]
 800f4ea:	8912      	ldrh	r2, [r2, #8]
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d301      	bcc.n	800f4f4 <dir_sdi+0x5c>
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	e048      	b.n	800f586 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	61da      	str	r2, [r3, #28]
 800f4fc:	e029      	b.n	800f552 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	895b      	ldrh	r3, [r3, #10]
 800f502:	025b      	lsls	r3, r3, #9
 800f504:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f506:	e019      	b.n	800f53c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6979      	ldr	r1, [r7, #20]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7ff fd32 	bl	800ef76 <get_fat>
 800f512:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f51a:	d101      	bne.n	800f520 <dir_sdi+0x88>
 800f51c:	2301      	movs	r3, #1
 800f51e:	e032      	b.n	800f586 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d904      	bls.n	800f530 <dir_sdi+0x98>
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d301      	bcc.n	800f534 <dir_sdi+0x9c>
 800f530:	2302      	movs	r3, #2
 800f532:	e028      	b.n	800f586 <dir_sdi+0xee>
			ofs -= csz;
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	429a      	cmp	r2, r3
 800f542:	d2e1      	bcs.n	800f508 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f544:	6979      	ldr	r1, [r7, #20]
 800f546:	6938      	ldr	r0, [r7, #16]
 800f548:	f7ff fcf6 	bl	800ef38 <clust2sect>
 800f54c:	4602      	mov	r2, r0
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	69db      	ldr	r3, [r3, #28]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d101      	bne.n	800f564 <dir_sdi+0xcc>
 800f560:	2302      	movs	r3, #2
 800f562:	e010      	b.n	800f586 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	69da      	ldr	r2, [r3, #28]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	0a5b      	lsrs	r3, r3, #9
 800f56c:	441a      	add	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f57e:	441a      	add	r2, r3
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f58e:	b580      	push	{r7, lr}
 800f590:	b086      	sub	sp, #24
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
 800f596:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	3320      	adds	r3, #32
 800f5a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	69db      	ldr	r3, [r3, #28]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d003      	beq.n	800f5b6 <dir_next+0x28>
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f5b4:	d301      	bcc.n	800f5ba <dir_next+0x2c>
 800f5b6:	2304      	movs	r3, #4
 800f5b8:	e0aa      	b.n	800f710 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f040 8098 	bne.w	800f6f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	69db      	ldr	r3, [r3, #28]
 800f5ca:	1c5a      	adds	r2, r3, #1
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	699b      	ldr	r3, [r3, #24]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d10b      	bne.n	800f5f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	095b      	lsrs	r3, r3, #5
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	8912      	ldrh	r2, [r2, #8]
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	f0c0 8088 	bcc.w	800f6f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	61da      	str	r2, [r3, #28]
 800f5ec:	2304      	movs	r3, #4
 800f5ee:	e08f      	b.n	800f710 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	0a5b      	lsrs	r3, r3, #9
 800f5f4:	68fa      	ldr	r2, [r7, #12]
 800f5f6:	8952      	ldrh	r2, [r2, #10]
 800f5f8:	3a01      	subs	r2, #1
 800f5fa:	4013      	ands	r3, r2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d17a      	bne.n	800f6f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	699b      	ldr	r3, [r3, #24]
 800f606:	4619      	mov	r1, r3
 800f608:	4610      	mov	r0, r2
 800f60a:	f7ff fcb4 	bl	800ef76 <get_fat>
 800f60e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d801      	bhi.n	800f61a <dir_next+0x8c>
 800f616:	2302      	movs	r3, #2
 800f618:	e07a      	b.n	800f710 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f620:	d101      	bne.n	800f626 <dir_next+0x98>
 800f622:	2301      	movs	r3, #1
 800f624:	e074      	b.n	800f710 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	695b      	ldr	r3, [r3, #20]
 800f62a:	697a      	ldr	r2, [r7, #20]
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d358      	bcc.n	800f6e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d104      	bne.n	800f640 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	61da      	str	r2, [r3, #28]
 800f63c:	2304      	movs	r3, #4
 800f63e:	e067      	b.n	800f710 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	699b      	ldr	r3, [r3, #24]
 800f646:	4619      	mov	r1, r3
 800f648:	4610      	mov	r0, r2
 800f64a:	f7ff fe8d 	bl	800f368 <create_chain>
 800f64e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d101      	bne.n	800f65a <dir_next+0xcc>
 800f656:	2307      	movs	r3, #7
 800f658:	e05a      	b.n	800f710 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d101      	bne.n	800f664 <dir_next+0xd6>
 800f660:	2302      	movs	r3, #2
 800f662:	e055      	b.n	800f710 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f66a:	d101      	bne.n	800f670 <dir_next+0xe2>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e04f      	b.n	800f710 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f670:	68f8      	ldr	r0, [r7, #12]
 800f672:	f7ff fb81 	bl	800ed78 <sync_window>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <dir_next+0xf2>
 800f67c:	2301      	movs	r3, #1
 800f67e:	e047      	b.n	800f710 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	3330      	adds	r3, #48	; 0x30
 800f684:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f688:	2100      	movs	r1, #0
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7ff f9ab 	bl	800e9e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f690:	2300      	movs	r3, #0
 800f692:	613b      	str	r3, [r7, #16]
 800f694:	6979      	ldr	r1, [r7, #20]
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7ff fc4e 	bl	800ef38 <clust2sect>
 800f69c:	4602      	mov	r2, r0
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	62da      	str	r2, [r3, #44]	; 0x2c
 800f6a2:	e012      	b.n	800f6ca <dir_next+0x13c>
						fs->wflag = 1;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f6aa:	68f8      	ldr	r0, [r7, #12]
 800f6ac:	f7ff fb64 	bl	800ed78 <sync_window>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d001      	beq.n	800f6ba <dir_next+0x12c>
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e02a      	b.n	800f710 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	3301      	adds	r3, #1
 800f6be:	613b      	str	r3, [r7, #16]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6c4:	1c5a      	adds	r2, r3, #1
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	62da      	str	r2, [r3, #44]	; 0x2c
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	895b      	ldrh	r3, [r3, #10]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d3e6      	bcc.n	800f6a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	1ad2      	subs	r2, r2, r3
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f6e8:	6979      	ldr	r1, [r7, #20]
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f7ff fc24 	bl	800ef38 <clust2sect>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68ba      	ldr	r2, [r7, #8]
 800f6fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f708:	441a      	add	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	3718      	adds	r7, #24
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b086      	sub	sp, #24
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f728:	2100      	movs	r1, #0
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7ff feb4 	bl	800f498 <dir_sdi>
 800f730:	4603      	mov	r3, r0
 800f732:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f734:	7dfb      	ldrb	r3, [r7, #23]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d12b      	bne.n	800f792 <dir_alloc+0x7a>
		n = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	69db      	ldr	r3, [r3, #28]
 800f742:	4619      	mov	r1, r3
 800f744:	68f8      	ldr	r0, [r7, #12]
 800f746:	f7ff fb5b 	bl	800ee00 <move_window>
 800f74a:	4603      	mov	r3, r0
 800f74c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f74e:	7dfb      	ldrb	r3, [r7, #23]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d11d      	bne.n	800f790 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6a1b      	ldr	r3, [r3, #32]
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	2be5      	cmp	r3, #229	; 0xe5
 800f75c:	d004      	beq.n	800f768 <dir_alloc+0x50>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6a1b      	ldr	r3, [r3, #32]
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d107      	bne.n	800f778 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	3301      	adds	r3, #1
 800f76c:	613b      	str	r3, [r7, #16]
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	429a      	cmp	r2, r3
 800f774:	d102      	bne.n	800f77c <dir_alloc+0x64>
 800f776:	e00c      	b.n	800f792 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f778:	2300      	movs	r3, #0
 800f77a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f77c:	2101      	movs	r1, #1
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f7ff ff05 	bl	800f58e <dir_next>
 800f784:	4603      	mov	r3, r0
 800f786:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f788:	7dfb      	ldrb	r3, [r7, #23]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d0d7      	beq.n	800f73e <dir_alloc+0x26>
 800f78e:	e000      	b.n	800f792 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f790:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f792:	7dfb      	ldrb	r3, [r7, #23]
 800f794:	2b04      	cmp	r3, #4
 800f796:	d101      	bne.n	800f79c <dir_alloc+0x84>
 800f798:	2307      	movs	r3, #7
 800f79a:	75fb      	strb	r3, [r7, #23]
	return res;
 800f79c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3718      	adds	r7, #24
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b084      	sub	sp, #16
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	331a      	adds	r3, #26
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7ff f873 	bl	800e8a0 <ld_word>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	781b      	ldrb	r3, [r3, #0]
 800f7c2:	2b03      	cmp	r3, #3
 800f7c4:	d109      	bne.n	800f7da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	3314      	adds	r3, #20
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff f868 	bl	800e8a0 <ld_word>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	041b      	lsls	r3, r3, #16
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f7da:	68fb      	ldr	r3, [r7, #12]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	331a      	adds	r3, #26
 800f7f4:	687a      	ldr	r2, [r7, #4]
 800f7f6:	b292      	uxth	r2, r2
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff f88b 	bl	800e916 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	2b03      	cmp	r3, #3
 800f806:	d109      	bne.n	800f81c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	f103 0214 	add.w	r2, r3, #20
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	0c1b      	lsrs	r3, r3, #16
 800f812:	b29b      	uxth	r3, r3
 800f814:	4619      	mov	r1, r3
 800f816:	4610      	mov	r0, r2
 800f818:	f7ff f87d 	bl	800e916 <st_word>
	}
}
 800f81c:	bf00      	nop
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b086      	sub	sp, #24
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f832:	2100      	movs	r1, #0
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff fe2f 	bl	800f498 <dir_sdi>
 800f83a:	4603      	mov	r3, r0
 800f83c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f83e:	7dfb      	ldrb	r3, [r7, #23]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <dir_find+0x24>
 800f844:	7dfb      	ldrb	r3, [r7, #23]
 800f846:	e03e      	b.n	800f8c6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	69db      	ldr	r3, [r3, #28]
 800f84c:	4619      	mov	r1, r3
 800f84e:	6938      	ldr	r0, [r7, #16]
 800f850:	f7ff fad6 	bl	800ee00 <move_window>
 800f854:	4603      	mov	r3, r0
 800f856:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f858:	7dfb      	ldrb	r3, [r7, #23]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d12f      	bne.n	800f8be <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6a1b      	ldr	r3, [r3, #32]
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f866:	7bfb      	ldrb	r3, [r7, #15]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d102      	bne.n	800f872 <dir_find+0x4e>
 800f86c:	2304      	movs	r3, #4
 800f86e:	75fb      	strb	r3, [r7, #23]
 800f870:	e028      	b.n	800f8c4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a1b      	ldr	r3, [r3, #32]
 800f876:	330b      	adds	r3, #11
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	6a1b      	ldr	r3, [r3, #32]
 800f888:	330b      	adds	r3, #11
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	f003 0308 	and.w	r3, r3, #8
 800f890:	2b00      	cmp	r3, #0
 800f892:	d10a      	bne.n	800f8aa <dir_find+0x86>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6a18      	ldr	r0, [r3, #32]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	3324      	adds	r3, #36	; 0x24
 800f89c:	220b      	movs	r2, #11
 800f89e:	4619      	mov	r1, r3
 800f8a0:	f7ff f8bc 	bl	800ea1c <mem_cmp>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00b      	beq.n	800f8c2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f7ff fe6e 	bl	800f58e <dir_next>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f8b6:	7dfb      	ldrb	r3, [r7, #23]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d0c5      	beq.n	800f848 <dir_find+0x24>
 800f8bc:	e002      	b.n	800f8c4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f8be:	bf00      	nop
 800f8c0:	e000      	b.n	800f8c4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f8c2:	bf00      	nop

	return res;
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3718      	adds	r7, #24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b084      	sub	sp, #16
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f8dc:	2101      	movs	r1, #1
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f7ff ff1a 	bl	800f718 <dir_alloc>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f8e8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d11c      	bne.n	800f928 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	69db      	ldr	r3, [r3, #28]
 800f8f2:	4619      	mov	r1, r3
 800f8f4:	68b8      	ldr	r0, [r7, #8]
 800f8f6:	f7ff fa83 	bl	800ee00 <move_window>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f8fe:	7bfb      	ldrb	r3, [r7, #15]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d111      	bne.n	800f928 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a1b      	ldr	r3, [r3, #32]
 800f908:	2220      	movs	r2, #32
 800f90a:	2100      	movs	r1, #0
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7ff f86a 	bl	800e9e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6a18      	ldr	r0, [r3, #32]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3324      	adds	r3, #36	; 0x24
 800f91a:	220b      	movs	r2, #11
 800f91c:	4619      	mov	r1, r3
 800f91e:	f7ff f841 	bl	800e9a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2201      	movs	r2, #1
 800f926:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f928:	7bfb      	ldrb	r3, [r7, #15]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b086      	sub	sp, #24
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	2200      	movs	r2, #0
 800f940:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	69db      	ldr	r3, [r3, #28]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d04e      	beq.n	800f9e8 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	613b      	str	r3, [r7, #16]
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f952:	e021      	b.n	800f998 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a1a      	ldr	r2, [r3, #32]
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	1c59      	adds	r1, r3, #1
 800f95c:	6179      	str	r1, [r7, #20]
 800f95e:	4413      	add	r3, r2
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f964:	7bfb      	ldrb	r3, [r7, #15]
 800f966:	2b20      	cmp	r3, #32
 800f968:	d100      	bne.n	800f96c <get_fileinfo+0x3a>
 800f96a:	e015      	b.n	800f998 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f96c:	7bfb      	ldrb	r3, [r7, #15]
 800f96e:	2b05      	cmp	r3, #5
 800f970:	d101      	bne.n	800f976 <get_fileinfo+0x44>
 800f972:	23e5      	movs	r3, #229	; 0xe5
 800f974:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	2b09      	cmp	r3, #9
 800f97a:	d106      	bne.n	800f98a <get_fileinfo+0x58>
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	613a      	str	r2, [r7, #16]
 800f982:	683a      	ldr	r2, [r7, #0]
 800f984:	4413      	add	r3, r2
 800f986:	222e      	movs	r2, #46	; 0x2e
 800f988:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	1c5a      	adds	r2, r3, #1
 800f98e:	613a      	str	r2, [r7, #16]
 800f990:	683a      	ldr	r2, [r7, #0]
 800f992:	4413      	add	r3, r2
 800f994:	7bfa      	ldrb	r2, [r7, #15]
 800f996:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	2b0a      	cmp	r3, #10
 800f99c:	d9da      	bls.n	800f954 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f99e:	683a      	ldr	r2, [r7, #0]
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	4413      	add	r3, r2
 800f9a4:	3309      	adds	r3, #9
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	7ada      	ldrb	r2, [r3, #11]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6a1b      	ldr	r3, [r3, #32]
 800f9b8:	331c      	adds	r3, #28
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe ff88 	bl	800e8d0 <ld_dword>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6a1b      	ldr	r3, [r3, #32]
 800f9ca:	3316      	adds	r3, #22
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7fe ff7f 	bl	800e8d0 <ld_dword>
 800f9d2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	80da      	strh	r2, [r3, #6]
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	0c1b      	lsrs	r3, r3, #16
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	809a      	strh	r2, [r3, #4]
 800f9e6:	e000      	b.n	800f9ea <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f9e8:	bf00      	nop
}
 800f9ea:	3718      	adds	r7, #24
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	60fb      	str	r3, [r7, #12]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3324      	adds	r3, #36	; 0x24
 800fa04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fa06:	220b      	movs	r2, #11
 800fa08:	2120      	movs	r1, #32
 800fa0a:	68b8      	ldr	r0, [r7, #8]
 800fa0c:	f7fe ffeb 	bl	800e9e6 <mem_set>
	si = i = 0; ni = 8;
 800fa10:	2300      	movs	r3, #0
 800fa12:	613b      	str	r3, [r7, #16]
 800fa14:	693b      	ldr	r3, [r7, #16]
 800fa16:	61fb      	str	r3, [r7, #28]
 800fa18:	2308      	movs	r3, #8
 800fa1a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	1c5a      	adds	r2, r3, #1
 800fa20:	61fa      	str	r2, [r7, #28]
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	4413      	add	r3, r2
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa2a:	7efb      	ldrb	r3, [r7, #27]
 800fa2c:	2b20      	cmp	r3, #32
 800fa2e:	d94e      	bls.n	800face <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fa30:	7efb      	ldrb	r3, [r7, #27]
 800fa32:	2b2f      	cmp	r3, #47	; 0x2f
 800fa34:	d006      	beq.n	800fa44 <create_name+0x54>
 800fa36:	7efb      	ldrb	r3, [r7, #27]
 800fa38:	2b5c      	cmp	r3, #92	; 0x5c
 800fa3a:	d110      	bne.n	800fa5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fa3c:	e002      	b.n	800fa44 <create_name+0x54>
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	3301      	adds	r3, #1
 800fa42:	61fb      	str	r3, [r7, #28]
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	4413      	add	r3, r2
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b2f      	cmp	r3, #47	; 0x2f
 800fa4e:	d0f6      	beq.n	800fa3e <create_name+0x4e>
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	4413      	add	r3, r2
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b5c      	cmp	r3, #92	; 0x5c
 800fa5a:	d0f0      	beq.n	800fa3e <create_name+0x4e>
			break;
 800fa5c:	e038      	b.n	800fad0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fa5e:	7efb      	ldrb	r3, [r7, #27]
 800fa60:	2b2e      	cmp	r3, #46	; 0x2e
 800fa62:	d003      	beq.n	800fa6c <create_name+0x7c>
 800fa64:	693a      	ldr	r2, [r7, #16]
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d30c      	bcc.n	800fa86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	2b0b      	cmp	r3, #11
 800fa70:	d002      	beq.n	800fa78 <create_name+0x88>
 800fa72:	7efb      	ldrb	r3, [r7, #27]
 800fa74:	2b2e      	cmp	r3, #46	; 0x2e
 800fa76:	d001      	beq.n	800fa7c <create_name+0x8c>
 800fa78:	2306      	movs	r3, #6
 800fa7a:	e044      	b.n	800fb06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa7c:	2308      	movs	r3, #8
 800fa7e:	613b      	str	r3, [r7, #16]
 800fa80:	230b      	movs	r3, #11
 800fa82:	617b      	str	r3, [r7, #20]
			continue;
 800fa84:	e022      	b.n	800facc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	da04      	bge.n	800fa98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa8e:	7efb      	ldrb	r3, [r7, #27]
 800fa90:	3b80      	subs	r3, #128	; 0x80
 800fa92:	4a1f      	ldr	r2, [pc, #124]	; (800fb10 <create_name+0x120>)
 800fa94:	5cd3      	ldrb	r3, [r2, r3]
 800fa96:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa98:	7efb      	ldrb	r3, [r7, #27]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	481d      	ldr	r0, [pc, #116]	; (800fb14 <create_name+0x124>)
 800fa9e:	f7fe ffe4 	bl	800ea6a <chk_chr>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d001      	beq.n	800faac <create_name+0xbc>
 800faa8:	2306      	movs	r3, #6
 800faaa:	e02c      	b.n	800fb06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800faac:	7efb      	ldrb	r3, [r7, #27]
 800faae:	2b60      	cmp	r3, #96	; 0x60
 800fab0:	d905      	bls.n	800fabe <create_name+0xce>
 800fab2:	7efb      	ldrb	r3, [r7, #27]
 800fab4:	2b7a      	cmp	r3, #122	; 0x7a
 800fab6:	d802      	bhi.n	800fabe <create_name+0xce>
 800fab8:	7efb      	ldrb	r3, [r7, #27]
 800faba:	3b20      	subs	r3, #32
 800fabc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	1c5a      	adds	r2, r3, #1
 800fac2:	613a      	str	r2, [r7, #16]
 800fac4:	68ba      	ldr	r2, [r7, #8]
 800fac6:	4413      	add	r3, r2
 800fac8:	7efa      	ldrb	r2, [r7, #27]
 800faca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800facc:	e7a6      	b.n	800fa1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800face:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	441a      	add	r2, r3
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <create_name+0xf4>
 800fae0:	2306      	movs	r3, #6
 800fae2:	e010      	b.n	800fb06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	2be5      	cmp	r3, #229	; 0xe5
 800faea:	d102      	bne.n	800faf2 <create_name+0x102>
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	2205      	movs	r2, #5
 800faf0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800faf2:	7efb      	ldrb	r3, [r7, #27]
 800faf4:	2b20      	cmp	r3, #32
 800faf6:	d801      	bhi.n	800fafc <create_name+0x10c>
 800faf8:	2204      	movs	r2, #4
 800fafa:	e000      	b.n	800fafe <create_name+0x10e>
 800fafc:	2200      	movs	r2, #0
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	330b      	adds	r3, #11
 800fb02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fb04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3720      	adds	r7, #32
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	080132dc 	.word	0x080132dc
 800fb14:	08012ebc 	.word	0x08012ebc

0800fb18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b086      	sub	sp, #24
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb2c:	e002      	b.n	800fb34 <follow_path+0x1c>
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	3301      	adds	r3, #1
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	781b      	ldrb	r3, [r3, #0]
 800fb38:	2b2f      	cmp	r3, #47	; 0x2f
 800fb3a:	d0f8      	beq.n	800fb2e <follow_path+0x16>
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2b5c      	cmp	r3, #92	; 0x5c
 800fb42:	d0f4      	beq.n	800fb2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fb44:	693b      	ldr	r3, [r7, #16]
 800fb46:	2200      	movs	r2, #0
 800fb48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	2b1f      	cmp	r3, #31
 800fb50:	d80a      	bhi.n	800fb68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2280      	movs	r2, #128	; 0x80
 800fb56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fb5a:	2100      	movs	r1, #0
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff fc9b 	bl	800f498 <dir_sdi>
 800fb62:	4603      	mov	r3, r0
 800fb64:	75fb      	strb	r3, [r7, #23]
 800fb66:	e043      	b.n	800fbf0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb68:	463b      	mov	r3, r7
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7ff ff3f 	bl	800f9f0 <create_name>
 800fb72:	4603      	mov	r3, r0
 800fb74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb76:	7dfb      	ldrb	r3, [r7, #23]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d134      	bne.n	800fbe6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7ff fe51 	bl	800f824 <dir_find>
 800fb82:	4603      	mov	r3, r0
 800fb84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00a      	beq.n	800fbaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb94:	7dfb      	ldrb	r3, [r7, #23]
 800fb96:	2b04      	cmp	r3, #4
 800fb98:	d127      	bne.n	800fbea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb9a:	7afb      	ldrb	r3, [r7, #11]
 800fb9c:	f003 0304 	and.w	r3, r3, #4
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d122      	bne.n	800fbea <follow_path+0xd2>
 800fba4:	2305      	movs	r3, #5
 800fba6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fba8:	e01f      	b.n	800fbea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbaa:	7afb      	ldrb	r3, [r7, #11]
 800fbac:	f003 0304 	and.w	r3, r3, #4
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d11c      	bne.n	800fbee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	799b      	ldrb	r3, [r3, #6]
 800fbb8:	f003 0310 	and.w	r3, r3, #16
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d102      	bne.n	800fbc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fbc0:	2305      	movs	r3, #5
 800fbc2:	75fb      	strb	r3, [r7, #23]
 800fbc4:	e014      	b.n	800fbf0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbd4:	4413      	add	r3, r2
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7ff fde4 	bl	800f7a6 <ld_clust>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fbe4:	e7c0      	b.n	800fb68 <follow_path+0x50>
			if (res != FR_OK) break;
 800fbe6:	bf00      	nop
 800fbe8:	e002      	b.n	800fbf0 <follow_path+0xd8>
				break;
 800fbea:	bf00      	nop
 800fbec:	e000      	b.n	800fbf0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbee:	bf00      	nop
			}
		}
	}

	return res;
 800fbf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3718      	adds	r7, #24
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}

0800fbfa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fbfa:	b480      	push	{r7}
 800fbfc:	b087      	sub	sp, #28
 800fbfe:	af00      	add	r7, sp, #0
 800fc00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fc02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d031      	beq.n	800fc74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	617b      	str	r3, [r7, #20]
 800fc16:	e002      	b.n	800fc1e <get_ldnumber+0x24>
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	617b      	str	r3, [r7, #20]
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b20      	cmp	r3, #32
 800fc24:	d903      	bls.n	800fc2e <get_ldnumber+0x34>
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	2b3a      	cmp	r3, #58	; 0x3a
 800fc2c:	d1f4      	bne.n	800fc18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	2b3a      	cmp	r3, #58	; 0x3a
 800fc34:	d11c      	bne.n	800fc70 <get_ldnumber+0x76>
			tp = *path;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	60fa      	str	r2, [r7, #12]
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	3b30      	subs	r3, #48	; 0x30
 800fc46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2b09      	cmp	r3, #9
 800fc4c:	d80e      	bhi.n	800fc6c <get_ldnumber+0x72>
 800fc4e:	68fa      	ldr	r2, [r7, #12]
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d10a      	bne.n	800fc6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d107      	bne.n	800fc6c <get_ldnumber+0x72>
					vol = (int)i;
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	3301      	adds	r3, #1
 800fc64:	617b      	str	r3, [r7, #20]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	e002      	b.n	800fc76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc70:	2300      	movs	r3, #0
 800fc72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc74:	693b      	ldr	r3, [r7, #16]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	371c      	adds	r7, #28
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
	...

0800fc84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	70da      	strb	r2, [r3, #3]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc9c:	6839      	ldr	r1, [r7, #0]
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f7ff f8ae 	bl	800ee00 <move_window>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d001      	beq.n	800fcae <check_fs+0x2a>
 800fcaa:	2304      	movs	r3, #4
 800fcac:	e038      	b.n	800fd20 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	3330      	adds	r3, #48	; 0x30
 800fcb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fe fdf2 	bl	800e8a0 <ld_word>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d001      	beq.n	800fccc <check_fs+0x48>
 800fcc8:	2303      	movs	r3, #3
 800fcca:	e029      	b.n	800fd20 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcd2:	2be9      	cmp	r3, #233	; 0xe9
 800fcd4:	d009      	beq.n	800fcea <check_fs+0x66>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcdc:	2beb      	cmp	r3, #235	; 0xeb
 800fcde:	d11e      	bne.n	800fd1e <check_fs+0x9a>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fce6:	2b90      	cmp	r3, #144	; 0x90
 800fce8:	d119      	bne.n	800fd1e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3330      	adds	r3, #48	; 0x30
 800fcee:	3336      	adds	r3, #54	; 0x36
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fe fded 	bl	800e8d0 <ld_dword>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fcfc:	4a0a      	ldr	r2, [pc, #40]	; (800fd28 <check_fs+0xa4>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d101      	bne.n	800fd06 <check_fs+0x82>
 800fd02:	2300      	movs	r3, #0
 800fd04:	e00c      	b.n	800fd20 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	3330      	adds	r3, #48	; 0x30
 800fd0a:	3352      	adds	r3, #82	; 0x52
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f7fe fddf 	bl	800e8d0 <ld_dword>
 800fd12:	4603      	mov	r3, r0
 800fd14:	4a05      	ldr	r2, [pc, #20]	; (800fd2c <check_fs+0xa8>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d101      	bne.n	800fd1e <check_fs+0x9a>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e000      	b.n	800fd20 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fd1e:	2302      	movs	r3, #2
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	00544146 	.word	0x00544146
 800fd2c:	33544146 	.word	0x33544146

0800fd30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b096      	sub	sp, #88	; 0x58
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	4613      	mov	r3, r2
 800fd3c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	2200      	movs	r2, #0
 800fd42:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fd44:	68f8      	ldr	r0, [r7, #12]
 800fd46:	f7ff ff58 	bl	800fbfa <get_ldnumber>
 800fd4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	da01      	bge.n	800fd56 <find_volume+0x26>
 800fd52:	230b      	movs	r3, #11
 800fd54:	e22d      	b.n	80101b2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd56:	4aa1      	ldr	r2, [pc, #644]	; (800ffdc <find_volume+0x2ac>)
 800fd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd5e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d101      	bne.n	800fd6a <find_volume+0x3a>
 800fd66:	230c      	movs	r3, #12
 800fd68:	e223      	b.n	80101b2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd6e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd70:	79fb      	ldrb	r3, [r7, #7]
 800fd72:	f023 0301 	bic.w	r3, r3, #1
 800fd76:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d01a      	beq.n	800fdb6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd82:	785b      	ldrb	r3, [r3, #1]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7fe fced 	bl	800e764 <disk_status>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd94:	f003 0301 	and.w	r3, r3, #1
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10c      	bne.n	800fdb6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d007      	beq.n	800fdb2 <find_volume+0x82>
 800fda2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fda6:	f003 0304 	and.w	r3, r3, #4
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fdae:	230a      	movs	r3, #10
 800fdb0:	e1ff      	b.n	80101b2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	e1fd      	b.n	80101b2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	2200      	movs	r2, #0
 800fdba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdbe:	b2da      	uxtb	r2, r3
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	785b      	ldrb	r3, [r3, #1]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fe fce5 	bl	800e798 <disk_initialize>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fdd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d001      	beq.n	800fde4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fde0:	2303      	movs	r3, #3
 800fde2:	e1e6      	b.n	80101b2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fde4:	79fb      	ldrb	r3, [r7, #7]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <find_volume+0xca>
 800fdea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdee:	f003 0304 	and.w	r3, r3, #4
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fdf6:	230a      	movs	r3, #10
 800fdf8:	e1db      	b.n	80101b2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fdfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe02:	f7ff ff3f 	bl	800fc84 <check_fs>
 800fe06:	4603      	mov	r3, r0
 800fe08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d149      	bne.n	800fea8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe14:	2300      	movs	r3, #0
 800fe16:	643b      	str	r3, [r7, #64]	; 0x40
 800fe18:	e01e      	b.n	800fe58 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fe20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe22:	011b      	lsls	r3, r3, #4
 800fe24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe28:	4413      	add	r3, r2
 800fe2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	3304      	adds	r3, #4
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d006      	beq.n	800fe44 <find_volume+0x114>
 800fe36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe38:	3308      	adds	r3, #8
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fe fd48 	bl	800e8d0 <ld_dword>
 800fe40:	4602      	mov	r2, r0
 800fe42:	e000      	b.n	800fe46 <find_volume+0x116>
 800fe44:	2200      	movs	r2, #0
 800fe46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	3358      	adds	r3, #88	; 0x58
 800fe4c:	443b      	add	r3, r7
 800fe4e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe54:	3301      	adds	r3, #1
 800fe56:	643b      	str	r3, [r7, #64]	; 0x40
 800fe58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe5a:	2b03      	cmp	r3, #3
 800fe5c:	d9dd      	bls.n	800fe1a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe5e:	2300      	movs	r3, #0
 800fe60:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d002      	beq.n	800fe6e <find_volume+0x13e>
 800fe68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	3358      	adds	r3, #88	; 0x58
 800fe74:	443b      	add	r3, r7
 800fe76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d005      	beq.n	800fe8e <find_volume+0x15e>
 800fe82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe86:	f7ff fefd 	bl	800fc84 <check_fs>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	e000      	b.n	800fe90 <find_volume+0x160>
 800fe8e:	2303      	movs	r3, #3
 800fe90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fe94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d905      	bls.n	800fea8 <find_volume+0x178>
 800fe9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe9e:	3301      	adds	r3, #1
 800fea0:	643b      	str	r3, [r7, #64]	; 0x40
 800fea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea4:	2b03      	cmp	r3, #3
 800fea6:	d9e2      	bls.n	800fe6e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feac:	2b04      	cmp	r3, #4
 800feae:	d101      	bne.n	800feb4 <find_volume+0x184>
 800feb0:	2301      	movs	r3, #1
 800feb2:	e17e      	b.n	80101b2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800feb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feb8:	2b01      	cmp	r3, #1
 800feba:	d901      	bls.n	800fec0 <find_volume+0x190>
 800febc:	230d      	movs	r3, #13
 800febe:	e178      	b.n	80101b2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec2:	3330      	adds	r3, #48	; 0x30
 800fec4:	330b      	adds	r3, #11
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fe fcea 	bl	800e8a0 <ld_word>
 800fecc:	4603      	mov	r3, r0
 800fece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fed2:	d001      	beq.n	800fed8 <find_volume+0x1a8>
 800fed4:	230d      	movs	r3, #13
 800fed6:	e16c      	b.n	80101b2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feda:	3330      	adds	r3, #48	; 0x30
 800fedc:	3316      	adds	r3, #22
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fcde 	bl	800e8a0 <ld_word>
 800fee4:	4603      	mov	r3, r0
 800fee6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feea:	2b00      	cmp	r3, #0
 800feec:	d106      	bne.n	800fefc <find_volume+0x1cc>
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	3330      	adds	r3, #48	; 0x30
 800fef2:	3324      	adds	r3, #36	; 0x24
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7fe fceb 	bl	800e8d0 <ld_dword>
 800fefa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff00:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff04:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0e:	789b      	ldrb	r3, [r3, #2]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d005      	beq.n	800ff20 <find_volume+0x1f0>
 800ff14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff16:	789b      	ldrb	r3, [r3, #2]
 800ff18:	2b02      	cmp	r3, #2
 800ff1a:	d001      	beq.n	800ff20 <find_volume+0x1f0>
 800ff1c:	230d      	movs	r3, #13
 800ff1e:	e148      	b.n	80101b2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff22:	789b      	ldrb	r3, [r3, #2]
 800ff24:	461a      	mov	r2, r3
 800ff26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff28:	fb02 f303 	mul.w	r3, r2, r3
 800ff2c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff38:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3c:	895b      	ldrh	r3, [r3, #10]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d008      	beq.n	800ff54 <find_volume+0x224>
 800ff42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff44:	895b      	ldrh	r3, [r3, #10]
 800ff46:	461a      	mov	r2, r3
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	895b      	ldrh	r3, [r3, #10]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	4013      	ands	r3, r2
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d001      	beq.n	800ff58 <find_volume+0x228>
 800ff54:	230d      	movs	r3, #13
 800ff56:	e12c      	b.n	80101b2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	3330      	adds	r3, #48	; 0x30
 800ff5c:	3311      	adds	r3, #17
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe fc9e 	bl	800e8a0 <ld_word>
 800ff64:	4603      	mov	r3, r0
 800ff66:	461a      	mov	r2, r3
 800ff68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff6e:	891b      	ldrh	r3, [r3, #8]
 800ff70:	f003 030f 	and.w	r3, r3, #15
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d001      	beq.n	800ff7e <find_volume+0x24e>
 800ff7a:	230d      	movs	r3, #13
 800ff7c:	e119      	b.n	80101b2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff80:	3330      	adds	r3, #48	; 0x30
 800ff82:	3313      	adds	r3, #19
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fe fc8b 	bl	800e8a0 <ld_word>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d106      	bne.n	800ffa2 <find_volume+0x272>
 800ff94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff96:	3330      	adds	r3, #48	; 0x30
 800ff98:	3320      	adds	r3, #32
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fe fc98 	bl	800e8d0 <ld_dword>
 800ffa0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ffa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa4:	3330      	adds	r3, #48	; 0x30
 800ffa6:	330e      	adds	r3, #14
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fe fc79 	bl	800e8a0 <ld_word>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ffb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d101      	bne.n	800ffbc <find_volume+0x28c>
 800ffb8:	230d      	movs	r3, #13
 800ffba:	e0fa      	b.n	80101b2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ffbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc0:	4413      	add	r3, r2
 800ffc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffc4:	8912      	ldrh	r2, [r2, #8]
 800ffc6:	0912      	lsrs	r2, r2, #4
 800ffc8:	b292      	uxth	r2, r2
 800ffca:	4413      	add	r3, r2
 800ffcc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ffce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d204      	bcs.n	800ffe0 <find_volume+0x2b0>
 800ffd6:	230d      	movs	r3, #13
 800ffd8:	e0eb      	b.n	80101b2 <find_volume+0x482>
 800ffda:	bf00      	nop
 800ffdc:	20003824 	.word	0x20003824
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ffe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe4:	1ad3      	subs	r3, r2, r3
 800ffe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffe8:	8952      	ldrh	r2, [r2, #10]
 800ffea:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffee:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d101      	bne.n	800fffa <find_volume+0x2ca>
 800fff6:	230d      	movs	r3, #13
 800fff8:	e0db      	b.n	80101b2 <find_volume+0x482>
		fmt = FS_FAT32;
 800fffa:	2303      	movs	r3, #3
 800fffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010002:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010006:	4293      	cmp	r3, r2
 8010008:	d802      	bhi.n	8010010 <find_volume+0x2e0>
 801000a:	2302      	movs	r3, #2
 801000c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010012:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010016:	4293      	cmp	r3, r2
 8010018:	d802      	bhi.n	8010020 <find_volume+0x2f0>
 801001a:	2301      	movs	r3, #1
 801001c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	1c9a      	adds	r2, r3, #2
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801002c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801002e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010032:	441a      	add	r2, r3
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8010038:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801003a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003c:	441a      	add	r2, r3
 801003e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010040:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8010042:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010046:	2b03      	cmp	r3, #3
 8010048:	d11e      	bne.n	8010088 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801004a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004c:	3330      	adds	r3, #48	; 0x30
 801004e:	332a      	adds	r3, #42	; 0x2a
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe fc25 	bl	800e8a0 <ld_word>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <find_volume+0x330>
 801005c:	230d      	movs	r3, #13
 801005e:	e0a8      	b.n	80101b2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	891b      	ldrh	r3, [r3, #8]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <find_volume+0x33c>
 8010068:	230d      	movs	r3, #13
 801006a:	e0a2      	b.n	80101b2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801006c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006e:	3330      	adds	r3, #48	; 0x30
 8010070:	332c      	adds	r3, #44	; 0x2c
 8010072:	4618      	mov	r0, r3
 8010074:	f7fe fc2c 	bl	800e8d0 <ld_dword>
 8010078:	4602      	mov	r2, r0
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	695b      	ldr	r3, [r3, #20]
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	647b      	str	r3, [r7, #68]	; 0x44
 8010086:	e01f      	b.n	80100c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	891b      	ldrh	r3, [r3, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <find_volume+0x364>
 8010090:	230d      	movs	r3, #13
 8010092:	e08e      	b.n	80101b2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	6a1a      	ldr	r2, [r3, #32]
 8010098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801009a:	441a      	add	r2, r3
 801009c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d103      	bne.n	80100b0 <find_volume+0x380>
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100aa:	695b      	ldr	r3, [r3, #20]
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	e00a      	b.n	80100c6 <find_volume+0x396>
 80100b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b2:	695a      	ldr	r2, [r3, #20]
 80100b4:	4613      	mov	r3, r2
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	4413      	add	r3, r2
 80100ba:	085a      	lsrs	r2, r3, #1
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	695b      	ldr	r3, [r3, #20]
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80100c6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	699a      	ldr	r2, [r3, #24]
 80100cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80100d2:	0a5b      	lsrs	r3, r3, #9
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d201      	bcs.n	80100dc <find_volume+0x3ac>
 80100d8:	230d      	movs	r3, #13
 80100da:	e06a      	b.n	80101b2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100e2:	611a      	str	r2, [r3, #16]
 80100e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e6:	691a      	ldr	r2, [r3, #16]
 80100e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	2280      	movs	r2, #128	; 0x80
 80100f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80100f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100f6:	2b03      	cmp	r3, #3
 80100f8:	d149      	bne.n	801018e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	3330      	adds	r3, #48	; 0x30
 80100fe:	3330      	adds	r3, #48	; 0x30
 8010100:	4618      	mov	r0, r3
 8010102:	f7fe fbcd 	bl	800e8a0 <ld_word>
 8010106:	4603      	mov	r3, r0
 8010108:	2b01      	cmp	r3, #1
 801010a:	d140      	bne.n	801018e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801010c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801010e:	3301      	adds	r3, #1
 8010110:	4619      	mov	r1, r3
 8010112:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010114:	f7fe fe74 	bl	800ee00 <move_window>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d137      	bne.n	801018e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	2200      	movs	r2, #0
 8010122:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	3330      	adds	r3, #48	; 0x30
 8010128:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801012c:	4618      	mov	r0, r3
 801012e:	f7fe fbb7 	bl	800e8a0 <ld_word>
 8010132:	4603      	mov	r3, r0
 8010134:	461a      	mov	r2, r3
 8010136:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801013a:	429a      	cmp	r2, r3
 801013c:	d127      	bne.n	801018e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801013e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010140:	3330      	adds	r3, #48	; 0x30
 8010142:	4618      	mov	r0, r3
 8010144:	f7fe fbc4 	bl	800e8d0 <ld_dword>
 8010148:	4603      	mov	r3, r0
 801014a:	4a1c      	ldr	r2, [pc, #112]	; (80101bc <find_volume+0x48c>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d11e      	bne.n	801018e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010152:	3330      	adds	r3, #48	; 0x30
 8010154:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010158:	4618      	mov	r0, r3
 801015a:	f7fe fbb9 	bl	800e8d0 <ld_dword>
 801015e:	4603      	mov	r3, r0
 8010160:	4a17      	ldr	r2, [pc, #92]	; (80101c0 <find_volume+0x490>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d113      	bne.n	801018e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010168:	3330      	adds	r3, #48	; 0x30
 801016a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe fbae 	bl	800e8d0 <ld_dword>
 8010174:	4602      	mov	r2, r0
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801017a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017c:	3330      	adds	r3, #48	; 0x30
 801017e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010182:	4618      	mov	r0, r3
 8010184:	f7fe fba4 	bl	800e8d0 <ld_dword>
 8010188:	4602      	mov	r2, r0
 801018a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801018e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010190:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010194:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010196:	4b0b      	ldr	r3, [pc, #44]	; (80101c4 <find_volume+0x494>)
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	3301      	adds	r3, #1
 801019c:	b29a      	uxth	r2, r3
 801019e:	4b09      	ldr	r3, [pc, #36]	; (80101c4 <find_volume+0x494>)
 80101a0:	801a      	strh	r2, [r3, #0]
 80101a2:	4b08      	ldr	r3, [pc, #32]	; (80101c4 <find_volume+0x494>)
 80101a4:	881a      	ldrh	r2, [r3, #0]
 80101a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80101aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101ac:	f7fe fdc0 	bl	800ed30 <clear_lock>
#endif
	return FR_OK;
 80101b0:	2300      	movs	r3, #0
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3758      	adds	r7, #88	; 0x58
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	41615252 	.word	0x41615252
 80101c0:	61417272 	.word	0x61417272
 80101c4:	20003828 	.word	0x20003828

080101c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b084      	sub	sp, #16
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80101d2:	2309      	movs	r3, #9
 80101d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d01c      	beq.n	8010216 <validate+0x4e>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d018      	beq.n	8010216 <validate+0x4e>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d013      	beq.n	8010216 <validate+0x4e>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	889a      	ldrh	r2, [r3, #4]
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	88db      	ldrh	r3, [r3, #6]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d10c      	bne.n	8010216 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	785b      	ldrb	r3, [r3, #1]
 8010202:	4618      	mov	r0, r3
 8010204:	f7fe faae 	bl	800e764 <disk_status>
 8010208:	4603      	mov	r3, r0
 801020a:	f003 0301 	and.w	r3, r3, #1
 801020e:	2b00      	cmp	r3, #0
 8010210:	d101      	bne.n	8010216 <validate+0x4e>
			res = FR_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010216:	7bfb      	ldrb	r3, [r7, #15]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d102      	bne.n	8010222 <validate+0x5a>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	e000      	b.n	8010224 <validate+0x5c>
 8010222:	2300      	movs	r3, #0
 8010224:	683a      	ldr	r2, [r7, #0]
 8010226:	6013      	str	r3, [r2, #0]
	return res;
 8010228:	7bfb      	ldrb	r3, [r7, #15]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
	...

08010234 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b088      	sub	sp, #32
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	4613      	mov	r3, r2
 8010240:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010246:	f107 0310 	add.w	r3, r7, #16
 801024a:	4618      	mov	r0, r3
 801024c:	f7ff fcd5 	bl	800fbfa <get_ldnumber>
 8010250:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	2b00      	cmp	r3, #0
 8010256:	da01      	bge.n	801025c <f_mount+0x28>
 8010258:	230b      	movs	r3, #11
 801025a:	e02b      	b.n	80102b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801025c:	4a17      	ldr	r2, [pc, #92]	; (80102bc <f_mount+0x88>)
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010264:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d005      	beq.n	8010278 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801026c:	69b8      	ldr	r0, [r7, #24]
 801026e:	f7fe fd5f 	bl	800ed30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010272:	69bb      	ldr	r3, [r7, #24]
 8010274:	2200      	movs	r2, #0
 8010276:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d002      	beq.n	8010284 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2200      	movs	r2, #0
 8010282:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	490d      	ldr	r1, [pc, #52]	; (80102bc <f_mount+0x88>)
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d002      	beq.n	801029a <f_mount+0x66>
 8010294:	79fb      	ldrb	r3, [r7, #7]
 8010296:	2b01      	cmp	r3, #1
 8010298:	d001      	beq.n	801029e <f_mount+0x6a>
 801029a:	2300      	movs	r3, #0
 801029c:	e00a      	b.n	80102b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801029e:	f107 010c 	add.w	r1, r7, #12
 80102a2:	f107 0308 	add.w	r3, r7, #8
 80102a6:	2200      	movs	r2, #0
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7ff fd41 	bl	800fd30 <find_volume>
 80102ae:	4603      	mov	r3, r0
 80102b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3720      	adds	r7, #32
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	20003824 	.word	0x20003824

080102c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b098      	sub	sp, #96	; 0x60
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	4613      	mov	r3, r2
 80102cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d101      	bne.n	80102d8 <f_open+0x18>
 80102d4:	2309      	movs	r3, #9
 80102d6:	e1ad      	b.n	8010634 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80102d8:	79fb      	ldrb	r3, [r7, #7]
 80102da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80102e0:	79fa      	ldrb	r2, [r7, #7]
 80102e2:	f107 0110 	add.w	r1, r7, #16
 80102e6:	f107 0308 	add.w	r3, r7, #8
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7ff fd20 	bl	800fd30 <find_volume>
 80102f0:	4603      	mov	r3, r0
 80102f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80102f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f040 8191 	bne.w	8010622 <f_open+0x362>
		dj.obj.fs = fs;
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	f107 0314 	add.w	r3, r7, #20
 801030a:	4611      	mov	r1, r2
 801030c:	4618      	mov	r0, r3
 801030e:	f7ff fc03 	bl	800fb18 <follow_path>
 8010312:	4603      	mov	r3, r0
 8010314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010318:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801031c:	2b00      	cmp	r3, #0
 801031e:	d11a      	bne.n	8010356 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010320:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010324:	b25b      	sxtb	r3, r3
 8010326:	2b00      	cmp	r3, #0
 8010328:	da03      	bge.n	8010332 <f_open+0x72>
				res = FR_INVALID_NAME;
 801032a:	2306      	movs	r3, #6
 801032c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010330:	e011      	b.n	8010356 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010332:	79fb      	ldrb	r3, [r7, #7]
 8010334:	f023 0301 	bic.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	bf14      	ite	ne
 801033c:	2301      	movne	r3, #1
 801033e:	2300      	moveq	r3, #0
 8010340:	b2db      	uxtb	r3, r3
 8010342:	461a      	mov	r2, r3
 8010344:	f107 0314 	add.w	r3, r7, #20
 8010348:	4611      	mov	r1, r2
 801034a:	4618      	mov	r0, r3
 801034c:	f7fe fba8 	bl	800eaa0 <chk_lock>
 8010350:	4603      	mov	r3, r0
 8010352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	f003 031c 	and.w	r3, r3, #28
 801035c:	2b00      	cmp	r3, #0
 801035e:	d07f      	beq.n	8010460 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010364:	2b00      	cmp	r3, #0
 8010366:	d017      	beq.n	8010398 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010368:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801036c:	2b04      	cmp	r3, #4
 801036e:	d10e      	bne.n	801038e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010370:	f7fe fbf2 	bl	800eb58 <enq_lock>
 8010374:	4603      	mov	r3, r0
 8010376:	2b00      	cmp	r3, #0
 8010378:	d006      	beq.n	8010388 <f_open+0xc8>
 801037a:	f107 0314 	add.w	r3, r7, #20
 801037e:	4618      	mov	r0, r3
 8010380:	f7ff faa5 	bl	800f8ce <dir_register>
 8010384:	4603      	mov	r3, r0
 8010386:	e000      	b.n	801038a <f_open+0xca>
 8010388:	2312      	movs	r3, #18
 801038a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801038e:	79fb      	ldrb	r3, [r7, #7]
 8010390:	f043 0308 	orr.w	r3, r3, #8
 8010394:	71fb      	strb	r3, [r7, #7]
 8010396:	e010      	b.n	80103ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010398:	7ebb      	ldrb	r3, [r7, #26]
 801039a:	f003 0311 	and.w	r3, r3, #17
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d003      	beq.n	80103aa <f_open+0xea>
					res = FR_DENIED;
 80103a2:	2307      	movs	r3, #7
 80103a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103a8:	e007      	b.n	80103ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80103aa:	79fb      	ldrb	r3, [r7, #7]
 80103ac:	f003 0304 	and.w	r3, r3, #4
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d002      	beq.n	80103ba <f_open+0xfa>
 80103b4:	2308      	movs	r3, #8
 80103b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80103ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d168      	bne.n	8010494 <f_open+0x1d4>
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	f003 0308 	and.w	r3, r3, #8
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d063      	beq.n	8010494 <f_open+0x1d4>
				dw = GET_FATTIME();
 80103cc:	f7fb f8bc 	bl	800b548 <get_fattime>
 80103d0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80103d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d4:	330e      	adds	r3, #14
 80103d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fe fab7 	bl	800e94c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80103de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e0:	3316      	adds	r3, #22
 80103e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7fe fab1 	bl	800e94c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80103ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ec:	330b      	adds	r3, #11
 80103ee:	2220      	movs	r2, #32
 80103f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103f6:	4611      	mov	r1, r2
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff f9d4 	bl	800f7a6 <ld_clust>
 80103fe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010404:	2200      	movs	r2, #0
 8010406:	4618      	mov	r0, r3
 8010408:	f7ff f9ec 	bl	800f7e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040e:	331c      	adds	r3, #28
 8010410:	2100      	movs	r1, #0
 8010412:	4618      	mov	r0, r3
 8010414:	f7fe fa9a 	bl	800e94c <st_dword>
					fs->wflag = 1;
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	2201      	movs	r2, #1
 801041c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801041e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d037      	beq.n	8010494 <f_open+0x1d4>
						dw = fs->winsect;
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010428:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801042a:	f107 0314 	add.w	r3, r7, #20
 801042e:	2200      	movs	r2, #0
 8010430:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010432:	4618      	mov	r0, r3
 8010434:	f7fe ff33 	bl	800f29e <remove_chain>
 8010438:	4603      	mov	r3, r0
 801043a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801043e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010442:	2b00      	cmp	r3, #0
 8010444:	d126      	bne.n	8010494 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801044a:	4618      	mov	r0, r3
 801044c:	f7fe fcd8 	bl	800ee00 <move_window>
 8010450:	4603      	mov	r3, r0
 8010452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801045a:	3a01      	subs	r2, #1
 801045c:	60da      	str	r2, [r3, #12]
 801045e:	e019      	b.n	8010494 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010464:	2b00      	cmp	r3, #0
 8010466:	d115      	bne.n	8010494 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010468:	7ebb      	ldrb	r3, [r7, #26]
 801046a:	f003 0310 	and.w	r3, r3, #16
 801046e:	2b00      	cmp	r3, #0
 8010470:	d003      	beq.n	801047a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010472:	2304      	movs	r3, #4
 8010474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010478:	e00c      	b.n	8010494 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801047a:	79fb      	ldrb	r3, [r7, #7]
 801047c:	f003 0302 	and.w	r3, r3, #2
 8010480:	2b00      	cmp	r3, #0
 8010482:	d007      	beq.n	8010494 <f_open+0x1d4>
 8010484:	7ebb      	ldrb	r3, [r7, #26]
 8010486:	f003 0301 	and.w	r3, r3, #1
 801048a:	2b00      	cmp	r3, #0
 801048c:	d002      	beq.n	8010494 <f_open+0x1d4>
						res = FR_DENIED;
 801048e:	2307      	movs	r3, #7
 8010490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010498:	2b00      	cmp	r3, #0
 801049a:	d128      	bne.n	80104ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801049c:	79fb      	ldrb	r3, [r7, #7]
 801049e:	f003 0308 	and.w	r3, r3, #8
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d003      	beq.n	80104ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80104b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80104bc:	79fb      	ldrb	r3, [r7, #7]
 80104be:	f023 0301 	bic.w	r3, r3, #1
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	bf14      	ite	ne
 80104c6:	2301      	movne	r3, #1
 80104c8:	2300      	moveq	r3, #0
 80104ca:	b2db      	uxtb	r3, r3
 80104cc:	461a      	mov	r2, r3
 80104ce:	f107 0314 	add.w	r3, r7, #20
 80104d2:	4611      	mov	r1, r2
 80104d4:	4618      	mov	r0, r3
 80104d6:	f7fe fb61 	bl	800eb9c <inc_lock>
 80104da:	4602      	mov	r2, r0
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d102      	bne.n	80104ee <f_open+0x22e>
 80104e8:	2302      	movs	r3, #2
 80104ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80104ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f040 8095 	bne.w	8010622 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104fc:	4611      	mov	r1, r2
 80104fe:	4618      	mov	r0, r3
 8010500:	f7ff f951 	bl	800f7a6 <ld_clust>
 8010504:	4602      	mov	r2, r0
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050c:	331c      	adds	r3, #28
 801050e:	4618      	mov	r0, r3
 8010510:	f7fe f9de 	bl	800e8d0 <ld_dword>
 8010514:	4602      	mov	r2, r0
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2200      	movs	r2, #0
 801051e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010520:	693a      	ldr	r2, [r7, #16]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	88da      	ldrh	r2, [r3, #6]
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	79fa      	ldrb	r2, [r7, #7]
 8010532:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2200      	movs	r2, #0
 8010538:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	3330      	adds	r3, #48	; 0x30
 801054a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801054e:	2100      	movs	r1, #0
 8010550:	4618      	mov	r0, r3
 8010552:	f7fe fa48 	bl	800e9e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010556:	79fb      	ldrb	r3, [r7, #7]
 8010558:	f003 0320 	and.w	r3, r3, #32
 801055c:	2b00      	cmp	r3, #0
 801055e:	d060      	beq.n	8010622 <f_open+0x362>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d05c      	beq.n	8010622 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	68da      	ldr	r2, [r3, #12]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	895b      	ldrh	r3, [r3, #10]
 8010574:	025b      	lsls	r3, r3, #9
 8010576:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	657b      	str	r3, [r7, #84]	; 0x54
 8010584:	e016      	b.n	80105b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801058a:	4618      	mov	r0, r3
 801058c:	f7fe fcf3 	bl	800ef76 <get_fat>
 8010590:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010594:	2b01      	cmp	r3, #1
 8010596:	d802      	bhi.n	801059e <f_open+0x2de>
 8010598:	2302      	movs	r3, #2
 801059a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801059e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105a4:	d102      	bne.n	80105ac <f_open+0x2ec>
 80105a6:	2301      	movs	r3, #1
 80105a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80105ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	657b      	str	r3, [r7, #84]	; 0x54
 80105b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d103      	bne.n	80105c4 <f_open+0x304>
 80105bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d8e0      	bhi.n	8010586 <f_open+0x2c6>
				}
				fp->clust = clst;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80105ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d127      	bne.n	8010622 <f_open+0x362>
 80105d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d022      	beq.n	8010622 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fe fca9 	bl	800ef38 <clust2sect>
 80105e6:	6478      	str	r0, [r7, #68]	; 0x44
 80105e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d103      	bne.n	80105f6 <f_open+0x336>
						res = FR_INT_ERR;
 80105ee:	2302      	movs	r3, #2
 80105f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105f4:	e015      	b.n	8010622 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80105f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105f8:	0a5a      	lsrs	r2, r3, #9
 80105fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105fc:	441a      	add	r2, r3
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	7858      	ldrb	r0, [r3, #1]
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	6a1a      	ldr	r2, [r3, #32]
 8010610:	2301      	movs	r3, #1
 8010612:	f7fe f8e7 	bl	800e7e4 <disk_read>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d002      	beq.n	8010622 <f_open+0x362>
 801061c:	2301      	movs	r3, #1
 801061e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <f_open+0x370>
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010634:	4618      	mov	r0, r3
 8010636:	3760      	adds	r7, #96	; 0x60
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f107 0208 	add.w	r2, r7, #8
 801064a:	4611      	mov	r1, r2
 801064c:	4618      	mov	r0, r3
 801064e:	f7ff fdbb 	bl	80101c8 <validate>
 8010652:	4603      	mov	r3, r0
 8010654:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010656:	7dfb      	ldrb	r3, [r7, #23]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d168      	bne.n	801072e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	7d1b      	ldrb	r3, [r3, #20]
 8010660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	d062      	beq.n	801072e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	7d1b      	ldrb	r3, [r3, #20]
 801066c:	b25b      	sxtb	r3, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	da15      	bge.n	801069e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	7858      	ldrb	r0, [r3, #1]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a1a      	ldr	r2, [r3, #32]
 8010680:	2301      	movs	r3, #1
 8010682:	f7fe f8cf 	bl	800e824 <disk_write>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d001      	beq.n	8010690 <f_sync+0x54>
 801068c:	2301      	movs	r3, #1
 801068e:	e04f      	b.n	8010730 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	7d1b      	ldrb	r3, [r3, #20]
 8010694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010698:	b2da      	uxtb	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801069e:	f7fa ff53 	bl	800b548 <get_fattime>
 80106a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80106a4:	68ba      	ldr	r2, [r7, #8]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106aa:	4619      	mov	r1, r3
 80106ac:	4610      	mov	r0, r2
 80106ae:	f7fe fba7 	bl	800ee00 <move_window>
 80106b2:	4603      	mov	r3, r0
 80106b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80106b6:	7dfb      	ldrb	r3, [r7, #23]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d138      	bne.n	801072e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	330b      	adds	r3, #11
 80106c6:	781a      	ldrb	r2, [r3, #0]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	330b      	adds	r3, #11
 80106cc:	f042 0220 	orr.w	r2, r2, #32
 80106d0:	b2d2      	uxtb	r2, r2
 80106d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6818      	ldr	r0, [r3, #0]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	461a      	mov	r2, r3
 80106de:	68f9      	ldr	r1, [r7, #12]
 80106e0:	f7ff f880 	bl	800f7e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	f103 021c 	add.w	r2, r3, #28
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	4619      	mov	r1, r3
 80106f0:	4610      	mov	r0, r2
 80106f2:	f7fe f92b 	bl	800e94c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	3316      	adds	r3, #22
 80106fa:	6939      	ldr	r1, [r7, #16]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe f925 	bl	800e94c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	3312      	adds	r3, #18
 8010706:	2100      	movs	r1, #0
 8010708:	4618      	mov	r0, r3
 801070a:	f7fe f904 	bl	800e916 <st_word>
					fs->wflag = 1;
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2201      	movs	r2, #1
 8010712:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe fba0 	bl	800ee5c <sync_fs>
 801071c:	4603      	mov	r3, r0
 801071e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	7d1b      	ldrb	r3, [r3, #20]
 8010724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010728:	b2da      	uxtb	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801072e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3718      	adds	r7, #24
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}

08010738 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7ff ff7b 	bl	801063c <f_sync>
 8010746:	4603      	mov	r3, r0
 8010748:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801074a:	7bfb      	ldrb	r3, [r7, #15]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d118      	bne.n	8010782 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f107 0208 	add.w	r2, r7, #8
 8010756:	4611      	mov	r1, r2
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff fd35 	bl	80101c8 <validate>
 801075e:	4603      	mov	r3, r0
 8010760:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010762:	7bfb      	ldrb	r3, [r7, #15]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10c      	bne.n	8010782 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	691b      	ldr	r3, [r3, #16]
 801076c:	4618      	mov	r0, r3
 801076e:	f7fe faa3 	bl	800ecb8 <dec_lock>
 8010772:	4603      	mov	r3, r0
 8010774:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d102      	bne.n	8010782 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010782:	7bfb      	ldrb	r3, [r7, #15]
}
 8010784:	4618      	mov	r0, r3
 8010786:	3710      	adds	r7, #16
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b090      	sub	sp, #64	; 0x40
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8010796:	f107 010c 	add.w	r1, r7, #12
 801079a:	1d3b      	adds	r3, r7, #4
 801079c:	2200      	movs	r2, #0
 801079e:	4618      	mov	r0, r3
 80107a0:	f7ff fac6 	bl	800fd30 <find_volume>
 80107a4:	4603      	mov	r3, r0
 80107a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80107aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d11f      	bne.n	80107f2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	f107 030c 	add.w	r3, r7, #12
 80107b8:	4611      	mov	r1, r2
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7ff f9ac 	bl	800fb18 <follow_path>
 80107c0:	4603      	mov	r3, r0
 80107c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80107c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d111      	bne.n	80107f2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80107ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80107d2:	b25b      	sxtb	r3, r3
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	da03      	bge.n	80107e0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 80107d8:	2306      	movs	r3, #6
 80107da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80107de:	e008      	b.n	80107f2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d005      	beq.n	80107f2 <f_stat+0x66>
 80107e6:	f107 030c 	add.w	r3, r7, #12
 80107ea:	6839      	ldr	r1, [r7, #0]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7ff f8a0 	bl	800f932 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80107f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3740      	adds	r7, #64	; 0x40
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}

080107fe <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80107fe:	b580      	push	{r7, lr}
 8010800:	b096      	sub	sp, #88	; 0x58
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010806:	f107 0108 	add.w	r1, r7, #8
 801080a:	1d3b      	adds	r3, r7, #4
 801080c:	2202      	movs	r2, #2
 801080e:	4618      	mov	r0, r3
 8010810:	f7ff fa8e 	bl	800fd30 <find_volume>
 8010814:	4603      	mov	r3, r0
 8010816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801081e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010822:	2b00      	cmp	r3, #0
 8010824:	f040 80ec 	bne.w	8010a00 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	f107 030c 	add.w	r3, r7, #12
 801082e:	4611      	mov	r1, r2
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff f971 	bl	800fb18 <follow_path>
 8010836:	4603      	mov	r3, r0
 8010838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801083c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010840:	2b00      	cmp	r3, #0
 8010842:	d102      	bne.n	801084a <f_mkdir+0x4c>
 8010844:	2308      	movs	r3, #8
 8010846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801084a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801084e:	2b04      	cmp	r3, #4
 8010850:	f040 80d6 	bne.w	8010a00 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010854:	f107 030c 	add.w	r3, r7, #12
 8010858:	2100      	movs	r1, #0
 801085a:	4618      	mov	r0, r3
 801085c:	f7fe fd84 	bl	800f368 <create_chain>
 8010860:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	895b      	ldrh	r3, [r3, #10]
 8010866:	025b      	lsls	r3, r3, #9
 8010868:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801086a:	2300      	movs	r3, #0
 801086c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010872:	2b00      	cmp	r3, #0
 8010874:	d102      	bne.n	801087c <f_mkdir+0x7e>
 8010876:	2307      	movs	r3, #7
 8010878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 801087c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801087e:	2b01      	cmp	r3, #1
 8010880:	d102      	bne.n	8010888 <f_mkdir+0x8a>
 8010882:	2302      	movs	r3, #2
 8010884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801088a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801088e:	d102      	bne.n	8010896 <f_mkdir+0x98>
 8010890:	2301      	movs	r3, #1
 8010892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <f_mkdir+0xae>
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe fa69 	bl	800ed78 <sync_window>
 80108a6:	4603      	mov	r3, r0
 80108a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80108ac:	f7fa fe4c 	bl	800b548 <get_fattime>
 80108b0:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80108b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d16a      	bne.n	8010990 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fe fb3a 	bl	800ef38 <clust2sect>
 80108c4:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	3330      	adds	r3, #48	; 0x30
 80108ca:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80108cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108d0:	2100      	movs	r1, #0
 80108d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108d4:	f7fe f887 	bl	800e9e6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80108d8:	220b      	movs	r2, #11
 80108da:	2120      	movs	r1, #32
 80108dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80108de:	f7fe f882 	bl	800e9e6 <mem_set>
					dir[DIR_Name] = '.';
 80108e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e4:	222e      	movs	r2, #46	; 0x2e
 80108e6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80108e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ea:	330b      	adds	r3, #11
 80108ec:	2210      	movs	r2, #16
 80108ee:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80108f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f2:	3316      	adds	r3, #22
 80108f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108f6:	4618      	mov	r0, r3
 80108f8:	f7fe f828 	bl	800e94c <st_dword>
					st_clust(fs, dir, dcl);
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe ff6e 	bl	800f7e4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8010908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801090a:	3320      	adds	r3, #32
 801090c:	2220      	movs	r2, #32
 801090e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe f847 	bl	800e9a4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8010916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010918:	3321      	adds	r3, #33	; 0x21
 801091a:	222e      	movs	r2, #46	; 0x2e
 801091c:	701a      	strb	r2, [r3, #0]
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b03      	cmp	r3, #3
 8010928:	d106      	bne.n	8010938 <f_mkdir+0x13a>
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801092e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010930:	429a      	cmp	r2, r3
 8010932:	d101      	bne.n	8010938 <f_mkdir+0x13a>
 8010934:	2300      	movs	r3, #0
 8010936:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8010938:	68b8      	ldr	r0, [r7, #8]
 801093a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801093c:	3320      	adds	r3, #32
 801093e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010940:	4619      	mov	r1, r3
 8010942:	f7fe ff4f 	bl	800f7e4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	895b      	ldrh	r3, [r3, #10]
 801094a:	653b      	str	r3, [r7, #80]	; 0x50
 801094c:	e01b      	b.n	8010986 <f_mkdir+0x188>
					fs->winsect = dsc++;
 801094e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010950:	1c5a      	adds	r2, r3, #1
 8010952:	64fa      	str	r2, [r7, #76]	; 0x4c
 8010954:	68ba      	ldr	r2, [r7, #8]
 8010956:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2201      	movs	r2, #1
 801095c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	4618      	mov	r0, r3
 8010962:	f7fe fa09 	bl	800ed78 <sync_window>
 8010966:	4603      	mov	r3, r0
 8010968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801096c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010970:	2b00      	cmp	r3, #0
 8010972:	d10c      	bne.n	801098e <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8010974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010978:	2100      	movs	r1, #0
 801097a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801097c:	f7fe f833 	bl	800e9e6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010982:	3b01      	subs	r3, #1
 8010984:	653b      	str	r3, [r7, #80]	; 0x50
 8010986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1e0      	bne.n	801094e <f_mkdir+0x150>
 801098c:	e000      	b.n	8010990 <f_mkdir+0x192>
					if (res != FR_OK) break;
 801098e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010994:	2b00      	cmp	r3, #0
 8010996:	d107      	bne.n	80109a8 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010998:	f107 030c 	add.w	r3, r7, #12
 801099c:	4618      	mov	r0, r3
 801099e:	f7fe ff96 	bl	800f8ce <dir_register>
 80109a2:	4603      	mov	r3, r0
 80109a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80109a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d120      	bne.n	80109f2 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80109b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b2:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80109b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109b6:	3316      	adds	r3, #22
 80109b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fd ffc6 	bl	800e94c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7fe ff0c 	bl	800f7e4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80109cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109ce:	330b      	adds	r3, #11
 80109d0:	2210      	movs	r2, #16
 80109d2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2201      	movs	r2, #1
 80109d8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80109da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d10e      	bne.n	8010a00 <f_mkdir+0x202>
					res = sync_fs(fs);
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7fe fa39 	bl	800ee5c <sync_fs>
 80109ea:	4603      	mov	r3, r0
 80109ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80109f0:	e006      	b.n	8010a00 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80109f2:	f107 030c 	add.w	r3, r7, #12
 80109f6:	2200      	movs	r2, #0
 80109f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7fe fc4f 	bl	800f29e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3758      	adds	r7, #88	; 0x58
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}

08010a0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b087      	sub	sp, #28
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	60f8      	str	r0, [r7, #12]
 8010a14:	60b9      	str	r1, [r7, #8]
 8010a16:	4613      	mov	r3, r2
 8010a18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010a1e:	2300      	movs	r3, #0
 8010a20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010a22:	4b1f      	ldr	r3, [pc, #124]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a24:	7a5b      	ldrb	r3, [r3, #9]
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d131      	bne.n	8010a90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010a2c:	4b1c      	ldr	r3, [pc, #112]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a2e:	7a5b      	ldrb	r3, [r3, #9]
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	461a      	mov	r2, r3
 8010a34:	4b1a      	ldr	r3, [pc, #104]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a36:	2100      	movs	r1, #0
 8010a38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010a3a:	4b19      	ldr	r3, [pc, #100]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a3c:	7a5b      	ldrb	r3, [r3, #9]
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	4a17      	ldr	r2, [pc, #92]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a42:	009b      	lsls	r3, r3, #2
 8010a44:	4413      	add	r3, r2
 8010a46:	68fa      	ldr	r2, [r7, #12]
 8010a48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010a4a:	4b15      	ldr	r3, [pc, #84]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a4c:	7a5b      	ldrb	r3, [r3, #9]
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	461a      	mov	r2, r3
 8010a52:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a54:	4413      	add	r3, r2
 8010a56:	79fa      	ldrb	r2, [r7, #7]
 8010a58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010a5a:	4b11      	ldr	r3, [pc, #68]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a5c:	7a5b      	ldrb	r3, [r3, #9]
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	1c5a      	adds	r2, r3, #1
 8010a62:	b2d1      	uxtb	r1, r2
 8010a64:	4a0e      	ldr	r2, [pc, #56]	; (8010aa0 <FATFS_LinkDriverEx+0x94>)
 8010a66:	7251      	strb	r1, [r2, #9]
 8010a68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010a6a:	7dbb      	ldrb	r3, [r7, #22]
 8010a6c:	3330      	adds	r3, #48	; 0x30
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	3301      	adds	r3, #1
 8010a78:	223a      	movs	r2, #58	; 0x3a
 8010a7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	3302      	adds	r3, #2
 8010a80:	222f      	movs	r2, #47	; 0x2f
 8010a82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	3303      	adds	r3, #3
 8010a88:	2200      	movs	r2, #0
 8010a8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	371c      	adds	r7, #28
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	2000384c 	.word	0x2000384c

08010aa4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
 8010aac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010aae:	2200      	movs	r2, #0
 8010ab0:	6839      	ldr	r1, [r7, #0]
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff ffaa 	bl	8010a0c <FATFS_LinkDriverEx>
 8010ab8:	4603      	mov	r3, r0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
	...

08010ac4 <GetUSBState>:

/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
ApplicationTypeDef GetUSBState(){return Appli_state;}
 8010ac4:	b480      	push	{r7}
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	4b03      	ldr	r3, [pc, #12]	; (8010ad8 <GetUSBState+0x14>)
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	4618      	mov	r0, r3
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	20003c30 	.word	0x20003c30

08010adc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	490e      	ldr	r1, [pc, #56]	; (8010b1c <MX_USB_HOST_Init+0x40>)
 8010ae4:	480e      	ldr	r0, [pc, #56]	; (8010b20 <MX_USB_HOST_Init+0x44>)
 8010ae6:	f7fc f9eb 	bl	800cec0 <USBH_Init>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d001      	beq.n	8010af4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010af0:	f7f2 f9fe 	bl	8002ef0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8010af4:	490b      	ldr	r1, [pc, #44]	; (8010b24 <MX_USB_HOST_Init+0x48>)
 8010af6:	480a      	ldr	r0, [pc, #40]	; (8010b20 <MX_USB_HOST_Init+0x44>)
 8010af8:	f7fc fa70 	bl	800cfdc <USBH_RegisterClass>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8010b02:	f7f2 f9f5 	bl	8002ef0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8010b06:	4806      	ldr	r0, [pc, #24]	; (8010b20 <MX_USB_HOST_Init+0x44>)
 8010b08:	f7fc faf4 	bl	800d0f4 <USBH_Start>
 8010b0c:	4603      	mov	r3, r0
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d001      	beq.n	8010b16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8010b12:	f7f2 f9ed 	bl	8002ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8010b16:	bf00      	nop
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	08010b3d 	.word	0x08010b3d
 8010b20:	20003858 	.word	0x20003858
 8010b24:	200000f8 	.word	0x200000f8

08010b28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8010b2c:	4802      	ldr	r0, [pc, #8]	; (8010b38 <MX_USB_HOST_Process+0x10>)
 8010b2e:	f7fc faf1 	bl	800d114 <USBH_Process>
}
 8010b32:	bf00      	nop
 8010b34:	bd80      	pop	{r7, pc}
 8010b36:	bf00      	nop
 8010b38:	20003858 	.word	0x20003858

08010b3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	460b      	mov	r3, r1
 8010b46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010b48:	78fb      	ldrb	r3, [r7, #3]
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	2b04      	cmp	r3, #4
 8010b4e:	d819      	bhi.n	8010b84 <USBH_UserProcess+0x48>
 8010b50:	a201      	add	r2, pc, #4	; (adr r2, 8010b58 <USBH_UserProcess+0x1c>)
 8010b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b56:	bf00      	nop
 8010b58:	08010b85 	.word	0x08010b85
 8010b5c:	08010b75 	.word	0x08010b75
 8010b60:	08010b85 	.word	0x08010b85
 8010b64:	08010b7d 	.word	0x08010b7d
 8010b68:	08010b6d 	.word	0x08010b6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010b6c:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <USBH_UserProcess+0x58>)
 8010b6e:	2203      	movs	r2, #3
 8010b70:	701a      	strb	r2, [r3, #0]
  break;
 8010b72:	e008      	b.n	8010b86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010b74:	4b07      	ldr	r3, [pc, #28]	; (8010b94 <USBH_UserProcess+0x58>)
 8010b76:	2202      	movs	r2, #2
 8010b78:	701a      	strb	r2, [r3, #0]
  //set flag to be ready
  break;
 8010b7a:	e004      	b.n	8010b86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010b7c:	4b05      	ldr	r3, [pc, #20]	; (8010b94 <USBH_UserProcess+0x58>)
 8010b7e:	2201      	movs	r2, #1
 8010b80:	701a      	strb	r2, [r3, #0]
  break;
 8010b82:	e000      	b.n	8010b86 <USBH_UserProcess+0x4a>

  default:
  break;
 8010b84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010b86:	bf00      	nop
 8010b88:	370c      	adds	r7, #12
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr
 8010b92:	bf00      	nop
 8010b94:	20003c30 	.word	0x20003c30

08010b98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b08a      	sub	sp, #40	; 0x28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ba0:	f107 0314 	add.w	r3, r7, #20
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	601a      	str	r2, [r3, #0]
 8010ba8:	605a      	str	r2, [r3, #4]
 8010baa:	609a      	str	r2, [r3, #8]
 8010bac:	60da      	str	r2, [r3, #12]
 8010bae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a24      	ldr	r2, [pc, #144]	; (8010c48 <HAL_HCD_MspInit+0xb0>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d141      	bne.n	8010c3e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010bba:	2300      	movs	r3, #0
 8010bbc:	613b      	str	r3, [r7, #16]
 8010bbe:	4b23      	ldr	r3, [pc, #140]	; (8010c4c <HAL_HCD_MspInit+0xb4>)
 8010bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bc2:	4a22      	ldr	r2, [pc, #136]	; (8010c4c <HAL_HCD_MspInit+0xb4>)
 8010bc4:	f043 0302 	orr.w	r3, r3, #2
 8010bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8010bca:	4b20      	ldr	r3, [pc, #128]	; (8010c4c <HAL_HCD_MspInit+0xb4>)
 8010bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bce:	f003 0302 	and.w	r3, r3, #2
 8010bd2:	613b      	str	r3, [r7, #16]
 8010bd4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8010bd6:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8010bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010bdc:	2302      	movs	r3, #2
 8010bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010be0:	2300      	movs	r3, #0
 8010be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010be4:	2300      	movs	r3, #0
 8010be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8010be8:	230c      	movs	r3, #12
 8010bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010bec:	f107 0314 	add.w	r3, r7, #20
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	4817      	ldr	r0, [pc, #92]	; (8010c50 <HAL_HCD_MspInit+0xb8>)
 8010bf4:	f7f3 fb86 	bl	8004304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8010bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c02:	2300      	movs	r3, #0
 8010c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8010c06:	f107 0314 	add.w	r3, r7, #20
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	4810      	ldr	r0, [pc, #64]	; (8010c50 <HAL_HCD_MspInit+0xb8>)
 8010c0e:	f7f3 fb79 	bl	8004304 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010c12:	2300      	movs	r3, #0
 8010c14:	60fb      	str	r3, [r7, #12]
 8010c16:	4b0d      	ldr	r3, [pc, #52]	; (8010c4c <HAL_HCD_MspInit+0xb4>)
 8010c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c1a:	4a0c      	ldr	r2, [pc, #48]	; (8010c4c <HAL_HCD_MspInit+0xb4>)
 8010c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010c20:	6313      	str	r3, [r2, #48]	; 0x30
 8010c22:	4b0a      	ldr	r3, [pc, #40]	; (8010c4c <HAL_HCD_MspInit+0xb4>)
 8010c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c2a:	60fb      	str	r3, [r7, #12]
 8010c2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8010c2e:	2200      	movs	r2, #0
 8010c30:	2100      	movs	r1, #0
 8010c32:	204d      	movs	r0, #77	; 0x4d
 8010c34:	f7f2 ff97 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010c38:	204d      	movs	r0, #77	; 0x4d
 8010c3a:	f7f2 ffb0 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010c3e:	bf00      	nop
 8010c40:	3728      	adds	r7, #40	; 0x28
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	40040000 	.word	0x40040000
 8010c4c:	40023800 	.word	0x40023800
 8010c50:	40020400 	.word	0x40020400

08010c54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fc fe35 	bl	800d8d2 <USBH_LL_IncTimer>
}
 8010c68:	bf00      	nop
 8010c6a:	3708      	adds	r7, #8
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fc fe6d 	bl	800d95e <USBH_LL_Connect>
}
 8010c84:	bf00      	nop
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fc fe76 	bl	800d98c <USBH_LL_Disconnect>
}
 8010ca0:	bf00      	nop
 8010ca2:	3708      	adds	r7, #8
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}

08010ca8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	70fb      	strb	r3, [r7, #3]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010cb8:	bf00      	nop
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7fc fe27 	bl	800d926 <USBH_LL_PortEnabled>
}
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fc fe27 	bl	800d942 <USBH_LL_PortDisabled>
}
 8010cf4:	bf00      	nop
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d132      	bne.n	8010d74 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8010d0e:	4a1c      	ldr	r2, [pc, #112]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	4a19      	ldr	r2, [pc, #100]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d1a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010d1e:	4b18      	ldr	r3, [pc, #96]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d20:	4a18      	ldr	r2, [pc, #96]	; (8010d84 <USBH_LL_Init+0x88>)
 8010d22:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8010d24:	4b16      	ldr	r3, [pc, #88]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d26:	220c      	movs	r2, #12
 8010d28:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8010d2a:	4b15      	ldr	r3, [pc, #84]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010d30:	4b13      	ldr	r3, [pc, #76]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010d36:	4b12      	ldr	r3, [pc, #72]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d38:	2202      	movs	r2, #2
 8010d3a:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010d3c:	4b10      	ldr	r3, [pc, #64]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010d42:	4b0f      	ldr	r3, [pc, #60]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010d48:	4b0d      	ldr	r3, [pc, #52]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010d4e:	4b0c      	ldr	r3, [pc, #48]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010d54:	480a      	ldr	r0, [pc, #40]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d56:	f7f3 fccb 	bl	80046f0 <HAL_HCD_Init>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8010d60:	f7f2 f8c6 	bl	8002ef0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8010d64:	4806      	ldr	r0, [pc, #24]	; (8010d80 <USBH_LL_Init+0x84>)
 8010d66:	f7f4 f8ae 	bl	8004ec6 <HAL_HCD_GetCurrentFrame>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7fc fda0 	bl	800d8b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3708      	adds	r7, #8
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	20003c34 	.word	0x20003c34
 8010d84:	40040000 	.word	0x40040000

08010d88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d90:	2300      	movs	r3, #0
 8010d92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7f4 f81b 	bl	8004dda <HAL_HCD_Start>
 8010da4:	4603      	mov	r3, r0
 8010da6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	4618      	mov	r0, r3
 8010dac:	f000 f98c 	bl	80110c8 <USBH_Get_USB_Status>
 8010db0:	4603      	mov	r3, r0
 8010db2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010db4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}

08010dbe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010dbe:	b580      	push	{r7, lr}
 8010dc0:	b084      	sub	sp, #16
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f4 f823 	bl	8004e20 <HAL_HCD_Stop>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010dde:	7bfb      	ldrb	r3, [r7, #15]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f000 f971 	bl	80110c8 <USBH_Get_USB_Status>
 8010de6:	4603      	mov	r3, r0
 8010de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	3710      	adds	r7, #16
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd80      	pop	{r7, pc}

08010df4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010dfc:	2301      	movs	r3, #1
 8010dfe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7f4 f86b 	bl	8004ee2 <HAL_HCD_GetCurrentSpeed>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d00c      	beq.n	8010e2c <USBH_LL_GetSpeed+0x38>
 8010e12:	2b02      	cmp	r3, #2
 8010e14:	d80d      	bhi.n	8010e32 <USBH_LL_GetSpeed+0x3e>
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d002      	beq.n	8010e20 <USBH_LL_GetSpeed+0x2c>
 8010e1a:	2b01      	cmp	r3, #1
 8010e1c:	d003      	beq.n	8010e26 <USBH_LL_GetSpeed+0x32>
 8010e1e:	e008      	b.n	8010e32 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010e20:	2300      	movs	r3, #0
 8010e22:	73fb      	strb	r3, [r7, #15]
    break;
 8010e24:	e008      	b.n	8010e38 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010e26:	2301      	movs	r3, #1
 8010e28:	73fb      	strb	r3, [r7, #15]
    break;
 8010e2a:	e005      	b.n	8010e38 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e30:	e002      	b.n	8010e38 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010e32:	2301      	movs	r3, #1
 8010e34:	73fb      	strb	r3, [r7, #15]
    break;
 8010e36:	bf00      	nop
  }
  return  speed;
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3710      	adds	r7, #16
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b084      	sub	sp, #16
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f3 fffe 	bl	8004e5a <HAL_HCD_ResetPort>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010e62:	7bfb      	ldrb	r3, [r7, #15]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f000 f92f 	bl	80110c8 <USBH_Get_USB_Status>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b082      	sub	sp, #8
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	460b      	mov	r3, r1
 8010e82:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010e8a:	78fa      	ldrb	r2, [r7, #3]
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7f4 f805 	bl	8004e9e <HAL_HCD_HC_GetXferCount>
 8010e94:	4603      	mov	r3, r0
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}

08010e9e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010e9e:	b590      	push	{r4, r7, lr}
 8010ea0:	b089      	sub	sp, #36	; 0x24
 8010ea2:	af04      	add	r7, sp, #16
 8010ea4:	6078      	str	r0, [r7, #4]
 8010ea6:	4608      	mov	r0, r1
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	461a      	mov	r2, r3
 8010eac:	4603      	mov	r3, r0
 8010eae:	70fb      	strb	r3, [r7, #3]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	70bb      	strb	r3, [r7, #2]
 8010eb4:	4613      	mov	r3, r2
 8010eb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010ec6:	787c      	ldrb	r4, [r7, #1]
 8010ec8:	78ba      	ldrb	r2, [r7, #2]
 8010eca:	78f9      	ldrb	r1, [r7, #3]
 8010ecc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010ece:	9302      	str	r3, [sp, #8]
 8010ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ed4:	9301      	str	r3, [sp, #4]
 8010ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	4623      	mov	r3, r4
 8010ede:	f7f3 fc69 	bl	80047b4 <HAL_HCD_HC_Init>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010ee6:	7bfb      	ldrb	r3, [r7, #15]
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f000 f8ed 	bl	80110c8 <USBH_Get_USB_Status>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ef2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3714      	adds	r7, #20
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd90      	pop	{r4, r7, pc}

08010efc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b084      	sub	sp, #16
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
 8010f04:	460b      	mov	r3, r1
 8010f06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010f16:	78fa      	ldrb	r2, [r7, #3]
 8010f18:	4611      	mov	r1, r2
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7f3 fcd9 	bl	80048d2 <HAL_HCD_HC_Halt>
 8010f20:	4603      	mov	r3, r0
 8010f22:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010f24:	7bfb      	ldrb	r3, [r7, #15]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f000 f8ce 	bl	80110c8 <USBH_Get_USB_Status>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f30:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}

08010f3a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010f3a:	b590      	push	{r4, r7, lr}
 8010f3c:	b089      	sub	sp, #36	; 0x24
 8010f3e:	af04      	add	r7, sp, #16
 8010f40:	6078      	str	r0, [r7, #4]
 8010f42:	4608      	mov	r0, r1
 8010f44:	4611      	mov	r1, r2
 8010f46:	461a      	mov	r2, r3
 8010f48:	4603      	mov	r3, r0
 8010f4a:	70fb      	strb	r3, [r7, #3]
 8010f4c:	460b      	mov	r3, r1
 8010f4e:	70bb      	strb	r3, [r7, #2]
 8010f50:	4613      	mov	r3, r2
 8010f52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f54:	2300      	movs	r3, #0
 8010f56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010f62:	787c      	ldrb	r4, [r7, #1]
 8010f64:	78ba      	ldrb	r2, [r7, #2]
 8010f66:	78f9      	ldrb	r1, [r7, #3]
 8010f68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010f6c:	9303      	str	r3, [sp, #12]
 8010f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010f70:	9302      	str	r3, [sp, #8]
 8010f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f74:	9301      	str	r3, [sp, #4]
 8010f76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	4623      	mov	r3, r4
 8010f7e:	f7f3 fccb 	bl	8004918 <HAL_HCD_HC_SubmitRequest>
 8010f82:	4603      	mov	r3, r0
 8010f84:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010f86:	7bfb      	ldrb	r3, [r7, #15]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f000 f89d 	bl	80110c8 <USBH_Get_USB_Status>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f92:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd90      	pop	{r4, r7, pc}

08010f9c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010fae:	78fa      	ldrb	r2, [r7, #3]
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7f3 ff5f 	bl	8004e76 <HAL_HCD_HC_GetURBState>
 8010fb8:	4603      	mov	r3, r0
}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3708      	adds	r7, #8
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b082      	sub	sp, #8
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	460b      	mov	r3, r1
 8010fcc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d103      	bne.n	8010fe0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010fd8:	78fb      	ldrb	r3, [r7, #3]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f000 f8a0 	bl	8011120 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010fe0:	20c8      	movs	r0, #200	; 0xc8
 8010fe2:	f7f2 fcc1 	bl	8003968 <HAL_Delay>
  return USBH_OK;
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3708      	adds	r7, #8
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}

08010ff0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b085      	sub	sp, #20
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	460b      	mov	r3, r1
 8010ffa:	70fb      	strb	r3, [r7, #3]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011006:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011008:	78fb      	ldrb	r3, [r7, #3]
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	212c      	movs	r1, #44	; 0x2c
 801100e:	fb01 f303 	mul.w	r3, r1, r3
 8011012:	4413      	add	r3, r2
 8011014:	333b      	adds	r3, #59	; 0x3b
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d009      	beq.n	8011030 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801101c:	78fb      	ldrb	r3, [r7, #3]
 801101e:	68fa      	ldr	r2, [r7, #12]
 8011020:	212c      	movs	r1, #44	; 0x2c
 8011022:	fb01 f303 	mul.w	r3, r1, r3
 8011026:	4413      	add	r3, r2
 8011028:	3354      	adds	r3, #84	; 0x54
 801102a:	78ba      	ldrb	r2, [r7, #2]
 801102c:	701a      	strb	r2, [r3, #0]
 801102e:	e008      	b.n	8011042 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011030:	78fb      	ldrb	r3, [r7, #3]
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	212c      	movs	r1, #44	; 0x2c
 8011036:	fb01 f303 	mul.w	r3, r1, r3
 801103a:	4413      	add	r3, r2
 801103c:	3355      	adds	r3, #85	; 0x55
 801103e:	78ba      	ldrb	r2, [r7, #2]
 8011040:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011042:	2300      	movs	r3, #0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3714      	adds	r7, #20
 8011048:	46bd      	mov	sp, r7
 801104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104e:	4770      	bx	lr

08011050 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011050:	b480      	push	{r7}
 8011052:	b085      	sub	sp, #20
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	460b      	mov	r3, r1
 801105a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011066:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011068:	78fb      	ldrb	r3, [r7, #3]
 801106a:	68ba      	ldr	r2, [r7, #8]
 801106c:	212c      	movs	r1, #44	; 0x2c
 801106e:	fb01 f303 	mul.w	r3, r1, r3
 8011072:	4413      	add	r3, r2
 8011074:	333b      	adds	r3, #59	; 0x3b
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d009      	beq.n	8011090 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801107c:	78fb      	ldrb	r3, [r7, #3]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	212c      	movs	r1, #44	; 0x2c
 8011082:	fb01 f303 	mul.w	r3, r1, r3
 8011086:	4413      	add	r3, r2
 8011088:	3354      	adds	r3, #84	; 0x54
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	73fb      	strb	r3, [r7, #15]
 801108e:	e008      	b.n	80110a2 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011090:	78fb      	ldrb	r3, [r7, #3]
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	212c      	movs	r1, #44	; 0x2c
 8011096:	fb01 f303 	mul.w	r3, r1, r3
 801109a:	4413      	add	r3, r2
 801109c:	3355      	adds	r3, #85	; 0x55
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80110a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3714      	adds	r7, #20
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr

080110b0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7f2 fc55 	bl	8003968 <HAL_Delay>
}
 80110be:	bf00      	nop
 80110c0:	3708      	adds	r7, #8
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
	...

080110c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b085      	sub	sp, #20
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	4603      	mov	r3, r0
 80110d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80110d2:	2300      	movs	r3, #0
 80110d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80110d6:	79fb      	ldrb	r3, [r7, #7]
 80110d8:	2b03      	cmp	r3, #3
 80110da:	d817      	bhi.n	801110c <USBH_Get_USB_Status+0x44>
 80110dc:	a201      	add	r2, pc, #4	; (adr r2, 80110e4 <USBH_Get_USB_Status+0x1c>)
 80110de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e2:	bf00      	nop
 80110e4:	080110f5 	.word	0x080110f5
 80110e8:	080110fb 	.word	0x080110fb
 80110ec:	08011101 	.word	0x08011101
 80110f0:	08011107 	.word	0x08011107
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	73fb      	strb	r3, [r7, #15]
    break;
 80110f8:	e00b      	b.n	8011112 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80110fa:	2302      	movs	r3, #2
 80110fc:	73fb      	strb	r3, [r7, #15]
    break;
 80110fe:	e008      	b.n	8011112 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011100:	2301      	movs	r3, #1
 8011102:	73fb      	strb	r3, [r7, #15]
    break;
 8011104:	e005      	b.n	8011112 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011106:	2302      	movs	r3, #2
 8011108:	73fb      	strb	r3, [r7, #15]
    break;
 801110a:	e002      	b.n	8011112 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801110c:	2302      	movs	r3, #2
 801110e:	73fb      	strb	r3, [r7, #15]
    break;
 8011110:	bf00      	nop
  }
  return usb_status;
 8011112:	7bfb      	ldrb	r3, [r7, #15]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3714      	adds	r7, #20
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr

08011120 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	4603      	mov	r3, r0
 8011128:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801112a:	79fb      	ldrb	r3, [r7, #7]
 801112c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 801112e:	79fb      	ldrb	r3, [r7, #7]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d102      	bne.n	801113a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011134:	2301      	movs	r3, #1
 8011136:	73fb      	strb	r3, [r7, #15]
 8011138:	e001      	b.n	801113e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801113a:	2300      	movs	r3, #0
 801113c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 801113e:	7bfb      	ldrb	r3, [r7, #15]
 8011140:	461a      	mov	r2, r3
 8011142:	2110      	movs	r1, #16
 8011144:	4803      	ldr	r0, [pc, #12]	; (8011154 <MX_DriverVbusHS+0x34>)
 8011146:	f7f3 faa1 	bl	800468c <HAL_GPIO_WritePin>
}
 801114a:	bf00      	nop
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	40020800 	.word	0x40020800

08011158 <atoi>:
 8011158:	220a      	movs	r2, #10
 801115a:	2100      	movs	r1, #0
 801115c:	f000 bad6 	b.w	801170c <strtol>

08011160 <__errno>:
 8011160:	4b01      	ldr	r3, [pc, #4]	; (8011168 <__errno+0x8>)
 8011162:	6818      	ldr	r0, [r3, #0]
 8011164:	4770      	bx	lr
 8011166:	bf00      	nop
 8011168:	20000118 	.word	0x20000118

0801116c <__libc_init_array>:
 801116c:	b570      	push	{r4, r5, r6, lr}
 801116e:	4d0d      	ldr	r5, [pc, #52]	; (80111a4 <__libc_init_array+0x38>)
 8011170:	4c0d      	ldr	r4, [pc, #52]	; (80111a8 <__libc_init_array+0x3c>)
 8011172:	1b64      	subs	r4, r4, r5
 8011174:	10a4      	asrs	r4, r4, #2
 8011176:	2600      	movs	r6, #0
 8011178:	42a6      	cmp	r6, r4
 801117a:	d109      	bne.n	8011190 <__libc_init_array+0x24>
 801117c:	4d0b      	ldr	r5, [pc, #44]	; (80111ac <__libc_init_array+0x40>)
 801117e:	4c0c      	ldr	r4, [pc, #48]	; (80111b0 <__libc_init_array+0x44>)
 8011180:	f001 fb4a 	bl	8012818 <_init>
 8011184:	1b64      	subs	r4, r4, r5
 8011186:	10a4      	asrs	r4, r4, #2
 8011188:	2600      	movs	r6, #0
 801118a:	42a6      	cmp	r6, r4
 801118c:	d105      	bne.n	801119a <__libc_init_array+0x2e>
 801118e:	bd70      	pop	{r4, r5, r6, pc}
 8011190:	f855 3b04 	ldr.w	r3, [r5], #4
 8011194:	4798      	blx	r3
 8011196:	3601      	adds	r6, #1
 8011198:	e7ee      	b.n	8011178 <__libc_init_array+0xc>
 801119a:	f855 3b04 	ldr.w	r3, [r5], #4
 801119e:	4798      	blx	r3
 80111a0:	3601      	adds	r6, #1
 80111a2:	e7f2      	b.n	801118a <__libc_init_array+0x1e>
 80111a4:	08013500 	.word	0x08013500
 80111a8:	08013500 	.word	0x08013500
 80111ac:	08013500 	.word	0x08013500
 80111b0:	08013504 	.word	0x08013504

080111b4 <malloc>:
 80111b4:	4b02      	ldr	r3, [pc, #8]	; (80111c0 <malloc+0xc>)
 80111b6:	4601      	mov	r1, r0
 80111b8:	6818      	ldr	r0, [r3, #0]
 80111ba:	f000 b88d 	b.w	80112d8 <_malloc_r>
 80111be:	bf00      	nop
 80111c0:	20000118 	.word	0x20000118

080111c4 <free>:
 80111c4:	4b02      	ldr	r3, [pc, #8]	; (80111d0 <free+0xc>)
 80111c6:	4601      	mov	r1, r0
 80111c8:	6818      	ldr	r0, [r3, #0]
 80111ca:	f000 b819 	b.w	8011200 <_free_r>
 80111ce:	bf00      	nop
 80111d0:	20000118 	.word	0x20000118

080111d4 <memcpy>:
 80111d4:	440a      	add	r2, r1
 80111d6:	4291      	cmp	r1, r2
 80111d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80111dc:	d100      	bne.n	80111e0 <memcpy+0xc>
 80111de:	4770      	bx	lr
 80111e0:	b510      	push	{r4, lr}
 80111e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80111ea:	4291      	cmp	r1, r2
 80111ec:	d1f9      	bne.n	80111e2 <memcpy+0xe>
 80111ee:	bd10      	pop	{r4, pc}

080111f0 <memset>:
 80111f0:	4402      	add	r2, r0
 80111f2:	4603      	mov	r3, r0
 80111f4:	4293      	cmp	r3, r2
 80111f6:	d100      	bne.n	80111fa <memset+0xa>
 80111f8:	4770      	bx	lr
 80111fa:	f803 1b01 	strb.w	r1, [r3], #1
 80111fe:	e7f9      	b.n	80111f4 <memset+0x4>

08011200 <_free_r>:
 8011200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011202:	2900      	cmp	r1, #0
 8011204:	d044      	beq.n	8011290 <_free_r+0x90>
 8011206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801120a:	9001      	str	r0, [sp, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	f1a1 0404 	sub.w	r4, r1, #4
 8011212:	bfb8      	it	lt
 8011214:	18e4      	addlt	r4, r4, r3
 8011216:	f000 fca3 	bl	8011b60 <__malloc_lock>
 801121a:	4a1e      	ldr	r2, [pc, #120]	; (8011294 <_free_r+0x94>)
 801121c:	9801      	ldr	r0, [sp, #4]
 801121e:	6813      	ldr	r3, [r2, #0]
 8011220:	b933      	cbnz	r3, 8011230 <_free_r+0x30>
 8011222:	6063      	str	r3, [r4, #4]
 8011224:	6014      	str	r4, [r2, #0]
 8011226:	b003      	add	sp, #12
 8011228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801122c:	f000 bc9e 	b.w	8011b6c <__malloc_unlock>
 8011230:	42a3      	cmp	r3, r4
 8011232:	d908      	bls.n	8011246 <_free_r+0x46>
 8011234:	6825      	ldr	r5, [r4, #0]
 8011236:	1961      	adds	r1, r4, r5
 8011238:	428b      	cmp	r3, r1
 801123a:	bf01      	itttt	eq
 801123c:	6819      	ldreq	r1, [r3, #0]
 801123e:	685b      	ldreq	r3, [r3, #4]
 8011240:	1949      	addeq	r1, r1, r5
 8011242:	6021      	streq	r1, [r4, #0]
 8011244:	e7ed      	b.n	8011222 <_free_r+0x22>
 8011246:	461a      	mov	r2, r3
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	b10b      	cbz	r3, 8011250 <_free_r+0x50>
 801124c:	42a3      	cmp	r3, r4
 801124e:	d9fa      	bls.n	8011246 <_free_r+0x46>
 8011250:	6811      	ldr	r1, [r2, #0]
 8011252:	1855      	adds	r5, r2, r1
 8011254:	42a5      	cmp	r5, r4
 8011256:	d10b      	bne.n	8011270 <_free_r+0x70>
 8011258:	6824      	ldr	r4, [r4, #0]
 801125a:	4421      	add	r1, r4
 801125c:	1854      	adds	r4, r2, r1
 801125e:	42a3      	cmp	r3, r4
 8011260:	6011      	str	r1, [r2, #0]
 8011262:	d1e0      	bne.n	8011226 <_free_r+0x26>
 8011264:	681c      	ldr	r4, [r3, #0]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	6053      	str	r3, [r2, #4]
 801126a:	4421      	add	r1, r4
 801126c:	6011      	str	r1, [r2, #0]
 801126e:	e7da      	b.n	8011226 <_free_r+0x26>
 8011270:	d902      	bls.n	8011278 <_free_r+0x78>
 8011272:	230c      	movs	r3, #12
 8011274:	6003      	str	r3, [r0, #0]
 8011276:	e7d6      	b.n	8011226 <_free_r+0x26>
 8011278:	6825      	ldr	r5, [r4, #0]
 801127a:	1961      	adds	r1, r4, r5
 801127c:	428b      	cmp	r3, r1
 801127e:	bf04      	itt	eq
 8011280:	6819      	ldreq	r1, [r3, #0]
 8011282:	685b      	ldreq	r3, [r3, #4]
 8011284:	6063      	str	r3, [r4, #4]
 8011286:	bf04      	itt	eq
 8011288:	1949      	addeq	r1, r1, r5
 801128a:	6021      	streq	r1, [r4, #0]
 801128c:	6054      	str	r4, [r2, #4]
 801128e:	e7ca      	b.n	8011226 <_free_r+0x26>
 8011290:	b003      	add	sp, #12
 8011292:	bd30      	pop	{r4, r5, pc}
 8011294:	20003f38 	.word	0x20003f38

08011298 <sbrk_aligned>:
 8011298:	b570      	push	{r4, r5, r6, lr}
 801129a:	4e0e      	ldr	r6, [pc, #56]	; (80112d4 <sbrk_aligned+0x3c>)
 801129c:	460c      	mov	r4, r1
 801129e:	6831      	ldr	r1, [r6, #0]
 80112a0:	4605      	mov	r5, r0
 80112a2:	b911      	cbnz	r1, 80112aa <sbrk_aligned+0x12>
 80112a4:	f000 f8ba 	bl	801141c <_sbrk_r>
 80112a8:	6030      	str	r0, [r6, #0]
 80112aa:	4621      	mov	r1, r4
 80112ac:	4628      	mov	r0, r5
 80112ae:	f000 f8b5 	bl	801141c <_sbrk_r>
 80112b2:	1c43      	adds	r3, r0, #1
 80112b4:	d00a      	beq.n	80112cc <sbrk_aligned+0x34>
 80112b6:	1cc4      	adds	r4, r0, #3
 80112b8:	f024 0403 	bic.w	r4, r4, #3
 80112bc:	42a0      	cmp	r0, r4
 80112be:	d007      	beq.n	80112d0 <sbrk_aligned+0x38>
 80112c0:	1a21      	subs	r1, r4, r0
 80112c2:	4628      	mov	r0, r5
 80112c4:	f000 f8aa 	bl	801141c <_sbrk_r>
 80112c8:	3001      	adds	r0, #1
 80112ca:	d101      	bne.n	80112d0 <sbrk_aligned+0x38>
 80112cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80112d0:	4620      	mov	r0, r4
 80112d2:	bd70      	pop	{r4, r5, r6, pc}
 80112d4:	20003f3c 	.word	0x20003f3c

080112d8 <_malloc_r>:
 80112d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112dc:	1ccd      	adds	r5, r1, #3
 80112de:	f025 0503 	bic.w	r5, r5, #3
 80112e2:	3508      	adds	r5, #8
 80112e4:	2d0c      	cmp	r5, #12
 80112e6:	bf38      	it	cc
 80112e8:	250c      	movcc	r5, #12
 80112ea:	2d00      	cmp	r5, #0
 80112ec:	4607      	mov	r7, r0
 80112ee:	db01      	blt.n	80112f4 <_malloc_r+0x1c>
 80112f0:	42a9      	cmp	r1, r5
 80112f2:	d905      	bls.n	8011300 <_malloc_r+0x28>
 80112f4:	230c      	movs	r3, #12
 80112f6:	603b      	str	r3, [r7, #0]
 80112f8:	2600      	movs	r6, #0
 80112fa:	4630      	mov	r0, r6
 80112fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011300:	4e2e      	ldr	r6, [pc, #184]	; (80113bc <_malloc_r+0xe4>)
 8011302:	f000 fc2d 	bl	8011b60 <__malloc_lock>
 8011306:	6833      	ldr	r3, [r6, #0]
 8011308:	461c      	mov	r4, r3
 801130a:	bb34      	cbnz	r4, 801135a <_malloc_r+0x82>
 801130c:	4629      	mov	r1, r5
 801130e:	4638      	mov	r0, r7
 8011310:	f7ff ffc2 	bl	8011298 <sbrk_aligned>
 8011314:	1c43      	adds	r3, r0, #1
 8011316:	4604      	mov	r4, r0
 8011318:	d14d      	bne.n	80113b6 <_malloc_r+0xde>
 801131a:	6834      	ldr	r4, [r6, #0]
 801131c:	4626      	mov	r6, r4
 801131e:	2e00      	cmp	r6, #0
 8011320:	d140      	bne.n	80113a4 <_malloc_r+0xcc>
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	4631      	mov	r1, r6
 8011326:	4638      	mov	r0, r7
 8011328:	eb04 0803 	add.w	r8, r4, r3
 801132c:	f000 f876 	bl	801141c <_sbrk_r>
 8011330:	4580      	cmp	r8, r0
 8011332:	d13a      	bne.n	80113aa <_malloc_r+0xd2>
 8011334:	6821      	ldr	r1, [r4, #0]
 8011336:	3503      	adds	r5, #3
 8011338:	1a6d      	subs	r5, r5, r1
 801133a:	f025 0503 	bic.w	r5, r5, #3
 801133e:	3508      	adds	r5, #8
 8011340:	2d0c      	cmp	r5, #12
 8011342:	bf38      	it	cc
 8011344:	250c      	movcc	r5, #12
 8011346:	4629      	mov	r1, r5
 8011348:	4638      	mov	r0, r7
 801134a:	f7ff ffa5 	bl	8011298 <sbrk_aligned>
 801134e:	3001      	adds	r0, #1
 8011350:	d02b      	beq.n	80113aa <_malloc_r+0xd2>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	442b      	add	r3, r5
 8011356:	6023      	str	r3, [r4, #0]
 8011358:	e00e      	b.n	8011378 <_malloc_r+0xa0>
 801135a:	6822      	ldr	r2, [r4, #0]
 801135c:	1b52      	subs	r2, r2, r5
 801135e:	d41e      	bmi.n	801139e <_malloc_r+0xc6>
 8011360:	2a0b      	cmp	r2, #11
 8011362:	d916      	bls.n	8011392 <_malloc_r+0xba>
 8011364:	1961      	adds	r1, r4, r5
 8011366:	42a3      	cmp	r3, r4
 8011368:	6025      	str	r5, [r4, #0]
 801136a:	bf18      	it	ne
 801136c:	6059      	strne	r1, [r3, #4]
 801136e:	6863      	ldr	r3, [r4, #4]
 8011370:	bf08      	it	eq
 8011372:	6031      	streq	r1, [r6, #0]
 8011374:	5162      	str	r2, [r4, r5]
 8011376:	604b      	str	r3, [r1, #4]
 8011378:	4638      	mov	r0, r7
 801137a:	f104 060b 	add.w	r6, r4, #11
 801137e:	f000 fbf5 	bl	8011b6c <__malloc_unlock>
 8011382:	f026 0607 	bic.w	r6, r6, #7
 8011386:	1d23      	adds	r3, r4, #4
 8011388:	1af2      	subs	r2, r6, r3
 801138a:	d0b6      	beq.n	80112fa <_malloc_r+0x22>
 801138c:	1b9b      	subs	r3, r3, r6
 801138e:	50a3      	str	r3, [r4, r2]
 8011390:	e7b3      	b.n	80112fa <_malloc_r+0x22>
 8011392:	6862      	ldr	r2, [r4, #4]
 8011394:	42a3      	cmp	r3, r4
 8011396:	bf0c      	ite	eq
 8011398:	6032      	streq	r2, [r6, #0]
 801139a:	605a      	strne	r2, [r3, #4]
 801139c:	e7ec      	b.n	8011378 <_malloc_r+0xa0>
 801139e:	4623      	mov	r3, r4
 80113a0:	6864      	ldr	r4, [r4, #4]
 80113a2:	e7b2      	b.n	801130a <_malloc_r+0x32>
 80113a4:	4634      	mov	r4, r6
 80113a6:	6876      	ldr	r6, [r6, #4]
 80113a8:	e7b9      	b.n	801131e <_malloc_r+0x46>
 80113aa:	230c      	movs	r3, #12
 80113ac:	603b      	str	r3, [r7, #0]
 80113ae:	4638      	mov	r0, r7
 80113b0:	f000 fbdc 	bl	8011b6c <__malloc_unlock>
 80113b4:	e7a1      	b.n	80112fa <_malloc_r+0x22>
 80113b6:	6025      	str	r5, [r4, #0]
 80113b8:	e7de      	b.n	8011378 <_malloc_r+0xa0>
 80113ba:	bf00      	nop
 80113bc:	20003f38 	.word	0x20003f38

080113c0 <iprintf>:
 80113c0:	b40f      	push	{r0, r1, r2, r3}
 80113c2:	4b0a      	ldr	r3, [pc, #40]	; (80113ec <iprintf+0x2c>)
 80113c4:	b513      	push	{r0, r1, r4, lr}
 80113c6:	681c      	ldr	r4, [r3, #0]
 80113c8:	b124      	cbz	r4, 80113d4 <iprintf+0x14>
 80113ca:	69a3      	ldr	r3, [r4, #24]
 80113cc:	b913      	cbnz	r3, 80113d4 <iprintf+0x14>
 80113ce:	4620      	mov	r0, r4
 80113d0:	f000 fac0 	bl	8011954 <__sinit>
 80113d4:	ab05      	add	r3, sp, #20
 80113d6:	9a04      	ldr	r2, [sp, #16]
 80113d8:	68a1      	ldr	r1, [r4, #8]
 80113da:	9301      	str	r3, [sp, #4]
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fd51 	bl	8011e84 <_vfiprintf_r>
 80113e2:	b002      	add	sp, #8
 80113e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113e8:	b004      	add	sp, #16
 80113ea:	4770      	bx	lr
 80113ec:	20000118 	.word	0x20000118

080113f0 <putchar>:
 80113f0:	4b09      	ldr	r3, [pc, #36]	; (8011418 <putchar+0x28>)
 80113f2:	b513      	push	{r0, r1, r4, lr}
 80113f4:	681c      	ldr	r4, [r3, #0]
 80113f6:	4601      	mov	r1, r0
 80113f8:	b134      	cbz	r4, 8011408 <putchar+0x18>
 80113fa:	69a3      	ldr	r3, [r4, #24]
 80113fc:	b923      	cbnz	r3, 8011408 <putchar+0x18>
 80113fe:	9001      	str	r0, [sp, #4]
 8011400:	4620      	mov	r0, r4
 8011402:	f000 faa7 	bl	8011954 <__sinit>
 8011406:	9901      	ldr	r1, [sp, #4]
 8011408:	68a2      	ldr	r2, [r4, #8]
 801140a:	4620      	mov	r0, r4
 801140c:	b002      	add	sp, #8
 801140e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011412:	f000 bffb 	b.w	801240c <_putc_r>
 8011416:	bf00      	nop
 8011418:	20000118 	.word	0x20000118

0801141c <_sbrk_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4d06      	ldr	r5, [pc, #24]	; (8011438 <_sbrk_r+0x1c>)
 8011420:	2300      	movs	r3, #0
 8011422:	4604      	mov	r4, r0
 8011424:	4608      	mov	r0, r1
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	f7f2 f90e 	bl	8003648 <_sbrk>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_sbrk_r+0x1a>
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	b103      	cbz	r3, 8011436 <_sbrk_r+0x1a>
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	20003f44 	.word	0x20003f44

0801143c <setvbuf>:
 801143c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011440:	461d      	mov	r5, r3
 8011442:	4b5d      	ldr	r3, [pc, #372]	; (80115b8 <setvbuf+0x17c>)
 8011444:	681f      	ldr	r7, [r3, #0]
 8011446:	4604      	mov	r4, r0
 8011448:	460e      	mov	r6, r1
 801144a:	4690      	mov	r8, r2
 801144c:	b127      	cbz	r7, 8011458 <setvbuf+0x1c>
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	b913      	cbnz	r3, 8011458 <setvbuf+0x1c>
 8011452:	4638      	mov	r0, r7
 8011454:	f000 fa7e 	bl	8011954 <__sinit>
 8011458:	4b58      	ldr	r3, [pc, #352]	; (80115bc <setvbuf+0x180>)
 801145a:	429c      	cmp	r4, r3
 801145c:	d167      	bne.n	801152e <setvbuf+0xf2>
 801145e:	687c      	ldr	r4, [r7, #4]
 8011460:	f1b8 0f02 	cmp.w	r8, #2
 8011464:	d006      	beq.n	8011474 <setvbuf+0x38>
 8011466:	f1b8 0f01 	cmp.w	r8, #1
 801146a:	f200 809f 	bhi.w	80115ac <setvbuf+0x170>
 801146e:	2d00      	cmp	r5, #0
 8011470:	f2c0 809c 	blt.w	80115ac <setvbuf+0x170>
 8011474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011476:	07db      	lsls	r3, r3, #31
 8011478:	d405      	bmi.n	8011486 <setvbuf+0x4a>
 801147a:	89a3      	ldrh	r3, [r4, #12]
 801147c:	0598      	lsls	r0, r3, #22
 801147e:	d402      	bmi.n	8011486 <setvbuf+0x4a>
 8011480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011482:	f000 fb05 	bl	8011a90 <__retarget_lock_acquire_recursive>
 8011486:	4621      	mov	r1, r4
 8011488:	4638      	mov	r0, r7
 801148a:	f000 f9cf 	bl	801182c <_fflush_r>
 801148e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011490:	b141      	cbz	r1, 80114a4 <setvbuf+0x68>
 8011492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011496:	4299      	cmp	r1, r3
 8011498:	d002      	beq.n	80114a0 <setvbuf+0x64>
 801149a:	4638      	mov	r0, r7
 801149c:	f7ff feb0 	bl	8011200 <_free_r>
 80114a0:	2300      	movs	r3, #0
 80114a2:	6363      	str	r3, [r4, #52]	; 0x34
 80114a4:	2300      	movs	r3, #0
 80114a6:	61a3      	str	r3, [r4, #24]
 80114a8:	6063      	str	r3, [r4, #4]
 80114aa:	89a3      	ldrh	r3, [r4, #12]
 80114ac:	0619      	lsls	r1, r3, #24
 80114ae:	d503      	bpl.n	80114b8 <setvbuf+0x7c>
 80114b0:	6921      	ldr	r1, [r4, #16]
 80114b2:	4638      	mov	r0, r7
 80114b4:	f7ff fea4 	bl	8011200 <_free_r>
 80114b8:	89a3      	ldrh	r3, [r4, #12]
 80114ba:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80114be:	f023 0303 	bic.w	r3, r3, #3
 80114c2:	f1b8 0f02 	cmp.w	r8, #2
 80114c6:	81a3      	strh	r3, [r4, #12]
 80114c8:	d06c      	beq.n	80115a4 <setvbuf+0x168>
 80114ca:	ab01      	add	r3, sp, #4
 80114cc:	466a      	mov	r2, sp
 80114ce:	4621      	mov	r1, r4
 80114d0:	4638      	mov	r0, r7
 80114d2:	f000 fadf 	bl	8011a94 <__swhatbuf_r>
 80114d6:	89a3      	ldrh	r3, [r4, #12]
 80114d8:	4318      	orrs	r0, r3
 80114da:	81a0      	strh	r0, [r4, #12]
 80114dc:	2d00      	cmp	r5, #0
 80114de:	d130      	bne.n	8011542 <setvbuf+0x106>
 80114e0:	9d00      	ldr	r5, [sp, #0]
 80114e2:	4628      	mov	r0, r5
 80114e4:	f7ff fe66 	bl	80111b4 <malloc>
 80114e8:	4606      	mov	r6, r0
 80114ea:	2800      	cmp	r0, #0
 80114ec:	d155      	bne.n	801159a <setvbuf+0x15e>
 80114ee:	f8dd 9000 	ldr.w	r9, [sp]
 80114f2:	45a9      	cmp	r9, r5
 80114f4:	d14a      	bne.n	801158c <setvbuf+0x150>
 80114f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80114fa:	2200      	movs	r2, #0
 80114fc:	60a2      	str	r2, [r4, #8]
 80114fe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8011502:	6022      	str	r2, [r4, #0]
 8011504:	6122      	str	r2, [r4, #16]
 8011506:	2201      	movs	r2, #1
 8011508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801150c:	6162      	str	r2, [r4, #20]
 801150e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011510:	f043 0302 	orr.w	r3, r3, #2
 8011514:	07d2      	lsls	r2, r2, #31
 8011516:	81a3      	strh	r3, [r4, #12]
 8011518:	d405      	bmi.n	8011526 <setvbuf+0xea>
 801151a:	f413 7f00 	tst.w	r3, #512	; 0x200
 801151e:	d102      	bne.n	8011526 <setvbuf+0xea>
 8011520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011522:	f000 fab6 	bl	8011a92 <__retarget_lock_release_recursive>
 8011526:	4628      	mov	r0, r5
 8011528:	b003      	add	sp, #12
 801152a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801152e:	4b24      	ldr	r3, [pc, #144]	; (80115c0 <setvbuf+0x184>)
 8011530:	429c      	cmp	r4, r3
 8011532:	d101      	bne.n	8011538 <setvbuf+0xfc>
 8011534:	68bc      	ldr	r4, [r7, #8]
 8011536:	e793      	b.n	8011460 <setvbuf+0x24>
 8011538:	4b22      	ldr	r3, [pc, #136]	; (80115c4 <setvbuf+0x188>)
 801153a:	429c      	cmp	r4, r3
 801153c:	bf08      	it	eq
 801153e:	68fc      	ldreq	r4, [r7, #12]
 8011540:	e78e      	b.n	8011460 <setvbuf+0x24>
 8011542:	2e00      	cmp	r6, #0
 8011544:	d0cd      	beq.n	80114e2 <setvbuf+0xa6>
 8011546:	69bb      	ldr	r3, [r7, #24]
 8011548:	b913      	cbnz	r3, 8011550 <setvbuf+0x114>
 801154a:	4638      	mov	r0, r7
 801154c:	f000 fa02 	bl	8011954 <__sinit>
 8011550:	f1b8 0f01 	cmp.w	r8, #1
 8011554:	bf08      	it	eq
 8011556:	89a3      	ldrheq	r3, [r4, #12]
 8011558:	6026      	str	r6, [r4, #0]
 801155a:	bf04      	itt	eq
 801155c:	f043 0301 	orreq.w	r3, r3, #1
 8011560:	81a3      	strheq	r3, [r4, #12]
 8011562:	89a2      	ldrh	r2, [r4, #12]
 8011564:	f012 0308 	ands.w	r3, r2, #8
 8011568:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801156c:	d01c      	beq.n	80115a8 <setvbuf+0x16c>
 801156e:	07d3      	lsls	r3, r2, #31
 8011570:	bf41      	itttt	mi
 8011572:	2300      	movmi	r3, #0
 8011574:	426d      	negmi	r5, r5
 8011576:	60a3      	strmi	r3, [r4, #8]
 8011578:	61a5      	strmi	r5, [r4, #24]
 801157a:	bf58      	it	pl
 801157c:	60a5      	strpl	r5, [r4, #8]
 801157e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8011580:	f015 0501 	ands.w	r5, r5, #1
 8011584:	d115      	bne.n	80115b2 <setvbuf+0x176>
 8011586:	f412 7f00 	tst.w	r2, #512	; 0x200
 801158a:	e7c8      	b.n	801151e <setvbuf+0xe2>
 801158c:	4648      	mov	r0, r9
 801158e:	f7ff fe11 	bl	80111b4 <malloc>
 8011592:	4606      	mov	r6, r0
 8011594:	2800      	cmp	r0, #0
 8011596:	d0ae      	beq.n	80114f6 <setvbuf+0xba>
 8011598:	464d      	mov	r5, r9
 801159a:	89a3      	ldrh	r3, [r4, #12]
 801159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115a0:	81a3      	strh	r3, [r4, #12]
 80115a2:	e7d0      	b.n	8011546 <setvbuf+0x10a>
 80115a4:	2500      	movs	r5, #0
 80115a6:	e7a8      	b.n	80114fa <setvbuf+0xbe>
 80115a8:	60a3      	str	r3, [r4, #8]
 80115aa:	e7e8      	b.n	801157e <setvbuf+0x142>
 80115ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80115b0:	e7b9      	b.n	8011526 <setvbuf+0xea>
 80115b2:	2500      	movs	r5, #0
 80115b4:	e7b7      	b.n	8011526 <setvbuf+0xea>
 80115b6:	bf00      	nop
 80115b8:	20000118 	.word	0x20000118
 80115bc:	08013484 	.word	0x08013484
 80115c0:	080134a4 	.word	0x080134a4
 80115c4:	08013464 	.word	0x08013464

080115c8 <siprintf>:
 80115c8:	b40e      	push	{r1, r2, r3}
 80115ca:	b500      	push	{lr}
 80115cc:	b09c      	sub	sp, #112	; 0x70
 80115ce:	ab1d      	add	r3, sp, #116	; 0x74
 80115d0:	9002      	str	r0, [sp, #8]
 80115d2:	9006      	str	r0, [sp, #24]
 80115d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115d8:	4809      	ldr	r0, [pc, #36]	; (8011600 <siprintf+0x38>)
 80115da:	9107      	str	r1, [sp, #28]
 80115dc:	9104      	str	r1, [sp, #16]
 80115de:	4909      	ldr	r1, [pc, #36]	; (8011604 <siprintf+0x3c>)
 80115e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80115e4:	9105      	str	r1, [sp, #20]
 80115e6:	6800      	ldr	r0, [r0, #0]
 80115e8:	9301      	str	r3, [sp, #4]
 80115ea:	a902      	add	r1, sp, #8
 80115ec:	f000 fb20 	bl	8011c30 <_svfiprintf_r>
 80115f0:	9b02      	ldr	r3, [sp, #8]
 80115f2:	2200      	movs	r2, #0
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	b01c      	add	sp, #112	; 0x70
 80115f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115fc:	b003      	add	sp, #12
 80115fe:	4770      	bx	lr
 8011600:	20000118 	.word	0x20000118
 8011604:	ffff0208 	.word	0xffff0208

08011608 <_strtol_l.constprop.0>:
 8011608:	2b01      	cmp	r3, #1
 801160a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801160e:	d001      	beq.n	8011614 <_strtol_l.constprop.0+0xc>
 8011610:	2b24      	cmp	r3, #36	; 0x24
 8011612:	d906      	bls.n	8011622 <_strtol_l.constprop.0+0x1a>
 8011614:	f7ff fda4 	bl	8011160 <__errno>
 8011618:	2316      	movs	r3, #22
 801161a:	6003      	str	r3, [r0, #0]
 801161c:	2000      	movs	r0, #0
 801161e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011622:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011708 <_strtol_l.constprop.0+0x100>
 8011626:	460d      	mov	r5, r1
 8011628:	462e      	mov	r6, r5
 801162a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801162e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011632:	f017 0708 	ands.w	r7, r7, #8
 8011636:	d1f7      	bne.n	8011628 <_strtol_l.constprop.0+0x20>
 8011638:	2c2d      	cmp	r4, #45	; 0x2d
 801163a:	d132      	bne.n	80116a2 <_strtol_l.constprop.0+0x9a>
 801163c:	782c      	ldrb	r4, [r5, #0]
 801163e:	2701      	movs	r7, #1
 8011640:	1cb5      	adds	r5, r6, #2
 8011642:	2b00      	cmp	r3, #0
 8011644:	d05b      	beq.n	80116fe <_strtol_l.constprop.0+0xf6>
 8011646:	2b10      	cmp	r3, #16
 8011648:	d109      	bne.n	801165e <_strtol_l.constprop.0+0x56>
 801164a:	2c30      	cmp	r4, #48	; 0x30
 801164c:	d107      	bne.n	801165e <_strtol_l.constprop.0+0x56>
 801164e:	782c      	ldrb	r4, [r5, #0]
 8011650:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011654:	2c58      	cmp	r4, #88	; 0x58
 8011656:	d14d      	bne.n	80116f4 <_strtol_l.constprop.0+0xec>
 8011658:	786c      	ldrb	r4, [r5, #1]
 801165a:	2310      	movs	r3, #16
 801165c:	3502      	adds	r5, #2
 801165e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011662:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011666:	f04f 0c00 	mov.w	ip, #0
 801166a:	fbb8 f9f3 	udiv	r9, r8, r3
 801166e:	4666      	mov	r6, ip
 8011670:	fb03 8a19 	mls	sl, r3, r9, r8
 8011674:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011678:	f1be 0f09 	cmp.w	lr, #9
 801167c:	d816      	bhi.n	80116ac <_strtol_l.constprop.0+0xa4>
 801167e:	4674      	mov	r4, lr
 8011680:	42a3      	cmp	r3, r4
 8011682:	dd24      	ble.n	80116ce <_strtol_l.constprop.0+0xc6>
 8011684:	f1bc 0f00 	cmp.w	ip, #0
 8011688:	db1e      	blt.n	80116c8 <_strtol_l.constprop.0+0xc0>
 801168a:	45b1      	cmp	r9, r6
 801168c:	d31c      	bcc.n	80116c8 <_strtol_l.constprop.0+0xc0>
 801168e:	d101      	bne.n	8011694 <_strtol_l.constprop.0+0x8c>
 8011690:	45a2      	cmp	sl, r4
 8011692:	db19      	blt.n	80116c8 <_strtol_l.constprop.0+0xc0>
 8011694:	fb06 4603 	mla	r6, r6, r3, r4
 8011698:	f04f 0c01 	mov.w	ip, #1
 801169c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80116a0:	e7e8      	b.n	8011674 <_strtol_l.constprop.0+0x6c>
 80116a2:	2c2b      	cmp	r4, #43	; 0x2b
 80116a4:	bf04      	itt	eq
 80116a6:	782c      	ldrbeq	r4, [r5, #0]
 80116a8:	1cb5      	addeq	r5, r6, #2
 80116aa:	e7ca      	b.n	8011642 <_strtol_l.constprop.0+0x3a>
 80116ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80116b0:	f1be 0f19 	cmp.w	lr, #25
 80116b4:	d801      	bhi.n	80116ba <_strtol_l.constprop.0+0xb2>
 80116b6:	3c37      	subs	r4, #55	; 0x37
 80116b8:	e7e2      	b.n	8011680 <_strtol_l.constprop.0+0x78>
 80116ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80116be:	f1be 0f19 	cmp.w	lr, #25
 80116c2:	d804      	bhi.n	80116ce <_strtol_l.constprop.0+0xc6>
 80116c4:	3c57      	subs	r4, #87	; 0x57
 80116c6:	e7db      	b.n	8011680 <_strtol_l.constprop.0+0x78>
 80116c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80116cc:	e7e6      	b.n	801169c <_strtol_l.constprop.0+0x94>
 80116ce:	f1bc 0f00 	cmp.w	ip, #0
 80116d2:	da05      	bge.n	80116e0 <_strtol_l.constprop.0+0xd8>
 80116d4:	2322      	movs	r3, #34	; 0x22
 80116d6:	6003      	str	r3, [r0, #0]
 80116d8:	4646      	mov	r6, r8
 80116da:	b942      	cbnz	r2, 80116ee <_strtol_l.constprop.0+0xe6>
 80116dc:	4630      	mov	r0, r6
 80116de:	e79e      	b.n	801161e <_strtol_l.constprop.0+0x16>
 80116e0:	b107      	cbz	r7, 80116e4 <_strtol_l.constprop.0+0xdc>
 80116e2:	4276      	negs	r6, r6
 80116e4:	2a00      	cmp	r2, #0
 80116e6:	d0f9      	beq.n	80116dc <_strtol_l.constprop.0+0xd4>
 80116e8:	f1bc 0f00 	cmp.w	ip, #0
 80116ec:	d000      	beq.n	80116f0 <_strtol_l.constprop.0+0xe8>
 80116ee:	1e69      	subs	r1, r5, #1
 80116f0:	6011      	str	r1, [r2, #0]
 80116f2:	e7f3      	b.n	80116dc <_strtol_l.constprop.0+0xd4>
 80116f4:	2430      	movs	r4, #48	; 0x30
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1b1      	bne.n	801165e <_strtol_l.constprop.0+0x56>
 80116fa:	2308      	movs	r3, #8
 80116fc:	e7af      	b.n	801165e <_strtol_l.constprop.0+0x56>
 80116fe:	2c30      	cmp	r4, #48	; 0x30
 8011700:	d0a5      	beq.n	801164e <_strtol_l.constprop.0+0x46>
 8011702:	230a      	movs	r3, #10
 8011704:	e7ab      	b.n	801165e <_strtol_l.constprop.0+0x56>
 8011706:	bf00      	nop
 8011708:	08013361 	.word	0x08013361

0801170c <strtol>:
 801170c:	4613      	mov	r3, r2
 801170e:	460a      	mov	r2, r1
 8011710:	4601      	mov	r1, r0
 8011712:	4802      	ldr	r0, [pc, #8]	; (801171c <strtol+0x10>)
 8011714:	6800      	ldr	r0, [r0, #0]
 8011716:	f7ff bf77 	b.w	8011608 <_strtol_l.constprop.0>
 801171a:	bf00      	nop
 801171c:	20000118 	.word	0x20000118

08011720 <__sflush_r>:
 8011720:	898a      	ldrh	r2, [r1, #12]
 8011722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011726:	4605      	mov	r5, r0
 8011728:	0710      	lsls	r0, r2, #28
 801172a:	460c      	mov	r4, r1
 801172c:	d458      	bmi.n	80117e0 <__sflush_r+0xc0>
 801172e:	684b      	ldr	r3, [r1, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	dc05      	bgt.n	8011740 <__sflush_r+0x20>
 8011734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011736:	2b00      	cmp	r3, #0
 8011738:	dc02      	bgt.n	8011740 <__sflush_r+0x20>
 801173a:	2000      	movs	r0, #0
 801173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011742:	2e00      	cmp	r6, #0
 8011744:	d0f9      	beq.n	801173a <__sflush_r+0x1a>
 8011746:	2300      	movs	r3, #0
 8011748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801174c:	682f      	ldr	r7, [r5, #0]
 801174e:	602b      	str	r3, [r5, #0]
 8011750:	d032      	beq.n	80117b8 <__sflush_r+0x98>
 8011752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011754:	89a3      	ldrh	r3, [r4, #12]
 8011756:	075a      	lsls	r2, r3, #29
 8011758:	d505      	bpl.n	8011766 <__sflush_r+0x46>
 801175a:	6863      	ldr	r3, [r4, #4]
 801175c:	1ac0      	subs	r0, r0, r3
 801175e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011760:	b10b      	cbz	r3, 8011766 <__sflush_r+0x46>
 8011762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011764:	1ac0      	subs	r0, r0, r3
 8011766:	2300      	movs	r3, #0
 8011768:	4602      	mov	r2, r0
 801176a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801176c:	6a21      	ldr	r1, [r4, #32]
 801176e:	4628      	mov	r0, r5
 8011770:	47b0      	blx	r6
 8011772:	1c43      	adds	r3, r0, #1
 8011774:	89a3      	ldrh	r3, [r4, #12]
 8011776:	d106      	bne.n	8011786 <__sflush_r+0x66>
 8011778:	6829      	ldr	r1, [r5, #0]
 801177a:	291d      	cmp	r1, #29
 801177c:	d82c      	bhi.n	80117d8 <__sflush_r+0xb8>
 801177e:	4a2a      	ldr	r2, [pc, #168]	; (8011828 <__sflush_r+0x108>)
 8011780:	40ca      	lsrs	r2, r1
 8011782:	07d6      	lsls	r6, r2, #31
 8011784:	d528      	bpl.n	80117d8 <__sflush_r+0xb8>
 8011786:	2200      	movs	r2, #0
 8011788:	6062      	str	r2, [r4, #4]
 801178a:	04d9      	lsls	r1, r3, #19
 801178c:	6922      	ldr	r2, [r4, #16]
 801178e:	6022      	str	r2, [r4, #0]
 8011790:	d504      	bpl.n	801179c <__sflush_r+0x7c>
 8011792:	1c42      	adds	r2, r0, #1
 8011794:	d101      	bne.n	801179a <__sflush_r+0x7a>
 8011796:	682b      	ldr	r3, [r5, #0]
 8011798:	b903      	cbnz	r3, 801179c <__sflush_r+0x7c>
 801179a:	6560      	str	r0, [r4, #84]	; 0x54
 801179c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801179e:	602f      	str	r7, [r5, #0]
 80117a0:	2900      	cmp	r1, #0
 80117a2:	d0ca      	beq.n	801173a <__sflush_r+0x1a>
 80117a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80117a8:	4299      	cmp	r1, r3
 80117aa:	d002      	beq.n	80117b2 <__sflush_r+0x92>
 80117ac:	4628      	mov	r0, r5
 80117ae:	f7ff fd27 	bl	8011200 <_free_r>
 80117b2:	2000      	movs	r0, #0
 80117b4:	6360      	str	r0, [r4, #52]	; 0x34
 80117b6:	e7c1      	b.n	801173c <__sflush_r+0x1c>
 80117b8:	6a21      	ldr	r1, [r4, #32]
 80117ba:	2301      	movs	r3, #1
 80117bc:	4628      	mov	r0, r5
 80117be:	47b0      	blx	r6
 80117c0:	1c41      	adds	r1, r0, #1
 80117c2:	d1c7      	bne.n	8011754 <__sflush_r+0x34>
 80117c4:	682b      	ldr	r3, [r5, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d0c4      	beq.n	8011754 <__sflush_r+0x34>
 80117ca:	2b1d      	cmp	r3, #29
 80117cc:	d001      	beq.n	80117d2 <__sflush_r+0xb2>
 80117ce:	2b16      	cmp	r3, #22
 80117d0:	d101      	bne.n	80117d6 <__sflush_r+0xb6>
 80117d2:	602f      	str	r7, [r5, #0]
 80117d4:	e7b1      	b.n	801173a <__sflush_r+0x1a>
 80117d6:	89a3      	ldrh	r3, [r4, #12]
 80117d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80117dc:	81a3      	strh	r3, [r4, #12]
 80117de:	e7ad      	b.n	801173c <__sflush_r+0x1c>
 80117e0:	690f      	ldr	r7, [r1, #16]
 80117e2:	2f00      	cmp	r7, #0
 80117e4:	d0a9      	beq.n	801173a <__sflush_r+0x1a>
 80117e6:	0793      	lsls	r3, r2, #30
 80117e8:	680e      	ldr	r6, [r1, #0]
 80117ea:	bf08      	it	eq
 80117ec:	694b      	ldreq	r3, [r1, #20]
 80117ee:	600f      	str	r7, [r1, #0]
 80117f0:	bf18      	it	ne
 80117f2:	2300      	movne	r3, #0
 80117f4:	eba6 0807 	sub.w	r8, r6, r7
 80117f8:	608b      	str	r3, [r1, #8]
 80117fa:	f1b8 0f00 	cmp.w	r8, #0
 80117fe:	dd9c      	ble.n	801173a <__sflush_r+0x1a>
 8011800:	6a21      	ldr	r1, [r4, #32]
 8011802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011804:	4643      	mov	r3, r8
 8011806:	463a      	mov	r2, r7
 8011808:	4628      	mov	r0, r5
 801180a:	47b0      	blx	r6
 801180c:	2800      	cmp	r0, #0
 801180e:	dc06      	bgt.n	801181e <__sflush_r+0xfe>
 8011810:	89a3      	ldrh	r3, [r4, #12]
 8011812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011816:	81a3      	strh	r3, [r4, #12]
 8011818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801181c:	e78e      	b.n	801173c <__sflush_r+0x1c>
 801181e:	4407      	add	r7, r0
 8011820:	eba8 0800 	sub.w	r8, r8, r0
 8011824:	e7e9      	b.n	80117fa <__sflush_r+0xda>
 8011826:	bf00      	nop
 8011828:	20400001 	.word	0x20400001

0801182c <_fflush_r>:
 801182c:	b538      	push	{r3, r4, r5, lr}
 801182e:	690b      	ldr	r3, [r1, #16]
 8011830:	4605      	mov	r5, r0
 8011832:	460c      	mov	r4, r1
 8011834:	b913      	cbnz	r3, 801183c <_fflush_r+0x10>
 8011836:	2500      	movs	r5, #0
 8011838:	4628      	mov	r0, r5
 801183a:	bd38      	pop	{r3, r4, r5, pc}
 801183c:	b118      	cbz	r0, 8011846 <_fflush_r+0x1a>
 801183e:	6983      	ldr	r3, [r0, #24]
 8011840:	b90b      	cbnz	r3, 8011846 <_fflush_r+0x1a>
 8011842:	f000 f887 	bl	8011954 <__sinit>
 8011846:	4b14      	ldr	r3, [pc, #80]	; (8011898 <_fflush_r+0x6c>)
 8011848:	429c      	cmp	r4, r3
 801184a:	d11b      	bne.n	8011884 <_fflush_r+0x58>
 801184c:	686c      	ldr	r4, [r5, #4]
 801184e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d0ef      	beq.n	8011836 <_fflush_r+0xa>
 8011856:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011858:	07d0      	lsls	r0, r2, #31
 801185a:	d404      	bmi.n	8011866 <_fflush_r+0x3a>
 801185c:	0599      	lsls	r1, r3, #22
 801185e:	d402      	bmi.n	8011866 <_fflush_r+0x3a>
 8011860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011862:	f000 f915 	bl	8011a90 <__retarget_lock_acquire_recursive>
 8011866:	4628      	mov	r0, r5
 8011868:	4621      	mov	r1, r4
 801186a:	f7ff ff59 	bl	8011720 <__sflush_r>
 801186e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011870:	07da      	lsls	r2, r3, #31
 8011872:	4605      	mov	r5, r0
 8011874:	d4e0      	bmi.n	8011838 <_fflush_r+0xc>
 8011876:	89a3      	ldrh	r3, [r4, #12]
 8011878:	059b      	lsls	r3, r3, #22
 801187a:	d4dd      	bmi.n	8011838 <_fflush_r+0xc>
 801187c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801187e:	f000 f908 	bl	8011a92 <__retarget_lock_release_recursive>
 8011882:	e7d9      	b.n	8011838 <_fflush_r+0xc>
 8011884:	4b05      	ldr	r3, [pc, #20]	; (801189c <_fflush_r+0x70>)
 8011886:	429c      	cmp	r4, r3
 8011888:	d101      	bne.n	801188e <_fflush_r+0x62>
 801188a:	68ac      	ldr	r4, [r5, #8]
 801188c:	e7df      	b.n	801184e <_fflush_r+0x22>
 801188e:	4b04      	ldr	r3, [pc, #16]	; (80118a0 <_fflush_r+0x74>)
 8011890:	429c      	cmp	r4, r3
 8011892:	bf08      	it	eq
 8011894:	68ec      	ldreq	r4, [r5, #12]
 8011896:	e7da      	b.n	801184e <_fflush_r+0x22>
 8011898:	08013484 	.word	0x08013484
 801189c:	080134a4 	.word	0x080134a4
 80118a0:	08013464 	.word	0x08013464

080118a4 <std>:
 80118a4:	2300      	movs	r3, #0
 80118a6:	b510      	push	{r4, lr}
 80118a8:	4604      	mov	r4, r0
 80118aa:	e9c0 3300 	strd	r3, r3, [r0]
 80118ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118b2:	6083      	str	r3, [r0, #8]
 80118b4:	8181      	strh	r1, [r0, #12]
 80118b6:	6643      	str	r3, [r0, #100]	; 0x64
 80118b8:	81c2      	strh	r2, [r0, #14]
 80118ba:	6183      	str	r3, [r0, #24]
 80118bc:	4619      	mov	r1, r3
 80118be:	2208      	movs	r2, #8
 80118c0:	305c      	adds	r0, #92	; 0x5c
 80118c2:	f7ff fc95 	bl	80111f0 <memset>
 80118c6:	4b05      	ldr	r3, [pc, #20]	; (80118dc <std+0x38>)
 80118c8:	6263      	str	r3, [r4, #36]	; 0x24
 80118ca:	4b05      	ldr	r3, [pc, #20]	; (80118e0 <std+0x3c>)
 80118cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80118ce:	4b05      	ldr	r3, [pc, #20]	; (80118e4 <std+0x40>)
 80118d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80118d2:	4b05      	ldr	r3, [pc, #20]	; (80118e8 <std+0x44>)
 80118d4:	6224      	str	r4, [r4, #32]
 80118d6:	6323      	str	r3, [r4, #48]	; 0x30
 80118d8:	bd10      	pop	{r4, pc}
 80118da:	bf00      	nop
 80118dc:	0801249d 	.word	0x0801249d
 80118e0:	080124bf 	.word	0x080124bf
 80118e4:	080124f7 	.word	0x080124f7
 80118e8:	0801251b 	.word	0x0801251b

080118ec <_cleanup_r>:
 80118ec:	4901      	ldr	r1, [pc, #4]	; (80118f4 <_cleanup_r+0x8>)
 80118ee:	f000 b8af 	b.w	8011a50 <_fwalk_reent>
 80118f2:	bf00      	nop
 80118f4:	0801182d 	.word	0x0801182d

080118f8 <__sfmoreglue>:
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	2268      	movs	r2, #104	; 0x68
 80118fc:	1e4d      	subs	r5, r1, #1
 80118fe:	4355      	muls	r5, r2
 8011900:	460e      	mov	r6, r1
 8011902:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011906:	f7ff fce7 	bl	80112d8 <_malloc_r>
 801190a:	4604      	mov	r4, r0
 801190c:	b140      	cbz	r0, 8011920 <__sfmoreglue+0x28>
 801190e:	2100      	movs	r1, #0
 8011910:	e9c0 1600 	strd	r1, r6, [r0]
 8011914:	300c      	adds	r0, #12
 8011916:	60a0      	str	r0, [r4, #8]
 8011918:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801191c:	f7ff fc68 	bl	80111f0 <memset>
 8011920:	4620      	mov	r0, r4
 8011922:	bd70      	pop	{r4, r5, r6, pc}

08011924 <__sfp_lock_acquire>:
 8011924:	4801      	ldr	r0, [pc, #4]	; (801192c <__sfp_lock_acquire+0x8>)
 8011926:	f000 b8b3 	b.w	8011a90 <__retarget_lock_acquire_recursive>
 801192a:	bf00      	nop
 801192c:	20003f41 	.word	0x20003f41

08011930 <__sfp_lock_release>:
 8011930:	4801      	ldr	r0, [pc, #4]	; (8011938 <__sfp_lock_release+0x8>)
 8011932:	f000 b8ae 	b.w	8011a92 <__retarget_lock_release_recursive>
 8011936:	bf00      	nop
 8011938:	20003f41 	.word	0x20003f41

0801193c <__sinit_lock_acquire>:
 801193c:	4801      	ldr	r0, [pc, #4]	; (8011944 <__sinit_lock_acquire+0x8>)
 801193e:	f000 b8a7 	b.w	8011a90 <__retarget_lock_acquire_recursive>
 8011942:	bf00      	nop
 8011944:	20003f42 	.word	0x20003f42

08011948 <__sinit_lock_release>:
 8011948:	4801      	ldr	r0, [pc, #4]	; (8011950 <__sinit_lock_release+0x8>)
 801194a:	f000 b8a2 	b.w	8011a92 <__retarget_lock_release_recursive>
 801194e:	bf00      	nop
 8011950:	20003f42 	.word	0x20003f42

08011954 <__sinit>:
 8011954:	b510      	push	{r4, lr}
 8011956:	4604      	mov	r4, r0
 8011958:	f7ff fff0 	bl	801193c <__sinit_lock_acquire>
 801195c:	69a3      	ldr	r3, [r4, #24]
 801195e:	b11b      	cbz	r3, 8011968 <__sinit+0x14>
 8011960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011964:	f7ff bff0 	b.w	8011948 <__sinit_lock_release>
 8011968:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801196c:	6523      	str	r3, [r4, #80]	; 0x50
 801196e:	4b13      	ldr	r3, [pc, #76]	; (80119bc <__sinit+0x68>)
 8011970:	4a13      	ldr	r2, [pc, #76]	; (80119c0 <__sinit+0x6c>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	62a2      	str	r2, [r4, #40]	; 0x28
 8011976:	42a3      	cmp	r3, r4
 8011978:	bf04      	itt	eq
 801197a:	2301      	moveq	r3, #1
 801197c:	61a3      	streq	r3, [r4, #24]
 801197e:	4620      	mov	r0, r4
 8011980:	f000 f820 	bl	80119c4 <__sfp>
 8011984:	6060      	str	r0, [r4, #4]
 8011986:	4620      	mov	r0, r4
 8011988:	f000 f81c 	bl	80119c4 <__sfp>
 801198c:	60a0      	str	r0, [r4, #8]
 801198e:	4620      	mov	r0, r4
 8011990:	f000 f818 	bl	80119c4 <__sfp>
 8011994:	2200      	movs	r2, #0
 8011996:	60e0      	str	r0, [r4, #12]
 8011998:	2104      	movs	r1, #4
 801199a:	6860      	ldr	r0, [r4, #4]
 801199c:	f7ff ff82 	bl	80118a4 <std>
 80119a0:	68a0      	ldr	r0, [r4, #8]
 80119a2:	2201      	movs	r2, #1
 80119a4:	2109      	movs	r1, #9
 80119a6:	f7ff ff7d 	bl	80118a4 <std>
 80119aa:	68e0      	ldr	r0, [r4, #12]
 80119ac:	2202      	movs	r2, #2
 80119ae:	2112      	movs	r1, #18
 80119b0:	f7ff ff78 	bl	80118a4 <std>
 80119b4:	2301      	movs	r3, #1
 80119b6:	61a3      	str	r3, [r4, #24]
 80119b8:	e7d2      	b.n	8011960 <__sinit+0xc>
 80119ba:	bf00      	nop
 80119bc:	0801335c 	.word	0x0801335c
 80119c0:	080118ed 	.word	0x080118ed

080119c4 <__sfp>:
 80119c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119c6:	4607      	mov	r7, r0
 80119c8:	f7ff ffac 	bl	8011924 <__sfp_lock_acquire>
 80119cc:	4b1e      	ldr	r3, [pc, #120]	; (8011a48 <__sfp+0x84>)
 80119ce:	681e      	ldr	r6, [r3, #0]
 80119d0:	69b3      	ldr	r3, [r6, #24]
 80119d2:	b913      	cbnz	r3, 80119da <__sfp+0x16>
 80119d4:	4630      	mov	r0, r6
 80119d6:	f7ff ffbd 	bl	8011954 <__sinit>
 80119da:	3648      	adds	r6, #72	; 0x48
 80119dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80119e0:	3b01      	subs	r3, #1
 80119e2:	d503      	bpl.n	80119ec <__sfp+0x28>
 80119e4:	6833      	ldr	r3, [r6, #0]
 80119e6:	b30b      	cbz	r3, 8011a2c <__sfp+0x68>
 80119e8:	6836      	ldr	r6, [r6, #0]
 80119ea:	e7f7      	b.n	80119dc <__sfp+0x18>
 80119ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80119f0:	b9d5      	cbnz	r5, 8011a28 <__sfp+0x64>
 80119f2:	4b16      	ldr	r3, [pc, #88]	; (8011a4c <__sfp+0x88>)
 80119f4:	60e3      	str	r3, [r4, #12]
 80119f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80119fa:	6665      	str	r5, [r4, #100]	; 0x64
 80119fc:	f000 f847 	bl	8011a8e <__retarget_lock_init_recursive>
 8011a00:	f7ff ff96 	bl	8011930 <__sfp_lock_release>
 8011a04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a0c:	6025      	str	r5, [r4, #0]
 8011a0e:	61a5      	str	r5, [r4, #24]
 8011a10:	2208      	movs	r2, #8
 8011a12:	4629      	mov	r1, r5
 8011a14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a18:	f7ff fbea 	bl	80111f0 <memset>
 8011a1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a24:	4620      	mov	r0, r4
 8011a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a28:	3468      	adds	r4, #104	; 0x68
 8011a2a:	e7d9      	b.n	80119e0 <__sfp+0x1c>
 8011a2c:	2104      	movs	r1, #4
 8011a2e:	4638      	mov	r0, r7
 8011a30:	f7ff ff62 	bl	80118f8 <__sfmoreglue>
 8011a34:	4604      	mov	r4, r0
 8011a36:	6030      	str	r0, [r6, #0]
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	d1d5      	bne.n	80119e8 <__sfp+0x24>
 8011a3c:	f7ff ff78 	bl	8011930 <__sfp_lock_release>
 8011a40:	230c      	movs	r3, #12
 8011a42:	603b      	str	r3, [r7, #0]
 8011a44:	e7ee      	b.n	8011a24 <__sfp+0x60>
 8011a46:	bf00      	nop
 8011a48:	0801335c 	.word	0x0801335c
 8011a4c:	ffff0001 	.word	0xffff0001

08011a50 <_fwalk_reent>:
 8011a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a54:	4606      	mov	r6, r0
 8011a56:	4688      	mov	r8, r1
 8011a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011a5c:	2700      	movs	r7, #0
 8011a5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a62:	f1b9 0901 	subs.w	r9, r9, #1
 8011a66:	d505      	bpl.n	8011a74 <_fwalk_reent+0x24>
 8011a68:	6824      	ldr	r4, [r4, #0]
 8011a6a:	2c00      	cmp	r4, #0
 8011a6c:	d1f7      	bne.n	8011a5e <_fwalk_reent+0xe>
 8011a6e:	4638      	mov	r0, r7
 8011a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a74:	89ab      	ldrh	r3, [r5, #12]
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d907      	bls.n	8011a8a <_fwalk_reent+0x3a>
 8011a7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	d003      	beq.n	8011a8a <_fwalk_reent+0x3a>
 8011a82:	4629      	mov	r1, r5
 8011a84:	4630      	mov	r0, r6
 8011a86:	47c0      	blx	r8
 8011a88:	4307      	orrs	r7, r0
 8011a8a:	3568      	adds	r5, #104	; 0x68
 8011a8c:	e7e9      	b.n	8011a62 <_fwalk_reent+0x12>

08011a8e <__retarget_lock_init_recursive>:
 8011a8e:	4770      	bx	lr

08011a90 <__retarget_lock_acquire_recursive>:
 8011a90:	4770      	bx	lr

08011a92 <__retarget_lock_release_recursive>:
 8011a92:	4770      	bx	lr

08011a94 <__swhatbuf_r>:
 8011a94:	b570      	push	{r4, r5, r6, lr}
 8011a96:	460e      	mov	r6, r1
 8011a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a9c:	2900      	cmp	r1, #0
 8011a9e:	b096      	sub	sp, #88	; 0x58
 8011aa0:	4614      	mov	r4, r2
 8011aa2:	461d      	mov	r5, r3
 8011aa4:	da08      	bge.n	8011ab8 <__swhatbuf_r+0x24>
 8011aa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	602a      	str	r2, [r5, #0]
 8011aae:	061a      	lsls	r2, r3, #24
 8011ab0:	d410      	bmi.n	8011ad4 <__swhatbuf_r+0x40>
 8011ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ab6:	e00e      	b.n	8011ad6 <__swhatbuf_r+0x42>
 8011ab8:	466a      	mov	r2, sp
 8011aba:	f000 fe15 	bl	80126e8 <_fstat_r>
 8011abe:	2800      	cmp	r0, #0
 8011ac0:	dbf1      	blt.n	8011aa6 <__swhatbuf_r+0x12>
 8011ac2:	9a01      	ldr	r2, [sp, #4]
 8011ac4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011ac8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011acc:	425a      	negs	r2, r3
 8011ace:	415a      	adcs	r2, r3
 8011ad0:	602a      	str	r2, [r5, #0]
 8011ad2:	e7ee      	b.n	8011ab2 <__swhatbuf_r+0x1e>
 8011ad4:	2340      	movs	r3, #64	; 0x40
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	6023      	str	r3, [r4, #0]
 8011ada:	b016      	add	sp, #88	; 0x58
 8011adc:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ae0 <__smakebuf_r>:
 8011ae0:	898b      	ldrh	r3, [r1, #12]
 8011ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ae4:	079d      	lsls	r5, r3, #30
 8011ae6:	4606      	mov	r6, r0
 8011ae8:	460c      	mov	r4, r1
 8011aea:	d507      	bpl.n	8011afc <__smakebuf_r+0x1c>
 8011aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011af0:	6023      	str	r3, [r4, #0]
 8011af2:	6123      	str	r3, [r4, #16]
 8011af4:	2301      	movs	r3, #1
 8011af6:	6163      	str	r3, [r4, #20]
 8011af8:	b002      	add	sp, #8
 8011afa:	bd70      	pop	{r4, r5, r6, pc}
 8011afc:	ab01      	add	r3, sp, #4
 8011afe:	466a      	mov	r2, sp
 8011b00:	f7ff ffc8 	bl	8011a94 <__swhatbuf_r>
 8011b04:	9900      	ldr	r1, [sp, #0]
 8011b06:	4605      	mov	r5, r0
 8011b08:	4630      	mov	r0, r6
 8011b0a:	f7ff fbe5 	bl	80112d8 <_malloc_r>
 8011b0e:	b948      	cbnz	r0, 8011b24 <__smakebuf_r+0x44>
 8011b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b14:	059a      	lsls	r2, r3, #22
 8011b16:	d4ef      	bmi.n	8011af8 <__smakebuf_r+0x18>
 8011b18:	f023 0303 	bic.w	r3, r3, #3
 8011b1c:	f043 0302 	orr.w	r3, r3, #2
 8011b20:	81a3      	strh	r3, [r4, #12]
 8011b22:	e7e3      	b.n	8011aec <__smakebuf_r+0xc>
 8011b24:	4b0d      	ldr	r3, [pc, #52]	; (8011b5c <__smakebuf_r+0x7c>)
 8011b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8011b28:	89a3      	ldrh	r3, [r4, #12]
 8011b2a:	6020      	str	r0, [r4, #0]
 8011b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b30:	81a3      	strh	r3, [r4, #12]
 8011b32:	9b00      	ldr	r3, [sp, #0]
 8011b34:	6163      	str	r3, [r4, #20]
 8011b36:	9b01      	ldr	r3, [sp, #4]
 8011b38:	6120      	str	r0, [r4, #16]
 8011b3a:	b15b      	cbz	r3, 8011b54 <__smakebuf_r+0x74>
 8011b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b40:	4630      	mov	r0, r6
 8011b42:	f000 fde3 	bl	801270c <_isatty_r>
 8011b46:	b128      	cbz	r0, 8011b54 <__smakebuf_r+0x74>
 8011b48:	89a3      	ldrh	r3, [r4, #12]
 8011b4a:	f023 0303 	bic.w	r3, r3, #3
 8011b4e:	f043 0301 	orr.w	r3, r3, #1
 8011b52:	81a3      	strh	r3, [r4, #12]
 8011b54:	89a0      	ldrh	r0, [r4, #12]
 8011b56:	4305      	orrs	r5, r0
 8011b58:	81a5      	strh	r5, [r4, #12]
 8011b5a:	e7cd      	b.n	8011af8 <__smakebuf_r+0x18>
 8011b5c:	080118ed 	.word	0x080118ed

08011b60 <__malloc_lock>:
 8011b60:	4801      	ldr	r0, [pc, #4]	; (8011b68 <__malloc_lock+0x8>)
 8011b62:	f7ff bf95 	b.w	8011a90 <__retarget_lock_acquire_recursive>
 8011b66:	bf00      	nop
 8011b68:	20003f40 	.word	0x20003f40

08011b6c <__malloc_unlock>:
 8011b6c:	4801      	ldr	r0, [pc, #4]	; (8011b74 <__malloc_unlock+0x8>)
 8011b6e:	f7ff bf90 	b.w	8011a92 <__retarget_lock_release_recursive>
 8011b72:	bf00      	nop
 8011b74:	20003f40 	.word	0x20003f40

08011b78 <__ssputs_r>:
 8011b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b7c:	688e      	ldr	r6, [r1, #8]
 8011b7e:	429e      	cmp	r6, r3
 8011b80:	4682      	mov	sl, r0
 8011b82:	460c      	mov	r4, r1
 8011b84:	4690      	mov	r8, r2
 8011b86:	461f      	mov	r7, r3
 8011b88:	d838      	bhi.n	8011bfc <__ssputs_r+0x84>
 8011b8a:	898a      	ldrh	r2, [r1, #12]
 8011b8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b90:	d032      	beq.n	8011bf8 <__ssputs_r+0x80>
 8011b92:	6825      	ldr	r5, [r4, #0]
 8011b94:	6909      	ldr	r1, [r1, #16]
 8011b96:	eba5 0901 	sub.w	r9, r5, r1
 8011b9a:	6965      	ldr	r5, [r4, #20]
 8011b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ba0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	444b      	add	r3, r9
 8011ba8:	106d      	asrs	r5, r5, #1
 8011baa:	429d      	cmp	r5, r3
 8011bac:	bf38      	it	cc
 8011bae:	461d      	movcc	r5, r3
 8011bb0:	0553      	lsls	r3, r2, #21
 8011bb2:	d531      	bpl.n	8011c18 <__ssputs_r+0xa0>
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	f7ff fb8f 	bl	80112d8 <_malloc_r>
 8011bba:	4606      	mov	r6, r0
 8011bbc:	b950      	cbnz	r0, 8011bd4 <__ssputs_r+0x5c>
 8011bbe:	230c      	movs	r3, #12
 8011bc0:	f8ca 3000 	str.w	r3, [sl]
 8011bc4:	89a3      	ldrh	r3, [r4, #12]
 8011bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bca:	81a3      	strh	r3, [r4, #12]
 8011bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bd4:	6921      	ldr	r1, [r4, #16]
 8011bd6:	464a      	mov	r2, r9
 8011bd8:	f7ff fafc 	bl	80111d4 <memcpy>
 8011bdc:	89a3      	ldrh	r3, [r4, #12]
 8011bde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011be6:	81a3      	strh	r3, [r4, #12]
 8011be8:	6126      	str	r6, [r4, #16]
 8011bea:	6165      	str	r5, [r4, #20]
 8011bec:	444e      	add	r6, r9
 8011bee:	eba5 0509 	sub.w	r5, r5, r9
 8011bf2:	6026      	str	r6, [r4, #0]
 8011bf4:	60a5      	str	r5, [r4, #8]
 8011bf6:	463e      	mov	r6, r7
 8011bf8:	42be      	cmp	r6, r7
 8011bfa:	d900      	bls.n	8011bfe <__ssputs_r+0x86>
 8011bfc:	463e      	mov	r6, r7
 8011bfe:	6820      	ldr	r0, [r4, #0]
 8011c00:	4632      	mov	r2, r6
 8011c02:	4641      	mov	r1, r8
 8011c04:	f000 fda4 	bl	8012750 <memmove>
 8011c08:	68a3      	ldr	r3, [r4, #8]
 8011c0a:	1b9b      	subs	r3, r3, r6
 8011c0c:	60a3      	str	r3, [r4, #8]
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	4433      	add	r3, r6
 8011c12:	6023      	str	r3, [r4, #0]
 8011c14:	2000      	movs	r0, #0
 8011c16:	e7db      	b.n	8011bd0 <__ssputs_r+0x58>
 8011c18:	462a      	mov	r2, r5
 8011c1a:	f000 fdb3 	bl	8012784 <_realloc_r>
 8011c1e:	4606      	mov	r6, r0
 8011c20:	2800      	cmp	r0, #0
 8011c22:	d1e1      	bne.n	8011be8 <__ssputs_r+0x70>
 8011c24:	6921      	ldr	r1, [r4, #16]
 8011c26:	4650      	mov	r0, sl
 8011c28:	f7ff faea 	bl	8011200 <_free_r>
 8011c2c:	e7c7      	b.n	8011bbe <__ssputs_r+0x46>
	...

08011c30 <_svfiprintf_r>:
 8011c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c34:	4698      	mov	r8, r3
 8011c36:	898b      	ldrh	r3, [r1, #12]
 8011c38:	061b      	lsls	r3, r3, #24
 8011c3a:	b09d      	sub	sp, #116	; 0x74
 8011c3c:	4607      	mov	r7, r0
 8011c3e:	460d      	mov	r5, r1
 8011c40:	4614      	mov	r4, r2
 8011c42:	d50e      	bpl.n	8011c62 <_svfiprintf_r+0x32>
 8011c44:	690b      	ldr	r3, [r1, #16]
 8011c46:	b963      	cbnz	r3, 8011c62 <_svfiprintf_r+0x32>
 8011c48:	2140      	movs	r1, #64	; 0x40
 8011c4a:	f7ff fb45 	bl	80112d8 <_malloc_r>
 8011c4e:	6028      	str	r0, [r5, #0]
 8011c50:	6128      	str	r0, [r5, #16]
 8011c52:	b920      	cbnz	r0, 8011c5e <_svfiprintf_r+0x2e>
 8011c54:	230c      	movs	r3, #12
 8011c56:	603b      	str	r3, [r7, #0]
 8011c58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c5c:	e0d1      	b.n	8011e02 <_svfiprintf_r+0x1d2>
 8011c5e:	2340      	movs	r3, #64	; 0x40
 8011c60:	616b      	str	r3, [r5, #20]
 8011c62:	2300      	movs	r3, #0
 8011c64:	9309      	str	r3, [sp, #36]	; 0x24
 8011c66:	2320      	movs	r3, #32
 8011c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c70:	2330      	movs	r3, #48	; 0x30
 8011c72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011e1c <_svfiprintf_r+0x1ec>
 8011c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c7a:	f04f 0901 	mov.w	r9, #1
 8011c7e:	4623      	mov	r3, r4
 8011c80:	469a      	mov	sl, r3
 8011c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c86:	b10a      	cbz	r2, 8011c8c <_svfiprintf_r+0x5c>
 8011c88:	2a25      	cmp	r2, #37	; 0x25
 8011c8a:	d1f9      	bne.n	8011c80 <_svfiprintf_r+0x50>
 8011c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c90:	d00b      	beq.n	8011caa <_svfiprintf_r+0x7a>
 8011c92:	465b      	mov	r3, fp
 8011c94:	4622      	mov	r2, r4
 8011c96:	4629      	mov	r1, r5
 8011c98:	4638      	mov	r0, r7
 8011c9a:	f7ff ff6d 	bl	8011b78 <__ssputs_r>
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	f000 80aa 	beq.w	8011df8 <_svfiprintf_r+0x1c8>
 8011ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ca6:	445a      	add	r2, fp
 8011ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8011caa:	f89a 3000 	ldrb.w	r3, [sl]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 80a2 	beq.w	8011df8 <_svfiprintf_r+0x1c8>
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cbe:	f10a 0a01 	add.w	sl, sl, #1
 8011cc2:	9304      	str	r3, [sp, #16]
 8011cc4:	9307      	str	r3, [sp, #28]
 8011cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011cca:	931a      	str	r3, [sp, #104]	; 0x68
 8011ccc:	4654      	mov	r4, sl
 8011cce:	2205      	movs	r2, #5
 8011cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cd4:	4851      	ldr	r0, [pc, #324]	; (8011e1c <_svfiprintf_r+0x1ec>)
 8011cd6:	f7ee fa8b 	bl	80001f0 <memchr>
 8011cda:	9a04      	ldr	r2, [sp, #16]
 8011cdc:	b9d8      	cbnz	r0, 8011d16 <_svfiprintf_r+0xe6>
 8011cde:	06d0      	lsls	r0, r2, #27
 8011ce0:	bf44      	itt	mi
 8011ce2:	2320      	movmi	r3, #32
 8011ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ce8:	0711      	lsls	r1, r2, #28
 8011cea:	bf44      	itt	mi
 8011cec:	232b      	movmi	r3, #43	; 0x2b
 8011cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8011cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8011cf8:	d015      	beq.n	8011d26 <_svfiprintf_r+0xf6>
 8011cfa:	9a07      	ldr	r2, [sp, #28]
 8011cfc:	4654      	mov	r4, sl
 8011cfe:	2000      	movs	r0, #0
 8011d00:	f04f 0c0a 	mov.w	ip, #10
 8011d04:	4621      	mov	r1, r4
 8011d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d0a:	3b30      	subs	r3, #48	; 0x30
 8011d0c:	2b09      	cmp	r3, #9
 8011d0e:	d94e      	bls.n	8011dae <_svfiprintf_r+0x17e>
 8011d10:	b1b0      	cbz	r0, 8011d40 <_svfiprintf_r+0x110>
 8011d12:	9207      	str	r2, [sp, #28]
 8011d14:	e014      	b.n	8011d40 <_svfiprintf_r+0x110>
 8011d16:	eba0 0308 	sub.w	r3, r0, r8
 8011d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	9304      	str	r3, [sp, #16]
 8011d22:	46a2      	mov	sl, r4
 8011d24:	e7d2      	b.n	8011ccc <_svfiprintf_r+0x9c>
 8011d26:	9b03      	ldr	r3, [sp, #12]
 8011d28:	1d19      	adds	r1, r3, #4
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	9103      	str	r1, [sp, #12]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	bfbb      	ittet	lt
 8011d32:	425b      	neglt	r3, r3
 8011d34:	f042 0202 	orrlt.w	r2, r2, #2
 8011d38:	9307      	strge	r3, [sp, #28]
 8011d3a:	9307      	strlt	r3, [sp, #28]
 8011d3c:	bfb8      	it	lt
 8011d3e:	9204      	strlt	r2, [sp, #16]
 8011d40:	7823      	ldrb	r3, [r4, #0]
 8011d42:	2b2e      	cmp	r3, #46	; 0x2e
 8011d44:	d10c      	bne.n	8011d60 <_svfiprintf_r+0x130>
 8011d46:	7863      	ldrb	r3, [r4, #1]
 8011d48:	2b2a      	cmp	r3, #42	; 0x2a
 8011d4a:	d135      	bne.n	8011db8 <_svfiprintf_r+0x188>
 8011d4c:	9b03      	ldr	r3, [sp, #12]
 8011d4e:	1d1a      	adds	r2, r3, #4
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	9203      	str	r2, [sp, #12]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	bfb8      	it	lt
 8011d58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011d5c:	3402      	adds	r4, #2
 8011d5e:	9305      	str	r3, [sp, #20]
 8011d60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011e2c <_svfiprintf_r+0x1fc>
 8011d64:	7821      	ldrb	r1, [r4, #0]
 8011d66:	2203      	movs	r2, #3
 8011d68:	4650      	mov	r0, sl
 8011d6a:	f7ee fa41 	bl	80001f0 <memchr>
 8011d6e:	b140      	cbz	r0, 8011d82 <_svfiprintf_r+0x152>
 8011d70:	2340      	movs	r3, #64	; 0x40
 8011d72:	eba0 000a 	sub.w	r0, r0, sl
 8011d76:	fa03 f000 	lsl.w	r0, r3, r0
 8011d7a:	9b04      	ldr	r3, [sp, #16]
 8011d7c:	4303      	orrs	r3, r0
 8011d7e:	3401      	adds	r4, #1
 8011d80:	9304      	str	r3, [sp, #16]
 8011d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d86:	4826      	ldr	r0, [pc, #152]	; (8011e20 <_svfiprintf_r+0x1f0>)
 8011d88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d8c:	2206      	movs	r2, #6
 8011d8e:	f7ee fa2f 	bl	80001f0 <memchr>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d038      	beq.n	8011e08 <_svfiprintf_r+0x1d8>
 8011d96:	4b23      	ldr	r3, [pc, #140]	; (8011e24 <_svfiprintf_r+0x1f4>)
 8011d98:	bb1b      	cbnz	r3, 8011de2 <_svfiprintf_r+0x1b2>
 8011d9a:	9b03      	ldr	r3, [sp, #12]
 8011d9c:	3307      	adds	r3, #7
 8011d9e:	f023 0307 	bic.w	r3, r3, #7
 8011da2:	3308      	adds	r3, #8
 8011da4:	9303      	str	r3, [sp, #12]
 8011da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011da8:	4433      	add	r3, r6
 8011daa:	9309      	str	r3, [sp, #36]	; 0x24
 8011dac:	e767      	b.n	8011c7e <_svfiprintf_r+0x4e>
 8011dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8011db2:	460c      	mov	r4, r1
 8011db4:	2001      	movs	r0, #1
 8011db6:	e7a5      	b.n	8011d04 <_svfiprintf_r+0xd4>
 8011db8:	2300      	movs	r3, #0
 8011dba:	3401      	adds	r4, #1
 8011dbc:	9305      	str	r3, [sp, #20]
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	f04f 0c0a 	mov.w	ip, #10
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dca:	3a30      	subs	r2, #48	; 0x30
 8011dcc:	2a09      	cmp	r2, #9
 8011dce:	d903      	bls.n	8011dd8 <_svfiprintf_r+0x1a8>
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d0c5      	beq.n	8011d60 <_svfiprintf_r+0x130>
 8011dd4:	9105      	str	r1, [sp, #20]
 8011dd6:	e7c3      	b.n	8011d60 <_svfiprintf_r+0x130>
 8011dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ddc:	4604      	mov	r4, r0
 8011dde:	2301      	movs	r3, #1
 8011de0:	e7f0      	b.n	8011dc4 <_svfiprintf_r+0x194>
 8011de2:	ab03      	add	r3, sp, #12
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	462a      	mov	r2, r5
 8011de8:	4b0f      	ldr	r3, [pc, #60]	; (8011e28 <_svfiprintf_r+0x1f8>)
 8011dea:	a904      	add	r1, sp, #16
 8011dec:	4638      	mov	r0, r7
 8011dee:	f3af 8000 	nop.w
 8011df2:	1c42      	adds	r2, r0, #1
 8011df4:	4606      	mov	r6, r0
 8011df6:	d1d6      	bne.n	8011da6 <_svfiprintf_r+0x176>
 8011df8:	89ab      	ldrh	r3, [r5, #12]
 8011dfa:	065b      	lsls	r3, r3, #25
 8011dfc:	f53f af2c 	bmi.w	8011c58 <_svfiprintf_r+0x28>
 8011e00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e02:	b01d      	add	sp, #116	; 0x74
 8011e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e08:	ab03      	add	r3, sp, #12
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	462a      	mov	r2, r5
 8011e0e:	4b06      	ldr	r3, [pc, #24]	; (8011e28 <_svfiprintf_r+0x1f8>)
 8011e10:	a904      	add	r1, sp, #16
 8011e12:	4638      	mov	r0, r7
 8011e14:	f000 f9d4 	bl	80121c0 <_printf_i>
 8011e18:	e7eb      	b.n	8011df2 <_svfiprintf_r+0x1c2>
 8011e1a:	bf00      	nop
 8011e1c:	080134c4 	.word	0x080134c4
 8011e20:	080134ce 	.word	0x080134ce
 8011e24:	00000000 	.word	0x00000000
 8011e28:	08011b79 	.word	0x08011b79
 8011e2c:	080134ca 	.word	0x080134ca

08011e30 <__sfputc_r>:
 8011e30:	6893      	ldr	r3, [r2, #8]
 8011e32:	3b01      	subs	r3, #1
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	b410      	push	{r4}
 8011e38:	6093      	str	r3, [r2, #8]
 8011e3a:	da08      	bge.n	8011e4e <__sfputc_r+0x1e>
 8011e3c:	6994      	ldr	r4, [r2, #24]
 8011e3e:	42a3      	cmp	r3, r4
 8011e40:	db01      	blt.n	8011e46 <__sfputc_r+0x16>
 8011e42:	290a      	cmp	r1, #10
 8011e44:	d103      	bne.n	8011e4e <__sfputc_r+0x1e>
 8011e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e4a:	f000 bb6b 	b.w	8012524 <__swbuf_r>
 8011e4e:	6813      	ldr	r3, [r2, #0]
 8011e50:	1c58      	adds	r0, r3, #1
 8011e52:	6010      	str	r0, [r2, #0]
 8011e54:	7019      	strb	r1, [r3, #0]
 8011e56:	4608      	mov	r0, r1
 8011e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e5c:	4770      	bx	lr

08011e5e <__sfputs_r>:
 8011e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e60:	4606      	mov	r6, r0
 8011e62:	460f      	mov	r7, r1
 8011e64:	4614      	mov	r4, r2
 8011e66:	18d5      	adds	r5, r2, r3
 8011e68:	42ac      	cmp	r4, r5
 8011e6a:	d101      	bne.n	8011e70 <__sfputs_r+0x12>
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	e007      	b.n	8011e80 <__sfputs_r+0x22>
 8011e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e74:	463a      	mov	r2, r7
 8011e76:	4630      	mov	r0, r6
 8011e78:	f7ff ffda 	bl	8011e30 <__sfputc_r>
 8011e7c:	1c43      	adds	r3, r0, #1
 8011e7e:	d1f3      	bne.n	8011e68 <__sfputs_r+0xa>
 8011e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011e84 <_vfiprintf_r>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	460d      	mov	r5, r1
 8011e8a:	b09d      	sub	sp, #116	; 0x74
 8011e8c:	4614      	mov	r4, r2
 8011e8e:	4698      	mov	r8, r3
 8011e90:	4606      	mov	r6, r0
 8011e92:	b118      	cbz	r0, 8011e9c <_vfiprintf_r+0x18>
 8011e94:	6983      	ldr	r3, [r0, #24]
 8011e96:	b90b      	cbnz	r3, 8011e9c <_vfiprintf_r+0x18>
 8011e98:	f7ff fd5c 	bl	8011954 <__sinit>
 8011e9c:	4b89      	ldr	r3, [pc, #548]	; (80120c4 <_vfiprintf_r+0x240>)
 8011e9e:	429d      	cmp	r5, r3
 8011ea0:	d11b      	bne.n	8011eda <_vfiprintf_r+0x56>
 8011ea2:	6875      	ldr	r5, [r6, #4]
 8011ea4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ea6:	07d9      	lsls	r1, r3, #31
 8011ea8:	d405      	bmi.n	8011eb6 <_vfiprintf_r+0x32>
 8011eaa:	89ab      	ldrh	r3, [r5, #12]
 8011eac:	059a      	lsls	r2, r3, #22
 8011eae:	d402      	bmi.n	8011eb6 <_vfiprintf_r+0x32>
 8011eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011eb2:	f7ff fded 	bl	8011a90 <__retarget_lock_acquire_recursive>
 8011eb6:	89ab      	ldrh	r3, [r5, #12]
 8011eb8:	071b      	lsls	r3, r3, #28
 8011eba:	d501      	bpl.n	8011ec0 <_vfiprintf_r+0x3c>
 8011ebc:	692b      	ldr	r3, [r5, #16]
 8011ebe:	b9eb      	cbnz	r3, 8011efc <_vfiprintf_r+0x78>
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	4630      	mov	r0, r6
 8011ec4:	f000 fb92 	bl	80125ec <__swsetup_r>
 8011ec8:	b1c0      	cbz	r0, 8011efc <_vfiprintf_r+0x78>
 8011eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ecc:	07dc      	lsls	r4, r3, #31
 8011ece:	d50e      	bpl.n	8011eee <_vfiprintf_r+0x6a>
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ed4:	b01d      	add	sp, #116	; 0x74
 8011ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eda:	4b7b      	ldr	r3, [pc, #492]	; (80120c8 <_vfiprintf_r+0x244>)
 8011edc:	429d      	cmp	r5, r3
 8011ede:	d101      	bne.n	8011ee4 <_vfiprintf_r+0x60>
 8011ee0:	68b5      	ldr	r5, [r6, #8]
 8011ee2:	e7df      	b.n	8011ea4 <_vfiprintf_r+0x20>
 8011ee4:	4b79      	ldr	r3, [pc, #484]	; (80120cc <_vfiprintf_r+0x248>)
 8011ee6:	429d      	cmp	r5, r3
 8011ee8:	bf08      	it	eq
 8011eea:	68f5      	ldreq	r5, [r6, #12]
 8011eec:	e7da      	b.n	8011ea4 <_vfiprintf_r+0x20>
 8011eee:	89ab      	ldrh	r3, [r5, #12]
 8011ef0:	0598      	lsls	r0, r3, #22
 8011ef2:	d4ed      	bmi.n	8011ed0 <_vfiprintf_r+0x4c>
 8011ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ef6:	f7ff fdcc 	bl	8011a92 <__retarget_lock_release_recursive>
 8011efa:	e7e9      	b.n	8011ed0 <_vfiprintf_r+0x4c>
 8011efc:	2300      	movs	r3, #0
 8011efe:	9309      	str	r3, [sp, #36]	; 0x24
 8011f00:	2320      	movs	r3, #32
 8011f02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f06:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f0a:	2330      	movs	r3, #48	; 0x30
 8011f0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80120d0 <_vfiprintf_r+0x24c>
 8011f10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f14:	f04f 0901 	mov.w	r9, #1
 8011f18:	4623      	mov	r3, r4
 8011f1a:	469a      	mov	sl, r3
 8011f1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f20:	b10a      	cbz	r2, 8011f26 <_vfiprintf_r+0xa2>
 8011f22:	2a25      	cmp	r2, #37	; 0x25
 8011f24:	d1f9      	bne.n	8011f1a <_vfiprintf_r+0x96>
 8011f26:	ebba 0b04 	subs.w	fp, sl, r4
 8011f2a:	d00b      	beq.n	8011f44 <_vfiprintf_r+0xc0>
 8011f2c:	465b      	mov	r3, fp
 8011f2e:	4622      	mov	r2, r4
 8011f30:	4629      	mov	r1, r5
 8011f32:	4630      	mov	r0, r6
 8011f34:	f7ff ff93 	bl	8011e5e <__sfputs_r>
 8011f38:	3001      	adds	r0, #1
 8011f3a:	f000 80aa 	beq.w	8012092 <_vfiprintf_r+0x20e>
 8011f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f40:	445a      	add	r2, fp
 8011f42:	9209      	str	r2, [sp, #36]	; 0x24
 8011f44:	f89a 3000 	ldrb.w	r3, [sl]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f000 80a2 	beq.w	8012092 <_vfiprintf_r+0x20e>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f58:	f10a 0a01 	add.w	sl, sl, #1
 8011f5c:	9304      	str	r3, [sp, #16]
 8011f5e:	9307      	str	r3, [sp, #28]
 8011f60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f64:	931a      	str	r3, [sp, #104]	; 0x68
 8011f66:	4654      	mov	r4, sl
 8011f68:	2205      	movs	r2, #5
 8011f6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f6e:	4858      	ldr	r0, [pc, #352]	; (80120d0 <_vfiprintf_r+0x24c>)
 8011f70:	f7ee f93e 	bl	80001f0 <memchr>
 8011f74:	9a04      	ldr	r2, [sp, #16]
 8011f76:	b9d8      	cbnz	r0, 8011fb0 <_vfiprintf_r+0x12c>
 8011f78:	06d1      	lsls	r1, r2, #27
 8011f7a:	bf44      	itt	mi
 8011f7c:	2320      	movmi	r3, #32
 8011f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f82:	0713      	lsls	r3, r2, #28
 8011f84:	bf44      	itt	mi
 8011f86:	232b      	movmi	r3, #43	; 0x2b
 8011f88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f8c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f90:	2b2a      	cmp	r3, #42	; 0x2a
 8011f92:	d015      	beq.n	8011fc0 <_vfiprintf_r+0x13c>
 8011f94:	9a07      	ldr	r2, [sp, #28]
 8011f96:	4654      	mov	r4, sl
 8011f98:	2000      	movs	r0, #0
 8011f9a:	f04f 0c0a 	mov.w	ip, #10
 8011f9e:	4621      	mov	r1, r4
 8011fa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fa4:	3b30      	subs	r3, #48	; 0x30
 8011fa6:	2b09      	cmp	r3, #9
 8011fa8:	d94e      	bls.n	8012048 <_vfiprintf_r+0x1c4>
 8011faa:	b1b0      	cbz	r0, 8011fda <_vfiprintf_r+0x156>
 8011fac:	9207      	str	r2, [sp, #28]
 8011fae:	e014      	b.n	8011fda <_vfiprintf_r+0x156>
 8011fb0:	eba0 0308 	sub.w	r3, r0, r8
 8011fb4:	fa09 f303 	lsl.w	r3, r9, r3
 8011fb8:	4313      	orrs	r3, r2
 8011fba:	9304      	str	r3, [sp, #16]
 8011fbc:	46a2      	mov	sl, r4
 8011fbe:	e7d2      	b.n	8011f66 <_vfiprintf_r+0xe2>
 8011fc0:	9b03      	ldr	r3, [sp, #12]
 8011fc2:	1d19      	adds	r1, r3, #4
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	9103      	str	r1, [sp, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	bfbb      	ittet	lt
 8011fcc:	425b      	neglt	r3, r3
 8011fce:	f042 0202 	orrlt.w	r2, r2, #2
 8011fd2:	9307      	strge	r3, [sp, #28]
 8011fd4:	9307      	strlt	r3, [sp, #28]
 8011fd6:	bfb8      	it	lt
 8011fd8:	9204      	strlt	r2, [sp, #16]
 8011fda:	7823      	ldrb	r3, [r4, #0]
 8011fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8011fde:	d10c      	bne.n	8011ffa <_vfiprintf_r+0x176>
 8011fe0:	7863      	ldrb	r3, [r4, #1]
 8011fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8011fe4:	d135      	bne.n	8012052 <_vfiprintf_r+0x1ce>
 8011fe6:	9b03      	ldr	r3, [sp, #12]
 8011fe8:	1d1a      	adds	r2, r3, #4
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	9203      	str	r2, [sp, #12]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	bfb8      	it	lt
 8011ff2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011ff6:	3402      	adds	r4, #2
 8011ff8:	9305      	str	r3, [sp, #20]
 8011ffa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80120e0 <_vfiprintf_r+0x25c>
 8011ffe:	7821      	ldrb	r1, [r4, #0]
 8012000:	2203      	movs	r2, #3
 8012002:	4650      	mov	r0, sl
 8012004:	f7ee f8f4 	bl	80001f0 <memchr>
 8012008:	b140      	cbz	r0, 801201c <_vfiprintf_r+0x198>
 801200a:	2340      	movs	r3, #64	; 0x40
 801200c:	eba0 000a 	sub.w	r0, r0, sl
 8012010:	fa03 f000 	lsl.w	r0, r3, r0
 8012014:	9b04      	ldr	r3, [sp, #16]
 8012016:	4303      	orrs	r3, r0
 8012018:	3401      	adds	r4, #1
 801201a:	9304      	str	r3, [sp, #16]
 801201c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012020:	482c      	ldr	r0, [pc, #176]	; (80120d4 <_vfiprintf_r+0x250>)
 8012022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012026:	2206      	movs	r2, #6
 8012028:	f7ee f8e2 	bl	80001f0 <memchr>
 801202c:	2800      	cmp	r0, #0
 801202e:	d03f      	beq.n	80120b0 <_vfiprintf_r+0x22c>
 8012030:	4b29      	ldr	r3, [pc, #164]	; (80120d8 <_vfiprintf_r+0x254>)
 8012032:	bb1b      	cbnz	r3, 801207c <_vfiprintf_r+0x1f8>
 8012034:	9b03      	ldr	r3, [sp, #12]
 8012036:	3307      	adds	r3, #7
 8012038:	f023 0307 	bic.w	r3, r3, #7
 801203c:	3308      	adds	r3, #8
 801203e:	9303      	str	r3, [sp, #12]
 8012040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012042:	443b      	add	r3, r7
 8012044:	9309      	str	r3, [sp, #36]	; 0x24
 8012046:	e767      	b.n	8011f18 <_vfiprintf_r+0x94>
 8012048:	fb0c 3202 	mla	r2, ip, r2, r3
 801204c:	460c      	mov	r4, r1
 801204e:	2001      	movs	r0, #1
 8012050:	e7a5      	b.n	8011f9e <_vfiprintf_r+0x11a>
 8012052:	2300      	movs	r3, #0
 8012054:	3401      	adds	r4, #1
 8012056:	9305      	str	r3, [sp, #20]
 8012058:	4619      	mov	r1, r3
 801205a:	f04f 0c0a 	mov.w	ip, #10
 801205e:	4620      	mov	r0, r4
 8012060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012064:	3a30      	subs	r2, #48	; 0x30
 8012066:	2a09      	cmp	r2, #9
 8012068:	d903      	bls.n	8012072 <_vfiprintf_r+0x1ee>
 801206a:	2b00      	cmp	r3, #0
 801206c:	d0c5      	beq.n	8011ffa <_vfiprintf_r+0x176>
 801206e:	9105      	str	r1, [sp, #20]
 8012070:	e7c3      	b.n	8011ffa <_vfiprintf_r+0x176>
 8012072:	fb0c 2101 	mla	r1, ip, r1, r2
 8012076:	4604      	mov	r4, r0
 8012078:	2301      	movs	r3, #1
 801207a:	e7f0      	b.n	801205e <_vfiprintf_r+0x1da>
 801207c:	ab03      	add	r3, sp, #12
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	462a      	mov	r2, r5
 8012082:	4b16      	ldr	r3, [pc, #88]	; (80120dc <_vfiprintf_r+0x258>)
 8012084:	a904      	add	r1, sp, #16
 8012086:	4630      	mov	r0, r6
 8012088:	f3af 8000 	nop.w
 801208c:	4607      	mov	r7, r0
 801208e:	1c78      	adds	r0, r7, #1
 8012090:	d1d6      	bne.n	8012040 <_vfiprintf_r+0x1bc>
 8012092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012094:	07d9      	lsls	r1, r3, #31
 8012096:	d405      	bmi.n	80120a4 <_vfiprintf_r+0x220>
 8012098:	89ab      	ldrh	r3, [r5, #12]
 801209a:	059a      	lsls	r2, r3, #22
 801209c:	d402      	bmi.n	80120a4 <_vfiprintf_r+0x220>
 801209e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120a0:	f7ff fcf7 	bl	8011a92 <__retarget_lock_release_recursive>
 80120a4:	89ab      	ldrh	r3, [r5, #12]
 80120a6:	065b      	lsls	r3, r3, #25
 80120a8:	f53f af12 	bmi.w	8011ed0 <_vfiprintf_r+0x4c>
 80120ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80120ae:	e711      	b.n	8011ed4 <_vfiprintf_r+0x50>
 80120b0:	ab03      	add	r3, sp, #12
 80120b2:	9300      	str	r3, [sp, #0]
 80120b4:	462a      	mov	r2, r5
 80120b6:	4b09      	ldr	r3, [pc, #36]	; (80120dc <_vfiprintf_r+0x258>)
 80120b8:	a904      	add	r1, sp, #16
 80120ba:	4630      	mov	r0, r6
 80120bc:	f000 f880 	bl	80121c0 <_printf_i>
 80120c0:	e7e4      	b.n	801208c <_vfiprintf_r+0x208>
 80120c2:	bf00      	nop
 80120c4:	08013484 	.word	0x08013484
 80120c8:	080134a4 	.word	0x080134a4
 80120cc:	08013464 	.word	0x08013464
 80120d0:	080134c4 	.word	0x080134c4
 80120d4:	080134ce 	.word	0x080134ce
 80120d8:	00000000 	.word	0x00000000
 80120dc:	08011e5f 	.word	0x08011e5f
 80120e0:	080134ca 	.word	0x080134ca

080120e4 <_printf_common>:
 80120e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120e8:	4616      	mov	r6, r2
 80120ea:	4699      	mov	r9, r3
 80120ec:	688a      	ldr	r2, [r1, #8]
 80120ee:	690b      	ldr	r3, [r1, #16]
 80120f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80120f4:	4293      	cmp	r3, r2
 80120f6:	bfb8      	it	lt
 80120f8:	4613      	movlt	r3, r2
 80120fa:	6033      	str	r3, [r6, #0]
 80120fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012100:	4607      	mov	r7, r0
 8012102:	460c      	mov	r4, r1
 8012104:	b10a      	cbz	r2, 801210a <_printf_common+0x26>
 8012106:	3301      	adds	r3, #1
 8012108:	6033      	str	r3, [r6, #0]
 801210a:	6823      	ldr	r3, [r4, #0]
 801210c:	0699      	lsls	r1, r3, #26
 801210e:	bf42      	ittt	mi
 8012110:	6833      	ldrmi	r3, [r6, #0]
 8012112:	3302      	addmi	r3, #2
 8012114:	6033      	strmi	r3, [r6, #0]
 8012116:	6825      	ldr	r5, [r4, #0]
 8012118:	f015 0506 	ands.w	r5, r5, #6
 801211c:	d106      	bne.n	801212c <_printf_common+0x48>
 801211e:	f104 0a19 	add.w	sl, r4, #25
 8012122:	68e3      	ldr	r3, [r4, #12]
 8012124:	6832      	ldr	r2, [r6, #0]
 8012126:	1a9b      	subs	r3, r3, r2
 8012128:	42ab      	cmp	r3, r5
 801212a:	dc26      	bgt.n	801217a <_printf_common+0x96>
 801212c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012130:	1e13      	subs	r3, r2, #0
 8012132:	6822      	ldr	r2, [r4, #0]
 8012134:	bf18      	it	ne
 8012136:	2301      	movne	r3, #1
 8012138:	0692      	lsls	r2, r2, #26
 801213a:	d42b      	bmi.n	8012194 <_printf_common+0xb0>
 801213c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012140:	4649      	mov	r1, r9
 8012142:	4638      	mov	r0, r7
 8012144:	47c0      	blx	r8
 8012146:	3001      	adds	r0, #1
 8012148:	d01e      	beq.n	8012188 <_printf_common+0xa4>
 801214a:	6823      	ldr	r3, [r4, #0]
 801214c:	68e5      	ldr	r5, [r4, #12]
 801214e:	6832      	ldr	r2, [r6, #0]
 8012150:	f003 0306 	and.w	r3, r3, #6
 8012154:	2b04      	cmp	r3, #4
 8012156:	bf08      	it	eq
 8012158:	1aad      	subeq	r5, r5, r2
 801215a:	68a3      	ldr	r3, [r4, #8]
 801215c:	6922      	ldr	r2, [r4, #16]
 801215e:	bf0c      	ite	eq
 8012160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012164:	2500      	movne	r5, #0
 8012166:	4293      	cmp	r3, r2
 8012168:	bfc4      	itt	gt
 801216a:	1a9b      	subgt	r3, r3, r2
 801216c:	18ed      	addgt	r5, r5, r3
 801216e:	2600      	movs	r6, #0
 8012170:	341a      	adds	r4, #26
 8012172:	42b5      	cmp	r5, r6
 8012174:	d11a      	bne.n	80121ac <_printf_common+0xc8>
 8012176:	2000      	movs	r0, #0
 8012178:	e008      	b.n	801218c <_printf_common+0xa8>
 801217a:	2301      	movs	r3, #1
 801217c:	4652      	mov	r2, sl
 801217e:	4649      	mov	r1, r9
 8012180:	4638      	mov	r0, r7
 8012182:	47c0      	blx	r8
 8012184:	3001      	adds	r0, #1
 8012186:	d103      	bne.n	8012190 <_printf_common+0xac>
 8012188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801218c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012190:	3501      	adds	r5, #1
 8012192:	e7c6      	b.n	8012122 <_printf_common+0x3e>
 8012194:	18e1      	adds	r1, r4, r3
 8012196:	1c5a      	adds	r2, r3, #1
 8012198:	2030      	movs	r0, #48	; 0x30
 801219a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801219e:	4422      	add	r2, r4
 80121a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80121a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80121a8:	3302      	adds	r3, #2
 80121aa:	e7c7      	b.n	801213c <_printf_common+0x58>
 80121ac:	2301      	movs	r3, #1
 80121ae:	4622      	mov	r2, r4
 80121b0:	4649      	mov	r1, r9
 80121b2:	4638      	mov	r0, r7
 80121b4:	47c0      	blx	r8
 80121b6:	3001      	adds	r0, #1
 80121b8:	d0e6      	beq.n	8012188 <_printf_common+0xa4>
 80121ba:	3601      	adds	r6, #1
 80121bc:	e7d9      	b.n	8012172 <_printf_common+0x8e>
	...

080121c0 <_printf_i>:
 80121c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80121c4:	7e0f      	ldrb	r7, [r1, #24]
 80121c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80121c8:	2f78      	cmp	r7, #120	; 0x78
 80121ca:	4691      	mov	r9, r2
 80121cc:	4680      	mov	r8, r0
 80121ce:	460c      	mov	r4, r1
 80121d0:	469a      	mov	sl, r3
 80121d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80121d6:	d807      	bhi.n	80121e8 <_printf_i+0x28>
 80121d8:	2f62      	cmp	r7, #98	; 0x62
 80121da:	d80a      	bhi.n	80121f2 <_printf_i+0x32>
 80121dc:	2f00      	cmp	r7, #0
 80121de:	f000 80d8 	beq.w	8012392 <_printf_i+0x1d2>
 80121e2:	2f58      	cmp	r7, #88	; 0x58
 80121e4:	f000 80a3 	beq.w	801232e <_printf_i+0x16e>
 80121e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80121f0:	e03a      	b.n	8012268 <_printf_i+0xa8>
 80121f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80121f6:	2b15      	cmp	r3, #21
 80121f8:	d8f6      	bhi.n	80121e8 <_printf_i+0x28>
 80121fa:	a101      	add	r1, pc, #4	; (adr r1, 8012200 <_printf_i+0x40>)
 80121fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012200:	08012259 	.word	0x08012259
 8012204:	0801226d 	.word	0x0801226d
 8012208:	080121e9 	.word	0x080121e9
 801220c:	080121e9 	.word	0x080121e9
 8012210:	080121e9 	.word	0x080121e9
 8012214:	080121e9 	.word	0x080121e9
 8012218:	0801226d 	.word	0x0801226d
 801221c:	080121e9 	.word	0x080121e9
 8012220:	080121e9 	.word	0x080121e9
 8012224:	080121e9 	.word	0x080121e9
 8012228:	080121e9 	.word	0x080121e9
 801222c:	08012379 	.word	0x08012379
 8012230:	0801229d 	.word	0x0801229d
 8012234:	0801235b 	.word	0x0801235b
 8012238:	080121e9 	.word	0x080121e9
 801223c:	080121e9 	.word	0x080121e9
 8012240:	0801239b 	.word	0x0801239b
 8012244:	080121e9 	.word	0x080121e9
 8012248:	0801229d 	.word	0x0801229d
 801224c:	080121e9 	.word	0x080121e9
 8012250:	080121e9 	.word	0x080121e9
 8012254:	08012363 	.word	0x08012363
 8012258:	682b      	ldr	r3, [r5, #0]
 801225a:	1d1a      	adds	r2, r3, #4
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	602a      	str	r2, [r5, #0]
 8012260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012268:	2301      	movs	r3, #1
 801226a:	e0a3      	b.n	80123b4 <_printf_i+0x1f4>
 801226c:	6820      	ldr	r0, [r4, #0]
 801226e:	6829      	ldr	r1, [r5, #0]
 8012270:	0606      	lsls	r6, r0, #24
 8012272:	f101 0304 	add.w	r3, r1, #4
 8012276:	d50a      	bpl.n	801228e <_printf_i+0xce>
 8012278:	680e      	ldr	r6, [r1, #0]
 801227a:	602b      	str	r3, [r5, #0]
 801227c:	2e00      	cmp	r6, #0
 801227e:	da03      	bge.n	8012288 <_printf_i+0xc8>
 8012280:	232d      	movs	r3, #45	; 0x2d
 8012282:	4276      	negs	r6, r6
 8012284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012288:	485e      	ldr	r0, [pc, #376]	; (8012404 <_printf_i+0x244>)
 801228a:	230a      	movs	r3, #10
 801228c:	e019      	b.n	80122c2 <_printf_i+0x102>
 801228e:	680e      	ldr	r6, [r1, #0]
 8012290:	602b      	str	r3, [r5, #0]
 8012292:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012296:	bf18      	it	ne
 8012298:	b236      	sxthne	r6, r6
 801229a:	e7ef      	b.n	801227c <_printf_i+0xbc>
 801229c:	682b      	ldr	r3, [r5, #0]
 801229e:	6820      	ldr	r0, [r4, #0]
 80122a0:	1d19      	adds	r1, r3, #4
 80122a2:	6029      	str	r1, [r5, #0]
 80122a4:	0601      	lsls	r1, r0, #24
 80122a6:	d501      	bpl.n	80122ac <_printf_i+0xec>
 80122a8:	681e      	ldr	r6, [r3, #0]
 80122aa:	e002      	b.n	80122b2 <_printf_i+0xf2>
 80122ac:	0646      	lsls	r6, r0, #25
 80122ae:	d5fb      	bpl.n	80122a8 <_printf_i+0xe8>
 80122b0:	881e      	ldrh	r6, [r3, #0]
 80122b2:	4854      	ldr	r0, [pc, #336]	; (8012404 <_printf_i+0x244>)
 80122b4:	2f6f      	cmp	r7, #111	; 0x6f
 80122b6:	bf0c      	ite	eq
 80122b8:	2308      	moveq	r3, #8
 80122ba:	230a      	movne	r3, #10
 80122bc:	2100      	movs	r1, #0
 80122be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80122c2:	6865      	ldr	r5, [r4, #4]
 80122c4:	60a5      	str	r5, [r4, #8]
 80122c6:	2d00      	cmp	r5, #0
 80122c8:	bfa2      	ittt	ge
 80122ca:	6821      	ldrge	r1, [r4, #0]
 80122cc:	f021 0104 	bicge.w	r1, r1, #4
 80122d0:	6021      	strge	r1, [r4, #0]
 80122d2:	b90e      	cbnz	r6, 80122d8 <_printf_i+0x118>
 80122d4:	2d00      	cmp	r5, #0
 80122d6:	d04d      	beq.n	8012374 <_printf_i+0x1b4>
 80122d8:	4615      	mov	r5, r2
 80122da:	fbb6 f1f3 	udiv	r1, r6, r3
 80122de:	fb03 6711 	mls	r7, r3, r1, r6
 80122e2:	5dc7      	ldrb	r7, [r0, r7]
 80122e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80122e8:	4637      	mov	r7, r6
 80122ea:	42bb      	cmp	r3, r7
 80122ec:	460e      	mov	r6, r1
 80122ee:	d9f4      	bls.n	80122da <_printf_i+0x11a>
 80122f0:	2b08      	cmp	r3, #8
 80122f2:	d10b      	bne.n	801230c <_printf_i+0x14c>
 80122f4:	6823      	ldr	r3, [r4, #0]
 80122f6:	07de      	lsls	r6, r3, #31
 80122f8:	d508      	bpl.n	801230c <_printf_i+0x14c>
 80122fa:	6923      	ldr	r3, [r4, #16]
 80122fc:	6861      	ldr	r1, [r4, #4]
 80122fe:	4299      	cmp	r1, r3
 8012300:	bfde      	ittt	le
 8012302:	2330      	movle	r3, #48	; 0x30
 8012304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012308:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801230c:	1b52      	subs	r2, r2, r5
 801230e:	6122      	str	r2, [r4, #16]
 8012310:	f8cd a000 	str.w	sl, [sp]
 8012314:	464b      	mov	r3, r9
 8012316:	aa03      	add	r2, sp, #12
 8012318:	4621      	mov	r1, r4
 801231a:	4640      	mov	r0, r8
 801231c:	f7ff fee2 	bl	80120e4 <_printf_common>
 8012320:	3001      	adds	r0, #1
 8012322:	d14c      	bne.n	80123be <_printf_i+0x1fe>
 8012324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012328:	b004      	add	sp, #16
 801232a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801232e:	4835      	ldr	r0, [pc, #212]	; (8012404 <_printf_i+0x244>)
 8012330:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012334:	6829      	ldr	r1, [r5, #0]
 8012336:	6823      	ldr	r3, [r4, #0]
 8012338:	f851 6b04 	ldr.w	r6, [r1], #4
 801233c:	6029      	str	r1, [r5, #0]
 801233e:	061d      	lsls	r5, r3, #24
 8012340:	d514      	bpl.n	801236c <_printf_i+0x1ac>
 8012342:	07df      	lsls	r7, r3, #31
 8012344:	bf44      	itt	mi
 8012346:	f043 0320 	orrmi.w	r3, r3, #32
 801234a:	6023      	strmi	r3, [r4, #0]
 801234c:	b91e      	cbnz	r6, 8012356 <_printf_i+0x196>
 801234e:	6823      	ldr	r3, [r4, #0]
 8012350:	f023 0320 	bic.w	r3, r3, #32
 8012354:	6023      	str	r3, [r4, #0]
 8012356:	2310      	movs	r3, #16
 8012358:	e7b0      	b.n	80122bc <_printf_i+0xfc>
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	f043 0320 	orr.w	r3, r3, #32
 8012360:	6023      	str	r3, [r4, #0]
 8012362:	2378      	movs	r3, #120	; 0x78
 8012364:	4828      	ldr	r0, [pc, #160]	; (8012408 <_printf_i+0x248>)
 8012366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801236a:	e7e3      	b.n	8012334 <_printf_i+0x174>
 801236c:	0659      	lsls	r1, r3, #25
 801236e:	bf48      	it	mi
 8012370:	b2b6      	uxthmi	r6, r6
 8012372:	e7e6      	b.n	8012342 <_printf_i+0x182>
 8012374:	4615      	mov	r5, r2
 8012376:	e7bb      	b.n	80122f0 <_printf_i+0x130>
 8012378:	682b      	ldr	r3, [r5, #0]
 801237a:	6826      	ldr	r6, [r4, #0]
 801237c:	6961      	ldr	r1, [r4, #20]
 801237e:	1d18      	adds	r0, r3, #4
 8012380:	6028      	str	r0, [r5, #0]
 8012382:	0635      	lsls	r5, r6, #24
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	d501      	bpl.n	801238c <_printf_i+0x1cc>
 8012388:	6019      	str	r1, [r3, #0]
 801238a:	e002      	b.n	8012392 <_printf_i+0x1d2>
 801238c:	0670      	lsls	r0, r6, #25
 801238e:	d5fb      	bpl.n	8012388 <_printf_i+0x1c8>
 8012390:	8019      	strh	r1, [r3, #0]
 8012392:	2300      	movs	r3, #0
 8012394:	6123      	str	r3, [r4, #16]
 8012396:	4615      	mov	r5, r2
 8012398:	e7ba      	b.n	8012310 <_printf_i+0x150>
 801239a:	682b      	ldr	r3, [r5, #0]
 801239c:	1d1a      	adds	r2, r3, #4
 801239e:	602a      	str	r2, [r5, #0]
 80123a0:	681d      	ldr	r5, [r3, #0]
 80123a2:	6862      	ldr	r2, [r4, #4]
 80123a4:	2100      	movs	r1, #0
 80123a6:	4628      	mov	r0, r5
 80123a8:	f7ed ff22 	bl	80001f0 <memchr>
 80123ac:	b108      	cbz	r0, 80123b2 <_printf_i+0x1f2>
 80123ae:	1b40      	subs	r0, r0, r5
 80123b0:	6060      	str	r0, [r4, #4]
 80123b2:	6863      	ldr	r3, [r4, #4]
 80123b4:	6123      	str	r3, [r4, #16]
 80123b6:	2300      	movs	r3, #0
 80123b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123bc:	e7a8      	b.n	8012310 <_printf_i+0x150>
 80123be:	6923      	ldr	r3, [r4, #16]
 80123c0:	462a      	mov	r2, r5
 80123c2:	4649      	mov	r1, r9
 80123c4:	4640      	mov	r0, r8
 80123c6:	47d0      	blx	sl
 80123c8:	3001      	adds	r0, #1
 80123ca:	d0ab      	beq.n	8012324 <_printf_i+0x164>
 80123cc:	6823      	ldr	r3, [r4, #0]
 80123ce:	079b      	lsls	r3, r3, #30
 80123d0:	d413      	bmi.n	80123fa <_printf_i+0x23a>
 80123d2:	68e0      	ldr	r0, [r4, #12]
 80123d4:	9b03      	ldr	r3, [sp, #12]
 80123d6:	4298      	cmp	r0, r3
 80123d8:	bfb8      	it	lt
 80123da:	4618      	movlt	r0, r3
 80123dc:	e7a4      	b.n	8012328 <_printf_i+0x168>
 80123de:	2301      	movs	r3, #1
 80123e0:	4632      	mov	r2, r6
 80123e2:	4649      	mov	r1, r9
 80123e4:	4640      	mov	r0, r8
 80123e6:	47d0      	blx	sl
 80123e8:	3001      	adds	r0, #1
 80123ea:	d09b      	beq.n	8012324 <_printf_i+0x164>
 80123ec:	3501      	adds	r5, #1
 80123ee:	68e3      	ldr	r3, [r4, #12]
 80123f0:	9903      	ldr	r1, [sp, #12]
 80123f2:	1a5b      	subs	r3, r3, r1
 80123f4:	42ab      	cmp	r3, r5
 80123f6:	dcf2      	bgt.n	80123de <_printf_i+0x21e>
 80123f8:	e7eb      	b.n	80123d2 <_printf_i+0x212>
 80123fa:	2500      	movs	r5, #0
 80123fc:	f104 0619 	add.w	r6, r4, #25
 8012400:	e7f5      	b.n	80123ee <_printf_i+0x22e>
 8012402:	bf00      	nop
 8012404:	080134d5 	.word	0x080134d5
 8012408:	080134e6 	.word	0x080134e6

0801240c <_putc_r>:
 801240c:	b570      	push	{r4, r5, r6, lr}
 801240e:	460d      	mov	r5, r1
 8012410:	4614      	mov	r4, r2
 8012412:	4606      	mov	r6, r0
 8012414:	b118      	cbz	r0, 801241e <_putc_r+0x12>
 8012416:	6983      	ldr	r3, [r0, #24]
 8012418:	b90b      	cbnz	r3, 801241e <_putc_r+0x12>
 801241a:	f7ff fa9b 	bl	8011954 <__sinit>
 801241e:	4b1c      	ldr	r3, [pc, #112]	; (8012490 <_putc_r+0x84>)
 8012420:	429c      	cmp	r4, r3
 8012422:	d124      	bne.n	801246e <_putc_r+0x62>
 8012424:	6874      	ldr	r4, [r6, #4]
 8012426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012428:	07d8      	lsls	r0, r3, #31
 801242a:	d405      	bmi.n	8012438 <_putc_r+0x2c>
 801242c:	89a3      	ldrh	r3, [r4, #12]
 801242e:	0599      	lsls	r1, r3, #22
 8012430:	d402      	bmi.n	8012438 <_putc_r+0x2c>
 8012432:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012434:	f7ff fb2c 	bl	8011a90 <__retarget_lock_acquire_recursive>
 8012438:	68a3      	ldr	r3, [r4, #8]
 801243a:	3b01      	subs	r3, #1
 801243c:	2b00      	cmp	r3, #0
 801243e:	60a3      	str	r3, [r4, #8]
 8012440:	da05      	bge.n	801244e <_putc_r+0x42>
 8012442:	69a2      	ldr	r2, [r4, #24]
 8012444:	4293      	cmp	r3, r2
 8012446:	db1c      	blt.n	8012482 <_putc_r+0x76>
 8012448:	b2eb      	uxtb	r3, r5
 801244a:	2b0a      	cmp	r3, #10
 801244c:	d019      	beq.n	8012482 <_putc_r+0x76>
 801244e:	6823      	ldr	r3, [r4, #0]
 8012450:	1c5a      	adds	r2, r3, #1
 8012452:	6022      	str	r2, [r4, #0]
 8012454:	701d      	strb	r5, [r3, #0]
 8012456:	b2ed      	uxtb	r5, r5
 8012458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801245a:	07da      	lsls	r2, r3, #31
 801245c:	d405      	bmi.n	801246a <_putc_r+0x5e>
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	059b      	lsls	r3, r3, #22
 8012462:	d402      	bmi.n	801246a <_putc_r+0x5e>
 8012464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012466:	f7ff fb14 	bl	8011a92 <__retarget_lock_release_recursive>
 801246a:	4628      	mov	r0, r5
 801246c:	bd70      	pop	{r4, r5, r6, pc}
 801246e:	4b09      	ldr	r3, [pc, #36]	; (8012494 <_putc_r+0x88>)
 8012470:	429c      	cmp	r4, r3
 8012472:	d101      	bne.n	8012478 <_putc_r+0x6c>
 8012474:	68b4      	ldr	r4, [r6, #8]
 8012476:	e7d6      	b.n	8012426 <_putc_r+0x1a>
 8012478:	4b07      	ldr	r3, [pc, #28]	; (8012498 <_putc_r+0x8c>)
 801247a:	429c      	cmp	r4, r3
 801247c:	bf08      	it	eq
 801247e:	68f4      	ldreq	r4, [r6, #12]
 8012480:	e7d1      	b.n	8012426 <_putc_r+0x1a>
 8012482:	4629      	mov	r1, r5
 8012484:	4622      	mov	r2, r4
 8012486:	4630      	mov	r0, r6
 8012488:	f000 f84c 	bl	8012524 <__swbuf_r>
 801248c:	4605      	mov	r5, r0
 801248e:	e7e3      	b.n	8012458 <_putc_r+0x4c>
 8012490:	08013484 	.word	0x08013484
 8012494:	080134a4 	.word	0x080134a4
 8012498:	08013464 	.word	0x08013464

0801249c <__sread>:
 801249c:	b510      	push	{r4, lr}
 801249e:	460c      	mov	r4, r1
 80124a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124a4:	f000 f99e 	bl	80127e4 <_read_r>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	bfab      	itete	ge
 80124ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80124ae:	89a3      	ldrhlt	r3, [r4, #12]
 80124b0:	181b      	addge	r3, r3, r0
 80124b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80124b6:	bfac      	ite	ge
 80124b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80124ba:	81a3      	strhlt	r3, [r4, #12]
 80124bc:	bd10      	pop	{r4, pc}

080124be <__swrite>:
 80124be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124c2:	461f      	mov	r7, r3
 80124c4:	898b      	ldrh	r3, [r1, #12]
 80124c6:	05db      	lsls	r3, r3, #23
 80124c8:	4605      	mov	r5, r0
 80124ca:	460c      	mov	r4, r1
 80124cc:	4616      	mov	r6, r2
 80124ce:	d505      	bpl.n	80124dc <__swrite+0x1e>
 80124d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124d4:	2302      	movs	r3, #2
 80124d6:	2200      	movs	r2, #0
 80124d8:	f000 f928 	bl	801272c <_lseek_r>
 80124dc:	89a3      	ldrh	r3, [r4, #12]
 80124de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80124e6:	81a3      	strh	r3, [r4, #12]
 80124e8:	4632      	mov	r2, r6
 80124ea:	463b      	mov	r3, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124f2:	f000 b869 	b.w	80125c8 <_write_r>

080124f6 <__sseek>:
 80124f6:	b510      	push	{r4, lr}
 80124f8:	460c      	mov	r4, r1
 80124fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124fe:	f000 f915 	bl	801272c <_lseek_r>
 8012502:	1c43      	adds	r3, r0, #1
 8012504:	89a3      	ldrh	r3, [r4, #12]
 8012506:	bf15      	itete	ne
 8012508:	6560      	strne	r0, [r4, #84]	; 0x54
 801250a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801250e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012512:	81a3      	strheq	r3, [r4, #12]
 8012514:	bf18      	it	ne
 8012516:	81a3      	strhne	r3, [r4, #12]
 8012518:	bd10      	pop	{r4, pc}

0801251a <__sclose>:
 801251a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801251e:	f000 b8d3 	b.w	80126c8 <_close_r>
	...

08012524 <__swbuf_r>:
 8012524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012526:	460e      	mov	r6, r1
 8012528:	4614      	mov	r4, r2
 801252a:	4605      	mov	r5, r0
 801252c:	b118      	cbz	r0, 8012536 <__swbuf_r+0x12>
 801252e:	6983      	ldr	r3, [r0, #24]
 8012530:	b90b      	cbnz	r3, 8012536 <__swbuf_r+0x12>
 8012532:	f7ff fa0f 	bl	8011954 <__sinit>
 8012536:	4b21      	ldr	r3, [pc, #132]	; (80125bc <__swbuf_r+0x98>)
 8012538:	429c      	cmp	r4, r3
 801253a:	d12b      	bne.n	8012594 <__swbuf_r+0x70>
 801253c:	686c      	ldr	r4, [r5, #4]
 801253e:	69a3      	ldr	r3, [r4, #24]
 8012540:	60a3      	str	r3, [r4, #8]
 8012542:	89a3      	ldrh	r3, [r4, #12]
 8012544:	071a      	lsls	r2, r3, #28
 8012546:	d52f      	bpl.n	80125a8 <__swbuf_r+0x84>
 8012548:	6923      	ldr	r3, [r4, #16]
 801254a:	b36b      	cbz	r3, 80125a8 <__swbuf_r+0x84>
 801254c:	6923      	ldr	r3, [r4, #16]
 801254e:	6820      	ldr	r0, [r4, #0]
 8012550:	1ac0      	subs	r0, r0, r3
 8012552:	6963      	ldr	r3, [r4, #20]
 8012554:	b2f6      	uxtb	r6, r6
 8012556:	4283      	cmp	r3, r0
 8012558:	4637      	mov	r7, r6
 801255a:	dc04      	bgt.n	8012566 <__swbuf_r+0x42>
 801255c:	4621      	mov	r1, r4
 801255e:	4628      	mov	r0, r5
 8012560:	f7ff f964 	bl	801182c <_fflush_r>
 8012564:	bb30      	cbnz	r0, 80125b4 <__swbuf_r+0x90>
 8012566:	68a3      	ldr	r3, [r4, #8]
 8012568:	3b01      	subs	r3, #1
 801256a:	60a3      	str	r3, [r4, #8]
 801256c:	6823      	ldr	r3, [r4, #0]
 801256e:	1c5a      	adds	r2, r3, #1
 8012570:	6022      	str	r2, [r4, #0]
 8012572:	701e      	strb	r6, [r3, #0]
 8012574:	6963      	ldr	r3, [r4, #20]
 8012576:	3001      	adds	r0, #1
 8012578:	4283      	cmp	r3, r0
 801257a:	d004      	beq.n	8012586 <__swbuf_r+0x62>
 801257c:	89a3      	ldrh	r3, [r4, #12]
 801257e:	07db      	lsls	r3, r3, #31
 8012580:	d506      	bpl.n	8012590 <__swbuf_r+0x6c>
 8012582:	2e0a      	cmp	r6, #10
 8012584:	d104      	bne.n	8012590 <__swbuf_r+0x6c>
 8012586:	4621      	mov	r1, r4
 8012588:	4628      	mov	r0, r5
 801258a:	f7ff f94f 	bl	801182c <_fflush_r>
 801258e:	b988      	cbnz	r0, 80125b4 <__swbuf_r+0x90>
 8012590:	4638      	mov	r0, r7
 8012592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012594:	4b0a      	ldr	r3, [pc, #40]	; (80125c0 <__swbuf_r+0x9c>)
 8012596:	429c      	cmp	r4, r3
 8012598:	d101      	bne.n	801259e <__swbuf_r+0x7a>
 801259a:	68ac      	ldr	r4, [r5, #8]
 801259c:	e7cf      	b.n	801253e <__swbuf_r+0x1a>
 801259e:	4b09      	ldr	r3, [pc, #36]	; (80125c4 <__swbuf_r+0xa0>)
 80125a0:	429c      	cmp	r4, r3
 80125a2:	bf08      	it	eq
 80125a4:	68ec      	ldreq	r4, [r5, #12]
 80125a6:	e7ca      	b.n	801253e <__swbuf_r+0x1a>
 80125a8:	4621      	mov	r1, r4
 80125aa:	4628      	mov	r0, r5
 80125ac:	f000 f81e 	bl	80125ec <__swsetup_r>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d0cb      	beq.n	801254c <__swbuf_r+0x28>
 80125b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80125b8:	e7ea      	b.n	8012590 <__swbuf_r+0x6c>
 80125ba:	bf00      	nop
 80125bc:	08013484 	.word	0x08013484
 80125c0:	080134a4 	.word	0x080134a4
 80125c4:	08013464 	.word	0x08013464

080125c8 <_write_r>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	4d07      	ldr	r5, [pc, #28]	; (80125e8 <_write_r+0x20>)
 80125cc:	4604      	mov	r4, r0
 80125ce:	4608      	mov	r0, r1
 80125d0:	4611      	mov	r1, r2
 80125d2:	2200      	movs	r2, #0
 80125d4:	602a      	str	r2, [r5, #0]
 80125d6:	461a      	mov	r2, r3
 80125d8:	f7f0 fcbe 	bl	8002f58 <_write>
 80125dc:	1c43      	adds	r3, r0, #1
 80125de:	d102      	bne.n	80125e6 <_write_r+0x1e>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	b103      	cbz	r3, 80125e6 <_write_r+0x1e>
 80125e4:	6023      	str	r3, [r4, #0]
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	20003f44 	.word	0x20003f44

080125ec <__swsetup_r>:
 80125ec:	4b32      	ldr	r3, [pc, #200]	; (80126b8 <__swsetup_r+0xcc>)
 80125ee:	b570      	push	{r4, r5, r6, lr}
 80125f0:	681d      	ldr	r5, [r3, #0]
 80125f2:	4606      	mov	r6, r0
 80125f4:	460c      	mov	r4, r1
 80125f6:	b125      	cbz	r5, 8012602 <__swsetup_r+0x16>
 80125f8:	69ab      	ldr	r3, [r5, #24]
 80125fa:	b913      	cbnz	r3, 8012602 <__swsetup_r+0x16>
 80125fc:	4628      	mov	r0, r5
 80125fe:	f7ff f9a9 	bl	8011954 <__sinit>
 8012602:	4b2e      	ldr	r3, [pc, #184]	; (80126bc <__swsetup_r+0xd0>)
 8012604:	429c      	cmp	r4, r3
 8012606:	d10f      	bne.n	8012628 <__swsetup_r+0x3c>
 8012608:	686c      	ldr	r4, [r5, #4]
 801260a:	89a3      	ldrh	r3, [r4, #12]
 801260c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012610:	0719      	lsls	r1, r3, #28
 8012612:	d42c      	bmi.n	801266e <__swsetup_r+0x82>
 8012614:	06dd      	lsls	r5, r3, #27
 8012616:	d411      	bmi.n	801263c <__swsetup_r+0x50>
 8012618:	2309      	movs	r3, #9
 801261a:	6033      	str	r3, [r6, #0]
 801261c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012620:	81a3      	strh	r3, [r4, #12]
 8012622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012626:	e03e      	b.n	80126a6 <__swsetup_r+0xba>
 8012628:	4b25      	ldr	r3, [pc, #148]	; (80126c0 <__swsetup_r+0xd4>)
 801262a:	429c      	cmp	r4, r3
 801262c:	d101      	bne.n	8012632 <__swsetup_r+0x46>
 801262e:	68ac      	ldr	r4, [r5, #8]
 8012630:	e7eb      	b.n	801260a <__swsetup_r+0x1e>
 8012632:	4b24      	ldr	r3, [pc, #144]	; (80126c4 <__swsetup_r+0xd8>)
 8012634:	429c      	cmp	r4, r3
 8012636:	bf08      	it	eq
 8012638:	68ec      	ldreq	r4, [r5, #12]
 801263a:	e7e6      	b.n	801260a <__swsetup_r+0x1e>
 801263c:	0758      	lsls	r0, r3, #29
 801263e:	d512      	bpl.n	8012666 <__swsetup_r+0x7a>
 8012640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012642:	b141      	cbz	r1, 8012656 <__swsetup_r+0x6a>
 8012644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012648:	4299      	cmp	r1, r3
 801264a:	d002      	beq.n	8012652 <__swsetup_r+0x66>
 801264c:	4630      	mov	r0, r6
 801264e:	f7fe fdd7 	bl	8011200 <_free_r>
 8012652:	2300      	movs	r3, #0
 8012654:	6363      	str	r3, [r4, #52]	; 0x34
 8012656:	89a3      	ldrh	r3, [r4, #12]
 8012658:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801265c:	81a3      	strh	r3, [r4, #12]
 801265e:	2300      	movs	r3, #0
 8012660:	6063      	str	r3, [r4, #4]
 8012662:	6923      	ldr	r3, [r4, #16]
 8012664:	6023      	str	r3, [r4, #0]
 8012666:	89a3      	ldrh	r3, [r4, #12]
 8012668:	f043 0308 	orr.w	r3, r3, #8
 801266c:	81a3      	strh	r3, [r4, #12]
 801266e:	6923      	ldr	r3, [r4, #16]
 8012670:	b94b      	cbnz	r3, 8012686 <__swsetup_r+0x9a>
 8012672:	89a3      	ldrh	r3, [r4, #12]
 8012674:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801267c:	d003      	beq.n	8012686 <__swsetup_r+0x9a>
 801267e:	4621      	mov	r1, r4
 8012680:	4630      	mov	r0, r6
 8012682:	f7ff fa2d 	bl	8011ae0 <__smakebuf_r>
 8012686:	89a0      	ldrh	r0, [r4, #12]
 8012688:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801268c:	f010 0301 	ands.w	r3, r0, #1
 8012690:	d00a      	beq.n	80126a8 <__swsetup_r+0xbc>
 8012692:	2300      	movs	r3, #0
 8012694:	60a3      	str	r3, [r4, #8]
 8012696:	6963      	ldr	r3, [r4, #20]
 8012698:	425b      	negs	r3, r3
 801269a:	61a3      	str	r3, [r4, #24]
 801269c:	6923      	ldr	r3, [r4, #16]
 801269e:	b943      	cbnz	r3, 80126b2 <__swsetup_r+0xc6>
 80126a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80126a4:	d1ba      	bne.n	801261c <__swsetup_r+0x30>
 80126a6:	bd70      	pop	{r4, r5, r6, pc}
 80126a8:	0781      	lsls	r1, r0, #30
 80126aa:	bf58      	it	pl
 80126ac:	6963      	ldrpl	r3, [r4, #20]
 80126ae:	60a3      	str	r3, [r4, #8]
 80126b0:	e7f4      	b.n	801269c <__swsetup_r+0xb0>
 80126b2:	2000      	movs	r0, #0
 80126b4:	e7f7      	b.n	80126a6 <__swsetup_r+0xba>
 80126b6:	bf00      	nop
 80126b8:	20000118 	.word	0x20000118
 80126bc:	08013484 	.word	0x08013484
 80126c0:	080134a4 	.word	0x080134a4
 80126c4:	08013464 	.word	0x08013464

080126c8 <_close_r>:
 80126c8:	b538      	push	{r3, r4, r5, lr}
 80126ca:	4d06      	ldr	r5, [pc, #24]	; (80126e4 <_close_r+0x1c>)
 80126cc:	2300      	movs	r3, #0
 80126ce:	4604      	mov	r4, r0
 80126d0:	4608      	mov	r0, r1
 80126d2:	602b      	str	r3, [r5, #0]
 80126d4:	f7f0 fc6c 	bl	8002fb0 <_close>
 80126d8:	1c43      	adds	r3, r0, #1
 80126da:	d102      	bne.n	80126e2 <_close_r+0x1a>
 80126dc:	682b      	ldr	r3, [r5, #0]
 80126de:	b103      	cbz	r3, 80126e2 <_close_r+0x1a>
 80126e0:	6023      	str	r3, [r4, #0]
 80126e2:	bd38      	pop	{r3, r4, r5, pc}
 80126e4:	20003f44 	.word	0x20003f44

080126e8 <_fstat_r>:
 80126e8:	b538      	push	{r3, r4, r5, lr}
 80126ea:	4d07      	ldr	r5, [pc, #28]	; (8012708 <_fstat_r+0x20>)
 80126ec:	2300      	movs	r3, #0
 80126ee:	4604      	mov	r4, r0
 80126f0:	4608      	mov	r0, r1
 80126f2:	4611      	mov	r1, r2
 80126f4:	602b      	str	r3, [r5, #0]
 80126f6:	f7f0 fcab 	bl	8003050 <_fstat>
 80126fa:	1c43      	adds	r3, r0, #1
 80126fc:	d102      	bne.n	8012704 <_fstat_r+0x1c>
 80126fe:	682b      	ldr	r3, [r5, #0]
 8012700:	b103      	cbz	r3, 8012704 <_fstat_r+0x1c>
 8012702:	6023      	str	r3, [r4, #0]
 8012704:	bd38      	pop	{r3, r4, r5, pc}
 8012706:	bf00      	nop
 8012708:	20003f44 	.word	0x20003f44

0801270c <_isatty_r>:
 801270c:	b538      	push	{r3, r4, r5, lr}
 801270e:	4d06      	ldr	r5, [pc, #24]	; (8012728 <_isatty_r+0x1c>)
 8012710:	2300      	movs	r3, #0
 8012712:	4604      	mov	r4, r0
 8012714:	4608      	mov	r0, r1
 8012716:	602b      	str	r3, [r5, #0]
 8012718:	f7f0 fc08 	bl	8002f2c <_isatty>
 801271c:	1c43      	adds	r3, r0, #1
 801271e:	d102      	bne.n	8012726 <_isatty_r+0x1a>
 8012720:	682b      	ldr	r3, [r5, #0]
 8012722:	b103      	cbz	r3, 8012726 <_isatty_r+0x1a>
 8012724:	6023      	str	r3, [r4, #0]
 8012726:	bd38      	pop	{r3, r4, r5, pc}
 8012728:	20003f44 	.word	0x20003f44

0801272c <_lseek_r>:
 801272c:	b538      	push	{r3, r4, r5, lr}
 801272e:	4d07      	ldr	r5, [pc, #28]	; (801274c <_lseek_r+0x20>)
 8012730:	4604      	mov	r4, r0
 8012732:	4608      	mov	r0, r1
 8012734:	4611      	mov	r1, r2
 8012736:	2200      	movs	r2, #0
 8012738:	602a      	str	r2, [r5, #0]
 801273a:	461a      	mov	r2, r3
 801273c:	f7f0 fc4f 	bl	8002fde <_lseek>
 8012740:	1c43      	adds	r3, r0, #1
 8012742:	d102      	bne.n	801274a <_lseek_r+0x1e>
 8012744:	682b      	ldr	r3, [r5, #0]
 8012746:	b103      	cbz	r3, 801274a <_lseek_r+0x1e>
 8012748:	6023      	str	r3, [r4, #0]
 801274a:	bd38      	pop	{r3, r4, r5, pc}
 801274c:	20003f44 	.word	0x20003f44

08012750 <memmove>:
 8012750:	4288      	cmp	r0, r1
 8012752:	b510      	push	{r4, lr}
 8012754:	eb01 0402 	add.w	r4, r1, r2
 8012758:	d902      	bls.n	8012760 <memmove+0x10>
 801275a:	4284      	cmp	r4, r0
 801275c:	4623      	mov	r3, r4
 801275e:	d807      	bhi.n	8012770 <memmove+0x20>
 8012760:	1e43      	subs	r3, r0, #1
 8012762:	42a1      	cmp	r1, r4
 8012764:	d008      	beq.n	8012778 <memmove+0x28>
 8012766:	f811 2b01 	ldrb.w	r2, [r1], #1
 801276a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801276e:	e7f8      	b.n	8012762 <memmove+0x12>
 8012770:	4402      	add	r2, r0
 8012772:	4601      	mov	r1, r0
 8012774:	428a      	cmp	r2, r1
 8012776:	d100      	bne.n	801277a <memmove+0x2a>
 8012778:	bd10      	pop	{r4, pc}
 801277a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801277e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012782:	e7f7      	b.n	8012774 <memmove+0x24>

08012784 <_realloc_r>:
 8012784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012788:	4680      	mov	r8, r0
 801278a:	4614      	mov	r4, r2
 801278c:	460e      	mov	r6, r1
 801278e:	b921      	cbnz	r1, 801279a <_realloc_r+0x16>
 8012790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012794:	4611      	mov	r1, r2
 8012796:	f7fe bd9f 	b.w	80112d8 <_malloc_r>
 801279a:	b92a      	cbnz	r2, 80127a8 <_realloc_r+0x24>
 801279c:	f7fe fd30 	bl	8011200 <_free_r>
 80127a0:	4625      	mov	r5, r4
 80127a2:	4628      	mov	r0, r5
 80127a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127a8:	f000 f82e 	bl	8012808 <_malloc_usable_size_r>
 80127ac:	4284      	cmp	r4, r0
 80127ae:	4607      	mov	r7, r0
 80127b0:	d802      	bhi.n	80127b8 <_realloc_r+0x34>
 80127b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127b6:	d812      	bhi.n	80127de <_realloc_r+0x5a>
 80127b8:	4621      	mov	r1, r4
 80127ba:	4640      	mov	r0, r8
 80127bc:	f7fe fd8c 	bl	80112d8 <_malloc_r>
 80127c0:	4605      	mov	r5, r0
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d0ed      	beq.n	80127a2 <_realloc_r+0x1e>
 80127c6:	42bc      	cmp	r4, r7
 80127c8:	4622      	mov	r2, r4
 80127ca:	4631      	mov	r1, r6
 80127cc:	bf28      	it	cs
 80127ce:	463a      	movcs	r2, r7
 80127d0:	f7fe fd00 	bl	80111d4 <memcpy>
 80127d4:	4631      	mov	r1, r6
 80127d6:	4640      	mov	r0, r8
 80127d8:	f7fe fd12 	bl	8011200 <_free_r>
 80127dc:	e7e1      	b.n	80127a2 <_realloc_r+0x1e>
 80127de:	4635      	mov	r5, r6
 80127e0:	e7df      	b.n	80127a2 <_realloc_r+0x1e>
	...

080127e4 <_read_r>:
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	4d07      	ldr	r5, [pc, #28]	; (8012804 <_read_r+0x20>)
 80127e8:	4604      	mov	r4, r0
 80127ea:	4608      	mov	r0, r1
 80127ec:	4611      	mov	r1, r2
 80127ee:	2200      	movs	r2, #0
 80127f0:	602a      	str	r2, [r5, #0]
 80127f2:	461a      	mov	r2, r3
 80127f4:	f7f0 fc04 	bl	8003000 <_read>
 80127f8:	1c43      	adds	r3, r0, #1
 80127fa:	d102      	bne.n	8012802 <_read_r+0x1e>
 80127fc:	682b      	ldr	r3, [r5, #0]
 80127fe:	b103      	cbz	r3, 8012802 <_read_r+0x1e>
 8012800:	6023      	str	r3, [r4, #0]
 8012802:	bd38      	pop	{r3, r4, r5, pc}
 8012804:	20003f44 	.word	0x20003f44

08012808 <_malloc_usable_size_r>:
 8012808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801280c:	1f18      	subs	r0, r3, #4
 801280e:	2b00      	cmp	r3, #0
 8012810:	bfbc      	itt	lt
 8012812:	580b      	ldrlt	r3, [r1, r0]
 8012814:	18c0      	addlt	r0, r0, r3
 8012816:	4770      	bx	lr

08012818 <_init>:
 8012818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281a:	bf00      	nop
 801281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801281e:	bc08      	pop	{r3}
 8012820:	469e      	mov	lr, r3
 8012822:	4770      	bx	lr

08012824 <_fini>:
 8012824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012826:	bf00      	nop
 8012828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801282a:	bc08      	pop	{r3}
 801282c:	469e      	mov	lr, r3
 801282e:	4770      	bx	lr
